0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 32 0F               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   1E                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5B                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   76                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   9E                     DB   lsb(star_)   ; *     1
018A   C2                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   80                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   DE                     DB   lsb(colon_)   ; :     2
019A   F9                     DB   lsb(semicolon_)   ; ;     2
019B   49                     DB   lsb(lt_)   ; <     1
019C   2F                     DB   lsb(eq_)   ; =     1
019D   3E                     DB   lsb(gt_)   ; >     1
019E   1B                     DB   lsb(question_)   ; ?     1
019F   F6                     DB   lsb(at_)   ; @     2
01A0   F4                     DB   lsb(upcase_)   ; A     1
01A1   F4                     DB   lsb(upcase_)   ; B
01A2   F4                     DB   lsb(upcase_)   ; C
01A3   F4                     DB   lsb(upcase_)   ; D
01A4   F4                     DB   lsb(upcase_)   ; E
01A5   F4                     DB   lsb(upcase_)   ; F
01A6   F4                     DB   lsb(upcase_)   ; G
01A7   F4                     DB   lsb(upcase_)   ; h
01A8   F4                     DB   lsb(upcase_)   ; I
01A9   F4                     DB   lsb(upcase_)   ; J
01AA   F4                     DB   lsb(upcase_)   ; K
01AB   F4                     DB   lsb(upcase_)   ; L
01AC   F4                     DB   lsb(upcase_)   ; M
01AD   F4                     DB   lsb(upcase_)   ; N
01AE   F4                     DB   lsb(upcase_)   ; O
01AF   F4                     DB   lsb(upcase_)   ; p
01B0   F4                     DB   lsb(upcase_)   ; Q
01B1   F4                     DB   lsb(upcase_)   ; R
01B2   F4                     DB   lsb(upcase_)   ; S
01B3   F4                     DB   lsb(upcase_)   ; T
01B4   F4                     DB   lsb(upcase_)   ; U
01B5   F4                     DB   lsb(upcase_)   ; V
01B6   F4                     DB   lsb(upcase_)   ; W
01B7   F4                     DB   lsb(upcase_)   ; X
01B8   F4                     DB   lsb(upcase_)   ; Y
01B9   F4                     DB   lsb(upcase_)   ; Z
01BA   1F                     DB   lsb(lbrack_)   ; [     2
01BB   3B                     DB   lsb(backslash_)   ; \     2
01BC   5C                     DB   lsb(rbrack_)   ; ]     2
01BD   AC                     DB   lsb(caret_)   ; ^     1
01BE   EE                     DB   lsb(underscore_)   ; _     2
01BF   C2                     DB   lsb(grave_)   ; `     2   	
01C0   0D                     DB   lsb(lowcase_)   ; a     1
01C1   0D                     DB   lsb(lowcase_)   ; b
01C2   0D                     DB   lsb(lowcase_)   ; c
01C3   0D                     DB   lsb(lowcase_)   ; d
01C4   0D                     DB   lsb(lowcase_)   ; e
01C5   0D                     DB   lsb(lowcase_)   ; f
01C6   0D                     DB   lsb(lowcase_)   ; g
01C7   0D                     DB   lsb(lowcase_)   ; h
01C8   0D                     DB   lsb(lowcase_)   ; i
01C9   0D                     DB   lsb(lowcase_)   ; j
01CA   0D                     DB   lsb(lowcase_)   ; k
01CB   0D                     DB   lsb(lowcase_)   ; l
01CC   0D                     DB   lsb(lowcase_)   ; m
01CD   0D                     DB   lsb(lowcase_)   ; n
01CE   0D                     DB   lsb(lowcase_)   ; o
01CF   0D                     DB   lsb(lowcase_)   ; p
01D0   0D                     DB   lsb(lowcase_)   ; q
01D1   0D                     DB   lsb(lowcase_)   ; r
01D2   0D                     DB   lsb(lowcase_)   ; s
01D3   0D                     DB   lsb(lowcase_)   ; t
01D4   0D                     DB   lsb(lowcase_)   ; u
01D5   0D                     DB   lsb(lowcase_)   ; v
01D6   0D                     DB   lsb(lowcase_)   ; w
01D7   0D                     DB   lsb(lowcase_)   ; x
01D8   0D                     DB   lsb(lowcase_)   ; y
01D9   0D                     DB   lsb(lowcase_)   ; z
01DA   D8                     DB   lsb(lbrace_)   ; {     1
01DB   DD                     DB   lsb(pipe_)   ; |     1
01DC   E8                     DB   lsb(rbrace_)   ; }     1
01DD   EB                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   BE 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 BB 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 0B 0B               JP   percent   
020C                QUOTE_:      
020C   C3 F1 0A               JP   quote   
020F                LPAREN_:      
020F   C3 D8 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 40 0B               JP   num   
021B                QUESTION_:      
021B   C3 D8 0A               JP   question   
021E                BANG_:       
021E                BANG:        ; logical invert, any non zero value
021E   03                     INC   bc   
021F   0A                     LD   a,(bc)   
0220   FE 3D                  CP   "="   
0222   20 05                  JR   nz,not   
0224   E1                     POP   hl   
0225   D1                     POP   de   
0226   C3 82 0C               JP   notequals   
0229                NOT:         
0229   0B                     DEC   bc   
022A   21 00 00               LD   hl,0   ; is considered true
022D   18 0B                  JR   eq1   
022F                EQ_:         
022F                EQ:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3D                  CP   "="   
0233   28 04                  JR   z,eq0   
0235   0B                     DEC   bc   
0236   C3 6A 0C               JP   assign   
0239                EQ0:         
0239   E1                     POP   hl   
023A                EQ1:         
023A   D1                     POP   de   
023B   C3 7B 0C               JP   equals   
023E                GT_:         
023E                GT:          
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3E                  CP   ">"   
0242   CA D6 0C               JP   z,shiftRight   
0245   D1                     POP   de   
0246   E1                     POP   hl   
0247   18 09                  JR   lt1   
0249                LT_:         
0249                LT:          
0249   03                     INC   bc   
024A   0A                     LD   a,(bc)   
024B   FE 3C                  CP   "<"   
024D   CA C6 0C               JP   z,shiftLeft   
0250   E1                     POP   hl   
0251   D1                     POP   de   
0252                LT1:         
0252   FE 3D                  CP   "="   
0254   CA 89 0C               JP   z,lessthaneq   
0257   0B                     DEC   bc   
0258   C3 8E 0C               JP   lessthan   
025B                             ; index of an array, based on vDataWidth 22
025B                             ; array* num -- value    ; also sets vPointer to address
025B                HASH_:       
025B                HASH:        
025B                ARRAYINDEX:      
025B   E1                     POP   hl   ; hl = index
025C   D1                     POP   de   ; de = array
025D   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0260   3D                     DEC   a   
0261   28 01                  JR   z,arrayIndex1   
0263                ARRAYINDEX0:      
0263   29                     ADD   hl,hl   ; if data width = 2 then double
0264                ARRAYINDEX1:      
0264   19                     ADD   hl,de   ; add addr
0265   22 F8 23               LD   (vPointer),hl   ; store address in setter
0268   16 00                  LD   d,0   
026A   5E                     LD   e,(hl)   
026B   B7                     OR   a   ; check data width again
026C   28 02                  JR   z,arrayIndex2   
026E   23                     INC   hl   
026F   56                     LD   d,(hl)   
0270                ARRAYINDEX2:      
0270   D5                     PUSH   de   
0271   DD E9                  JP   (ix)   
0273                             ;                               4
0273                RPAREN_:      
0273   C3 A9 0A               JP   rparen   
0276                             ; & and                          14
0276                             ; a b -- c
0276                AMPER_:      
0276                AMPER:       
0276                AND:         
0276   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0277   E1                     POP   hl   
0278   7B                     LD   a,e   
0279   A5                     AND   l   
027A   6F                     LD   l,a   
027B   7A                     LD   a,d   
027C   A4                     AND   h   
027D   67                     LD   h,a   
027E   18 51                  JR   add3   
0280                             ; - sub                          23
0280                             ; a b -- c
0280                MINUS_:      
0280                MINUS:       
0280   03                     INC   bc   ; check if sign of a number
0281   0A                     LD   a,(bc)   
0282   0B                     DEC   bc   
0283   FE 30                  CP   "0"   
0285   38 05                  JR   c,sub   
0287   FE 3A                  CP   "9"+1   
0289   DA 40 0B               JP   c,num   
028C                SUB:         ; Subtract the value 2nd on stack from top of stack
028C   03                     INC   bc   
028D   FE 2D                  CP   "-"   
028F   20 05                  JR   nz,sub1   
0291   E1                     POP   hl   
0292   2B                     DEC   hl   
0293   C3 6C 0C               JP   assign0   
0296                SUB1:        
0296   0B                     DEC   bc   
0297   D1                     POP   de   
0298   E1                     POP   hl   
0299   B7                     OR   a   
029A   ED 52                  SBC   hl,de   
029C   18 33                  JR   add3   
029E                STAR_:       ; 21
029E                STAR:        
029E   03                     INC   bc   ; check for ** spread
029F   0A                     LD   a,(bc)   
02A0   FE 2A                  CP   "*"   
02A2   CA A2 0C               JP   z,spread   
02A5   0B                     DEC   bc   
02A6                MUL:         
02A6   D1                     POP   de   ; get first value
02A7   E1                     POP   hl   
02A8                MUL2:        
02A8   C5                     PUSH   bc   ; Preserve the IP
02A9   44 4D                  LD   bc,hl   ; bc = 2nd value
02AB   21 00 00               LD   hl,0   
02AE   3E 10                  LD   a,16   
02B0                MUL3:        
02B0   29                     ADD   hl,hl   
02B1   CB 13                  RL   e   
02B3   CB 12                  RL   d   
02B5   30 04                  JR   nc,$+6   
02B7   09                     ADD   hl,bc   
02B8   30 01                  JR   nc,$+3   
02BA   13                     INC   de   
02BB   3D                     DEC   a   
02BC   20 F2                  JR   nz,mul3   
02BE   C1                     POP   bc   ; Restore the IP
02BF   C3 D1 02               JP   add3   
02C2                             ; + add                         25
02C2                             ; a b -- c
02C2                PLUS_:       
02C2                PLUS:        
02C2                ADD:         
02C2   03                     INC   bc   
02C3   0A                     LD   a,(bc)   
02C4   FE 2B                  CP   "+"   ; ++ increment variable
02C6   20 05                  JR   nz,add1   
02C8   E1                     POP   hl   
02C9   23                     INC   hl   
02CA   C3 6C 0C               JP   assign0   
02CD                ADD1:        
02CD   0B                     DEC   bc   
02CE   D1                     POP   de   ; second term
02CF   E1                     POP   hl   ; first term
02D0   19                     ADD   hl,de   
02D1                ADD3:        
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 3D                  CP   "="   
02D5   28 04                  JR   z,add4   
02D7   0B                     DEC   bc   
02D8   E5                     PUSH   hl   
02D9   DD E9                  JP   (ix)   
02DB                ADD4:        
02DB   C3 6C 0C               JP   assign0   
02DE                COLON_:      
02DE                COLON:       
02DE   03                     INC   bc   ; arg_list must ve immediately followed by {
02DF   0A                     LD   a,(bc)   
02E0   FE 3D                  CP   "="   ; := definition
02E2   28 07                  JR   z,defineStart   
02E4   0B                     DEC   bc   
02E5   21 01 00               LD   hl,1   
02E8   C3 E2 0F               JP   error   
02EB                DEFINESTART:      
02EB   E1                     POP   hl   ; discard variable value
02EC   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
02EF   22 F4 23               LD   (vDefine),hl   
02F2   DD E9                  JP   (ix)   
02F4                             ;                               18
02F4                UPCASE_:      
02F4                UPCASE:      
02F4   0A                     LD   a,(bc)   ; a = identifier char
02F5   D6 41                  SUB   "A"   ; "A" = 0
02F7   18 19                  JR   ident1   
02F9                             ; ;
02F9                SEMICOLON_:      
02F9                             ; jp semicolon
02F9                SEMICOLON:      
02F9                DEFINEEND:      
02F9   2A F4 23               LD   hl,(vDefine)   ; hl = define*
02FC   7D                     LD   a,l   
02FD   B4                     OR   h   
02FE   28 0B                  JR   z,defineEnd1   
0300   11 00 00               LD   de,NUL   ; set vDefine=NUL
0303   ED 53 F4 23            LD   (vDefine),de   
0307   D1                     POP   de   ; de = value
0308   C3 70 0C               JP   assign1   
030B                DEFINEEND1:      
030B   DD E9                  JP   (ix)   
030D                             ;********************** PAGE 2 END *********************************************
030D                             ; .align $100
030D                             ;********************** PAGE 3 BEGIN *********************************************
030D                LOWCASE_:      
030D                LOWCASE:      
030D   0A                     LD   a,(bc)   
030E   D6 61                  SUB   "a"   
0310   C6 1A                  ADD   a,26   
0312                IDENT1:      
0312   87                     ADD   a,a   ; l = a * 2
0313   6F                     LD   l,a   
0314   26 23                  LD   h,msb(vars)   
0316   22 F8 23               LD   (vPointer),hl   ; store address in setter
0319   5E                     LD   e,(hl)   
031A   23                     INC   hl   
031B   56                     LD   d,(hl)   
031C   D5                     PUSH   de   
031D   DD E9                  JP   (ix)   
031F                             ; [                             14
031F                LBRACK_:      
031F                LBRACK:      
031F                ARRAYSTART:      
031F   11 00 00               LD   de,0   ; create stack frame
0322   D5                     PUSH   de   ; push null for IP
0323   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0326   FD 56 05               LD   d,(iy+5)   ; 
0329   D5                     PUSH   de   ; 
032A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
032D   FD 56 03               LD   d,(iy+3)   ; 
0330   D5                     PUSH   de   ; 
0331   FD E5                  PUSH   iy   ; push BP
0333   FD 21 00 00            LD   iy,0   ; BP = SP
0337   FD 39                  ADD   iy,sp   
0339   DD E9                  JP   (ix)   
033B                             ; \                             19
033B                BACKSLASH_:      
033B                BACKSLASH:      
033B                LAMBDA:      
033B   DD E5                  PUSH   ix   
033D   CD 1C 0D               CALL   parseArgs   
0340                LAMBDA1:      
0340   03                     INC   bc   ; arg_list must ve immediately followed by {
0341   0A                     LD   a,(bc)   
0342   FE 21                  CP   " "+1   ; skip white space
0344   38 FA                  JR   c,lambda1   
0346   FE 7B                  CP   "{"   
0348   28 06                  JR   z,lambda2   
034A   21 02 00               LD   hl,2   ; error 2: parse error
034D   C3 E2 0F               JP   error   
0350                LAMBDA2:      
0350   CD 52 0D               CALL   parseBlock   
0353   CD BC 0D               CALL   createFunc   
0356   E1                     POP   hl   
0357   DD E1                  POP   ix   
0359   E5                     PUSH   hl   
035A   DD E9                  JP   (ix)   
035C                RBRACK_:      
035C                RBRACK:      
035C                ARRAYEND:      ; 53
035C   FD 54                  LD   d,iyh   ; de = BP
035E   FD 5D                  LD   e,iyl   
0360   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0364   62 6B                  LD   hl,de   ; hl = de = BP
0366   B7                     OR   a   
0367   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0369   CB 3C                  SRL   h   ; 
036B   CB 1D                  RR   l   
036D   44 4D                  LD   bc,hl   ; bc = count
036F   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0372   71                     LD   (hl),c   ; write num items in length word
0373   23                     INC   hl   
0374   70                     LD   (hl),b   
0375   23                     INC   hl   ; hl = array[0], bc = count
0376                             ; de = BP, hl = array[0], bc = count
0376   18 15                  JR   arrayEnd3   
0378                ARRAYEND1:      
0378   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
037B   77                     LD   (hl),a   ; write lsb of array item
037C   23                     INC   hl   ; move to msb of array item
037D   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0380   3D                     DEC   a   
0381   28 05                  JR   z,arrayEnd2   
0383   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0386   77                     LD   (hl),a   ; write msb of array item
0387   23                     INC   hl   ; move to next word in array
0388                ARRAYEND2:      
0388   FD 2B                  DEC   iy   ; move to next word on stack
038A   FD 2B                  DEC   iy   
038C   0B                     DEC   bc   ; dec items count
038D                ARRAYEND3:      
038D   79                     LD   a,c   ; if not zero loop
038E   B0                     OR   b   
038F   20 E7                  JR   nz,arrayEnd1   
0391   EB                     EX   de,hl   ; de = end of array, hl = BP
0392   F9                     LD   sp,hl   ; sp = BP
0393   E1                     POP   hl   ; de = end of array, hl = old BP
0394   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0395   FD 62                  LD   iyh,d   
0397   FD 6B                  LD   iyl,e   
0399   D1                     POP   de   ; pop arg_list (discard)
039A   D1                     POP   de   ; pop first_arg* (discard)
039B   D1                     POP   de   ; pop IP (discard)
039C   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
03A0   13                     INC   de   
03A1   13                     INC   de   
03A2   D5                     PUSH   de   ; return array[0]
03A3   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
03A6   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
03AA   DD E9                  JP   (ix)   
03AC                CARET_:      
03AC                             ; execute a block of code which ends with } 116
03AC                             ; creates a root scope if BP == stack
03AC                             ; else uses outer scope
03AC                CARET:       
03AC                GO:          
03AC   D1                     POP   de   ; de = block*
03AD                GO1:         
03AD   7B                     LD   a,e   ; if block* == null, exit
03AE   B2                     OR   d   
03AF   20 02                  JR   nz,go2   
03B1   DD E9                  JP   (ix)   
03B3                GO2:         
03B3   1A                     LD   a,(de)   
03B4   FE 7B                  CP   "{"   
03B6   CA DD 0B               JP   z,goBlock   
03B9   FE 28                  CP   "("   
03BB   C2 10 0C               JP   nz,goFunc   
03BE   D5                     PUSH   de   ; push de just before stack frame
03BF   CA DD 0B               JP   z,goBlock   
03C2                GRAVE_:      
03C2                GRAVE:       
03C2                PRINTLITERAL:      
03C2   03                     INC   bc   ; move to first char
03C3   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
03C7   18 03                  JR   printLiteral1   
03C9                PRINTLITERAL0:      
03C9   12                     LD   (de),a   ; a -> buffer*
03CA   13                     INC   de   ; string*++,
03CB   03                     INC   bc   
03CC                PRINTLITERAL1:      
03CC   0A                     LD   a,(bc)   ; a <- string*
03CD   FE 60                  CP   "`"   ; if ` exit loop
03CF   20 F8                  JR   nz,printLiteral0   
03D1   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03D5   C3 02 0D               JP   dotNext   
03D8                LBRACE_:      
03D8                LBRACE:      
03D8   CD 52 0D               CALL   parseBlock   
03DB   DD E9                  JP   (ix)   
03DD                             ; | or                          11
03DD                             ; a b -- c
03DD                PIPE_:       
03DD                PIPE:        
03DD                OR:          
03DD   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03DE   E1                     POP   hl   
03DF   7B                     LD   a,e   
03E0   B5                     OR   l   
03E1   6F                     LD   l,a   
03E2   7A                     LD   a,d   
03E3   B4                     OR   h   
03E4   67                     LD   h,a   
03E5   C3 D1 02               JP   add3   
03E8                RBRACE_:      
03E8   C3 70 0B               JP   rbrace   
03EB                             ; ~ char                        8
03EB                TILDE_:      
03EB   C3 B1 0A               JP   tilde   
03EE                UNDERSCORE_:      
03EE                CHAR:        
03EE   03                     INC   bc   ; point to next char
03EF   0A                     LD   a,(bc)   
03F0   6F                     LD   l,a   
03F1   26 00                  LD   h,0   
03F3   E5                     PUSH   hl   
03F4   DD E9                  JP   (ix)   
03F6                AT_:         
03F6                AT:          
03F6                ADDR:        
03F6   ED 5B F8 23            LD   de,(vPointer)   
03FA   21 F8 23               LD   hl,vPointer   
03FD   C3 36 07               JP   variable   
0400                             ;********************** PAGE 3 END *********************************************
0400                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 74 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   61 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
041E   C3 02 0D               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 02 0D               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 23               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 23               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 02 0D               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 23            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 23            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 23               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 23            LD   (vBufPtr),de   
04CC   C3 02 0D               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 4F 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 5E 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   E1 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   EF 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   E1 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   10 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   19 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   72 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   29 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   47 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   2D 06                  DW   break   
0541   00                     DB   NUL   
0542   72 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   6A 06                  DW   decBase   
0547   00                     DB   NUL   
0548   6A 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   8A 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   DC 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   28 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   2C 09                  DW   filter   
0556   31                     DB   "1"   
0557   0A 10                  DW   f1   
0559   32                     DB   "2"   
055A   0A 10                  DW   f2   
055C   33                     DB   "3"   
055D   0A 10                  DW   f3   
055F   34                     DB   "4"   
0560   0A 10                  DW   f4   
0562   00                     DB   NUL   
0563   9C 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hx hex
0566   78 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   72 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   7E 06                  DW   input   
056E   00                     DB   NUL   
056F   72 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   89 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   EA 08                  DW   map   
0577   00                     DB   NUL   
0578   72 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   92 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   72 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   9B 06                  DW   quit   
0583   00                     DB   NUL   
0584   72 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   A5 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   AB 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   4D 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   72 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   B1 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   03 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   B9 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   62 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   E8 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   F7 06                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   72 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   96 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   1B 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   24 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   2D 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   64 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   58 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   5E 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   72 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   3C 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   72 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   42 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   D1                     POP   de   
05D1   E1                     POP   hl   
05D2   C5                     PUSH   bc   ; preserve the IP
05D3   44 4D                  LD   bc,hl   
05D5   CD E9 0C               CALL   divide   
05D8   EB                     EX   de,hl   
05D9   ED 53 FA 23            LD   (vRemain),de   
05DD   C1                     POP   bc   
05DE   C3 D1 02               JP   add3   
05E1                             ; /ab absolute
05E1                             ; num -- num
05E1                ABSOLUTE:      
05E1   E1                     POP   hl   
05E2   CB 7C                  BIT   7,h   
05E4   28 06                  JR   z,absolute1   
05E6   AF                     XOR   a   
05E7   95                     SUB   l   
05E8   6F                     LD   l,a   
05E9   9F                     SBC   a,a   
05EA   94                     SUB   h   
05EB   67                     LD   h,a   
05EC                ABSOLUTE1:      
05EC   E5                     PUSH   hl   
05ED   DD E9                  JP   (ix)   
05EF                             ; /ad addrOf                    24
05EF                             ; char -- addr
05EF                ADDROF:      
05EF   E1                     POP   hl   ; a = char
05F0   7D                     LD   a,l   
05F1   FE 7B                  CP   "z"+1   ; if a > z then exit
05F3   30 19                  JR   nc,addrOf2   
05F5   D6 41                  SUB   "A"   ; a - 65
05F7   38 15                  JR   c,addrOf2   ; if < A then exit
05F9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05FB   38 06                  JR   c,addrOf1   
05FD   D6 06                  SUB   "a"-("Z"+1)   
05FF   FE 1A                  CP   "Z"-"A"+1   
0601   38 0B                  JR   c,addrOf2   ; if < a then exit
0603                ADDROF1:      
0603   87                     ADD   a,a   ; double a
0604   21 00 23               LD   hl,VARS   ; hl = VARS + a
0607   85                     ADD   a,l   
0608   6F                     LD   l,a   
0609   3E 00                  LD   a,0   
060B   8C                     ADC   a,h   
060C   67                     LD   h,a   
060D   E5                     PUSH   hl   
060E                ADDROF2:      
060E   DD E9                  JP   (ix)   
0610                             ; /al length of an array, num elements
0610                             ; array* -- num
0610                ARRAYLENGTH:      
0610   E1                     POP   hl   
0611   2B                     DEC   hl   ; msb size
0612   56                     LD   d,(hl)   
0613   2B                     DEC   hl   ; lsb size
0614   5E                     LD   e,(hl)   
0615   EB                     EX   de,hl   
0616                ARRAYLENGTH1:      
0616   E5                     PUSH   hl   
0617   DD E9                  JP   (ix)   
0619                             ; /as size in bytes of an array, based on current data width
0619                             ; array* -- num
0619                ARRAYSIZE:      
0619                          ;*Macro unroll:  PERFORM arrayLength
0619   DD 21 20 06            LD   ix,performM_1509S1064   
061D   C3 10 06               JP   arrayLength   
0620                PERFORMM_1509S1064:      
0620   E1                     POP   hl   
0621   3A E6 23               LD   a,(vDataWidth)   
0624   3D                     DEC   a   
0625   28 EF                  JR   z,arrayLength1   
0627   CB 3C                  SRL   h   
0629   CB 1D                  RR   l   
062B   18 E9                  JR   arrayLength1   
062D                             ; 13
062D                             ; /br break from loop
062D                             ; --
062D                BREAK:       
062D   E1                     POP   hl   ; hl = condition, break if false
062E   7D                     LD   a,l   
062F   B4                     OR   h   
0630   28 02                  JR   z,break1   
0632   DD E9                  JP   (ix)   
0634                BREAK1:      
0634   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0636   FD 54                  LD   d,iyh   
0638   21 08 00               LD   hl,8   
063B   19                     ADD   hl,de   
063C   23                     INC   hl   
063D   23                     INC   hl   
063E   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0641   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0644   C3 70 0B               JP   blockEnd   
0647                             ; /b
0647                BYTEMODE:      
0647   21 01 00               LD   hl,1   
064A                BYTEMODE1:      
064A   22 E6 23               LD   (vDataWidth),hl   
064D   DD E9                  JP   (ix)   
064F                             ; //
064F                COMMENT:      
064F   03                     INC   bc   ; point to next char
0650   0A                     LD   a,(bc)   
0651   FE 20                  CP   " "   ; terminate on any char less than SP
0653   30 FA                  JR   nc,comment   
0655   0B                     DEC   bc   
0656   DD E9                  JP   (ix)   
0658                CONSTHEAPSTART:      
0658   11 22 24               LD   de,HEAP   
065B   C3 39 07               JP   constant   
065E                CONSTTIBSTART:      
065E   11 00 21               LD   de,TIB   
0661   C3 39 07               JP   constant   
0664                CONSTBUFSTART:      
0664   11 00 22               LD   de,BUFFER   
0667   C3 39 07               JP   constant   
066A                DECBASE:      
066A   21 0A 00               LD   hl,10   
066D                DECBASE1:      
066D   22 E8 23               LD   (vNumBase),hl   
0670   DD E9                  JP   (ix)   
0672                ERROR1:      
0672   21 01 00               LD   hl,1   ; error 1: unknown command
0675   C3 E2 0F               JP   error   
0678                HEXBASE:      
0678   21 10 00               LD   hl,16   
067B   C3 6D 06               JP   decBase1   
067E                             ; Z80 port input
067E                             ; port -- value
067E                INPUT:       
067E   E1                     POP   hl   
067F   59                     LD   e,c   ; save IP
0680   4D                     LD   c,l   
0681   ED 68                  IN   l,(c)   
0683   26 00                  LD   h,0   
0685   4B                     LD   c,e   ; restore IP
0686   E5                     PUSH   hl   
0687   DD E9                  JP   (ix)   
0689                             ; /k                              6
0689                KEY:         
0689   CD 81 00               CALL   getchar   
068C   26 00                  LD   h,0   
068E   6F                     LD   l,a   
068F   E5                     PUSH   hl   
0690   DD E9                  JP   (ix)   
0692                             ; /o Z80 port output
0692                             ; value port --
0692                OUTPUT:      
0692   E1                     POP   hl   
0693   59                     LD   e,c   ; save IP
0694   4D                     LD   c,l   
0695   E1                     POP   hl   
0696   ED 69                  OUT   (c),l   
0698   4B                     LD   c,e   ; restore IP
0699   DD E9                  JP   (ix)   
069B                             ; /qt
069B                             ; bool --
069B                QUIT:        
069B   E1                     POP   hl   ; hl = condition, exit if true
069C   7D                     LD   a,l   
069D   B4                     OR   h   
069E   20 02                  JR   nz,quit1   
06A0   DD E9                  JP   (ix)   
06A2                QUIT1:       
06A2   C3 70 0B               JP   blockEnd   
06A5                RECUR:       
06A5   E1                     POP   hl   
06A6   22 F2 23               LD   (vRecur),hl   
06A9   DD E9                  JP   (ix)   
06AB                REMAIN:      
06AB   2A FA 23               LD   hl,(vRemain)   
06AE   E5                     PUSH   hl   
06AF   DD E9                  JP   (ix)   
06B1                STRINGBEGIN:      
06B1   21 FF FF               LD   hl,TRUE   ; string mode = true
06B4   22 F6 23               LD   (vStrMode),hl   
06B7   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06B9                STRINGEND:      
06B9   21 00 00               LD   hl,FALSE   ; string mode = false
06BC   22 F6 23               LD   (vStrMode),hl   
06BF   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
06C2   AF                     XOR   a   
06C3   77                     LD   (hl),a   
06C4   23                     INC   hl   ; hl = string_end*
06C5   ED 43 04 24            LD   (vTemp1),bc   ; save IP
06C9   11 00 22               LD   de,BUFFER   ; de = string*
06CC   B7                     OR   a   ; bc = size
06CD   ED 52                  SBC   hl,de   
06CF   44 4D                  LD   bc,hl   
06D1   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06D4   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06D5   D5                     PUSH   de   ; return hstring*
06D6   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06D8   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06DC   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
06E0                STRINGEND1:      
06E0   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06E3   22 EC 23               LD   (vBufPtr),hl   
06E6   DD E9                  JP   (ix)   
06E8                STRINGLENGTH:      
06E8   D1                     POP   de   
06E9   21 00 00               LD   hl,0   
06EC   18 02                  JR   stringLength2   
06EE                STRINGLENGTH1:      
06EE   13                     INC   de   
06EF   23                     INC   hl   
06F0                STRINGLENGTH2:      
06F0   1A                     LD   a,(de)   
06F1   B7                     OR   a   
06F2   20 FA                  JR   nz,stringLength1   
06F4                STRINGLENGTH3:      
06F4   E5                     PUSH   hl   
06F5   DD E9                  JP   (ix)   
06F7                STRINGSIZE:      
06F7                          ;*Macro unroll:  PERFORM stringLength
06F7   DD 21 FE 06            LD   ix,performM_1657S1232   
06FB   C3 E8 06               JP   stringLength   
06FE                PERFORMM_1657S1232:      
06FE   E1                     POP   hl   
06FF   23                     INC   hl   
0700   C3 F4 06               JP   stringLength3   
0703                             ; /sc string compare
0703                             ; string1* string2* -- bool
0703                             ; Compares two null terminated strings.
0703                STRINGCOMPARE:      
0703   D1                     POP   de   
0704   E1                     POP   hl   
0705                STRINGCOMPARE1:      
0705   1A                     LD   a,(de)   
0706   BE                     CP   (hl)   
0707   20 07                  JR   nz,stringCompare2   
0709   B7                     OR   a   
070A   28 09                  JR   z,stringCompare3   
070C   13                     INC   de   
070D   23                     INC   hl   
070E   18 F5                  JR   stringCompare1   
0710                STRINGCOMPARE2:      
0710   21 00 00               LD   hl,FALSE   
0713   18 03                  JR   stringCompare4   
0715                STRINGCOMPARE3:      
0715   21 FF FF               LD   hl,TRUE   
0718                STRINGCOMPARE4:      
0718   E5                     PUSH   hl   
0719   DD E9                  JP   (ix)   
071B                VARBUFPTR:      
071B   ED 5B EC 23            LD   de,(vBufPtr)   
071F   21 EC 23               LD   hl,vBufPtr   
0722   18 12                  JR   variable   
0724                VARHEAPPTR:      
0724   ED 5B F0 23            LD   de,(vHeapPtr)   
0728   21 F0 23               LD   hl,vHeapPtr   
072B   18 09                  JR   variable   
072D                VARTIBPTR:      
072D   ED 5B EA 23            LD   de,(vTIBPtr)   
0731   21 EA 23               LD   hl,vTIBPtr   
0734   18 00                  JR   variable   
0736                VARIABLE:      
0736   22 F8 23               LD   (vPointer),hl   
0739                CONSTANT:      
0739   D5                     PUSH   de   
073A   DD E9                  JP   (ix)   
073C                             ; /wm
073C                WORDMODE:      
073C   21 02 00               LD   hl,2   
073F   C3 4A 06               JP   byteMode1   
0742                             ; /x
0742                XOR:         
0742   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0743                XOR1:        
0743   E1                     POP   hl   
0744   7B                     LD   a,e   
0745   AD                     XOR   l   
0746   6F                     LD   l,a   
0747   7A                     LD   a,d   
0748   AC                     XOR   h   
0749   67                     LD   h,a   
074A   C3 D1 02               JP   add3   
074D                             ;*******************************************************************
074D                             ; Monty implementations
074D                             ;*******************************************************************
074D                             ; /rg rangeSrc
074D                             ; begin end step -- src
074D                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
074D                RANGESRC:      ; range source: begin, end, step, local: L
074D   CD AC 03               CALL   go   
0750   00 00                  DW   NUL   
0752   5C 07                  DW   rangeSrcM_1722S1306   
0754   56 07                  DW   $+2   
0756   01                     DB   1   
0757   04 62 65 73 4C         .PSTR   "besL"   
075C                RANGESRCM_1722S1306:      
075C   7B                     DB   "{"   ; init mutable L [index active inrange_test]
075D   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0782   5C 6B 74 7B            DB   "\\kt{"   
0786   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
078E   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0794   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
079C   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07A4   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07AE   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07B6   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07BB   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07CF   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07D7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07DE   7D                     DB   "}"   
07DF   7D                     DB   "}"   
07E0   00                     DB   0   
07E1                             ; /ai arrayIter
07E1                             ; array* -- src
07E1                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07E1                ARRAYITER:      
07E1   CD AC 03               CALL   go   
07E4   00 00                  DW   NUL   
07E6   EE 07                  DW   arrayIterM_1741S1326   
07E8   EA 07                  DW   $+2   
07EA   01                     DB   1   
07EB   02 61 4C               .PSTR   "aL"   
07EE                ARRAYITERM_1741S1326:      
07EE   7B                     DB   "{"   
07EF   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07FF   5C 6B 74 7B            DB   "\\kt{"   
0803   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
080B   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0811   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0819   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0821   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0828   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0830   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0839   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0850   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0858   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
085F   7D                     DB   "}"   
0860   7D                     DB   "}"   
0861   00                     DB   0   
0862                             ; /si stringIter
0862                             ; string* -- src
0862                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0862                STRINGITER:      
0862   CD AC 03               CALL   go   
0865   00 00                  DW   NUL   
0867   6F 08                  DW   stringIterM_1760S1346   
0869   6B 08                  DW   $+2   
086B   01                     DB   1   
086C   02 73 4C               .PSTR   "sL"   
086F                STRINGITERM_1760S1346:      
086F   7B                     DB   "{"   
0870   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
087A   5C 6B 74 7B            DB   "\\kt{"   
087E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0886   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
088D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0895   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
089D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08A4   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08B5   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08BD   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08C4   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08D8   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08E0   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E7   7D                     DB   "}"   
08E8   7D                     DB   "}"   
08E9   00                     DB   0   
08EA                             ; /mp map
08EA                             ; src func -- src1
08EA                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08EA                MAP:         ; map: source, function
08EA   CD AC 03               CALL   go   
08ED   00 00                  DW   NUL   
08EF   F7 08                  DW   mapM_1780S1368   
08F1   F3 08                  DW   $+2   
08F3   00                     DB   0   
08F4   02 73 66               .PSTR   "sf"   
08F7                MAPM_1780S1368:      
08F7   7B                     DB   "{"   
08F8   5C 6B 74 7B            DB   "\\kt{"   
08FC   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0904   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0908   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
090D   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0919   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0922   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0929   7D                     DB   "}"   
092A   7D                     DB   "}"   
092B   00                     DB   0   
092C                             ; /ft filter
092C                             ; src pred -- src1
092C                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
092C                FILTER:      ; filter: source, predicate, local: T
092C   CD AC 03               CALL   go   
092F   00 00                  DW   NUL   
0931   3A 09                  DW   filterM_1794S1383   
0933   35 09                  DW   $+2   
0935   01                     DB   1   
0936   03 73 70 54            .PSTR   "spT"   
093A                FILTERM_1794S1383:      
093A   7B                     DB   "{"   
093B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0941   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0945   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0949   5B                     DB   "["   
094A   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0957   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
095F   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0963   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0968   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
097E   3F 3F                  DB   "??"   
0980   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0987   7D                     DB   "}"   
0988   7D                     DB   "}"   
0989   00                     DB   0   
098A                             ; /fd fold
098A                             ; reducer is a function like: \\da00bbLi4u
098A                             ; src init reducer -- src1
098A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
098A                FOLD:        ; src, init, reducer
098A   CD AC 03               CALL   go   
098D   00 00                  DW   NUL   
098F   99 09                  DW   foldM_1813S1403   
0991   93 09                  DW   $+2   
0993   01                     DB   1   
0994   04 73 69 72 41         .PSTR   "sirA"   
0999                FOLDM_1813S1403:      
0999   7B                     DB   "{"   ; reducer: \\da00bbLi4u
099A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09A1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09A5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09AE   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09C9   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09D2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D9   7D                     DB   "}"   
09DA   7D                     DB   "}"   
09DB   00                     DB   0   
09DC                             ; /fe forEach
09DC                             ; src proc --
09DC                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09DC                FOREACH:      ; forEach: source, procedure, local: T
09DC   CD AC 03               CALL   go   
09DF   00 00                  DW   NUL   
09E1   EA 09                  DW   forEachM_1827S1418   
09E3   E5 09                  DW   $+2   
09E5   01                     DB   1   
09E6   03 73 70 54            .PSTR   "spT"   
09EA                FOREACHM_1827S1418:      
09EA   7B                     DB   "{"   
09EB   5B 30 5D 25 54 3D      DB   "[0]%T="   
09F1   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09F5   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09FD   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A02   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A14   3F 3F                  DB   "??"   ; ifte:
0A16   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A1F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A26   7D                     DB   "}"   
0A27   00                     DB   0   
0A28                             ; ; /fs funcSrc
0A28                             ; ; func -- src
0A28                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A28                FUNCSRC:      ; :f func or block
0A28   CD AC 03               CALL   go   
0A2B   00 00                  DW   NUL   
0A2D   34 0A                  DW   funcSrcM_1841S1433   
0A2F   31 0A                  DW   $+2   
0A31   00                     DB   0   
0A32   01 66                  .PSTR   "f"   
0A34                FUNCSRCM_1841S1433:      
0A34   7B                     DB   "{"   
0A35   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A39   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A41   5C 64 74 7B            DB   "\\dt{"   
0A45   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A57   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A5E   7D                     DB   "}"   
0A5F   7D                     DB   "}"   
0A60   00                     DB   0   
0A61                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A61                PRINTARRAY:      
0A61   CD AC 03               CALL   go   
0A64   00 00                  DW   NUL   
0A66   6F 0A                  DW   printArrayM_1851S1444   
0A68   6A 0A                  DW   $+2   
0A6A   02                     DB   2   
0A6B   03 61 62 63            .PSTR   "abc"   
0A6F                PRINTARRAYM_1851S1444:      
0A6F   7B                     DB   "{"   
0A70   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AA7   7D                     DB   "}"   
0AA8   00                     DB   0   
0AA9                             ;*******************************************************************
0AA9                             ; implementations continued
0AA9                             ;*******************************************************************
0AA9                RPAREN:      
0AA9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0AAC   FD 46 09               LD   b,(iy+9)   
0AAF   DD E9                  JP   (ix)   
0AB1                             ; ~ bitwise invert
0AB1                TILDE:       
0AB1                INVERT:      
0AB1   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0AB2   7D                     LD   a,l   
0AB3   2F                     CPL      
0AB4   6F                     LD   l,a   
0AB5   7C                     LD   a,h   
0AB6   2F                     CPL      
0AB7   67                     LD   h,a   
0AB8   C3 D1 02               JP   add3   
0ABB                             ; $ hex                         ; 22
0ABB                DOLLAR:      
0ABB                HEXNUM:      
0ABB   21 00 00               LD   hl,0   ; Clear hl to accept the number
0ABE                HEXNUM1:      
0ABE   03                     INC   bc   
0ABF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AC0   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AC2   28 02                  JR   z,hexnum2   ; no a decimal
0AC4   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AC6                HEXNUM2:      
0AC6   D6 30                  SUB   $30   ; form decimal digit
0AC8   DA 62 0B               JP   c,num2   
0ACB   FE 10                  CP   $0F+1   
0ACD   D2 62 0B               JP   nc,num2   
0AD0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AD1   29                     ADD   hl,hl   ; 4X
0AD2   29                     ADD   hl,hl   ; 8X
0AD3   29                     ADD   hl,hl   ; 16X
0AD4   85                     ADD   a,l   ; add into bottom of hl
0AD5   6F                     LD   l,a   
0AD6   18 E6                  JR   hexnum1   
0AD8                             ; ? if                            23
0AD8                             ; condition then -- value
0AD8                QUESTION:      
0AD8                IF:          
0AD8   03                     INC   bc   
0AD9   0A                     LD   a,(bc)   
0ADA   FE 3F                  CP   "?"   
0ADC   28 06                  JR   z,ifte   
0ADE   0B                     DEC   bc   
0ADF   11 00 00               LD   de,NUL   ; NUL pointer for else
0AE2   18 01                  JR   ifte1   
0AE4                             ; ?? ifte
0AE4                             ; condition then else -- value
0AE4                IFTE:        
0AE4   D1                     POP   de   ; de = else
0AE5                IFTE1:       
0AE5   E1                     POP   hl   ; hl = then
0AE6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AE7   7C                     LD   a,h   
0AE8   B5                     OR   l   
0AE9   E1                     POP   hl   ; hl = then
0AEA   CA AD 03               JP   z,go1   ; if z de = else
0AED   EB                     EX   de,hl   ; condition = false, de = then
0AEE   C3 AD 03               JP   go1   
0AF1                             ; string                        ;38
0AF1                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0AF1                QUOTE:       
0AF1                STRING:      
0AF1   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0AF4   E5                     PUSH   hl   ; save start of string
0AF5   0A                     LD   a,(bc)   
0AF6   5F                     LD   e,a   ; e = matching terminator
0AF7   03                     INC   bc   ; point to next char
0AF8   18 03                  JR   string2   
0AFA                STRING1:      
0AFA   77                     LD   (hl),a   
0AFB   23                     INC   hl   ; increase count
0AFC   03                     INC   bc   ; point to next char
0AFD                STRING2:      
0AFD   0A                     LD   a,(bc)   
0AFE   BB                     CP   e   ; is it the string terminator
0AFF   28 02                  JR   z,string3   
0B01   18 F7                  JR   string1   
0B03                STRING3:      
0B03   AF                     XOR   a   ; write NUL to terminate string
0B04   77                     LD   (hl),a   ; hl = end of string
0B05   23                     INC   hl   
0B06   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B09   DD E9                  JP   (ix)   
0B0B                             ; %a .. %z                      43
0B0B                             ; -- value
0B0B                             ; returns value of arg
0B0B                PERCENT:      
0B0B                ARG:         
0B0B   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B0E   FD 56 05               LD   d,(iy+5)   
0B11   EB                     EX   de,hl   
0B12   7D                     LD   a,l   ; arg_list* == null, skip
0B13   B4                     OR   h   
0B14   28 1A                  JR   z,arg0a   
0B16   23                     INC   hl   ; a = num_args, hl = arg_list*
0B17   7E                     LD   a,(hl)   
0B18   23                     INC   hl   
0B19   B7                     OR   a   
0B1A   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B1C   5F                     LD   e,a   ; e = a = num_args
0B1D   03                     INC   bc   ; a = next char = dollar_name
0B1E   0A                     LD   a,(bc)   
0B1F   C5                     PUSH   bc   ; save IP
0B20   43                     LD   b,e   ; b = e = num_args
0B21   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B24   FD 56 03               LD   d,(iy+3)   
0B27                ARG0:        
0B27   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B28   1B                     DEC   de   
0B29   BE                     CP   (hl)   
0B2A   28 09                  JR   z,arg1   
0B2C   23                     INC   hl   ; hl = next arg_list*
0B2D   10 F8                  DJNZ   arg0   
0B2F   C1                     POP   bc   ; no match, restore IP
0B30                ARG0A:       
0B30   11 00 00               LD   de,0   ; return 0
0B33   18 08                  JR   arg1a   
0B35                ARG1:        
0B35   C1                     POP   bc   ; restore IP
0B36   EB                     EX   de,hl   ; hl = arg*
0B37   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0B3A   5E                     LD   e,(hl)   
0B3B   23                     INC   hl   
0B3C   56                     LD   d,(hl)   ; de = arg
0B3D                ARG1A:       
0B3D   D5                     PUSH   de   ; push arg
0B3E   DD E9                  JP   (ix)   
0B40                             ; 0..9 number                   37
0B40                NUM:         
0B40   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B43   0A                     LD   a,(bc)   ; Get numeral or -
0B44   FE 2D                  CP   "-"   
0B46   20 01                  JR   nz,num0   
0B48   03                     INC   bc   ; move to next char, no flags affected
0B49                NUM0:        
0B49   08                     EX   af,af'   ; save zero flag = 0 for later
0B4A                NUM1:        
0B4A   0A                     LD   a,(bc)   ; read digit
0B4B   D6 30                  SUB   "0"   ; less than 0?
0B4D   38 13                  JR   c,num2   ; not a digit, exit loop
0B4F   FE 0A                  CP   10   ; greater that 9?
0B51   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B53   03                     INC   bc   ; inc IP
0B54   54 5D                  LD   de,hl   ; multiply hl * 10
0B56   29                     ADD   hl,hl   
0B57   29                     ADD   hl,hl   
0B58   19                     ADD   hl,de   
0B59   29                     ADD   hl,hl   
0B5A   85                     ADD   a,l   ; add digit in a to hl
0B5B   6F                     LD   l,a   
0B5C   3E 00                  LD   a,0   
0B5E   8C                     ADC   a,h   
0B5F   67                     LD   h,a   
0B60   18 E8                  JR   num1   
0B62                NUM2:        
0B62   0B                     DEC   bc   
0B63   08                     EX   af,af'   ; restore zero flag
0B64   20 07                  JR   nz,num3   
0B66   EB                     EX   de,hl   ; negate the value of hl
0B67   21 00 00               LD   hl,0   
0B6A   B7                     OR   a   ; jump to sub2
0B6B   ED 52                  SBC   hl,de   
0B6D                NUM3:        
0B6D   E5                     PUSH   hl   ; Put the number on the stack
0B6E   DD E9                  JP   (ix)   ; and process the next character
0B70                             ; }                               58
0B70                RBRACE:      
0B70                BLOCKEND:      
0B70   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B73   FD 56 01               LD   d,(iy+1)   
0B76   ED 53 04 24            LD   (vTemp1),de   
0B7A   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B7D   FD 56 07               LD   d,(iy+7)   
0B80   ED 53 06 24            LD   (vTemp2),de   
0B84   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B87   FD 56 03               LD   d,(iy+3)   
0B8A   EB                     EX   de,hl   
0B8B   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0B8E   FD 56 01               LD   d,(iy+1)   
0B91   13                     INC   de   ; for carry flag <=
0B92   B7                     OR   a   
0B93   ED 52                  SBC   hl,de   
0B95   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0B97   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0B99   FD 5D                  LD   e,iyl   
0B9B   21 08 00               LD   hl,8   
0B9E   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0B9F   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BA0   18 0C                  JR   blockEnd2   
0BA2                BLOCKEND1:      ; same scope
0BA2   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BA5   FD 56 03               LD   d,(iy+3)   
0BA8   EB                     EX   de,hl   
0BA9   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BAB   FD 5D                  LD   e,iyl   
0BAD   EB                     EX   de,hl   
0BAE                BLOCKEND2:      
0BAE   44 4D                  LD   bc,hl   ; bc = hl = BP
0BB0   B7                     OR   a   ; hl = BP - SP = count
0BB1   ED 72                  SBC   hl,sp   
0BB3   7D                     LD   a,l   
0BB4   B4                     OR   h   
0BB5   28 09                  JR   z,blockEnd3   
0BB7   C5                     PUSH   bc   ; bc = count, hl = BP
0BB8   44 4D                  LD   bc,hl   
0BBA   E1                     POP   hl   
0BBB   2B                     DEC   hl   ; hl = BP-1
0BBC   1B                     DEC   de   ; de = args*-1
0BBD   ED B8                  LDDR      
0BBF   13                     INC   de   
0BC0                BLOCKEND3:      
0BC0   EB                     EX   de,hl   ; sp = de = new tos*
0BC1   F9                     LD   sp,hl   
0BC2   ED 4B 06 24            LD   bc,(vTemp2)   
0BC6   FD 2A 04 24            LD   iy,(vTemp1)   
0BCA   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0BCE   7B                     LD   a,e   ; check for NUL
0BCF   B2                     OR   d   
0BD0   20 02                  JR   nz,blockEnd4   
0BD2   DD E9                  JP   (ix)   
0BD4                BLOCKEND4:      
0BD4   21 00 00               LD   hl,0   ; clear recur vector
0BD7   22 F2 23               LD   (vRecur),hl   
0BDA   C3 AD 03               JP   go1   ; execute de
0BDD                GOBLOCK:      
0BDD   ED 53 04 24            LD   (vTemp1),de   ; save de
0BE1   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BE4   FD 54                  LD   d,iyh   
0BE6   FD 5D                  LD   e,iyl   
0BE8   B7                     OR   a   ; if stack* == BP then this is the root_scope
0BE9   ED 52                  SBC   hl,de   
0BEB   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0BEF   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0BF0   B4                     OR   h   
0BF1   3E 00                  LD   a,0   
0BF3   28 6A                  JR   z,goFunc8   
0BF5   C5                     PUSH   bc   ; push IP
0BF6   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0BF9   FD 46 05               LD   b,(iy+5)   
0BFC   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0BFF   FD 66 03               LD   h,(iy+3)   
0C02                GOBLOCK2:      
0C02   C5                     PUSH   bc   ; arg_list*
0C03   E5                     PUSH   hl   ; first_arg*
0C04   FD E5                  PUSH   iy   ; push BP
0C06   FD 21 00 00            LD   iy,0   ; BP = SP
0C0A   FD 39                  ADD   iy,sp   
0C0C                GOBLOCK3:      
0C0C   42 4B                  LD   bc,de   ; bc = de = block*-1
0C0E   DD E9                  JP   (ix)   
0C10                GOFUNC:      ; execute func
0C10   EB                     EX   de,hl   ; hl = func*
0C11   5E                     LD   e,(hl)   ; de = partial_array*
0C12   23                     INC   hl   
0C13   56                     LD   d,(hl)   
0C14   23                     INC   hl   
0C15   7B                     LD   a,e   ; if partial_array* == null skip
0C16   B2                     OR   d   
0C17   28 21                  JR   z,goFunc3   
0C19   ED 43 04 24            LD   (vTemp1),bc   
0C1D   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C20   EB                     EX   de,hl   ; hl = partial_array*
0C21   2B                     DEC   hl   ; bc = count
0C22   46                     LD   b,(hl)   
0C23   2B                     DEC   hl   
0C24   4E                     LD   c,(hl)   
0C25   23                     INC   hl   ; hl = array data*
0C26   23                     INC   hl   
0C27   18 06                  JR   goFunc2   ; push each item on stack
0C29                GOFUNC1:      
0C29   5E                     LD   e,(hl)   ; de = partial item
0C2A   23                     INC   hl   
0C2B   56                     LD   d,(hl)   
0C2C   23                     INC   hl   
0C2D   D5                     PUSH   de   ; push on stack
0C2E   0B                     DEC   bc   
0C2F                GOFUNC2:      
0C2F   79                     LD   a,c   ; if count != 0 then loop
0C30   B0                     OR   b   
0C31   20 F6                  JR   nz,goFunc1   
0C33   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C37   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C3A                GOFUNC3:      
0C3A   5E                     LD   e,(hl)   ; de = block*
0C3B   23                     INC   hl   
0C3C   56                     LD   d,(hl)   
0C3D   23                     INC   hl   
0C3E   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C42   5E                     LD   e,(hl)   ; de = arg_list*
0C43   23                     INC   hl   
0C44   56                     LD   d,(hl)   
0C45   23                     INC   hl   
0C46   EB                     EX   de,hl   ; hl = arg_list*
0C47   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C4B   7D                     LD   a,l   ; if arg_list* == null a = 0
0C4C   B4                     OR   h   
0C4D   20 03                  JR   nz,goFunc4   
0C4F   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C50   18 0D                  JR   goFunc8   
0C52                GOFUNC4:      ; allocate locals
0C52   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C53   18 03                  JR   goFunc6   
0C55                GOFUNC5:      ; loop
0C55   3B                     DEC   sp   
0C56   3B                     DEC   sp   
0C57   3D                     DEC   a   
0C58                GOFUNC6:      
0C58   B7                     OR   a   
0C59   20 FA                  JR   nz,goFunc5   ; end loop
0C5B                GOFUNC7:      
0C5B   23                     INC   hl   ; a = num_args* x 2
0C5C   7E                     LD   a,(hl)   
0C5D   2B                     DEC   hl   
0C5E   87                     ADD   a,a   ; a *= 2
0C5F                GOFUNC8:      
0C5F   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C60   44 4D                  LD   bc,hl   
0C62   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C65   85                     ADD   a,l   
0C66   6F                     LD   l,a   
0C67   39                     ADD   hl,sp   
0C68   18 98                  JR   goBlock2   
0C6A                             ; =                              21
0C6A                             ; value _oldValue --            ; uses address in vPointer 15
0C6A                ASSIGN:      
0C6A   E1                     POP   hl   ; discard last accessed value
0C6B   E1                     POP   hl   ; hl = new value
0C6C                ASSIGN0:      
0C6C   EB                     EX   de,hl   ; de = new value
0C6D   2A F8 23               LD   hl,(vPointer)   
0C70                ASSIGN1:      ; entry point from defineEnd
0C70   73                     LD   (hl),e   
0C71   3A E6 23               LD   a,(vDataWidth)   
0C74   3D                     DEC   a   ; is it byte?
0C75   28 02                  JR   z,assign2   
0C77   23                     INC   hl   
0C78   72                     LD   (hl),d   
0C79                ASSIGN2:      
0C79   DD E9                  JP   (ix)   
0C7B                             ; hl = value1, de = value2
0C7B                             ; hl = result
0C7B                EQUALS:      
0C7B   B7                     OR   a   ; reset the carry flag
0C7C   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C7E   28 16                  JR   z,true1   
0C80   18 1A                  JR   false1   
0C82                NOTEQUALS:      
0C82   B7                     OR   a   ; reset the carry flag
0C83   ED 52                  SBC   hl,de   
0C85   20 0F                  JR   nz,true1   
0C87   18 13                  JR   false1   
0C89                             ; hl = value1 de = value2
0C89                             ; hl = result
0C89                LESSTHANEQ:      
0C89   B7                     OR   a   
0C8A   ED 52                  SBC   hl,de   
0C8C   18 05                  JR   lessthan1   
0C8E                             ; hl = value1 de = value2
0C8E                             ; hl = result
0C8E                LESSTHAN:      
0C8E   B7                     OR   a   
0C8F   ED 52                  SBC   hl,de   
0C91   28 09                  JR   z,false1   
0C93                LESSTHAN1:      
0C93   FA 9C 0C               JP   m,false1   
0C96                TRUE1:       
0C96   21 FF FF               LD   hl,TRUE   
0C99   E5                     PUSH   hl   
0C9A   DD E9                  JP   (ix)   
0C9C                NULL1:       
0C9C                FALSE1:      
0C9C   21 00 00               LD   hl,FALSE   
0C9F   E5                     PUSH   hl   
0CA0   DD E9                  JP   (ix)   
0CA2                SPREAD:      
0CA2   E1                     POP   hl   ; hl = array*
0CA3   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0CA7   2B                     DEC   hl   ; bc = length
0CA8   46                     LD   b,(hl)   
0CA9   2B                     DEC   hl   
0CAA   4E                     LD   c,(hl)   
0CAB   23                     INC   hl   ; move back to array 0
0CAC   23                     INC   hl   
0CAD   18 0D                  JR   spread3   
0CAF                SPREAD1:      
0CAF   5E                     LD   e,(hl)   ; e = lsb data at hl
0CB0   23                     INC   hl   
0CB1   3A E6 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CB4   57                     LD   d,a   
0CB5   15                     DEC   d   
0CB6   28 02                  JR   z,spread2   
0CB8   56                     LD   d,(hl)   ; d = msb data at hl
0CB9   23                     INC   hl   
0CBA                SPREAD2:      
0CBA   D5                     PUSH   de   ; return de
0CBB   0B                     DEC   bc   ; count--
0CBC                SPREAD3:      
0CBC   79                     LD   a,c   ; exit loop if bc == 0
0CBD   B0                     OR   b   
0CBE   20 EF                  JR   nz,spread1   
0CC0   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0CC4   DD E9                  JP   (ix)   
0CC6                             ; shiftLeft                     15
0CC6                             ; value count -- value2          shift left count places
0CC6                SHIFTLEFT:      
0CC6   50 59                  LD   de,bc   ; save IP
0CC8   C1                     POP   bc   ; bc = count
0CC9   41                     LD   b,c   ; b = loop counter
0CCA   E1                     POP   hl   
0CCB   04                     INC   b   ; test for counter=0 case
0CCC   18 01                  JR   shiftLeft2   
0CCE                SHIFTLEFT1:      
0CCE   29                     ADD   hl,hl   ; left shift hl
0CCF                SHIFTLEFT2:      
0CCF   10 FD                  DJNZ   shiftLeft1   
0CD1   E5                     PUSH   hl   
0CD2   42 4B                  LD   bc,de   ; restore IP
0CD4   DD E9                  JP   (ix)   
0CD6                             ; shiftRight                    16
0CD6                             ; value count -- value2          shift left count places
0CD6                SHIFTRIGHT:      
0CD6   50 59                  LD   de,bc   ; save IP
0CD8   C1                     POP   bc   ; bc = count
0CD9   41                     LD   b,c   ; b = loop counter
0CDA   E1                     POP   hl   
0CDB   04                     INC   b   ; test for counter=0 case
0CDC   18 04                  JR   shiftRight2   
0CDE                SHIFTRIGHT1:      
0CDE   CB 3C                  SRL   h   ; right shift hl
0CE0   CB 1D                  RR   l   
0CE2                SHIFTRIGHT2:      
0CE2   10 FA                  DJNZ   shiftRight1   
0CE4   E5                     PUSH   hl   
0CE5   42 4B                  LD   bc,de   ; restore IP
0CE7   DD E9                  JP   (ix)   
0CE9                             ; division subroutine.
0CE9                             ; bc: divisor, de: dividend, hl: remainder
0CE9                DIVIDE:      
0CE9   21 00 00               LD   hl,0   ; zero the remainder
0CEC   3E 10                  LD   a,16   ; loop counter
0CEE                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CEE   CB 21                  SLA   c   
0CF0   CB 10                  RL   b   
0CF2   ED 6A                  ADC   hl,hl   
0CF4   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CF6   38 03                  JR   c,divide2   
0CF8   0C                     INC   c   
0CF9   18 01                  JR   divide3   
0CFB                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CFB   19                     ADD   hl,de   
0CFC                DIVIDE3:      
0CFC   3D                     DEC   a   
0CFD   20 EF                  JR   nz,divide1   
0CFF   50 59                  LD   de,bc   ; result from bc to de
0D01   C9                     RET      
0D02                DOTNEXT:      
0D02   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0D05   3C                     INC   a   
0D06   20 02                  JR   nz,dotNext1   
0D08   DD E9                  JP   (ix)   
0D0A                DOTNEXT1:      
0D0A   11 00 22               LD   de,BUFFER   
0D0D   2A EC 23               LD   hl,(vBufPtr)   
0D10   36 00                  LD   (hl),0   ; store NUL at end of string
0D12   ED 53 EC 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D16   EB                     EX   de,hl   ; hl = BUFFER
0D17   CD 90 0E               CALL   putstr   
0D1A   DD E9                  JP   (ix)   
0D1C                             ; arg_list - parses arg_list e.g. ab:c
0D1C                             ; -- arg_list*
0D1C                PARSEARGS:      
0D1C   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D1F   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0D22   E5                     PUSH   hl   ; save start of arg_list
0D23   23                     INC   hl   ; skip length fields to start of string
0D24   23                     INC   hl   
0D25   03                     INC   bc   ; point to next char
0D26                PARSEARGS1:      
0D26   0A                     LD   a,(bc)   
0D27   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D29   20 03                  JR   nz,parseArgs1a   
0D2B   14                     INC   d   ; non zero value local count acts as flag
0D2C   18 10                  JR   parseArgs3   
0D2E                PARSEARGS1A:      
0D2E   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D30   38 0F                  JR   c,parseArgs4   
0D32   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D34   30 0B                  JR   nc,parseArgs4   
0D36                PARSEARGS2:      
0D36   77                     LD   (hl),a   
0D37   23                     INC   hl   
0D38   1C                     INC   e   ; increase arg count
0D39   AF                     XOR   a   
0D3A   B2                     OR   d   
0D3B   28 01                  JR   z,parseArgs3   
0D3D   14                     INC   d   ; if d > 0 increase local count
0D3E                PARSEARGS3:      
0D3E   03                     INC   bc   ; point to next char
0D3F   18 E5                  JR   parseArgs1   
0D41                PARSEARGS4:      
0D41   0B                     DEC   bc   
0D42   AF                     XOR   a   
0D43   B2                     OR   d   
0D44   28 01                  JR   z,parseArgs5   
0D46   15                     DEC   d   ; remove initial inc
0D47                PARSEARGS5:      
0D47   23                     INC   hl   
0D48   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D4B   E1                     POP   hl   ; hl = start of arg_list
0D4C   72                     LD   (hl),d   ; write number of locals at start - 1
0D4D   23                     INC   hl   
0D4E   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D4F   2B                     DEC   hl   
0D50   E3                     EX   (sp),hl   
0D51   E9                     JP   (hl)   
0D52                             ; create block: parses block e.g. 00bbIC4uLi4g
0D52                             ; -- block*
0D52                PARSEBLOCK:      
0D52   C5                     PUSH   bc   ; return pointer to first { of block
0D53   03                     INC   bc   
0D54   16 01                  LD   d,1   ; nesting: count first parenthesis
0D56                PARSEBLOCK1:      ; Skip to end of definition
0D56   0A                     LD   a,(bc)   ; Get the next character
0D57   03                     INC   bc   ; Point to next character
0D58   FE 21                  CP   " " + 1   ; ignore whitespace
0D5A   38 FA                  JR   c,parseBlock1   
0D5C   FE 29                  CP   ")"   
0D5E   28 2D                  JR   z,parseBlock4   
0D60   FE 7D                  CP   "}"   
0D62   28 29                  JR   z,parseBlock4   
0D64   FE 5D                  CP   "]"   
0D66   28 25                  JR   z,parseBlock4   
0D68   FE 28                  CP   "("   
0D6A   28 16                  JR   z,parseBlock2   
0D6C   FE 7B                  CP   "{"   
0D6E   28 12                  JR   z,parseBlock2   
0D70   FE 5B                  CP   "["   
0D72   28 0E                  JR   z,parseBlock2   
0D74   FE 27                  CP   "'"   
0D76   28 0D                  JR   z,parseBlock3   
0D78   FE 60                  CP   "`"   
0D7A   28 09                  JR   z,parseBlock3   
0D7C   FE 22                  CP   DQ   
0D7E   28 05                  JR   z,parseBlock3   
0D80   18 D4                  JR   parseBlock1   
0D82                PARSEBLOCK2:      
0D82   14                     INC   d   
0D83   18 D1                  JR   parseBlock1   
0D85                PARSEBLOCK3:      
0D85   3E 80                  LD   a,$80   
0D87   AA                     XOR   d   
0D88   57                     LD   d,a   
0D89   20 CB                  JR   nz,parseBlock1   
0D8B   18 03                  JR   parseBlock5   
0D8D                PARSEBLOCK4:      
0D8D   15                     DEC   d   
0D8E   20 C6                  JR   nz,parseBlock1   ; get the next element
0D90                PARSEBLOCK5:      
0D90   60 69                  LD   hl,bc   ; hl = IP
0D92   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D95   B7                     OR   a   ; IP - HEAP
0D96   ED 52                  SBC   hl,de   
0D98   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D9A   28 1C                  JR   z,parseBlock6   
0D9C   60 69                  LD   hl,bc   ; hl = IP
0D9E   D1                     POP   de   ; de = block*
0D9F   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DA3   B7                     OR   a   ; bc = size
0DA4   ED 52                  SBC   hl,de   
0DA6   44 4D                  LD   bc,hl   
0DA8   EB                     EX   de,hl   ; hl = block* de = heap*
0DA9   ED 5B F0 23            LD   de,(vHeapPtr)   
0DAD   D5                     PUSH   de   ; return hblock*
0DAE   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0DB0   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0DB4   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DB8                PARSEBLOCK6:      
0DB8   0B                     DEC   bc   ; balanced, exit
0DB9   E1                     POP   hl   ; hl = block*
0DBA   E3                     EX   (sp),hl   ; return to caller
0DBB   E9                     JP   (hl)   
0DBC                             ; create function
0DBC                             ; arg_list* block* -- func*
0DBC                CREATEFUNC:      
0DBC   E1                     POP   hl   ; save retrn address
0DBD   22 08 24               LD   (vTemp3),hl   
0DC0   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DC4   E1                     POP   hl   ; hl = block*
0DC5   22 06 24               LD   (vTemp2),hl   ; save block*
0DC8   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0DCB   FD 56 05               LD   d,(iy+5)   
0DCE   7B                     LD   a,e   ; if arg_list == null then make a func
0DCF   B2                     OR   d   
0DD0   20 09                  JR   nz,createFunc0   
0DD2   21 00 00               LD   hl,0   ; partial_array = null
0DD5   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0DD9   18 65                  JR   createFunc5   
0DDB                CREATEFUNC0:      
0DDB   E1                     POP   hl   ; hl = inner_arg_list*
0DDC   E5                     PUSH   hl   ; save inner_arg_list
0DDD   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0DE1   7E                     LD   a,(hl)   ; compile inner_num_locals
0DE2   4F                     LD   c,a   ; b = inner_num_locals
0DE3   12                     LD   (de),a   
0DE4   23                     INC   hl   
0DE5   13                     INC   de   
0DE6   7E                     LD   a,(hl)   ; compile inner_length
0DE7   12                     LD   (de),a   
0DE8   91                     SUB   c   ; a = inner_num args
0DE9   23                     INC   hl   
0DEA   13                     INC   de   
0DEB   B7                     OR   a   ; compile args if inner_length > 0
0DEC   28 05                  JR   z,createFunc1   
0DEE   4F                     LD   c,a   ; bc = a
0DEF   06 00                  LD   b,0   
0DF1   ED B0                  LDIR      
0DF3                CREATEFUNC1:      
0DF3   EB                     EX   de,hl   ; hl = outer_arg_list
0DF4   FD 5E 04               LD   e,(iy+4)   
0DF7   FD 56 05               LD   d,(iy+5)   
0DFA   EB                     EX   de,hl   
0DFB   23                     INC   hl   ; a = outer_length
0DFC   7E                     LD   a,(hl)   
0DFD   23                     INC   hl   
0DFE   B7                     OR   a   
0DFF   28 05                  JR   z,createFunc2   
0E01   4F                     LD   c,a   
0E02   06 00                  LD   b,0   
0E04   ED B0                  LDIR      ; append outer_args
0E06                CREATEFUNC2:      ; a = outer_length
0E06   47                     LD   b,a   ; b = a = outer_length
0E07   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E0A   23                     INC   hl   
0E0B   7E                     LD   a,(hl)   ; add outer_length to new length
0E0C   80                     ADD   a,b   
0E0D   77                     LD   (hl),a   
0E0E   2B                     DEC   hl   
0E0F   78                     LD   a,b   ; save outer_length in a'
0E10   08                     EX   af,af'   
0E11   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E12   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E13   B7                     OR   a   
0E14   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E16   4F                     LD   c,a   ; c = inner_num_locals
0E17   06 00                  LD   b,0   ; bc = inner_num_locals
0E19   23                     INC   hl   ; a = inner_length
0E1A   7E                     LD   a,(hl)   
0E1B   91                     SUB   c   ; a = inner_num_args
0E1C   23                     INC   hl   ; hl = inner_arg_chars
0E1D   85                     ADD   a,l   ; hl += a
0E1E   6F                     LD   l,a   
0E1F   3E 00                  LD   a,0   
0E21   84                     ADD   a,h   
0E22   67                     LD   h,a   
0E23   ED B0                  LDIR      ; append inner_locals
0E25                CREATEFUNC2A:      
0E25   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E26   12                     LD   (de),a   ; compile partial_array length field
0E27   13                     INC   de   
0E28   AF                     XOR   a   
0E29   12                     LD   (de),a   
0E2A   13                     INC   de   
0E2B   D5                     PUSH   de   ; push partial_array*
0E2C   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E2D   FD 5E 02               LD   e,(iy+2)   
0E30   FD 56 03               LD   d,(iy+3)   
0E33   EB                     EX   de,hl   
0E34                CREATEFUNC3:      
0E34   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E35   4E                     LD   c,(hl)   
0E36   2B                     DEC   hl   
0E37   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E38   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E39   13                     INC   de   
0E3A   79                     LD   a,c   
0E3B   12                     LD   (de),a   
0E3C   13                     INC   de   
0E3D   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E3F                CREATEFUNC4:      
0E3F   E1                     POP   hl   ; hl = partial_array*
0E40                CREATEFUNC5:      
0E40   C1                     POP   bc   ; bc = new_arg_list*
0E41   D5                     PUSH   de   ; return new func*
0E42   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E43   73                     LD   (hl),e   ; compile partial_array* to func
0E44   23                     INC   hl   
0E45   72                     LD   (hl),d   
0E46   23                     INC   hl   
0E47   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0E4B   73                     LD   (hl),e   ; compile block* to func
0E4C   23                     INC   hl   
0E4D   72                     LD   (hl),d   
0E4E   23                     INC   hl   
0E4F   71                     LD   (hl),c   ; compile new_arg_list* to func
0E50   23                     INC   hl   
0E51   70                     LD   (hl),b   
0E52   23                     INC   hl   
0E53   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E56   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E5A   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E5D   E9                     JP   (hl)   
0E5E                             ;*******************************************************************
0E5E                             ; general routines
0E5E                             ;*******************************************************************
0E5E                             ; followed by a table
0E5E                             ; indexed on the 0-25 lowercase letter
0E5E                             ; db lsb(addr)
0E5E                             ; the final item index 26 matches any other char
0E5E                LOWERCASETABLE:      
0E5E   03                     INC   bc   
0E5F   0A                     LD   a,(bc)   
0E60   FE 7B                  CP   "z"+1   
0E62   30 0B                  JR   nc,lowerCaseTable2   
0E64   D6 61                  SUB   "a"   
0E66   38 07                  JR   c,lowerCaseTable2   
0E68                LOWERCASETABLE1:      
0E68   E1                     POP   hl   
0E69   85                     ADD   a,l   
0E6A   6F                     LD   l,a   
0E6B   6E                     LD   l,(hl)   ; must have the same msb as the table
0E6C   C3 75 0E               JP   commandTable1   
0E6F                LOWERCASETABLE2:      
0E6F   3E 1A                  LD   a,26   
0E71   0B                     DEC   bc   
0E72   18 F4                  JR   lowerCaseTable1   
0E74                             ; followed by a table
0E74                             ; db char
0E74                             ; dw addr
0E74                             ; the final item must have char == NUL
0E74                COMMANDTABLE:      
0E74   E1                     POP   hl   
0E75                COMMANDTABLE1:      
0E75   03                     INC   bc   
0E76                COMMANDTABLE2:      
0E76   AF                     XOR   a   
0E77   BE                     CP   (hl)   
0E78   20 03                  JR   nz,commandTable3   
0E7A   0B                     DEC   bc   
0E7B   18 09                  JR   commandTable4   
0E7D                COMMANDTABLE3:      
0E7D   0A                     LD   a,(bc)   
0E7E   BE                     CP   (hl)   
0E7F   28 05                  JR   z,commandTable4   
0E81   23                     INC   hl   
0E82   23                     INC   hl   
0E83   23                     INC   hl   
0E84   18 F0                  JR   commandTable2   
0E86                COMMANDTABLE4:      
0E86   23                     INC   hl   
0E87   5E                     LD   e,(hl)   
0E88   23                     INC   hl   
0E89   56                     LD   d,(hl)   
0E8A   EB                     EX   de,hl   
0E8B   E9                     JP   (hl)   
0E8C                PUTSTR0:      
0E8C   CD 85 00               CALL   putchar   
0E8F   23                     INC   hl   
0E90                PUTSTR:      
0E90   7E                     LD   a,(hl)   
0E91   B7                     OR   a   
0E92   20 F8                  JR   nz,putstr0   
0E94   C9                     RET      
0E95                             ; **************************************************************************
0E95                             ; calculate nesting value
0E95                             ; a is char to be tested,
0E95                             ; e is the nesting value (initially 0)
0E95                             ; e is increased by ( and [
0E95                             ; e is decreased by ) and ]
0E95                             ; e has its bit 7 toggled by `
0E95                             ; limited to 127 levels
0E95                             ; **************************************************************************
0E95                NESTING:      
0E95   FE 22                  CP   DQ   ; quote char
0E97   28 06                  JR   z,nesting0   
0E99   FE 60                  CP   "`"   ; quote char
0E9B   28 02                  JR   z,nesting0   
0E9D   18 0A                  JR   nesting1   
0E9F                NESTING0:      
0E9F   CB 7B                  BIT   7,e   
0EA1   28 03                  JR   z,nesting1a   
0EA3   CB BB                  RES   7,e   
0EA5   C9                     RET      
0EA6                NESTING1A:      
0EA6   CB FB                  SET   7,e   
0EA8   C9                     RET      
0EA9                NESTING1:      
0EA9   CB 7B                  BIT   7,e   
0EAB   C0                     RET   nz   
0EAC   FE 7B                  CP   "{"   
0EAE   28 08                  JR   z,nesting2   
0EB0   FE 5B                  CP   "["   
0EB2   28 04                  JR   z,nesting2   
0EB4   FE 28                  CP   "("   
0EB6   20 02                  JR   nz,nesting3   
0EB8                NESTING2:      
0EB8   1C                     INC   e   
0EB9   C9                     RET      
0EBA                NESTING3:      
0EBA   FE 7D                  CP   "}"   
0EBC   28 07                  JR   z,nesting4   
0EBE   FE 5D                  CP   "]"   
0EC0   28 03                  JR   z,nesting4   
0EC2   FE 29                  CP   ")"   
0EC4   C0                     RET   nz   
0EC5                NESTING4:      
0EC5   1D                     DEC   e   
0EC6   C9                     RET      
0EC7                PROMPT:      
0EC7   CD D7 0E               CALL   printStr   
0ECA   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0ECF   C9                     RET      
0ED0                CRLF:        
0ED0   CD D7 0E               CALL   printStr   
0ED3   0D 0A 00               .CSTR   "\r\n"   
0ED6   C9                     RET      
0ED7                             ; prints a null teminated string
0ED7                             ; the string should be immediately following the call
0ED7                PRINTSTR:      
0ED7   E3                     EX   (sp),hl   ; swap			
0ED8   CD 90 0E               CALL   putstr   
0EDB   23                     INC   hl   ; inc past NUL
0EDC   E3                     EX   (sp),hl   ; put it back	
0EDD   C9                     RET      
0EDE                INIT:        
0EDE   21 F0 01               LD   hl,titleStr   
0EE1   11 0E 24               LD   de,titleBuf   
0EE4   06 14                  LD   b,20   
0EE6                INIT1:       
0EE6   1A                     LD   a,(de)   
0EE7   BE                     CP   (hl)   
0EE8   20 17                  JR   nz,coldBoot0   
0EEA   13                     INC   de   
0EEB   23                     INC   hl   
0EEC   10 F8                  DJNZ   init1   
0EEE                WARMINIT:      
0EEE   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0EF2   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EF6   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EFA   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EFE   C3 38 0F               JP   start1   
0F01                COLDBOOT0:      
0F01   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0F04   11 0E 24               LD   de,titleBuf   
0F07   06 14                  LD   b,20   
0F09   ED B0                  LDIR      
0F0B                COLDINIT:      
0F0B   21 DE 01               LD   hl,isysVars   
0F0E   11 E6 23               LD   de,sysVars   
0F11   01 12 00               LD   bc,9 * 2   
0F14   ED B0                  LDIR      
0F16   21 00 23               LD   hl,vars   ; 52 vars LO HI
0F19   06 34                  LD   b,26*2   
0F1B   AF                     XOR   a   
0F1C                COLDBOOT1:      
0F1C   77                     LD   (hl),a   
0F1D   23                     INC   hl   
0F1E   10 FC                  DJNZ   coldBoot1   
0F20   DD 2A EE 23            LD   ix,(vNext)   
0F24   FD 21 00 21            LD   iy,STACK   
0F28   C9                     RET      
0F29                COLDSTART:      
0F29   31 00 21               LD   sp,STACK   
0F2C   CD 01 0F               CALL   coldBoot0   
0F2F   C3 38 0F               JP   start1   
0F32                START:       
0F32   31 00 21               LD   sp,STACK   ; start Monty
0F35   CD DE 0E               CALL   init   ; setups
0F38                START1:      
0F38   21 0E 24               LD   hl,titleBuf   
0F3B   CD 90 0E               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0F3E                INTERPRET:      
0F3E   CD C7 0E               CALL   prompt   
0F41   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F44   21 00 21               LD   hl,TIB   
0F47   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F4A                INTERPRET2:      ; calculate nesting
0F4A   1E 00                  LD   e,0   ; initilize nesting value
0F4C   C5                     PUSH   bc   ; save offset into TIB,
0F4D                             ; bc is also the count of chars in TIB
0F4D   21 00 21               LD   hl,TIB   ; hl is start of TIB
0F50   18 0B                  JR   interpret4   
0F52                INTERPRET3:      
0F52   3E 33                  LD   a,"3"   
0F54   CD 85 00               CALL   putchar   
0F57   7E                     LD   a,(hl)   ; a = char in TIB
0F58   23                     INC   hl   ; inc pointer into TIB
0F59   0B                     DEC   bc   ; dec count of chars in TIB
0F5A   CD 95 0E               CALL   nesting   ; update nesting value
0F5D                INTERPRET4:      
0F5D   79                     LD   a,c   ; is count zero?
0F5E   B0                     OR   b   
0F5F   20 F1                  JR   nz,interpret3   ; if not loop
0F61   C1                     POP   bc   ; restore offset into TIB
0F62                INTERPRET5:      
0F62   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F65   FE 20                  CP   $20   ; compare to space
0F67   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F69   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F6B                             ; ???? NEEDED?
0F6B   28 36                  JR   z,interpret8   
0F6D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F6F   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F71   FE 05                  CP   CTRL_E   
0F73   CA 04 10               JP   z,edit_   
0F76   FE 08                  CP   CTRL_H   
0F78   CA F4 0F               JP   z,backSpace_   
0F7B   FE 0A                  CP   CTRL_J   
0F7D   CA 07 10               JP   z,reEdit_   
0F80                             ; cp CTRL_S
0F80                             ; jp z,printStack_
0F80                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F80                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F80                             ; DB     lsb(list_)       ; FF  ^L 12
0F80                             ; DB     lsb(printStack_) ; DLE ^P 16
0F80                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F80                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F80                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F80                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F80                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F80                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F80                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F80                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F80                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F80                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F80                INTERPRET5A:      
0F80                             ; ld (vTIBPtr),bc
0F80                             ; ld bc,(vTIBPtr)
0F80   18 C8                  JR   interpret2   
0F82                INTERPRET6:      
0F82   21 00 21               LD   hl,TIB   
0F85   09                     ADD   hl,bc   
0F86   77                     LD   (hl),a   ; store the character in textbuf
0F87   03                     INC   bc   
0F88   CD 85 00               CALL   putchar   ; echo character to screen
0F8B   CD 95 0E               CALL   nesting   
0F8E   18 D2                  JR   interpret5   ; wait for next character
0F90                INTERPRET7:      
0F90   21 00 21               LD   hl,TIB   
0F93   09                     ADD   hl,bc   
0F94   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F96   23                     INC   hl   
0F97   36 0A                  LD   (hl),"\n"   
0F99   23                     INC   hl   
0F9A   03                     INC   bc   
0F9B   03                     INC   bc   
0F9C   CD D0 0E               CALL   crlf   ; echo character to screen
0F9F   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0FA0   B7                     OR   a   
0FA1   20 BF                  JR   nz,interpret5   
0FA3                INTERPRET8:      
0FA3   21 00 21               LD   hl,TIB   
0FA6   09                     ADD   hl,bc   
0FA7   22 EA 23               LD   (vTIBPtr),hl   
0FAA   01 00 21               LD   bc,TIB   
0FAD   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0FB1   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0FB5   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0FB9   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0FBD   0B                     DEC   bc   
0FBE                NEXT:        
0FBE   03                     INC   bc   ; Increment the IP
0FBF   0A                     LD   a,(bc)   ; Get the next character and dispatch
0FC0   FE 20                  CP   " "   ; whitespace?
0FC2   28 FA                  JR   z,next   ; space? ignore
0FC4   38 0D                  JR   c,next1   
0FC6   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FC8   6F                     LD   l,a   ; index into table
0FC9   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FCB   6E                     LD   l,(hl)   ; get low jump address
0FCC   24                     INC   h   ; page 2
0FCD   FE BA                  CP   "Z" - "!" + 1 + $80   
0FCF   38 01                  JR   c,next0   
0FD1   24                     INC   h   ; page 3
0FD2                NEXT0:       
0FD2   E9                     JP   (hl)   ; Jump to routine
0FD3                NEXT1:       
0FD3   FE 00                  CP   NUL   ; end of input string?
0FD5   28 03                  JR   z,exit   
0FD7   C3 3E 0F               JP   interpret   ; no, other whitespace, macros?
0FDA                EXIT:        
0FDA   03                     INC   bc   
0FDB   60 69                  LD   hl,bc   
0FDD   E9                     JP   (hl)   
0FDE                RUN:         
0FDE   C1                     POP   bc   
0FDF   0B                     DEC   bc   
0FE0   DD E9                  JP   (ix)   
0FE2                ERROR:       
0FE2   E5                     PUSH   hl   
0FE3   CD DE 0F               CALL   run   
0FE6   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0FF1   C3 3E 0F               JP   interpret   
0FF4                BACKSPACE_:      
0FF4   79                     LD   a,c   
0FF5   B0                     OR   b   
0FF6   CA 4A 0F               JP   z,interpret2   
0FF9   0B                     DEC   bc   
0FFA   CD D7 0E               CALL   printStr   
0FFD   08 20 08 00            .CSTR   "\b \b"   
1001   C3 4A 0F               JP   interpret2   
1004                             ; edit
1004                EDIT_:       
1004   C3 3E 0F               JP   interpret   
1007                REEDIT_:      
1007   C3 3E 0F               JP   interpret   
100A                             ; editDef:
100A                             ;     pop hl                      ; pop ret address
100A                             ;     ex (sp),hl                  ; swap with TOS
100A                             ;     push hl                     ; dup TOS
100A                             ;     ld a,l                      ; a = ident
100A                             ;     ld de,TIB                   ; de = start of TIB
100A                             ;     ld (vTIBPtr),de             ; update TIB*
100A                             ;     push ix                     ; save NEXT
100A                             ;     ld ix,editDef0              ; NEXT = editDef0
100A                             ;     jp lookupRef                ; convert letter into address
100A                             ; editDef0:
100A                             ;     ld e,(hl)                   ; de = (hl++)
100A                             ;     inc hl
100A                             ;     ld d,(hl)
100A                             ;     ld a,d                      ; de == 0 ?
100A                             ;     or e
100A                             ;     jr z,editDef4
100A                             ;     ld ix,editDef3              ; NEXT = editDef3
100A                             ;     ex de,hl
100A                             ;     ld a,(hl)
100A                             ;     cp "{"
100A                             ;     jr nz,editDef1
100A                             ;     jp editBlock0               ; convert letter into address
100A                             ; editDef1:
100A                             ;     cp "("
100A                             ;     jr nz,editDef2
100A                             ;     jp editBlock0               ; convert letter into address
100A                             ; editDef2:
100A                             ;     jp editFunc
100A                             ; editDef3:
100A                             ;     ld a," "                    ; write assign
100A                             ;     call writeChar
100A                             ;     pop hl                      ; a = ident
100A                             ;     ld a,l
100A                             ;     call writeChar
100A                             ;     ld a,"="                    ; write assign
100A                             ;     call writeChar
100A                             ;     ld ix,editDef4              ; NEXT = editDef4
100A                             ;     jp printTIB
100A                             ; editDef4:
100A                             ;     pop ix                      ; restore NEXT
100A                             ;     jp (ix)
100A                             ; writeChar:
100A                             ;     ld de,(vTIBPtr)             ; de = TIB*
100A                             ;     ld (de),a                   ; write ident
100A                             ;     inc de
100A                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
100A                             ;     ret
100A                             ; ; printTIB
100A                             ; printTIB:
100A                             ;     ld hl,(vTIBPtr)
100A                             ;     ld de,TIB
100A                             ;     or a
100A                             ;     sbc hl,de
100A                             ;     jp printTIB2
100A                             ; printTIB1:
100A                             ;     ld a,(de)
100A                             ;     call putchar
100A                             ; printTIB2:
100A                             ;     ld a,l
100A                             ;     or h
100A                             ;     jr nz,printTIB1
100A                             ;     jp (ix)
100A                             ; editBlock:
100A                             ;     pop hl                      ; hl = block*
100A                             ; editBlock0:
100A                             ;     push ix                     ; save next
100A                             ;     push hl                     ; push block*
100A                             ;     push hl                     ; push block*
100A                             ;     ld ix,(editBlock2)
100A                             ;     jp blockLength
100A                             ; editBlock1:
100A                             ;     pop hl                      ; bc = length, (sp) = IP
100A                             ;     pop de                      ; de = block*
100A                             ;     ld a,l
100A                             ;     or h
100A                             ;     jr z,editBlock2
100A                             ;     push bc
100A                             ;     ld bc,hl
100A                             ;     ex de,hl                    ; hl = block*
100A                             ;     ld de,(vTIBPtr)              ; de = TIB*
100A                             ;     ldir                        ; copy block to TIB
100A                             ;     ld (vTIBPtr),de              ; save TIB*
100A                             ;     pop bc
100A                             ; editBlock2:
100A                             ;     pop ix                      ; restore next
100A                             ;     jp (ix)
100A                             ; editFunc:
100A                             ;     jp (ix)
100A                             ; editArray:
100A                             ;     jp (ix)
100A                             ; editparseArgs:
100A                             ;     jp (ix)
100A                             ; ; blockLength
100A                             ; ; addr1 -- length
100A                             ; blockLength:
100A                             ;     pop hl                      ; block*
100A                             ;     push hl                     ; save block*
100A                             ;     inc hl                      ; skip first char
100A                             ;     ld d,1                      ; increase nesting
100A                             ; blockLength1:                   ; Skip to end of definition
100A                             ;     ld a,(hl)                   ; Get the next character
100A                             ;     inc hl                      ; Point to next character
100A                             ;     cp " " + 1                  ; ignore whitespace
100A                             ;     jr c,blockLength1
100A                             ;     cp ")"
100A                             ;     jr z,blockLength4
100A                             ;     cp "}"
100A                             ;     jr z,blockLength4
100A                             ;     cp "]"
100A                             ;     jr z,blockLength4
100A                             ;     cp "("
100A                             ;     jr z,blockLength2
100A                             ;     cp "{"
100A                             ;     jr z,blockLength2
100A                             ;     cp "["
100A                             ;     jr z,blockLength2
100A                             ;     cp "'"
100A                             ;     jr z,blockLength3
100A                             ;     cp "`"
100A                             ;     jr z,blockLength3
100A                             ;     cp DQ
100A                             ;     jr z,blockLength3
100A                             ;     jr blockLength1
100A                             ; blockLength2:
100A                             ;     inc d
100A                             ;     jr blockLength1
100A                             ; blockLength4:
100A                             ;     dec d
100A                             ;     jr nz, blockLength1         ; get the next element
100A                             ; blockLength3:
100A                             ;     ld a,$80
100A                             ;     xor d
100A                             ;     ld d,a
100A                             ;     jr nz, blockLength1
100A                             ;     pop hl                      ; hl = block*
100A                             ;     or a
100A                             ;     sbc hl,de
100A                             ;     push hl
100A                             ;     jp (ix)
100A                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
100A                             ; \a start of stack \#3 depth \b base \$ prompt
100A                             ; DW dStack               ; a vS0 start of datastack			
100A                             ; DW FALSE                ; b vBase16
100A                             ; DW 0                    ; c vTIBPtr an offset to the tib
100A                             ; DW 0                    ; d
100A                             ; DW 65                   ; e vLastDef "A" last command u defined
100A                             ; DW 0                    ; f
100A                             ; DW page6                ; g 256 bytes limits
100A                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
100A                F1:          
100A                F2:          
100A                F3:          
100A                F4:          
100A                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2502 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
QUESTION_:          021B DEFINED AT LINE 198 IN MAIN.asm
BANG_:              021E DEFINED AT LINE 201 IN MAIN.asm
BANG:               021E DEFINED AT LINE 202 IN MAIN.asm
NOT:                0229 DEFINED AT LINE 210 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
EQ_:                022F DEFINED AT LINE 214 IN MAIN.asm
EQ:                 022F DEFINED AT LINE 215 IN MAIN.asm
EQ0:                0239 DEFINED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
EQ1:                023A DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
GT_:                023E DEFINED AT LINE 228 IN MAIN.asm
GT:                 023E DEFINED AT LINE 229 IN MAIN.asm
LT_:                0249 DEFINED AT LINE 237 IN MAIN.asm
LT:                 0249 DEFINED AT LINE 238 IN MAIN.asm
LT1:                0252 DEFINED AT LINE 245 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
HASH_:              025B DEFINED AT LINE 253 IN MAIN.asm
HASH:               025B DEFINED AT LINE 254 IN MAIN.asm
ARRAYINDEX:         025B DEFINED AT LINE 255 IN MAIN.asm
ARRAYINDEX0:        0263 DEFINED AT LINE 261 IN MAIN.asm
ARRAYINDEX1:        0264 DEFINED AT LINE 263 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
ARRAYINDEX2:        0270 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 277 IN MAIN.asm
AMPER_:             0276 DEFINED AT LINE 282 IN MAIN.asm
AMPER:              0276 DEFINED AT LINE 283 IN MAIN.asm
AND:                0276 DEFINED AT LINE 284 IN MAIN.asm
MINUS_:             0280 DEFINED AT LINE 297 IN MAIN.asm
MINUS:              0280 DEFINED AT LINE 298 IN MAIN.asm
SUB:                028C DEFINED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
SUB1:               0296 DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
STAR_:              029E DEFINED AT LINE 321 IN MAIN.asm
STAR:               029E DEFINED AT LINE 322 IN MAIN.asm
MUL:                02A6 DEFINED AT LINE 328 IN MAIN.asm
MUL2:               02A8 DEFINED AT LINE 331 IN MAIN.asm
MUL3:               02B0 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
PLUS_:              02C2 DEFINED AT LINE 351 IN MAIN.asm
PLUS:               02C2 DEFINED AT LINE 352 IN MAIN.asm
ADD:                02C2 DEFINED AT LINE 353 IN MAIN.asm
ADD1:               02CD DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
ADD3:               02D1 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
ADD4:               02DB DEFINED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
COLON_:             02DE DEFINED AT LINE 377 IN MAIN.asm
COLON:              02DE DEFINED AT LINE 378 IN MAIN.asm
DEFINESTART:        02EB DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
UPCASE_:            02F4 DEFINED AT LINE 393 IN MAIN.asm
UPCASE:             02F4 DEFINED AT LINE 394 IN MAIN.asm
SEMICOLON_:         02F9 DEFINED AT LINE 400 IN MAIN.asm
SEMICOLON:          02F9 DEFINED AT LINE 402 IN MAIN.asm
DEFINEEND:          02F9 DEFINED AT LINE 403 IN MAIN.asm
DEFINEEND1:         030B DEFINED AT LINE 412 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
LOWCASE_:           030D DEFINED AT LINE 420 IN MAIN.asm
LOWCASE:            030D DEFINED AT LINE 421 IN MAIN.asm
IDENT1:             0312 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 397 IN MAIN.asm
LBRACK_:            031F DEFINED AT LINE 437 IN MAIN.asm
LBRACK:             031F DEFINED AT LINE 438 IN MAIN.asm
ARRAYSTART:         031F DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH_:         033B DEFINED AT LINE 454 IN MAIN.asm
BACKSLASH:          033B DEFINED AT LINE 455 IN MAIN.asm
LAMBDA:             033B DEFINED AT LINE 456 IN MAIN.asm
LAMBDA1:            0340 DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
LAMBDA2:            0350 DEFINED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
RBRACK_:            035C DEFINED AT LINE 476 IN MAIN.asm
RBRACK:             035C DEFINED AT LINE 477 IN MAIN.asm
ARRAYEND:           035C DEFINED AT LINE 478 IN MAIN.asm
ARRAYEND1:          0378 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARRAYEND2:          0388 DEFINED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ARRAYEND3:          038D DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
CARET_:             03AC DEFINED AT LINE 530 IN MAIN.asm
CARET:              03AC DEFINED AT LINE 534 IN MAIN.asm
GO:                 03AC DEFINED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03AD DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
GO2:                03B3 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
GRAVE_:             03C2 DEFINED AT LINE 551 IN MAIN.asm
GRAVE:              03C2 DEFINED AT LINE 552 IN MAIN.asm
PRINTLITERAL:       03C2 DEFINED AT LINE 553 IN MAIN.asm
PRINTLITERAL0:      03C9 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
PRINTLITERAL1:      03CC DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
LBRACE_:            03D8 DEFINED AT LINE 568 IN MAIN.asm
LBRACE:             03D8 DEFINED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03DD DEFINED AT LINE 575 IN MAIN.asm
PIPE:               03DD DEFINED AT LINE 576 IN MAIN.asm
OR:                 03DD DEFINED AT LINE 577 IN MAIN.asm
RBRACE_:            03E8 DEFINED AT LINE 588 IN MAIN.asm
TILDE_:             03EB DEFINED AT LINE 592 IN MAIN.asm
UNDERSCORE_:        03EE DEFINED AT LINE 595 IN MAIN.asm
CHAR:               03EE DEFINED AT LINE 596 IN MAIN.asm
AT_:                03F6 DEFINED AT LINE 604 IN MAIN.asm
AT:                 03F6 DEFINED AT LINE 605 IN MAIN.asm
ADDR:               03F6 DEFINED AT LINE 606 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 618 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 788 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 789 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 790 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 799 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 835 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 849 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 859 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 865 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 885 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 892 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 898 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 902 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 908 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 912 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 917 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 923 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 933 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 949 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 953 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 969 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 975 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 980 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 985 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 991 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
ABSOLUTE:           05E1 DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
ABSOLUTE1:          05EC DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
ADDROF:             05EF DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
ADDROF1:            0603 DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
ADDROF2:            060E DEFINED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
ARRAYLENGTH:        0610 DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0616 DEFINED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
ARRAYSIZE:          0619 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
PERFORMM_1509S1064: 0620 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              062D DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
BREAK1:             0634 DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
BYTEMODE:           0647 DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
BYTEMODE1:          064A DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
COMMENT:            064F DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
CONSTHEAPSTART:     0658 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
CONSTTIBSTART:      065E DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
CONSTBUFSTART:      0664 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
DECBASE:            066A DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
DECBASE1:           066D DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
ERROR1:             0672 DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
HEXBASE:            0678 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
INPUT:              067E DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
KEY:                0689 DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
OUTPUT:             0692 DEFINED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
QUIT:               069B DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
QUIT1:              06A2 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
RECUR:              06A5 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
REMAIN:             06AB DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
STRINGBEGIN:        06B1 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
STRINGEND:          06B9 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
STRINGEND1:         06E0 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
STRINGLENGTH:       06E8 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06EE DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
STRINGLENGTH2:      06F0 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
STRINGLENGTH3:      06F4 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
STRINGSIZE:         06F7 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
PERFORMM_1657S1232: 06FE DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      0703 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
STRINGCOMPARE1:     0705 DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
STRINGCOMPARE2:     0710 DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
STRINGCOMPARE3:     0715 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
STRINGCOMPARE4:     0718 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
VARBUFPTR:          071B DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
VARHEAPPTR:         0724 DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
VARTIBPTR:          072D DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
VARIABLE:           0736 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
CONSTANT:           0739 DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
WORDMODE:           073C DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
XOR:                0742 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
XOR1:               0743 DEFINED AT LINE 1290 IN MAIN.asm
RANGESRC:           074D DEFINED AT LINE 32
                    > USED AT LINE 929 IN MAIN.asm
RANGESRCM_1722S1306: 075C DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07E1 DEFINED AT LINE 32
                    > USED AT LINE 841 IN MAIN.asm
ARRAYITERM_1741S1326: 07EE DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0862 DEFINED AT LINE 32
                    > USED AT LINE 941 IN MAIN.asm
STRINGITERM_1760S1346: 086F DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08EA DEFINED AT LINE 32
                    > USED AT LINE 904 IN MAIN.asm
MAPM_1780S1368:     08F7 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             092C DEFINED AT LINE 32
                    > USED AT LINE 873 IN MAIN.asm
FILTERM_1794S1383:  093A DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               098A DEFINED AT LINE 32
                    > USED AT LINE 867 IN MAIN.asm
FOLDM_1813S1403:    0999 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09DC DEFINED AT LINE 32
                    > USED AT LINE 869 IN MAIN.asm
FOREACHM_1827S1418: 09EA DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A28 DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
FUNCSRCM_1841S1433: 0A34 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A61 DEFINED AT LINE 32
                    > USED AT LINE 621 IN MAIN.asm
PRINTARRAYM_1851S1444: 0A6F DEFINED AT LINE 39
                    > USED AT LINE 35
RPAREN:             0AA9 DEFINED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
TILDE:              0AB1 DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
INVERT:             0AB1 DEFINED AT LINE 1461 IN MAIN.asm
DOLLAR:             0ABB DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0ABB DEFINED AT LINE 1473 IN MAIN.asm
HEXNUM1:            0ABE DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
HEXNUM2:            0AC6 DEFINED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
QUESTION:           0AD8 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
IF:                 0AD8 DEFINED AT LINE 1497 IN MAIN.asm
IFTE:               0AE4 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
IFTE1:              0AE5 DEFINED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
QUOTE:              0AF1 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0AF1 DEFINED AT LINE 1523 IN MAIN.asm
STRING1:            0AFA DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
STRING2:            0AFD DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
STRING3:            0B03 DEFINED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
PERCENT:            0B0B DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0B0B DEFINED AT LINE 1550 IN MAIN.asm
ARG0:               0B27 DEFINED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
ARG0A:              0B30 DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
ARG1:               0B35 DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
ARG1A:              0B3D DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
NUM:                0B40 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
NUM0:               0B49 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
NUM1:               0B4A DEFINED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
NUM2:               0B62 DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
NUM3:               0B6D DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
RBRACE:             0B70 DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
BLOCKEND:           0B70 DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
BLOCKEND1:          0BA2 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
BLOCKEND2:          0BAE DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
BLOCKEND3:          0BC0 DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
BLOCKEND4:          0BD4 DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
GOBLOCK:            0BDD DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
GOBLOCK2:           0C02 DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
GOBLOCK3:           0C0C DEFINED AT LINE 1713 IN MAIN.asm
GOFUNC:             0C10 DEFINED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 547 IN MAIN.asm
GOFUNC1:            0C29 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
GOFUNC2:            0C2F DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
GOFUNC3:            0C3A DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
GOFUNC4:            0C52 DEFINED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
GOFUNC5:            0C55 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
GOFUNC6:            0C58 DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
GOFUNC7:            0C5B DEFINED AT LINE 1776 IN MAIN.asm
GOFUNC8:            0C5F DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
ASSIGN:             0C6A DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
ASSIGN0:            0C6C DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
ASSIGN1:            0C70 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
ASSIGN2:            0C79 DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
EQUALS:             0C7B DEFINED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
NOTEQUALS:          0C82 DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
LESSTHANEQ:         0C89 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
LESSTHAN:           0C8E DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
LESSTHAN1:          0C93 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
TRUE1:              0C96 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
NULL1:              0C9C DEFINED AT LINE 1843 IN MAIN.asm
FALSE1:             0C9C DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
SPREAD:             0CA2 DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SPREAD1:            0CAF DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
SPREAD2:            0CBA DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
SPREAD3:            0CBC DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
SHIFTLEFT:          0CC6 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT1:         0CCE DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
SHIFTLEFT2:         0CCF DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
SHIFTRIGHT:         0CD6 DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
SHIFTRIGHT1:        0CDE DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
SHIFTRIGHT2:        0CE2 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
DIVIDE:             0CE9 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
DIVIDE1:            0CEE DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
DIVIDE2:            0CFB DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
DIVIDE3:            0CFC DEFINED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
DOTNEXT:            0D02 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
DOTNEXT1:           0D0A DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
PARSEARGS:          0D1C DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
PARSEARGS1:         0D26 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
PARSEARGS1A:        0D2E DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PARSEARGS2:         0D36 DEFINED AT LINE 1969 IN MAIN.asm
PARSEARGS3:         0D3E DEFINED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
PARSEARGS4:         0D41 DEFINED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
PARSEARGS5:         0D47 DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
PARSEBLOCK:         0D52 DEFINED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
PARSEBLOCK1:        0D56 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
PARSEBLOCK2:        0D82 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
PARSEBLOCK3:        0D85 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
PARSEBLOCK4:        0D8D DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
PARSEBLOCK5:        0D90 DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
PARSEBLOCK6:        0DB8 DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
CREATEFUNC:         0DBC DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
CREATEFUNC0:        0DDB DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
CREATEFUNC1:        0DF3 DEFINED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
CREATEFUNC2:        0E06 DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
CREATEFUNC2A:       0E25 DEFINED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
CREATEFUNC3:        0E34 DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
CREATEFUNC4:        0E3F DEFINED AT LINE 2164 IN MAIN.asm
CREATEFUNC5:        0E40 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
LOWERCASETABLE:     0E5E DEFINED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
LOWERCASETABLE1:    0E68 DEFINED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
LOWERCASETABLE2:    0E6F DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
COMMANDTABLE:       0E74 DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
COMMANDTABLE1:      0E75 DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
COMMANDTABLE2:      0E76 DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
COMMANDTABLE3:      0E7D DEFINED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
COMMANDTABLE4:      0E86 DEFINED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
PUTSTR0:            0E8C DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
PUTSTR:             0E90 DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
NESTING:            0E95 DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
NESTING0:           0E9F DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
NESTING1A:          0EA6 DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
NESTING1:           0EA9 DEFINED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
NESTING2:           0EB8 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
NESTING3:           0EBA DEFINED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
NESTING4:           0EC5 DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
PROMPT:             0EC7 DEFINED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
CRLF:               0ED0 DEFINED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
PRINTSTR:           0ED7 DEFINED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2527 IN MAIN.asm
INIT:               0EDE DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
INIT1:              0EE6 DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
WARMINIT:           0EEE DEFINED AT LINE 2331 IN MAIN.asm
COLDBOOT0:          0F01 DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
COLDINIT:           0F0B DEFINED AT LINE 2344 IN MAIN.asm
COLDBOOT1:          0F1C DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
COLDSTART:          0F29 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
START:              0F32 DEFINED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 7
START1:             0F38 DEFINED AT LINE 2369 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
INTERPRET:          0F3E DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2520 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
INTERPRET2:         0F4A DEFINED AT LINE 2381 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
INTERPRET3:         0F52 DEFINED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
INTERPRET4:         0F5D DEFINED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
INTERPRET5:         0F62 DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
INTERPRET5A:        0F80 DEFINED AT LINE 2442 IN MAIN.asm
INTERPRET6:         0F82 DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
INTERPRET7:         0F90 DEFINED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
INTERPRET8:         0FA3 DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
NEXT:               0FBE DEFINED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
NEXT0:              0FD2 DEFINED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 2497 IN MAIN.asm
NEXT1:              0FD3 DEFINED AT LINE 2501 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
EXIT:               0FDA DEFINED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
RUN:                0FDE DEFINED AT LINE 2511 IN MAIN.asm
                    > USED AT LINE 2518 IN MAIN.asm
ERROR:              0FE2 DEFINED AT LINE 2516 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
BACKSPACE_:         0FF4 DEFINED AT LINE 2522 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
EDIT_:              1004 DEFINED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
REEDIT_:            1007 DEFINED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
F1:                 100A DEFINED AT LINE 10
                    > USED AT LINE 875 IN MAIN.asm
F2:                 100A DEFINED AT LINE 11
                    > USED AT LINE 877 IN MAIN.asm
F3:                 100A DEFINED AT LINE 12
                    > USED AT LINE 879 IN MAIN.asm
F4:                 100A DEFINED AT LINE 13
                    > USED AT LINE 881 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2346 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2358 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 607 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
