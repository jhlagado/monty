0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 B9 0B               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQUOTE:   EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                TMAGIC:   EQU   $AA   ; magic number
00C9                TRESERV:   EQU   $A0   ; reserved
00C9                TNUMBER:   EQU   $A1   ; number
00C9                TSTRING:   EQU   $A2   ; string
00C9                TPOINTER:   EQU   $A3   ; pointer
00C9                TARRAY:   EQU   $A4   ; array
00C9                TBLOCK:   EQU   $A5   ; block
00C9                TLAMBDA:   EQU   $A6   ; lambda
00C9                TARGLST:   EQU   $A7   ; arglist
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   4D 0C                  DW   next   ; nNext
018A   1E 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dblquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FB 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 17 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 71 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AB 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D1 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3A 05               JP   rbrace   
031E                TICK_:       
031E   C3 96 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 98 07               JP   semicolon   
0324                DOT_:        
0324   C3 06 06               JP   dot   
0327                COLON_:      
0327   C3 9A 04               JP   colon   
032A                UPCASE_:      
032A   C3 14 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 19 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 2B 07               JP   question   
0333                STAR_:       
0333   C3 44 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 60 07               JP   num   
033E                HASH_:       
033E   C3 F7 06               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 52 06               JP   caret   
0347                COMMA_:      
0347   C3 AD 05               JP   comma   
034A                DBLQUOTE_:      
034A   C3 D7 07               JP   dblquote   
034D                MINUS_:      
034D   C3 FF 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 89 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 31 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA C4 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA B4 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 39 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 3E 06               JP   lessthan   
037C                SLASH_:      
037C   C3 BC 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 90 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 8B 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 23            LD   de,(vPointer)   
039A   21 F2 23               LD   hl,vPointer   
039D   C3 7E 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; $a .. $z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                DOLLAR:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1C                  JR   z,arg0a   
03CF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D0   2B                     DEC   hl   
03D1   7E                     LD   a,(hl)   
03D2   23                     INC   hl   
03D3   23                     INC   hl   
03D4   B7                     OR   a   
03D5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D7   5F                     LD   e,a   ; e = a = num_args
03D8   03                     INC   bc   ; a = next char = dollar_name
03D9   0A                     LD   a,(bc)   
03DA   C5                     PUSH   bc   ; save IP
03DB   43                     LD   b,e   ; b = e = num_args
03DC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DF   FD 56 03               LD   d,(iy+3)   
03E2                ARG0:        
03E2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E3   1B                     DEC   de   
03E4   BE                     CP   (hl)   
03E5   28 09                  JR   z,arg1   
03E7   23                     INC   hl   ; hl = next arg_list*
03E8   10 F8                  DJNZ   arg0   
03EA   C1                     POP   bc   ; no match, restore IP
03EB                ARG0A:       
03EB   11 00 00               LD   de,0   ; return 0
03EE   18 08                  JR   arg1a   
03F0                ARG1:        
03F0   C1                     POP   bc   ; restore IP
03F1   EB                     EX   de,hl   ; hl = arg*
03F2   22 F2 23               LD   (vPointer),hl   ; store arg* in setter
03F5   5E                     LD   e,(hl)   
03F6   23                     INC   hl   
03F7   56                     LD   d,(hl)   ; de = arg
03F8                ARG1A:       
03F8   D5                     PUSH   de   ; push arg
03F9   DD E9                  JP   (ix)   
03FB                LBRACK:      
03FB                ARRAYSTART:      
03FB   11 00 00               LD   de,0   ; create stack frame
03FE   D5                     PUSH   de   ; push null for IP
03FF   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0402   FD 56 05               LD   d,(iy+5)   ; 
0405   D5                     PUSH   de   ; 
0406   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0409   FD 56 03               LD   d,(iy+3)   ; 
040C   D5                     PUSH   de   ; 
040D   FD E5                  PUSH   iy   ; push BP
040F   FD 21 00 00            LD   iy,0   ; BP = SP
0413   FD 39                  ADD   iy,sp   
0415   DD E9                  JP   (ix)   
0417                RBRACK:      
0417                ARRAYEND:      
0417   FD 54                  LD   d,iyh   ; de = BP
0419   FD 5D                  LD   e,iyl   
041B   ED 43 00 24            LD   (vTemp1),bc   ; save IP
041F   62 6B                  LD   hl,de   ; hl = de = BP
0421   B7                     OR   a   
0422   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0424   CB 3C                  SRL   h   ; 
0426   CB 1D                  RR   l   
0428   44 4D                  LD   bc,hl   ; bc = count
042A   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
042D   71                     LD   (hl),c   ; write num items in length word
042E   23                     INC   hl   
042F   70                     LD   (hl),b   
0430   23                     INC   hl   ; hl = array[0], bc = count
0431                             ; de = BP, hl = array[0], bc = count
0431   3E A4                  LD   a,TARRAY   ; write type tag
0433   77                     LD   (hl),a   
0434   23                     INC   hl   
0435   3E AA                  LD   a,TMAGIC   ; write magic byte
0437   77                     LD   (hl),a   
0438   23                     INC   hl   
0439   18 15                  JR   arrayEnd3   
043B                ARRAYEND1:      
043B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043E   77                     LD   (hl),a   ; write lsb of array item
043F   23                     INC   hl   ; move to msb of array item
0440   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0443   3D                     DEC   a   
0444   28 05                  JR   z,arrayEnd2   
0446   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0449   77                     LD   (hl),a   ; write msb of array item
044A   23                     INC   hl   ; move to next word in array
044B                ARRAYEND2:      
044B   FD 2B                  DEC   iy   ; move to next word on stack
044D   FD 2B                  DEC   iy   
044F   0B                     DEC   bc   ; dec items count
0450                ARRAYEND3:      
0450   79                     LD   a,c   ; if not zero loop
0451   B0                     OR   b   
0452   20 E7                  JR   nz,arrayEnd1   
0454   EB                     EX   de,hl   ; de = end of array, hl = BP
0455   F9                     LD   sp,hl   ; sp = BP
0456   E1                     POP   hl   ; de = end of array, hl = old BP
0457   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0458   FD 62                  LD   iyh,d   
045A   FD 6B                  LD   iyl,e   
045C   D1                     POP   de   ; pop arg_list (discard)
045D   D1                     POP   de   ; pop first_arg* (discard)
045E   D1                     POP   de   ; pop IP (discard)
045F   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-4]
0463   13                     INC   de   ; de = array[0]
0464   13                     INC   de   
0465   13                     INC   de   
0466   13                     INC   de   
0467   D5                     PUSH   de   ; return array[0]
0468   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
046B   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
046F   DD E9                  JP   (ix)   
0471                             ; index of an array, based on vDataWidth
0471                             ; array num -- value    ; also sets vPointer to address
0471                ARRINDEX:      
0471   E1                     POP   hl   ; hl = index
0472   D1                     POP   de   ; de = array
0473   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0476   3D                     DEC   a   
0477   28 01                  JR   z,arrIndex1   
0479                ARRINDEX0:      
0479   29                     ADD   hl,hl   ; if data width = 2 then double
047A                ARRINDEX1:      
047A   19                     ADD   hl,de   ; add addr
047B   22 F2 23               LD   (vPointer),hl   ; store address in setter
047E   16 00                  LD   d,0   
0480   5E                     LD   e,(hl)   
0481   B7                     OR   a   ; check data width again
0482   28 02                  JR   z,arrIndex2   
0484   23                     INC   hl   
0485   56                     LD   d,(hl)   
0486                ARRINDEX2:      
0486   D5                     PUSH   de   
0487   DD E9                  JP   (ix)   
0489                             ; value _oldValue --            ; uses address in vPointer
0489                ASSIGN:      
0489   E1                     POP   hl   ; discard last accessed value
048A   E1                     POP   hl   ; hl = new value
048B                ASSIGN0:      
048B   EB                     EX   de,hl   ; de = new value
048C                ASSIGNX:      
048C   2A F2 23               LD   hl,(vPointer)   
048F   73                     LD   (hl),e   
0490   3A E6 23               LD   a,(vDataWidth)   
0493   3D                     DEC   a   ; is it byte?
0494   28 02                  JR   z,assign1   
0496   23                     INC   hl   
0497   72                     LD   (hl),d   
0498                ASSIGN1:      
0498   DD E9                  JP   (ix)   
049A                             ; arg_list - parses input (ab:c)
049A                             ; names after the : represent uninitialised locals
049A                             ; return values are the state of the stack after the block ends
049A                COLON:       
049A                ARGLIST:      
049A   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049D   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
04A0   23                     INC   hl   ; skip length field to start
04A1   23                     INC   hl   
04A2   E5                     PUSH   hl   ; save start of arg_list
04A3   03                     INC   bc   ; point to next char
04A4                ARGLIST1:      
04A4   0A                     LD   a,(bc)   
04A5   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A7   20 03                  JR   nz,arglist1a   
04A9   14                     INC   d   ; non zero value local count acts as flag
04AA   18 10                  JR   arglist3   
04AC                ARGLIST1A:      
04AC   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AE   38 0F                  JR   c,arglist4   
04B0   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B2   30 0B                  JR   nc,arglist4   
04B4                ARGLIST2:      
04B4   77                     LD   (hl),a   
04B5   23                     INC   hl   
04B6   1C                     INC   e   ; increase arg count
04B7   AF                     XOR   a   
04B8   B2                     OR   d   
04B9   28 01                  JR   z,arglist3   
04BB   14                     INC   d   ; if d > 0 increase local count
04BC                ARGLIST3:      
04BC   03                     INC   bc   ; point to next char
04BD   18 E5                  JR   arglist1   
04BF                ARGLIST4:      
04BF   0B                     DEC   bc   
04C0   AF                     XOR   a   
04C1   B2                     OR   d   
04C2   28 01                  JR   z,arglist5   
04C4   15                     DEC   d   ; remove initial inc
04C5                ARGLIST5:      
04C5   23                     INC   hl   
04C6   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C9   E1                     POP   hl   ; hl = start of arg_list
04CA   E5                     PUSH   hl   ; return start of arg_list
04CB   2B                     DEC   hl   ; write number of locals at start - 1
04CC   72                     LD   (hl),d   
04CD   2B                     DEC   hl   ; write number of args + locals at start - 2
04CE   73                     LD   (hl),e   
04CF   DD E9                  JP   (ix)   
04D1                LBRACE:      
04D1                BLOCKSTART:      
04D1   C5                     PUSH   bc   ; return pointer to first { of block
04D2   03                     INC   bc   
04D3   16 01                  LD   d,1   ; nesting: count first parenthesis
04D5                BLOCKSTART1:      ; Skip to end of definition
04D5   0A                     LD   a,(bc)   ; Get the next character
04D6   03                     INC   bc   ; Point to next character
04D7   FE 21                  CP   " " + 1   ; ignore whitespace
04D9   38 FA                  JR   c,blockStart1   
04DB   FE 29                  CP   ")"   
04DD   28 2D                  JR   z,blockStart4   
04DF   FE 7D                  CP   "}"   
04E1   28 29                  JR   z,blockStart4   
04E3   FE 5D                  CP   "]"   
04E5   28 25                  JR   z,blockStart4   
04E7   FE 28                  CP   "("   
04E9   28 16                  JR   z,blockStart2   
04EB   FE 7B                  CP   "{"   
04ED   28 12                  JR   z,blockStart2   
04EF   FE 5B                  CP   "["   
04F1   28 0E                  JR   z,blockStart2   
04F3   FE 27                  CP   "'"   
04F5   28 0D                  JR   z,blockStart3   
04F7   FE 60                  CP   "`"   
04F9   28 09                  JR   z,blockStart3   
04FB   FE 22                  CP   DQUOTE   
04FD   28 05                  JR   z,blockStart3   
04FF   18 D4                  JR   blockStart1   
0501                BLOCKSTART2:      
0501   14                     INC   d   
0502   18 D1                  JR   blockStart1   
0504                BLOCKSTART3:      
0504   3E 80                  LD   a,$80   
0506   AA                     XOR   d   
0507   57                     LD   d,a   
0508   20 CB                  JR   nz,blockStart1   
050A   18 03                  JR   blockStart5   
050C                BLOCKSTART4:      
050C   15                     DEC   d   
050D   20 C6                  JR   nz,blockStart1   ; get the next element
050F                BLOCKSTART5:      
050F   60 69                  LD   hl,bc   ; hl = IP
0511   11 1E 24               LD   de,HEAP   ; is IP pointing to object in heap
0514   B7                     OR   a   ; IP - HEAP
0515   ED 52                  SBC   hl,de   
0517   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0519   28 1C                  JR   z,blockStart6   
051B   60 69                  LD   hl,bc   ; hl = IP
051D   D1                     POP   de   ; de = block*
051E   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0522   B7                     OR   a   ; bc = size
0523   ED 52                  SBC   hl,de   
0525   44 4D                  LD   bc,hl   
0527   EB                     EX   de,hl   ; hl = block* de = heap*
0528   ED 5B F0 23            LD   de,(vHeapPtr)   
052C   D5                     PUSH   de   ; return hblock*
052D   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052F   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0533   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0537                BLOCKSTART6:      
0537   0B                     DEC   bc   ; balanced, exit
0538   DD E9                  JP   (ix)   
053A                RBRACE:      
053A                BLOCKEND:      
053A   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053D   FD 56 01               LD   d,(iy+1)   
0540   ED 53 00 24            LD   (vTemp1),de   
0544   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0547   FD 56 07               LD   d,(iy+7)   
054A   ED 53 02 24            LD   (vTemp2),de   
054E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0551   FD 56 03               LD   d,(iy+3)   
0554   EB                     EX   de,hl   
0555   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0558   FD 56 01               LD   d,(iy+1)   
055B   13                     INC   de   ; for carry flag <=
055C   B7                     OR   a   
055D   ED 52                  SBC   hl,de   
055F   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0561   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0563   FD 5D                  LD   e,iyl   
0565   21 08 00               LD   hl,8   
0568   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0569   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056A   18 0C                  JR   blockEnd2   
056C                BLOCKEND1:      ; same scope
056C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056F   FD 56 03               LD   d,(iy+3)   
0572   EB                     EX   de,hl   
0573   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0575   FD 5D                  LD   e,iyl   
0577   EB                     EX   de,hl   
0578                BLOCKEND2:      
0578   44 4D                  LD   bc,hl   ; bc = hl = BP
057A   B7                     OR   a   ; hl = BP - SP = count
057B   ED 72                  SBC   hl,sp   
057D   7D                     LD   a,l   
057E   B4                     OR   h   
057F   28 09                  JR   z,blockEnd3   
0581   C5                     PUSH   bc   ; bc = count, hl = BP
0582   44 4D                  LD   bc,hl   
0584   E1                     POP   hl   
0585   2B                     DEC   hl   ; hl = BP-1
0586   1B                     DEC   de   ; de = args*-1
0587   ED B8                  LDDR      
0589   13                     INC   de   
058A                BLOCKEND3:      
058A   EB                     EX   de,hl   ; sp = de = new tos*
058B   F9                     LD   sp,hl   
058C   ED 4B 02 24            LD   bc,(vTemp2)   
0590   FD 2A 00 24            LD   iy,(vTemp1)   
0594   DD E9                  JP   (ix)   
0596                TICK:        
0596                CHAR:        
0596   21 00 00               LD   hl,0   ; if "" is empty or null
0599                CHAR1:       
0599   03                     INC   bc   ; point to next char
059A   0A                     LD   a,(bc)   
059B   FE 27                  CP   "'"   ; ' is the terminator
059D   28 09                  JR   z,char3   
059F   FE 5C                  CP   $5c   ; \ is the escape
05A1   20 02                  JR   nz,char2   
05A3   03                     INC   bc   
05A4   0A                     LD   a,(bc)   
05A5                CHAR2:       
05A5   6F                     LD   l,a   
05A6   18 F1                  JR   char1   
05A8                CHAR3:       
05A8   E5                     PUSH   hl   
05A9   DD E9                  JP   (ix)   
05AB                BACKSLASH:      
05AB   DD E9                  JP   (ix)   
05AD                             ; , discard stack item
05AD                             ; x y -- x
05AD                COMMA:       
05AD                DISCARD:      
05AD   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AF   FD 5D                  LD   e,iyl   
05B1   EB                     EX   de,hl   
05B2   B7                     OR   a   
05B3   ED 72                  SBC   hl,sp   
05B5   CB 7C                  BIT   7,h   
05B7   20 01                  JR   nz,discard1   
05B9   E1                     POP   hl   
05BA                DISCARD1:      
05BA   DD E9                  JP   (ix)   
05BC                SLASH:       
05BC                COMMAND:      
05BC   CD E9 0A               CALL   jumpTable   
05BF   2F                     DB   "/"   
05C0   25 08                  DW   comment   
05C2   61                     DB   "a"   
05C3   2E 08                  DW   command_a   
05C5   62                     DB   "b"   
05C6   68 08                  DW   command_b   
05C8   63                     DB   "c"   
05C9   84 0A                  DW   chars   
05CB   64                     DB   "d"   
05CC   8C 0A                  DW   decimal   
05CE   66                     DB   "f"   
05CF   4C 06                  DW   false1   
05D1   68                     DB   "h"   
05D2   94 0A                  DW   hexadecimal   
05D4   69                     DB   "i"   
05D5   B1 09                  DW   command_i   
05D7   6B                     DB   "k"   
05D8   A5 0A                  DW   key   
05DA   6E                     DB   "n"   
05DB   B7 0A                  DW   numbers   
05DD   6F                     DB   "o"   
05DE   AE 0A                  DW   output   
05E0   70                     DB   "p"   
05E1   BD 09                  DW   command_p   
05E3   72                     DB   "r"   
05E4   26 0A                  DW   command_r   
05E6   73                     DB   "s"   
05E7   35 0A                  DW   size   
05E9   74                     DB   "t"   
05EA   46 06                  DW   true1   
05EC   76                     DB   "v"   
05ED   3F 0A                  DW   command_v   
05EF   78                     DB   "x"   
05F0   B4 03                  DW   xor   
05F2   00                     DB   NUL   
05F3   F5 05                  DW   div   
05F5                DIV:         
05F5   D1                     POP   de   
05F6   E1                     POP   hl   
05F7   C5                     PUSH   bc   ; preserve the IP
05F8   44 4D                  LD   bc,hl   
05FA   CD 18 06               CALL   divide   
05FD   EB                     EX   de,hl   
05FE   ED 53 F4 23            LD   (vRemain),de   
0602   C1                     POP   bc   
0603   C3 93 03               JP   add3   
0606                DOT:         
0606   CD E9 0A               CALL   jumpTable   
0609   61                     DB   "a"   
060A   83 08                  DW   bufferArray   
060C   63                     DB   "c"   
060D   90 09                  DW   bufferChar   
060F   73                     DB   "s"   
0610   76 09                  DW   bufferString   
0612   78                     DB   "x"   
0613   95 09                  DW   bufferXChars   
0615   00                     DB   NUL   
0616   B7 08                  DW   bufferNumber   
0618                             ; division subroutine.
0618                             ; bc: divisor, de: dividend, hl: remainder
0618                DIVIDE:      
0618   21 00 00               LD   hl,0   ; zero the remainder
061B   3E 10                  LD   a,16   ; loop counter
061D                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061D   CB 21                  SLA   c   
061F   CB 10                  RL   b   
0621   ED 6A                  ADC   hl,hl   
0623   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0625   38 03                  JR   c,divide2   
0627   0C                     INC   c   
0628   18 01                  JR   divide3   
062A                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
062A   19                     ADD   hl,de   
062B                DIVIDE3:      
062B   3D                     DEC   a   
062C   20 EF                  JR   nz,divide1   
062E   50 59                  LD   de,bc   ; result from bc to de
0630   C9                     RET      
0631                             ; hl = value1, de = value2
0631                             ; hl = result
0631                EQUALS:      
0631   B7                     OR   a   ; reset the carry flag
0632   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0634   28 10                  JR   z,true1   
0636   C3 4C 06               JP   false1   
0639                             ; hl = value1 de = value2
0639                             ; hl = result
0639                LESSTHANEQ:      
0639   B7                     OR   a   
063A   ED 52                  SBC   hl,de   
063C   18 05                  JR   lessthan1   
063E                             ; hl = value1 de = value2
063E                             ; hl = result
063E                LESSTHAN:      
063E   B7                     OR   a   
063F   ED 52                  SBC   hl,de   
0641   28 09                  JR   z,false1   
0643                LESSTHAN1:      
0643   FA 4C 06               JP   m,false1   
0646                TRUE1:       
0646   21 FF FF               LD   hl,TRUE   
0649   E5                     PUSH   hl   
064A   DD E9                  JP   (ix)   
064C                NULL1:       
064C                FALSE1:      
064C   21 00 00               LD   hl,FALSE   
064F   E5                     PUSH   hl   
0650   DD E9                  JP   (ix)   
0652                             ; execute a block of code which ends with }
0652                             ; creates a root scope if BP == stack
0652                             ; else uses outer scope
0652                CARET:       
0652                GO:          
0652   D1                     POP   de   ; de = block*
0653                GO1:         
0653   7B                     LD   a,e   ; if block* == null, exit
0654   B2                     OR   d   
0655   20 02                  JR   nz,go2   
0657   DD E9                  JP   (ix)   
0659                GO2:         
0659   1A                     LD   a,(de)   
065A   FE 7B                  CP   "{"   
065C   28 06                  JR   z,goBlock1   
065E   FE 28                  CP   "("   
0660   C2 97 06               JP   nz,goLambda   
0663                             ; inc de                      ; de is the address to jump back to
0663   D5                     PUSH   de   ; push de just before stack frame
0664                GOBLOCK:      
0664                GOBLOCK1:      
0664   ED 53 00 24            LD   (vTemp1),de   ; save de
0668   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
066B   FD 54                  LD   d,iyh   
066D   FD 5D                  LD   e,iyl   
066F   B7                     OR   a   ; if stack* == BP then this is the root_scope
0670   ED 52                  SBC   hl,de   
0672   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
0676   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0677   B4                     OR   h   
0678   3E 00                  LD   a,0   
067A   28 70                  JR   z,goLambda8   
067C   C5                     PUSH   bc   ; push IP
067D   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0680   FD 46 05               LD   b,(iy+5)   
0683   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0686   FD 66 03               LD   h,(iy+3)   
0689                GOBLOCK2:      
0689   C5                     PUSH   bc   ; arg_list*
068A   E5                     PUSH   hl   ; first_arg*
068B   FD E5                  PUSH   iy   ; push BP
068D   FD 21 00 00            LD   iy,0   ; BP = SP
0691   FD 39                  ADD   iy,sp   
0693   42 4B                  LD   bc,de   ; bc = de = block*-1
0695   DD E9                  JP   (ix)   
0697                GOLAMBDA:      ; execute lambda
0697   EB                     EX   de,hl   ; hl = lambda*
0698   5E                     LD   e,(hl)   ; de = partial_array*
0699   23                     INC   hl   
069A   56                     LD   d,(hl)   
069B   23                     INC   hl   
069C   7B                     LD   a,e   ; if partial_array* == null skip
069D   B2                     OR   d   
069E   28 25                  JR   z,goLambda3   
06A0   ED 43 00 24            LD   (vTemp1),bc   
06A4   22 02 24               LD   (vTemp2),hl   ; save bc,hl
06A7   EB                     EX   de,hl   ; hl = partial_array*
06A8   2B                     DEC   hl   ; skip type byte
06A9   2B                     DEC   hl   ; skip magic byte
06AA   2B                     DEC   hl   ; bc = count
06AB   46                     LD   b,(hl)   
06AC   2B                     DEC   hl   
06AD   4E                     LD   c,(hl)   
06AE   23                     INC   hl   ; hl = array data*
06AF   23                     INC   hl   
06B0   23                     INC   hl   
06B1   23                     INC   hl   
06B2   18 06                  JR   goLambda2   ; push each item on stack
06B4                GOLAMBDA1:      
06B4   5E                     LD   e,(hl)   ; de = partial item
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   D5                     PUSH   de   ; push on stack
06B9   0B                     DEC   bc   
06BA                GOLAMBDA2:      
06BA   79                     LD   a,c   ; if count != 0 then loop
06BB   B0                     OR   b   
06BC   20 F6                  JR   nz,goLambda1   
06BE   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
06C2   2A 02 24               LD   hl,(vTemp2)   ; restore hl
06C5                GOLAMBDA3:      
06C5   5E                     LD   e,(hl)   ; de = block*
06C6   23                     INC   hl   
06C7   56                     LD   d,(hl)   
06C8   23                     INC   hl   
06C9   ED 53 00 24            LD   (vTemp1),de   ; save block*
06CD   5E                     LD   e,(hl)   ; de = arg_list*
06CE   23                     INC   hl   
06CF   56                     LD   d,(hl)   
06D0   23                     INC   hl   
06D1   EB                     EX   de,hl   ; hl = arg_list*
06D2   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
06D6   7D                     LD   a,l   ; if arg_list* == null a = 0
06D7   B4                     OR   h   
06D8   20 03                  JR   nz,goLambda4   
06DA   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06DB   18 0F                  JR   goLambda8   
06DD                GOLAMBDA4:      ; allocate locals
06DD   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06DE   7E                     LD   a,(hl)   
06DF   18 03                  JR   goLambda6   
06E1                GOLAMBDA5:      ; loop
06E1   3B                     DEC   sp   
06E2   3B                     DEC   sp   
06E3   3D                     DEC   a   
06E4                GOLAMBDA6:      
06E4   B7                     OR   a   
06E5   20 FA                  JR   nz,goLambda5   ; end loop
06E7                GOLAMBDA7:      
06E7   2B                     DEC   hl   ; a = num_args* x 2
06E8   7E                     LD   a,(hl)   
06E9   23                     INC   hl   
06EA   23                     INC   hl   
06EB   87                     ADD   a,a   ; a *= 2
06EC                GOLAMBDA8:      
06EC   C5                     PUSH   bc   ; push IP
06ED   44 4D                  LD   bc,hl   
06EF   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06F2   85                     ADD   a,l   
06F3   6F                     LD   l,a   
06F4   39                     ADD   hl,sp   
06F5   18 92                  JR   goBlock2   
06F7                HASH:        
06F7                HEXNUM:      
06F7   21 00 00               LD   hl,0   ; Clear hl to accept the number
06FA                HEXNUM1:      
06FA   03                     INC   bc   
06FB   0A                     LD   a,(bc)   ; Get the character which is a numeral
06FC   CB 77                  BIT   6,a   ; is it uppercase alpha?
06FE   28 02                  JR   z,hexnum2   ; no a decimal
0700   D6 07                  SUB   7   ; sub 7  to make $a - $F
0702                HEXNUM2:      
0702   D6 30                  SUB   $30   ; form decimal digit
0704   DA 82 07               JP   c,num2   
0707   FE 10                  CP   $0F+1   
0709   D2 82 07               JP   nc,num2   
070C   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
070D   29                     ADD   hl,hl   ; 4X
070E   29                     ADD   hl,hl   ; 8X
070F   29                     ADD   hl,hl   ; 16X
0710   85                     ADD   a,l   ; add into bottom of hl
0711   6F                     LD   l,a   
0712   18 E6                  JR   hexnum1   
0714                UPCASE:      
0714   0A                     LD   a,(bc)   ; a = identifier char
0715   D6 41                  SUB   "A"   ; "A" = 0
0717   18 05                  JR   ident1   
0719                LOWCASE:      
0719   0A                     LD   a,(bc)   
071A   D6 61                  SUB   "a"   
071C   C6 1A                  ADD   a,26   
071E                IDENT1:      
071E   87                     ADD   a,a   ; l = a * 2
071F   6F                     LD   l,a   
0720   26 23                  LD   h,msb(vars)   
0722   22 F2 23               LD   (vPointer),hl   ; store address in setter
0725   5E                     LD   e,(hl)   
0726   23                     INC   hl   
0727   56                     LD   d,(hl)   
0728   D5                     PUSH   de   
0729   DD E9                  JP   (ix)   
072B                             ; if
072B                             ; condition then -- value
072B                QUESTION:      
072B                IF:          
072B   03                     INC   bc   
072C   0A                     LD   a,(bc)   
072D   FE 3F                  CP   "?"   
072F   28 06                  JR   z,ifte   
0731   0B                     DEC   bc   
0732   11 00 00               LD   de,NUL   ; NUL pointer for else
0735   18 01                  JR   ifte1   
0737                             ; ifte
0737                             ; condition then else -- value
0737                IFTE:        
0737   D1                     POP   de   ; de = else
0738                IFTE1:       
0738   E1                     POP   hl   ; hl = then
0739   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
073A   7C                     LD   a,h   
073B   B5                     OR   l   
073C   E1                     POP   hl   ; hl = then
073D   CA 53 06               JP   z,go1   ; if z de = else
0740   EB                     EX   de,hl   ; condition = false, de = then
0741   C3 53 06               JP   go1   
0744                STAR:        
0744                MUL:         
0744   D1                     POP   de   ; get first value
0745   E1                     POP   hl   
0746                MUL2:        
0746   C5                     PUSH   bc   ; Preserve the IP
0747   44 4D                  LD   bc,hl   ; bc = 2nd value
0749   21 00 00               LD   hl,0   
074C   3E 10                  LD   a,16   
074E                MUL3:        
074E   29                     ADD   hl,hl   
074F   CB 13                  RL   e   
0751   CB 12                  RL   d   
0753   30 04                  JR   nc,$+6   
0755   09                     ADD   hl,bc   
0756   30 01                  JR   nc,$+3   
0758   13                     INC   de   
0759   3D                     DEC   a   
075A   20 F2                  JR   nz,mul3   
075C   C1                     POP   bc   ; Restore the IP
075D   C3 93 03               JP   add3   
0760                NUM:         
0760   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0763   0A                     LD   a,(bc)   ; Get numeral or -
0764   FE 2D                  CP   "-"   
0766   20 01                  JR   nz,num0   
0768   03                     INC   bc   ; move to next char, no flags affected
0769                NUM0:        
0769   08                     EX   af,af'   ; save zero flag = 0 for later
076A                NUM1:        
076A   0A                     LD   a,(bc)   ; read digit
076B   D6 30                  SUB   "0"   ; less than 0?
076D   38 13                  JR   c,num2   ; not a digit, exit loop
076F   FE 0A                  CP   10   ; greater that 9?
0771   30 0F                  JR   nc,num2   ; not a digit, exit loop
0773   03                     INC   bc   ; inc IP
0774   54 5D                  LD   de,hl   ; multiply hl * 10
0776   29                     ADD   hl,hl   
0777   29                     ADD   hl,hl   
0778   19                     ADD   hl,de   
0779   29                     ADD   hl,hl   
077A   85                     ADD   a,l   ; add digit in a to hl
077B   6F                     LD   l,a   
077C   3E 00                  LD   a,0   
077E   8C                     ADC   a,h   
077F   67                     LD   h,a   
0780   18 E8                  JR   num1   
0782                NUM2:        
0782   0B                     DEC   bc   
0783   08                     EX   af,af'   ; restore zero flag
0784   20 07                  JR   nz,num3   
0786   EB                     EX   de,hl   ; negate the value of hl
0787   21 00 00               LD   hl,0   
078A   B7                     OR   a   ; jump to sub2
078B   ED 52                  SBC   hl,de   
078D                NUM3:        
078D   E5                     PUSH   hl   ; Put the number on the stack
078E   DD E9                  JP   (ix)   ; and process the next character
0790                RPAREN:      
0790   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0793   FD 46 09               LD   b,(iy+9)   
0796   DD E9                  JP   (ix)   
0798                             ; arg_list* block* -- ptr
0798                SEMICOLON:      
0798   D1                     POP   de   ; de = block* hl = heap*
0799   2A F0 23               LD   hl,(vHeapPtr)   
079C   AF                     XOR   a   
079D   77                     LD   (hl),a   ; compile null partial_array*
079E   23                     INC   hl   
079F   77                     LD   (hl),a   
07A0   23                     INC   hl   
07A1   73                     LD   (hl),e   ; compile block*
07A2   23                     INC   hl   
07A3   72                     LD   (hl),d   
07A4   23                     INC   hl   
07A5   D1                     POP   de   ; de = block*
07A6   73                     LD   (hl),e   ; compile arg_list*
07A7   23                     INC   hl   
07A8   72                     LD   (hl),d   
07A9   23                     INC   hl   
07AA   ED 5B F0 23            LD   de,(vHeapPtr)   ; return lambda*
07AE   D5                     PUSH   de   
07AF   22 F0 23               LD   (vHeapPtr),hl   ; heap* += 4
07B2   DD E9                  JP   (ix)   
07B4                             ; shiftLeft
07B4                             ; value count -- value2          shift left count places
07B4                SHIFTLEFT:      
07B4   50 59                  LD   de,bc   ; save IP
07B6   C1                     POP   bc   ; bc = count
07B7   41                     LD   b,c   ; b = loop counter
07B8   E1                     POP   hl   
07B9   04                     INC   b   ; test for counter=0 case
07BA   18 01                  JR   shiftLeft2   
07BC                SHIFTLEFT1:      
07BC   29                     ADD   hl,hl   ; left shift hl
07BD                SHIFTLEFT2:      
07BD   10 FD                  DJNZ   shiftLeft1   
07BF   E5                     PUSH   hl   
07C0   42 4B                  LD   bc,de   ; restore IP
07C2   DD E9                  JP   (ix)   
07C4                             ; shiftRight
07C4                             ; value count -- value2          shift left count places
07C4                SHIFTRIGHT:      
07C4   50 59                  LD   de,bc   ; save IP
07C6   C1                     POP   bc   ; bc = count
07C7   41                     LD   b,c   ; b = loop counter
07C8   E1                     POP   hl   
07C9   04                     INC   b   ; test for counter=0 case
07CA   18 04                  JR   shiftRight2   
07CC                SHIFTRIGHT1:      
07CC   CB 3C                  SRL   h   ; right shift hl
07CE   CB 1D                  RR   l   
07D0                SHIFTRIGHT2:      
07D0   10 FA                  DJNZ   shiftRight1   
07D2   E5                     PUSH   hl   
07D3   42 4B                  LD   bc,de   ; restore IP
07D5   DD E9                  JP   (ix)   
07D7                             ; string
07D7                             ; -- ptr                        ; points to start of string chars,
07D7                             ; length is stored at start - 2 bytes
07D7                DBLQUOTE:      
07D7                STRING:      
07D7   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
07DA   23                     INC   hl   ; skip length field to start
07DB   23                     INC   hl   
07DC   E5                     PUSH   hl   ; save start of string
07DD   03                     INC   bc   ; point to next char
07DE   18 03                  JR   string2   
07E0                STRING1:      
07E0   77                     LD   (hl),a   
07E1   23                     INC   hl   ; increase count
07E2   03                     INC   bc   ; point to next char
07E3                STRING2:      
07E3   0A                     LD   a,(bc)   
07E4   FE 22                  CP   DQUOTE   ; " is the string terminator
07E6   28 04                  JR   z,string3   
07E8   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07EA   20 F4                  JR   nz,string1   
07EC                STRING3:      
07EC   AF                     XOR   a   ; write NUL to terminate string
07ED   77                     LD   (hl),a   ; hl = end of string
07EE   23                     INC   hl   
07EF   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07F2   2B                     DEC   hl   ; hl = end of string without terminator
07F3   D1                     POP   de   ; de = start of string
07F4   D5                     PUSH   de   ; return start of string
07F5   B7                     OR   a   ; hl = length bytes, de = start of string
07F6   ED 52                  SBC   hl,de   
07F8   EB                     EX   de,hl   
07F9   2B                     DEC   hl   ; write length bytes to length field at start - 2
07FA   72                     LD   (hl),d   
07FB   2B                     DEC   hl   
07FC   73                     LD   (hl),e   
07FD   DD E9                  JP   (ix)   
07FF                MINUS:       ; negative sign or subtract
07FF   03                     INC   bc   ; check if sign of a number
0800   0A                     LD   a,(bc)   
0801   0B                     DEC   bc   
0802   FE 30                  CP   "0"   
0804   38 05                  JR   c,sub   
0806   FE 3A                  CP   "9"+1   
0808   DA 3B 03               JP   c,num_   
080B                SUB:         ; Subtract the value 2nd on stack from top of stack
080B   03                     INC   bc   
080C   FE 2D                  CP   "-"   
080E   20 05                  JR   nz,sub1   
0810   E1                     POP   hl   
0811   2B                     DEC   hl   
0812   C3 8B 04               JP   assign0   
0815                SUB1:        
0815   0B                     DEC   bc   
0816   D1                     POP   de   
0817   E1                     POP   hl   
0818   B7                     OR   a   
0819   ED 52                  SBC   hl,de   
081B   C3 93 03               JP   add3   
081E                ERROR1:      
081E   21 01 00               LD   hl,1   ; error 1: unknown command
0821   E5                     PUSH   hl   
0822   C3 6D 0C               JP   error   
0825                COMMENT:      
0825   03                     INC   bc   ; point to next char
0826   0A                     LD   a,(bc)   
0827   FE 20                  CP   " "   ; terminate on any char less than SP
0829   30 FA                  JR   nc,comment   
082B   0B                     DEC   bc   
082C   DD E9                  JP   (ix)   
082E                COMMAND_A:      
082E   CD E9 0A               CALL   jumpTable   
0831   62                     DB   "b"   
0832   3A 08                  DW   absolute   
0834   64                     DB   "d"   
0835   47 08                  DW   addrOf   
0837   00                     DB   NUL   
0838   1E 08                  DW   error1   
083A                             ; /ab absolute
083A                             ; num -- num
083A                ABSOLUTE:      
083A   E1                     POP   hl   
083B   CB 7C                  BIT   7,h   
083D   C8                     RET   z   
083E   AF                     XOR   a   
083F   95                     SUB   l   
0840   6F                     LD   l,a   
0841   9F                     SBC   a,a   
0842   94                     SUB   h   
0843   67                     LD   h,a   
0844   E5                     PUSH   hl   
0845   DD E9                  JP   (ix)   
0847                             ; /ad addrOf
0847                             ; char -- addr
0847                ADDROF:      
0847   E1                     POP   hl   ; a = char
0848   7D                     LD   a,l   
0849   FE 7B                  CP   "z"+1   ; if a > z then exit
084B   30 19                  JR   nc,addrOf2   
084D   D6 41                  SUB   "A"   ; a - 65
084F   38 15                  JR   c,addrOf2   ; if < A then exit
0851   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0853   38 06                  JR   c,addrOf1   
0855   D6 06                  SUB   "a"-("Z"+1)   
0857   FE 1A                  CP   "Z"-"A"+1   
0859   38 0B                  JR   c,addrOf2   ; if < a then exit
085B                ADDROF1:      
085B   87                     ADD   a,a   ; double a
085C   21 00 23               LD   hl,VARS   ; hl = VARS + a
085F   85                     ADD   a,l   
0860   6F                     LD   l,a   
0861   3E 00                  LD   a,0   
0863   8C                     ADC   a,h   
0864   67                     LD   h,a   
0865   E5                     PUSH   hl   
0866                ADDROF2:      
0866   DD E9                  JP   (ix)   
0868                COMMAND_B:      
0868   CD E9 0A               CALL   jumpTable   
086B   61                     DB   "a"   
086C   83 08                  DW   bufferArray   
086E   63                     DB   "c"   
086F   90 09                  DW   bufferChar   
0871   6E                     DB   "n"   
0872   B7 08                  DW   bufferNumber   
0874   72                     DB   "r"   
0875   5C 09                  DW   break   
0877   73                     DB   "s"   
0878   76 09                  DW   bufferString   
087A   78                     DB   "x"   
087B   95 09                  DW   bufferXChars   
087D   79                     DB   "y"   
087E   B0 0B                  DW   coldStart   
0880   00                     DB   NUL   
0881   1E 08                  DW   error1   
0883                             ; /ba buffer array
0883                             ; array* --
0883                BUFFERARRAY:      
0883   CD 52 06               CALL   go   
0886   00 00                  DW   NUL   ; NUL closure
0888   8C 08                  DW   $+4   
088A   CF 0A                  DW   args1A2L   
088C   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08B7                             ; /bd buffer decimal
08B7                             ; value --
08B7                BUFFERNUMBER:      
08B7   3A E8 23               LD   a,(vNumBase)   
08BA   FE 10                  CP   16   
08BC   28 66                  JR   z,bufferHex   ; else falls through
08BE                             ; /bd buffer decimal
08BE                             ; value --
08BE                BUFFERDEC:      
08BE   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08C2   D9                     EXX      
08C3   E1                     POP   hl   ; hl = value
08C4   CD D8 08               CALL   bufferDec0   
08C7   D9                     EXX      ; de = buffer*' bc = IP
08C8   3E 20                  LD   a," "   ; append space to buffer
08CA   12                     LD   (de),a   
08CB   1C                     INC   e   ; buffer*++, wraparound
08CC   CC D2 0A               CALL   z,flushBuffer   
08CF   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
08D2   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
08D6   DD E9                  JP   (ix)   
08D8                             ; hl = value
08D8                             ; de' = buffer*
08D8                             ; a, bc, de, hl destroyed
08D8                BUFFERDEC0:      
08D8   CB 7C                  BIT   7,h   
08DA   28 0C                  JR   z,bufferDec1   
08DC   D9                     EXX      
08DD   3E 2D                  LD   a,"-"   
08DF   12                     LD   (de),a   
08E0   13                     INC   de   
08E1   D9                     EXX      
08E2   AF                     XOR   a   
08E3   95                     SUB   l   
08E4   6F                     LD   l,a   
08E5   9F                     SBC   a,a   
08E6   94                     SUB   h   
08E7   67                     LD   h,a   
08E8                BUFFERDEC1:      
08E8   0E 00                  LD   c,0   ; leading zeros flag = false
08EA   11 F0 D8               LD   de,-10000   
08ED   CD 08 09               CALL   bufferDec2   
08F0   11 18 FC               LD   de,-1000   
08F3   CD 08 09               CALL   bufferDec2   
08F6   11 9C FF               LD   de,-100   
08F9   CD 08 09               CALL   bufferDec2   
08FC   1E F6                  LD   e,-10   
08FE   CD 08 09               CALL   bufferDec2   
0901   0C                     INC   c   ; flag = true for at least digit
0902   1E FF                  LD   e,-1   
0904   CD 08 09               CALL   bufferDec2   
0907   C9                     RET      
0908                BUFFERDEC2:      
0908   06 2F                  LD   b,"0"-1   
090A                BUFFERDEC3:      
090A   04                     INC   b   
090B   19                     ADD   hl,de   
090C   38 FC                  JR   c,bufferDec3   
090E   ED 52                  SBC   hl,de   
0910   3E 30                  LD   a,"0"   
0912   B8                     CP   b   
0913   20 05                  JR   nz,bufferDec4   
0915   AF                     XOR   a   
0916   B1                     OR   c   
0917   C8                     RET   z   
0918   18 01                  JR   bufferDec5   
091A                BUFFERDEC4:      
091A   0C                     INC   c   
091B                BUFFERDEC5:      
091B   78                     LD   a,b   
091C   D9                     EXX      
091D   12                     LD   (de),a   
091E   1C                     INC   e   
091F   CC D2 0A               CALL   z,flushBuffer   
0922   D9                     EXX      
0923   C9                     RET      
0924                             ; /bh buffer hex
0924                             ; value --
0924                BUFFERHEX:      
0924   E1                     POP   hl   ; hl = value
0925   ED 5B EC 23            LD   de,(vBufPtr)   
0929   3E 23                  LD   a,"#"   ; # prefix
092B   12                     LD   (de),a   
092C   1C                     INC   e   ; buffer*++, wraparound
092D   CC D2 0A               CALL   z,flushBuffer   
0930   7C                     LD   a,h   
0931   CD 45 09               CALL   bufferHex1   
0934   7D                     LD   a,l   
0935   CD 45 09               CALL   bufferHex1   
0938   3E 20                  LD   a," "   ; append space to buffer
093A   12                     LD   (de),a   
093B   1C                     INC   e   ; buffer*++, wraparound
093C   CC D2 0A               CALL   z,flushBuffer   
093F   ED 53 EC 23            LD   (vBufPtr),de   
0943   DD E9                  JP   (ix)   
0945                BUFFERHEX1:      
0945   F5                     PUSH   af   
0946   1F                     RRA      
0947   1F                     RRA      
0948   1F                     RRA      
0949   1F                     RRA      
094A   CD 4E 09               CALL   bufferHex2   
094D   F1                     POP   af   
094E                BUFFERHEX2:      
094E   E6 0F                  AND   0x0F   
0950   C6 90                  ADD   a,0x90   
0952   27                     DAA      
0953   CE 40                  ADC   a,0x40   
0955   27                     DAA      
0956   12                     LD   (de),a   
0957   1C                     INC   e   ; buffer*++, wraparound
0958   CC D2 0A               CALL   z,flushBuffer   
095B   C9                     RET      
095C                             ; /br break from loop
095C                             ; --
095C                BREAK:       
095C   E1                     POP   hl   
095D   7D                     LD   a,l   
095E   B4                     OR   h   
095F   28 02                  JR   z,break1   
0961   DD E9                  JP   (ix)   
0963                BREAK1:      
0963   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0965   FD 54                  LD   d,iyh   
0967   21 08 00               LD   hl,8   
096A   19                     ADD   hl,de   
096B   23                     INC   hl   
096C   23                     INC   hl   
096D   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0970   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0973   C3 3A 05               JP   blockEnd   
0976                             ; /bs buffered string
0976                             ; string* --
0976                BUFFERSTRING:      
0976   E1                     POP   hl   ; hl = string*
0977   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
097B   18 06                  JR   bufferString1   
097D                BUFFERSTRING0:      
097D   12                     LD   (de),a   ; a -> buffer*
097E   1C                     INC   e   ; buffer*++, wraparound
097F   CC D2 0A               CALL   z,flushBuffer   
0982   23                     INC   hl   
0983                BUFFERSTRING1:      
0983   7E                     LD   a,(hl)   ; a <- string*
0984   B7                     OR   a   ; if NUL exit loop
0985   20 F6                  JR   nz,bufferString0   
0987   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
098A   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
098E   DD E9                  JP   (ix)   
0990                             ; /bc buffer char
0990                             ; char --
0990                BUFFERCHAR:      
0990   21 01 00               LD   hl,1   
0993   18 01                  JR   bufferXChars0   
0995                             ; /bx buffered x chars
0995                             ; char length --
0995                BUFFERXCHARS:      
0995   E1                     POP   hl   ; hl = length
0996                BUFFERXCHARS0:      
0996   D1                     POP   de   ; a' = char
0997   7B                     LD   a,e   
0998   08                     EX   af,af'   
0999   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
099D   18 08                  JR   bufferXChars2   
099F                BUFFERXCHARS1:      
099F   08                     EX   af,af'   
09A0   12                     LD   (de),a   
09A1   08                     EX   af,af'   
09A2   1C                     INC   e   ; buffer*++, wraparound
09A3   CC D2 0A               CALL   z,flushBuffer   
09A6   2B                     DEC   hl   
09A7                BUFFERXCHARS2:      
09A7   7D                     LD   a,l   
09A8   B4                     OR   h   
09A9   20 F4                  JR   nz,bufferXChars1   
09AB   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
09AF   DD E9                  JP   (ix)   
09B1                COMMAND_I:      
09B1   CD E9 0A               CALL   jumpTable   
09B4   6E                     DB   "n"   
09B5   9A 0A                  DW   input   
09B7   76                     DB   "v"   
09B8   BF 03                  DW   invert   
09BA   00                     DB   NUL   
09BB   1E 08                  DW   error1   
09BD                COMMAND_P:      
09BD   CD E9 0A               CALL   jumpTable   
09C0   61                     DB   "a"   
09C1   CF 09                  DW   partial   
09C3   62                     DB   "b"   
09C4   EF 09                  DW   printBuffer   
09C6   63                     DB   "c"   
09C7   12 0A                  DW   printChars   
09C9   6B                     DB   "k"   
09CA   24 0A                  DW   printStack   
09CC   00                     DB   NUL   
09CD   1E 08                  DW   error1   
09CF                             ; partial
09CF                             ; array* lambda* -- lambda1*
09CF                PARTIAL:      
09CF   E1                     POP   hl   ; h1 = lambda*
09D0   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09D4   ED 43 00 24            LD   (vTemp1),bc   ; save IP
09D8   01 06 00               LD   bc,6   ; bc = count
09DB   ED B0                  LDIR      ; clone lambda
09DD   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
09E1   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09E4   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += 6
09E8   D1                     POP   de   ; de = array*
09E9   E5                     PUSH   hl   ; return partial_array*
09EA   73                     LD   (hl),e   ; compile array*
09EB   23                     INC   hl   
09EC   72                     LD   (hl),d   
09ED   DD E9                  JP   (ix)   
09EF                             ; /pb printBuffer
09EF                             ; --
09EF                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09EF                PRINTBUFFER:      
09EF   CD 52 06               CALL   go   
09F2   00 00                  DW   NUL   ; NUL closure
09F4   F8 09                  DW   $+4   
09F6   C4 0A                  DW   args1A0L   
09F8   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A12                             ; printChars
0A12                             ; char* len --
0A12                PRINTCHARS:      
0A12   E1                     POP   hl   ; hl = count
0A13   D1                     POP   de   ; de = char*
0A14   CD 1F 0A               CALL   printChars2   
0A17   DD E9                  JP   (ix)   
0A19                PRINTCHARS1:      
0A19   1A                     LD   a,(de)   ; print char at char*
0A1A   CD 85 00               CALL   putchar   
0A1D   13                     INC   de   ; char*++
0A1E   2B                     DEC   hl   ; count--
0A1F                PRINTCHARS2:      
0A1F   7D                     LD   a,l   ; count == 0?
0A20   B4                     OR   h   
0A21   C8                     RET   z   
0A22   18 F5                  JR   printChars1   ; if not loop
0A24                             ; /pk print stack
0A24                             ; --
0A24                PRINTSTACK:      
0A24                             ;     ld (vTemp1),bc
0A24                             ;     call printStr
0A24                             ;     .cstr "=> "
0A24                             ;     ld hl,STACK
0A24                             ;     sbc hl,sp
0A24                             ;     srl h
0A24                             ;     rr l
0A24                             ;     ld bc,hl
0A24                             ;     ld hl,STACK
0A24                             ;     jr printStack2
0A24                             ; printStack1:
0A24                             ;     dec bc
0A24                             ;     dec hl
0A24                             ;     ld d,(hl)
0A24                             ;     dec hl
0A24                             ;     ld e,(hl)
0A24                             ;     ex de,hl
0A24                             ;     call prthex
0A24                             ;     ex de,hl
0A24                             ;     ld a," "
0A24                             ;     call putchar
0A24                             ; printStack2:
0A24                             ;     ld a,c
0A24                             ;     or b
0A24                             ;     jr nz,printStack1
0A24                             ;     call prompt
0A24                             ;     ld bc,(vTemp1)
0A24   DD E9                  JP   (ix)   
0A26                COMMAND_R:      
0A26   CD E9 0A               CALL   jumpTable   
0A29   65                     DB   "e"   
0A2A   2F 0A                  DW   remain   
0A2C   00                     DB   NUL   
0A2D   1E 08                  DW   error1   
0A2F                REMAIN:      
0A2F   2A F4 23               LD   hl,(vRemain)   
0A32   E5                     PUSH   hl   
0A33   DD E9                  JP   (ix)   
0A35                SIZE:        
0A35   E1                     POP   hl   
0A36   2B                     DEC   hl   ; skip magic byte
0A37   2B                     DEC   hl   ; skip type tag
0A38   2B                     DEC   hl   ; msb size
0A39   56                     LD   d,(hl)   
0A3A   2B                     DEC   hl   ; lsb size
0A3B   5E                     LD   e,(hl)   
0A3C   D5                     PUSH   de   
0A3D   DD E9                  JP   (ix)   
0A3F                COMMAND_V:      
0A3F   CD E9 0A               CALL   jumpTable   
0A42   62                     DB   "b"   
0A43   63 0A                  DW   varBufPtr   
0A45   68                     DB   "h"   
0A46   6C 0A                  DW   varHeapPtr   
0A48   74                     DB   "t"   
0A49   75 0A                  DW   varTIBPtr   
0A4B   42                     DB   "B"   
0A4C   54 0A                  DW   constBufStart   
0A4E   54                     DB   "T"   
0A4F   5E 0A                  DW   constTIBStart   
0A51   00                     DB   NUL   
0A52   1E 08                  DW   error1   
0A54                CONSTBUFSTART:      
0A54   11 00 22               LD   de,BUF   
0A57   18 28                  JR   constant   
0A59                CONSTHEAPSTART:      
0A59   11 1E 24               LD   de,HEAP   
0A5C   18 23                  JR   constant   
0A5E                CONSTTIBSTART:      
0A5E   11 00 21               LD   de,TIB   
0A61   18 1E                  JR   constant   
0A63                VARBUFPTR:      
0A63   ED 5B EC 23            LD   de,(vBufPtr)   
0A67   21 EC 23               LD   hl,vBufPtr   
0A6A   18 12                  JR   variable   
0A6C                VARHEAPPTR:      
0A6C   ED 5B F0 23            LD   de,(vHeapPtr)   
0A70   21 F0 23               LD   hl,vHeapPtr   
0A73   18 09                  JR   variable   
0A75                VARTIBPTR:      
0A75   ED 5B EA 23            LD   de,(vTIBPtr)   
0A79   21 EA 23               LD   hl,vTIBPtr   
0A7C   18 00                  JR   variable   
0A7E                VARIABLE:      
0A7E   22 F2 23               LD   (vPointer),hl   
0A81                CONSTANT:      
0A81   D5                     PUSH   de   
0A82   DD E9                  JP   (ix)   
0A84                CHARS:       
0A84   21 01 00               LD   hl,1   
0A87                CHARS1:      
0A87   22 E6 23               LD   (vDataWidth),hl   
0A8A   DD E9                  JP   (ix)   
0A8C                DECIMAL:      
0A8C   21 0A 00               LD   hl,10   
0A8F                DECIMAL1:      
0A8F   22 E8 23               LD   (vNumBase),hl   
0A92   DD E9                  JP   (ix)   
0A94                HEXADECIMAL:      
0A94   21 10 00               LD   hl,16   
0A97   C3 8F 0A               JP   decimal1   
0A9A                             ; Z80 port input
0A9A                             ; port -- value
0A9A                INPUT:       
0A9A   E1                     POP   hl   
0A9B   59                     LD   e,c   ; save IP
0A9C   4D                     LD   c,l   
0A9D   ED 68                  IN   l,(c)   
0A9F   26 00                  LD   h,0   
0AA1   4B                     LD   c,e   ; restore IP
0AA2   E5                     PUSH   hl   
0AA3   DD E9                  JP   (ix)   
0AA5                KEY:         
0AA5   CD 81 00               CALL   getchar   
0AA8   26 00                  LD   h,0   
0AAA   6F                     LD   l,a   
0AAB   E5                     PUSH   hl   
0AAC   DD E9                  JP   (ix)   
0AAE                             ; Z80 port output
0AAE                             ; value port --
0AAE                OUTPUT:      
0AAE   E1                     POP   hl   
0AAF   59                     LD   e,c   ; save IP
0AB0   4D                     LD   c,l   
0AB1   E1                     POP   hl   
0AB2   ED 69                  OUT   (c),l   
0AB4   4B                     LD   c,e   ; restore IP
0AB5   DD E9                  JP   (ix)   
0AB7                NUMBERS:      
0AB7   21 02 00               LD   hl,2   
0ABA   C3 87 0A               JP   chars1   
0ABD                             ; 
0ABD                             ; keyIter:
0ABD                             ;     call go
0ABD                             ;     .cstr "{/k /t}"             ; block
0ABD                             ; fromIter:
0ABD                             ;     call go
0ABD                             ;     dw NUL                      ; NUL closure
0ABD                             ;     dw $+4
0ABD                             ;     dw args1A0L
0ABD                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0ABD                             ; fromIter1:
0ABD                             ;     call go
0ABD                             ;     dw NUL                      ; NUL closure
0ABD                             ;     dw $+4
0ABD                             ;     dw args2A0L
0ABD                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0ABD                FILTER:      
0ABD                MAP:         
0ABD                SCAN:        
0ABD   DD E9                  JP   (ix)   
0ABF                             ;*******************************************************************
0ABF                             ; reusable arglists
0ABF                             ;*******************************************************************
0ABF                ARGS0A1L_:      ; zero args one local
0ABF   01                     DB   1   ; num args + locals
0AC0   01                     DB   1   ; num locals
0AC1                ARGS0A1L:      
0AC1   61                     DB   "a"   
0AC2                ARGS1A0L_:      ; one arg zero locals
0AC2   01                     DB   1   ; num args + locals
0AC3   00                     DB   0   ; num locals
0AC4                ARGS1A0L:      
0AC4   61                     DB   "a"   
0AC5                ARGS1A1L_:      ; one arg one local
0AC5   02                     DB   2   ; num args + locals
0AC6   01                     DB   1   ; num locals
0AC7                ARGS1A1L:      
0AC7   61 62                  DB   "ab"   
0AC9                ARGS2A0L_:      ; two args zero locals
0AC9   02                     DB   2   ; num args + locals
0ACA   00                     DB   0   ; num locals
0ACB                ARGS2A0L:      
0ACB   61 62                  DB   "ab"   
0ACD                ARGS1A2L_:      ; one arg two locals
0ACD   03                     DB   3   ; num args + locals
0ACE   02                     DB   2   ; num locals
0ACF                ARGS1A2L:      
0ACF   61 62 63               DB   "abc"   
0AD2                             ;*******************************************************************
0AD2                             ; general routines
0AD2                             ;*******************************************************************
0AD2                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0AD2                FLUSHBUFFER:      
0AD2   F5                     PUSH   af   
0AD3   D5                     PUSH   de   
0AD4   E5                     PUSH   hl   
0AD5   2A EC 23               LD   hl,(vBufPtr)   
0AD8   11 00 22               LD   de,BUF   
0ADB   ED 53 EC 23            LD   (vBufPtr),de   
0ADF   B7                     OR   a   
0AE0   ED 52                  SBC   hl,de   
0AE2   CD 1F 0A               CALL   printChars2   
0AE5   E1                     POP   hl   
0AE6   D1                     POP   de   
0AE7   F1                     POP   af   
0AE8   C9                     RET      
0AE9                             ; followed by a table
0AE9                             ; db char
0AE9                             ; dw addr
0AE9                             ; the final item must have char == NUL
0AE9                JUMPTABLE:      
0AE9   03                     INC   bc   
0AEA   E1                     POP   hl   
0AEB                JUMPTABLE0:      
0AEB   AF                     XOR   a   
0AEC   BE                     CP   (hl)   
0AED   28 09                  JR   z,jumpTable1   
0AEF   0A                     LD   a,(bc)   
0AF0   BE                     CP   (hl)   
0AF1   28 06                  JR   z,jumpTable2   
0AF3   23                     INC   hl   
0AF4   23                     INC   hl   
0AF5   23                     INC   hl   
0AF6   18 F3                  JR   jumpTable0   
0AF8                JUMPTABLE1:      
0AF8   0B                     DEC   bc   
0AF9                JUMPTABLE2:      
0AF9   23                     INC   hl   
0AFA   5E                     LD   e,(hl)   
0AFB   23                     INC   hl   
0AFC   56                     LD   d,(hl)   
0AFD   EB                     EX   de,hl   
0AFE   E9                     JP   (hl)   
0AFF                PRTSTR0:      
0AFF   CD 85 00               CALL   putchar   
0B02   23                     INC   hl   
0B03                PRTSTR:      
0B03   7E                     LD   a,(hl)   
0B04   B7                     OR   a   
0B05   20 F8                  JR   nz,prtstr0   
0B07   C9                     RET      
0B08                             ; **************************************************************************
0B08                             ; calculate nesting value
0B08                             ; a is char to be tested,
0B08                             ; e is the nesting value (initially 0)
0B08                             ; e is increased by ( and [
0B08                             ; e is decreased by ) and ]
0B08                             ; e has its bit 7 toggled by `
0B08                             ; limited to 127 levels
0B08                             ; **************************************************************************
0B08                NESTING:      
0B08   FE 22                  CP   DQUOTE   ; quote char
0B0A   28 06                  JR   z,nesting0   
0B0C   FE 60                  CP   "`"   ; quote char
0B0E   28 02                  JR   z,nesting0   
0B10   18 0A                  JR   nesting1   
0B12                NESTING0:      
0B12   CB 7B                  BIT   7,e   
0B14   28 03                  JR   z,nesting1a   
0B16   CB BB                  RES   7,e   
0B18   C9                     RET      
0B19                NESTING1A:      
0B19   CB FB                  SET   7,e   
0B1B   C9                     RET      
0B1C                NESTING1:      
0B1C   CB 7B                  BIT   7,e   
0B1E   C0                     RET   nz   
0B1F   FE 7B                  CP   "{"   
0B21   28 08                  JR   z,nesting2   
0B23   FE 5B                  CP   "["   
0B25   28 04                  JR   z,nesting2   
0B27   FE 28                  CP   "("   
0B29   20 02                  JR   nz,nesting3   
0B2B                NESTING2:      
0B2B   1C                     INC   e   
0B2C   C9                     RET      
0B2D                NESTING3:      
0B2D   FE 7D                  CP   "}"   
0B2F   28 07                  JR   z,nesting4   
0B31   FE 5D                  CP   "]"   
0B33   28 03                  JR   z,nesting4   
0B35   FE 29                  CP   ")"   
0B37   C0                     RET   nz   
0B38                NESTING4:      
0B38   1D                     DEC   e   
0B39   C9                     RET      
0B3A                PROMPT:      
0B3A   CD 4A 0B               CALL   printStr   
0B3D   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B42   C9                     RET      
0B43                CRLF:        
0B43   CD 4A 0B               CALL   printStr   
0B46   0D 0A 00               .CSTR   "\r\n"   
0B49   C9                     RET      
0B4A                             ; prints a null teminated string
0B4A                             ; the string should be immediately following the call
0B4A                PRINTSTR:      
0B4A   E3                     EX   (sp),hl   ; swap			
0B4B   CD 03 0B               CALL   prtstr   
0B4E   23                     INC   hl   ; inc past NUL
0B4F   E3                     EX   (sp),hl   ; put it back	
0B50   C9                     RET      
0B51                TITLESTR:      
0B51   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0B65                INIT:        
0B65   21 51 0B               LD   hl,titleStr   
0B68   11 0A 24               LD   de,titleBuf   
0B6B   06 14                  LD   b,20   
0B6D                INIT1:       
0B6D   1A                     LD   a,(de)   
0B6E   BE                     CP   (hl)   
0B6F   20 17                  JR   nz,coldBoot0   
0B71   13                     INC   de   
0B72   23                     INC   hl   
0B73   10 F8                  DJNZ   init1   
0B75                WARMINIT:      
0B75   ED 4B F6 23            LD   bc,(vSavedIP)   ; restore IP
0B79   ED 7B F8 23            LD   sp,(vSavedSP)   ; restore SP
0B7D   DD 2A FA 23            LD   ix,(vSavedNext)   ; restore Next
0B81   FD 2A FC 23            LD   iy,(vSavedBP)   ; restore BP
0B85   C3 BF 0B               JP   start1   
0B88                COLDBOOT0:      
0B88   21 51 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0B8B   11 0A 24               LD   de,titleBuf   
0B8E   06 14                  LD   b,20   
0B90   ED B0                  LDIR      
0B92                COLDINIT:      
0B92   21 80 01               LD   hl,isysVars   
0B95   11 E6 23               LD   de,sysVars   
0B98   01 10 00               LD   bc,8 * 2   
0B9B   ED B0                  LDIR      
0B9D   21 00 23               LD   hl,vars   ; 52 vars LO HI
0BA0   06 34                  LD   b,26*2   
0BA2   AF                     XOR   a   
0BA3                COLDBOOT1:      
0BA3   77                     LD   (hl),a   
0BA4   23                     INC   hl   
0BA5   10 FC                  DJNZ   coldBoot1   
0BA7   DD 2A EE 23            LD   ix,(vNext)   
0BAB   FD 21 00 21            LD   iy,STACK   
0BAF   C9                     RET      
0BB0                COLDSTART:      
0BB0   31 00 21               LD   sp,STACK   
0BB3   CD 88 0B               CALL   coldBoot0   
0BB6   C3 BF 0B               JP   start1   
0BB9                START:       
0BB9   31 00 21               LD   sp,STACK   ; start Monty
0BBC   CD 65 0B               CALL   init   ; setups
0BBF                START1:      
0BBF   21 0A 24               LD   hl,titleBuf   
0BC2   CD 03 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BC5                INTERPRET:      
0BC5   CD D2 0A               CALL   flushBuffer   
0BC8   CD 3A 0B               CALL   prompt   
0BCB   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BCE   21 00 21               LD   hl,TIB   
0BD1   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BD4                INTERPRET2:      ; calculate nesting
0BD4   1E 00                  LD   e,0   ; initilize nesting value
0BD6   C5                     PUSH   bc   ; save offset into TIB,
0BD7                             ; bc is also the count of chars in TIB
0BD7   21 00 21               LD   hl,TIB   ; hl is start of TIB
0BDA   18 0B                  JR   interpret4   
0BDC                INTERPRET3:      
0BDC   3E 33                  LD   a,"3"   
0BDE   CD 85 00               CALL   putchar   
0BE1   7E                     LD   a,(hl)   ; a = char in TIB
0BE2   23                     INC   hl   ; inc pointer into TIB
0BE3   0B                     DEC   bc   ; dec count of chars in TIB
0BE4   CD 08 0B               CALL   nesting   ; update nesting value
0BE7                INTERPRET4:      
0BE7   79                     LD   a,c   ; is count zero?
0BE8   B0                     OR   b   
0BE9   20 F1                  JR   nz,interpret3   ; if not loop
0BEB   C1                     POP   bc   ; restore offset into TIB
0BEC                INTERPRET5:      
0BEC   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BEF   FE 20                  CP   $20   ; compare to space
0BF1   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BF3   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BF5                             ; ???? NEEDED?
0BF5   28 3B                  JR   z,interpret8   
0BF7   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BF9   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BFB   FE 05                  CP   CTRL_E   
0BFD   CA 90 0C               JP   z,edit_   
0C00   FE 08                  CP   CTRL_H   
0C02   CA 80 0C               JP   z,backSpace_   
0C05   FE 0A                  CP   CTRL_J   
0C07   CA A8 0C               JP   z,reEdit_   
0C0A   FE 13                  CP   CTRL_S   
0C0C   CA AB 0C               JP   z,printStack_   
0C0F                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C0F                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C0F                             ; DB     lsb(list_)       ; FF  ^L 12
0C0F                             ; DB     lsb(printStack_) ; DLE ^P 16
0C0F                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C0F                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C0F                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C0F                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C0F                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C0F                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C0F                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C0F                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C0F                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C0F                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C0F                INTERPRET5A:      
0C0F                             ; ld (vTIBPtr),bc
0C0F                             ; ld bc,(vTIBPtr)
0C0F   18 C3                  JR   interpret2   
0C11                INTERPRET6:      
0C11   21 00 21               LD   hl,TIB   
0C14   09                     ADD   hl,bc   
0C15   77                     LD   (hl),a   ; store the character in textbuf
0C16   03                     INC   bc   
0C17   CD 85 00               CALL   putchar   ; echo character to screen
0C1A   CD 08 0B               CALL   nesting   
0C1D   18 CD                  JR   interpret5   ; wait for next character
0C1F                INTERPRET7:      
0C1F   21 00 21               LD   hl,TIB   
0C22   09                     ADD   hl,bc   
0C23   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C25   23                     INC   hl   
0C26   36 0A                  LD   (hl),"\n"   
0C28   23                     INC   hl   
0C29   03                     INC   bc   
0C2A   03                     INC   bc   
0C2B   CD 43 0B               CALL   crlf   ; echo character to screen
0C2E   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C2F   B7                     OR   a   
0C30   20 BA                  JR   nz,interpret5   
0C32                INTERPRET8:      
0C32   21 00 21               LD   hl,TIB   
0C35   09                     ADD   hl,bc   
0C36   22 EA 23               LD   (vTIBPtr),hl   
0C39   01 00 21               LD   bc,TIB   
0C3C   ED 43 F6 23            LD   (vSavedIP),bc   ; save IP
0C40   ED 73 F8 23            LD   (vSavedSP),sp   ; save SP
0C44   DD 22 FA 23            LD   (vSavedNext),ix   ; save Next
0C48   FD 22 FC 23            LD   (vSavedBP),iy   ; save BP
0C4C   0B                     DEC   bc   
0C4D                NEXT:        
0C4D   03                     INC   bc   ; Increment the IP
0C4E   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C4F   FE 20                  CP   " "   ; whitespace?
0C51   28 FA                  JR   z,next   ; space? ignore
0C53   38 09                  JR   c,next1   
0C55   D6 20                  SUB   " "   
0C57   6F                     LD   l,a   ; index into table
0C58   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C5A   6E                     LD   l,(hl)   ; get low jump address
0C5B   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C5D   E9                     JP   (hl)   ; Jump to routine
0C5E                NEXT1:       
0C5E   FE 00                  CP   NUL   ; end of input string?
0C60   28 03                  JR   z,exit   
0C62   C3 C5 0B               JP   interpret   ; no, other whitespace, macros?
0C65                EXIT:        
0C65   03                     INC   bc   
0C66   60 69                  LD   hl,bc   
0C68   E9                     JP   (hl)   
0C69                RUN:         
0C69   C1                     POP   bc   
0C6A   0B                     DEC   bc   
0C6B   DD E9                  JP   (ix)   
0C6D                ERROR:       
0C6D   CD 69 0C               CALL   run   
0C70   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C7D   C3 C5 0B               JP   interpret   
0C80                BACKSPACE_:      
0C80   79                     LD   a,c   
0C81   B0                     OR   b   
0C82   CA D4 0B               JP   z,interpret2   
0C85   0B                     DEC   bc   
0C86   CD 4A 0B               CALL   printStr   
0C89   08 20 08 00            .CSTR   "\b \b"   
0C8D   C3 D4 0B               JP   interpret2   
0C90                             ; edit
0C90                EDIT_:       
0C90   CD 69 0C               CALL   run   
0C93   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0CA5   C3 C5 0B               JP   interpret   
0CA8                REEDIT_:      
0CA8   C3 C5 0B               JP   interpret   
0CAB                PRINTSTACK_:      
0CAB   CD 69 0C               CALL   run   
0CAE   2F 70 6B 00            .CSTR   "/pk"   
0CB2   C3 C5 0B               JP   interpret   
0CB5                             ; editDef:
0CB5                             ;     pop hl                      ; pop ret address
0CB5                             ;     ex (sp),hl                  ; swap with TOS
0CB5                             ;     push hl                     ; dup TOS
0CB5                             ;     ld a,l                      ; a = ident
0CB5                             ;     ld de,TIB                   ; de = start of TIB
0CB5                             ;     ld (vTIBPtr),de             ; update TIB*
0CB5                             ;     push ix                     ; save NEXT
0CB5                             ;     ld ix,editDef0              ; NEXT = editDef0
0CB5                             ;     jp lookupRef                ; convert letter into address
0CB5                             ; editDef0:
0CB5                             ;     ld e,(hl)                   ; de = (hl++)
0CB5                             ;     inc hl
0CB5                             ;     ld d,(hl)
0CB5                             ;     ld a,d                      ; de == 0 ?
0CB5                             ;     or e
0CB5                             ;     jr z,editDef4
0CB5                             ;     ld ix,editDef3              ; NEXT = editDef3
0CB5                             ;     ex de,hl
0CB5                             ;     ld a,(hl)
0CB5                             ;     cp "{"
0CB5                             ;     jr nz,editDef1
0CB5                             ;     jp editBlock0               ; convert letter into address
0CB5                             ; editDef1:
0CB5                             ;     cp "("
0CB5                             ;     jr nz,editDef2
0CB5                             ;     jp editBlock0               ; convert letter into address
0CB5                             ; editDef2:
0CB5                             ;     jp editLambda
0CB5                             ; editDef3:
0CB5                             ;     ld a," "                    ; write assign
0CB5                             ;     call writeChar
0CB5                             ;     pop hl                      ; a = ident
0CB5                             ;     ld a,l
0CB5                             ;     call writeChar
0CB5                             ;     ld a,"="                    ; write assign
0CB5                             ;     call writeChar
0CB5                             ;     ld ix,editDef4              ; NEXT = editDef4
0CB5                             ;     jp printTIB
0CB5                             ; editDef4:
0CB5                             ;     pop ix                      ; restore NEXT
0CB5                             ;     jp (ix)
0CB5                             ; writeChar:
0CB5                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CB5                             ;     ld (de),a                   ; write ident
0CB5                             ;     inc de
0CB5                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CB5                             ;     ret
0CB5                             ; ; printTIB
0CB5                             ; printTIB:
0CB5                             ;     ld hl,(vTIBPtr)
0CB5                             ;     ld de,TIB
0CB5                             ;     or a
0CB5                             ;     sbc hl,de
0CB5                             ;     jp printTIB2
0CB5                             ; printTIB1:
0CB5                             ;     ld a,(de)
0CB5                             ;     call putchar
0CB5                             ; printTIB2:
0CB5                             ;     ld a,l
0CB5                             ;     or h
0CB5                             ;     jr nz,printTIB1
0CB5                             ;     jp (ix)
0CB5                             ; editBlock:
0CB5                             ;     pop hl                      ; hl = block*
0CB5                             ; editBlock0:
0CB5                             ;     push ix                     ; save next
0CB5                             ;     push hl                     ; push block*
0CB5                             ;     push hl                     ; push block*
0CB5                             ;     ld ix,(editBlock2)
0CB5                             ;     jp blockLength
0CB5                             ; editBlock1:
0CB5                             ;     pop hl                      ; bc = length, (sp) = IP
0CB5                             ;     pop de                      ; de = block*
0CB5                             ;     ld a,l
0CB5                             ;     or h
0CB5                             ;     jr z,editBlock2
0CB5                             ;     push bc
0CB5                             ;     ld bc,hl
0CB5                             ;     ex de,hl                    ; hl = block*
0CB5                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CB5                             ;     ldir                        ; copy block to TIB
0CB5                             ;     ld (vTIBPtr),de              ; save TIB*
0CB5                             ;     pop bc
0CB5                             ; editBlock2:
0CB5                             ;     pop ix                      ; restore next
0CB5                             ;     jp (ix)
0CB5                             ; editLambda:
0CB5                             ;     jp (ix)
0CB5                             ; editArray:
0CB5                             ;     jp (ix)
0CB5                             ; editArglist:
0CB5                             ;     jp (ix)
0CB5                             ; ; blockLength
0CB5                             ; ; addr1 -- length
0CB5                             ; blockLength:
0CB5                             ;     pop hl                      ; block*
0CB5                             ;     push hl                     ; save block*
0CB5                             ;     inc hl                      ; skip first char
0CB5                             ;     ld d,1                      ; increase nesting
0CB5                             ; blockLength1:                   ; Skip to end of definition
0CB5                             ;     ld a,(hl)                   ; Get the next character
0CB5                             ;     inc hl                      ; Point to next character
0CB5                             ;     cp " " + 1                  ; ignore whitespace
0CB5                             ;     jr c,blockLength1
0CB5                             ;     cp ")"
0CB5                             ;     jr z,blockLength4
0CB5                             ;     cp "}"
0CB5                             ;     jr z,blockLength4
0CB5                             ;     cp "]"
0CB5                             ;     jr z,blockLength4
0CB5                             ;     cp "("
0CB5                             ;     jr z,blockLength2
0CB5                             ;     cp "{"
0CB5                             ;     jr z,blockLength2
0CB5                             ;     cp "["
0CB5                             ;     jr z,blockLength2
0CB5                             ;     cp "'"
0CB5                             ;     jr z,blockLength3
0CB5                             ;     cp "`"
0CB5                             ;     jr z,blockLength3
0CB5                             ;     cp DQUOTE
0CB5                             ;     jr z,blockLength3
0CB5                             ;     jr blockLength1
0CB5                             ; blockLength2:
0CB5                             ;     inc d
0CB5                             ;     jr blockLength1
0CB5                             ; blockLength4:
0CB5                             ;     dec d
0CB5                             ;     jr nz, blockLength1         ; get the next element
0CB5                             ; blockLength3:
0CB5                             ;     ld a,$80
0CB5                             ;     xor d
0CB5                             ;     ld d,a
0CB5                             ;     jr nz, blockLength1
0CB5                             ;     pop hl                      ; hl = block*
0CB5                             ;     or a
0CB5                             ;     sbc hl,de
0CB5                             ;     push hl
0CB5                             ;     jp (ix)
0CB5                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CB5                             ; \a start of stack \#3 depth \b base \$ prompt
0CB5                             ; DW dStack               ; a vS0 start of datastack			
0CB5                             ; DW FALSE                ; b vBase16
0CB5                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CB5                             ; DW 0                    ; d
0CB5                             ; DW 65                   ; e vLastDef "A" last command u defined
0CB5                             ; DW 0                    ; f
0CB5                             ; DW page6                ; g 256 bytes limits
0CB5                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CB5                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                             ; uninitialised sys variables (preserved)
23F2                VPOINTER:   DS   2   ; 
23F4                VREMAIN:   DS   2   ; 
23F6                VSAVEDIP:   DS   2   ; 
23F8                VSAVEDSP:   DS   2   ; 
23FA                VSAVEDNEXT:   DS   2   ; 
23FC                VSAVEDBP:   DS   2   ; 
23FE                VCHECKSUM:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                VHASHSTR:   DS   2   ; 
2408                TBPTR:    DS   2   ; reserved for tests
240A                TITLEBUF:   DS   20   
241E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 11
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0ABD DEFINED AT LINE 1722 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2093 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 417 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 198 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 200 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 202 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 204 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 208 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 213 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 215 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 217 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 219 IN MAIN.asm
DBLQUOTE_:          034A DEFINED AT LINE 221 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 223 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 225 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
GT_:                035F DEFINED AT LINE 238 IN MAIN.asm
LT_:                036A DEFINED AT LINE 246 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 258 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 260 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 262 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 269 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 289 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 295 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 309 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
DOLLAR:             03C4 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 339 IN MAIN.asm
ARG0:               03E2 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03EB DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03F0 DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F8 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03FB DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FB DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0417 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           0417 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          043B DEFINED AT LINE 421 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
ARRAYEND2:          044B DEFINED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 427 IN MAIN.asm
ARRAYEND3:          0450 DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
ARRINDEX:           0471 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          0479 DEFINED AT LINE 467 IN MAIN.asm
ARRINDEX1:          047A DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
ARRINDEX2:          0486 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ASSIGN:             0489 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
ASSIGN0:            048B DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
ASSIGNX:            048C DEFINED AT LINE 488 IN MAIN.asm
ASSIGN1:            0498 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              049A DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
ARGLIST:            049A DEFINED AT LINE 504 IN MAIN.asm
ARGLIST1:           04A4 DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
ARGLIST1A:          04AC DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST2:           04B4 DEFINED AT LINE 522 IN MAIN.asm
ARGLIST3:           04BC DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
ARGLIST4:           04BF DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST5:           04C5 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
LBRACE:             04D1 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D1 DEFINED AT LINE 551 IN MAIN.asm
BLOCKSTART1:        04D5 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART2:        0501 DEFINED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKSTART3:        0504 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
BLOCKSTART4:        050C DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
BLOCKSTART5:        050F DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
BLOCKSTART6:        0537 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
RBRACE:             053A DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053A DEFINED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
BLOCKEND1:          056C DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
BLOCKEND2:          0578 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKEND3:          058A DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
TICK:               0596 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0596 DEFINED AT LINE 669 IN MAIN.asm
CHAR1:              0599 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
CHAR2:              05A5 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
CHAR3:              05A8 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
BACKSLASH:          05AB DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AD DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
DISCARD:            05AD DEFINED AT LINE 693 IN MAIN.asm
DISCARD1:           05BA DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
SLASH:              05BC DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
COMMAND:            05BC DEFINED AT LINE 706 IN MAIN.asm
DIV:                05F5 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
DOT:                0606 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0618 DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
DIVIDE1:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
DIVIDE2:            062A DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
DIVIDE3:            062B DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
EQUALS:             0631 DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
LESSTHANEQ:         0639 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           063E DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0643 DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
TRUE1:              0646 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
NULL1:              064C DEFINED AT LINE 820 IN MAIN.asm
FALSE1:             064C DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
CARET:              0652 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
GO:                 0652 DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
GO1:                0653 DEFINED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
GO2:                0659 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
GOBLOCK:            0664 DEFINED AT LINE 845 IN MAIN.asm
GOBLOCK1:           0664 DEFINED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
GOBLOCK2:           0689 DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
GOLAMBDA:           0697 DEFINED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
GOLAMBDA1:          06B4 DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
GOLAMBDA2:          06BA DEFINED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
GOLAMBDA3:          06C5 DEFINED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
GOLAMBDA4:          06DD DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOLAMBDA5:          06E1 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOLAMBDA6:          06E4 DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
GOLAMBDA7:          06E7 DEFINED AT LINE 936 IN MAIN.asm
GOLAMBDA8:          06EC DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
HASH:               06F7 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
HEXNUM:             06F7 DEFINED AT LINE 952 IN MAIN.asm
HEXNUM1:            06FA DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
HEXNUM2:            0702 DEFINED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
UPCASE:             0714 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
LOWCASE:            0719 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
IDENT1:             071E DEFINED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
QUESTION:           072B DEFINED AT LINE 993 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IF:                 072B DEFINED AT LINE 994 IN MAIN.asm
IFTE:               0737 DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
IFTE1:              0738 DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
STAR:               0744 DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
MUL:                0744 DEFINED AT LINE 1017 IN MAIN.asm
MUL2:               0746 DEFINED AT LINE 1020 IN MAIN.asm
MUL3:               074E DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
NUM:                0760 DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
NUM0:               0769 DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
NUM1:               076A DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
NUM2:               0782 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
NUM3:               078D DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
RPAREN:             0790 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
SEMICOLON:          0798 DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07B4 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT1:         07BC DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
SHIFTLEFT2:         07BD DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
SHIFTRIGHT:         07C4 DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT1:        07CC DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
SHIFTRIGHT2:        07D0 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
DBLQUOTE:           07D7 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
STRING:             07D7 DEFINED AT LINE 1143 IN MAIN.asm
STRING1:            07E0 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
STRING2:            07E3 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
STRING3:            07EC DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
MINUS:              07FF DEFINED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
SUB:                080B DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
SUB1:               0815 DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
ERROR1:             081E DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
COMMENT:            0825 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
COMMAND_A:          082E DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
ABSOLUTE:           083A DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
ADDROF:             0847 DEFINED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
ADDROF1:            085B DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
ADDROF2:            0866 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
COMMAND_B:          0868 DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
BUFFERARRAY:        0883 DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
BUFFERNUMBER:       08B7 DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
BUFFERDEC:          08BE DEFINED AT LINE 1300 IN MAIN.asm
BUFFERDEC0:         08D8 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
BUFFERDEC1:         08E8 DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
BUFFERDEC2:         0908 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
BUFFERDEC3:         090A DEFINED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
BUFFERDEC4:         091A DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
BUFFERDEC5:         091B DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
BUFFERHEX:          0924 DEFINED AT LINE 1372 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
BUFFERHEX1:         0945 DEFINED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1382 IN MAIN.asm
BUFFERHEX2:         094E DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
BREAK:              095C DEFINED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
BREAK1:             0963 DEFINED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
BUFFERSTRING:       0976 DEFINED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
BUFFERSTRING0:      097D DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1442 IN MAIN.asm
BUFFERSTRING1:      0983 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
BUFFERCHAR:         0990 DEFINED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
BUFFERXCHARS:       0995 DEFINED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
BUFFERXCHARS0:      0996 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
BUFFERXCHARS1:      099F DEFINED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
BUFFERXCHARS2:      09A7 DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
COMMAND_I:          09B1 DEFINED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
COMMAND_P:          09BD DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PARTIAL:            09CF DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
PRINTBUFFER:        09EF DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
PRINTCHARS:         0A12 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
PRINTCHARS1:        0A19 DEFINED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
PRINTCHARS2:        0A1F DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
PRINTSTACK:         0A24 DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
COMMAND_R:          0A26 DEFINED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
REMAIN:             0A2F DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
SIZE:               0A35 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
COMMAND_V:          0A3F DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
CONSTBUFSTART:      0A54 DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
CONSTHEAPSTART:     0A59 DEFINED AT LINE 1620 IN MAIN.asm
CONSTTIBSTART:      0A5E DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
VARBUFPTR:          0A63 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
VARHEAPPTR:         0A6C DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
VARTIBPTR:          0A75 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
VARIABLE:           0A7E DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
CONSTANT:           0A81 DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
CHARS:              0A84 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
CHARS1:             0A87 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
DECIMAL:            0A8C DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
DECIMAL1:           0A8F DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
HEXADECIMAL:        0A94 DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
INPUT:              0A9A DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
KEY:                0AA5 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
OUTPUT:             0AAE DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
NUMBERS:            0AB7 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
FILTER:             0ABD DEFINED AT LINE 1720 IN MAIN.asm
MAP:                0ABD DEFINED AT LINE 1721 IN MAIN.asm
ARGS0A1L_:          0ABF DEFINED AT LINE 1728 IN MAIN.asm
ARGS0A1L:           0AC1 DEFINED AT LINE 1731 IN MAIN.asm
ARGS1A0L_:          0AC2 DEFINED AT LINE 1734 IN MAIN.asm
ARGS1A0L:           0AC4 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
ARGS1A1L_:          0AC5 DEFINED AT LINE 1740 IN MAIN.asm
ARGS1A1L:           0AC7 DEFINED AT LINE 1743 IN MAIN.asm
ARGS2A0L_:          0AC9 DEFINED AT LINE 1746 IN MAIN.asm
ARGS2A0L:           0ACB DEFINED AT LINE 1749 IN MAIN.asm
ARGS1A2L_:          0ACD DEFINED AT LINE 1752 IN MAIN.asm
ARGS1A2L:           0ACF DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
FLUSHBUFFER:        0AD2 DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
JUMPTABLE:          0AE9 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
JUMPTABLE0:         0AEB DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
JUMPTABLE1:         0AF8 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
JUMPTABLE2:         0AF9 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
PRTSTR0:            0AFF DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
PRTSTR:             0B03 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
NESTING:            0B08 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
NESTING0:           0B12 DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
NESTING1A:          0B19 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
NESTING1:           0B1C DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
NESTING2:           0B2B DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
NESTING3:           0B2D DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
NESTING4:           0B38 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
PROMPT:             0B3A DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
CRLF:               0B43 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
PRINTSTR:           0B4A DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
TITLESTR:           0B51 DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
INIT:               0B65 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
INIT1:              0B6D DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
WARMINIT:           0B75 DEFINED AT LINE 1896 IN MAIN.asm
COLDBOOT0:          0B88 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
COLDINIT:           0B92 DEFINED AT LINE 1909 IN MAIN.asm
COLDBOOT1:          0BA3 DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
COLDSTART:          0BB0 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
START:              0BB9 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 7
START1:             0BBF DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
INTERPRET:          0BC5 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
INTERPRET2:         0BD4 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
INTERPRET3:         0BDC DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
INTERPRET4:         0BE7 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
INTERPRET5:         0BEC DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
INTERPRET5A:        0C0F DEFINED AT LINE 2008 IN MAIN.asm
INTERPRET6:         0C11 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
INTERPRET7:         0C1F DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
INTERPRET8:         0C32 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
NEXT:               0C4D DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
NEXT1:              0C5E DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
EXIT:               0C65 DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
RUN:                0C69 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
ERROR:              0C6D DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
BACKSPACE_:         0C80 DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
EDIT_:              0C90 DEFINED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
REEDIT_:            0CA8 DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
PRINTSTACK_:        0CAB DEFINED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1768 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1253 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1911 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1443 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1923 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
VPOINTER:           23F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
VREMAIN:            23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
VSAVEDIP:           23F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
VSAVEDSP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
VSAVEDNEXT:         23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
VSAVEDBP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
VCHECKSUM:          23FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           2406 DEFINED AT LINE 59 IN ram.asm
TBPTR:              2408 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           240A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
HEAP:               241E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
