0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 A4 0D               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   33 0E                  DW   next   ; nNext
01E8   20 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 50 08               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 50 08               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F6 23            LD   de,(vPointer)   
0238   21 F6 23               LD   hl,vPointer   
023B   C3 B2 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 50 08               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 EF 0A               JP   num   
026E                EQ_:         
026E   CD EA 0C               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 4E 08               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 37 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 27 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 1F 0B               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 74 0A               JP   dollar   
02C3                LBRACK_:      
02C3   C3 CA 07               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 E6 07               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 95 07               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 5F 08               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 64 08               JP   rbrace   
02D2                TICK_:       
02D2   C3 EB 08               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 81 07               JP   semicolon   
02D8                DOT_:        
02D8   C3 B8 04               JP   dot   
02DB                COLON_:      
02DB   C3 4A 07               JP   colon   
02DE                UPCASE_:      
02DE   C3 91 0A               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 96 0A               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 A8 0A               JP   question   
02E7                STAR_:       
02E7   C3 D3 0A               JP   star   
02EA                HASH_:       
02EA   C3 36 08               JP   hash   
02ED                CARET_:      
02ED   C3 D5 09               JP   caret   
02F0                COMMA_:      
02F0   C3 48 07               JP   comma   
02F3                DQUOTE_:      
02F3   C3 4A 0B               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 57 07               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 48 07               JP   underscore   
02FC                TILDE_:      
02FC   C3 48 07               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FF 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD D6 0C               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   FD                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   7A                     DB   lsb(hexadecimal_)   
0314   3F                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   80                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   48                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   83                     DB   lsb(output_)   
031B   4B                     DB   lsb(command_p_)   
031C   54                     DB   lsb(command_q_)   
031D   5D                     DB   lsb(command_r_)   
031E   60                     DB   lsb(command_s_)   
031F   86                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   89                     DB   lsb(words_)   
0323   8C                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD EA 0C               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   97                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A4                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C5                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD EA 0C               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CD                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   D0                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D3 03               JP   bytes_   ; /b bytes
033F                COMMAND_I_:      
033F   CD EA 0C               CALL   jumpTable   
0342   6E                     DB   "n"   ; /in input
0343   DB                     DB   lsb(input_)   
0344   00                     DB   NUL   
0345   C3 74 03               JP   error1_   
0348                COMMAND_M_:      
0348   C3 46 04               JP   command_m   
034B                COMMAND_P_:      
034B   CD EA 0C               CALL   jumpTable   
034E   63                     DB   "c"   ; /pc print chars
034F   E6                     DB   lsb(printChars_)   
0350   00                     DB   NUL   
0351   C3 74 03               JP   error1_   
0354                COMMAND_Q_:      
0354   CD EA 0C               CALL   jumpTable   
0357   74                     DB   "t"   ; /qt quit
0358   ED                     DB   lsb(quit_)   
0359   00                     DB   NUL   
035A   C3 74 03               JP   error1_   
035D                COMMAND_R_:      
035D   C3 52 04               JP   command_r   
0360                COMMAND_S_:      
0360   C3 5F 04               JP   command_s   
0363                COMMAND_V_:      
0363   C3 75 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 23               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 00 09               JP   div   
0374                ERROR1_:      
0374   21 01 00               LD   hl,1   ; error 1: unknown command
0377   C3 52 0E               JP   error   
037A                HEXADECIMAL_:      
037A   21 10 00               LD   hl,16   
037D   C3 6B 03               JP   decimal1   
0380                KEY_:        
0380   C3 80 03               JP   key_   
0383                OUTPUT_:      
0383   C3 CA 0A               JP   output   
0386                TRUE_:       
0386   C3 B1 02               JP   true1   
0389                WORDS_:      
0389   C3 F7 03               JP   words   
038C                XOR_:        
038C   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038D                XOR1:        
038D   E1                     POP   hl   
038E   7B                     LD   a,e   
038F   AD                     XOR   l   
0390   6F                     LD   l,a   
0391   7A                     LD   a,d   
0392   AC                     XOR   h   
0393   67                     LD   h,a   
0394   E5                     PUSH   hl   
0395   DD E9                  JP   (ix)   
0397                             ; /ab absolute
0397                             ; num -- num
0397                ABSOLUTE_:      
0397   E1                     POP   hl   
0398   CB 7C                  BIT   7,h   
039A   C8                     RET   z   
039B   AF                     XOR   a   
039C   95                     SUB   l   
039D   6F                     LD   l,a   
039E   9F                     SBC   a,a   
039F   94                     SUB   h   
03A0   67                     LD   h,a   
03A1   E5                     PUSH   hl   
03A2   DD E9                  JP   (ix)   
03A4                             ; /ad addrOf
03A4                             ; char -- addr
03A4                ADDROF_:      
03A4   E1                     POP   hl   ; a = char
03A5   7D                     LD   a,l   
03A6   FE 7B                  CP   "z"+1   ; if a > z then exit
03A8   30 19                  JR   nc,addrOf2   
03AA   D6 41                  SUB   "A"   ; a - 65
03AC   38 15                  JR   c,addrOf2   ; if < A then exit
03AE   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03B0   38 06                  JR   c,addrOf1   
03B2   D6 06                  SUB   "a"-("Z"+1)   
03B4   FE 1A                  CP   "Z"-"A"+1   
03B6   38 0B                  JR   c,addrOf2   ; if < a then exit
03B8                ADDROF1:      
03B8   87                     ADD   a,a   ; double a
03B9   21 00 23               LD   hl,VARS   ; hl = VARS + a
03BC   85                     ADD   a,l   
03BD   6F                     LD   l,a   
03BE   3E 00                  LD   a,0   
03C0   8C                     ADC   a,h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3                ADDROF2:      
03C3   DD E9                  JP   (ix)   
03C5                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C5                             ; array* -- num
03C5                ARRAYSIZE_:      
03C5   E1                     POP   hl   
03C6   2B                     DEC   hl   ; msb size
03C7   56                     LD   d,(hl)   
03C8   2B                     DEC   hl   ; lsb size
03C9   5E                     LD   e,(hl)   
03CA   D5                     PUSH   de   
03CB   DD E9                  JP   (ix)   
03CD                             ; /br
03CD                BREAK_:      
03CD   C3 D1 08               JP   break   
03D0                             ; /by
03D0                COLDSTART_:      
03D0   C3 9B 0D               JP   coldStart   
03D3                             ; /b
03D3                BYTES_:      
03D3   21 01 00               LD   hl,1   
03D6                BYTES1:      
03D6   22 E6 23               LD   (vDataWidth),hl   
03D9   DD E9                  JP   (ix)   
03DB                             ; Z80 port input
03DB                             ; port -- value
03DB                INPUT_:      
03DB   E1                     POP   hl   
03DC   59                     LD   e,c   ; save IP
03DD   4D                     LD   c,l   
03DE   ED 68                  IN   l,(c)   
03E0   26 00                  LD   h,0   
03E2   4B                     LD   c,e   ; restore IP
03E3   E5                     PUSH   hl   
03E4   DD E9                  JP   (ix)   
03E6                             ; /pc printChars
03E6                             ; char* len --
03E6                PRINTCHARS_:      
03E6   E1                     POP   hl   ; hl = count
03E7   D1                     POP   de   ; de = char*
03E8   CD 78 0B               CALL   printChars2   
03EB   DD E9                  JP   (ix)   
03ED                             ; /qt
03ED                             ; bool --
03ED                QUIT_:       
03ED   E1                     POP   hl   ; hl = condition, exit if true
03EE   7D                     LD   a,l   
03EF   B4                     OR   h   
03F0   20 02                  JR   nz,quit1   
03F2   DD E9                  JP   (ix)   
03F4                QUIT1:       
03F4   C3 64 08               JP   blockEnd   
03F7                             ; /w
03F7                WORDS:       
03F7   21 02 00               LD   hl,2   
03FA   C3 D6 03               JP   bytes1   
03FD                COMMAND_F_:      
03FD   18 09                  JR   command_f   
03FF                             ; //
03FF                COMMENT:      
03FF   03                     INC   bc   ; point to next char
0400   0A                     LD   a,(bc)   
0401   FE 20                  CP   " "   ; terminate on any char less than SP
0403   30 FA                  JR   nc,comment   
0405   0B                     DEC   bc   
0406   DD E9                  JP   (ix)   
0408                             ;********************** PAGE 3 END *********************************************
0408                             ;********************** PAGE 4 BEGIN *********************************************
0408                COMMAND_F:      
0408   CD EA 0C               CALL   jumpTable   
040B   65                     DB   "e"   ; /fe forEach
040C   23                     DB   lsb(forEach_)   
040D   6C                     DB   "l"   ; /fl flush output buffer
040E   26                     DB   lsb(flush_)   
040F   6F                     DB   "o"   ; fo fold
0410   2E                     DB   lsb(fold_)   
0411   73                     DB   "s"   ; /fs funcSrc
0412   31                     DB   lsb(funcSrc_)   
0413   74                     DB   "t"   ; /ft filter
0414   2B                     DB   lsb(filter_)   
0415   31                     DB   "1"   
0416   34                     DB   lsb(f1_)   
0417   32                     DB   "2"   
0418   37                     DB   lsb(f2_)   
0419   33                     DB   "3"   
041A   3A                     DB   lsb(f3_)   
041B   34                     DB   "4"   
041C   3D                     DB   lsb(f4_)   
041D   7A                     DB   "z"   
041E   40                     DB   lsb(fz_)   
041F   00                     DB   NUL   
0420   C3 43 04               JP   false_   
0423                FOREACH_:      
0423   C3 7B 06               JP   forEach   
0426                             ; /fl flush
0426                             ; --
0426                FLUSH_:      
0426   CD BF 0C               CALL   flushBuffer   
0429   DD E9                  JP   (ix)   
042B                FILTER_:      
042B   C3 CB 05               JP   filter   
042E                FOLD_:       
042E   C3 29 06               JP   fold   
0431                FUNCSRC_:      
0431   C3 C7 06               JP   funcSrc   
0434                F1_:         
0434   C3 9B 0E               JP   f1   
0437                F2_:         
0437   C3 9B 0E               JP   f2   
043A                F3_:         
043A   C3 9B 0E               JP   f3   
043D                F4_:         
043D   C3 9B 0E               JP   f4   
0440                FZ_:         
0440   C3 C8 09               JP   fz   
0443                FALSE_:      
0443   C3 B7 02               JP   false1   
0446                COMMAND_M:      
0446   CD EA 0C               CALL   jumpTable   
0449   70                     DB   "p"   ; /mp map
044A   4F                     DB   lsb(map_)   
044B   00                     DB   NUL   
044C   C3 74 03               JP   error1_   
044F                MAP_:        
044F   C3 89 05               JP   map   
0452                COMMAND_R:      
0452   CD EA 0C               CALL   jumpTable   
0455   63                     DB   "c"   ; /rc tail call optimisation
0456   66                     DB   lsb(recur_)   
0457   65                     DB   "e"   ; /re remainder
0458   6C                     DB   lsb(remain_)   
0459   67                     DB   "g"   ; /rg range src
045A   72                     DB   lsb(rangeSrc_)   
045B   00                     DB   NUL   
045C   C3 74 03               JP   error1_   
045F                COMMAND_S:      
045F   CD EA 0C               CALL   jumpTable   
0462   00                     DB   NUL   
0463   C3 74 03               JP   error1_   
0466                RECUR_:      
0466   E1                     POP   hl   
0467   22 F2 23               LD   (vRecur),hl   
046A   DD E9                  JP   (ix)   
046C                REMAIN_:      
046C   2A F8 23               LD   hl,(vRemain)   
046F   E5                     PUSH   hl   
0470   DD E9                  JP   (ix)   
0472                RANGESRC_:      
0472   C3 0D 05               JP   rangeSrc   
0475                COMMAND_V:      
0475   CD EA 0C               CALL   jumpTable   
0478   62                     DB   "b"   
0479   97                     DB   lsb(varBufPtr_)   
047A   68                     DB   "h"   
047B   A0                     DB   lsb(varHeapPtr_)   
047C   74                     DB   "t"   
047D   A9                     DB   lsb(varTIBPtr_)   
047E   42                     DB   "B"   
047F   88                     DB   lsb(constBufStart_)   
0480   48                     DB   "H"   
0481   8D                     DB   lsb(constHeapStart_)   
0482   54                     DB   "T"   
0483   92                     DB   lsb(constTIBStart_)   
0484   00                     DB   NUL   
0485   C3 74 03               JP   error1_   
0488                CONSTBUFSTART_:      
0488   11 00 22               LD   de,BUF   
048B   18 28                  JR   constant   
048D                CONSTHEAPSTART_:      
048D   11 20 24               LD   de,HEAP   
0490   18 23                  JR   constant   
0492                CONSTTIBSTART_:      
0492   11 00 21               LD   de,TIB   
0495   18 1E                  JR   constant   
0497                VARBUFPTR_:      
0497   ED 5B EC 23            LD   de,(vBufPtr)   
049B   21 EC 23               LD   hl,vBufPtr   
049E   18 12                  JR   variable   
04A0                VARHEAPPTR_:      
04A0   ED 5B F0 23            LD   de,(vHeapPtr)   
04A4   21 F0 23               LD   hl,vHeapPtr   
04A7   18 09                  JR   variable   
04A9                VARTIBPTR_:      
04A9   ED 5B EA 23            LD   de,(vTIBPtr)   
04AD   21 EA 23               LD   hl,vTIBPtr   
04B0   18 00                  JR   variable   
04B2                VARIABLE:      
04B2   22 F6 23               LD   (vPointer),hl   
04B5                CONSTANT:      
04B5   D5                     PUSH   de   
04B6   DD E9                  JP   (ix)   
04B8                DOT:         
04B8   CD EA 0C               CALL   jumpTable   
04BB   61                     DB   "a"   ; .a print array
04BC   00                     DB   lsb(dotArray)   
04BD   63                     DB   "c"   ; .c print char
04BE   EC                     DB   lsb(dotChar_)   
04BF   73                     DB   "s"   ; .s print string
04C0   D2                     DB   lsb(dotString_)   
04C1   78                     DB   "x"   ; .x print x chars
04C2   F1                     DB   lsb(dotXChars_)   
04C3   00                     DB   NUL   ; .  print number
04C4   C3 C7 04               JP   dotNumber_   
04C7                             ; /bd buffer decimal
04C7                             ; value --
04C7                DOTNUMBER_:      
04C7   3A E8 23               LD   a,(vNumBase)   
04CA   FE 10                  CP   16   
04CC   CA 77 09               JP   z,bufferHex   ; else falls through
04CF   C3 11 09               JP   bufferDec   
04D2                             ; /bs buffered string
04D2                             ; string* --
04D2                DOTSTRING_:      
04D2   E1                     POP   hl   ; hl = string*
04D3   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
04D7   18 06                  JR   dotString1   
04D9                DOTSTRING0:      
04D9   12                     LD   (de),a   ; a -> buffer*
04DA   1C                     INC   e   ; buffer*++, wraparound
04DB   CC BF 0C               CALL   z,flushBuffer   
04DE   23                     INC   hl   
04DF                DOTSTRING1:      
04DF   7E                     LD   a,(hl)   ; a <- string*
04E0   B7                     OR   a   ; if NUL exit loop
04E1   20 F6                  JR   nz,dotString0   
04E3   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04E6   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
04EA   DD E9                  JP   (ix)   
04EC                             ; /bc buffer char
04EC                             ; char --
04EC                DOTCHAR_:      
04EC   21 01 00               LD   hl,1   
04EF   18 01                  JR   dotXChars0   
04F1                             ; /bx buffered x chars
04F1                             ; char length --
04F1                DOTXCHARS_:      
04F1   E1                     POP   hl   ; hl = length
04F2                DOTXCHARS0:      
04F2   D1                     POP   de   ; a' = char
04F3   7B                     LD   a,e   
04F4   08                     EX   af,af'   
04F5   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
04F9   18 08                  JR   dotXChars2   
04FB                DOTXCHARS1:      
04FB   08                     EX   af,af'   
04FC   12                     LD   (de),a   
04FD   08                     EX   af,af'   
04FE   1C                     INC   e   ; buffer*++, wraparound
04FF   CC BF 0C               CALL   z,flushBuffer   
0502   2B                     DEC   hl   
0503                DOTXCHARS2:      
0503   7D                     LD   a,l   
0504   B4                     OR   h   
0505   20 F4                  JR   nz,dotXChars1   
0507   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
050B   DD E9                  JP   (ix)   
050D                             ;********************** PAGE 4 END *********************************************
050D                             ;*******************************************************************
050D                             ; Monty implementations
050D                             ;*******************************************************************
050D                             ; /rg rangeSrc
050D                             ; begin end step -- src
050D                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
050D                RANGESRC:      ; range source: begin, end, step, local: L
050D   CD D5 09               CALL   go   
0510   00 00                  DW   NUL   
0512   1C 05                  DW   rangeSrcM_1312S884   
0514   16 05                  DW   $+2   
0516   01                     DB   1   
0517   04 62 65 73 4C         .PSTR   "besL"   
051C                RANGESRCM_1312S884:      
051C   7B                     DB   "{"   
051D   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0528   5C 6B 74 7B            DB   "\\kt{"   
052C   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0534   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
053A   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0542   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
054A   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0554   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
055C   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0563   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0577   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
057F   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0586   7D                     DB   "}"   
0587   7D                     DB   "}"   
0588   00                     DB   0   
0589                             ; /mp map
0589                             ; src func -- src1
0589                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0589                MAP:         ; map: source, function
0589   CD D5 09               CALL   go   
058C   00 00                  DW   NUL   
058E   96 05                  DW   mapM_1331S904   
0590   92 05                  DW   $+2   
0592   00                     DB   0   
0593   02 73 66               .PSTR   "sf"   
0596                MAPM_1331S904:      
0596   7B                     DB   "{"   
0597   5C 6B 74 7B            DB   "\\kt{"   
059B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
05A3   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
05A7   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05AC   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05B8   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05C1   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
05C8   7D                     DB   "}"   
05C9   7D                     DB   "}"   
05CA   00                     DB   0   
05CB                             ; /ft filter
05CB                             ; src pred -- src1
05CB                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
05CB                FILTER:      ; filter: source, predicate, local: T
05CB   CD D5 09               CALL   go   
05CE   00 00                  DW   NUL   
05D0   D9 05                  DW   filterM_1345S919   
05D2   D4 05                  DW   $+2   
05D4   01                     DB   1   
05D5   03 73 70 54            .PSTR   "spT"   
05D9                FILTERM_1345S919:      
05D9   7B                     DB   "{"   
05DA   5B 30 5D 25 54 3D      DB   "[0]%T="   
05E0   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
05E4   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
05E8   5B                     DB   "["   
05E9   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
05F6   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
05FE   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0602   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0607   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
061D   3F 3F                  DB   "??"   
061F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0626   7D                     DB   "}"   
0627   7D                     DB   "}"   
0628   00                     DB   0   
0629                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0629                FOLD:        ; src, init, reducer
0629   CD D5 09               CALL   go   
062C   00 00                  DW   NUL   
062E   38 06                  DW   foldM_1361S936   
0630   32 06                  DW   $+2   
0632   01                     DB   1   
0633   04 73 69 72 41         .PSTR   "sirA"   
0638                FOLDM_1361S936:      
0638   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0639   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0640   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0644   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0648   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
064D   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0668   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0671   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0678   7D                     DB   "}"   
0679   7D                     DB   "}"   
067A   00                     DB   0   
067B                             ; /fe forEach
067B                             ; src proc --
067B                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
067B                FOREACH:      ; forEach: source, procedure, local: T
067B   CD D5 09               CALL   go   
067E   00 00                  DW   NUL   
0680   89 06                  DW   forEachM_1375S951   
0682   84 06                  DW   $+2   
0684   01                     DB   1   
0685   03 73 70 54            .PSTR   "spT"   
0689                FOREACHM_1375S951:      
0689   7B                     DB   "{"   
068A   5B 30 5D 25 54 3D      DB   "[0]%T="   
0690   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0694   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
069C   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
06A1   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
06B3   3F 3F                  DB   "??"   ; ifte:
06B5   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
06BE   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
06C5   7D                     DB   "}"   
06C6   00                     DB   0   
06C7                             ; ; /fs funcSrc
06C7                             ; ; func -- src
06C7                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
06C7                FUNCSRC:      ; :f func or block
06C7   CD D5 09               CALL   go   
06CA   00 00                  DW   NUL   
06CC   D3 06                  DW   funcSrcM_1389S966   
06CE   D0 06                  DW   $+2   
06D0   00                     DB   0   
06D1   01 66                  .PSTR   "f"   
06D3                FUNCSRCM_1389S966:      
06D3   7B                     DB   "{"   
06D4   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
06D8   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
06E0   5C 64 74 7B            DB   "\\dt{"   
06E4   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
06F6   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
06FD   7D                     DB   "}"   
06FE   7D                     DB   "}"   
06FF   00                     DB   0   
0700                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0700                DOTARRAY:      
0700   CD D5 09               CALL   go   
0703   00 00                  DW   NUL   
0705   0E 07                  DW   dotArrayM_1399S977   
0707   09 07                  DW   $+2   
0709   02                     DB   2   
070A   03 61 62 63            .PSTR   "abc"   
070E                DOTARRAYM_1399S977:      
070E   7B                     DB   "{"   
070F   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
0746   7D                     DB   "}"   
0747   00                     DB   0   
0748                             ;*******************************************************************
0748                             ; unused opcodes (reserved)
0748                             ;*******************************************************************
0748                UNDERSCORE:      
0748                TILDE:       
0748                COMMA:       
0748   DD E9                  JP   (ix)   
074A                             ;*******************************************************************
074A                             ; implementations
074A                             ;*******************************************************************
074A                             ; _ func
074A                             ; -- func*
074A                COLON:       
074A   03                     INC   bc   ; arg_list must ve immediately followed by {
074B   0A                     LD   a,(bc)   
074C   FE 3D                  CP   "="   ; := definition
074E   28 28                  JR   z,defineStart   
0750   0B                     DEC   bc   
0751   21 01 00               LD   hl,1   
0754   C3 52 0E               JP   error   
0757                BACKSLASH:      
0757                LAMBDA:      
0757   DD E5                  PUSH   ix   
0759   CD 7D 0B               CALL   parseArgs   
075C                LAMBDA1:      
075C   03                     INC   bc   ; arg_list must ve immediately followed by {
075D   0A                     LD   a,(bc)   
075E   FE 21                  CP   " "+1   ; skip white space
0760   38 FA                  JR   c,lambda1   
0762   FE 7B                  CP   "{"   
0764   28 06                  JR   z,lambda2   
0766   21 02 00               LD   hl,2   ; error 2: parse error
0769   C3 52 0E               JP   error   
076C                LAMBDA2:      
076C   CD B3 0B               CALL   parseBlock   
076F   CD 1D 0C               CALL   createFunc   
0772   E1                     POP   hl   
0773   DD E1                  POP   ix   
0775   E5                     PUSH   hl   
0776   DD E9                  JP   (ix)   
0778                DEFINESTART:      
0778   E1                     POP   hl   ; discard variable value
0779   2A F6 23               LD   hl,(vPointer)   ; vDefine = vPointer
077C   22 F4 23               LD   (vDefine),hl   
077F   DD E9                  JP   (ix)   
0781                SEMICOLON:      
0781                DEFINEEND:      
0781   2A F4 23               LD   hl,(vDefine)   ; hl = define*
0784   7D                     LD   a,l   
0785   B4                     OR   h   
0786   28 0B                  JR   z,defineEnd1   
0788   11 00 00               LD   de,NUL   ; set vDefine=NUL
078B   ED 53 F4 23            LD   (vDefine),de   
078F   D1                     POP   de   ; de = value
0790   C3 54 08               JP   assign1   
0793                DEFINEEND1:      
0793   DD E9                  JP   (ix)   
0795                             ; %a .. %z
0795                             ; -- value
0795                             ; returns value of arg
0795                PERCENT:      
0795                ARG:         
0795   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0798   FD 56 05               LD   d,(iy+5)   
079B   EB                     EX   de,hl   
079C   7D                     LD   a,l   ; arg_list* == null, skip
079D   B4                     OR   h   
079E   28 1A                  JR   z,arg0a   
07A0   23                     INC   hl   ; a = num_args, hl = arg_list*
07A1   7E                     LD   a,(hl)   
07A2   23                     INC   hl   
07A3   B7                     OR   a   
07A4   28 14                  JR   z,arg0a   ; num_args == 0, skip
07A6   5F                     LD   e,a   ; e = a = num_args
07A7   03                     INC   bc   ; a = next char = dollar_name
07A8   0A                     LD   a,(bc)   
07A9   C5                     PUSH   bc   ; save IP
07AA   43                     LD   b,e   ; b = e = num_args
07AB   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
07AE   FD 56 03               LD   d,(iy+3)   
07B1                ARG0:        
07B1   1B                     DEC   de   ; a = dollar_name, de = next arg*
07B2   1B                     DEC   de   
07B3   BE                     CP   (hl)   
07B4   28 09                  JR   z,arg1   
07B6   23                     INC   hl   ; hl = next arg_list*
07B7   10 F8                  DJNZ   arg0   
07B9   C1                     POP   bc   ; no match, restore IP
07BA                ARG0A:       
07BA   11 00 00               LD   de,0   ; return 0
07BD   18 08                  JR   arg1a   
07BF                ARG1:        
07BF   C1                     POP   bc   ; restore IP
07C0   EB                     EX   de,hl   ; hl = arg*
07C1   22 F6 23               LD   (vPointer),hl   ; store arg* in setter
07C4   5E                     LD   e,(hl)   
07C5   23                     INC   hl   
07C6   56                     LD   d,(hl)   ; de = arg
07C7                ARG1A:       
07C7   D5                     PUSH   de   ; push arg
07C8   DD E9                  JP   (ix)   
07CA                LBRACK:      
07CA                ARRAYSTART:      
07CA   11 00 00               LD   de,0   ; create stack frame
07CD   D5                     PUSH   de   ; push null for IP
07CE   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
07D1   FD 56 05               LD   d,(iy+5)   ; 
07D4   D5                     PUSH   de   ; 
07D5   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
07D8   FD 56 03               LD   d,(iy+3)   ; 
07DB   D5                     PUSH   de   ; 
07DC   FD E5                  PUSH   iy   ; push BP
07DE   FD 21 00 00            LD   iy,0   ; BP = SP
07E2   FD 39                  ADD   iy,sp   
07E4   DD E9                  JP   (ix)   
07E6                RBRACK:      
07E6                ARRAYEND:      
07E6   FD 54                  LD   d,iyh   ; de = BP
07E8   FD 5D                  LD   e,iyl   
07EA   ED 43 02 24            LD   (vTemp1),bc   ; save IP
07EE   62 6B                  LD   hl,de   ; hl = de = BP
07F0   B7                     OR   a   
07F1   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
07F3   CB 3C                  SRL   h   ; 
07F5   CB 1D                  RR   l   
07F7   44 4D                  LD   bc,hl   ; bc = count
07F9   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
07FC   71                     LD   (hl),c   ; write num items in length word
07FD   23                     INC   hl   
07FE   70                     LD   (hl),b   
07FF   23                     INC   hl   ; hl = array[0], bc = count
0800                             ; de = BP, hl = array[0], bc = count
0800   18 15                  JR   arrayEnd3   
0802                ARRAYEND1:      
0802   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0805   77                     LD   (hl),a   ; write lsb of array item
0806   23                     INC   hl   ; move to msb of array item
0807   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
080A   3D                     DEC   a   
080B   28 05                  JR   z,arrayEnd2   
080D   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0810   77                     LD   (hl),a   ; write msb of array item
0811   23                     INC   hl   ; move to next word in array
0812                ARRAYEND2:      
0812   FD 2B                  DEC   iy   ; move to next word on stack
0814   FD 2B                  DEC   iy   
0816   0B                     DEC   bc   ; dec items count
0817                ARRAYEND3:      
0817   79                     LD   a,c   ; if not zero loop
0818   B0                     OR   b   
0819   20 E7                  JR   nz,arrayEnd1   
081B   EB                     EX   de,hl   ; de = end of array, hl = BP
081C   F9                     LD   sp,hl   ; sp = BP
081D   E1                     POP   hl   ; de = end of array, hl = old BP
081E   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
081F   FD 62                  LD   iyh,d   
0821   FD 6B                  LD   iyl,e   
0823   D1                     POP   de   ; pop arg_list (discard)
0824   D1                     POP   de   ; pop first_arg* (discard)
0825   D1                     POP   de   ; pop IP (discard)
0826   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
082A   13                     INC   de   
082B   13                     INC   de   
082C   D5                     PUSH   de   ; return array[0]
082D   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0830   ED 4B 02 24            LD   bc,(vTemp1)   ; restore IP
0834   DD E9                  JP   (ix)   
0836                             ; index of an array, based on vDataWidth
0836                             ; array* num -- value    ; also sets vPointer to address
0836                HASH:        
0836                ARRAYINDEX:      
0836   E1                     POP   hl   ; hl = index
0837   D1                     POP   de   ; de = array
0838   3A E6 23               LD   a,(vDataWidth)   ; a = data width
083B   3D                     DEC   a   
083C   28 01                  JR   z,arrayIndex1   
083E                ARRAYINDEX0:      
083E   29                     ADD   hl,hl   ; if data width = 2 then double
083F                ARRAYINDEX1:      
083F   19                     ADD   hl,de   ; add addr
0840   22 F6 23               LD   (vPointer),hl   ; store address in setter
0843   16 00                  LD   d,0   
0845   5E                     LD   e,(hl)   
0846   B7                     OR   a   ; check data width again
0847   28 02                  JR   z,arrayIndex2   
0849   23                     INC   hl   
084A   56                     LD   d,(hl)   
084B                ARRAYINDEX2:      
084B   D5                     PUSH   de   
084C   DD E9                  JP   (ix)   
084E                             ; value _oldValue --            ; uses address in vPointer
084E                ASSIGN:      
084E   E1                     POP   hl   ; discard last accessed value
084F   E1                     POP   hl   ; hl = new value
0850                ASSIGN0:      
0850   EB                     EX   de,hl   ; de = new value
0851   2A F6 23               LD   hl,(vPointer)   
0854                ASSIGN1:      ; entry point from defineEnd
0854   73                     LD   (hl),e   
0855   3A E6 23               LD   a,(vDataWidth)   
0858   3D                     DEC   a   ; is it byte?
0859   28 02                  JR   z,assign2   
085B   23                     INC   hl   
085C   72                     LD   (hl),d   
085D                ASSIGN2:      
085D   DD E9                  JP   (ix)   
085F                             ; { block start
085F                             ; -- block*
085F                LBRACE:      
085F   CD B3 0B               CALL   parseBlock   
0862   DD E9                  JP   (ix)   
0864                RBRACE:      
0864                BLOCKEND:      
0864   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0867   FD 56 01               LD   d,(iy+1)   
086A   ED 53 02 24            LD   (vTemp1),de   
086E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0871   FD 56 07               LD   d,(iy+7)   
0874   ED 53 04 24            LD   (vTemp2),de   
0878   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
087B   FD 56 03               LD   d,(iy+3)   
087E   EB                     EX   de,hl   
087F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0882   FD 56 01               LD   d,(iy+1)   
0885   13                     INC   de   ; for carry flag <=
0886   B7                     OR   a   
0887   ED 52                  SBC   hl,de   
0889   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
088B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
088D   FD 5D                  LD   e,iyl   
088F   21 08 00               LD   hl,8   
0892   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0893   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0894   18 0C                  JR   blockEnd2   
0896                BLOCKEND1:      ; same scope
0896   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0899   FD 56 03               LD   d,(iy+3)   
089C   EB                     EX   de,hl   
089D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
089F   FD 5D                  LD   e,iyl   
08A1   EB                     EX   de,hl   
08A2                BLOCKEND2:      
08A2   44 4D                  LD   bc,hl   ; bc = hl = BP
08A4   B7                     OR   a   ; hl = BP - SP = count
08A5   ED 72                  SBC   hl,sp   
08A7   7D                     LD   a,l   
08A8   B4                     OR   h   
08A9   28 09                  JR   z,blockEnd3   
08AB   C5                     PUSH   bc   ; bc = count, hl = BP
08AC   44 4D                  LD   bc,hl   
08AE   E1                     POP   hl   
08AF   2B                     DEC   hl   ; hl = BP-1
08B0   1B                     DEC   de   ; de = args*-1
08B1   ED B8                  LDDR      
08B3   13                     INC   de   
08B4                BLOCKEND3:      
08B4   EB                     EX   de,hl   ; sp = de = new tos*
08B5   F9                     LD   sp,hl   
08B6   ED 4B 04 24            LD   bc,(vTemp2)   
08BA   FD 2A 02 24            LD   iy,(vTemp1)   
08BE   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
08C2   7B                     LD   a,e   ; check for NUL
08C3   B2                     OR   d   
08C4   20 02                  JR   nz,blockEnd4   
08C6   DD E9                  JP   (ix)   
08C8                BLOCKEND4:      
08C8   21 00 00               LD   hl,0   ; clear recur vector
08CB   22 F2 23               LD   (vRecur),hl   
08CE   C3 D6 09               JP   go1   ; execute de
08D1                             ; /br break from loop
08D1                             ; --
08D1                BREAK:       
08D1   E1                     POP   hl   ; hl = condition, break if false
08D2   7D                     LD   a,l   
08D3   B4                     OR   h   
08D4   28 02                  JR   z,break1   
08D6   DD E9                  JP   (ix)   
08D8                BREAK1:      
08D8   FD 5D                  LD   e,iyl   ; get block* just under stack frame
08DA   FD 54                  LD   d,iyh   
08DC   21 08 00               LD   hl,8   
08DF   19                     ADD   hl,de   
08E0   23                     INC   hl   
08E1   23                     INC   hl   
08E2   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
08E5   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
08E8   C3 64 08               JP   blockEnd   
08EB                TICK:        
08EB                CHAR:        
08EB   21 00 00               LD   hl,0   ; if "" is empty or null
08EE                CHAR1:       
08EE   03                     INC   bc   ; point to next char
08EF   0A                     LD   a,(bc)   
08F0   FE 27                  CP   "'"   ; ' is the terminator
08F2   28 09                  JR   z,char3   
08F4   FE 5C                  CP   $5c   ; \ is the escape
08F6   20 02                  JR   nz,char2   
08F8   03                     INC   bc   
08F9   0A                     LD   a,(bc)   
08FA                CHAR2:       
08FA   6F                     LD   l,a   
08FB   18 F1                  JR   char1   
08FD                CHAR3:       
08FD   E5                     PUSH   hl   
08FE   DD E9                  JP   (ix)   
0900                DIV:         
0900   D1                     POP   de   
0901   E1                     POP   hl   
0902   C5                     PUSH   bc   ; preserve the IP
0903   44 4D                  LD   bc,hl   
0905   CD AF 09               CALL   divide   
0908   EB                     EX   de,hl   
0909   ED 53 F8 23            LD   (vRemain),de   
090D   C1                     POP   bc   
090E   C3 13 02               JP   add3   
0911                             ; /bd buffer decimal
0911                             ; value --
0911                BUFFERDEC:      
0911   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0915   D9                     EXX      
0916   E1                     POP   hl   ; hl = value
0917   CD 2B 09               CALL   bufferDec0   
091A   D9                     EXX      ; de = buffer*' bc = IP
091B   3E 20                  LD   a," "   ; append space to buffer
091D   12                     LD   (de),a   
091E   1C                     INC   e   ; buffer*++, wraparound
091F   CC BF 0C               CALL   z,flushBuffer   
0922   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
0925   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0929   DD E9                  JP   (ix)   
092B                             ; hl = value
092B                             ; de' = buffer*
092B                             ; a, bc, de, hl destroyed
092B                BUFFERDEC0:      
092B   CB 7C                  BIT   7,h   
092D   28 0C                  JR   z,bufferDec1   
092F   D9                     EXX      
0930   3E 2D                  LD   a,"-"   
0932   12                     LD   (de),a   
0933   13                     INC   de   
0934   D9                     EXX      
0935   AF                     XOR   a   
0936   95                     SUB   l   
0937   6F                     LD   l,a   
0938   9F                     SBC   a,a   
0939   94                     SUB   h   
093A   67                     LD   h,a   
093B                BUFFERDEC1:      
093B   0E 00                  LD   c,0   ; leading zeros flag = false
093D   11 F0 D8               LD   de,-10000   
0940   CD 5B 09               CALL   bufferDec2   
0943   11 18 FC               LD   de,-1000   
0946   CD 5B 09               CALL   bufferDec2   
0949   11 9C FF               LD   de,-100   
094C   CD 5B 09               CALL   bufferDec2   
094F   1E F6                  LD   e,-10   
0951   CD 5B 09               CALL   bufferDec2   
0954   0C                     INC   c   ; flag = true for at least digit
0955   1E FF                  LD   e,-1   
0957   CD 5B 09               CALL   bufferDec2   
095A   C9                     RET      
095B                BUFFERDEC2:      
095B   06 2F                  LD   b,"0"-1   
095D                BUFFERDEC3:      
095D   04                     INC   b   
095E   19                     ADD   hl,de   
095F   38 FC                  JR   c,bufferDec3   
0961   ED 52                  SBC   hl,de   
0963   3E 30                  LD   a,"0"   
0965   B8                     CP   b   
0966   20 05                  JR   nz,bufferDec4   
0968   AF                     XOR   a   
0969   B1                     OR   c   
096A   C8                     RET   z   
096B   18 01                  JR   bufferDec5   
096D                BUFFERDEC4:      
096D   0C                     INC   c   
096E                BUFFERDEC5:      
096E   78                     LD   a,b   
096F   D9                     EXX      
0970   12                     LD   (de),a   
0971   1C                     INC   e   
0972   CC BF 0C               CALL   z,flushBuffer   
0975   D9                     EXX      
0976   C9                     RET      
0977                             ; /bh buffer hex
0977                             ; value --
0977                BUFFERHEX:      
0977   E1                     POP   hl   ; hl = value
0978   ED 5B EC 23            LD   de,(vBufPtr)   
097C   3E 24                  LD   a,"$"   ; # prefix
097E   12                     LD   (de),a   
097F   1C                     INC   e   ; buffer*++, wraparound
0980   CC BF 0C               CALL   z,flushBuffer   
0983   7C                     LD   a,h   
0984   CD 98 09               CALL   bufferHex1   
0987   7D                     LD   a,l   
0988   CD 98 09               CALL   bufferHex1   
098B   3E 20                  LD   a," "   ; append space to buffer
098D   12                     LD   (de),a   
098E   1C                     INC   e   ; buffer*++, wraparound
098F   CC BF 0C               CALL   z,flushBuffer   
0992   ED 53 EC 23            LD   (vBufPtr),de   
0996   DD E9                  JP   (ix)   
0998                BUFFERHEX1:      
0998   F5                     PUSH   af   
0999   1F                     RRA      
099A   1F                     RRA      
099B   1F                     RRA      
099C   1F                     RRA      
099D   CD A1 09               CALL   bufferHex2   
09A0   F1                     POP   af   
09A1                BUFFERHEX2:      
09A1   E6 0F                  AND   0x0F   
09A3   C6 90                  ADD   a,0x90   
09A5   27                     DAA      
09A6   CE 40                  ADC   a,0x40   
09A8   27                     DAA      
09A9   12                     LD   (de),a   
09AA   1C                     INC   e   ; buffer*++, wraparound
09AB   CC BF 0C               CALL   z,flushBuffer   
09AE   C9                     RET      
09AF                             ; division subroutine.
09AF                             ; bc: divisor, de: dividend, hl: remainder
09AF                DIVIDE:      
09AF   21 00 00               LD   hl,0   ; zero the remainder
09B2   3E 10                  LD   a,16   ; loop counter
09B4                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
09B4   CB 21                  SLA   c   
09B6   CB 10                  RL   b   
09B8   ED 6A                  ADC   hl,hl   
09BA   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
09BC   38 03                  JR   c,divide2   
09BE   0C                     INC   c   
09BF   18 01                  JR   divide3   
09C1                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
09C1   19                     ADD   hl,de   
09C2                DIVIDE3:      
09C2   3D                     DEC   a   
09C3   20 EF                  JR   nz,divide1   
09C5   50 59                  LD   de,bc   ; result from bc to de
09C7   C9                     RET      
09C8                FZ:          
09C8   21 00 21               LD   hl,STACK   
09CB   ED 72                  SBC   hl,sp   
09CD   CB 3C                  SRL   h   
09CF   CB 1D                  RR   l   
09D1   E5                     PUSH   hl   
09D2   C3 C7 04               JP   dotNumber_   
09D5                             ; execute a block of code which ends with }
09D5                             ; creates a root scope if BP == stack
09D5                             ; else uses outer scope
09D5                CARET:       
09D5                GO:          
09D5   D1                     POP   de   ; de = block*
09D6                GO1:         
09D6   7B                     LD   a,e   ; if block* == null, exit
09D7   B2                     OR   d   
09D8   20 02                  JR   nz,go2   
09DA   DD E9                  JP   (ix)   
09DC                GO2:         
09DC   1A                     LD   a,(de)   
09DD   FE 7B                  CP   "{"   
09DF   28 06                  JR   z,goBlock   
09E1   FE 28                  CP   "("   
09E3   C2 1A 0A               JP   nz,goFunc   
09E6   D5                     PUSH   de   ; push de just before stack frame
09E7                GOBLOCK:      
09E7   ED 53 02 24            LD   (vTemp1),de   ; save de
09EB   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09EE   FD 54                  LD   d,iyh   
09F0   FD 5D                  LD   e,iyl   
09F2   B7                     OR   a   ; if stack* == BP then this is the root_scope
09F3   ED 52                  SBC   hl,de   
09F5   ED 5B 02 24            LD   de,(vTemp1)   ; restore de
09F9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09FA   B4                     OR   h   
09FB   3E 00                  LD   a,0   
09FD   28 6A                  JR   z,goFunc8   
09FF   C5                     PUSH   bc   ; push IP
0A00   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A03   FD 46 05               LD   b,(iy+5)   
0A06   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A09   FD 66 03               LD   h,(iy+3)   
0A0C                GOBLOCK2:      
0A0C   C5                     PUSH   bc   ; arg_list*
0A0D   E5                     PUSH   hl   ; first_arg*
0A0E   FD E5                  PUSH   iy   ; push BP
0A10   FD 21 00 00            LD   iy,0   ; BP = SP
0A14   FD 39                  ADD   iy,sp   
0A16                GOBLOCK3:      
0A16   42 4B                  LD   bc,de   ; bc = de = block*-1
0A18   DD E9                  JP   (ix)   
0A1A                GOFUNC:      ; execute func
0A1A   EB                     EX   de,hl   ; hl = func*
0A1B   5E                     LD   e,(hl)   ; de = partial_array*
0A1C   23                     INC   hl   
0A1D   56                     LD   d,(hl)   
0A1E   23                     INC   hl   
0A1F   7B                     LD   a,e   ; if partial_array* == null skip
0A20   B2                     OR   d   
0A21   28 21                  JR   z,goFunc3   
0A23   ED 43 02 24            LD   (vTemp1),bc   
0A27   22 04 24               LD   (vTemp2),hl   ; save bc,hl
0A2A   EB                     EX   de,hl   ; hl = partial_array*
0A2B   2B                     DEC   hl   ; bc = count
0A2C   46                     LD   b,(hl)   
0A2D   2B                     DEC   hl   
0A2E   4E                     LD   c,(hl)   
0A2F   23                     INC   hl   ; hl = array data*
0A30   23                     INC   hl   
0A31   18 06                  JR   goFunc2   ; push each item on stack
0A33                GOFUNC1:      
0A33   5E                     LD   e,(hl)   ; de = partial item
0A34   23                     INC   hl   
0A35   56                     LD   d,(hl)   
0A36   23                     INC   hl   
0A37   D5                     PUSH   de   ; push on stack
0A38   0B                     DEC   bc   
0A39                GOFUNC2:      
0A39   79                     LD   a,c   ; if count != 0 then loop
0A3A   B0                     OR   b   
0A3B   20 F6                  JR   nz,goFunc1   
0A3D   ED 4B 02 24            LD   bc,(vTemp1)   ; restore bc
0A41   2A 04 24               LD   hl,(vTemp2)   ; restore hl
0A44                GOFUNC3:      
0A44   5E                     LD   e,(hl)   ; de = block*
0A45   23                     INC   hl   
0A46   56                     LD   d,(hl)   
0A47   23                     INC   hl   
0A48   ED 53 02 24            LD   (vTemp1),de   ; save block*
0A4C   5E                     LD   e,(hl)   ; de = arg_list*
0A4D   23                     INC   hl   
0A4E   56                     LD   d,(hl)   
0A4F   23                     INC   hl   
0A50   EB                     EX   de,hl   ; hl = arg_list*
0A51   ED 5B 02 24            LD   de,(vTemp1)   ; restore de = block*
0A55   7D                     LD   a,l   ; if arg_list* == null a = 0
0A56   B4                     OR   h   
0A57   20 03                  JR   nz,goFunc4   
0A59   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A5A   18 0D                  JR   goFunc8   
0A5C                GOFUNC4:      ; allocate locals
0A5C   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A5D   18 03                  JR   goFunc6   
0A5F                GOFUNC5:      ; loop
0A5F   3B                     DEC   sp   
0A60   3B                     DEC   sp   
0A61   3D                     DEC   a   
0A62                GOFUNC6:      
0A62   B7                     OR   a   
0A63   20 FA                  JR   nz,goFunc5   ; end loop
0A65                GOFUNC7:      
0A65   23                     INC   hl   ; a = num_args* x 2
0A66   7E                     LD   a,(hl)   
0A67   2B                     DEC   hl   
0A68   87                     ADD   a,a   ; a *= 2
0A69                GOFUNC8:      
0A69   C5                     PUSH   bc   ; push IP
0A6A   44 4D                  LD   bc,hl   
0A6C   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A6F   85                     ADD   a,l   
0A70   6F                     LD   l,a   
0A71   39                     ADD   hl,sp   
0A72   18 98                  JR   goBlock2   
0A74                DOLLAR:      
0A74                HEXNUM:      
0A74   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A77                HEXNUM1:      
0A77   03                     INC   bc   
0A78   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A79   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A7B   28 02                  JR   z,hexnum2   ; no a decimal
0A7D   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A7F                HEXNUM2:      
0A7F   D6 30                  SUB   $30   ; form decimal digit
0A81   DA 11 0B               JP   c,num2   
0A84   FE 10                  CP   $0F+1   
0A86   D2 11 0B               JP   nc,num2   
0A89   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A8A   29                     ADD   hl,hl   ; 4X
0A8B   29                     ADD   hl,hl   ; 8X
0A8C   29                     ADD   hl,hl   ; 16X
0A8D   85                     ADD   a,l   ; add into bottom of hl
0A8E   6F                     LD   l,a   
0A8F   18 E6                  JR   hexnum1   
0A91                UPCASE:      
0A91   0A                     LD   a,(bc)   ; a = identifier char
0A92   D6 41                  SUB   "A"   ; "A" = 0
0A94   18 05                  JR   ident1   
0A96                LOWCASE:      
0A96   0A                     LD   a,(bc)   
0A97   D6 61                  SUB   "a"   
0A99   C6 1A                  ADD   a,26   
0A9B                IDENT1:      
0A9B   87                     ADD   a,a   ; l = a * 2
0A9C   6F                     LD   l,a   
0A9D   26 23                  LD   h,msb(vars)   
0A9F   22 F6 23               LD   (vPointer),hl   ; store address in setter
0AA2   5E                     LD   e,(hl)   
0AA3   23                     INC   hl   
0AA4   56                     LD   d,(hl)   
0AA5   D5                     PUSH   de   
0AA6   DD E9                  JP   (ix)   
0AA8                             ; if
0AA8                             ; condition then -- value
0AA8                QUESTION:      
0AA8                IF:          
0AA8   03                     INC   bc   
0AA9   0A                     LD   a,(bc)   
0AAA   FE 3F                  CP   "?"   
0AAC   28 06                  JR   z,ifte   
0AAE   0B                     DEC   bc   
0AAF   11 00 00               LD   de,NUL   ; NUL pointer for else
0AB2   18 01                  JR   ifte1   
0AB4                             ; ifte
0AB4                             ; condition then else -- value
0AB4                IFTE:        
0AB4   D1                     POP   de   ; de = else
0AB5                IFTE1:       
0AB5   E1                     POP   hl   ; hl = then
0AB6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AB7   7C                     LD   a,h   
0AB8   B5                     OR   l   
0AB9   E1                     POP   hl   ; hl = then
0ABA   CA D6 09               JP   z,go1   ; if z de = else
0ABD   EB                     EX   de,hl   ; condition = false, de = then
0ABE   C3 D6 09               JP   go1   
0AC1                KEY:         
0AC1   CD 81 00               CALL   getchar   
0AC4   26 00                  LD   h,0   
0AC6   6F                     LD   l,a   
0AC7   E5                     PUSH   hl   
0AC8   DD E9                  JP   (ix)   
0ACA                             ; Z80 port output
0ACA                             ; value port --
0ACA                OUTPUT:      
0ACA   E1                     POP   hl   
0ACB   59                     LD   e,c   ; save IP
0ACC   4D                     LD   c,l   
0ACD   E1                     POP   hl   
0ACE   ED 69                  OUT   (c),l   
0AD0   4B                     LD   c,e   ; restore IP
0AD1   DD E9                  JP   (ix)   
0AD3                STAR:        
0AD3                MUL:         
0AD3   D1                     POP   de   ; get first value
0AD4   E1                     POP   hl   
0AD5                MUL2:        
0AD5   C5                     PUSH   bc   ; Preserve the IP
0AD6   44 4D                  LD   bc,hl   ; bc = 2nd value
0AD8   21 00 00               LD   hl,0   
0ADB   3E 10                  LD   a,16   
0ADD                MUL3:        
0ADD   29                     ADD   hl,hl   
0ADE   CB 13                  RL   e   
0AE0   CB 12                  RL   d   
0AE2   30 04                  JR   nc,$+6   
0AE4   09                     ADD   hl,bc   
0AE5   30 01                  JR   nc,$+3   
0AE7   13                     INC   de   
0AE8   3D                     DEC   a   
0AE9   20 F2                  JR   nz,mul3   
0AEB   C1                     POP   bc   ; Restore the IP
0AEC   C3 13 02               JP   add3   
0AEF                NUM:         
0AEF   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0AF2   0A                     LD   a,(bc)   ; Get numeral or -
0AF3   FE 2D                  CP   "-"   
0AF5   20 01                  JR   nz,num0   
0AF7   03                     INC   bc   ; move to next char, no flags affected
0AF8                NUM0:        
0AF8   08                     EX   af,af'   ; save zero flag = 0 for later
0AF9                NUM1:        
0AF9   0A                     LD   a,(bc)   ; read digit
0AFA   D6 30                  SUB   "0"   ; less than 0?
0AFC   38 13                  JR   c,num2   ; not a digit, exit loop
0AFE   FE 0A                  CP   10   ; greater that 9?
0B00   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B02   03                     INC   bc   ; inc IP
0B03   54 5D                  LD   de,hl   ; multiply hl * 10
0B05   29                     ADD   hl,hl   
0B06   29                     ADD   hl,hl   
0B07   19                     ADD   hl,de   
0B08   29                     ADD   hl,hl   
0B09   85                     ADD   a,l   ; add digit in a to hl
0B0A   6F                     LD   l,a   
0B0B   3E 00                  LD   a,0   
0B0D   8C                     ADC   a,h   
0B0E   67                     LD   h,a   
0B0F   18 E8                  JR   num1   
0B11                NUM2:        
0B11   0B                     DEC   bc   
0B12   08                     EX   af,af'   ; restore zero flag
0B13   20 07                  JR   nz,num3   
0B15   EB                     EX   de,hl   ; negate the value of hl
0B16   21 00 00               LD   hl,0   
0B19   B7                     OR   a   ; jump to sub2
0B1A   ED 52                  SBC   hl,de   
0B1C                NUM3:        
0B1C   E5                     PUSH   hl   ; Put the number on the stack
0B1D   DD E9                  JP   (ix)   ; and process the next character
0B1F                RPAREN:      
0B1F   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B22   FD 46 09               LD   b,(iy+9)   
0B25   DD E9                  JP   (ix)   
0B27                             ; shiftLeft
0B27                             ; value count -- value2          shift left count places
0B27                SHIFTLEFT:      
0B27   50 59                  LD   de,bc   ; save IP
0B29   C1                     POP   bc   ; bc = count
0B2A   41                     LD   b,c   ; b = loop counter
0B2B   E1                     POP   hl   
0B2C   04                     INC   b   ; test for counter=0 case
0B2D   18 01                  JR   shiftLeft2   
0B2F                SHIFTLEFT1:      
0B2F   29                     ADD   hl,hl   ; left shift hl
0B30                SHIFTLEFT2:      
0B30   10 FD                  DJNZ   shiftLeft1   
0B32   E5                     PUSH   hl   
0B33   42 4B                  LD   bc,de   ; restore IP
0B35   DD E9                  JP   (ix)   
0B37                             ; shiftRight
0B37                             ; value count -- value2          shift left count places
0B37                SHIFTRIGHT:      
0B37   50 59                  LD   de,bc   ; save IP
0B39   C1                     POP   bc   ; bc = count
0B3A   41                     LD   b,c   ; b = loop counter
0B3B   E1                     POP   hl   
0B3C   04                     INC   b   ; test for counter=0 case
0B3D   18 04                  JR   shiftRight2   
0B3F                SHIFTRIGHT1:      
0B3F   CB 3C                  SRL   h   ; right shift hl
0B41   CB 1D                  RR   l   
0B43                SHIFTRIGHT2:      
0B43   10 FA                  DJNZ   shiftRight1   
0B45   E5                     PUSH   hl   
0B46   42 4B                  LD   bc,de   ; restore IP
0B48   DD E9                  JP   (ix)   
0B4A                             ; string
0B4A                             ; -- ptr                        ; points to start of string chars,
0B4A                             ; length is stored at start - 2 bytes
0B4A                DQUOTE:      
0B4A                STRING:      
0B4A   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B4D   23                     INC   hl   ; skip length field to start
0B4E   23                     INC   hl   
0B4F   E5                     PUSH   hl   ; save start of string
0B50   03                     INC   bc   ; point to next char
0B51   18 03                  JR   string2   
0B53                STRING1:      
0B53   77                     LD   (hl),a   
0B54   23                     INC   hl   ; increase count
0B55   03                     INC   bc   ; point to next char
0B56                STRING2:      
0B56   0A                     LD   a,(bc)   
0B57   FE 22                  CP   DQ   ; " is the string terminator
0B59   28 04                  JR   z,string3   
0B5B   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B5D   20 F4                  JR   nz,string1   
0B5F                STRING3:      
0B5F   AF                     XOR   a   ; write NUL to terminate string
0B60   77                     LD   (hl),a   ; hl = end of string
0B61   23                     INC   hl   
0B62   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B65   2B                     DEC   hl   ; hl = end of string without terminator
0B66   D1                     POP   de   ; de = start of string
0B67   D5                     PUSH   de   ; return start of string
0B68   B7                     OR   a   ; hl = length bytes, de = start of string
0B69   ED 52                  SBC   hl,de   
0B6B   EB                     EX   de,hl   
0B6C   2B                     DEC   hl   ; write length bytes to length field at start - 2
0B6D   72                     LD   (hl),d   
0B6E   2B                     DEC   hl   
0B6F   73                     LD   (hl),e   
0B70   DD E9                  JP   (ix)   
0B72                PRINTCHARS1:      
0B72   1A                     LD   a,(de)   ; print char at char*
0B73   CD 85 00               CALL   putchar   
0B76   13                     INC   de   ; char*++
0B77   2B                     DEC   hl   ; count--
0B78                PRINTCHARS2:      
0B78   7D                     LD   a,l   ; count == 0?
0B79   B4                     OR   h   
0B7A   C8                     RET   z   
0B7B   18 F5                  JR   printChars1   ; if not loop
0B7D                             ; 
0B7D                             ;*******************************************************************
0B7D                             ; general routines
0B7D                             ;*******************************************************************
0B7D                             ; arg_list - parses arg_list e.g. ab:c
0B7D                             ; -- arg_list*
0B7D                PARSEARGS:      
0B7D   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0B80   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B83   E5                     PUSH   hl   ; save start of arg_list
0B84   23                     INC   hl   ; skip length fields to start of string
0B85   23                     INC   hl   
0B86   03                     INC   bc   ; point to next char
0B87                PARSEARGS1:      
0B87   0A                     LD   a,(bc)   
0B88   FE 3A                  CP   ":"   ; ":" switches from args to locals
0B8A   20 03                  JR   nz,parseArgs1a   
0B8C   14                     INC   d   ; non zero value local count acts as flag
0B8D   18 10                  JR   parseArgs3   
0B8F                PARSEARGS1A:      
0B8F   FE 61                  CP   "a"   ; < "a" terminates arg_list
0B91   38 0F                  JR   c,parseArgs4   
0B93   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0B95   30 0B                  JR   nc,parseArgs4   
0B97                PARSEARGS2:      
0B97   77                     LD   (hl),a   
0B98   23                     INC   hl   
0B99   1C                     INC   e   ; increase arg count
0B9A   AF                     XOR   a   
0B9B   B2                     OR   d   
0B9C   28 01                  JR   z,parseArgs3   
0B9E   14                     INC   d   ; if d > 0 increase local count
0B9F                PARSEARGS3:      
0B9F   03                     INC   bc   ; point to next char
0BA0   18 E5                  JR   parseArgs1   
0BA2                PARSEARGS4:      
0BA2   0B                     DEC   bc   
0BA3   AF                     XOR   a   
0BA4   B2                     OR   d   
0BA5   28 01                  JR   z,parseArgs5   
0BA7   15                     DEC   d   ; remove initial inc
0BA8                PARSEARGS5:      
0BA8   23                     INC   hl   
0BA9   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BAC   E1                     POP   hl   ; hl = start of arg_list
0BAD   72                     LD   (hl),d   ; write number of locals at start - 1
0BAE   23                     INC   hl   
0BAF   73                     LD   (hl),e   ; write number of args + locals at start - 2
0BB0   2B                     DEC   hl   
0BB1   E3                     EX   (sp),hl   
0BB2   E9                     JP   (hl)   
0BB3                             ; create block: parses block e.g. 00bbIC4uLi4g
0BB3                             ; -- block*
0BB3                PARSEBLOCK:      
0BB3   C5                     PUSH   bc   ; return pointer to first { of block
0BB4   03                     INC   bc   
0BB5   16 01                  LD   d,1   ; nesting: count first parenthesis
0BB7                PARSEBLOCK1:      ; Skip to end of definition
0BB7   0A                     LD   a,(bc)   ; Get the next character
0BB8   03                     INC   bc   ; Point to next character
0BB9   FE 21                  CP   " " + 1   ; ignore whitespace
0BBB   38 FA                  JR   c,parseBlock1   
0BBD   FE 29                  CP   ")"   
0BBF   28 2D                  JR   z,parseBlock4   
0BC1   FE 7D                  CP   "}"   
0BC3   28 29                  JR   z,parseBlock4   
0BC5   FE 5D                  CP   "]"   
0BC7   28 25                  JR   z,parseBlock4   
0BC9   FE 28                  CP   "("   
0BCB   28 16                  JR   z,parseBlock2   
0BCD   FE 7B                  CP   "{"   
0BCF   28 12                  JR   z,parseBlock2   
0BD1   FE 5B                  CP   "["   
0BD3   28 0E                  JR   z,parseBlock2   
0BD5   FE 27                  CP   "'"   
0BD7   28 0D                  JR   z,parseBlock3   
0BD9   FE 60                  CP   "`"   
0BDB   28 09                  JR   z,parseBlock3   
0BDD   FE 22                  CP   DQ   
0BDF   28 05                  JR   z,parseBlock3   
0BE1   18 D4                  JR   parseBlock1   
0BE3                PARSEBLOCK2:      
0BE3   14                     INC   d   
0BE4   18 D1                  JR   parseBlock1   
0BE6                PARSEBLOCK3:      
0BE6   3E 80                  LD   a,$80   
0BE8   AA                     XOR   d   
0BE9   57                     LD   d,a   
0BEA   20 CB                  JR   nz,parseBlock1   
0BEC   18 03                  JR   parseBlock5   
0BEE                PARSEBLOCK4:      
0BEE   15                     DEC   d   
0BEF   20 C6                  JR   nz,parseBlock1   ; get the next element
0BF1                PARSEBLOCK5:      
0BF1   60 69                  LD   hl,bc   ; hl = IP
0BF3   11 20 24               LD   de,HEAP   ; is IP pointing to object in heap
0BF6   B7                     OR   a   ; IP - HEAP
0BF7   ED 52                  SBC   hl,de   
0BF9   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0BFB   28 1C                  JR   z,parseBlock6   
0BFD   60 69                  LD   hl,bc   ; hl = IP
0BFF   D1                     POP   de   ; de = block*
0C00   ED 43 02 24            LD   (vTemp1),bc   ; save IP
0C04   B7                     OR   a   ; bc = size
0C05   ED 52                  SBC   hl,de   
0C07   44 4D                  LD   bc,hl   
0C09   EB                     EX   de,hl   ; hl = block* de = heap*
0C0A   ED 5B F0 23            LD   de,(vHeapPtr)   
0C0E   D5                     PUSH   de   ; return hblock*
0C0F   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0C11   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0C15   ED 4B 02 24            LD   bc,(vTemp1)   ; restore IP
0C19                PARSEBLOCK6:      
0C19   0B                     DEC   bc   ; balanced, exit
0C1A   E1                     POP   hl   ; hl = block*
0C1B   E3                     EX   (sp),hl   ; return to caller
0C1C   E9                     JP   (hl)   
0C1D                             ; create function
0C1D                             ; arg_list* block* -- func*
0C1D                CREATEFUNC:      
0C1D   E1                     POP   hl   ; save retrn address
0C1E   22 06 24               LD   (vTemp3),hl   
0C21   ED 43 02 24            LD   (vTemp1),bc   ; save IP
0C25   E1                     POP   hl   ; hl = block*
0C26   22 04 24               LD   (vTemp2),hl   ; save block*
0C29   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0C2C   FD 56 05               LD   d,(iy+5)   
0C2F   7B                     LD   a,e   ; if arg_list == null then make a func
0C30   B2                     OR   d   
0C31   20 09                  JR   nz,createFunc0   
0C33   21 00 00               LD   hl,0   ; partial_array = null
0C36   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0C3A   18 65                  JR   createFunc5   
0C3C                CREATEFUNC0:      
0C3C   E1                     POP   hl   ; hl = inner_arg_list*
0C3D   E5                     PUSH   hl   ; save inner_arg_list
0C3E   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0C42   7E                     LD   a,(hl)   ; compile inner_num_locals
0C43   4F                     LD   c,a   ; b = inner_num_locals
0C44   12                     LD   (de),a   
0C45   23                     INC   hl   
0C46   13                     INC   de   
0C47   7E                     LD   a,(hl)   ; compile inner_length
0C48   12                     LD   (de),a   
0C49   91                     SUB   c   ; a = inner_num args
0C4A   23                     INC   hl   
0C4B   13                     INC   de   
0C4C   B7                     OR   a   ; compile args if inner_length > 0
0C4D   28 05                  JR   z,createFunc1   
0C4F   4F                     LD   c,a   ; bc = a
0C50   06 00                  LD   b,0   
0C52   ED B0                  LDIR      
0C54                CREATEFUNC1:      
0C54   EB                     EX   de,hl   ; hl = outer_arg_list
0C55   FD 5E 04               LD   e,(iy+4)   
0C58   FD 56 05               LD   d,(iy+5)   
0C5B   EB                     EX   de,hl   
0C5C   23                     INC   hl   ; a = outer_length
0C5D   7E                     LD   a,(hl)   
0C5E   23                     INC   hl   
0C5F   B7                     OR   a   
0C60   28 05                  JR   z,createFunc2   
0C62   4F                     LD   c,a   
0C63   06 00                  LD   b,0   
0C65   ED B0                  LDIR      ; append outer_args
0C67                CREATEFUNC2:      ; a = outer_length
0C67   47                     LD   b,a   ; b = a = outer_length
0C68   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0C6B   23                     INC   hl   
0C6C   7E                     LD   a,(hl)   ; add outer_length to new length
0C6D   80                     ADD   a,b   
0C6E   77                     LD   (hl),a   
0C6F   2B                     DEC   hl   
0C70   78                     LD   a,b   ; save outer_length in a'
0C71   08                     EX   af,af'   
0C72   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0C73   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0C74   B7                     OR   a   
0C75   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0C77   4F                     LD   c,a   ; c = inner_num_locals
0C78   06 00                  LD   b,0   ; bc = inner_num_locals
0C7A   23                     INC   hl   ; a = inner_length
0C7B   7E                     LD   a,(hl)   
0C7C   91                     SUB   c   ; a = inner_num_args
0C7D   23                     INC   hl   ; hl = inner_arg_chars
0C7E   85                     ADD   a,l   ; hl += a
0C7F   6F                     LD   l,a   
0C80   3E 00                  LD   a,0   
0C82   84                     ADD   a,h   
0C83   67                     LD   h,a   
0C84   ED B0                  LDIR      ; append inner_locals
0C86                CREATEFUNC2A:      
0C86   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0C87   12                     LD   (de),a   ; compile partial_array length field
0C88   13                     INC   de   
0C89   AF                     XOR   a   
0C8A   12                     LD   (de),a   
0C8B   13                     INC   de   
0C8C   D5                     PUSH   de   ; push partial_array*
0C8D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0C8E   FD 5E 02               LD   e,(iy+2)   
0C91   FD 56 03               LD   d,(iy+3)   
0C94   EB                     EX   de,hl   
0C95                CREATEFUNC3:      
0C95   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0C96   4E                     LD   c,(hl)   
0C97   2B                     DEC   hl   
0C98   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0C99   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0C9A   13                     INC   de   
0C9B   79                     LD   a,c   
0C9C   12                     LD   (de),a   
0C9D   13                     INC   de   
0C9E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0CA0                CREATEFUNC4:      
0CA0   E1                     POP   hl   ; hl = partial_array*
0CA1                CREATEFUNC5:      
0CA1   C1                     POP   bc   ; bc = new_arg_list*
0CA2   D5                     PUSH   de   ; return new func*
0CA3   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0CA4   73                     LD   (hl),e   ; compile partial_array* to func
0CA5   23                     INC   hl   
0CA6   72                     LD   (hl),d   
0CA7   23                     INC   hl   
0CA8   ED 5B 04 24            LD   de,(vTemp2)   ; de = block*
0CAC   73                     LD   (hl),e   ; compile block* to func
0CAD   23                     INC   hl   
0CAE   72                     LD   (hl),d   
0CAF   23                     INC   hl   
0CB0   71                     LD   (hl),c   ; compile new_arg_list* to func
0CB1   23                     INC   hl   
0CB2   70                     LD   (hl),b   
0CB3   23                     INC   hl   
0CB4   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0CB7   ED 4B 02 24            LD   bc,(vTemp1)   ; restore IP
0CBB   2A 06 24               LD   hl,(vTemp3)   ; jump to return address
0CBE   E9                     JP   (hl)   
0CBF                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0CBF                FLUSHBUFFER:      
0CBF   F5                     PUSH   af   
0CC0   D5                     PUSH   de   
0CC1   E5                     PUSH   hl   
0CC2   2A EC 23               LD   hl,(vBufPtr)   
0CC5   11 00 22               LD   de,BUF   
0CC8   ED 53 EC 23            LD   (vBufPtr),de   
0CCC   B7                     OR   a   
0CCD   ED 52                  SBC   hl,de   
0CCF   CD 78 0B               CALL   printChars2   
0CD2   E1                     POP   hl   
0CD3   D1                     POP   de   
0CD4   F1                     POP   af   
0CD5   C9                     RET      
0CD6                COMMANDTABLE:      
0CD6   03                     INC   bc   
0CD7   0A                     LD   a,(bc)   
0CD8   FE 7B                  CP   "z"+1   
0CDA   30 09                  JR   nc,commandTable2   
0CDC   D6 61                  SUB   "a"   
0CDE   38 05                  JR   c,commandTable2   
0CE0                COMMANDTABLE1:      
0CE0   E1                     POP   hl   
0CE1   85                     ADD   a,l   
0CE2   6F                     LD   l,a   
0CE3   6E                     LD   l,(hl)   ; must have the same msb as the table
0CE4   E9                     JP   (hl)   
0CE5                COMMANDTABLE2:      
0CE5   3E 1A                  LD   a,26   
0CE7   0B                     DEC   bc   
0CE8   18 F6                  JR   commandTable1   
0CEA                             ; followed by a table
0CEA                             ; db char
0CEA                             ; db lsb(addr)
0CEA                             ; the final item must have char == NUL
0CEA                JUMPTABLE:      
0CEA   E1                     POP   hl   
0CEB   03                     INC   bc   
0CEC                JUMPTABLE0:      
0CEC   AF                     XOR   a   
0CED   BE                     CP   (hl)   
0CEE   28 0B                  JR   z,jumpTable2   
0CF0   0A                     LD   a,(bc)   
0CF1   BE                     CP   (hl)   
0CF2   28 04                  JR   z,jumpTable1   
0CF4   23                     INC   hl   
0CF5   23                     INC   hl   
0CF6   18 F4                  JR   jumpTable0   
0CF8                JUMPTABLE1:      
0CF8   23                     INC   hl   
0CF9   6E                     LD   l,(hl)   ; must have the same msb as the table
0CFA   E9                     JP   (hl)   
0CFB                JUMPTABLE2:      
0CFB   0B                     DEC   bc   
0CFC   23                     INC   hl   
0CFD   E9                     JP   (hl)   
0CFE                PRTSTR0:      
0CFE   CD 85 00               CALL   putchar   
0D01   23                     INC   hl   
0D02                PRTSTR:      
0D02   7E                     LD   a,(hl)   
0D03   B7                     OR   a   
0D04   20 F8                  JR   nz,prtstr0   
0D06   C9                     RET      
0D07                             ; **************************************************************************
0D07                             ; calculate nesting value
0D07                             ; a is char to be tested,
0D07                             ; e is the nesting value (initially 0)
0D07                             ; e is increased by ( and [
0D07                             ; e is decreased by ) and ]
0D07                             ; e has its bit 7 toggled by `
0D07                             ; limited to 127 levels
0D07                             ; **************************************************************************
0D07                NESTING:      
0D07   FE 22                  CP   DQ   ; quote char
0D09   28 06                  JR   z,nesting0   
0D0B   FE 60                  CP   "`"   ; quote char
0D0D   28 02                  JR   z,nesting0   
0D0F   18 0A                  JR   nesting1   
0D11                NESTING0:      
0D11   CB 7B                  BIT   7,e   
0D13   28 03                  JR   z,nesting1a   
0D15   CB BB                  RES   7,e   
0D17   C9                     RET      
0D18                NESTING1A:      
0D18   CB FB                  SET   7,e   
0D1A   C9                     RET      
0D1B                NESTING1:      
0D1B   CB 7B                  BIT   7,e   
0D1D   C0                     RET   nz   
0D1E   FE 7B                  CP   "{"   
0D20   28 08                  JR   z,nesting2   
0D22   FE 5B                  CP   "["   
0D24   28 04                  JR   z,nesting2   
0D26   FE 28                  CP   "("   
0D28   20 02                  JR   nz,nesting3   
0D2A                NESTING2:      
0D2A   1C                     INC   e   
0D2B   C9                     RET      
0D2C                NESTING3:      
0D2C   FE 7D                  CP   "}"   
0D2E   28 07                  JR   z,nesting4   
0D30   FE 5D                  CP   "]"   
0D32   28 03                  JR   z,nesting4   
0D34   FE 29                  CP   ")"   
0D36   C0                     RET   nz   
0D37                NESTING4:      
0D37   1D                     DEC   e   
0D38   C9                     RET      
0D39                PROMPT:      
0D39   CD 49 0D               CALL   printStr   
0D3C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0D41   C9                     RET      
0D42                CRLF:        
0D42   CD 49 0D               CALL   printStr   
0D45   0D 0A 00               .CSTR   "\r\n"   
0D48   C9                     RET      
0D49                             ; prints a null teminated string
0D49                             ; the string should be immediately following the call
0D49                PRINTSTR:      
0D49   E3                     EX   (sp),hl   ; swap			
0D4A   CD 02 0D               CALL   prtstr   
0D4D   23                     INC   hl   ; inc past NUL
0D4E   E3                     EX   (sp),hl   ; put it back	
0D4F   C9                     RET      
0D50                INIT:        
0D50   21 F0 01               LD   hl,titleStr   
0D53   11 0C 24               LD   de,titleBuf   
0D56   06 14                  LD   b,20   
0D58                INIT1:       
0D58   1A                     LD   a,(de)   
0D59   BE                     CP   (hl)   
0D5A   20 17                  JR   nz,coldBoot0   
0D5C   13                     INC   de   
0D5D   23                     INC   hl   
0D5E   10 F8                  DJNZ   init1   
0D60                WARMINIT:      
0D60   ED 4B FA 23            LD   bc,(vSavedIP)   ; restore IP
0D64   ED 7B FC 23            LD   sp,(vSavedSP)   ; restore SP
0D68   DD 2A FE 23            LD   ix,(vSavedNext)   ; restore Next
0D6C   FD 2A 00 24            LD   iy,(vSavedBP)   ; restore BP
0D70   C3 AA 0D               JP   start1   
0D73                COLDBOOT0:      
0D73   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0D76   11 0C 24               LD   de,titleBuf   
0D79   06 14                  LD   b,20   
0D7B   ED B0                  LDIR      
0D7D                COLDINIT:      
0D7D   21 DE 01               LD   hl,isysVars   
0D80   11 E6 23               LD   de,sysVars   
0D83   01 10 00               LD   bc,8 * 2   
0D86   ED B0                  LDIR      
0D88   21 00 23               LD   hl,vars   ; 52 vars LO HI
0D8B   06 34                  LD   b,26*2   
0D8D   AF                     XOR   a   
0D8E                COLDBOOT1:      
0D8E   77                     LD   (hl),a   
0D8F   23                     INC   hl   
0D90   10 FC                  DJNZ   coldBoot1   
0D92   DD 2A EE 23            LD   ix,(vNext)   
0D96   FD 21 00 21            LD   iy,STACK   
0D9A   C9                     RET      
0D9B                COLDSTART:      
0D9B   31 00 21               LD   sp,STACK   
0D9E   CD 73 0D               CALL   coldBoot0   
0DA1   C3 AA 0D               JP   start1   
0DA4                START:       
0DA4   31 00 21               LD   sp,STACK   ; start Monty
0DA7   CD 50 0D               CALL   init   ; setups
0DAA                START1:      
0DAA   21 0C 24               LD   hl,titleBuf   
0DAD   CD 02 0D               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0DB0                INTERPRET:      
0DB0   CD BF 0C               CALL   flushBuffer   
0DB3   CD 39 0D               CALL   prompt   
0DB6   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DB9   21 00 21               LD   hl,TIB   
0DBC   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DBF                INTERPRET2:      ; calculate nesting
0DBF   1E 00                  LD   e,0   ; initilize nesting value
0DC1   C5                     PUSH   bc   ; save offset into TIB,
0DC2                             ; bc is also the count of chars in TIB
0DC2   21 00 21               LD   hl,TIB   ; hl is start of TIB
0DC5   18 0B                  JR   interpret4   
0DC7                INTERPRET3:      
0DC7   3E 33                  LD   a,"3"   
0DC9   CD 85 00               CALL   putchar   
0DCC   7E                     LD   a,(hl)   ; a = char in TIB
0DCD   23                     INC   hl   ; inc pointer into TIB
0DCE   0B                     DEC   bc   ; dec count of chars in TIB
0DCF   CD 07 0D               CALL   nesting   ; update nesting value
0DD2                INTERPRET4:      
0DD2   79                     LD   a,c   ; is count zero?
0DD3   B0                     OR   b   
0DD4   20 F1                  JR   nz,interpret3   ; if not loop
0DD6   C1                     POP   bc   ; restore offset into TIB
0DD7                INTERPRET5:      
0DD7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0DDA   FE 20                  CP   $20   ; compare to space
0DDC   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DDE   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DE0                             ; ???? NEEDED?
0DE0   28 36                  JR   z,interpret8   
0DE2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DE4   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0DE6   FE 05                  CP   CTRL_E   
0DE8   CA 76 0E               JP   z,edit_   
0DEB   FE 08                  CP   CTRL_H   
0DED   CA 66 0E               JP   z,backSpace_   
0DF0   FE 0A                  CP   CTRL_J   
0DF2   CA 8E 0E               JP   z,reEdit_   
0DF5                             ; cp CTRL_S
0DF5                             ; jp z,printStack_
0DF5                             ; DB     lsb(edit_)       ; ENQ ^E  5
0DF5                             ; DB     lsb(reedit_)     ; LF  ^J 10
0DF5                             ; DB     lsb(list_)       ; FF  ^L 12
0DF5                             ; DB     lsb(printStack_) ; DLE ^P 16
0DF5                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0DF5                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0DF5                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0DF5                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0DF5                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0DF5                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0DF5                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0DF5                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0DF5                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0DF5                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0DF5                INTERPRET5A:      
0DF5                             ; ld (vTIBPtr),bc
0DF5                             ; ld bc,(vTIBPtr)
0DF5   18 C8                  JR   interpret2   
0DF7                INTERPRET6:      
0DF7   21 00 21               LD   hl,TIB   
0DFA   09                     ADD   hl,bc   
0DFB   77                     LD   (hl),a   ; store the character in textbuf
0DFC   03                     INC   bc   
0DFD   CD 85 00               CALL   putchar   ; echo character to screen
0E00   CD 07 0D               CALL   nesting   
0E03   18 D2                  JR   interpret5   ; wait for next character
0E05                INTERPRET7:      
0E05   21 00 21               LD   hl,TIB   
0E08   09                     ADD   hl,bc   
0E09   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E0B   23                     INC   hl   
0E0C   36 0A                  LD   (hl),"\n"   
0E0E   23                     INC   hl   
0E0F   03                     INC   bc   
0E10   03                     INC   bc   
0E11   CD 42 0D               CALL   crlf   ; echo character to screen
0E14   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0E15   B7                     OR   a   
0E16   20 BF                  JR   nz,interpret5   
0E18                INTERPRET8:      
0E18   21 00 21               LD   hl,TIB   
0E1B   09                     ADD   hl,bc   
0E1C   22 EA 23               LD   (vTIBPtr),hl   
0E1F   01 00 21               LD   bc,TIB   
0E22   ED 43 FA 23            LD   (vSavedIP),bc   ; save IP
0E26   ED 73 FC 23            LD   (vSavedSP),sp   ; save SP
0E2A   DD 22 FE 23            LD   (vSavedNext),ix   ; save Next
0E2E   FD 22 00 24            LD   (vSavedBP),iy   ; save BP
0E32   0B                     DEC   bc   
0E33                NEXT:        
0E33   03                     INC   bc   ; Increment the IP
0E34   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E35   FE 20                  CP   " "   ; whitespace?
0E37   28 FA                  JR   z,next   ; space? ignore
0E39   38 08                  JR   c,next1   
0E3B   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0E3D   6F                     LD   l,a   ; index into table
0E3E   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0E40   6E                     LD   l,(hl)   ; get low jump address
0E41   24                     INC   h   ; Load h with page after opcodes
0E42   E9                     JP   (hl)   ; Jump to routine
0E43                NEXT1:       
0E43   FE 00                  CP   NUL   ; end of input string?
0E45   28 03                  JR   z,exit   
0E47   C3 B0 0D               JP   interpret   ; no, other whitespace, macros?
0E4A                EXIT:        
0E4A   03                     INC   bc   
0E4B   60 69                  LD   hl,bc   
0E4D   E9                     JP   (hl)   
0E4E                RUN:         
0E4E   C1                     POP   bc   
0E4F   0B                     DEC   bc   
0E50   DD E9                  JP   (ix)   
0E52                ERROR:       
0E52   E5                     PUSH   hl   
0E53   CD 4E 0E               CALL   run   
0E56   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0E63   C3 B0 0D               JP   interpret   
0E66                BACKSPACE_:      
0E66   79                     LD   a,c   
0E67   B0                     OR   b   
0E68   CA BF 0D               JP   z,interpret2   
0E6B   0B                     DEC   bc   
0E6C   CD 49 0D               CALL   printStr   
0E6F   08 20 08 00            .CSTR   "\b \b"   
0E73   C3 BF 0D               JP   interpret2   
0E76                             ; edit
0E76                EDIT_:       
0E76   CD 4E 0E               CALL   run   
0E79   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0E8B   C3 B0 0D               JP   interpret   
0E8E                REEDIT_:      
0E8E   C3 B0 0D               JP   interpret   
0E91                PRINTSTACK_:      
0E91   CD 4E 0E               CALL   run   
0E94   2F 70 6B 00            .CSTR   "/pk"   
0E98   C3 B0 0D               JP   interpret   
0E9B                             ; editDef:
0E9B                             ;     pop hl                      ; pop ret address
0E9B                             ;     ex (sp),hl                  ; swap with TOS
0E9B                             ;     push hl                     ; dup TOS
0E9B                             ;     ld a,l                      ; a = ident
0E9B                             ;     ld de,TIB                   ; de = start of TIB
0E9B                             ;     ld (vTIBPtr),de             ; update TIB*
0E9B                             ;     push ix                     ; save NEXT
0E9B                             ;     ld ix,editDef0              ; NEXT = editDef0
0E9B                             ;     jp lookupRef                ; convert letter into address
0E9B                             ; editDef0:
0E9B                             ;     ld e,(hl)                   ; de = (hl++)
0E9B                             ;     inc hl
0E9B                             ;     ld d,(hl)
0E9B                             ;     ld a,d                      ; de == 0 ?
0E9B                             ;     or e
0E9B                             ;     jr z,editDef4
0E9B                             ;     ld ix,editDef3              ; NEXT = editDef3
0E9B                             ;     ex de,hl
0E9B                             ;     ld a,(hl)
0E9B                             ;     cp "{"
0E9B                             ;     jr nz,editDef1
0E9B                             ;     jp editBlock0               ; convert letter into address
0E9B                             ; editDef1:
0E9B                             ;     cp "("
0E9B                             ;     jr nz,editDef2
0E9B                             ;     jp editBlock0               ; convert letter into address
0E9B                             ; editDef2:
0E9B                             ;     jp editFunc
0E9B                             ; editDef3:
0E9B                             ;     ld a," "                    ; write assign
0E9B                             ;     call writeChar
0E9B                             ;     pop hl                      ; a = ident
0E9B                             ;     ld a,l
0E9B                             ;     call writeChar
0E9B                             ;     ld a,"="                    ; write assign
0E9B                             ;     call writeChar
0E9B                             ;     ld ix,editDef4              ; NEXT = editDef4
0E9B                             ;     jp printTIB
0E9B                             ; editDef4:
0E9B                             ;     pop ix                      ; restore NEXT
0E9B                             ;     jp (ix)
0E9B                             ; writeChar:
0E9B                             ;     ld de,(vTIBPtr)             ; de = TIB*
0E9B                             ;     ld (de),a                   ; write ident
0E9B                             ;     inc de
0E9B                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0E9B                             ;     ret
0E9B                             ; ; printTIB
0E9B                             ; printTIB:
0E9B                             ;     ld hl,(vTIBPtr)
0E9B                             ;     ld de,TIB
0E9B                             ;     or a
0E9B                             ;     sbc hl,de
0E9B                             ;     jp printTIB2
0E9B                             ; printTIB1:
0E9B                             ;     ld a,(de)
0E9B                             ;     call putchar
0E9B                             ; printTIB2:
0E9B                             ;     ld a,l
0E9B                             ;     or h
0E9B                             ;     jr nz,printTIB1
0E9B                             ;     jp (ix)
0E9B                             ; editBlock:
0E9B                             ;     pop hl                      ; hl = block*
0E9B                             ; editBlock0:
0E9B                             ;     push ix                     ; save next
0E9B                             ;     push hl                     ; push block*
0E9B                             ;     push hl                     ; push block*
0E9B                             ;     ld ix,(editBlock2)
0E9B                             ;     jp blockLength
0E9B                             ; editBlock1:
0E9B                             ;     pop hl                      ; bc = length, (sp) = IP
0E9B                             ;     pop de                      ; de = block*
0E9B                             ;     ld a,l
0E9B                             ;     or h
0E9B                             ;     jr z,editBlock2
0E9B                             ;     push bc
0E9B                             ;     ld bc,hl
0E9B                             ;     ex de,hl                    ; hl = block*
0E9B                             ;     ld de,(vTIBPtr)              ; de = TIB*
0E9B                             ;     ldir                        ; copy block to TIB
0E9B                             ;     ld (vTIBPtr),de              ; save TIB*
0E9B                             ;     pop bc
0E9B                             ; editBlock2:
0E9B                             ;     pop ix                      ; restore next
0E9B                             ;     jp (ix)
0E9B                             ; editFunc:
0E9B                             ;     jp (ix)
0E9B                             ; editArray:
0E9B                             ;     jp (ix)
0E9B                             ; editparseArgs:
0E9B                             ;     jp (ix)
0E9B                             ; ; blockLength
0E9B                             ; ; addr1 -- length
0E9B                             ; blockLength:
0E9B                             ;     pop hl                      ; block*
0E9B                             ;     push hl                     ; save block*
0E9B                             ;     inc hl                      ; skip first char
0E9B                             ;     ld d,1                      ; increase nesting
0E9B                             ; blockLength1:                   ; Skip to end of definition
0E9B                             ;     ld a,(hl)                   ; Get the next character
0E9B                             ;     inc hl                      ; Point to next character
0E9B                             ;     cp " " + 1                  ; ignore whitespace
0E9B                             ;     jr c,blockLength1
0E9B                             ;     cp ")"
0E9B                             ;     jr z,blockLength4
0E9B                             ;     cp "}"
0E9B                             ;     jr z,blockLength4
0E9B                             ;     cp "]"
0E9B                             ;     jr z,blockLength4
0E9B                             ;     cp "("
0E9B                             ;     jr z,blockLength2
0E9B                             ;     cp "{"
0E9B                             ;     jr z,blockLength2
0E9B                             ;     cp "["
0E9B                             ;     jr z,blockLength2
0E9B                             ;     cp "'"
0E9B                             ;     jr z,blockLength3
0E9B                             ;     cp "`"
0E9B                             ;     jr z,blockLength3
0E9B                             ;     cp DQ
0E9B                             ;     jr z,blockLength3
0E9B                             ;     jr blockLength1
0E9B                             ; blockLength2:
0E9B                             ;     inc d
0E9B                             ;     jr blockLength1
0E9B                             ; blockLength4:
0E9B                             ;     dec d
0E9B                             ;     jr nz, blockLength1         ; get the next element
0E9B                             ; blockLength3:
0E9B                             ;     ld a,$80
0E9B                             ;     xor d
0E9B                             ;     ld d,a
0E9B                             ;     jr nz, blockLength1
0E9B                             ;     pop hl                      ; hl = block*
0E9B                             ;     or a
0E9B                             ;     sbc hl,de
0E9B                             ;     push hl
0E9B                             ;     jp (ix)
0E9B                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0E9B                             ; \a start of stack \#3 depth \b base \$ prompt
0E9B                             ; DW dStack               ; a vS0 start of datastack			
0E9B                             ; DW FALSE                ; b vBase16
0E9B                             ; DW 0                    ; c vTIBPtr an offset to the tib
0E9B                             ; DW 0                    ; d
0E9B                             ; DW 65                   ; e vLastDef "A" last command u defined
0E9B                             ; DW 0                    ; f
0E9B                             ; DW page6                ; g 256 bytes limits
0E9B                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0E9B                F1:          
0E9B                F2:          
0E9B                F3:          
0E9B                F4:          
0E9B                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                             ; uninitialised sys variables (preserved)
23F6                VPOINTER:   DS   2   ; 
23F8                VREMAIN:   DS   2   ; 
23FA                VSAVEDIP:   DS   2   ; 
23FC                VSAVEDSP:   DS   2   ; 
23FE                VSAVEDNEXT:   DS   2   ; 
2400                VSAVEDBP:   DS   2   ; 
2402                             ; uninitialised sys variables (unpreserved)
2402                VTEMP1:   DS   2   ; 
2404                VTEMP2:   DS   2   ; 
2406                VTEMP3:   DS   2   ; 
2408                VLASTDEF:   DS   2   ; 
240A                TBPTR:    DS   2   ; reserved for tests
240C                TITLEBUF:   DS   20   
2420                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 173 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 174 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 182 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 187 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 198 IN MAIN.asm
AND:                0220 DEFINED AT LINE 199 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 212 IN MAIN.asm
OR:                 022B DEFINED AT LINE 213 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 226 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 227 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 232 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 240 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 245 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 271 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 278 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 243 IN MAIN.asm
GT_:                027B DEFINED AT LINE 284 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 292 IN MAIN.asm
LT1:                028F DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 303 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 340 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 341 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 344 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 346 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 348 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 350 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 352 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 354 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 356 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 357 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 359 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 361 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 363 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 365 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 367 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 369 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 371 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 373 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 375 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 377 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 379 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 381 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 383 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 385 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 387 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 389 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 391 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 400 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 435 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 446 IN MAIN.asm
COMMAND_I_:         033F DEFINED AT LINE 455 IN MAIN.asm
COMMAND_M_:         0348 DEFINED AT LINE 462 IN MAIN.asm
COMMAND_P_:         034B DEFINED AT LINE 465 IN MAIN.asm
COMMAND_Q_:         0354 DEFINED AT LINE 472 IN MAIN.asm
COMMAND_R_:         035D DEFINED AT LINE 479 IN MAIN.asm
COMMAND_S_:         0360 DEFINED AT LINE 482 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 485 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 488 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 491 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 493 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 497 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
HEXADECIMAL_:       037A DEFINED AT LINE 505 IN MAIN.asm
KEY_:               0380 DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
OUTPUT_:            0383 DEFINED AT LINE 512 IN MAIN.asm
TRUE_:              0386 DEFINED AT LINE 515 IN MAIN.asm
WORDS_:             0389 DEFINED AT LINE 518 IN MAIN.asm
XOR_:               038C DEFINED AT LINE 521 IN MAIN.asm
XOR1:               038D DEFINED AT LINE 523 IN MAIN.asm
ABSOLUTE_:          0397 DEFINED AT LINE 536 IN MAIN.asm
ADDROF_:            03A4 DEFINED AT LINE 551 IN MAIN.asm
ADDROF1:            03B8 DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
ADDROF2:            03C3 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
ARRAYSIZE_:         03C5 DEFINED AT LINE 577 IN MAIN.asm
BREAK_:             03CD DEFINED AT LINE 587 IN MAIN.asm
COLDSTART_:         03D0 DEFINED AT LINE 591 IN MAIN.asm
BYTES_:             03D3 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
BYTES1:             03D6 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
INPUT_:             03DB DEFINED AT LINE 603 IN MAIN.asm
PRINTCHARS_:        03E6 DEFINED AT LINE 616 IN MAIN.asm
QUIT_:              03ED DEFINED AT LINE 624 IN MAIN.asm
QUIT1:              03F4 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
WORDS:              03F7 DEFINED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
COMMAND_F_:         03FD DEFINED AT LINE 638 IN MAIN.asm
COMMENT:            03FF DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
COMMAND_F:          0408 DEFINED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
FOREACH_:           0423 DEFINED AT LINE 680 IN MAIN.asm
FLUSH_:             0426 DEFINED AT LINE 685 IN MAIN.asm
FILTER_:            042B DEFINED AT LINE 689 IN MAIN.asm
FOLD_:              042E DEFINED AT LINE 692 IN MAIN.asm
FUNCSRC_:           0431 DEFINED AT LINE 695 IN MAIN.asm
F1_:                0434 DEFINED AT LINE 698 IN MAIN.asm
F2_:                0437 DEFINED AT LINE 701 IN MAIN.asm
F3_:                043A DEFINED AT LINE 704 IN MAIN.asm
F4_:                043D DEFINED AT LINE 707 IN MAIN.asm
FZ_:                0440 DEFINED AT LINE 710 IN MAIN.asm
FALSE_:             0443 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
COMMAND_M:          0446 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
MAP_:               044F DEFINED AT LINE 723 IN MAIN.asm
COMMAND_R:          0452 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
COMMAND_S:          045F DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 483 IN MAIN.asm
RECUR_:             0466 DEFINED AT LINE 742 IN MAIN.asm
REMAIN_:            046C DEFINED AT LINE 747 IN MAIN.asm
RANGESRC_:          0472 DEFINED AT LINE 752 IN MAIN.asm
COMMAND_V:          0475 DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
CONSTBUFSTART_:     0488 DEFINED AT LINE 772 IN MAIN.asm
CONSTHEAPSTART_:    048D DEFINED AT LINE 776 IN MAIN.asm
CONSTTIBSTART_:     0492 DEFINED AT LINE 780 IN MAIN.asm
VARBUFPTR_:         0497 DEFINED AT LINE 784 IN MAIN.asm
VARHEAPPTR_:        04A0 DEFINED AT LINE 789 IN MAIN.asm
VARTIBPTR_:         04A9 DEFINED AT LINE 794 IN MAIN.asm
VARIABLE:           04B2 DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
CONSTANT:           04B5 DEFINED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
DOT:                04B8 DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
DOTNUMBER_:         04C7 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
DOTSTRING_:         04D2 DEFINED AT LINE 829 IN MAIN.asm
DOTSTRING0:         04D9 DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
DOTSTRING1:         04DF DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
DOTCHAR_:           04EC DEFINED AT LINE 848 IN MAIN.asm
DOTXCHARS_:         04F1 DEFINED AT LINE 854 IN MAIN.asm
DOTXCHARS0:         04F2 DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
DOTXCHARS1:         04FB DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
DOTXCHARS2:         0503 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
RANGESRC:           050D DEFINED AT LINE 32
                    > USED AT LINE 753 IN MAIN.asm
RANGESRCM_1312S884: 051C DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0589 DEFINED AT LINE 32
                    > USED AT LINE 724 IN MAIN.asm
MAPM_1331S904:      0596 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             05CB DEFINED AT LINE 32
                    > USED AT LINE 690 IN MAIN.asm
FILTERM_1345S919:   05D9 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0629 DEFINED AT LINE 32
                    > USED AT LINE 693 IN MAIN.asm
FOLDM_1361S936:     0638 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            067B DEFINED AT LINE 32
                    > USED AT LINE 681 IN MAIN.asm
FOREACHM_1375S951:  0689 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            06C7 DEFINED AT LINE 32
                    > USED AT LINE 696 IN MAIN.asm
FUNCSRCM_1389S966:  06D3 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0700 DEFINED AT LINE 32
DOTARRAYM_1399S977: 070E DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0748 DEFINED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
TILDE:              0748 DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
COMMA:              0748 DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
COLON:              074A DEFINED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
BACKSLASH:          0757 DEFINED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
LAMBDA:             0757 DEFINED AT LINE 1008 IN MAIN.asm
LAMBDA1:            075C DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
LAMBDA2:            076C DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
DEFINESTART:        0778 DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
SEMICOLON:          0781 DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
DEFINEEND:          0781 DEFINED AT LINE 1035 IN MAIN.asm
DEFINEEND1:         0793 DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
PERCENT:            0795 DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 355 IN MAIN.asm
ARG:                0795 DEFINED AT LINE 1051 IN MAIN.asm
ARG0:               07B1 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
ARG0A:              07BA DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
ARG1:               07BF DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
ARG1A:              07C7 DEFINED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
LBRACK:             07CA DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
ARRAYSTART:         07CA DEFINED AT LINE 1093 IN MAIN.asm
RBRACK:             07E6 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
ARRAYEND:           07E6 DEFINED AT LINE 1108 IN MAIN.asm
ARRAYEND1:          0802 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
ARRAYEND2:          0812 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
ARRAYEND3:          0817 DEFINED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
HASH:               0836 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ARRAYINDEX:         0836 DEFINED AT LINE 1163 IN MAIN.asm
ARRAYINDEX0:        083E DEFINED AT LINE 1169 IN MAIN.asm
ARRAYINDEX1:        083F DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
ARRAYINDEX2:        084B DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
ASSIGN:             084E DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
ASSIGN0:            0850 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
ASSIGN1:            0854 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
ASSIGN2:            085D DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
LBRACE:             085F DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
RBRACE:             0864 DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
BLOCKEND:           0864 DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
BLOCKEND1:          0896 DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
BLOCKEND2:          08A2 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
BLOCKEND3:          08B4 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
BLOCKEND4:          08C8 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
BREAK:              08D1 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
BREAK1:             08D8 DEFINED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
TICK:               08EB DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
CHAR:               08EB DEFINED AT LINE 1286 IN MAIN.asm
CHAR1:              08EE DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
CHAR2:              08FA DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
CHAR3:              08FD DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
DIV:                0900 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
BUFFERDEC:          0911 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
BUFFERDEC0:         092B DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERDEC1:         093B DEFINED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
BUFFERDEC2:         095B DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
BUFFERDEC3:         095D DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
BUFFERDEC4:         096D DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
BUFFERDEC5:         096E DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
BUFFERHEX:          0977 DEFINED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
BUFFERHEX1:         0998 DEFINED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BUFFERHEX2:         09A1 DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
DIVIDE:             09AF DEFINED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
DIVIDE1:            09B4 DEFINED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
DIVIDE2:            09C1 DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
DIVIDE3:            09C2 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
FZ:                 09C8 DEFINED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
CARET:              09D5 DEFINED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
GO:                 09D5 DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09D6 DEFINED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
GO2:                09DC DEFINED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
GOBLOCK:            09E7 DEFINED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
GOBLOCK2:           0A0C DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
GOBLOCK3:           0A16 DEFINED AT LINE 1499 IN MAIN.asm
GOFUNC:             0A1A DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
GOFUNC1:            0A33 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
GOFUNC2:            0A39 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
GOFUNC3:            0A44 DEFINED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
GOFUNC4:            0A5C DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
GOFUNC5:            0A5F DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
GOFUNC6:            0A62 DEFINED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
GOFUNC7:            0A65 DEFINED AT LINE 1562 IN MAIN.asm
GOFUNC8:            0A69 DEFINED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
DOLLAR:             0A74 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
HEXNUM:             0A74 DEFINED AT LINE 1577 IN MAIN.asm
HEXNUM1:            0A77 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
HEXNUM2:            0A7F DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
UPCASE:             0A91 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LOWCASE:            0A96 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
IDENT1:             0A9B DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
QUESTION:           0AA8 DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
IF:                 0AA8 DEFINED AT LINE 1620 IN MAIN.asm
IFTE:               0AB4 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
IFTE1:              0AB5 DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
KEY:                0AC1 DEFINED AT LINE 1642 IN MAIN.asm
OUTPUT:             0ACA DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
STAR:               0AD3 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
MUL:                0AD3 DEFINED AT LINE 1661 IN MAIN.asm
MUL2:               0AD5 DEFINED AT LINE 1664 IN MAIN.asm
MUL3:               0ADD DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
NUM:                0AEF DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
NUM0:               0AF8 DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
NUM1:               0AF9 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
NUM2:               0B11 DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
NUM3:               0B1C DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
RPAREN:             0B1F DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
SHIFTLEFT:          0B27 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
SHIFTLEFT1:         0B2F DEFINED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
SHIFTLEFT2:         0B30 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
SHIFTRIGHT:         0B37 DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
SHIFTRIGHT1:        0B3F DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
SHIFTRIGHT2:        0B43 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
DQUOTE:             0B4A DEFINED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
STRING:             0B4A DEFINED AT LINE 1764 IN MAIN.asm
STRING1:            0B53 DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
STRING2:            0B56 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
STRING3:            0B5F DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
PRINTCHARS1:        0B72 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
PRINTCHARS2:        0B78 DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
PARSEARGS:          0B7D DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
PARSEARGS1:         0B87 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
PARSEARGS1A:        0B8F DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
PARSEARGS2:         0B97 DEFINED AT LINE 1835 IN MAIN.asm
PARSEARGS3:         0B9F DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
PARSEARGS4:         0BA2 DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
PARSEARGS5:         0BA8 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
PARSEBLOCK:         0BB3 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
PARSEBLOCK1:        0BB7 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
PARSEBLOCK2:        0BE3 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
PARSEBLOCK3:        0BE6 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
PARSEBLOCK4:        0BEE DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
PARSEBLOCK5:        0BF1 DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
PARSEBLOCK6:        0C19 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
CREATEFUNC:         0C1D DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
CREATEFUNC0:        0C3C DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
CREATEFUNC1:        0C54 DEFINED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
CREATEFUNC2:        0C67 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
CREATEFUNC2A:       0C86 DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
CREATEFUNC3:        0C95 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
CREATEFUNC4:        0CA0 DEFINED AT LINE 2030 IN MAIN.asm
CREATEFUNC5:        0CA1 DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
FLUSHBUFFER:        0CBF DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
COMMANDTABLE:       0CD6 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
COMMANDTABLE1:      0CE0 DEFINED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
COMMANDTABLE2:      0CE5 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
JUMPTABLE:          0CEA DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
JUMPTABLE0:         0CEC DEFINED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
JUMPTABLE1:         0CF8 DEFINED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
JUMPTABLE2:         0CFB DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
PRTSTR0:            0CFE DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
PRTSTR:             0D02 DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
NESTING:            0D07 DEFINED AT LINE 2134 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
NESTING0:           0D11 DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
NESTING1A:          0D18 DEFINED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
NESTING1:           0D1B DEFINED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
NESTING2:           0D2A DEFINED AT LINE 2157 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
NESTING3:           0D2C DEFINED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
NESTING4:           0D37 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
PROMPT:             0D39 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
CRLF:               0D42 DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
PRINTSTR:           0D49 DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
INIT:               0D50 DEFINED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
INIT1:              0D58 DEFINED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
WARMINIT:           0D60 DEFINED AT LINE 2202 IN MAIN.asm
COLDBOOT0:          0D73 DEFINED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
COLDINIT:           0D7D DEFINED AT LINE 2215 IN MAIN.asm
COLDBOOT1:          0D8E DEFINED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
COLDSTART:          0D9B DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
START:              0DA4 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 7
START1:             0DAA DEFINED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
INTERPRET:          0DB0 DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
INTERPRET2:         0DBF DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
INTERPRET3:         0DC7 DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
INTERPRET4:         0DD2 DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
INTERPRET5:         0DD7 DEFINED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
INTERPRET5A:        0DF5 DEFINED AT LINE 2314 IN MAIN.asm
INTERPRET6:         0DF7 DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
INTERPRET7:         0E05 DEFINED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
INTERPRET8:         0E18 DEFINED AT LINE 2344 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
NEXT:               0E33 DEFINED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
NEXT1:              0E43 DEFINED AT LINE 2369 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
EXIT:               0E4A DEFINED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
RUN:                0E4E DEFINED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
ERROR:              0E52 DEFINED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
BACKSPACE_:         0E66 DEFINED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
EDIT_:              0E76 DEFINED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
REEDIT_:            0E8E DEFINED AT LINE 2406 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
PRINTSTACK_:        0E91 DEFINED AT LINE 2409 IN MAIN.asm
F1:                 0E9B DEFINED AT LINE 10
                    > USED AT LINE 699 IN MAIN.asm
F2:                 0E9B DEFINED AT LINE 11
                    > USED AT LINE 702 IN MAIN.asm
F3:                 0E9B DEFINED AT LINE 12
                    > USED AT LINE 705 IN MAIN.asm
F4:                 0E9B DEFINED AT LINE 13
                    > USED AT LINE 708 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2217 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2229 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
VPOINTER:           23F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
VREMAIN:            23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
VSAVEDIP:           23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2203 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
VSAVEDSP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2352 IN MAIN.asm
VSAVEDNEXT:         23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2205 IN MAIN.asm
                    > USED AT LINE 2353 IN MAIN.asm
VSAVEDBP:           2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2206 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
VTEMP1:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1157 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
VTEMP2:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
VTEMP3:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
VLASTDEF:           2408 DEFINED AT LINE 60 IN ram.asm
TBPTR:              240A DEFINED AT LINE 61 IN ram.asm
TITLEBUF:           240C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
HEAP:               2420 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
