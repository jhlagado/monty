0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 C8 10               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 38 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 BB 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 E5 0B               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 FF 0B               JP   percent   
0215                QUESTION_:      
0215   C3 D8 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 34 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 76 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 5E 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 6F 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA D6 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA BA 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 7D 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 82 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 23               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 6F 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 34 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 60 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 60 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA 96 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 60 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 60 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(VARS)   
0309   22 F8 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 28 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 6E 11               JP   error   
0343                LAMBDA2:      
0343   CD 5E 0E               CALL   parseBlock   
0346   CD CD 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA D1 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 04 0D               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA D1 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 0E 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 5E 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 64 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 B1 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 23            LD   de,(vPointer)   
03ED   21 F8 23               LD   hl,vPointer   
03F0   C3 6F 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 9C 0F               CALL   cmdTable   
0403   61 00                  DB   "a",0   ; .a print array
0405   EE 0A                  DW   printArray   
0407   63 00                  DB   "c",0   ; .c print char
0409   13 04                  DW   printChar   
040B   73 00                  DB   "s",0   ; .s print string
040D   22 04                  DW   printString   
040F   00 00                  DW   0   ; .  print number, fall through
0411   37 04                  DW   printNumber   
0413                             ; .c print char
0413                             ; char --
0413                PRINTCHAR:      
0413   E1                     POP   hl   ; a = char
0414   7D                     LD   a,l   
0415   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0419   12                     LD   (de),a   
041A   13                     INC   de   
041B   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*'
041F   C3 0E 0E               JP   dotNext   
0422                             ; .s print string
0422                             ; string* --
0422                PRINTSTRING:      
0422   E1                     POP   hl   ; hl = string*
0423   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0427   18 03                  JR   printString1   
0429                PRINTSTRING0:      
0429   12                     LD   (de),a   ; a -> buffer*
042A   13                     INC   de   ; string*++,
042B   23                     INC   hl   
042C                PRINTSTRING1:      
042C   7E                     LD   a,(hl)   ; a <- string*
042D   B7                     OR   a   ; if NUL exit loop
042E   20 F9                  JR   nz,printString0   
0430   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0434   C3 0E 0E               JP   dotNext   
0437                             ; . print decimal
0437                             ; value --
0437                PRINTNUMBER:      
0437   3A EF 23               LD   a,(vNumBase)   
043A   FE 10                  CP   16   
043C   CA 5F 04               JP   z,printHex   ; else falls through
043F   C3 42 04               JP   printDec   
0442                             ; print decimal                 ; 70
0442                             ; value --
0442                PRINTDEC:      
0442   ED 5B E8 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0446   D9                     EXX      
0447   E1                     POP   hl   ; hl = value
0448   3A EE 23               LD   a,(vDataWidth)   
044B   3D                     DEC   a   
044C   20 02                  JR   nz,printDec1   
044E   26 00                  LD   h,0   
0450                PRINTDEC1:      
0450   CD DE 0F               CALL   formatDec   
0453   D9                     EXX      ; de = buffer*' bc = IP
0454   3E 20                  LD   a," "   ; append space to buffer
0456   12                     LD   (de),a   
0457   13                     INC   de   ; string*++,
0458   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
045C   C3 0E 0E               JP   dotNext   
045F                             ; buffer hex                    37
045F                             ; value --
045F                PRINTHEX:      
045F   ED 5B E8 23            LD   de,(vBufPtr)   
0463   3A F0 23               LD   a,(vHexPrefix)   ; "$"
0466   B7                     OR   a   ; skip if null
0467   28 02                  JR   z,printHex1   
0469   12                     LD   (de),a   
046A   13                     INC   de   ; string*++,
046B                PRINTHEX1:      
046B   E1                     POP   hl   ; hl = value
046C   3A EE 23               LD   a,(vDataWidth)   
046F   3D                     DEC   a   
0470   28 04                  JR   z,printHex2   
0472   7C                     LD   a,h   
0473   CD 85 04               CALL   printHex3   
0476                PRINTHEX2:      
0476   7D                     LD   a,l   
0477   CD 85 04               CALL   printHex3   
047A   3E 20                  LD   a," "   ; append space to buffer
047C   12                     LD   (de),a   
047D   13                     INC   de   ; string*++,
047E   ED 53 E8 23            LD   (vBufPtr),de   
0482   C3 0E 0E               JP   dotNext   
0485                PRINTHEX3:      
0485   F5                     PUSH   af   
0486   1F                     RRA      
0487   1F                     RRA      
0488   1F                     RRA      
0489   1F                     RRA      
048A   CD 8E 04               CALL   printHex4   
048D   F1                     POP   af   
048E                PRINTHEX4:      
048E   E6 0F                  AND   0x0F   
0490   C6 90                  ADD   a,0x90   
0492   27                     DAA      
0493   CE 40                  ADC   a,0x40   
0495   27                     DAA      
0496   12                     LD   (de),a   
0497   13                     INC   de   ; string*++,
0498   C9                     RET      
0499                             ;********************** PAGE 4 END *********************************************
0499                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA AF 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 81 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   50                     DB   lsb(command_d_)   
050F   5B                     DB   lsb(command_e_)   
0510   6A                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   95                     DB   lsb(command_h_)   
0513   A0                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   AB                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   BE                     DB   lsb(comand_o_)   
051A   C9                     DB   lsb(command_p_)   
051B   00                     DB   0   
051C   D0                     DB   lsb(command_r_)   
051D   D2                     DB   lsb(command_s_)   
051E   D4                     DB   lsb(command_t_)   
051F   00                     DB   0   
0520   D6                     DB   lsb(command_v_)   
0521   D8                     DB   lsb(command_w_)   
0522   DA                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   DC                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD 9C 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   6F 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   7D 06                  DW   addrOf   
0531   69 74                  DB   "it"   ; /ait array iterator
0533   5B 08                  DW   arrayIter   
0535   6C 63                  DB   "lc"   ; /alc mem allocate
0537   DB 06                  DW   memAllocate   
0539   6C 6E                  DB   "ln"   ; /aln array length
053B   85 06                  DW   arrayLength   
053D   00 00                  DW   0   
053F   CA 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD 9C 0F               CALL   cmdTable   
0544   79 65                  DB   "ye"   ; /bye cold reboot
0546   BF 10                  DW   coldStart   
0548   79 74                  DB   "yt"   ; /byt byte mode
054A   A8 06                  DW   byteMode   
054C   00 00                  DW   0   
054E   CA 06                  DW   error1   
0550                COMMAND_D_:      
0550   CD 9C 0F               CALL   cmdTable   
0553   65 63                  DB   "ec"   ; /dec decimal
0555   B8 06                  DW   decBase   
0557   00 00                  DW   0   
0559   CA 06                  DW   error1   
055B                COMMAND_E_:      
055B   CD 9C 0F               CALL   cmdTable   
055E   63 68                  DB   "ch"   
0560   BF 06                  DW   echo   
0562   6E 64                  DB   "nd"   
0564   4E 07                  DW   stringEnd   
0566   00 00                  DW   0   
0568   CA 06                  DW   error1   
056A                COMMAND_F_:      
056A   CD 9C 0F               CALL   cmdTable   
056D   61 6C                  DB   "al"   ; /fal false
056F   90 0D                  DW   false1   
0571   6F 72                  DB   "or"   ; /for forEach
0573   67 0A                  DW   forEach   
0575   72 65                  DB   "re"   ; /fre free memory
0577   DD 06                  DW   memFree   
0579   72 61                  DB   "ra"   ; /fra free memory array
057B   E3 06                  DW   memFreeArray   
057D   74 72                  DB   "tr"   ; /ftr filter
057F   B5 09                  DW   filter   
0581   31 00                  DB   "1",0   
0583   B0 11                  DW   f1   
0585   32 00                  DB   "2",0   
0587   B0 11                  DW   f2   
0589   33 00                  DB   "3",0   
058B   B0 11                  DW   f3   
058D   34 00                  DB   "4",0   
058F   B0 11                  DW   f4   
0591   00 00                  DW   0   
0593   CA 06                  DW   error1   
0595                COMMAND_H_:      
0595   CD 9C 0F               CALL   cmdTable   
0598   65 78                  DB   "ex"   ; /hex hex
059A   C5 06                  DW   hexBase   
059C   00 00                  DW   0   
059E   CA 06                  DW   error1   
05A0                COMMAND_I_:      
05A0   CD 9C 0F               CALL   cmdTable   
05A3   6E 00                  DB   "n",0   ; /in input
05A5   D0 06                  DW   input   
05A7   00 00                  DW   0   
05A9   CA 06                  DW   error1   
05AB                COMMAND_M_:      
05AB   CD 9C 0F               CALL   cmdTable   
05AE   61 70                  DB   "ap"   ; /map map
05B0   73 09                  DW   map   
05B2   61 78                  DB   "ax"   ; /max maximum
05B4   E8 06                  DW   maximum   
05B6   69 6E                  DB   "in"   ; /min minimum
05B8   F4 06                  DW   minimum   
05BA   00 00                  DW   0   
05BC   CA 06                  DW   error1   
05BE                COMAND_O_:      
05BE   CD 9C 0F               CALL   cmdTable   
05C1   75 74                  DB   "ut"   ; /out out
05C3   00 07                  DW   output   
05C5   00 00                  DW   0   
05C7   CA 06                  DW   error1   
05C9                COMMAND_P_:      
05C9   CD 9C 0F               CALL   cmdTable   
05CC   00 00                  DW   0   
05CE   CA 06                  DW   error1   
05D0                COMMAND_R_:      
05D0   18 0D                  JR   command_r   
05D2                COMMAND_S_:      
05D2   18 22                  JR   command_s   
05D4                COMMAND_T_:      
05D4   18 43                  JR   command_t   
05D6                COMMAND_V_:      
05D6   18 4C                  JR   command_v   
05D8                COMMAND_W_:      
05D8   18 59                  JR   command_w   
05DA                COMMAND_X_:      
05DA   18 66                  JR   command_x   
05DC                             ; 3
05DC                COMMAND_DEFAULT_:      
05DC   C3 4D 06               JP   command_default   
05DF                             ;********************** PAGE 5 END *********************************************
05DF                             ; .align $100
05DF                COMMAND_R:      
05DF   CD 9C 0F               CALL   cmdTable   
05E2   63 00                  DB   "c",0   ; /rc tail call optimisation
05E4   13 07                  DW   recur   
05E6   65 6D                  DB   "em"   ; /rem remainder
05E8   19 07                  DW   remain   
05EA   65 74                  DB   "et"   ; /ret return
05EC   09 07                  DW   return   
05EE   6E 67                  DB   "ng"   ; /rng range src
05F0   C2 07                  DW   rangeSrc   
05F2   00 00                  DW   0   
05F4   CA 06                  DW   error1   
05F6                COMMAND_S:      
05F6   CD 9C 0F               CALL   cmdTable   
05F9   63 6E                  DB   "cn"   ; /scn scan stream
05FB   16 0A                  DW   scan1   
05FD   63 70                  DB   "cp"   ; /scp string compare
05FF   8C 07                  DW   stringCompare   
0601   65 6C                  DB   "el"   ; /sel select
0603   1F 07                  DW   select   
0605   69 74                  DB   "it"   ; /sit string iterator
0607   E3 08                  DW   stringIter   
0609   6C 6E                  DB   "ln"   ; /sln string length
060B   7D 07                  DW   stringLength   
060D   72 63                  DB   "rc"   ; /src source block* --
060F   B3 0A                  DW   source   
0611   74 72                  DB   "tr"   ; /str start building string
0613   46 07                  DW   stringBegin   
0615   00 00                  DW   0   
0617   CA 06                  DW   error1   
0619                COMMAND_T:      
0619   CD 9C 0F               CALL   cmdTable   
061C   72 75                  DB   "ru"   ; /tru true
061E   8A 0D                  DW   true1   
0620   00 00                  DW   0   
0622   CA 06                  DW   error1   
0624                COMMAND_V:      
0624   CD 9C 0F               CALL   cmdTable   
0627   61 72                  DB   "ar"   ; /var constant vars
0629   00 23                  DW   vars   
062B   6F 69                  DB   "oi"   ; /voi void function return
062D   AA 07                  DW   void   
062F   00 00                  DW   0   
0631   CA 06                  DW   error1   
0633                COMMAND_W:      
0633   CD 9C 0F               CALL   cmdTable   
0636   68 69                  DB   "hi"   ; /whi while true else break from loop
0638   8E 06                  DW   while   
063A   72 64                  DB   "rd"   ; /wrd word mode
063C   B2 07                  DW   wordMode   
063E   00 00                  DW   0   
0640   CA 06                  DW   error1   
0642                COMMAND_X:      
0642   CD 9C 0F               CALL   cmdTable   
0645   6F 72                  DB   "or"   ; /xor exclsuive or
0647   B7 07                  DW   xor   
0649   00 00                  DW   0   
064B   CA 06                  DW   error1   
064D                COMMAND_DEFAULT:      
064D   CD 9C 0F               CALL   cmdTable   
0650   00 00                  DW   0   
0652   54 06                  DW   div   
0654                             ;                               32
0654                DIV:         
0654   E1                     POP   hl   ; hl = arg_b
0655   D1                     POP   de   ; de = arg_a
0656   03                     INC   bc   
0657   0A                     LD   a,(bc)   
0658   FE 3D                  CP   "="   
065A   28 02                  JR   z,div2   
065C   0B                     DEC   bc   ; /
065D   EB                     EX   de,hl   
065E                DIV2:        
065E   F5                     PUSH   af   ; preserve af, bc
065F   C5                     PUSH   bc   
0660   44 4D                  LD   bc,hl   
0662   CD F5 0D               CALL   divide   
0665   EB                     EX   de,hl   
0666   ED 53 FA 23            LD   (vRemain),de   
066A   C1                     POP   bc   ; restore
066B   F1                     POP   af   
066C   C3 9D 02               JP   sub3   
066F                             ; /abs absolute
066F                             ; num -- num
066F                ABSOLUTE:      
066F   E1                     POP   hl   
0670   CB 7C                  BIT   7,h   
0672   28 06                  JR   z,absolute1   
0674   AF                     XOR   a   
0675   95                     SUB   l   
0676   6F                     LD   l,a   
0677   9F                     SBC   a,a   
0678   94                     SUB   h   
0679   67                     LD   h,a   
067A                ABSOLUTE1:      
067A   E5                     PUSH   hl   
067B   DD E9                  JP   (ix)   
067D                             ; /adr addrOf
067D                             ; char -- addr
067D                ADDROF:      
067D   E1                     POP   hl   ; a = char
067E   7D                     LD   a,l   
067F   CD BE 0F               CALL   getVarAddr   
0682   E5                     PUSH   hl   
0683                ADDROF2:      
0683   DD E9                  JP   (ix)   
0685                             ; /aln length of an array, num elements
0685                             ; array* -- num
0685                ARRAYLENGTH:      
0685   E1                     POP   hl   
0686   2B                     DEC   hl   ; msb size
0687   56                     LD   d,(hl)   
0688   2B                     DEC   hl   ; lsb size
0689   5E                     LD   e,(hl)   
068A   EB                     EX   de,hl   
068B                ARRAYLENGTH1:      
068B   E5                     PUSH   hl   
068C   DD E9                  JP   (ix)   
068E                             ; 13
068E                             ; /whi while true else break from loop
068E                             ; --
068E                WHILE:       
068E   E1                     POP   hl   ; hl = condition, break if false
068F   7D                     LD   a,l   
0690   B4                     OR   h   
0691   28 02                  JR   z,while1   
0693   DD E9                  JP   (ix)   
0695                WHILE1:      
0695   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0697   FD 54                  LD   d,iyh   
0699   21 08 00               LD   hl,8   
069C   19                     ADD   hl,de   
069D   23                     INC   hl   
069E   23                     INC   hl   
069F   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06A2   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06A5   C3 64 0C               JP   blockEnd   
06A8                             ; /byt
06A8                BYTEMODE:      
06A8   3E 01                  LD   a,1   
06AA                BYTEMODE1:      
06AA   32 EE 23               LD   (vDataWidth),a   
06AD   DD E9                  JP   (ix)   
06AF                             ; //
06AF                COMMENT:      
06AF   03                     INC   bc   ; point to next char
06B0   0A                     LD   a,(bc)   
06B1   FE 20                  CP   " "   ; terminate on any char less than SP
06B3   30 FA                  JR   nc,comment   
06B5   0B                     DEC   bc   
06B6   DD E9                  JP   (ix)   
06B8                DECBASE:      
06B8   3E 0A                  LD   a,10   
06BA                DECBASE1:      
06BA   32 EF 23               LD   (vNumBase),a   
06BD   DD E9                  JP   (ix)   
06BF                             ; /ech
06BF                             ; bool --
06BF                ECHO:        
06BF   E1                     POP   hl   
06C0   22 F1 23               LD   (vEcho),hl   
06C3   DD E9                  JP   (ix)   
06C5                HEXBASE:      
06C5   3E 10                  LD   a,16   
06C7   C3 BA 06               JP   decBase1   
06CA                ERROR1:      
06CA   21 01 00               LD   hl,1   ; error 1: unknown command
06CD   C3 6E 11               JP   error   
06D0                             ; Z80 port input
06D0                             ; port -- value
06D0                INPUT:       
06D0   E1                     POP   hl   
06D1   59                     LD   e,c   ; save IP
06D2   4D                     LD   c,l   
06D3   ED 68                  IN   l,(c)   
06D5   26 00                  LD   h,0   
06D7   4B                     LD   c,e   ; restore IP
06D8   E5                     PUSH   hl   
06D9   DD E9                  JP   (ix)   
06DB                             ; /alc
06DB                             ; size -- adr
06DB                MEMALLOCATE:      
06DB   DD E9                  JP   (ix)   
06DD                             ; /fre
06DD                             ; adr --
06DD                MEMFREE:      
06DD   E1                     POP   hl   
06DE                MEMFREE1:      
06DE   22 EA 23               LD   (vHeapPtr),hl   
06E1   DD E9                  JP   (ix)   
06E3                             ; /fra
06E3                             ; adr --
06E3                MEMFREEARRAY:      
06E3   E1                     POP   hl   
06E4   2B                     DEC   hl   
06E5   2B                     DEC   hl   
06E6   18 F6                  JR   memFree1   
06E8                             ; /max maximum
06E8                             ; a b -- c
06E8                MAXIMUM:      
06E8   E1                     POP   hl   
06E9   D1                     POP   de   
06EA   E5                     PUSH   hl   
06EB   B3                     OR   e   
06EC   ED 52                  SBC   hl,de   
06EE   30 02                  JR   nc,maximum1   
06F0   E1                     POP   hl   
06F1   D5                     PUSH   de   
06F2                MAXIMUM1:      
06F2   DD E9                  JP   (ix)   
06F4                             ; /min minimum
06F4                             ; a b -- c
06F4                MINIMUM:      
06F4   E1                     POP   hl   
06F5   D1                     POP   de   
06F6   E5                     PUSH   hl   
06F7   B3                     OR   e   
06F8   ED 52                  SBC   hl,de   
06FA   38 02                  JR   c,minimum1   
06FC   E1                     POP   hl   
06FD   D5                     PUSH   de   
06FE                MINIMUM1:      
06FE   DD E9                  JP   (ix)   
0700                             ; /o Z80 port output
0700                             ; value port --
0700                OUTPUT:      
0700   E1                     POP   hl   
0701   59                     LD   e,c   ; save IP
0702   4D                     LD   c,l   
0703   E1                     POP   hl   
0704   ED 69                  OUT   (c),l   
0706   4B                     LD   c,e   ; restore IP
0707   DD E9                  JP   (ix)   
0709                             ; /ret
0709                             ; --
0709                RETURN:      
0709   E1                     POP   hl   ; hl = condition, exit if true
070A   7D                     LD   a,l   
070B   B4                     OR   h   
070C   20 02                  JR   nz,return1   
070E   DD E9                  JP   (ix)   
0710                RETURN1:      
0710   C3 64 0C               JP   blockEnd   
0713                RECUR:       
0713   E1                     POP   hl   
0714   22 EC 23               LD   (vRecurPtr),hl   
0717   DD E9                  JP   (ix)   
0719                REMAIN:      
0719   2A FA 23               LD   hl,(vRemain)   
071C   E5                     PUSH   hl   
071D   DD E9                  JP   (ix)   
071F                             ; select case from an associative array of cases
071F                             ; bool cases* --
071F                SELECT:      
071F   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0720   D1                     POP   de   ; de = select key
0721   C5                     PUSH   bc   ; save IP
0722   2B                     DEC   hl   ; bc = array length
0723   46                     LD   b,(hl)   
0724   2B                     DEC   hl   
0725   4E                     LD   c,(hl)   
0726   23                     INC   hl   
0727   23                     INC   hl   
0728   18 15                  JR   select2   
072A                SELECT1:      
072A   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
072B   BB                     CP   e   
072C   23                     INC   hl   ; hl++, flags are unaltered
072D   20 0C                  JR   nz,select1a   
072F   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0730   BA                     CP   d   
0731   23                     INC   hl   ; hl++, flags are unaltered
0732   20 08                  JR   nz,select1b   
0734   5E                     LD   e,(hl)   
0735   23                     INC   hl   
0736   56                     LD   d,(hl)   
0737   C1                     POP   bc   
0738   C3 A0 03               JP   go1   
073B                SELECT1A:      
073B   23                     INC   hl   
073C                SELECT1B:      
073C   23                     INC   hl   
073D   23                     INC   hl   
073E   0B                     DEC   bc   
073F                SELECT2:      
073F   79                     LD   a,c   
0740   B0                     OR   b   
0741   20 E7                  JR   nz,select1   
0743   C1                     POP   bc   
0744   DD E9                  JP   (ix)   
0746                             ; /str
0746                STRINGBEGIN:      
0746   21 FF FF               LD   hl,TRUE   ; string mode = true
0749   22 F2 23               LD   (vStrMode),hl   
074C   18 27                  JR   stringEnd1   ; save hl in vBufPtr
074E                             ; /end
074E                STRINGEND:      
074E   21 00 00               LD   hl,FALSE   ; string mode = false
0751   22 F2 23               LD   (vStrMode),hl   
0754   2A E8 23               LD   hl,(vBufPtr)   ; append NUL to string
0757   AF                     XOR   a   
0758   77                     LD   (hl),a   
0759   23                     INC   hl   ; hl = string_end*
075A   ED 43 04 24            LD   (vTemp1),bc   ; save IP
075E   11 00 22               LD   de,BUFFER   ; de = string*
0761   B7                     OR   a   ; bc = size
0762   ED 52                  SBC   hl,de   
0764   44 4D                  LD   bc,hl   
0766   2A EA 23               LD   hl,(vHeapPtr)   ; hl = hstring*
0769   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
076A   D5                     PUSH   de   ; return hstring*
076B   ED B0                  LDIR      ; copy size bytes from string* to hstring*
076D   ED 53 EA 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0771   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0775                STRINGEND1:      
0775   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
0778   22 E8 23               LD   (vBufPtr),hl   
077B   DD E9                  JP   (ix)   
077D                STRINGLENGTH:      
077D   D1                     POP   de   
077E   21 00 00               LD   hl,0   
0781   18 02                  JR   stringLength2   
0783                STRINGLENGTH1:      
0783   13                     INC   de   
0784   23                     INC   hl   
0785                STRINGLENGTH2:      
0785   1A                     LD   a,(de)   
0786   B7                     OR   a   
0787   20 FA                  JR   nz,stringLength1   
0789                STRINGLENGTH3:      
0789   E5                     PUSH   hl   
078A   DD E9                  JP   (ix)   
078C                             ; /sc string compare
078C                             ; string1* string2* -- bool
078C                             ; Compares two null terminated strings.
078C                STRINGCOMPARE:      
078C   D1                     POP   de   
078D   E1                     POP   hl   
078E                STRINGCOMPARE1:      
078E   1A                     LD   a,(de)   
078F   BE                     CP   (hl)   
0790   20 07                  JR   nz,stringCompare2   
0792   B7                     OR   a   
0793   28 09                  JR   z,stringCompare3   
0795   13                     INC   de   
0796   23                     INC   hl   
0797   18 F5                  JR   stringCompare1   
0799                STRINGCOMPARE2:      
0799   21 00 00               LD   hl,FALSE   
079C   18 03                  JR   stringCompare4   
079E                STRINGCOMPARE3:      
079E   21 FF FF               LD   hl,TRUE   
07A1                STRINGCOMPARE4:      
07A1   E5                     PUSH   hl   
07A2   DD E9                  JP   (ix)   
07A4                             ; /var
07A4                             ; --
07A4                VARIABLES:      
07A4   21 00 23               LD   hl,VARS   
07A7   C3 7E 0F               JP   constant   
07AA                             ; /voi clear out returned values
07AA                             ; ?? --
07AA                VOID:        
07AA   FD 5D                  LD   e,iyl   
07AC   FD 54                  LD   d,iyh   
07AE   EB                     EX   de,hl   
07AF   F9                     LD   sp,hl   
07B0   DD E9                  JP   (ix)   
07B2                             ; /wrd
07B2                WORDMODE:      
07B2   3E 02                  LD   a,2   
07B4   C3 AA 06               JP   byteMode1   
07B7                             ; /xor
07B7                XOR:         
07B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07B8                XOR1:        
07B8   E1                     POP   hl   
07B9   7B                     LD   a,e   
07BA   AD                     XOR   l   
07BB   6F                     LD   l,a   
07BC   7A                     LD   a,d   
07BD   AC                     XOR   h   
07BE   67                     LD   h,a   
07BF   C3 D8 02               JP   add3   
07C2                             ;*******************************************************************
07C2                             ; Monty implementations
07C2                             ;*******************************************************************
07C2                             ; /rng rangeSrc
07C2                             ; begin end step -- src
07C2                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07C2                RANGESRC:      ; range source: begin, end, step, local: L
07C2   CD 9F 03               CALL   go   
07C5   00 00                  DW   NUL   
07C7   D1 07                  DW   rangeSrcM_1723S1308   
07C9   CB 07                  DW   $+2   
07CB   01                     DB   1   
07CC   04 62 65 73 4C         .PSTR   "besL"   
07D1                RANGESRCM_1723S1308:      
07D1   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07D2   5B 25 62 20 2F 74 72 75 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /tru %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
07F8   5C 6B 74 7B            DB   "\\kt{"   
07FC   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0805   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
080B   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0814   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
081C   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
0826   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
082F   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
0834   7B 25 61 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/fal %L1;= 0 2}"   ; ifte: /tru index, /fal active = false, quit
084A   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0851   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0858   7D                     DB   "}"   
0859   7D                     DB   "}"   
085A   00                     DB   0   
085B                             ; /ai arrayIter
085B                             ; array* -- src
085B                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
085B                ARRAYITER:      
085B   CD 9F 03               CALL   go   
085E   00 00                  DW   NUL   
0860   68 08                  DW   arrayIterM_1742S1328   
0862   64 08                  DW   $+2   
0864   01                     DB   1   
0865   02 61 4C               .PSTR   "aL"   
0868                ARRAYITERM_1742S1328:      
0868   7B                     DB   "{"   
0869   5B 30 20 2F 74 72 75 20 25 61 2F 61 6C 6E 5D 20 25 4C 3D DB   "[0 /tru %a/aln] %L="   ; init mutable L [index active size]
087C   5C 6B 74 7B            DB   "\\kt{"   
0880   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
0889   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
088F   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
0898   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08A0   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08A7   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
08B0   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
08B9   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/fal %L1;= 0 2}"   ; ifte: /tru value, /fal active = false, quit
08D2   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
08D9   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E0   7D                     DB   "}"   
08E1   7D                     DB   "}"   
08E2   00                     DB   0   
08E3                             ; /sit stringIter
08E3                             ; string* -- src
08E3                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08E3                STRINGITER:      
08E3   CD 9F 03               CALL   go   
08E6   00 00                  DW   NUL   
08E8   F0 08                  DW   stringIterM_1761S1348   
08EA   EC 08                  DW   $+2   
08EC   01                     DB   1   
08ED   02 73 4C               .PSTR   "sL"   
08F0                STRINGITERM_1761S1348:      
08F0   7B                     DB   "{"   
08F1   5B 30 20 2F 74 72 75 5D 20 25 4C 3D DB   "[0 /tru] %L="   ; init mutable L [index active]
08FD   5C 6B 74 7B            DB   "\\kt{"   
0901   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
090A   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0911   25 4C 31 3B 21 2F 72 65 74 DB   "%L1;!/ret"   ; if not active don't send
091A   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
0922   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0929   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 72 64 20 25 63 3D DB   "/byt %s%i; /wrd %c="   ; read byte at i, store in c as word
093C   31 25 74 21 3D 2F 72 65 74 DB   "1%t!=/ret"   ; break if type != 0
0945   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
094C   7B 25 63 20 31 7D 7B 2F 66 61 6C 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/fal %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0962   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0969   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0970   7D                     DB   "}"   
0971   7D                     DB   "}"   
0972   00                     DB   0   
0973                             ; /map map
0973                             ; src func -- src1
0973                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0973                MAP:         ; map: source, function
0973   CD 9F 03               CALL   go   
0976   00 00                  DW   NUL   
0978   80 09                  DW   mapM_1781S1370   
097A   7C 09                  DW   $+2   
097C   00                     DB   0   
097D   02 73 66               .PSTR   "sf"   
0980                MAPM_1781S1370:      
0980   7B                     DB   "{"   
0981   5C 6B 74 7B            DB   "\\kt{"   
0985   30 25 74 21 3D 2F 72 65 74 DB   "0%t!=/ret"   ; break if type != 0
098E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0992   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0997   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
09A3   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09AB   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09B2   7D                     DB   "}"   
09B3   7D                     DB   "}"   
09B4   00                     DB   0   
09B5                             ; /ft filter
09B5                             ; src pred -- src1
09B5                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09B5                FILTER:      ; filter: source, predicate, local: T
09B5   CD 9F 03               CALL   go   
09B8   00 00                  DW   NUL   
09BA   C3 09                  DW   filterM_1795S1385   
09BC   BE 09                  DW   $+2   
09BE   01                     DB   1   
09BF   03 73 70 54            .PSTR   "spT"   
09C3                FILTERM_1795S1385:      
09C3   7B                     DB   "{"   
09C4   5B 30 5D 25 54 3D      DB   "[0]%T="   
09CA   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09CE   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09D2   5B                     DB   "["   
09D3   7B 25 64 20 25 54 30 3B 3D 20 2F 74 72 75 7D DB   "{%d %T0;= /tru}"   ; case 0: store talkback in T[0], return true
09E2   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09EA   7B 2F 74 72 75 7D      DB   "{/tru}"   ; case 2: return true
09F0   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
09F5   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
0A0B   3F                     DB   "?"   
0A0C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A13   7D                     DB   "}"   
0A14   7D                     DB   "}"   
0A15   00                     DB   0   
0A16                             ; /scn scan1
0A16                             ; src init reducer -- src1
0A16                             ; where reducer is a function like: \\da00bbLi4u
0A16                          ;*Macro unroll: FUNC scan1, 1, "sirA"                    ; src, init, reducer
0A16                SCAN1:       ; src, init, reducer
0A16   CD 9F 03               CALL   go   
0A19   00 00                  DW   NUL   
0A1B   25 0A                  DW   scan1M_1814S1405   
0A1D   1F 0A                  DW   $+2   
0A1F   01                     DB   1   
0A20   04 73 69 72 41         .PSTR   "sirA"   
0A25                SCAN1M_1814S1405:      
0A25   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A26   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A2D   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A31   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A35   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A3A   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A55   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A5D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A64   7D                     DB   "}"   
0A65   7D                     DB   "}"   
0A66   00                     DB   0   
0A67                             ; /for forEach
0A67                             ; src proc --
0A67                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A67                FOREACH:      ; forEach: source, procedure, local: T
0A67   CD 9F 03               CALL   go   
0A6A   00 00                  DW   NUL   
0A6C   75 0A                  DW   forEachM_1828S1420   
0A6E   70 0A                  DW   $+2   
0A70   01                     DB   1   
0A71   03 73 70 54            .PSTR   "spT"   
0A75                FOREACHM_1828S1420:      
0A75   7B                     DB   "{"   
0A76   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A7C   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A80   32 25 74 3D 3D 2F 72 65 74 DB   "2%t==/ret"   ; if type == 2 skip
0A89   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A8E   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0AA0   3F                     DB   "?"   ; ifte:
0AA1   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0AAA   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AB1   7D                     DB   "}"   
0AB2   00                     DB   0   
0AB3                             ; /src source
0AB3                             ; block* -- src
0AB3                          ;*Macro unroll: FUNC source, 0, "f"                      ; :f block
0AB3                SOURCE:      ; :f block
0AB3   CD 9F 03               CALL   go   
0AB6   00 00                  DW   NUL   
0AB8   BF 0A                  DW   sourceM_1842S1435   
0ABA   BC 0A                  DW   $+2   
0ABC   00                     DB   0   
0ABD   01 66                  .PSTR   "f"   
0ABF                SOURCEM_1842S1435:      
0ABF   7B                     DB   "{"   
0AC0   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AC4   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /ret
0ACD   5C 64 74 7B            DB   "\\dt{"   
0AD1   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /ret
0AE4   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AEB   7D                     DB   "}"   
0AEC   7D                     DB   "}"   
0AED   00                     DB   0   
0AEE                          ;*Macro unroll: FUNC printArray, 2, "abc"
0AEE                PRINTARRAY:      
0AEE   CD 9F 03               CALL   go   
0AF1   00 00                  DW   NUL   
0AF3   FC 0A                  DW   printArrayM_1852S1446   
0AF5   F7 0A                  DW   $+2   
0AF7   02                     DB   2   
0AF8   03 61 62 63            .PSTR   "abc"   
0AFC                PRINTARRAYM_1852S1446:      
0AFC   7B                     DB   "{"   
0AFD   27 5B 20 27 2E 73 20 25 61 2F 61 6C 6E 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/aln%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B36   7D                     DB   "}"   
0B37   00                     DB   0   
0B38                             ;*******************************************************************
0B38                             ; implementations continued
0B38                             ;*******************************************************************
0B38                COMMA:       
0B38   CD 9C 0F               CALL   cmdTable   
0B3B   63 00                  DB   "c",NUL   ; .c print char
0B3D   47 0B                  DW   readChar   
0B3F   73 00                  DB   "s",NUL   ; .s print string
0B41   50 0B                  DW   readString   
0B43   00 00                  DW   NUL   ; .  print number, fall through
0B45   72 0B                  DW   readNumber   
0B47                READCHAR:      
0B47   CD 81 00               CALL   getchar   
0B4A   26 00                  LD   h,0   
0B4C   6F                     LD   l,a   
0B4D   E5                     PUSH   hl   
0B4E   DD E9                  JP   (ix)   
0B50                READSTRING:      
0B50   ED 5B EA 23            LD   de,(vHeapPtr)   
0B54   D5                     PUSH   de   ; return start of string
0B55                READSTRING1:      
0B55   CD 81 00               CALL   getchar   
0B58   FE 0D                  CP   "\r"   
0B5A   28 0D                  JR   z,readString2   
0B5C   12                     LD   (de),a   
0B5D   13                     INC   de   
0B5E   3A F1 23               LD   a,(vEcho)   
0B61   3C                     INC   a   
0B62   20 F1                  JR   nz,readString1   
0B64   CD 85 00               CALL   putchar   
0B67   18 EC                  JR   readString1   
0B69                READSTRING2:      
0B69   AF                     XOR   a   
0B6A   12                     LD   (de),a   
0B6B   13                     INC   de   
0B6C   ED 53 EA 23            LD   (vHeapPtr),de   
0B70   DD E9                  JP   (ix)   
0B72                READNUMBER:      
0B72   DD E5                  PUSH   ix   
0B74                          ;*Macro unroll:  PERFORM readString
0B74   DD 21 7B 0B            LD   ix,performM_1896S1495   
0B78   C3 50 0B               JP   readString   
0B7B                PERFORMM_1896S1495:      
0B7B   60 69                  LD   hl,bc   ; save bc, hl = string*
0B7D   E3                     EX   (sp),hl   
0B7E   22 EA 23               LD   (vHeapPtr),hl   ; restore heap* to before string
0B81   44 4D                  LD   bc,hl   
0B83   0A                     LD   a,(bc)   
0B84   FE 2D                  CP   "-"   
0B86   28 11                  JR   z,readNumber1   
0B88   FE 24                  CP   "$"   
0B8A   28 17                  JR   z,readNumber2   
0B8C   FE 30                  CP   "0"   
0B8E   30 09                  JR   nc,readNumber1   
0B90   FE 3A                  CP   "9"+1   
0B92   38 05                  JR   c,readNumber1   
0B94   21 00 00               LD   hl,0   
0B97   18 12                  JR   readNumber3   
0B99                READNUMBER1:      
0B99                          ;*Macro unroll:  PERFORM num
0B99   DD 21 A0 0B            LD   ix,performM_1913S1512   
0B9D   C3 34 0C               JP   num   
0BA0                PERFORMM_1913S1512:      
0BA0   E1                     POP   hl   
0BA1   18 08                  JR   readNumber3   
0BA3                READNUMBER2:      
0BA3                          ;*Macro unroll:  PERFORM hexNum
0BA3   DD 21 AA 0B            LD   ix,performM_1917S1516   
0BA7   C3 BB 0B               JP   hexNum   
0BAA                PERFORMM_1917S1516:      
0BAA   E1                     POP   hl   
0BAB                READNUMBER3:      
0BAB   C1                     POP   bc   
0BAC   DD E1                  POP   ix   
0BAE   E5                     PUSH   hl   
0BAF   DD E9                  JP   (ix)   
0BB1                             ; ~ bitwise invert
0BB1                TILDE:       
0BB1                INVERT:      
0BB1   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BB2   7D                     LD   a,l   
0BB3   2F                     CPL      
0BB4   6F                     LD   l,a   
0BB5   7C                     LD   a,h   
0BB6   2F                     CPL      
0BB7   67                     LD   h,a   
0BB8   C3 D8 02               JP   add3   
0BBB                             ; $ hex                         ; 22
0BBB                DOLLAR:      
0BBB                HEXNUM:      
0BBB   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BBE                HEXNUM1:      
0BBE   03                     INC   bc   
0BBF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BC0   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BC2   28 02                  JR   z,hexnum2   ; no a decimal
0BC4   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BC6                HEXNUM2:      
0BC6   D6 30                  SUB   $30   ; form decimal digit
0BC8   DA 56 0C               JP   c,num2   
0BCB   FE 10                  CP   $0F+1   
0BCD   D2 56 0C               JP   nc,num2   
0BD0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BD1   29                     ADD   hl,hl   ; 4X
0BD2   29                     ADD   hl,hl   ; 8X
0BD3   29                     ADD   hl,hl   ; 16X
0BD4   85                     ADD   a,l   ; add into bottom of hl
0BD5   6F                     LD   l,a   
0BD6   18 E6                  JR   hexnum1   
0BD8                             ; ? if                            23
0BD8                             ; condition then else -- value
0BD8                QUESTION:      
0BD8                IF:          
0BD8   D1                     POP   de   ; de = else
0BD9   E1                     POP   hl   ; hl = then
0BDA   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BDB   7C                     LD   a,h   
0BDC   B5                     OR   l   
0BDD   E1                     POP   hl   ; hl = then
0BDE   CA A0 03               JP   z,go1   ; if z de = else
0BE1   EB                     EX   de,hl   ; condition = false, de = then
0BE2   C3 A0 03               JP   go1   
0BE5                             ; string                        ;38
0BE5                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BE5                QUOTE:       
0BE5                STRING:      
0BE5   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0BE8   E5                     PUSH   hl   ; save start of string
0BE9   0A                     LD   a,(bc)   
0BEA   5F                     LD   e,a   ; e = matching terminator
0BEB   03                     INC   bc   ; point to next char
0BEC   18 03                  JR   string2   
0BEE                STRING1:      
0BEE   77                     LD   (hl),a   
0BEF   23                     INC   hl   ; increase count
0BF0   03                     INC   bc   ; point to next char
0BF1                STRING2:      
0BF1   0A                     LD   a,(bc)   
0BF2   BB                     CP   e   ; is it the string terminator
0BF3   28 02                  JR   z,string3   
0BF5   18 F7                  JR   string1   
0BF7                STRING3:      
0BF7   AF                     XOR   a   ; write NUL to terminate string
0BF8   77                     LD   (hl),a   ; hl = end of string
0BF9   23                     INC   hl   
0BFA   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BFD   DD E9                  JP   (ix)   
0BFF                             ; %a .. %z                      43
0BFF                             ; -- value
0BFF                             ; returns value of arg
0BFF                PERCENT:      
0BFF                ARG:         
0BFF   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C02   FD 56 05               LD   d,(iy+5)   
0C05   EB                     EX   de,hl   
0C06   7D                     LD   a,l   ; arg_list* == null, skip
0C07   B4                     OR   h   
0C08   28 1A                  JR   z,arg0a   
0C0A   23                     INC   hl   ; a = num_args, hl = arg_list*
0C0B   7E                     LD   a,(hl)   
0C0C   23                     INC   hl   
0C0D   B7                     OR   a   
0C0E   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C10   5F                     LD   e,a   ; e = a = num_args
0C11   03                     INC   bc   ; a = next char = dollar_name
0C12   0A                     LD   a,(bc)   
0C13   C5                     PUSH   bc   ; save IP
0C14   43                     LD   b,e   ; b = e = num_args
0C15   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C18   FD 56 03               LD   d,(iy+3)   
0C1B                ARG0:        
0C1B   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C1C   1B                     DEC   de   
0C1D   BE                     CP   (hl)   
0C1E   28 09                  JR   z,arg1   
0C20   23                     INC   hl   ; hl = next arg_list*
0C21   10 F8                  DJNZ   arg0   
0C23   C1                     POP   bc   ; no match, restore IP
0C24                ARG0A:       
0C24   11 00 00               LD   de,0   ; return 0
0C27   18 08                  JR   arg1a   
0C29                ARG1:        
0C29   C1                     POP   bc   ; restore IP
0C2A   EB                     EX   de,hl   ; hl = arg*
0C2B   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0C2E   5E                     LD   e,(hl)   
0C2F   23                     INC   hl   
0C30   56                     LD   d,(hl)   ; de = arg
0C31                ARG1A:       
0C31   D5                     PUSH   de   ; push arg
0C32   DD E9                  JP   (ix)   
0C34                             ; 0..9 number                   37
0C34                NUM:         
0C34   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C37   0A                     LD   a,(bc)   ; Get numeral or -
0C38   FE 2D                  CP   "-"   
0C3A   20 01                  JR   nz,num0   
0C3C   03                     INC   bc   ; move to next char, no flags affected
0C3D                NUM0:        
0C3D   08                     EX   af,af'   ; save zero flag = 0 for later
0C3E                NUM1:        
0C3E   0A                     LD   a,(bc)   ; read digit
0C3F   D6 30                  SUB   "0"   ; less than 0?
0C41   38 13                  JR   c,num2   ; not a digit, exit loop
0C43   FE 0A                  CP   10   ; greater that 9?
0C45   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C47   03                     INC   bc   ; inc IP
0C48   54 5D                  LD   de,hl   ; multiply hl * 10
0C4A   29                     ADD   hl,hl   
0C4B   29                     ADD   hl,hl   
0C4C   19                     ADD   hl,de   
0C4D   29                     ADD   hl,hl   
0C4E   85                     ADD   a,l   ; add digit in a to hl
0C4F   6F                     LD   l,a   
0C50   3E 00                  LD   a,0   
0C52   8C                     ADC   a,h   
0C53   67                     LD   h,a   
0C54   18 E8                  JR   num1   
0C56                NUM2:        
0C56   0B                     DEC   bc   
0C57   08                     EX   af,af'   ; restore zero flag
0C58   20 07                  JR   nz,num3   
0C5A   EB                     EX   de,hl   ; negate the value of hl
0C5B   21 00 00               LD   hl,0   
0C5E   B7                     OR   a   ; jump to sub2
0C5F   ED 52                  SBC   hl,de   
0C61                NUM3:        
0C61   E5                     PUSH   hl   ; Put the number on the stack
0C62   DD E9                  JP   (ix)   ; and process the next character
0C64                             ; }                               58
0C64                RBRACE:      
0C64                BLOCKEND:      
0C64   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C67   FD 56 01               LD   d,(iy+1)   
0C6A   ED 53 04 24            LD   (vTemp1),de   
0C6E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C71   FD 56 07               LD   d,(iy+7)   
0C74   ED 53 06 24            LD   (vTemp2),de   
0C78   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C7B   FD 56 03               LD   d,(iy+3)   
0C7E   EB                     EX   de,hl   
0C7F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C82   FD 56 01               LD   d,(iy+1)   
0C85   13                     INC   de   ; for carry flag <=
0C86   B7                     OR   a   
0C87   ED 52                  SBC   hl,de   
0C89   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C8B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C8D   FD 5D                  LD   e,iyl   
0C8F   21 08 00               LD   hl,8   
0C92   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C93   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C94   18 0C                  JR   blockEnd2   
0C96                BLOCKEND1:      ; same scope
0C96   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C99   FD 56 03               LD   d,(iy+3)   
0C9C   EB                     EX   de,hl   
0C9D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C9F   FD 5D                  LD   e,iyl   
0CA1   EB                     EX   de,hl   
0CA2                BLOCKEND2:      
0CA2   44 4D                  LD   bc,hl   ; bc = hl = BP
0CA4   B7                     OR   a   ; hl = BP - SP = count
0CA5   ED 72                  SBC   hl,sp   
0CA7   7D                     LD   a,l   
0CA8   B4                     OR   h   
0CA9   28 09                  JR   z,blockEnd3   
0CAB   C5                     PUSH   bc   ; bc = count, hl = BP
0CAC   44 4D                  LD   bc,hl   
0CAE   E1                     POP   hl   
0CAF   2B                     DEC   hl   ; hl = BP-1
0CB0   1B                     DEC   de   ; de = args*-1
0CB1   ED B8                  LDDR      
0CB3   13                     INC   de   
0CB4                BLOCKEND3:      
0CB4   EB                     EX   de,hl   ; sp = de = new tos*
0CB5   F9                     LD   sp,hl   
0CB6   ED 4B 06 24            LD   bc,(vTemp2)   
0CBA   FD 2A 04 24            LD   iy,(vTemp1)   
0CBE   ED 5B EC 23            LD   de,(vRecurPtr)   ; de = recur vector
0CC2   7B                     LD   a,e   ; check for NUL
0CC3   B2                     OR   d   
0CC4   20 02                  JR   nz,blockEnd4   
0CC6   DD E9                  JP   (ix)   
0CC8                BLOCKEND4:      
0CC8   21 00 00               LD   hl,0   ; clear recur vector
0CCB   22 EC 23               LD   (vRecurPtr),hl   
0CCE   C3 A0 03               JP   go1   ; execute de
0CD1                GOBLOCK:      
0CD1   ED 53 04 24            LD   (vTemp1),de   ; save de
0CD5   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CD8   FD 54                  LD   d,iyh   
0CDA   FD 5D                  LD   e,iyl   
0CDC   B7                     OR   a   ; if stack* == BP then this is the root_scope
0CDD   ED 52                  SBC   hl,de   
0CDF   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0CE3   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CE4   B4                     OR   h   
0CE5   3E 00                  LD   a,0   
0CE7   28 6A                  JR   z,goFunc8   
0CE9   C5                     PUSH   bc   ; push IP
0CEA   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0CED   FD 46 05               LD   b,(iy+5)   
0CF0   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0CF3   FD 66 03               LD   h,(iy+3)   
0CF6                GOBLOCK2:      
0CF6   C5                     PUSH   bc   ; arg_list*
0CF7   E5                     PUSH   hl   ; first_arg*
0CF8   FD E5                  PUSH   iy   ; push BP
0CFA   FD 21 00 00            LD   iy,0   ; BP = SP
0CFE   FD 39                  ADD   iy,sp   
0D00                GOBLOCK3:      
0D00   42 4B                  LD   bc,de   ; bc = de = block*-1
0D02   DD E9                  JP   (ix)   
0D04                GOFUNC:      ; execute func
0D04   EB                     EX   de,hl   ; hl = func*
0D05   5E                     LD   e,(hl)   ; de = partial_array*
0D06   23                     INC   hl   
0D07   56                     LD   d,(hl)   
0D08   23                     INC   hl   
0D09   7B                     LD   a,e   ; if partial_array* == null skip
0D0A   B2                     OR   d   
0D0B   28 21                  JR   z,goFunc3   
0D0D   ED 43 04 24            LD   (vTemp1),bc   
0D11   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0D14   EB                     EX   de,hl   ; hl = partial_array*
0D15   2B                     DEC   hl   ; bc = count
0D16   46                     LD   b,(hl)   
0D17   2B                     DEC   hl   
0D18   4E                     LD   c,(hl)   
0D19   23                     INC   hl   ; hl = array data*
0D1A   23                     INC   hl   
0D1B   18 06                  JR   goFunc2   ; push each item on stack
0D1D                GOFUNC1:      
0D1D   5E                     LD   e,(hl)   ; de = partial item
0D1E   23                     INC   hl   
0D1F   56                     LD   d,(hl)   
0D20   23                     INC   hl   
0D21   D5                     PUSH   de   ; push on stack
0D22   0B                     DEC   bc   
0D23                GOFUNC2:      
0D23   79                     LD   a,c   ; if count != 0 then loop
0D24   B0                     OR   b   
0D25   20 F6                  JR   nz,goFunc1   
0D27   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0D2B   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0D2E                GOFUNC3:      
0D2E   5E                     LD   e,(hl)   ; de = block*
0D2F   23                     INC   hl   
0D30   56                     LD   d,(hl)   
0D31   23                     INC   hl   
0D32   ED 53 04 24            LD   (vTemp1),de   ; save block*
0D36   5E                     LD   e,(hl)   ; de = arg_list*
0D37   23                     INC   hl   
0D38   56                     LD   d,(hl)   
0D39   23                     INC   hl   
0D3A   EB                     EX   de,hl   ; hl = arg_list*
0D3B   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0D3F   7D                     LD   a,l   ; if arg_list* == null a = 0
0D40   B4                     OR   h   
0D41   20 03                  JR   nz,goFunc4   
0D43   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D44   18 0D                  JR   goFunc8   
0D46                GOFUNC4:      ; allocate locals
0D46   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D47   18 03                  JR   goFunc6   
0D49                GOFUNC5:      ; loop
0D49   3B                     DEC   sp   
0D4A   3B                     DEC   sp   
0D4B   3D                     DEC   a   
0D4C                GOFUNC6:      
0D4C   B7                     OR   a   
0D4D   20 FA                  JR   nz,goFunc5   ; end loop
0D4F                GOFUNC7:      
0D4F   23                     INC   hl   ; a = num_args* x 2
0D50   7E                     LD   a,(hl)   
0D51   2B                     DEC   hl   
0D52   87                     ADD   a,a   ; a *= 2
0D53                GOFUNC8:      
0D53   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D54   44 4D                  LD   bc,hl   
0D56   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D59   85                     ADD   a,l   
0D5A   6F                     LD   l,a   
0D5B   39                     ADD   hl,sp   
0D5C   18 98                  JR   goBlock2   
0D5E                             ; =                              21
0D5E                             ; value _oldValue --            ; uses address in vPointer 15
0D5E                ASSIGN:      
0D5E   E1                     POP   hl   ; discard last accessed value
0D5F   E1                     POP   hl   ; hl = new value
0D60                ASSIGN0:      
0D60   EB                     EX   de,hl   ; de = new value
0D61   2A F8 23               LD   hl,(vPointer)   
0D64                ASSIGN1:      ; entry point from defineEnd
0D64   73                     LD   (hl),e   
0D65   3A EE 23               LD   a,(vDataWidth)   
0D68   3D                     DEC   a   ; is it byte?
0D69   28 02                  JR   z,assign2   
0D6B   23                     INC   hl   
0D6C   72                     LD   (hl),d   
0D6D                ASSIGN2:      
0D6D   DD E9                  JP   (ix)   
0D6F                             ; hl = value1, de = value2
0D6F                             ; hl = result
0D6F                EQUALS:      
0D6F   B7                     OR   a   ; reset the carry flag
0D70   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D72   28 16                  JR   z,true1   
0D74   18 1A                  JR   false1   
0D76                NOTEQUALS:      
0D76   B7                     OR   a   ; reset the carry flag
0D77   ED 52                  SBC   hl,de   
0D79   20 0F                  JR   nz,true1   
0D7B   18 13                  JR   false1   
0D7D                             ; hl = value1 de = value2
0D7D                             ; hl = result
0D7D                LESSTHANEQ:      
0D7D   B7                     OR   a   
0D7E   ED 52                  SBC   hl,de   
0D80   18 05                  JR   lessthan1   
0D82                             ; hl = value1 de = value2
0D82                             ; hl = result
0D82                LESSTHAN:      
0D82   B7                     OR   a   
0D83   ED 52                  SBC   hl,de   
0D85   28 09                  JR   z,false1   
0D87                LESSTHAN1:      
0D87   FA 90 0D               JP   m,false1   
0D8A                TRUE1:       
0D8A   21 FF FF               LD   hl,TRUE   
0D8D   E5                     PUSH   hl   
0D8E   DD E9                  JP   (ix)   
0D90                NULL1:       
0D90                FALSE1:      
0D90   21 00 00               LD   hl,FALSE   
0D93   E5                     PUSH   hl   
0D94   DD E9                  JP   (ix)   
0D96                SPREAD:      
0D96   E1                     POP   hl   ; hl = array*
0D97   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0D9B   2B                     DEC   hl   ; bc = length
0D9C   46                     LD   b,(hl)   
0D9D   2B                     DEC   hl   
0D9E   4E                     LD   c,(hl)   
0D9F   23                     INC   hl   ; move back to array 0
0DA0   23                     INC   hl   
0DA1   18 0D                  JR   spread3   
0DA3                SPREAD1:      
0DA3   5E                     LD   e,(hl)   ; e = lsb data at hl
0DA4   23                     INC   hl   
0DA5   3A EE 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0DA8   57                     LD   d,a   
0DA9   15                     DEC   d   
0DAA   28 02                  JR   z,spread2   
0DAC   56                     LD   d,(hl)   ; d = msb data at hl
0DAD   23                     INC   hl   
0DAE                SPREAD2:      
0DAE   D5                     PUSH   de   ; return de
0DAF   0B                     DEC   bc   ; count--
0DB0                SPREAD3:      
0DB0   79                     LD   a,c   ; exit loop if bc == 0
0DB1   B0                     OR   b   
0DB2   20 EF                  JR   nz,spread1   
0DB4   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0DB8   DD E9                  JP   (ix)   
0DBA                             ; shiftLeft
0DBA                             ; value count <<
0DBA                             ; count variable <<=
0DBA                SHIFTLEFT:      
0DBA   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DBB   D1                     POP   de   
0DBC   03                     INC   bc   
0DBD   0A                     LD   a,(bc)   
0DBE   FE 3D                  CP   "="   
0DC0   28 02                  JR   z,shiftLeft2   
0DC2   0B                     DEC   bc   
0DC3   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0DC4                SHIFTLEFT2:      
0DC4   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DC8   43                     LD   b,e   ; b = loop counter
0DC9   04                     INC   b   ; test for counter=0 case
0DCA   18 01                  JR   shiftLeft4   
0DCC                SHIFTLEFT3:      
0DCC   29                     ADD   hl,hl   ; left shift hl
0DCD                SHIFTLEFT4:      
0DCD   10 FD                  DJNZ   shiftLeft3   
0DCF   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DD3   C3 9D 02               JP   sub3   
0DD6                             ; shiftRight
0DD6                             ; value count >>
0DD6                             ; count variable >>=
0DD6                SHIFTRIGHT:      
0DD6   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DD7   D1                     POP   de   
0DD8   03                     INC   bc   
0DD9   0A                     LD   a,(bc)   
0DDA   FE 3D                  CP   "="   
0DDC   28 02                  JR   z,shiftRight2   
0DDE   0B                     DEC   bc   
0DDF   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0DE0                SHIFTRIGHT2:      
0DE0   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DE4   43                     LD   b,e   ; b = loop counter
0DE5   04                     INC   b   ; test for counter=0 case
0DE6   18 04                  JR   shiftRight4   
0DE8                SHIFTRIGHT3:      
0DE8   CB 3C                  SRL   h   ; right shift hl
0DEA   CB 1D                  RR   l   
0DEC                SHIFTRIGHT4:      
0DEC   10 FA                  DJNZ   shiftRight3   
0DEE   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DF2   C3 9D 02               JP   sub3   
0DF5                             ; division subroutine.
0DF5                             ; bc: divisor, de: dividend, hl: remainder
0DF5                DIVIDE:      
0DF5   21 00 00               LD   hl,0   ; zero the remainder
0DF8   3E 10                  LD   a,16   ; loop counter
0DFA                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0DFA   CB 21                  SLA   c   
0DFC   CB 10                  RL   b   
0DFE   ED 6A                  ADC   hl,hl   
0E00   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E02   38 03                  JR   c,divide2   
0E04   0C                     INC   c   
0E05   18 01                  JR   divide3   
0E07                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E07   19                     ADD   hl,de   
0E08                DIVIDE3:      
0E08   3D                     DEC   a   
0E09   20 EF                  JR   nz,divide1   
0E0B   50 59                  LD   de,bc   ; result from bc to de
0E0D   C9                     RET      
0E0E                DOTNEXT:      
0E0E   3A F2 23               LD   a,(vStrMode)   ; if string mode then exit
0E11   3C                     INC   a   
0E12   20 02                  JR   nz,dotNext1   
0E14   DD E9                  JP   (ix)   
0E16                DOTNEXT1:      
0E16   11 00 22               LD   de,BUFFER   
0E19   2A E8 23               LD   hl,(vBufPtr)   
0E1C   36 00                  LD   (hl),0   ; store NUL at end of string
0E1E   ED 53 E8 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E22   EB                     EX   de,hl   ; hl = BUFFER
0E23   CD D9 0F               CALL   putstr   
0E26   DD E9                  JP   (ix)   
0E28                             ; arg_list - parses arg_list e.g. ab:c
0E28                             ; -- arg_list*
0E28                PARSEARGS:      
0E28   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E2B   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0E2E   E5                     PUSH   hl   ; save start of arg_list
0E2F   23                     INC   hl   ; skip length fields to start of string
0E30   23                     INC   hl   
0E31   03                     INC   bc   ; point to next char
0E32                PARSEARGS1:      
0E32   0A                     LD   a,(bc)   
0E33   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E35   20 03                  JR   nz,parseArgs1a   
0E37   14                     INC   d   ; non zero value local count acts as flag
0E38   18 10                  JR   parseArgs3   
0E3A                PARSEARGS1A:      
0E3A   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E3C   38 0F                  JR   c,parseArgs4   
0E3E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E40   30 0B                  JR   nc,parseArgs4   
0E42                PARSEARGS2:      
0E42   77                     LD   (hl),a   
0E43   23                     INC   hl   
0E44   1C                     INC   e   ; increase arg count
0E45   AF                     XOR   a   
0E46   B2                     OR   d   
0E47   28 01                  JR   z,parseArgs3   
0E49   14                     INC   d   ; if d > 0 increase local count
0E4A                PARSEARGS3:      
0E4A   03                     INC   bc   ; point to next char
0E4B   18 E5                  JR   parseArgs1   
0E4D                PARSEARGS4:      
0E4D   0B                     DEC   bc   
0E4E   AF                     XOR   a   
0E4F   B2                     OR   d   
0E50   28 01                  JR   z,parseArgs5   
0E52   15                     DEC   d   ; remove initial inc
0E53                PARSEARGS5:      
0E53   23                     INC   hl   
0E54   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E57   E1                     POP   hl   ; hl = start of arg_list
0E58   72                     LD   (hl),d   ; write number of locals at start - 1
0E59   23                     INC   hl   
0E5A   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E5B   2B                     DEC   hl   
0E5C   E3                     EX   (sp),hl   
0E5D   E9                     JP   (hl)   
0E5E                             ; create block: parses block e.g. 00bbIC4uLi4g
0E5E                             ; -- block*
0E5E                PARSEBLOCK:      
0E5E   C5                     PUSH   bc   ; return pointer to first { of block
0E5F   03                     INC   bc   
0E60   16 01                  LD   d,1   ; nesting: count first parenthesis
0E62                PARSEBLOCK1:      ; Skip to end of definition
0E62   0A                     LD   a,(bc)   ; Get the next character
0E63   03                     INC   bc   ; Point to next character
0E64   FE 21                  CP   " " + 1   ; ignore whitespace
0E66   38 FA                  JR   c,parseBlock1   
0E68   FE 27                  CP   "'"   ; quote char
0E6A   28 0F                  JR   z,parseBlock2   
0E6C   FE 22                  CP   DQ   ; double quote char
0E6E   28 0B                  JR   z,parseBlock2   
0E70   FE 60                  CP   "`"   ; grave char
0E72   28 07                  JR   z,parseBlock2   
0E74   CB 7A                  BIT   7,d   
0E76   20 EA                  JR   nz,parseBlock1   
0E78   C3 81 0E               JP   parseBlock3   
0E7B                PARSEBLOCK2:      
0E7B   3E 80                  LD   a,$80   
0E7D   AA                     XOR   d   
0E7E   57                     LD   d,a   
0E7F   18 E1                  JR   parseBlock1   
0E81                PARSEBLOCK3:      
0E81   FE 28                  CP   "("   
0E83   28 16                  JR   z,parseBlock4   
0E85   FE 7B                  CP   "{"   
0E87   28 12                  JR   z,parseBlock4   
0E89   FE 5B                  CP   "["   
0E8B   28 0E                  JR   z,parseBlock4   
0E8D   FE 29                  CP   ")"   
0E8F   28 0D                  JR   z,parseBlock5   
0E91   FE 7D                  CP   "}"   
0E93   28 09                  JR   z,parseBlock5   
0E95   FE 5D                  CP   "]"   
0E97   28 05                  JR   z,parseBlock5   
0E99   18 C7                  JR   parseBlock1   
0E9B                PARSEBLOCK4:      
0E9B   14                     INC   d   
0E9C   18 C4                  JR   parseBlock1   
0E9E                PARSEBLOCK5:      
0E9E   15                     DEC   d   
0E9F   20 C1                  JR   nz,parseBlock1   ; get the next element
0EA1   60 69                  LD   hl,bc   ; hl = IP
0EA3   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0EA6   B7                     OR   a   ; IP - HEAP
0EA7   ED 52                  SBC   hl,de   
0EA9   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0EAB   28 1C                  JR   z,parseBlock6   
0EAD   60 69                  LD   hl,bc   ; hl = IP
0EAF   D1                     POP   de   ; de = block*
0EB0   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0EB4   B7                     OR   a   ; bc = size
0EB5   ED 52                  SBC   hl,de   
0EB7   44 4D                  LD   bc,hl   
0EB9   EB                     EX   de,hl   ; hl = block* de = heap*
0EBA   ED 5B EA 23            LD   de,(vHeapPtr)   
0EBE   D5                     PUSH   de   ; return hblock*
0EBF   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EC1   ED 53 EA 23            LD   (vHeapPtr),de   ; heap* += size
0EC5   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0EC9                PARSEBLOCK6:      
0EC9   0B                     DEC   bc   ; balanced, exit
0ECA   E1                     POP   hl   ; hl = block*
0ECB   E3                     EX   (sp),hl   ; return to caller
0ECC   E9                     JP   (hl)   
0ECD                             ; create function
0ECD                             ; arg_list* block* -- func*
0ECD                CREATEFUNC:      
0ECD   E1                     POP   hl   ; save retrn address
0ECE   22 08 24               LD   (vTemp3),hl   
0ED1   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0ED5   E1                     POP   hl   ; hl = block*
0ED6   22 06 24               LD   (vTemp2),hl   ; save block*
0ED9   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0EDC   FD 56 05               LD   d,(iy+5)   
0EDF   7B                     LD   a,e   ; if arg_list == null then make a func
0EE0   B2                     OR   d   
0EE1   20 09                  JR   nz,createFunc0   
0EE3   21 00 00               LD   hl,0   ; partial_array = null
0EE6   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0EEA   18 65                  JR   createFunc5   
0EEC                CREATEFUNC0:      
0EEC   E1                     POP   hl   ; hl = inner_arg_list*
0EED   E5                     PUSH   hl   ; save inner_arg_list
0EEE   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0EF2   7E                     LD   a,(hl)   ; compile inner_num_locals
0EF3   4F                     LD   c,a   ; b = inner_num_locals
0EF4   12                     LD   (de),a   
0EF5   23                     INC   hl   
0EF6   13                     INC   de   
0EF7   7E                     LD   a,(hl)   ; compile inner_length
0EF8   12                     LD   (de),a   
0EF9   91                     SUB   c   ; a = inner_num args
0EFA   23                     INC   hl   
0EFB   13                     INC   de   
0EFC   B7                     OR   a   ; compile args if inner_length > 0
0EFD   28 05                  JR   z,createFunc1   
0EFF   4F                     LD   c,a   ; bc = a
0F00   06 00                  LD   b,0   
0F02   ED B0                  LDIR      
0F04                CREATEFUNC1:      
0F04   EB                     EX   de,hl   ; hl = outer_arg_list
0F05   FD 5E 04               LD   e,(iy+4)   
0F08   FD 56 05               LD   d,(iy+5)   
0F0B   EB                     EX   de,hl   
0F0C   23                     INC   hl   ; a = outer_length
0F0D   7E                     LD   a,(hl)   
0F0E   23                     INC   hl   
0F0F   B7                     OR   a   
0F10   28 05                  JR   z,createFunc2   
0F12   4F                     LD   c,a   
0F13   06 00                  LD   b,0   
0F15   ED B0                  LDIR      ; append outer_args
0F17                CREATEFUNC2:      ; a = outer_length
0F17   47                     LD   b,a   ; b = a = outer_length
0F18   2A EA 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F1B   23                     INC   hl   
0F1C   7E                     LD   a,(hl)   ; add outer_length to new length
0F1D   80                     ADD   a,b   
0F1E   77                     LD   (hl),a   
0F1F   2B                     DEC   hl   
0F20   78                     LD   a,b   ; save outer_length in a'
0F21   08                     EX   af,af'   
0F22   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F23   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F24   B7                     OR   a   
0F25   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F27   4F                     LD   c,a   ; c = inner_num_locals
0F28   06 00                  LD   b,0   ; bc = inner_num_locals
0F2A   23                     INC   hl   ; a = inner_length
0F2B   7E                     LD   a,(hl)   
0F2C   91                     SUB   c   ; a = inner_num_args
0F2D   23                     INC   hl   ; hl = inner_arg_chars
0F2E   85                     ADD   a,l   ; hl += a
0F2F   6F                     LD   l,a   
0F30   3E 00                  LD   a,0   
0F32   84                     ADD   a,h   
0F33   67                     LD   h,a   
0F34   ED B0                  LDIR      ; append inner_locals
0F36                CREATEFUNC2A:      
0F36   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F37   12                     LD   (de),a   ; compile partial_array length field
0F38   13                     INC   de   
0F39   AF                     XOR   a   
0F3A   12                     LD   (de),a   
0F3B   13                     INC   de   
0F3C   D5                     PUSH   de   ; push partial_array*
0F3D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F3E   FD 5E 02               LD   e,(iy+2)   
0F41   FD 56 03               LD   d,(iy+3)   
0F44   EB                     EX   de,hl   
0F45                CREATEFUNC3:      
0F45   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F46   4E                     LD   c,(hl)   
0F47   2B                     DEC   hl   
0F48   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F49   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F4A   13                     INC   de   
0F4B   79                     LD   a,c   
0F4C   12                     LD   (de),a   
0F4D   13                     INC   de   
0F4E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F50                CREATEFUNC4:      
0F50   E1                     POP   hl   ; hl = partial_array*
0F51                CREATEFUNC5:      
0F51   C1                     POP   bc   ; bc = new_arg_list*
0F52   D5                     PUSH   de   ; return new func*
0F53   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F54   73                     LD   (hl),e   ; compile partial_array* to func
0F55   23                     INC   hl   
0F56   72                     LD   (hl),d   
0F57   23                     INC   hl   
0F58   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0F5C   73                     LD   (hl),e   ; compile block* to func
0F5D   23                     INC   hl   
0F5E   72                     LD   (hl),d   
0F5F   23                     INC   hl   
0F60   71                     LD   (hl),c   ; compile new_arg_list* to func
0F61   23                     INC   hl   
0F62   70                     LD   (hl),b   
0F63   23                     INC   hl   
0F64   22 EA 23               LD   (vHeapPtr),hl   ; bump heap ptr
0F67   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0F6B   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0F6E   E9                     JP   (hl)   
0F6F                             ;*******************************************************************
0F6F                             ; general routines
0F6F                             ;*******************************************************************
0F6F                             ; hl = address
0F6F                VARIABLE:      
0F6F   22 F8 23               LD   (vPointer),hl   
0F72   5E                     LD   e,(hl)   
0F73   3A EE 23               LD   a,(vDataWidth)   
0F76   3D                     DEC   a   
0F77   16 00                  LD   d,0   
0F79   28 03                  JR   z,constant   
0F7B   23                     INC   hl   
0F7C   56                     LD   d,(hl)   
0F7D   2B                     DEC   hl   
0F7E                CONSTANT:      
0F7E   D5                     PUSH   de   
0F7F   DD E9                  JP   (ix)   
0F81                             ; followed by a table
0F81                             ; indexed on the 0-25 lowercase letter
0F81                             ; db lsb(addr)
0F81                             ; the final item index 26 matches any other char
0F81                CHARTABLE:      
0F81   03                     INC   bc   
0F82   0A                     LD   a,(bc)   
0F83   FE 7B                  CP   "z"+1   
0F85   30 10                  JR   nc,charTable3   
0F87   D6 61                  SUB   "a"   
0F89   38 0C                  JR   c,charTable3   
0F8B                CHARTABLE1:      
0F8B   E1                     POP   hl   
0F8C   85                     ADD   a,l   
0F8D   6F                     LD   l,a   
0F8E   7E                     LD   a,(hl)   ; must have the same msb as the table
0F8F   B7                     OR   a   ; a = 0, nop
0F90   20 03                  JR   nz,charTable2   
0F92   C3 CA 06               JP   error1   
0F95                CHARTABLE2:      
0F95   6F                     LD   l,a   
0F96   E9                     JP   (hl)   
0F97                CHARTABLE3:      
0F97   3E 1A                  LD   a,26   
0F99   0B                     DEC   bc   
0F9A   18 EF                  JR   charTable1   
0F9C                             ; followed by a table
0F9C                             ; db char
0F9C                             ; db char - if null only match on first char
0F9C                             ; dw addr
0F9C                             ; the final item must have char == NUL
0F9C                CMDTABLE:      
0F9C   E1                     POP   hl   
0F9D                CMDTABLE1:      
0F9D                CMDTABLE2:      
0F9D   56                     LD   d,(hl)   
0F9E   23                     INC   hl   
0F9F   5E                     LD   e,(hl)   
0FA0   23                     INC   hl   
0FA1   AF                     XOR   a   ; if d == 0, matched
0FA2   BA                     CP   d   
0FA3   28 14                  JR   z,cmdTable5   
0FA5   03                     INC   bc   ; match?
0FA6   0A                     LD   a,(bc)   
0FA7   BA                     CP   d   
0FA8   20 0A                  JR   nz,cmdTable4   
0FAA                CMDTABLE3:      
0FAA   AF                     XOR   a   ; if e == 0, matched
0FAB   BB                     CP   e   
0FAC   28 0B                  JR   z,cmdTable5   
0FAE   03                     INC   bc   
0FAF   0A                     LD   a,(bc)   ; match?
0FB0   BB                     CP   e   
0FB1   28 06                  JR   z,cmdTable5   
0FB3   0B                     DEC   bc   
0FB4                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FB4   0B                     DEC   bc   
0FB5   23                     INC   hl   
0FB6   23                     INC   hl   
0FB7   18 E4                  JR   cmdTable2   
0FB9                CMDTABLE5:      ; matched, jump to addr
0FB9   5E                     LD   e,(hl)   
0FBA   23                     INC   hl   
0FBB   56                     LD   d,(hl)   
0FBC   EB                     EX   de,hl   
0FBD   E9                     JP   (hl)   
0FBE                GETVARADDR:      
0FBE   21 00 00               LD   hl,0   
0FC1   FE 7B                  CP   "z"+1   ; if a > z then exit
0FC3   D0                     RET   nc   
0FC4   D6 41                  SUB   "A"   ; a - 65
0FC6   D8                     RET   c   ; if < A then exit
0FC7   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0FC9   38 05                  JR   c,getVarAddr1   
0FCB   D6 06                  SUB   "a"-("Z"+1)   
0FCD   FE 1A                  CP   "Z"-"A"+1   
0FCF   D8                     RET   c   ; if < a then exit
0FD0                GETVARADDR1:      
0FD0   87                     ADD   a,a   ; double a
0FD1   6F                     LD   l,a   
0FD2   26 23                  LD   h,msb(VARS)   
0FD4   C9                     RET      
0FD5                PUTSTR0:      
0FD5   CD 85 00               CALL   putchar   
0FD8   23                     INC   hl   
0FD9                PUTSTR:      
0FD9   7E                     LD   a,(hl)   
0FDA   B7                     OR   a   
0FDB   20 F8                  JR   nz,putstr0   
0FDD   C9                     RET      
0FDE                             ; hl = value
0FDE                             ; de' = buffer*
0FDE                             ; a, bc, de, hl destroyed
0FDE                FORMATDEC:      
0FDE   CB 7C                  BIT   7,h   
0FE0   28 0C                  JR   z,formatDec2   
0FE2   D9                     EXX      
0FE3   3E 2D                  LD   a,"-"   
0FE5   12                     LD   (de),a   
0FE6   13                     INC   de   
0FE7   D9                     EXX      
0FE8   AF                     XOR   a   
0FE9   95                     SUB   l   
0FEA   6F                     LD   l,a   
0FEB   9F                     SBC   a,a   
0FEC   94                     SUB   h   
0FED   67                     LD   h,a   
0FEE                FORMATDEC2:      
0FEE   0E 00                  LD   c,0   ; leading zeros flag = false
0FF0   11 F0 D8               LD   de,-10000   
0FF3   CD 0E 10               CALL   formatDec4   
0FF6   11 18 FC               LD   de,-1000   
0FF9   CD 0E 10               CALL   formatDec4   
0FFC   11 9C FF               LD   de,-100   
0FFF   CD 0E 10               CALL   formatDec4   
1002   1E F6                  LD   e,-10   
1004   CD 0E 10               CALL   formatDec4   
1007   0C                     INC   c   ; flag = true for at least digit
1008   1E FF                  LD   e,-1   
100A   CD 0E 10               CALL   formatDec4   
100D   C9                     RET      
100E                FORMATDEC4:      
100E   06 2F                  LD   b,"0"-1   
1010                FORMATDEC5:      
1010   04                     INC   b   
1011   19                     ADD   hl,de   
1012   38 FC                  JR   c,formatDec5   
1014   ED 52                  SBC   hl,de   
1016   3E 30                  LD   a,"0"   
1018   B8                     CP   b   
1019   20 05                  JR   nz,formatDec6   
101B   AF                     XOR   a   
101C   B1                     OR   c   
101D   C8                     RET   z   
101E   18 01                  JR   formatDec7   
1020                FORMATDEC6:      
1020   0C                     INC   c   
1021                FORMATDEC7:      
1021   78                     LD   a,b   
1022   D9                     EXX      
1023   12                     LD   (de),a   
1024   13                     INC   de   
1025   D9                     EXX      
1026   C9                     RET      
1027                             ; **************************************************************************
1027                             ; calculate nesting value
1027                             ; a is char to be tested,
1027                             ; e is the nesting value (initially 0)
1027                             ; e is increased by ( and [
1027                             ; e is decreased by ) and ]
1027                             ; e has its bit 7 toggled by `
1027                             ; limited to 127 levels
1027                             ; **************************************************************************
1027                NESTING:      
1027   FE 27                  CP   "'"   ; quote char
1029   28 0A                  JR   z,nesting0   
102B   FE 22                  CP   DQ   ; double quote char
102D   28 06                  JR   z,nesting0   
102F   FE 60                  CP   "`"   ; grave char
1031   28 02                  JR   z,nesting0   
1033   18 0A                  JR   nesting1   
1035                NESTING0:      
1035   CB 7B                  BIT   7,e   
1037   28 03                  JR   z,nesting1a   
1039   CB BB                  RES   7,e   
103B   C9                     RET      
103C                NESTING1A:      
103C   CB FB                  SET   7,e   
103E   C9                     RET      
103F                NESTING1:      
103F   CB 7B                  BIT   7,e   
1041   C0                     RET   nz   
1042   FE 7B                  CP   "{"   
1044   28 08                  JR   z,nesting2   
1046   FE 5B                  CP   "["   
1048   28 04                  JR   z,nesting2   
104A   FE 28                  CP   "("   
104C   20 02                  JR   nz,nesting3   
104E                NESTING2:      
104E   1C                     INC   e   
104F   C9                     RET      
1050                NESTING3:      
1050   FE 7D                  CP   "}"   
1052   28 07                  JR   z,nesting4   
1054   FE 5D                  CP   "]"   
1056   28 03                  JR   z,nesting4   
1058   FE 29                  CP   ")"   
105A   C0                     RET   nz   
105B                NESTING4:      
105B   1D                     DEC   e   
105C   C9                     RET      
105D                PROMPT:      
105D   CD 6D 10               CALL   printStr   
1060   0D 0A 3E 20 00         .CSTR   "\r\n> "   
1065   C9                     RET      
1066                CRLF:        
1066   CD 6D 10               CALL   printStr   
1069   0D 0A 00               .CSTR   "\r\n"   
106C   C9                     RET      
106D                             ; prints a null teminated string
106D                             ; the string should be immediately following the call
106D                PRINTSTR:      
106D   E3                     EX   (sp),hl   ; swap			
106E   CD D9 0F               CALL   putstr   
1071   23                     INC   hl   ; inc past NUL
1072   E3                     EX   (sp),hl   ; put it back	
1073   C9                     RET      
1074                INIT:        
1074   21 F0 01               LD   hl,titleStr   
1077   11 0E 24               LD   de,titleBuf   
107A   06 14                  LD   b,20   
107C                INIT1:       
107C   1A                     LD   a,(de)   
107D   BE                     CP   (hl)   
107E   20 17                  JR   nz,coldBoot0   
1080   13                     INC   de   
1081   23                     INC   hl   
1082   10 F8                  DJNZ   init1   
1084                WARMINIT:      
1084   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
1088   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
108C   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
1090   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
1094   C3 CE 10               JP   start1   
1097                COLDBOOT0:      
1097   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
109A   11 0E 24               LD   de,titleBuf   
109D   06 14                  LD   b,20   
109F   ED B0                  LDIR      
10A1                COLDINIT:      
10A1   21 DE 01               LD   hl,isysVars   
10A4   11 E6 23               LD   de,sysVars   
10A7   01 12 00               LD   bc,4 * 2 + 10   
10AA   ED B0                  LDIR      
10AC   21 00 23               LD   hl,vars   ; 52 vars LO HI
10AF   06 34                  LD   b,26*2   
10B1   AF                     XOR   a   
10B2                COLDBOOT1:      
10B2   77                     LD   (hl),a   
10B3   23                     INC   hl   
10B4   10 FC                  DJNZ   coldBoot1   
10B6   DD 21 4A 11            LD   ix,NEXT   
10BA   FD 21 00 21            LD   iy,STACK   
10BE   C9                     RET      
10BF                COLDSTART:      
10BF   31 00 21               LD   sp,STACK   
10C2   CD 97 10               CALL   coldBoot0   
10C5   C3 CE 10               JP   start1   
10C8                START:       
10C8   31 00 21               LD   sp,STACK   ; start Monty
10CB   CD 74 10               CALL   init   ; setups
10CE                START1:      
10CE   21 0E 24               LD   hl,titleBuf   
10D1   CD D9 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
10D4                INTERPRET:      
10D4   CD 5D 10               CALL   prompt   
10D7   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
10DA   21 00 21               LD   hl,TIB   
10DD   22 E6 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
10E0                INTERPRET2:      ; calculate nesting
10E0   1E 00                  LD   e,0   ; initilize nesting value
10E2   C5                     PUSH   bc   ; save offset into TIB,
10E3                             ; bc is also the count of chars in TIB
10E3   21 00 21               LD   hl,TIB   ; hl is start of TIB
10E6   18 06                  JR   interpret4   
10E8                INTERPRET3:      
10E8   7E                     LD   a,(hl)   ; a = char in TIB
10E9   23                     INC   hl   ; inc pointer into TIB
10EA   0B                     DEC   bc   ; dec count of chars in TIB
10EB   CD 27 10               CALL   nesting   ; update nesting value
10EE                INTERPRET4:      
10EE   79                     LD   a,c   ; is count zero?
10EF   B0                     OR   b   
10F0   20 F6                  JR   nz,interpret3   ; if not loop
10F2   C1                     POP   bc   ; restore offset into TIB
10F3                INTERPRET5:      
10F3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
10F6   FE 20                  CP   $20   ; compare to space
10F8   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
10FA   FE 00                  CP   NUL   ; is it end of string? NUL end of string
10FC   28 31                  JR   z,interpret8   
10FE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
1100   28 1A                  JR   z,interpret7   ; if anything else its macro/control
1102   FE 08                  CP   CTRL_H   
1104   CA 80 11               JP   z,backSpace_   
1107   FE 0A                  CP   CTRL_J   
1109   CA 90 11               JP   z,reEdit_   
110C                INTERPRET5A:      
110C   18 D2                  JR   interpret2   
110E                INTERPRET6:      
110E   21 00 21               LD   hl,TIB   
1111   09                     ADD   hl,bc   
1112   77                     LD   (hl),a   ; store the character in textbuf
1113   03                     INC   bc   
1114   CD 85 00               CALL   putchar   ; echo character to screen
1117   CD 27 10               CALL   nesting   
111A   18 D7                  JR   interpret5   ; wait for next character
111C                INTERPRET7:      
111C   21 00 21               LD   hl,TIB   
111F   09                     ADD   hl,bc   
1120   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
1122   23                     INC   hl   
1123   36 0A                  LD   (hl),"\n"   
1125   23                     INC   hl   
1126   03                     INC   bc   
1127   03                     INC   bc   
1128   CD 66 10               CALL   crlf   ; echo character to screen
112B   7B                     LD   a,e   ; if zero nesting append and ETX after \r
112C   B7                     OR   a   
112D   20 C4                  JR   nz,interpret5   
112F                INTERPRET8:      
112F   21 00 21               LD   hl,TIB   
1132   09                     ADD   hl,bc   
1133   22 E6 23               LD   (vTIBPtr),hl   
1136   01 00 21               LD   bc,TIB   
1139   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
113D   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
1141   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
1145   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
1149   0B                     DEC   bc   
114A                NEXT:        
114A   03                     INC   bc   ; Increment the IP
114B   0A                     LD   a,(bc)   ; Get the next character and dispatch
114C   FE 20                  CP   " "   ; whitespace?
114E   28 FA                  JR   z,next   ; space? ignore
1150   38 0D                  JR   c,next1   
1152   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
1154   6F                     LD   l,a   ; index into table
1155   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1157   6E                     LD   l,(hl)   ; get low jump address
1158   24                     INC   h   ; page 2
1159   FE BA                  CP   "Z" - "!" + 1 + $80   
115B   38 01                  JR   c,next0   
115D   24                     INC   h   ; page 3
115E                NEXT0:       
115E   E9                     JP   (hl)   ; Jump to routine
115F                NEXT1:       
115F   FE 00                  CP   NUL   ; end of input string?
1161   28 03                  JR   z,exit   
1163   C3 D4 10               JP   interpret   ; no, other whitespace, macros?
1166                EXIT:        
1166   03                     INC   bc   
1167   60 69                  LD   hl,bc   
1169   E9                     JP   (hl)   
116A                RUN:         
116A   C1                     POP   bc   
116B   0B                     DEC   bc   
116C   DD E9                  JP   (ix)   
116E                ERROR:       
116E   E5                     PUSH   hl   
116F   CD 6A 11               CALL   run   
1172   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
117D   C3 D4 10               JP   interpret   
1180                BACKSPACE_:      
1180   79                     LD   a,c   
1181   B0                     OR   b   
1182   CA E0 10               JP   z,interpret2   
1185   0B                     DEC   bc   
1186   CD 6D 10               CALL   printStr   
1189   08 20 08 00            .CSTR   "\b \b"   
118D   C3 E0 10               JP   interpret2   
1190                REEDIT_:      
1190   CD 6D 10               CALL   printStr   
1193   0D 3E 20 00            .CSTR   "\r> "   
1197   21 00 21               LD   hl,TIB   
119A   18 04                  JR   reEdit1   
119C                REEDIT0:      
119C   CD 85 00               CALL   putchar   
119F   23                     INC   hl   
11A0                REEDIT1:      
11A0   7E                     LD   a,(hl)   
11A1   FE 0D                  CP   "\r"   
11A3   20 F7                  JR   nz,reEdit0   
11A5   11 00 21               LD   de,TIB   
11A8   B7                     OR   a   
11A9   ED 52                  SBC   hl,de   
11AB   44 4D                  LD   bc,hl   
11AD   C3 E0 10               JP   interpret2   
11B0                F1:          
11B0                F2:          
11B0                F3:          
11B0                F4:          
11B0                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VTIBPTR:   DS   2   
23E8                VBUFPTR:   DS   2   
23EA                VHEAPPTR:   DS   2   
23EC                VRECURPTR:   DS   2   
23EE                VDATAWIDTH:   DS   1   
23EF                VNUMBASE:   DS   1   
23F0                VHEXPREFIX:   DS   1   
23F1                VECHO:    DS   1   
23F2                VSTRMODE:   DS   1   
23F3                          DS   1   
23F4                          DS   1   
23F5                          DS   1   
23F6                          DS   1   
23F7                          DS   1   
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                          DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 2576 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
                    > USED AT LINE 2682 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 2579 IN MAIN.asm
                    > USED AT LINE 2647 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2584 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2586 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          0413 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        0422 DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0429 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       042C DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0437 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           0442 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          0450 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTHEX:           045F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          046B DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
PRINTHEX2:          0476 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 683 IN MAIN.asm
PRINTHEX3:          0485 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
PRINTHEX4:          048E DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 719 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 755 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 770 IN MAIN.asm
COMMAND_D_:         0550 DEFINED AT LINE 779 IN MAIN.asm
COMMAND_E_:         055B DEFINED AT LINE 786 IN MAIN.asm
COMMAND_F_:         056A DEFINED AT LINE 795 IN MAIN.asm
COMMAND_H_:         0595 DEFINED AT LINE 819 IN MAIN.asm
COMMAND_I_:         05A0 DEFINED AT LINE 826 IN MAIN.asm
COMMAND_M_:         05AB DEFINED AT LINE 833 IN MAIN.asm
COMAND_O_:          05BE DEFINED AT LINE 844 IN MAIN.asm
COMMAND_P_:         05C9 DEFINED AT LINE 851 IN MAIN.asm
COMMAND_R_:         05D0 DEFINED AT LINE 856 IN MAIN.asm
COMMAND_S_:         05D2 DEFINED AT LINE 859 IN MAIN.asm
COMMAND_T_:         05D4 DEFINED AT LINE 862 IN MAIN.asm
COMMAND_V_:         05D6 DEFINED AT LINE 865 IN MAIN.asm
COMMAND_W_:         05D8 DEFINED AT LINE 868 IN MAIN.asm
COMMAND_X_:         05DA DEFINED AT LINE 871 IN MAIN.asm
COMMAND_DEFAULT_:   05DC DEFINED AT LINE 874 IN MAIN.asm
COMMAND_R:          05DF DEFINED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
COMMAND_S:          05F6 DEFINED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
COMMAND_T:          0619 DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
COMMAND_V:          0624 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
COMMAND_W:          0633 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
COMMAND_X:          0642 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
COMMAND_DEFAULT:    064D DEFINED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
DIV:                0654 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
DIV2:               065E DEFINED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
ABSOLUTE:           066F DEFINED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
ABSOLUTE1:          067A DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
ADDROF:             067D DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
ADDROF2:            0683 DEFINED AT LINE 994 IN MAIN.asm
ARRAYLENGTH:        0685 DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
ARRAYLENGTH1:       068B DEFINED AT LINE 1006 IN MAIN.asm
WHILE:              068E DEFINED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
WHILE1:             0695 DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
BYTEMODE:           06A8 DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
BYTEMODE1:          06AA DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
COMMENT:            06AF DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
DECBASE:            06B8 DEFINED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
DECBASE1:           06BA DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
ECHO:               06BF DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
HEXBASE:            06C5 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ERROR1:             06CA DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
INPUT:              06D0 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
MEMALLOCATE:        06DB DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
MEMFREE:            06DD DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
MEMFREE1:           06DE DEFINED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
MEMFREEARRAY:       06E3 DEFINED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
MAXIMUM:            06E8 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
MAXIMUM1:           06F2 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
MINIMUM:            06F4 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
MINIMUM1:           06FE DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
OUTPUT:             0700 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
RETURN:             0709 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
RETURN1:            0710 DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
RECUR:              0713 DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
REMAIN:             0719 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
SELECT:             071F DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
SELECT1:            072A DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
SELECT1A:           073B DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
SELECT1B:           073C DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
SELECT2:            073F DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
STRINGBEGIN:        0746 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
STRINGEND:          074E DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
STRINGEND1:         0775 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
STRINGLENGTH:       077D DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
STRINGLENGTH1:      0783 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
STRINGLENGTH2:      0785 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
STRINGLENGTH3:      0789 DEFINED AT LINE 1241 IN MAIN.asm
STRINGCOMPARE:      078C DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
STRINGCOMPARE1:     078E DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
STRINGCOMPARE2:     0799 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
STRINGCOMPARE3:     079E DEFINED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
STRINGCOMPARE4:     07A1 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
VARIABLES:          07A4 DEFINED AT LINE 1271 IN MAIN.asm
VOID:               07AA DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
WORDMODE:           07B2 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
XOR:                07B7 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
XOR1:               07B8 DEFINED AT LINE 1292 IN MAIN.asm
RANGESRC:           07C2 DEFINED AT LINE 32
                    > USED AT LINE 890 IN MAIN.asm
RANGESRCM_1723S1308: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          085B DEFINED AT LINE 32
                    > USED AT LINE 762 IN MAIN.asm
ARRAYITERM_1742S1328: 0868 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08E3 DEFINED AT LINE 32
                    > USED AT LINE 903 IN MAIN.asm
STRINGITERM_1761S1348: 08F0 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0973 DEFINED AT LINE 32
                    > USED AT LINE 836 IN MAIN.asm
MAPM_1781S1370:     0980 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09B5 DEFINED AT LINE 32
                    > USED AT LINE 807 IN MAIN.asm
FILTERM_1795S1385:  09C3 DEFINED AT LINE 39
                    > USED AT LINE 35
SCAN1:              0A16 DEFINED AT LINE 32
                    > USED AT LINE 897 IN MAIN.asm
SCAN1M_1814S1405:   0A25 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A67 DEFINED AT LINE 32
                    > USED AT LINE 800 IN MAIN.asm
FOREACHM_1828S1420: 0A75 DEFINED AT LINE 39
                    > USED AT LINE 35
SOURCE:             0AB3 DEFINED AT LINE 32
                    > USED AT LINE 907 IN MAIN.asm
SOURCEM_1842S1435:  0ABF DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0AEE DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1852S1446: 0AFC DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B38 DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B47 DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
READSTRING:         0B50 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B55 DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
READSTRING2:        0B69 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
READNUMBER:         0B72 DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1463 IN MAIN.asm
PERFORMM_1896S1495: 0B7B DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0B99 DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
PERFORMM_1913S1512: 0BA0 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0BA3 DEFINED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
PERFORMM_1917S1516: 0BAA DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0BAB DEFINED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
TILDE:              0BB1 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BB1 DEFINED AT LINE 1526 IN MAIN.asm
DOLLAR:             0BBB DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0BBB DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0BBE DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
HEXNUM2:            0BC6 DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
QUESTION:           0BD8 DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0BD8 DEFINED AT LINE 1562 IN MAIN.asm
QUOTE:              0BE5 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0BE5 DEFINED AT LINE 1576 IN MAIN.asm
STRING1:            0BEE DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
STRING2:            0BF1 DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
STRING3:            0BF7 DEFINED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
PERCENT:            0BFF DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0BFF DEFINED AT LINE 1603 IN MAIN.asm
ARG0:               0C1B DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
ARG0A:              0C24 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
ARG1:               0C29 DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
ARG1A:              0C31 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
NUM:                0C34 DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C3D DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
NUM1:               0C3E DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
NUM2:               0C56 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
NUM3:               0C61 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
RBRACE:             0C64 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C64 DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
BLOCKEND1:          0C96 DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
BLOCKEND2:          0CA2 DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
BLOCKEND3:          0CB4 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
BLOCKEND4:          0CC8 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
GOBLOCK:            0CD1 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0CF6 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
GOBLOCK3:           0D00 DEFINED AT LINE 1766 IN MAIN.asm
GOFUNC:             0D04 DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D1D DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
GOFUNC2:            0D23 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
GOFUNC3:            0D2E DEFINED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
GOFUNC4:            0D46 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
GOFUNC5:            0D49 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
GOFUNC6:            0D4C DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1821 IN MAIN.asm
GOFUNC7:            0D4F DEFINED AT LINE 1829 IN MAIN.asm
GOFUNC8:            0D53 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
ASSIGN:             0D5E DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D60 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D64 DEFINED AT LINE 1851 IN MAIN.asm
ASSIGN2:            0D6D DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
EQUALS:             0D6F DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D76 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0D7D DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0D82 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0D87 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
TRUE1:              0D8A DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
NULL1:              0D90 DEFINED AT LINE 1896 IN MAIN.asm
FALSE1:             0D90 DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
SPREAD:             0D96 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0DA3 DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
SPREAD2:            0DAE DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
SPREAD3:            0DB0 DEFINED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
SHIFTLEFT:          0DBA DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0DC4 DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
SHIFTLEFT3:         0DCC DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
SHIFTLEFT4:         0DCD DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
SHIFTRIGHT:         0DD6 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0DE0 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
SHIFTRIGHT3:        0DE8 DEFINED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
SHIFTRIGHT4:        0DEC DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
DIVIDE:             0DF5 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
DIVIDE1:            0DFA DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
DIVIDE2:            0E07 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
DIVIDE3:            0E08 DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
DOTNEXT:            0E0E DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
DOTNEXT1:           0E16 DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
PARSEARGS:          0E28 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E32 DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
PARSEARGS1A:        0E3A DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
PARSEARGS2:         0E42 DEFINED AT LINE 2037 IN MAIN.asm
PARSEARGS3:         0E4A DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
PARSEARGS4:         0E4D DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
PARSEARGS5:         0E53 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
PARSEBLOCK:         0E5E DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E62 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
PARSEBLOCK2:        0E7B DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
PARSEBLOCK3:        0E81 DEFINED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
PARSEBLOCK4:        0E9B DEFINED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
PARSEBLOCK5:        0E9E DEFINED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
PARSEBLOCK6:        0EC9 DEFINED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
CREATEFUNC:         0ECD DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0EEC DEFINED AT LINE 2150 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
CREATEFUNC1:        0F04 DEFINED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
CREATEFUNC2:        0F17 DEFINED AT LINE 2182 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
CREATEFUNC2A:       0F36 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
CREATEFUNC3:        0F45 DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
CREATEFUNC4:        0F50 DEFINED AT LINE 2231 IN MAIN.asm
CREATEFUNC5:        0F51 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
VARIABLE:           0F6F DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
CONSTANT:           0F7E DEFINED AT LINE 2270 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
CHARTABLE:          0F81 DEFINED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
CHARTABLE1:         0F8B DEFINED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
CHARTABLE2:         0F95 DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
CHARTABLE3:         0F97 DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
CMDTABLE:           0F9C DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
CMDTABLE1:          0F9D DEFINED AT LINE 2308 IN MAIN.asm
CMDTABLE2:          0F9D DEFINED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
CMDTABLE3:          0FAA DEFINED AT LINE 2321 IN MAIN.asm
CMDTABLE4:          0FB4 DEFINED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
CMDTABLE5:          0FB9 DEFINED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
GETVARADDR:         0FBE DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
GETVARADDR1:        0FD0 DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2349 IN MAIN.asm
PUTSTR0:            0FD5 DEFINED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
PUTSTR:             0FD9 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2543 IN MAIN.asm
FORMATDEC:          0FDE DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
FORMATDEC2:         0FEE DEFINED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2373 IN MAIN.asm
FORMATDEC4:         100E DEFINED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
FORMATDEC5:         1010 DEFINED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
FORMATDEC6:         1020 DEFINED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
FORMATDEC7:         1021 DEFINED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
NESTING:            1027 DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
NESTING0:           1035 DEFINED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
NESTING1A:          103C DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
NESTING1:           103F DEFINED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
NESTING2:           104E DEFINED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
NESTING3:           1050 DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
NESTING4:           105B DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
PROMPT:             105D DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
CRLF:               1066 DEFINED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
PRINTSTR:           106D DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2672 IN MAIN.asm
                    > USED AT LINE 2677 IN MAIN.asm
INIT:               1074 DEFINED AT LINE 2491 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
INIT1:              107C DEFINED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
WARMINIT:           1084 DEFINED AT LINE 2503 IN MAIN.asm
COLDBOOT0:          1097 DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
COLDINIT:           10A1 DEFINED AT LINE 2516 IN MAIN.asm
COLDBOOT1:          10B2 DEFINED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
COLDSTART:          10BF DEFINED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
START:              10C8 DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 7
START1:             10CE DEFINED AT LINE 2541 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
INTERPRET:          10D4 DEFINED AT LINE 2545 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
                    > USED AT LINE 2665 IN MAIN.asm
INTERPRET2:         10E0 DEFINED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2590 IN MAIN.asm
                    > USED AT LINE 2670 IN MAIN.asm
                    > USED AT LINE 2674 IN MAIN.asm
                    > USED AT LINE 2692 IN MAIN.asm
INTERPRET3:         10E8 DEFINED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
INTERPRET4:         10EE DEFINED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
INTERPRET5:         10F3 DEFINED AT LINE 2574 IN MAIN.asm
                    > USED AT LINE 2600 IN MAIN.asm
                    > USED AT LINE 2615 IN MAIN.asm
INTERPRET5A:        110C DEFINED AT LINE 2589 IN MAIN.asm
INTERPRET6:         110E DEFINED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2578 IN MAIN.asm
INTERPRET7:         111C DEFINED AT LINE 2602 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
INTERPRET8:         112F DEFINED AT LINE 2617 IN MAIN.asm
                    > USED AT LINE 2580 IN MAIN.asm
NEXT:               114A DEFINED AT LINE 2630 IN MAIN.asm
                    > USED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
NEXT0:              115E DEFINED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2642 IN MAIN.asm
NEXT1:              115F DEFINED AT LINE 2646 IN MAIN.asm
                    > USED AT LINE 2635 IN MAIN.asm
EXIT:               1166 DEFINED AT LINE 2651 IN MAIN.asm
                    > USED AT LINE 2648 IN MAIN.asm
RUN:                116A DEFINED AT LINE 2656 IN MAIN.asm
                    > USED AT LINE 2663 IN MAIN.asm
ERROR:              116E DEFINED AT LINE 2661 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
BACKSPACE_:         1180 DEFINED AT LINE 2667 IN MAIN.asm
                    > USED AT LINE 2585 IN MAIN.asm
REEDIT_:            1190 DEFINED AT LINE 2676 IN MAIN.asm
                    > USED AT LINE 2587 IN MAIN.asm
REEDIT0:            119C DEFINED AT LINE 2681 IN MAIN.asm
                    > USED AT LINE 2687 IN MAIN.asm
REEDIT1:            11A0 DEFINED AT LINE 2684 IN MAIN.asm
                    > USED AT LINE 2680 IN MAIN.asm
F1:                 11B0 DEFINED AT LINE 10
                    > USED AT LINE 809 IN MAIN.asm
F2:                 11B0 DEFINED AT LINE 11
                    > USED AT LINE 811 IN MAIN.asm
F3:                 11B0 DEFINED AT LINE 12
                    > USED AT LINE 813 IN MAIN.asm
F4:                 11B0 DEFINED AT LINE 13
                    > USED AT LINE 815 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
                    > USED AT LINE 2558 IN MAIN.asm
                    > USED AT LINE 2594 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
                    > USED AT LINE 2679 IN MAIN.asm
                    > USED AT LINE 2688 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2518 IN MAIN.asm
VTIBPTR:            23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
VBUFPTR:            23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
VHEAPPTR:           23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
VRECURPTR:          23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
VDATAWIDTH:         23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
VNUMBASE:           23EF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
VHEXPREFIX:         23F0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 674 IN MAIN.asm
VECHO:              23F1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
VSTRMODE:           23F2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2624 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2625 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2507 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
TBPTR:              240C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
