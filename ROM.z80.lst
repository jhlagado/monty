0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 E3 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   22 24                  DW   HEAP   ; vStrPtr pointer into BUF
01E6   6F 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 23            LD   de,(vPointer)   
0208   21 F8 23               LD   hl,vPointer   
020B   C3 9B 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 51 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 BC 04               JP   percent   
021C                RBRACE_:      
021C   C3 A4 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 92 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 11 0C               JP   caret   
0228                COMMA_:      
0228   C3 E3 0A               JP   comma   
022B                DQUOTE_:      
022B   C3 92 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 E3 0A               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD E9 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 23               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 23            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 8E 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 23               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 23                  LD   h,msb(vars)   
02BA   22 F8 23               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 23               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 23               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 23               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 23               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 12 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 12 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD B0 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 8E 0F               JP   error   
0416                LAMBDA2:      
0416   CD E9 0C               CALL   parseBlock   
0419   CD 57 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 23            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                GRAVE:       
047C                PRINTSTRING:      
047C   03                     INC   bc   ; move to first char
047D   ED 5B EC 23            LD   de,(vStrPtr)   ; de = buffer*
0481   18 03                  JR   printString1   
0483                PRINTSTRING0:      
0483   12                     LD   (de),a   ; a -> buffer*
0484   13                     INC   de   ; string*++,
0485   03                     INC   bc   
0486                PRINTSTRING1:      
0486   0A                     LD   a,(bc)   ; a <- string*
0487   FE 60                  CP   "`"   ; if ` exit loop
0489   20 F8                  JR   nz,printString0   
048B                             ; inc bc
048B   ED 53 EC 23            LD   (vStrPtr),de   ; save buffer*' in pointer
048F   C3 E5 0A               JP   dotNext   
0492                             ; string                        ;38
0492                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0492                QUOTE:       
0492                DQUOTE:      
0492                STRING:      
0492   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0495   23                     INC   hl   ; skip length field to start
0496   23                     INC   hl   
0497   E5                     PUSH   hl   ; save start of string
0498   0A                     LD   a,(bc)   
0499   5F                     LD   e,a   ; e = matching terminator
049A   03                     INC   bc   ; point to next char
049B   18 03                  JR   string2   
049D                STRING1:      
049D   77                     LD   (hl),a   
049E   23                     INC   hl   ; increase count
049F   03                     INC   bc   ; point to next char
04A0                STRING2:      
04A0   0A                     LD   a,(bc)   
04A1   BB                     CP   e   ; is it the string terminator
04A2   28 02                  JR   z,string3   
04A4   18 F7                  JR   string1   
04A6                STRING3:      
04A6   AF                     XOR   a   ; write NUL to terminate string
04A7   77                     LD   (hl),a   ; hl = end of string
04A8   23                     INC   hl   
04A9   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04AC   22 EC 23               LD   (vStrPtr),hl   
04AF   2B                     DEC   hl   ; hl = end of string without terminator
04B0   D1                     POP   de   ; de = start of string
04B1   D5                     PUSH   de   ; return start of string
04B2   B7                     OR   a   ; hl = length bytes, de = start of string
04B3   ED 52                  SBC   hl,de   
04B5   EB                     EX   de,hl   
04B6   2B                     DEC   hl   ; write length bytes to length field at start - 2
04B7   72                     LD   (hl),d   
04B8   2B                     DEC   hl   
04B9   73                     LD   (hl),e   
04BA   DD E9                  JP   (ix)   
04BC                             ; %a .. %z                      43
04BC                             ; -- value
04BC                             ; returns value of arg
04BC                PERCENT:      
04BC                ARG:         
04BC   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04BF   FD 56 05               LD   d,(iy+5)   
04C2   EB                     EX   de,hl   
04C3   7D                     LD   a,l   ; arg_list* == null, skip
04C4   B4                     OR   h   
04C5   28 1A                  JR   z,arg0a   
04C7   23                     INC   hl   ; a = num_args, hl = arg_list*
04C8   7E                     LD   a,(hl)   
04C9   23                     INC   hl   
04CA   B7                     OR   a   
04CB   28 14                  JR   z,arg0a   ; num_args == 0, skip
04CD   5F                     LD   e,a   ; e = a = num_args
04CE   03                     INC   bc   ; a = next char = dollar_name
04CF   0A                     LD   a,(bc)   
04D0   C5                     PUSH   bc   ; save IP
04D1   43                     LD   b,e   ; b = e = num_args
04D2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04D5   FD 56 03               LD   d,(iy+3)   
04D8                ARG0:        
04D8   1B                     DEC   de   ; a = dollar_name, de = next arg*
04D9   1B                     DEC   de   
04DA   BE                     CP   (hl)   
04DB   28 09                  JR   z,arg1   
04DD   23                     INC   hl   ; hl = next arg_list*
04DE   10 F8                  DJNZ   arg0   
04E0   C1                     POP   bc   ; no match, restore IP
04E1                ARG0A:       
04E1   11 00 00               LD   de,0   ; return 0
04E4   18 08                  JR   arg1a   
04E6                ARG1:        
04E6   C1                     POP   bc   ; restore IP
04E7   EB                     EX   de,hl   ; hl = arg*
04E8   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
04EB   5E                     LD   e,(hl)   
04EC   23                     INC   hl   
04ED   56                     LD   d,(hl)   ; de = arg
04EE                ARG1A:       
04EE   D5                     PUSH   de   ; push arg
04EF   DD E9                  JP   (ix)   
04F1                             ;********************** PAGE 3,4 END *********************************************
04F1                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 10 0E               CALL   jumpTable   
0503   61                     DB   "a"   ; .a print array
0504   0E                     DB   lsb(dotArray_)   
0505   63                     DB   "c"   ; .c print char
0506   C2                     DB   lsb(dotChar_)   
0507   73                     DB   "s"   ; .s print string
0508   AC                     DB   lsb(dotString_)   
0509   00                     DB   NUL   ; .  print number
050A   C3 12 05               JP   dotNumber_   
050D                          ALIGN   2   
050E                DOTARRAY_:      
050E   C3 9B 0A               JP   dotArray   
0511                             ; /bd buffer decimal
0511                             ; value --
0511                          ALIGN   2   
0512                DOTNUMBER_:      
0512   3A E8 23               LD   a,(vNumBase)   
0515   FE 10                  CP   16   
0517   CA 7B 05               JP   z,dotHex   ; else falls through
051A   C3 1D 05               JP   dotDec   
051D                             ; print decimal                 ; 70
051D                             ; value --
051D                DOTDEC:      
051D   ED 5B EC 23            LD   de,(vStrPtr)   ; de"= buffer* bc" = IP
0521   D9                     EXX      
0522   E1                     POP   hl   ; hl = value
0523   CD 32 05               CALL   dotDec0   
0526   D9                     EXX      ; de = buffer*' bc = IP
0527   3E 20                  LD   a," "   ; append space to buffer
0529   12                     LD   (de),a   
052A   13                     INC   de   ; string*++,
052B   ED 53 EC 23            LD   (vStrPtr),de   ; update buffer* with buffer*'
052F   C3 E5 0A               JP   dotNext   
0532                             ; hl = value
0532                             ; de' = buffer*
0532                             ; a, bc, de, hl destroyed
0532                DOTDEC0:      
0532   CB 7C                  BIT   7,h   
0534   28 0C                  JR   z,dotDec1   
0536   D9                     EXX      
0537   3E 2D                  LD   a,"-"   
0539   12                     LD   (de),a   
053A   13                     INC   de   
053B   D9                     EXX      
053C   AF                     XOR   a   
053D   95                     SUB   l   
053E   6F                     LD   l,a   
053F   9F                     SBC   a,a   
0540   94                     SUB   h   
0541   67                     LD   h,a   
0542                DOTDEC1:      
0542   0E 00                  LD   c,0   ; leading zeros flag = false
0544   11 F0 D8               LD   de,-10000   
0547   CD 62 05               CALL   dotDec2   
054A   11 18 FC               LD   de,-1000   
054D   CD 62 05               CALL   dotDec2   
0550   11 9C FF               LD   de,-100   
0553   CD 62 05               CALL   dotDec2   
0556   1E F6                  LD   e,-10   
0558   CD 62 05               CALL   dotDec2   
055B   0C                     INC   c   ; flag = true for at least digit
055C   1E FF                  LD   e,-1   
055E   CD 62 05               CALL   dotDec2   
0561   C9                     RET      
0562                DOTDEC2:      
0562   06 2F                  LD   b,"0"-1   
0564                DOTDEC3:      
0564   04                     INC   b   
0565   19                     ADD   hl,de   
0566   38 FC                  JR   c,dotDec3   
0568   ED 52                  SBC   hl,de   
056A   3E 30                  LD   a,"0"   
056C   B8                     CP   b   
056D   20 05                  JR   nz,dotDec4   
056F   AF                     XOR   a   
0570   B1                     OR   c   
0571   C8                     RET   z   
0572   18 01                  JR   dotDec5   
0574                DOTDEC4:      
0574   0C                     INC   c   
0575                DOTDEC5:      
0575   78                     LD   a,b   
0576   D9                     EXX      
0577   12                     LD   (de),a   
0578   13                     INC   de   
0579   D9                     EXX      
057A   C9                     RET      
057B                             ; buffer hex                    37
057B                             ; value --
057B                DOTHEX:      
057B   E1                     POP   hl   ; hl = value
057C   ED 5B EC 23            LD   de,(vStrPtr)   
0580   3E 24                  LD   a,"$"   ; # prefix
0582   12                     LD   (de),a   
0583   13                     INC   de   ; string*++,
0584   7C                     LD   a,h   
0585   CD 97 05               CALL   dotHex1   
0588   7D                     LD   a,l   
0589   CD 97 05               CALL   dotHex1   
058C   3E 20                  LD   a," "   ; append space to buffer
058E   12                     LD   (de),a   
058F   13                     INC   de   ; string*++,
0590   ED 53 EC 23            LD   (vStrPtr),de   
0594   C3 E5 0A               JP   dotNext   
0597                DOTHEX1:      
0597   F5                     PUSH   af   
0598   1F                     RRA      
0599   1F                     RRA      
059A   1F                     RRA      
059B   1F                     RRA      
059C   CD A0 05               CALL   dotHex2   
059F   F1                     POP   af   
05A0                DOTHEX2:      
05A0   E6 0F                  AND   0x0F   
05A2   C6 90                  ADD   a,0x90   
05A4   27                     DAA      
05A5   CE 40                  ADC   a,0x40   
05A7   27                     DAA      
05A8   12                     LD   (de),a   
05A9   13                     INC   de   ; string*++,
05AA   C9                     RET      
05AB                             ; /bs buffered string
05AB                             ; string* --
05AB                          ALIGN   2   
05AC                DOTSTRING_:      
05AC   E1                     POP   hl   ; hl = string*
05AD   ED 5B EC 23            LD   de,(vStrPtr)   ; de = buffer*
05B1   18 03                  JR   dotString1   
05B3                DOTSTRING0:      
05B3   12                     LD   (de),a   ; a -> buffer*
05B4   13                     INC   de   ; string*++,
05B5   23                     INC   hl   
05B6                DOTSTRING1:      
05B6   7E                     LD   a,(hl)   ; a <- string*
05B7   B7                     OR   a   ; if NUL exit loop
05B8   20 F9                  JR   nz,dotString0   
05BA   ED 53 EC 23            LD   (vStrPtr),de   ; save buffer*' in pointer
05BE   C3 E5 0A               JP   dotNext   
05C1                             ; .c print char
05C1                             ; char --
05C1                          ALIGN   2   
05C2                DOTCHAR_:      
05C2   E1                     POP   hl   ; a = char
05C3   7D                     LD   a,l   
05C4   ED 5B EC 23            LD   de,(vStrPtr)   ; de = buffer*
05C8   12                     LD   (de),a   
05C9   13                     INC   de   
05CA   ED 53 EC 23            LD   (vStrPtr),de   ; save buffer*'
05CE   C3 E5 0A               JP   dotNext   
05D1                             ;********************** PAGE 5 END *********************************************
05D1                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA C6 06               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD FC 0D               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   35                     DB   lsb(command_b_)   
060D   97                     DB   lsb(command_nop_)   
060E   99                     DB   lsb(decimal_)   
060F   97                     DB   lsb(command_nop_)   
0610   FF                     DB   lsb(command_f_)   
0611   97                     DB   lsb(command_nop_)   
0612   AB                     DB   lsb(hexadecimal_)   
0613   40                     DB   lsb(command_i_)   
0614   97                     DB   lsb(command_nop_)   
0615   F4                     DB   lsb(key_)   
0616   97                     DB   lsb(command_nop_)   
0617   8B                     DB   lsb(command_m_)   
0618   97                     DB   lsb(command_nop_)   
0619   FD                     DB   lsb(output_)   
061A   49                     DB   lsb(command_p_)   
061B   50                     DB   lsb(command_q_)   
061C   8E                     DB   lsb(command_r_)   
061D   91                     DB   lsb(command_s_)   
061E   B1                     DB   lsb(true_)   
061F   97                     DB   lsb(command_nop_)   
0620   94                     DB   lsb(command_v_)   
0621   B4                     DB   lsb(words_)   
0622   E9                     DB   lsb(xor_)   
0623   97                     DB   lsb(command_nop_)   
0624   97                     DB   lsb(command_nop_)   
0625   A1                     DB   lsb(div_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   CD 10 0E               CALL   jumpTable   
0629   62                     DB   "b"   ; /ab absolute
062A   59                     DB   lsb(absolute_)   
062B   64                     DB   "d"   ; /ad address of
062C   B7                     DB   lsb(addrOf_)   
062D   69                     DB   "i"   ; /ad address of
062E   BA                     DB   lsb(arrayIter_)   
062F   73                     DB   "s"   ; /as array size
0630   E1                     DB   lsb(arraySize_)   
0631   00                     DB   NUL   
0632   C3 A5 06               JP   error1_   
0635                COMMAND_B_:      
0635   CD 10 0E               CALL   jumpTable   
0638   72                     DB   "r"   ; /br break
0639   66                     DB   lsb(break_)   
063A   79                     DB   "y"   ; /by cold boot
063B   BD                     DB   lsb(coldStart_)   
063C   00                     DB   NUL   
063D   C3 CF 06               JP   bytes_   ; /b bytes
0640                             ; 6
0640                COMMAND_I_:      
0640   CD 10 0E               CALL   jumpTable   
0643   6E                     DB   "n"   ; /in input
0644   80                     DB   lsb(input_)   
0645   00                     DB   NUL   
0646   C3 A5 06               JP   error1_   
0649                             ; 4
0649                COMMAND_P_:      
0649   CD 10 0E               CALL   jumpTable   
064C   00                     DB   NUL   
064D   C3 A5 06               JP   error1_   
0650                             ; 6
0650                COMMAND_Q_:      
0650   CD 10 0E               CALL   jumpTable   
0653   74                     DB   "t"   ; /qt quit
0654   D7                     DB   lsb(quit_)   
0655   00                     DB   NUL   
0656   C3 A5 06               JP   error1_   
0659                             ; 14
0659                             ; /ab absolute
0659                             ; num -- num
0659                ABSOLUTE_:      
0659   E1                     POP   hl   
065A   CB 7C                  BIT   7,h   
065C   C8                     RET   z   
065D   AF                     XOR   a   
065E   95                     SUB   l   
065F   6F                     LD   l,a   
0660   9F                     SBC   a,a   
0661   94                     SUB   h   
0662   67                     LD   h,a   
0663   E5                     PUSH   hl   
0664   DD E9                  JP   (ix)   
0666                             ; 8
0666                             ; 13
0666                             ; /br break from loop
0666                             ; --
0666                BREAK_:      
0666                BREAK:       
0666   E1                     POP   hl   ; hl = condition, break if false
0667   7D                     LD   a,l   
0668   B4                     OR   h   
0669   28 02                  JR   z,break1   
066B   DD E9                  JP   (ix)   
066D                BREAK1:      
066D   FD 5D                  LD   e,iyl   ; get block* just under stack frame
066F   FD 54                  LD   d,iyh   
0671   21 08 00               LD   hl,8   
0674   19                     ADD   hl,de   
0675   23                     INC   hl   
0676   23                     INC   hl   
0677   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
067A   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
067D   C3 A4 0B               JP   blockEnd   
0680                             ; 11
0680                             ; Z80 port input
0680                             ; port -- value
0680                INPUT_:      
0680   E1                     POP   hl   
0681   59                     LD   e,c   ; save IP
0682   4D                     LD   c,l   
0683   ED 68                  IN   l,(c)   
0685   26 00                  LD   h,0   
0687   4B                     LD   c,e   ; restore IP
0688   E5                     PUSH   hl   
0689   DD E9                  JP   (ix)   
068B                             ; 2
068B                COMMAND_M_:      
068B   C3 21 07               JP   command_m   
068E                             ; 2
068E                COMMAND_R_:      
068E   C3 2A 07               JP   command_r   
0691                             ; 2
0691                COMMAND_S_:      
0691   C3 46 07               JP   command_s   
0694                             ; 2
0694                COMMAND_V_:      
0694   C3 37 07               JP   command_v   
0697                             ; 2
0697                COMMAND_NOP_:      
0697   DD E9                  JP   (ix)   
0699                             ; 5
0699                DECIMAL_:      
0699   21 0A 00               LD   hl,10   
069C                DECIMAL1:      
069C   22 E8 23               LD   (vNumBase),hl   
069F   DD E9                  JP   (ix)   
06A1                             ; 3
06A1                DIV_:        
06A1   00                     DB   NUL   
06A2   C3 22 04               JP   div   
06A5                             ; 3
06A5                ERROR1_:      
06A5   21 01 00               LD   hl,1   ; error 1: unknown command
06A8   C3 8E 0F               JP   error   
06AB                             ; 3
06AB                HEXADECIMAL_:      
06AB   21 10 00               LD   hl,16   
06AE   C3 9C 06               JP   decimal1   
06B1                             ; 2
06B1                TRUE_:       
06B1   C3 9C 03               JP   true1   
06B4                             ; 2
06B4                WORDS_:      
06B4   C3 C0 06               JP   words   
06B7                             ; ; 2
06B7                ADDROF_:      
06B7   C3 30 0B               JP   addrOf   
06BA                             ; 2
06BA                ARRAYITER_:      
06BA   C3 1D 08               JP   arrayIter   
06BD                             ; 3
06BD                             ; /by
06BD                COLDSTART_:      
06BD   C3 DA 0E               JP   coldStart   
06C0                             ; 4
06C0                             ; /w
06C0                WORDS:       
06C0   21 02 00               LD   hl,2   
06C3   C3 D2 06               JP   bytes1   
06C6                             ; 8
06C6                             ; //
06C6                COMMENT:      
06C6   03                     INC   bc   ; point to next char
06C7   0A                     LD   a,(bc)   
06C8   FE 20                  CP   " "   ; terminate on any char less than SP
06CA   30 FA                  JR   nc,comment   
06CC   0B                     DEC   bc   
06CD   DD E9                  JP   (ix)   
06CF                             ; 6
06CF                             ; /b
06CF                BYTES_:      
06CF   21 01 00               LD   hl,1   
06D2                BYTES1:      
06D2   22 E6 23               LD   (vDataWidth),hl   
06D5   DD E9                  JP   (ix)   
06D7                             ; 10
06D7                             ; /qt
06D7                             ; bool --
06D7                QUIT_:       
06D7   E1                     POP   hl   ; hl = condition, exit if true
06D8   7D                     LD   a,l   
06D9   B4                     OR   h   
06DA   20 02                  JR   nz,quit1   
06DC   DD E9                  JP   (ix)   
06DE                QUIT1:       
06DE   C3 A4 0B               JP   blockEnd   
06E1                             ; 10
06E1                             ; /as size of an array, num elements, ignores vDataWidth :-/
06E1                             ; array* -- num
06E1                ARRAYSIZE_:      
06E1   E1                     POP   hl   
06E2   2B                     DEC   hl   ; msb size
06E3   56                     LD   d,(hl)   
06E4   2B                     DEC   hl   ; lsb size
06E5   5E                     LD   e,(hl)   
06E6   D5                     PUSH   de   
06E7   DD E9                  JP   (ix)   
06E9                             ; 12
06E9                XOR_:        
06E9   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
06EA                XOR1:        
06EA   E1                     POP   hl   
06EB   7B                     LD   a,e   
06EC   AD                     XOR   l   
06ED   6F                     LD   l,a   
06EE   7A                     LD   a,d   
06EF   AC                     XOR   h   
06F0   67                     LD   h,a   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; 2
06F4                             ; key_:
06F4                             ;     jr key
06F4                             ; /k                              6
06F4                KEY_:        
06F4                KEY:         
06F4   CD 81 00               CALL   getchar   
06F7   26 00                  LD   h,0   
06F9   6F                     LD   l,a   
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                             ; 2
06FD                OUTPUT_:      
06FD   18 02                  JR   output   
06FF                             ; 2
06FF                COMMAND_F_:      
06FF   18 09                  JR   command_f   
0701                             ;********************** PAGE 6 END *********************************************
0701                             ; .align $100
0701                             ;********************** PAGE 7 BEGIN *********************************************
0701                             ; /o Z80 port output               9
0701                             ; value port --
0701                OUTPUT:      
0701   E1                     POP   hl   
0702   59                     LD   e,c   ; save IP
0703   4D                     LD   c,l   
0704   E1                     POP   hl   
0705   ED 69                  OUT   (c),l   
0707   4B                     LD   c,e   ; restore IP
0708   DD E9                  JP   (ix)   
070A                COMMAND_F:      
070A   CD 10 0E               CALL   jumpTable   
070D   64                     DB   "d"   ; /fd fold
070E   55                     DB   lsb(fold_)   
070F   65                     DB   "e"   ; /fe forEach
0710   4F                     DB   lsb(forEach_)   
0711   73                     DB   "s"   ; /fs funcSrc
0712   58                     DB   lsb(funcSrc_)   
0713   74                     DB   "t"   ; /ft filter
0714   52                     DB   lsb(filter_)   
0715   31                     DB   "1"   
0716   5B                     DB   lsb(f1_)   
0717   32                     DB   "2"   
0718   5E                     DB   lsb(f2_)   
0719   33                     DB   "3"   
071A   61                     DB   lsb(f3_)   
071B   34                     DB   "4"   
071C   64                     DB   lsb(f4_)   
071D   00                     DB   NUL   
071E   C3 67 07               JP   false_   
0721                COMMAND_M:      
0721   CD 10 0E               CALL   jumpTable   
0724   70                     DB   "p"   ; /mp map
0725   6A                     DB   lsb(map_)   
0726   00                     DB   NUL   
0727   C3 A5 06               JP   error1_   
072A                COMMAND_R:      
072A   CD 10 0E               CALL   jumpTable   
072D   63                     DB   "c"   ; /rc tail call optimisation
072E   6D                     DB   lsb(recur_)   
072F   65                     DB   "e"   ; /re remainder
0730   73                     DB   lsb(remain_)   
0731   67                     DB   "g"   ; /rg range src
0732   7C                     DB   lsb(rangeSrc_)   
0733   00                     DB   NUL   
0734   C3 A5 06               JP   error1_   
0737                COMMAND_V:      
0737   CD 10 0E               CALL   jumpTable   
073A   68                     DB   "h"   
073B   89                     DB   lsb(varHeapPtr_)   
073C   74                     DB   "t"   
073D   92                     DB   lsb(varTIBPtr_)   
073E   48                     DB   "H"   
073F   7F                     DB   lsb(constHeapStart_)   
0740   54                     DB   "T"   
0741   84                     DB   lsb(constTIBStart_)   
0742   00                     DB   NUL   
0743   C3 A5 06               JP   error1_   
0746                COMMAND_S:      
0746   CD 10 0E               CALL   jumpTable   
0749   69                     DB   "i"   
074A   79                     DB   lsb(stringIter_)   
074B   00                     DB   NUL   
074C   C3 A5 06               JP   error1_   
074F                FOREACH_:      
074F   C3 16 0A               JP   forEach   
0752                FILTER_:      
0752   C3 66 09               JP   filter   
0755                FOLD_:       
0755   C3 C4 09               JP   fold   
0758                FUNCSRC_:      
0758   C3 62 0A               JP   funcSrc   
075B                F1_:         
075B   C3 D7 0F               JP   f1   
075E                F2_:         
075E   C3 D7 0F               JP   f2   
0761                F3_:         
0761   C3 D7 0F               JP   f3   
0764                F4_:         
0764   C3 D7 0F               JP   f4   
0767                FALSE_:      
0767   C3 A2 03               JP   false1   
076A                MAP_:        
076A   C3 24 09               JP   map   
076D                RECUR_:      
076D   E1                     POP   hl   
076E   22 F2 23               LD   (vRecur),hl   
0771   DD E9                  JP   (ix)   
0773                REMAIN_:      
0773   2A FA 23               LD   hl,(vRemain)   
0776   E5                     PUSH   hl   
0777   DD E9                  JP   (ix)   
0779                STRINGITER_:      
0779   C3 9E 08               JP   stringIter   
077C                RANGESRC_:      
077C   C3 A1 07               JP   rangeSrc   
077F                CONSTHEAPSTART_:      
077F   11 22 24               LD   de,HEAP   
0782   18 1A                  JR   constant   
0784                CONSTTIBSTART_:      
0784   11 00 21               LD   de,TIB   
0787   18 15                  JR   constant   
0789                VARHEAPPTR_:      
0789   ED 5B F0 23            LD   de,(vHeapPtr)   
078D   21 F0 23               LD   hl,vHeapPtr   
0790   18 09                  JR   variable   
0792                VARTIBPTR_:      
0792   ED 5B EA 23            LD   de,(vTIBPtr)   
0796   21 EA 23               LD   hl,vTIBPtr   
0799   18 00                  JR   variable   
079B                VARIABLE:      
079B   22 F8 23               LD   (vPointer),hl   
079E                CONSTANT:      
079E   D5                     PUSH   de   
079F   DD E9                  JP   (ix)   
07A1                             ;********************** PAGE 7 END *********************************************
07A1                             ;*******************************************************************
07A1                             ; Monty implementations
07A1                             ;*******************************************************************
07A1                             ; /rg rangeSrc
07A1                             ; begin end step -- src
07A1                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07A1                RANGESRC:      ; range source: begin, end, step, local: L
07A1   CD 11 0C               CALL   go   
07A4   00 00                  DW   NUL   
07A6   B0 07                  DW   rangeSrcM_1850S1452   
07A8   AA 07                  DW   $+2   
07AA   01                     DB   1   
07AB   04 62 65 73 4C         .PSTR   "besL"   
07B0                RANGESRCM_1850S1452:      
07B0   7B                     DB   "{"   
07B1   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07BC   5C 6B 74 7B            DB   "\\kt{"   
07C0   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07C8   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07CE   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07D6   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07DE   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07E8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07F0   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
07F7   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
080B   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0813   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
081A   7D                     DB   "}"   
081B   7D                     DB   "}"   
081C   00                     DB   0   
081D                             ; /ai arrayIter
081D                             ; array* -- src
081D                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
081D                ARRAYITER:      
081D   CD 11 0C               CALL   go   
0820   00 00                  DW   NUL   
0822   2A 08                  DW   arrayIterM_1869S1472   
0824   26 08                  DW   $+2   
0826   01                     DB   1   
0827   02 61 4C               .PSTR   "aL"   
082A                ARRAYITERM_1869S1472:      
082A   7B                     DB   "{"   
082B   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
083B   5C 6B 74 7B            DB   "\\kt{"   
083F   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0847   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
084D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0855   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
085D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0864   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
086C   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0875   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
088C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0894   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
089B   7D                     DB   "}"   
089C   7D                     DB   "}"   
089D   00                     DB   0   
089E                             ; /si stringIter
089E                             ; string* -- src
089E                          ;*Macro unroll: FUNC stringIter, 1, "sL"
089E                STRINGITER:      
089E   CD 11 0C               CALL   go   
08A1   00 00                  DW   NUL   
08A3   AB 08                  DW   stringIterM_1888S1492   
08A5   A7 08                  DW   $+2   
08A7   01                     DB   1   
08A8   02 73 4C               .PSTR   "sL"   
08AB                STRINGITERM_1888S1492:      
08AB   7B                     DB   "{"   
08AC   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08B6   5C 6B 74 7B            DB   "\\kt{"   
08BA   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08C2   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08C9   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08D1   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08D9   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08E0   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
08EF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08F7   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08FE   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0912   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
091A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0921   7D                     DB   "}"   
0922   7D                     DB   "}"   
0923   00                     DB   0   
0924                             ; /mp map
0924                             ; src func -- src1
0924                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0924                MAP:         ; map: source, function
0924   CD 11 0C               CALL   go   
0927   00 00                  DW   NUL   
0929   31 09                  DW   mapM_1908S1514   
092B   2D 09                  DW   $+2   
092D   00                     DB   0   
092E   02 73 66               .PSTR   "sf"   
0931                MAPM_1908S1514:      
0931   7B                     DB   "{"   
0932   5C 6B 74 7B            DB   "\\kt{"   
0936   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
093E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0942   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0947   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0953   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
095C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0963   7D                     DB   "}"   
0964   7D                     DB   "}"   
0965   00                     DB   0   
0966                             ; /ft filter
0966                             ; src pred -- src1
0966                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0966                FILTER:      ; filter: source, predicate, local: T
0966   CD 11 0C               CALL   go   
0969   00 00                  DW   NUL   
096B   74 09                  DW   filterM_1922S1529   
096D   6F 09                  DW   $+2   
096F   01                     DB   1   
0970   03 73 70 54            .PSTR   "spT"   
0974                FILTERM_1922S1529:      
0974   7B                     DB   "{"   
0975   5B 30 5D 25 54 3D      DB   "[0]%T="   
097B   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
097F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0983   5B                     DB   "["   
0984   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0991   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0999   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
099D   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09A2   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09B8   3F 3F                  DB   "??"   
09BA   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09C1   7D                     DB   "}"   
09C2   7D                     DB   "}"   
09C3   00                     DB   0   
09C4                             ; /fd fold
09C4                             ; reducer is a function like: \\da00bbLi4u
09C4                             ; src init reducer -- src1
09C4                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09C4                FOLD:        ; src, init, reducer
09C4   CD 11 0C               CALL   go   
09C7   00 00                  DW   NUL   
09C9   D3 09                  DW   foldM_1941S1549   
09CB   CD 09                  DW   $+2   
09CD   01                     DB   1   
09CE   04 73 69 72 41         .PSTR   "sirA"   
09D3                FOLDM_1941S1549:      
09D3   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09D4   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09DB   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09DF   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09E3   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09E8   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A03   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A0C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A13   7D                     DB   "}"   
0A14   7D                     DB   "}"   
0A15   00                     DB   0   
0A16                             ; /fe forEach
0A16                             ; src proc --
0A16                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A16                FOREACH:      ; forEach: source, procedure, local: T
0A16   CD 11 0C               CALL   go   
0A19   00 00                  DW   NUL   
0A1B   24 0A                  DW   forEachM_1955S1564   
0A1D   1F 0A                  DW   $+2   
0A1F   01                     DB   1   
0A20   03 73 70 54            .PSTR   "spT"   
0A24                FOREACHM_1955S1564:      
0A24   7B                     DB   "{"   
0A25   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A2B   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A2F   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A37   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A3C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A4E   3F 3F                  DB   "??"   ; ifte:
0A50   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A59   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A60   7D                     DB   "}"   
0A61   00                     DB   0   
0A62                             ; ; /fs funcSrc
0A62                             ; ; func -- src
0A62                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A62                FUNCSRC:      ; :f func or block
0A62   CD 11 0C               CALL   go   
0A65   00 00                  DW   NUL   
0A67   6E 0A                  DW   funcSrcM_1969S1579   
0A69   6B 0A                  DW   $+2   
0A6B   00                     DB   0   
0A6C   01 66                  .PSTR   "f"   
0A6E                FUNCSRCM_1969S1579:      
0A6E   7B                     DB   "{"   
0A6F   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A73   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A7B   5C 64 74 7B            DB   "\\dt{"   
0A7F   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A91   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A98   7D                     DB   "}"   
0A99   7D                     DB   "}"   
0A9A   00                     DB   0   
0A9B                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0A9B                DOTARRAY:      
0A9B   CD 11 0C               CALL   go   
0A9E   00 00                  DW   NUL   
0AA0   A9 0A                  DW   dotArrayM_1979S1590   
0AA2   A4 0A                  DW   $+2   
0AA4   02                     DB   2   
0AA5   03 61 62 63            .PSTR   "abc"   
0AA9                DOTARRAYM_1979S1590:      
0AA9   7B                     DB   "{"   
0AAA   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AE1   7D                     DB   "}"   
0AE2   00                     DB   0   
0AE3                             ;*******************************************************************
0AE3                             ; unused opcodes (reserved)
0AE3                             ;*******************************************************************
0AE3                UNDERSCORE:      
0AE3                COMMA:       
0AE3   DD E9                  JP   (ix)   
0AE5                             ;*******************************************************************
0AE5                             ; implementations
0AE5                             ;*******************************************************************
0AE5                DOTNEXT:      
0AE5   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0AE8   3C                     INC   a   
0AE9   20 02                  JR   nz,dotNext1   
0AEB   DD E9                  JP   (ix)   
0AED                DOTNEXT1:      
0AED   ED 5B F0 23            LD   de,(vHeapPtr)   
0AF1   2A EC 23               LD   hl,(vStrPtr)   
0AF4   B7                     OR   a   ; hl = count, de = vHeapPtr
0AF5   ED 52                  SBC   hl,de   
0AF7   C3 00 0B               JP   dotNext3   
0AFA                DOTNEXT2:      
0AFA   1A                     LD   a,(de)   ; print char at char*
0AFB   CD 85 00               CALL   putchar   
0AFE   13                     INC   de   ; char*++
0AFF   2B                     DEC   hl   ; count--
0B00                DOTNEXT3:      
0B00   7D                     LD   a,l   ; count == 0?
0B01   B4                     OR   h   
0B02   20 F6                  JR   nz,dotNext2   ; if not loop
0B04   2A F0 23               LD   hl,(vHeapPtr)   ; reset vStrPtr to vHeapPtr
0B07   22 EC 23               LD   (vStrPtr),hl   
0B0A   DD E9                  JP   (ix)   
0B0C                STRINGMODEENTER:      
0B0C   21 FF FF               LD   hl,TRUE   
0B0F   22 F6 23               LD   (vStrMode),hl   
0B12   2A F0 23               LD   hl,(vHeapPtr)   
0B15   18 14                  JR   stringModeExit1   
0B17                STRINGMODEEXIT:      
0B17   21 00 00               LD   hl,FALSE   
0B1A   22 F6 23               LD   (vStrMode),hl   
0B1D   2A EC 23               LD   hl,(vStrPtr)   ; append NUL to string
0B20   AF                     XOR   a   
0B21   77                     LD   (hl),a   
0B22   23                     INC   hl   ; hl = string_end*
0B23   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = string*
0B27   D5                     PUSH   de   ; return string*
0B28   22 F0 23               LD   (vHeapPtr),hl   ; vHeapPtr = string_end*
0B2B                STRINGMODEEXIT1:      
0B2B   22 EC 23               LD   (vStrPtr),hl   ; vStrPtr = vHeapPtr
0B2E   DD E9                  JP   (ix)   
0B30                             ; /ad addrOf                    24
0B30                             ; char -- addr
0B30                ADDROF:      
0B30   E1                     POP   hl   ; a = char
0B31   7D                     LD   a,l   
0B32   FE 7B                  CP   "z"+1   ; if a > z then exit
0B34   30 19                  JR   nc,addrOf2   
0B36   D6 41                  SUB   "A"   ; a - 65
0B38   38 15                  JR   c,addrOf2   ; if < A then exit
0B3A   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B3C   38 06                  JR   c,addrOf1   
0B3E   D6 06                  SUB   "a"-("Z"+1)   
0B40   FE 1A                  CP   "Z"-"A"+1   
0B42   38 0B                  JR   c,addrOf2   ; if < a then exit
0B44                ADDROF1:      
0B44   87                     ADD   a,a   ; double a
0B45   21 00 23               LD   hl,VARS   ; hl = VARS + a
0B48   85                     ADD   a,l   
0B49   6F                     LD   l,a   
0B4A   3E 00                  LD   a,0   
0B4C   8C                     ADC   a,h   
0B4D   67                     LD   h,a   
0B4E   E5                     PUSH   hl   
0B4F                ADDROF2:      
0B4F   DD E9                  JP   (ix)   
0B51                             ;                               51
0B51                RBRACK:      
0B51                ARRAYEND:      
0B51   FD 54                  LD   d,iyh   ; de = BP
0B53   FD 5D                  LD   e,iyl   
0B55   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0B59   62 6B                  LD   hl,de   ; hl = de = BP
0B5B   B7                     OR   a   
0B5C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B5E   CB 3C                  SRL   h   ; 
0B60   CB 1D                  RR   l   
0B62   44 4D                  LD   bc,hl   ; bc = count
0B64   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B67   71                     LD   (hl),c   ; write num items in length word
0B68   23                     INC   hl   
0B69   70                     LD   (hl),b   
0B6A   23                     INC   hl   ; hl = array[0], bc = count
0B6B                             ; de = BP, hl = array[0], bc = count
0B6B   18 15                  JR   arrayEnd3   
0B6D                ARRAYEND1:      
0B6D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B70   77                     LD   (hl),a   ; write lsb of array item
0B71   23                     INC   hl   ; move to msb of array item
0B72   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0B75   3D                     DEC   a   
0B76   28 05                  JR   z,arrayEnd2   
0B78   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B7B   77                     LD   (hl),a   ; write msb of array item
0B7C   23                     INC   hl   ; move to next word in array
0B7D                ARRAYEND2:      
0B7D   FD 2B                  DEC   iy   ; move to next word on stack
0B7F   FD 2B                  DEC   iy   
0B81   0B                     DEC   bc   ; dec items count
0B82                ARRAYEND3:      
0B82   79                     LD   a,c   ; if not zero loop
0B83   B0                     OR   b   
0B84   20 E7                  JR   nz,arrayEnd1   
0B86   EB                     EX   de,hl   ; de = end of array, hl = BP
0B87   F9                     LD   sp,hl   ; sp = BP
0B88   E1                     POP   hl   ; de = end of array, hl = old BP
0B89   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0B8A   FD 62                  LD   iyh,d   
0B8C   FD 6B                  LD   iyl,e   
0B8E   D1                     POP   de   ; pop arg_list (discard)
0B8F   D1                     POP   de   ; pop first_arg* (discard)
0B90   D1                     POP   de   ; pop IP (discard)
0B91   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0B95   13                     INC   de   
0B96   13                     INC   de   
0B97   D5                     PUSH   de   ; return array[0]
0B98   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0B9B   22 EC 23               LD   (vStrPtr),hl   
0B9E   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0BA2   DD E9                  JP   (ix)   
0BA4                             ;                               58
0BA4                RBRACE:      
0BA4                BLOCKEND:      
0BA4   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BA7   FD 56 01               LD   d,(iy+1)   
0BAA   ED 53 04 24            LD   (vTemp1),de   
0BAE   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BB1   FD 56 07               LD   d,(iy+7)   
0BB4   ED 53 06 24            LD   (vTemp2),de   
0BB8   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BBB   FD 56 03               LD   d,(iy+3)   
0BBE   EB                     EX   de,hl   
0BBF   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BC2   FD 56 01               LD   d,(iy+1)   
0BC5   13                     INC   de   ; for carry flag <=
0BC6   B7                     OR   a   
0BC7   ED 52                  SBC   hl,de   
0BC9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BCB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BCD   FD 5D                  LD   e,iyl   
0BCF   21 08 00               LD   hl,8   
0BD2   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BD3   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BD4   18 0C                  JR   blockEnd2   
0BD6                BLOCKEND1:      ; same scope
0BD6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD9   FD 56 03               LD   d,(iy+3)   
0BDC   EB                     EX   de,hl   
0BDD   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BDF   FD 5D                  LD   e,iyl   
0BE1   EB                     EX   de,hl   
0BE2                BLOCKEND2:      
0BE2   44 4D                  LD   bc,hl   ; bc = hl = BP
0BE4   B7                     OR   a   ; hl = BP - SP = count
0BE5   ED 72                  SBC   hl,sp   
0BE7   7D                     LD   a,l   
0BE8   B4                     OR   h   
0BE9   28 09                  JR   z,blockEnd3   
0BEB   C5                     PUSH   bc   ; bc = count, hl = BP
0BEC   44 4D                  LD   bc,hl   
0BEE   E1                     POP   hl   
0BEF   2B                     DEC   hl   ; hl = BP-1
0BF0   1B                     DEC   de   ; de = args*-1
0BF1   ED B8                  LDDR      
0BF3   13                     INC   de   
0BF4                BLOCKEND3:      
0BF4   EB                     EX   de,hl   ; sp = de = new tos*
0BF5   F9                     LD   sp,hl   
0BF6   ED 4B 06 24            LD   bc,(vTemp2)   
0BFA   FD 2A 04 24            LD   iy,(vTemp1)   
0BFE   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0C02   7B                     LD   a,e   ; check for NUL
0C03   B2                     OR   d   
0C04   20 02                  JR   nz,blockEnd4   
0C06   DD E9                  JP   (ix)   
0C08                BLOCKEND4:      
0C08   21 00 00               LD   hl,0   ; clear recur vector
0C0B   22 F2 23               LD   (vRecur),hl   
0C0E   C3 12 0C               JP   go1   ; execute de
0C11                             ; execute a block of code which ends with } 116
0C11                             ; creates a root scope if BP == stack
0C11                             ; else uses outer scope
0C11                CARET:       
0C11                GO:          
0C11   D1                     POP   de   ; de = block*
0C12                GO1:         
0C12   7B                     LD   a,e   ; if block* == null, exit
0C13   B2                     OR   d   
0C14   20 02                  JR   nz,go2   
0C16   DD E9                  JP   (ix)   
0C18                GO2:         
0C18   1A                     LD   a,(de)   
0C19   FE 7B                  CP   "{"   
0C1B   28 06                  JR   z,goBlock   
0C1D   FE 28                  CP   "("   
0C1F   C2 56 0C               JP   nz,goFunc   
0C22   D5                     PUSH   de   ; push de just before stack frame
0C23                GOBLOCK:      
0C23   ED 53 04 24            LD   (vTemp1),de   ; save de
0C27   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C2A   FD 54                  LD   d,iyh   
0C2C   FD 5D                  LD   e,iyl   
0C2E   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C2F   ED 52                  SBC   hl,de   
0C31   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C35   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C36   B4                     OR   h   
0C37   3E 00                  LD   a,0   
0C39   28 6A                  JR   z,goFunc8   
0C3B   C5                     PUSH   bc   ; push IP
0C3C   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C3F   FD 46 05               LD   b,(iy+5)   
0C42   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C45   FD 66 03               LD   h,(iy+3)   
0C48                GOBLOCK2:      
0C48   C5                     PUSH   bc   ; arg_list*
0C49   E5                     PUSH   hl   ; first_arg*
0C4A   FD E5                  PUSH   iy   ; push BP
0C4C   FD 21 00 00            LD   iy,0   ; BP = SP
0C50   FD 39                  ADD   iy,sp   
0C52                GOBLOCK3:      
0C52   42 4B                  LD   bc,de   ; bc = de = block*-1
0C54   DD E9                  JP   (ix)   
0C56                GOFUNC:      ; execute func
0C56   EB                     EX   de,hl   ; hl = func*
0C57   5E                     LD   e,(hl)   ; de = partial_array*
0C58   23                     INC   hl   
0C59   56                     LD   d,(hl)   
0C5A   23                     INC   hl   
0C5B   7B                     LD   a,e   ; if partial_array* == null skip
0C5C   B2                     OR   d   
0C5D   28 21                  JR   z,goFunc3   
0C5F   ED 43 04 24            LD   (vTemp1),bc   
0C63   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C66   EB                     EX   de,hl   ; hl = partial_array*
0C67   2B                     DEC   hl   ; bc = count
0C68   46                     LD   b,(hl)   
0C69   2B                     DEC   hl   
0C6A   4E                     LD   c,(hl)   
0C6B   23                     INC   hl   ; hl = array data*
0C6C   23                     INC   hl   
0C6D   18 06                  JR   goFunc2   ; push each item on stack
0C6F                GOFUNC1:      
0C6F   5E                     LD   e,(hl)   ; de = partial item
0C70   23                     INC   hl   
0C71   56                     LD   d,(hl)   
0C72   23                     INC   hl   
0C73   D5                     PUSH   de   ; push on stack
0C74   0B                     DEC   bc   
0C75                GOFUNC2:      
0C75   79                     LD   a,c   ; if count != 0 then loop
0C76   B0                     OR   b   
0C77   20 F6                  JR   nz,goFunc1   
0C79   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C7D   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C80                GOFUNC3:      
0C80   5E                     LD   e,(hl)   ; de = block*
0C81   23                     INC   hl   
0C82   56                     LD   d,(hl)   
0C83   23                     INC   hl   
0C84   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C88   5E                     LD   e,(hl)   ; de = arg_list*
0C89   23                     INC   hl   
0C8A   56                     LD   d,(hl)   
0C8B   23                     INC   hl   
0C8C   EB                     EX   de,hl   ; hl = arg_list*
0C8D   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C91   7D                     LD   a,l   ; if arg_list* == null a = 0
0C92   B4                     OR   h   
0C93   20 03                  JR   nz,goFunc4   
0C95   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C96   18 0D                  JR   goFunc8   
0C98                GOFUNC4:      ; allocate locals
0C98   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0C99   18 03                  JR   goFunc6   
0C9B                GOFUNC5:      ; loop
0C9B   3B                     DEC   sp   
0C9C   3B                     DEC   sp   
0C9D   3D                     DEC   a   
0C9E                GOFUNC6:      
0C9E   B7                     OR   a   
0C9F   20 FA                  JR   nz,goFunc5   ; end loop
0CA1                GOFUNC7:      
0CA1   23                     INC   hl   ; a = num_args* x 2
0CA2   7E                     LD   a,(hl)   
0CA3   2B                     DEC   hl   
0CA4   87                     ADD   a,a   ; a *= 2
0CA5                GOFUNC8:      
0CA5   C5                     PUSH   bc   ; push IP
0CA6   44 4D                  LD   bc,hl   
0CA8   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CAB   85                     ADD   a,l   
0CAC   6F                     LD   l,a   
0CAD   39                     ADD   hl,sp   
0CAE   18 98                  JR   goBlock2   
0CB0                             ; 
0CB0                             ;*******************************************************************
0CB0                             ; general routines
0CB0                             ;*******************************************************************
0CB0                             ; arg_list - parses arg_list e.g. ab:c
0CB0                             ; -- arg_list*
0CB0                PARSEARGS:      
0CB0   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CB3   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CB6   E5                     PUSH   hl   ; save start of arg_list
0CB7   23                     INC   hl   ; skip length fields to start of string
0CB8   23                     INC   hl   
0CB9   03                     INC   bc   ; point to next char
0CBA                PARSEARGS1:      
0CBA   0A                     LD   a,(bc)   
0CBB   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CBD   20 03                  JR   nz,parseArgs1a   
0CBF   14                     INC   d   ; non zero value local count acts as flag
0CC0   18 10                  JR   parseArgs3   
0CC2                PARSEARGS1A:      
0CC2   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CC4   38 0F                  JR   c,parseArgs4   
0CC6   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CC8   30 0B                  JR   nc,parseArgs4   
0CCA                PARSEARGS2:      
0CCA   77                     LD   (hl),a   
0CCB   23                     INC   hl   
0CCC   1C                     INC   e   ; increase arg count
0CCD   AF                     XOR   a   
0CCE   B2                     OR   d   
0CCF   28 01                  JR   z,parseArgs3   
0CD1   14                     INC   d   ; if d > 0 increase local count
0CD2                PARSEARGS3:      
0CD2   03                     INC   bc   ; point to next char
0CD3   18 E5                  JR   parseArgs1   
0CD5                PARSEARGS4:      
0CD5   0B                     DEC   bc   
0CD6   AF                     XOR   a   
0CD7   B2                     OR   d   
0CD8   28 01                  JR   z,parseArgs5   
0CDA   15                     DEC   d   ; remove initial inc
0CDB                PARSEARGS5:      
0CDB   23                     INC   hl   
0CDC   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CDF   22 EC 23               LD   (vStrPtr),hl   
0CE2   E1                     POP   hl   ; hl = start of arg_list
0CE3   72                     LD   (hl),d   ; write number of locals at start - 1
0CE4   23                     INC   hl   
0CE5   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CE6   2B                     DEC   hl   
0CE7   E3                     EX   (sp),hl   
0CE8   E9                     JP   (hl)   
0CE9                             ; create block: parses block e.g. 00bbIC4uLi4g
0CE9                             ; -- block*
0CE9                PARSEBLOCK:      
0CE9   C5                     PUSH   bc   ; return pointer to first { of block
0CEA   03                     INC   bc   
0CEB   16 01                  LD   d,1   ; nesting: count first parenthesis
0CED                PARSEBLOCK1:      ; Skip to end of definition
0CED   0A                     LD   a,(bc)   ; Get the next character
0CEE   03                     INC   bc   ; Point to next character
0CEF   FE 21                  CP   " " + 1   ; ignore whitespace
0CF1   38 FA                  JR   c,parseBlock1   
0CF3   FE 29                  CP   ")"   
0CF5   28 2D                  JR   z,parseBlock4   
0CF7   FE 7D                  CP   "}"   
0CF9   28 29                  JR   z,parseBlock4   
0CFB   FE 5D                  CP   "]"   
0CFD   28 25                  JR   z,parseBlock4   
0CFF   FE 28                  CP   "("   
0D01   28 16                  JR   z,parseBlock2   
0D03   FE 7B                  CP   "{"   
0D05   28 12                  JR   z,parseBlock2   
0D07   FE 5B                  CP   "["   
0D09   28 0E                  JR   z,parseBlock2   
0D0B   FE 27                  CP   "'"   
0D0D   28 0D                  JR   z,parseBlock3   
0D0F   FE 60                  CP   "`"   
0D11   28 09                  JR   z,parseBlock3   
0D13   FE 22                  CP   DQ   
0D15   28 05                  JR   z,parseBlock3   
0D17   18 D4                  JR   parseBlock1   
0D19                PARSEBLOCK2:      
0D19   14                     INC   d   
0D1A   18 D1                  JR   parseBlock1   
0D1C                PARSEBLOCK3:      
0D1C   3E 80                  LD   a,$80   
0D1E   AA                     XOR   d   
0D1F   57                     LD   d,a   
0D20   20 CB                  JR   nz,parseBlock1   
0D22   18 03                  JR   parseBlock5   
0D24                PARSEBLOCK4:      
0D24   15                     DEC   d   
0D25   20 C6                  JR   nz,parseBlock1   ; get the next element
0D27                PARSEBLOCK5:      
0D27   60 69                  LD   hl,bc   ; hl = IP
0D29   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D2C   B7                     OR   a   ; IP - HEAP
0D2D   ED 52                  SBC   hl,de   
0D2F   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D31   28 20                  JR   z,parseBlock6   
0D33   60 69                  LD   hl,bc   ; hl = IP
0D35   D1                     POP   de   ; de = block*
0D36   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D3A   B7                     OR   a   ; bc = size
0D3B   ED 52                  SBC   hl,de   
0D3D   44 4D                  LD   bc,hl   
0D3F   EB                     EX   de,hl   ; hl = block* de = heap*
0D40   ED 5B F0 23            LD   de,(vHeapPtr)   
0D44   D5                     PUSH   de   ; return hblock*
0D45   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D47   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D4B   ED 53 EC 23            LD   (vStrPtr),de   
0D4F   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D53                PARSEBLOCK6:      
0D53   0B                     DEC   bc   ; balanced, exit
0D54   E1                     POP   hl   ; hl = block*
0D55   E3                     EX   (sp),hl   ; return to caller
0D56   E9                     JP   (hl)   
0D57                             ; create function
0D57                             ; arg_list* block* -- func*
0D57                CREATEFUNC:      
0D57   E1                     POP   hl   ; save retrn address
0D58   22 08 24               LD   (vTemp3),hl   
0D5B   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D5F   E1                     POP   hl   ; hl = block*
0D60   22 06 24               LD   (vTemp2),hl   ; save block*
0D63   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D66   FD 56 05               LD   d,(iy+5)   
0D69   7B                     LD   a,e   ; if arg_list == null then make a func
0D6A   B2                     OR   d   
0D6B   20 09                  JR   nz,createFunc0   
0D6D   21 00 00               LD   hl,0   ; partial_array = null
0D70   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D74   18 65                  JR   createFunc5   
0D76                CREATEFUNC0:      
0D76   E1                     POP   hl   ; hl = inner_arg_list*
0D77   E5                     PUSH   hl   ; save inner_arg_list
0D78   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D7C   7E                     LD   a,(hl)   ; compile inner_num_locals
0D7D   4F                     LD   c,a   ; b = inner_num_locals
0D7E   12                     LD   (de),a   
0D7F   23                     INC   hl   
0D80   13                     INC   de   
0D81   7E                     LD   a,(hl)   ; compile inner_length
0D82   12                     LD   (de),a   
0D83   91                     SUB   c   ; a = inner_num args
0D84   23                     INC   hl   
0D85   13                     INC   de   
0D86   B7                     OR   a   ; compile args if inner_length > 0
0D87   28 05                  JR   z,createFunc1   
0D89   4F                     LD   c,a   ; bc = a
0D8A   06 00                  LD   b,0   
0D8C   ED B0                  LDIR      
0D8E                CREATEFUNC1:      
0D8E   EB                     EX   de,hl   ; hl = outer_arg_list
0D8F   FD 5E 04               LD   e,(iy+4)   
0D92   FD 56 05               LD   d,(iy+5)   
0D95   EB                     EX   de,hl   
0D96   23                     INC   hl   ; a = outer_length
0D97   7E                     LD   a,(hl)   
0D98   23                     INC   hl   
0D99   B7                     OR   a   
0D9A   28 05                  JR   z,createFunc2   
0D9C   4F                     LD   c,a   
0D9D   06 00                  LD   b,0   
0D9F   ED B0                  LDIR      ; append outer_args
0DA1                CREATEFUNC2:      ; a = outer_length
0DA1   47                     LD   b,a   ; b = a = outer_length
0DA2   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DA5   23                     INC   hl   
0DA6   7E                     LD   a,(hl)   ; add outer_length to new length
0DA7   80                     ADD   a,b   
0DA8   77                     LD   (hl),a   
0DA9   2B                     DEC   hl   
0DAA   78                     LD   a,b   ; save outer_length in a'
0DAB   08                     EX   af,af'   
0DAC   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DAD   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DAE   B7                     OR   a   
0DAF   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DB1   4F                     LD   c,a   ; c = inner_num_locals
0DB2   06 00                  LD   b,0   ; bc = inner_num_locals
0DB4   23                     INC   hl   ; a = inner_length
0DB5   7E                     LD   a,(hl)   
0DB6   91                     SUB   c   ; a = inner_num_args
0DB7   23                     INC   hl   ; hl = inner_arg_chars
0DB8   85                     ADD   a,l   ; hl += a
0DB9   6F                     LD   l,a   
0DBA   3E 00                  LD   a,0   
0DBC   84                     ADD   a,h   
0DBD   67                     LD   h,a   
0DBE   ED B0                  LDIR      ; append inner_locals
0DC0                CREATEFUNC2A:      
0DC0   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DC1   12                     LD   (de),a   ; compile partial_array length field
0DC2   13                     INC   de   
0DC3   AF                     XOR   a   
0DC4   12                     LD   (de),a   
0DC5   13                     INC   de   
0DC6   D5                     PUSH   de   ; push partial_array*
0DC7   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DC8   FD 5E 02               LD   e,(iy+2)   
0DCB   FD 56 03               LD   d,(iy+3)   
0DCE   EB                     EX   de,hl   
0DCF                CREATEFUNC3:      
0DCF   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DD0   4E                     LD   c,(hl)   
0DD1   2B                     DEC   hl   
0DD2   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DD3   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DD4   13                     INC   de   
0DD5   79                     LD   a,c   
0DD6   12                     LD   (de),a   
0DD7   13                     INC   de   
0DD8   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DDA                CREATEFUNC4:      
0DDA   E1                     POP   hl   ; hl = partial_array*
0DDB                CREATEFUNC5:      
0DDB   C1                     POP   bc   ; bc = new_arg_list*
0DDC   D5                     PUSH   de   ; return new func*
0DDD   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DDE   73                     LD   (hl),e   ; compile partial_array* to func
0DDF   23                     INC   hl   
0DE0   72                     LD   (hl),d   
0DE1   23                     INC   hl   
0DE2   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0DE6   73                     LD   (hl),e   ; compile block* to func
0DE7   23                     INC   hl   
0DE8   72                     LD   (hl),d   
0DE9   23                     INC   hl   
0DEA   71                     LD   (hl),c   ; compile new_arg_list* to func
0DEB   23                     INC   hl   
0DEC   70                     LD   (hl),b   
0DED   23                     INC   hl   
0DEE   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0DF1   22 EC 23               LD   (vStrPtr),hl   
0DF4   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DF8   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0DFB   E9                     JP   (hl)   
0DFC                             ; ; prints whatever in in buffer starting from BUF and ending at vStrPtr*
0DFC                             ; flushBuffer:
0DFC                             ;     push af
0DFC                             ;     push de
0DFC                             ;     push hl
0DFC                             ;     ld hl,(vStrPtr)
0DFC                             ;     ld de,BUF
0DFC                             ;     ld (vStrPtr),de
0DFC                             ;     or a
0DFC                             ;     sbc hl,de
0DFC                             ;     call printChars2
0DFC                             ;     pop hl
0DFC                             ;     pop de
0DFC                             ;     pop af
0DFC                             ;     ret
0DFC                             ; printChars1:
0DFC                             ;     ld a,(de)                           ; print char at char*
0DFC                             ;     call putchar
0DFC                             ;     inc de                              ; char*++
0DFC                             ;     dec hl                              ; count--
0DFC                             ; printChars2:
0DFC                             ;     ld a,l                              ; count == 0?
0DFC                             ;     or h
0DFC                             ;     ret z
0DFC                             ;     jr printChars1                      ; if not loop
0DFC                COMMANDTABLE:      
0DFC   03                     INC   bc   
0DFD   0A                     LD   a,(bc)   
0DFE   FE 7B                  CP   "z"+1   
0E00   30 09                  JR   nc,commandTable2   
0E02   D6 61                  SUB   "a"   
0E04   38 05                  JR   c,commandTable2   
0E06                COMMANDTABLE1:      
0E06   E1                     POP   hl   
0E07   85                     ADD   a,l   
0E08   6F                     LD   l,a   
0E09   6E                     LD   l,(hl)   ; must have the same msb as the table
0E0A   E9                     JP   (hl)   
0E0B                COMMANDTABLE2:      
0E0B   3E 1A                  LD   a,26   
0E0D   0B                     DEC   bc   
0E0E   18 F6                  JR   commandTable1   
0E10                             ; followed by a table
0E10                             ; db char
0E10                             ; db lsb(addr)
0E10                             ; the final item must have char == NUL
0E10                JUMPTABLE:      
0E10   E1                     POP   hl   
0E11   03                     INC   bc   
0E12                JUMPTABLE0:      
0E12   AF                     XOR   a   
0E13   BE                     CP   (hl)   
0E14   28 0B                  JR   z,jumpTable2   
0E16   0A                     LD   a,(bc)   
0E17   BE                     CP   (hl)   
0E18   28 04                  JR   z,jumpTable1   
0E1A   23                     INC   hl   
0E1B   23                     INC   hl   
0E1C   18 F4                  JR   jumpTable0   
0E1E                JUMPTABLE1:      
0E1E   23                     INC   hl   
0E1F   6E                     LD   l,(hl)   ; must have the same msb as the table
0E20   E9                     JP   (hl)   
0E21                JUMPTABLE2:      
0E21   0B                     DEC   bc   
0E22   23                     INC   hl   
0E23   E9                     JP   (hl)   
0E24                             ; followed by a table
0E24                             ; db char
0E24                             ; db lsb(addr)
0E24                             ; the final item must have char == NUL
0E24                XJUMPTABLE:      
0E24   E1                     POP   hl   
0E25   03                     INC   bc   
0E26                XJUMPTABLE0:      
0E26   AF                     XOR   a   
0E27   BE                     CP   (hl)   
0E28   28 10                  JR   z,xjumpTable2   
0E2A   0A                     LD   a,(bc)   
0E2B   BE                     CP   (hl)   
0E2C   28 04                  JR   z,xjumpTable1   
0E2E   23                     INC   hl   
0E2F   23                     INC   hl   
0E30   18 F4                  JR   xjumpTable0   
0E32                XJUMPTABLE1:      
0E32   23                     INC   hl   
0E33   7E                     LD   a,(hl)   
0E34   87                     ADD   a,a   
0E35   6F                     LD   l,a   
0E36   3E 00                  LD   a,0   
0E38   8C                     ADC   a,h   
0E39   E9                     JP   (hl)   
0E3A                XJUMPTABLE2:      
0E3A   0B                     DEC   bc   
0E3B   23                     INC   hl   
0E3C   E9                     JP   (hl)   
0E3D                PRTSTR0:      
0E3D   CD 85 00               CALL   putchar   
0E40   23                     INC   hl   
0E41                PRTSTR:      
0E41   7E                     LD   a,(hl)   
0E42   B7                     OR   a   
0E43   20 F8                  JR   nz,prtstr0   
0E45   C9                     RET      
0E46                             ; **************************************************************************
0E46                             ; calculate nesting value
0E46                             ; a is char to be tested,
0E46                             ; e is the nesting value (initially 0)
0E46                             ; e is increased by ( and [
0E46                             ; e is decreased by ) and ]
0E46                             ; e has its bit 7 toggled by `
0E46                             ; limited to 127 levels
0E46                             ; **************************************************************************
0E46                NESTING:      
0E46   FE 22                  CP   DQ   ; quote char
0E48   28 06                  JR   z,nesting0   
0E4A   FE 60                  CP   "`"   ; quote char
0E4C   28 02                  JR   z,nesting0   
0E4E   18 0A                  JR   nesting1   
0E50                NESTING0:      
0E50   CB 7B                  BIT   7,e   
0E52   28 03                  JR   z,nesting1a   
0E54   CB BB                  RES   7,e   
0E56   C9                     RET      
0E57                NESTING1A:      
0E57   CB FB                  SET   7,e   
0E59   C9                     RET      
0E5A                NESTING1:      
0E5A   CB 7B                  BIT   7,e   
0E5C   C0                     RET   nz   
0E5D   FE 7B                  CP   "{"   
0E5F   28 08                  JR   z,nesting2   
0E61   FE 5B                  CP   "["   
0E63   28 04                  JR   z,nesting2   
0E65   FE 28                  CP   "("   
0E67   20 02                  JR   nz,nesting3   
0E69                NESTING2:      
0E69   1C                     INC   e   
0E6A   C9                     RET      
0E6B                NESTING3:      
0E6B   FE 7D                  CP   "}"   
0E6D   28 07                  JR   z,nesting4   
0E6F   FE 5D                  CP   "]"   
0E71   28 03                  JR   z,nesting4   
0E73   FE 29                  CP   ")"   
0E75   C0                     RET   nz   
0E76                NESTING4:      
0E76   1D                     DEC   e   
0E77   C9                     RET      
0E78                PROMPT:      
0E78   CD 88 0E               CALL   printStr   
0E7B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E80   C9                     RET      
0E81                CRLF:        
0E81   CD 88 0E               CALL   printStr   
0E84   0D 0A 00               .CSTR   "\r\n"   
0E87   C9                     RET      
0E88                             ; prints a null teminated string
0E88                             ; the string should be immediately following the call
0E88                PRINTSTR:      
0E88   E3                     EX   (sp),hl   ; swap			
0E89   CD 41 0E               CALL   prtstr   
0E8C   23                     INC   hl   ; inc past NUL
0E8D   E3                     EX   (sp),hl   ; put it back	
0E8E   C9                     RET      
0E8F                INIT:        
0E8F   21 F0 01               LD   hl,titleStr   
0E92   11 0E 24               LD   de,titleBuf   
0E95   06 14                  LD   b,20   
0E97                INIT1:       
0E97   1A                     LD   a,(de)   
0E98   BE                     CP   (hl)   
0E99   20 17                  JR   nz,coldBoot0   
0E9B   13                     INC   de   
0E9C   23                     INC   hl   
0E9D   10 F8                  DJNZ   init1   
0E9F                WARMINIT:      
0E9F   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0EA3   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EA7   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EAB   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EAF   C3 E9 0E               JP   start1   
0EB2                COLDBOOT0:      
0EB2   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EB5   11 0E 24               LD   de,titleBuf   
0EB8   06 14                  LD   b,20   
0EBA   ED B0                  LDIR      
0EBC                COLDINIT:      
0EBC   21 DE 01               LD   hl,isysVars   
0EBF   11 E6 23               LD   de,sysVars   
0EC2   01 12 00               LD   bc,9 * 2   
0EC5   ED B0                  LDIR      
0EC7   21 00 23               LD   hl,vars   ; 52 vars LO HI
0ECA   06 34                  LD   b,26*2   
0ECC   AF                     XOR   a   
0ECD                COLDBOOT1:      
0ECD   77                     LD   (hl),a   
0ECE   23                     INC   hl   
0ECF   10 FC                  DJNZ   coldBoot1   
0ED1   DD 2A EE 23            LD   ix,(vNext)   
0ED5   FD 21 00 21            LD   iy,STACK   
0ED9   C9                     RET      
0EDA                COLDSTART:      
0EDA   31 00 21               LD   sp,STACK   
0EDD   CD B2 0E               CALL   coldBoot0   
0EE0   C3 E9 0E               JP   start1   
0EE3                START:       
0EE3   31 00 21               LD   sp,STACK   ; start Monty
0EE6   CD 8F 0E               CALL   init   ; setups
0EE9                START1:      
0EE9   21 0E 24               LD   hl,titleBuf   
0EEC   CD 41 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EEF                INTERPRET:      
0EEF   CD 78 0E               CALL   prompt   
0EF2   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EF5   21 00 21               LD   hl,TIB   
0EF8   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EFB                INTERPRET2:      ; calculate nesting
0EFB   1E 00                  LD   e,0   ; initilize nesting value
0EFD   C5                     PUSH   bc   ; save offset into TIB,
0EFE                             ; bc is also the count of chars in TIB
0EFE   21 00 21               LD   hl,TIB   ; hl is start of TIB
0F01   18 0B                  JR   interpret4   
0F03                INTERPRET3:      
0F03   3E 33                  LD   a,"3"   
0F05   CD 85 00               CALL   putchar   
0F08   7E                     LD   a,(hl)   ; a = char in TIB
0F09   23                     INC   hl   ; inc pointer into TIB
0F0A   0B                     DEC   bc   ; dec count of chars in TIB
0F0B   CD 46 0E               CALL   nesting   ; update nesting value
0F0E                INTERPRET4:      
0F0E   79                     LD   a,c   ; is count zero?
0F0F   B0                     OR   b   
0F10   20 F1                  JR   nz,interpret3   ; if not loop
0F12   C1                     POP   bc   ; restore offset into TIB
0F13                INTERPRET5:      
0F13   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F16   FE 20                  CP   $20   ; compare to space
0F18   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F1A   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F1C                             ; ???? NEEDED?
0F1C   28 36                  JR   z,interpret8   
0F1E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F20   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F22   FE 05                  CP   CTRL_E   
0F24   CA B2 0F               JP   z,edit_   
0F27   FE 08                  CP   CTRL_H   
0F29   CA A2 0F               JP   z,backSpace_   
0F2C   FE 0A                  CP   CTRL_J   
0F2E   CA CA 0F               JP   z,reEdit_   
0F31                             ; cp CTRL_S
0F31                             ; jp z,printStack_
0F31                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F31                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F31                             ; DB     lsb(list_)       ; FF  ^L 12
0F31                             ; DB     lsb(printStack_) ; DLE ^P 16
0F31                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F31                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F31                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F31                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F31                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F31                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F31                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F31                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F31                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F31                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F31                INTERPRET5A:      
0F31                             ; ld (vTIBPtr),bc
0F31                             ; ld bc,(vTIBPtr)
0F31   18 C8                  JR   interpret2   
0F33                INTERPRET6:      
0F33   21 00 21               LD   hl,TIB   
0F36   09                     ADD   hl,bc   
0F37   77                     LD   (hl),a   ; store the character in textbuf
0F38   03                     INC   bc   
0F39   CD 85 00               CALL   putchar   ; echo character to screen
0F3C   CD 46 0E               CALL   nesting   
0F3F   18 D2                  JR   interpret5   ; wait for next character
0F41                INTERPRET7:      
0F41   21 00 21               LD   hl,TIB   
0F44   09                     ADD   hl,bc   
0F45   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F47   23                     INC   hl   
0F48   36 0A                  LD   (hl),"\n"   
0F4A   23                     INC   hl   
0F4B   03                     INC   bc   
0F4C   03                     INC   bc   
0F4D   CD 81 0E               CALL   crlf   ; echo character to screen
0F50   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F51   B7                     OR   a   
0F52   20 BF                  JR   nz,interpret5   
0F54                INTERPRET8:      
0F54   21 00 21               LD   hl,TIB   
0F57   09                     ADD   hl,bc   
0F58   22 EA 23               LD   (vTIBPtr),hl   
0F5B   01 00 21               LD   bc,TIB   
0F5E   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F62   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F66   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F6A   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F6E   0B                     DEC   bc   
0F6F                NEXT:        
0F6F   03                     INC   bc   ; Increment the IP
0F70   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F71   FE 20                  CP   " "   ; whitespace?
0F73   28 FA                  JR   z,next   ; space? ignore
0F75   38 08                  JR   c,next1   
0F77   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F79   6F                     LD   l,a   ; index into table
0F7A   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F7C   6E                     LD   l,(hl)   ; get low jump address
0F7D   24                     INC   h   ; Load h with page after opcodes
0F7E   E9                     JP   (hl)   ; Jump to routine
0F7F                NEXT1:       
0F7F   FE 00                  CP   NUL   ; end of input string?
0F81   28 03                  JR   z,exit   
0F83   C3 EF 0E               JP   interpret   ; no, other whitespace, macros?
0F86                EXIT:        
0F86   03                     INC   bc   
0F87   60 69                  LD   hl,bc   
0F89   E9                     JP   (hl)   
0F8A                RUN:         
0F8A   C1                     POP   bc   
0F8B   0B                     DEC   bc   
0F8C   DD E9                  JP   (ix)   
0F8E                ERROR:       
0F8E   E5                     PUSH   hl   
0F8F   CD 8A 0F               CALL   run   
0F92   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F9F   C3 EF 0E               JP   interpret   
0FA2                BACKSPACE_:      
0FA2   79                     LD   a,c   
0FA3   B0                     OR   b   
0FA4   CA FB 0E               JP   z,interpret2   
0FA7   0B                     DEC   bc   
0FA8   CD 88 0E               CALL   printStr   
0FAB   08 20 08 00            .CSTR   "\b \b"   
0FAF   C3 FB 0E               JP   interpret2   
0FB2                             ; edit
0FB2                EDIT_:       
0FB2   CD 8A 0F               CALL   run   
0FB5   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FC7   C3 EF 0E               JP   interpret   
0FCA                REEDIT_:      
0FCA   C3 EF 0E               JP   interpret   
0FCD                PRINTSTACK_:      
0FCD   CD 8A 0F               CALL   run   
0FD0   2F 70 6B 00            .CSTR   "/pk"   
0FD4   C3 EF 0E               JP   interpret   
0FD7                             ; editDef:
0FD7                             ;     pop hl                      ; pop ret address
0FD7                             ;     ex (sp),hl                  ; swap with TOS
0FD7                             ;     push hl                     ; dup TOS
0FD7                             ;     ld a,l                      ; a = ident
0FD7                             ;     ld de,TIB                   ; de = start of TIB
0FD7                             ;     ld (vTIBPtr),de             ; update TIB*
0FD7                             ;     push ix                     ; save NEXT
0FD7                             ;     ld ix,editDef0              ; NEXT = editDef0
0FD7                             ;     jp lookupRef                ; convert letter into address
0FD7                             ; editDef0:
0FD7                             ;     ld e,(hl)                   ; de = (hl++)
0FD7                             ;     inc hl
0FD7                             ;     ld d,(hl)
0FD7                             ;     ld a,d                      ; de == 0 ?
0FD7                             ;     or e
0FD7                             ;     jr z,editDef4
0FD7                             ;     ld ix,editDef3              ; NEXT = editDef3
0FD7                             ;     ex de,hl
0FD7                             ;     ld a,(hl)
0FD7                             ;     cp "{"
0FD7                             ;     jr nz,editDef1
0FD7                             ;     jp editBlock0               ; convert letter into address
0FD7                             ; editDef1:
0FD7                             ;     cp "("
0FD7                             ;     jr nz,editDef2
0FD7                             ;     jp editBlock0               ; convert letter into address
0FD7                             ; editDef2:
0FD7                             ;     jp editFunc
0FD7                             ; editDef3:
0FD7                             ;     ld a," "                    ; write assign
0FD7                             ;     call writeChar
0FD7                             ;     pop hl                      ; a = ident
0FD7                             ;     ld a,l
0FD7                             ;     call writeChar
0FD7                             ;     ld a,"="                    ; write assign
0FD7                             ;     call writeChar
0FD7                             ;     ld ix,editDef4              ; NEXT = editDef4
0FD7                             ;     jp printTIB
0FD7                             ; editDef4:
0FD7                             ;     pop ix                      ; restore NEXT
0FD7                             ;     jp (ix)
0FD7                             ; writeChar:
0FD7                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FD7                             ;     ld (de),a                   ; write ident
0FD7                             ;     inc de
0FD7                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FD7                             ;     ret
0FD7                             ; ; printTIB
0FD7                             ; printTIB:
0FD7                             ;     ld hl,(vTIBPtr)
0FD7                             ;     ld de,TIB
0FD7                             ;     or a
0FD7                             ;     sbc hl,de
0FD7                             ;     jp printTIB2
0FD7                             ; printTIB1:
0FD7                             ;     ld a,(de)
0FD7                             ;     call putchar
0FD7                             ; printTIB2:
0FD7                             ;     ld a,l
0FD7                             ;     or h
0FD7                             ;     jr nz,printTIB1
0FD7                             ;     jp (ix)
0FD7                             ; editBlock:
0FD7                             ;     pop hl                      ; hl = block*
0FD7                             ; editBlock0:
0FD7                             ;     push ix                     ; save next
0FD7                             ;     push hl                     ; push block*
0FD7                             ;     push hl                     ; push block*
0FD7                             ;     ld ix,(editBlock2)
0FD7                             ;     jp blockLength
0FD7                             ; editBlock1:
0FD7                             ;     pop hl                      ; bc = length, (sp) = IP
0FD7                             ;     pop de                      ; de = block*
0FD7                             ;     ld a,l
0FD7                             ;     or h
0FD7                             ;     jr z,editBlock2
0FD7                             ;     push bc
0FD7                             ;     ld bc,hl
0FD7                             ;     ex de,hl                    ; hl = block*
0FD7                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FD7                             ;     ldir                        ; copy block to TIB
0FD7                             ;     ld (vTIBPtr),de              ; save TIB*
0FD7                             ;     pop bc
0FD7                             ; editBlock2:
0FD7                             ;     pop ix                      ; restore next
0FD7                             ;     jp (ix)
0FD7                             ; editFunc:
0FD7                             ;     jp (ix)
0FD7                             ; editArray:
0FD7                             ;     jp (ix)
0FD7                             ; editparseArgs:
0FD7                             ;     jp (ix)
0FD7                             ; ; blockLength
0FD7                             ; ; addr1 -- length
0FD7                             ; blockLength:
0FD7                             ;     pop hl                      ; block*
0FD7                             ;     push hl                     ; save block*
0FD7                             ;     inc hl                      ; skip first char
0FD7                             ;     ld d,1                      ; increase nesting
0FD7                             ; blockLength1:                   ; Skip to end of definition
0FD7                             ;     ld a,(hl)                   ; Get the next character
0FD7                             ;     inc hl                      ; Point to next character
0FD7                             ;     cp " " + 1                  ; ignore whitespace
0FD7                             ;     jr c,blockLength1
0FD7                             ;     cp ")"
0FD7                             ;     jr z,blockLength4
0FD7                             ;     cp "}"
0FD7                             ;     jr z,blockLength4
0FD7                             ;     cp "]"
0FD7                             ;     jr z,blockLength4
0FD7                             ;     cp "("
0FD7                             ;     jr z,blockLength2
0FD7                             ;     cp "{"
0FD7                             ;     jr z,blockLength2
0FD7                             ;     cp "["
0FD7                             ;     jr z,blockLength2
0FD7                             ;     cp "'"
0FD7                             ;     jr z,blockLength3
0FD7                             ;     cp "`"
0FD7                             ;     jr z,blockLength3
0FD7                             ;     cp DQ
0FD7                             ;     jr z,blockLength3
0FD7                             ;     jr blockLength1
0FD7                             ; blockLength2:
0FD7                             ;     inc d
0FD7                             ;     jr blockLength1
0FD7                             ; blockLength4:
0FD7                             ;     dec d
0FD7                             ;     jr nz, blockLength1         ; get the next element
0FD7                             ; blockLength3:
0FD7                             ;     ld a,$80
0FD7                             ;     xor d
0FD7                             ;     ld d,a
0FD7                             ;     jr nz, blockLength1
0FD7                             ;     pop hl                      ; hl = block*
0FD7                             ;     or a
0FD7                             ;     sbc hl,de
0FD7                             ;     push hl
0FD7                             ;     jp (ix)
0FD7                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FD7                             ; \a start of stack \#3 depth \b base \$ prompt
0FD7                             ; DW dStack               ; a vS0 start of datastack			
0FD7                             ; DW FALSE                ; b vBase16
0FD7                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FD7                             ; DW 0                    ; d
0FD7                             ; DW 65                   ; e vLastDef "A" last command u defined
0FD7                             ; DW 0                    ; f
0FD7                             ; DW page6                ; g 256 bytes limits
0FD7                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FD7                F1:          
0FD7                F2:          
0FD7                F3:          
0FD7                F4:          
0FD7                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VSTRPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        047C DEFINED AT LINE 750 IN MAIN.asm
PRINTSTRING0:       0483 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTSTRING1:       0486 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
QUOTE:              0492 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0492 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0492 DEFINED AT LINE 770 IN MAIN.asm
STRING1:            049D DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
STRING2:            04A0 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
STRING3:            04A6 DEFINED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
PERCENT:            04BC DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04BC DEFINED AT LINE 810 IN MAIN.asm
ARG0:               04D8 DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
ARG0A:              04E1 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
ARG1:               04E6 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
ARG1A:              04EE DEFINED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTARRAY_:          050E DEFINED AT LINE 869 IN MAIN.asm
DOTNUMBER_:         0512 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
DOTDEC:             051D DEFINED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
DOTDEC0:            0532 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
DOTDEC1:            0542 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
DOTDEC2:            0562 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
DOTDEC3:            0564 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
DOTDEC4:            0574 DEFINED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
DOTDEC5:            0575 DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
DOTHEX:             057B DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
DOTHEX1:            0597 DEFINED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
DOTHEX2:            05A0 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
DOTSTRING_:         05AC DEFINED AT LINE 988 IN MAIN.asm
DOTSTRING0:         05B3 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
DOTSTRING1:         05B6 DEFINED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
DOTCHAR_:           05C2 DEFINED AT LINE 1006 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1021 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1057 IN MAIN.asm
COMMAND_B_:         0635 DEFINED AT LINE 1070 IN MAIN.asm
COMMAND_I_:         0640 DEFINED AT LINE 1080 IN MAIN.asm
COMMAND_P_:         0649 DEFINED AT LINE 1088 IN MAIN.asm
COMMAND_Q_:         0650 DEFINED AT LINE 1094 IN MAIN.asm
ABSOLUTE_:          0659 DEFINED AT LINE 1104 IN MAIN.asm
BREAK_:             0666 DEFINED AT LINE 1121 IN MAIN.asm
BREAK:              0666 DEFINED AT LINE 1122 IN MAIN.asm
BREAK1:             066D DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
INPUT_:             0680 DEFINED AT LINE 1142 IN MAIN.asm
COMMAND_M_:         068B DEFINED AT LINE 1153 IN MAIN.asm
COMMAND_R_:         068E DEFINED AT LINE 1157 IN MAIN.asm
COMMAND_S_:         0691 DEFINED AT LINE 1161 IN MAIN.asm
COMMAND_V_:         0694 DEFINED AT LINE 1165 IN MAIN.asm
COMMAND_NOP_:       0697 DEFINED AT LINE 1169 IN MAIN.asm
DECIMAL_:           0699 DEFINED AT LINE 1173 IN MAIN.asm
DECIMAL1:           069C DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
DIV_:               06A1 DEFINED AT LINE 1180 IN MAIN.asm
ERROR1_:            06A5 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
HEXADECIMAL_:       06AB DEFINED AT LINE 1190 IN MAIN.asm
TRUE_:              06B1 DEFINED AT LINE 1195 IN MAIN.asm
WORDS_:             06B4 DEFINED AT LINE 1199 IN MAIN.asm
ADDROF_:            06B7 DEFINED AT LINE 1203 IN MAIN.asm
ARRAYITER_:         06BA DEFINED AT LINE 1207 IN MAIN.asm
COLDSTART_:         06BD DEFINED AT LINE 1212 IN MAIN.asm
WORDS:              06C0 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
COMMENT:            06C6 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
BYTES_:             06CF DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
BYTES1:             06D2 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
QUIT_:              06D7 DEFINED AT LINE 1242 IN MAIN.asm
QUIT1:              06DE DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
ARRAYSIZE_:         06E1 DEFINED AT LINE 1254 IN MAIN.asm
XOR_:               06E9 DEFINED AT LINE 1264 IN MAIN.asm
XOR1:               06EA DEFINED AT LINE 1266 IN MAIN.asm
KEY_:               06F4 DEFINED AT LINE 1281 IN MAIN.asm
KEY:                06F4 DEFINED AT LINE 1282 IN MAIN.asm
OUTPUT_:            06FD DEFINED AT LINE 1291 IN MAIN.asm
COMMAND_F_:         06FF DEFINED AT LINE 1295 IN MAIN.asm
OUTPUT:             0701 DEFINED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
COMMAND_F:          070A DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
COMMAND_M:          0721 DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
COMMAND_R:          072A DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
COMMAND_V:          0737 DEFINED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
COMMAND_S:          0746 DEFINED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
FOREACH_:           074F DEFINED AT LINE 1373 IN MAIN.asm
FILTER_:            0752 DEFINED AT LINE 1376 IN MAIN.asm
FOLD_:              0755 DEFINED AT LINE 1379 IN MAIN.asm
FUNCSRC_:           0758 DEFINED AT LINE 1382 IN MAIN.asm
F1_:                075B DEFINED AT LINE 1385 IN MAIN.asm
F2_:                075E DEFINED AT LINE 1388 IN MAIN.asm
F3_:                0761 DEFINED AT LINE 1391 IN MAIN.asm
F4_:                0764 DEFINED AT LINE 1394 IN MAIN.asm
FALSE_:             0767 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1333 IN MAIN.asm
MAP_:               076A DEFINED AT LINE 1400 IN MAIN.asm
RECUR_:             076D DEFINED AT LINE 1403 IN MAIN.asm
REMAIN_:            0773 DEFINED AT LINE 1408 IN MAIN.asm
STRINGITER_:        0779 DEFINED AT LINE 1413 IN MAIN.asm
RANGESRC_:          077C DEFINED AT LINE 1416 IN MAIN.asm
CONSTHEAPSTART_:    077F DEFINED AT LINE 1419 IN MAIN.asm
CONSTTIBSTART_:     0784 DEFINED AT LINE 1423 IN MAIN.asm
VARHEAPPTR_:        0789 DEFINED AT LINE 1427 IN MAIN.asm
VARTIBPTR_:         0792 DEFINED AT LINE 1432 IN MAIN.asm
VARIABLE:           079B DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
CONSTANT:           079E DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
RANGESRC:           07A1 DEFINED AT LINE 32
                    > USED AT LINE 1417 IN MAIN.asm
RANGESRCM_1850S1452: 07B0 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          081D DEFINED AT LINE 32
                    > USED AT LINE 1208 IN MAIN.asm
ARRAYITERM_1869S1472: 082A DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         089E DEFINED AT LINE 32
                    > USED AT LINE 1414 IN MAIN.asm
STRINGITERM_1888S1492: 08AB DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0924 DEFINED AT LINE 32
                    > USED AT LINE 1401 IN MAIN.asm
MAPM_1908S1514:     0931 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0966 DEFINED AT LINE 32
                    > USED AT LINE 1377 IN MAIN.asm
FILTERM_1922S1529:  0974 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09C4 DEFINED AT LINE 32
                    > USED AT LINE 1380 IN MAIN.asm
FOLDM_1941S1549:    09D3 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A16 DEFINED AT LINE 32
                    > USED AT LINE 1374 IN MAIN.asm
FOREACHM_1955S1564: 0A24 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A62 DEFINED AT LINE 32
                    > USED AT LINE 1383 IN MAIN.asm
FUNCSRCM_1969S1579: 0A6E DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0A9B DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
DOTARRAYM_1979S1590: 0AA9 DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0AE3 DEFINED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0AE3 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
DOTNEXT:            0AE5 DEFINED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
DOTNEXT1:           0AED DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
DOTNEXT2:           0AFA DEFINED AT LINE 1619 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
DOTNEXT3:           0B00 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
STRINGMODEENTER:    0B0C DEFINED AT LINE 1632 IN MAIN.asm
STRINGMODEEXIT:     0B17 DEFINED AT LINE 1638 IN MAIN.asm
STRINGMODEEXIT1:    0B2B DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
ADDROF:             0B30 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
ADDROF1:            0B44 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
ADDROF2:            0B4F DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
RBRACK:             0B51 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B51 DEFINED AT LINE 1681 IN MAIN.asm
ARRAYEND1:          0B6D DEFINED AT LINE 1698 IN MAIN.asm
                    > USED AT LINE 1715 IN MAIN.asm
ARRAYEND2:          0B7D DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
ARRAYEND3:          0B82 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
RBRACE:             0BA4 DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BA4 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
BLOCKEND1:          0BD6 DEFINED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
BLOCKEND2:          0BE2 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
BLOCKEND3:          0BF4 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
BLOCKEND4:          0C08 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
CARET:              0C11 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C11 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C12 DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1792 IN MAIN.asm
GO2:                0C18 DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
GOBLOCK:            0C23 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
GOBLOCK2:           0C48 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
GOBLOCK3:           0C52 DEFINED AT LINE 1835 IN MAIN.asm
GOFUNC:             0C56 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
GOFUNC1:            0C6F DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
GOFUNC2:            0C75 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
GOFUNC3:            0C80 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
GOFUNC4:            0C98 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
GOFUNC5:            0C9B DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
GOFUNC6:            0C9E DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
GOFUNC7:            0CA1 DEFINED AT LINE 1898 IN MAIN.asm
GOFUNC8:            0CA5 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
PARSEARGS:          0CB0 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CBA DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
PARSEARGS1A:        0CC2 DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
PARSEARGS2:         0CCA DEFINED AT LINE 1938 IN MAIN.asm
PARSEARGS3:         0CD2 DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PARSEARGS4:         0CD5 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
PARSEARGS5:         0CDB DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
PARSEBLOCK:         0CE9 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0CED DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
PARSEBLOCK2:        0D19 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
PARSEBLOCK3:        0D1C DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
PARSEBLOCK4:        0D24 DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
PARSEBLOCK5:        0D27 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PARSEBLOCK6:        0D53 DEFINED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
CREATEFUNC:         0D57 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D76 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
CREATEFUNC1:        0D8E DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
CREATEFUNC2:        0DA1 DEFINED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
CREATEFUNC2A:       0DC0 DEFINED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
CREATEFUNC3:        0DCF DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
CREATEFUNC4:        0DDA DEFINED AT LINE 2135 IN MAIN.asm
CREATEFUNC5:        0DDB DEFINED AT LINE 2137 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
COMMANDTABLE:       0DFC DEFINED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
COMMANDTABLE1:      0E06 DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
COMMANDTABLE2:      0E0B DEFINED AT LINE 2201 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
JUMPTABLE:          0E10 DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
JUMPTABLE0:         0E12 DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
JUMPTABLE1:         0E1E DEFINED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
JUMPTABLE2:         0E21 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
XJUMPTABLE:         0E24 DEFINED AT LINE 2236 IN MAIN.asm
XJUMPTABLE0:        0E26 DEFINED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
XJUMPTABLE1:        0E32 DEFINED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2245 IN MAIN.asm
XJUMPTABLE2:        0E3A DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
PRTSTR0:            0E3D DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
PRTSTR:             0E41 DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
NESTING:            0E46 DEFINED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
NESTING0:           0E50 DEFINED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
NESTING1A:          0E57 DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
NESTING1:           0E5A DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
NESTING2:           0E69 DEFINED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
NESTING3:           0E6B DEFINED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
NESTING4:           0E76 DEFINED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
PROMPT:             0E78 DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
CRLF:               0E81 DEFINED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
PRINTSTR:           0E88 DEFINED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 2543 IN MAIN.asm
INIT:               0E8F DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
INIT1:              0E97 DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
WARMINIT:           0E9F DEFINED AT LINE 2350 IN MAIN.asm
COLDBOOT0:          0EB2 DEFINED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
COLDINIT:           0EBC DEFINED AT LINE 2363 IN MAIN.asm
COLDBOOT1:          0ECD DEFINED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
COLDSTART:          0EDA DEFINED AT LINE 2381 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
START:              0EE3 DEFINED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EE9 DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
INTERPRET:          0EEF DEFINED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2519 IN MAIN.asm
                    > USED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 2554 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
INTERPRET2:         0EFB DEFINED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2541 IN MAIN.asm
                    > USED AT LINE 2545 IN MAIN.asm
INTERPRET3:         0F03 DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
INTERPRET4:         0F0E DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
INTERPRET5:         0F13 DEFINED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
INTERPRET5A:        0F31 DEFINED AT LINE 2461 IN MAIN.asm
INTERPRET6:         0F33 DEFINED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2428 IN MAIN.asm
INTERPRET7:         0F41 DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
INTERPRET8:         0F54 DEFINED AT LINE 2491 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
NEXT:               0F6F DEFINED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
NEXT1:              0F7F DEFINED AT LINE 2516 IN MAIN.asm
                    > USED AT LINE 2509 IN MAIN.asm
EXIT:               0F86 DEFINED AT LINE 2521 IN MAIN.asm
                    > USED AT LINE 2518 IN MAIN.asm
RUN:                0F8A DEFINED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2549 IN MAIN.asm
                    > USED AT LINE 2557 IN MAIN.asm
ERROR:              0F8E DEFINED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
BACKSPACE_:         0FA2 DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
EDIT_:              0FB2 DEFINED AT LINE 2548 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
REEDIT_:            0FCA DEFINED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
PRINTSTACK_:        0FCD DEFINED AT LINE 2556 IN MAIN.asm
F1:                 0FD7 DEFINED AT LINE 10
                    > USED AT LINE 1386 IN MAIN.asm
F2:                 0FD7 DEFINED AT LINE 11
                    > USED AT LINE 1389 IN MAIN.asm
F3:                 0FD7 DEFINED AT LINE 12
                    > USED AT LINE 1392 IN MAIN.asm
F4:                 0FD7 DEFINED AT LINE 13
                    > USED AT LINE 1395 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 2496 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2365 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2495 IN MAIN.asm
VSTRPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2377 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1409 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2352 IN MAIN.asm
                    > USED AT LINE 2499 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
