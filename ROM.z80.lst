0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 69 0F               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   1E                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   60                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   80                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   78                     DB   lsb(rparen_)   ; )     1
0189   B2                     DB   lsb(star_)   ; *     1
018A   D6                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   8A                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   F2                     DB   lsb(colon_)   ; :     2
019A   FA                     DB   lsb(semicolon_)   ; ;     2
019B   4E                     DB   lsb(lt_)   ; <     1
019C   34                     DB   lsb(eq_)   ; =     1
019D   43                     DB   lsb(gt_)   ; >     1
019E   1B                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F5                     DB   lsb(upcase_)   ; A     1
01A1   F5                     DB   lsb(upcase_)   ; B
01A2   F5                     DB   lsb(upcase_)   ; C
01A3   F5                     DB   lsb(upcase_)   ; D
01A4   F5                     DB   lsb(upcase_)   ; E
01A5   F5                     DB   lsb(upcase_)   ; F
01A6   F5                     DB   lsb(upcase_)   ; G
01A7   F5                     DB   lsb(upcase_)   ; h
01A8   F5                     DB   lsb(upcase_)   ; I
01A9   F5                     DB   lsb(upcase_)   ; J
01AA   F5                     DB   lsb(upcase_)   ; K
01AB   F5                     DB   lsb(upcase_)   ; L
01AC   F5                     DB   lsb(upcase_)   ; M
01AD   F5                     DB   lsb(upcase_)   ; N
01AE   F5                     DB   lsb(upcase_)   ; O
01AF   F5                     DB   lsb(upcase_)   ; p
01B0   F5                     DB   lsb(upcase_)   ; Q
01B1   F5                     DB   lsb(upcase_)   ; R
01B2   F5                     DB   lsb(upcase_)   ; S
01B3   F5                     DB   lsb(upcase_)   ; T
01B4   F5                     DB   lsb(upcase_)   ; U
01B5   F5                     DB   lsb(upcase_)   ; V
01B6   F5                     DB   lsb(upcase_)   ; W
01B7   F5                     DB   lsb(upcase_)   ; X
01B8   F5                     DB   lsb(upcase_)   ; Y
01B9   F5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   F5 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 E7 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 37 0B               JP   percent   
020C                QUOTE_:      
020C   C3 1D 0B               JP   quote   
020F                LPAREN_:      
020F   C3 CB 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 6C 0B               JP   num   
021B                QUESTION_:      
021B   C3 04 0B               JP   question   
021E                BANG_:       
021E                BANG:        ; logical invert, any non zero value
021E   03                     INC   bc   
021F   0A                     LD   a,(bc)   
0220   FE 21                  CP   "!"   
0222   CA A7 0C               JP   z,booleanize   
0225   FE 3D                  CP   "="   
0227   20 05                  JR   nz,not   
0229   E1                     POP   hl   
022A   D1                     POP   de   
022B   C3 B9 0C               JP   notequals   
022E                NOT:         
022E   0B                     DEC   bc   
022F   21 00 00               LD   hl,0   ; is considered true
0232   18 0B                  JR   eq1   
0234                EQ_:         
0234                EQ:          
0234   03                     INC   bc   
0235   0A                     LD   a,(bc)   
0236   FE 3D                  CP   "="   
0238   28 04                  JR   z,eq0   
023A   0B                     DEC   bc   
023B   C3 96 0C               JP   assign   
023E                EQ0:         
023E   E1                     POP   hl   
023F                EQ1:         
023F   D1                     POP   de   
0240   C3 B2 0C               JP   equals   
0243                GT_:         
0243                GT:          
0243   03                     INC   bc   
0244   0A                     LD   a,(bc)   
0245   FE 3E                  CP   ">"   
0247   CA 0D 0D               JP   z,shiftRight   
024A   D1                     POP   de   
024B   E1                     POP   hl   
024C   18 09                  JR   lt1   
024E                LT_:         
024E                LT:          
024E   03                     INC   bc   
024F   0A                     LD   a,(bc)   
0250   FE 3C                  CP   "<"   
0252   CA FD 0C               JP   z,shiftLeft   
0255   E1                     POP   hl   
0256   D1                     POP   de   
0257                LT1:         
0257   FE 3D                  CP   "="   
0259   CA C0 0C               JP   z,lessthaneq   
025C   0B                     DEC   bc   
025D   C3 C5 0C               JP   lessthan   
0260                             ; index of an array, based on vDataWidth 22
0260                             ; array* num -- value    ; also sets vPointer to address
0260                HASH_:       
0260                HASH:        
0260                ARRAYINDEX:      
0260   E1                     POP   hl   ; hl = index
0261   D1                     POP   de   ; de = array
0262   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0265   3D                     DEC   a   
0266   28 01                  JR   z,arrayIndex1   
0268                ARRAYINDEX0:      
0268   29                     ADD   hl,hl   ; if data width = 2 then double
0269                ARRAYINDEX1:      
0269   19                     ADD   hl,de   ; add addr
026A   22 F8 23               LD   (vPointer),hl   ; store address in setter
026D   16 00                  LD   d,0   
026F   5E                     LD   e,(hl)   
0270   B7                     OR   a   ; check data width again
0271   28 02                  JR   z,arrayIndex2   
0273   23                     INC   hl   
0274   56                     LD   d,(hl)   
0275                ARRAYINDEX2:      
0275   D5                     PUSH   de   
0276   DD E9                  JP   (ix)   
0278                             ;                               4
0278                RPAREN_:      
0278                             ; jp rparen
0278                RPAREN:      
0278   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
027B   FD 46 09               LD   b,(iy+9)   
027E   DD E9                  JP   (ix)   
0280                             ; & and                          14
0280                             ; a b -- c
0280                AMPER_:      
0280                AMPER:       
0280                AND:         
0280   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0281   E1                     POP   hl   
0282   7B                     LD   a,e   
0283   A5                     AND   l   
0284   6F                     LD   l,a   
0285   7A                     LD   a,d   
0286   A4                     AND   h   
0287   67                     LD   h,a   
0288   18 5B                  JR   add3   
028A                             ; - sub
028A                             ; a b -- c
028A                             ; -- sub
028A                             ; b1 -- b2
028A                             ; -= sub
028A                             ; a b1 -- b2
028A                MINUS_:      
028A                MINUS:       
028A   03                     INC   bc   ; check if sign of a number
028B   0A                     LD   a,(bc)   
028C   0B                     DEC   bc   
028D   FE 30                  CP   "0"   
028F   38 05                  JR   c,sub   
0291   FE 3A                  CP   "9"+1   
0293   DA 6C 0B               JP   c,num   
0296                SUB:         ; Subtract the value 2nd on stack from top of stack
0296   E1                     POP   hl   ; hl = arg_b
0297   03                     INC   bc   
0298   FE 2D                  CP   "-"   
029A   20 04                  JR   nz,sub1   
029C   2B                     DEC   hl   ; --
029D   C3 98 0C               JP   assign0   
02A0                SUB1:        
02A0   D1                     POP   de   ; de = arg_a
02A1   FE 3D                  CP   "="   
02A3   28 02                  JR   z,sub2   
02A5   0B                     DEC   bc   ; -
02A6   EB                     EX   de,hl   
02A7                SUB2:        
02A7   B7                     OR   a   ; -=
02A8   ED 52                  SBC   hl,de   
02AA                SUB3:        
02AA   FE 3D                  CP   "="   
02AC   CA 98 0C               JP   z,assign0   
02AF   E5                     PUSH   hl   
02B0   DD E9                  JP   (ix)   
02B2                STAR_:       ; 21
02B2                STAR:        
02B2   03                     INC   bc   ; check for ** spread
02B3   0A                     LD   a,(bc)   
02B4   FE 2A                  CP   "*"   
02B6   CA D9 0C               JP   z,spread   
02B9   0B                     DEC   bc   
02BA                MUL:         
02BA   D1                     POP   de   ; get first value
02BB   E1                     POP   hl   
02BC                MUL2:        
02BC   C5                     PUSH   bc   ; Preserve the IP
02BD   44 4D                  LD   bc,hl   ; bc = 2nd value
02BF   21 00 00               LD   hl,0   
02C2   3E 10                  LD   a,16   
02C4                MUL3:        
02C4   29                     ADD   hl,hl   
02C5   CB 13                  RL   e   
02C7   CB 12                  RL   d   
02C9   30 04                  JR   nc,$+6   
02CB   09                     ADD   hl,bc   
02CC   30 01                  JR   nc,$+3   
02CE   13                     INC   de   
02CF   3D                     DEC   a   
02D0   20 F2                  JR   nz,mul3   
02D2   C1                     POP   bc   ; Restore the IP
02D3   C3 E5 02               JP   add3   
02D6                             ; + add                         25
02D6                             ; a b -- c
02D6                PLUS_:       
02D6                PLUS:        
02D6                ADD:         
02D6   03                     INC   bc   
02D7   0A                     LD   a,(bc)   
02D8   FE 2B                  CP   "+"   ; ++ increment variable
02DA   20 05                  JR   nz,add1   
02DC   E1                     POP   hl   
02DD   23                     INC   hl   
02DE   C3 98 0C               JP   assign0   
02E1                ADD1:        
02E1   0B                     DEC   bc   
02E2   D1                     POP   de   ; second term
02E3   E1                     POP   hl   ; first term
02E4   19                     ADD   hl,de   
02E5                ADD3:        
02E5   03                     INC   bc   
02E6   0A                     LD   a,(bc)   
02E7   FE 3D                  CP   "="   
02E9   28 04                  JR   z,add4   
02EB   0B                     DEC   bc   
02EC   E5                     PUSH   hl   
02ED   DD E9                  JP   (ix)   
02EF                ADD4:        
02EF   C3 98 0C               JP   assign0   
02F2                COLON_:      
02F2   C3 B3 0A               JP   colon   
02F5                             ;                               18
02F5                UPCASE_:      
02F5                UPCASE:      
02F5   0A                     LD   a,(bc)   ; a = identifier char
02F6   D6 41                  SUB   "A"   ; "A" = 0
02F8   18 0B                  JR   ident1   
02FA                             ; ;
02FA                SEMICOLON_:      
02FA   C3 C9 0A               JP   semicolon   
02FD                             ;********************** PAGE 2 END *********************************************
02FD                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(vars)   
0309   22 F8 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 53 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 19 10               JP   error   
0343                LAMBDA2:      
0343   CD 89 0D               CALL   parseBlock   
0346   CD F3 0D               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 09 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 3C 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 09 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 39 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 89 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E5 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 9C 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 DD 0A               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 23            LD   de,(vPointer)   
03ED   21 F8 23               LD   hl,vPointer   
03F0   C3 40 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD AB 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   6B 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
041E   C3 39 0D               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 39 0D               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A E8 23               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A E6 23               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 39 0D               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B EC 23            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B EC 23            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A E6 23               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 EC 23            LD   (vBufPtr),de   
04CC   C3 39 0D               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 59 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 95 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   EB 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   1A 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   23 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   7C 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   60 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   51 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   37 06                  DW   break   
0541   00                     DB   NUL   
0542   7C 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   74 06                  DW   decBase   
0547   00                     DB   NUL   
0548   74 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   94 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   E6 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   32 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   36 09                  DW   filter   
0556   31                     DB   "1"   
0557   41 10                  DW   f1   
0559   32                     DB   "2"   
055A   41 10                  DW   f2   
055C   33                     DB   "3"   
055D   41 10                  DW   f3   
055F   34                     DB   "4"   
0560   41 10                  DW   f4   
0562   00                     DB   NUL   
0563   D3 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hx hex
0566   82 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   7C 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   88 06                  DW   input   
056E   00                     DB   NUL   
056F   7C 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   93 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   F4 08                  DW   map   
0577   00                     DB   NUL   
0578   7C 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   9C 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   7C 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   A5 06                  DW   quit   
0583   00                     DB   NUL   
0584   7C 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   AF 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   B5 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   57 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   7C 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   BB 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   0D 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   C3 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   6C 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   F2 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   01 07                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   7C 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   CD 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   25 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   2E 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   37 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   6E 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   62 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   68 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   7C 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   46 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   7C 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   4C 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 20 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 FA 23            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 AA 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   FE 7B                  CP   "z"+1   ; if a > z then exit
05FD   30 19                  JR   nc,addrOf2   
05FF   D6 41                  SUB   "A"   ; a - 65
0601   38 15                  JR   c,addrOf2   ; if < A then exit
0603   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0605   38 06                  JR   c,addrOf1   
0607   D6 06                  SUB   "a"-("Z"+1)   
0609   FE 1A                  CP   "Z"-"A"+1   
060B   38 0B                  JR   c,addrOf2   ; if < a then exit
060D                ADDROF1:      
060D   87                     ADD   a,a   ; double a
060E   21 00 23               LD   hl,VARS   ; hl = VARS + a
0611   85                     ADD   a,l   
0612   6F                     LD   l,a   
0613   3E 00                  LD   a,0   
0615   8C                     ADC   a,h   
0616   67                     LD   h,a   
0617   E5                     PUSH   hl   
0618                ADDROF2:      
0618   DD E9                  JP   (ix)   
061A                             ; /al length of an array, num elements
061A                             ; array* -- num
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /as size in bytes of an array, based on current data width
0623                             ; array* -- num
0623                ARRAYSIZE:      
0623                          ;*Macro unroll:  PERFORM arrayLength
0623   DD 21 2A 06            LD   ix,performM_1511S1068   
0627   C3 1A 06               JP   arrayLength   
062A                PERFORMM_1511S1068:      
062A   E1                     POP   hl   
062B   3A E6 23               LD   a,(vDataWidth)   
062E   3D                     DEC   a   
062F   28 EF                  JR   z,arrayLength1   
0631   CB 3C                  SRL   h   
0633   CB 1D                  RR   l   
0635   18 E9                  JR   arrayLength1   
0637                             ; 13
0637                             ; /br break from loop
0637                             ; --
0637                BREAK:       
0637   E1                     POP   hl   ; hl = condition, break if false
0638   7D                     LD   a,l   
0639   B4                     OR   h   
063A   28 02                  JR   z,break1   
063C   DD E9                  JP   (ix)   
063E                BREAK1:      
063E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0640   FD 54                  LD   d,iyh   
0642   21 08 00               LD   hl,8   
0645   19                     ADD   hl,de   
0646   23                     INC   hl   
0647   23                     INC   hl   
0648   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
064B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
064E   C3 9C 0B               JP   blockEnd   
0651                             ; /b
0651                BYTEMODE:      
0651   21 01 00               LD   hl,1   
0654                BYTEMODE1:      
0654   22 E6 23               LD   (vDataWidth),hl   
0657   DD E9                  JP   (ix)   
0659                             ; //
0659                COMMENT:      
0659   03                     INC   bc   ; point to next char
065A   0A                     LD   a,(bc)   
065B   FE 20                  CP   " "   ; terminate on any char less than SP
065D   30 FA                  JR   nc,comment   
065F   0B                     DEC   bc   
0660   DD E9                  JP   (ix)   
0662                CONSTHEAPSTART:      
0662   11 22 24               LD   de,HEAP   
0665   C3 43 07               JP   constant   
0668                CONSTTIBSTART:      
0668   11 00 21               LD   de,TIB   
066B   C3 43 07               JP   constant   
066E                CONSTBUFSTART:      
066E   11 00 22               LD   de,BUFFER   
0671   C3 43 07               JP   constant   
0674                DECBASE:      
0674   21 0A 00               LD   hl,10   
0677                DECBASE1:      
0677   22 E8 23               LD   (vNumBase),hl   
067A   DD E9                  JP   (ix)   
067C                ERROR1:      
067C   21 01 00               LD   hl,1   ; error 1: unknown command
067F   C3 19 10               JP   error   
0682                HEXBASE:      
0682   21 10 00               LD   hl,16   
0685   C3 77 06               JP   decBase1   
0688                             ; Z80 port input
0688                             ; port -- value
0688                INPUT:       
0688   E1                     POP   hl   
0689   59                     LD   e,c   ; save IP
068A   4D                     LD   c,l   
068B   ED 68                  IN   l,(c)   
068D   26 00                  LD   h,0   
068F   4B                     LD   c,e   ; restore IP
0690   E5                     PUSH   hl   
0691   DD E9                  JP   (ix)   
0693                             ; /k                              6
0693                KEY:         
0693   CD 81 00               CALL   getchar   
0696   26 00                  LD   h,0   
0698   6F                     LD   l,a   
0699   E5                     PUSH   hl   
069A   DD E9                  JP   (ix)   
069C                             ; /o Z80 port output
069C                             ; value port --
069C                OUTPUT:      
069C   E1                     POP   hl   
069D   59                     LD   e,c   ; save IP
069E   4D                     LD   c,l   
069F   E1                     POP   hl   
06A0   ED 69                  OUT   (c),l   
06A2   4B                     LD   c,e   ; restore IP
06A3   DD E9                  JP   (ix)   
06A5                             ; /qt
06A5                             ; bool --
06A5                QUIT:        
06A5   E1                     POP   hl   ; hl = condition, exit if true
06A6   7D                     LD   a,l   
06A7   B4                     OR   h   
06A8   20 02                  JR   nz,quit1   
06AA   DD E9                  JP   (ix)   
06AC                QUIT1:       
06AC   C3 9C 0B               JP   blockEnd   
06AF                RECUR:       
06AF   E1                     POP   hl   
06B0   22 F2 23               LD   (vRecur),hl   
06B3   DD E9                  JP   (ix)   
06B5                REMAIN:      
06B5   2A FA 23               LD   hl,(vRemain)   
06B8   E5                     PUSH   hl   
06B9   DD E9                  JP   (ix)   
06BB                STRINGBEGIN:      
06BB   21 FF FF               LD   hl,TRUE   ; string mode = true
06BE   22 F6 23               LD   (vStrMode),hl   
06C1   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06C3                STRINGEND:      
06C3   21 00 00               LD   hl,FALSE   ; string mode = false
06C6   22 F6 23               LD   (vStrMode),hl   
06C9   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
06CC   AF                     XOR   a   
06CD   77                     LD   (hl),a   
06CE   23                     INC   hl   ; hl = string_end*
06CF   ED 43 04 24            LD   (vTemp1),bc   ; save IP
06D3   11 00 22               LD   de,BUFFER   ; de = string*
06D6   B7                     OR   a   ; bc = size
06D7   ED 52                  SBC   hl,de   
06D9   44 4D                  LD   bc,hl   
06DB   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06DE   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06DF   D5                     PUSH   de   ; return hstring*
06E0   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06E2   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06E6   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
06EA                STRINGEND1:      
06EA   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06ED   22 EC 23               LD   (vBufPtr),hl   
06F0   DD E9                  JP   (ix)   
06F2                STRINGLENGTH:      
06F2   D1                     POP   de   
06F3   21 00 00               LD   hl,0   
06F6   18 02                  JR   stringLength2   
06F8                STRINGLENGTH1:      
06F8   13                     INC   de   
06F9   23                     INC   hl   
06FA                STRINGLENGTH2:      
06FA   1A                     LD   a,(de)   
06FB   B7                     OR   a   
06FC   20 FA                  JR   nz,stringLength1   
06FE                STRINGLENGTH3:      
06FE   E5                     PUSH   hl   
06FF   DD E9                  JP   (ix)   
0701                STRINGSIZE:      
0701                          ;*Macro unroll:  PERFORM stringLength
0701   DD 21 08 07            LD   ix,performM_1659S1236   
0705   C3 F2 06               JP   stringLength   
0708                PERFORMM_1659S1236:      
0708   E1                     POP   hl   
0709   23                     INC   hl   
070A   C3 FE 06               JP   stringLength3   
070D                             ; /sc string compare
070D                             ; string1* string2* -- bool
070D                             ; Compares two null terminated strings.
070D                STRINGCOMPARE:      
070D   D1                     POP   de   
070E   E1                     POP   hl   
070F                STRINGCOMPARE1:      
070F   1A                     LD   a,(de)   
0710   BE                     CP   (hl)   
0711   20 07                  JR   nz,stringCompare2   
0713   B7                     OR   a   
0714   28 09                  JR   z,stringCompare3   
0716   13                     INC   de   
0717   23                     INC   hl   
0718   18 F5                  JR   stringCompare1   
071A                STRINGCOMPARE2:      
071A   21 00 00               LD   hl,FALSE   
071D   18 03                  JR   stringCompare4   
071F                STRINGCOMPARE3:      
071F   21 FF FF               LD   hl,TRUE   
0722                STRINGCOMPARE4:      
0722   E5                     PUSH   hl   
0723   DD E9                  JP   (ix)   
0725                VARBUFPTR:      
0725   ED 5B EC 23            LD   de,(vBufPtr)   
0729   21 EC 23               LD   hl,vBufPtr   
072C   18 12                  JR   variable   
072E                VARHEAPPTR:      
072E   ED 5B F0 23            LD   de,(vHeapPtr)   
0732   21 F0 23               LD   hl,vHeapPtr   
0735   18 09                  JR   variable   
0737                VARTIBPTR:      
0737   ED 5B EA 23            LD   de,(vTIBPtr)   
073B   21 EA 23               LD   hl,vTIBPtr   
073E   18 00                  JR   variable   
0740                VARIABLE:      
0740   22 F8 23               LD   (vPointer),hl   
0743                CONSTANT:      
0743   D5                     PUSH   de   
0744   DD E9                  JP   (ix)   
0746                             ; /wm
0746                WORDMODE:      
0746   21 02 00               LD   hl,2   
0749   C3 54 06               JP   byteMode1   
074C                             ; /x
074C                XOR:         
074C   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
074D                XOR1:        
074D   E1                     POP   hl   
074E   7B                     LD   a,e   
074F   AD                     XOR   l   
0750   6F                     LD   l,a   
0751   7A                     LD   a,d   
0752   AC                     XOR   h   
0753   67                     LD   h,a   
0754   C3 E5 02               JP   add3   
0757                             ;*******************************************************************
0757                             ; Monty implementations
0757                             ;*******************************************************************
0757                             ; /rg rangeSrc
0757                             ; begin end step -- src
0757                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0757                RANGESRC:      ; range source: begin, end, step, local: L
0757   CD 9F 03               CALL   go   
075A   00 00                  DW   NUL   
075C   66 07                  DW   rangeSrcM_1724S1310   
075E   60 07                  DW   $+2   
0760   01                     DB   1   
0761   04 62 65 73 4C         .PSTR   "besL"   
0766                RANGESRCM_1724S1310:      
0766   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0767   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
078C   5C 6B 74 7B            DB   "\\kt{"   
0790   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0798   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
079E   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07A6   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07AE   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07B8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07C0   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07C5   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07D9   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
07E1   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07E8   7D                     DB   "}"   
07E9   7D                     DB   "}"   
07EA   00                     DB   0   
07EB                             ; /ai arrayIter
07EB                             ; array* -- src
07EB                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07EB                ARRAYITER:      
07EB   CD 9F 03               CALL   go   
07EE   00 00                  DW   NUL   
07F0   F8 07                  DW   arrayIterM_1743S1330   
07F2   F4 07                  DW   $+2   
07F4   01                     DB   1   
07F5   02 61 4C               .PSTR   "aL"   
07F8                ARRAYITERM_1743S1330:      
07F8   7B                     DB   "{"   
07F9   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0809   5C 6B 74 7B            DB   "\\kt{"   
080D   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0815   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
081B   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0823   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
082B   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0832   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
083A   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0843   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
085A   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0862   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0869   7D                     DB   "}"   
086A   7D                     DB   "}"   
086B   00                     DB   0   
086C                             ; /si stringIter
086C                             ; string* -- src
086C                          ;*Macro unroll: FUNC stringIter, 1, "sL"
086C                STRINGITER:      
086C   CD 9F 03               CALL   go   
086F   00 00                  DW   NUL   
0871   79 08                  DW   stringIterM_1762S1350   
0873   75 08                  DW   $+2   
0875   01                     DB   1   
0876   02 73 4C               .PSTR   "sL"   
0879                STRINGITERM_1762S1350:      
0879   7B                     DB   "{"   
087A   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0884   5C 6B 74 7B            DB   "\\kt{"   
0888   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0890   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0897   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
089F   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08A7   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08AE   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08BF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08C7   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08CE   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08E2   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
08EA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08F1   7D                     DB   "}"   
08F2   7D                     DB   "}"   
08F3   00                     DB   0   
08F4                             ; /mp map
08F4                             ; src func -- src1
08F4                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08F4                MAP:         ; map: source, function
08F4   CD 9F 03               CALL   go   
08F7   00 00                  DW   NUL   
08F9   01 09                  DW   mapM_1782S1372   
08FB   FD 08                  DW   $+2   
08FD   00                     DB   0   
08FE   02 73 66               .PSTR   "sf"   
0901                MAPM_1782S1372:      
0901   7B                     DB   "{"   
0902   5C 6B 74 7B            DB   "\\kt{"   
0906   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
090E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0912   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0917   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0923   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
092C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0933   7D                     DB   "}"   
0934   7D                     DB   "}"   
0935   00                     DB   0   
0936                             ; /ft filter
0936                             ; src pred -- src1
0936                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0936                FILTER:      ; filter: source, predicate, local: T
0936   CD 9F 03               CALL   go   
0939   00 00                  DW   NUL   
093B   44 09                  DW   filterM_1796S1387   
093D   3F 09                  DW   $+2   
093F   01                     DB   1   
0940   03 73 70 54            .PSTR   "spT"   
0944                FILTERM_1796S1387:      
0944   7B                     DB   "{"   
0945   5B 30 5D 25 54 3D      DB   "[0]%T="   
094B   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
094F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0953   5B                     DB   "["   
0954   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0961   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0969   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
096D   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0972   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0988   3F 3F                  DB   "??"   
098A   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0991   7D                     DB   "}"   
0992   7D                     DB   "}"   
0993   00                     DB   0   
0994                             ; /fd fold
0994                             ; reducer is a function like: \\da00bbLi4u
0994                             ; src init reducer -- src1
0994                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0994                FOLD:        ; src, init, reducer
0994   CD 9F 03               CALL   go   
0997   00 00                  DW   NUL   
0999   A3 09                  DW   foldM_1815S1407   
099B   9D 09                  DW   $+2   
099D   01                     DB   1   
099E   04 73 69 72 41         .PSTR   "sirA"   
09A3                FOLDM_1815S1407:      
09A3   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09A4   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09AB   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09AF   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09B3   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09B8   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09D3   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09DC   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09E3   7D                     DB   "}"   
09E4   7D                     DB   "}"   
09E5   00                     DB   0   
09E6                             ; /fe forEach
09E6                             ; src proc --
09E6                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09E6                FOREACH:      ; forEach: source, procedure, local: T
09E6   CD 9F 03               CALL   go   
09E9   00 00                  DW   NUL   
09EB   F4 09                  DW   forEachM_1829S1422   
09ED   EF 09                  DW   $+2   
09EF   01                     DB   1   
09F0   03 73 70 54            .PSTR   "spT"   
09F4                FOREACHM_1829S1422:      
09F4   7B                     DB   "{"   
09F5   5B 30 5D 25 54 3D      DB   "[0]%T="   
09FB   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09FF   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A07   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A0C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A1E   3F 3F                  DB   "??"   ; ifte:
0A20   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A29   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A30   7D                     DB   "}"   
0A31   00                     DB   0   
0A32                             ; ; /fs funcSrc
0A32                             ; ; func -- src
0A32                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A32                FUNCSRC:      ; :f func or block
0A32   CD 9F 03               CALL   go   
0A35   00 00                  DW   NUL   
0A37   3E 0A                  DW   funcSrcM_1843S1437   
0A39   3B 0A                  DW   $+2   
0A3B   00                     DB   0   
0A3C   01 66                  .PSTR   "f"   
0A3E                FUNCSRCM_1843S1437:      
0A3E   7B                     DB   "{"   
0A3F   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A43   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A4B   5C 64 74 7B            DB   "\\dt{"   
0A4F   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A61   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A68   7D                     DB   "}"   
0A69   7D                     DB   "}"   
0A6A   00                     DB   0   
0A6B                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A6B                PRINTARRAY:      
0A6B   CD 9F 03               CALL   go   
0A6E   00 00                  DW   NUL   
0A70   79 0A                  DW   printArrayM_1853S1448   
0A72   74 0A                  DW   $+2   
0A74   02                     DB   2   
0A75   03 61 62 63            .PSTR   "abc"   
0A79                PRINTARRAYM_1853S1448:      
0A79   7B                     DB   "{"   
0A7A   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AB1   7D                     DB   "}"   
0AB2   00                     DB   0   
0AB3                             ;*******************************************************************
0AB3                             ; implementations continued
0AB3                             ;*******************************************************************
0AB3                COLON:       
0AB3   03                     INC   bc   ; arg_list must ve immediately followed by {
0AB4   0A                     LD   a,(bc)   
0AB5   FE 3D                  CP   "="   ; := definition
0AB7   28 07                  JR   z,defineStart   
0AB9   0B                     DEC   bc   
0ABA   21 01 00               LD   hl,1   
0ABD   C3 19 10               JP   error   
0AC0                DEFINESTART:      
0AC0   E1                     POP   hl   ; discard variable value
0AC1   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
0AC4   22 F4 23               LD   (vDefine),hl   
0AC7   DD E9                  JP   (ix)   
0AC9                SEMICOLON:      
0AC9                DEFINEEND:      
0AC9   2A F4 23               LD   hl,(vDefine)   ; hl = define*
0ACC   7D                     LD   a,l   
0ACD   B4                     OR   h   
0ACE   28 0B                  JR   z,defineEnd1   
0AD0   11 00 00               LD   de,NUL   ; set vDefine=NUL
0AD3   ED 53 F4 23            LD   (vDefine),de   
0AD7   D1                     POP   de   ; de = value
0AD8   C3 9C 0C               JP   assign1   
0ADB                DEFINEEND1:      
0ADB   DD E9                  JP   (ix)   
0ADD                             ; ~ bitwise invert
0ADD                TILDE:       
0ADD                INVERT:      
0ADD   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0ADE   7D                     LD   a,l   
0ADF   2F                     CPL      
0AE0   6F                     LD   l,a   
0AE1   7C                     LD   a,h   
0AE2   2F                     CPL      
0AE3   67                     LD   h,a   
0AE4   C3 E5 02               JP   add3   
0AE7                             ; $ hex                         ; 22
0AE7                DOLLAR:      
0AE7                HEXNUM:      
0AE7   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AEA                HEXNUM1:      
0AEA   03                     INC   bc   
0AEB   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AEC   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AEE   28 02                  JR   z,hexnum2   ; no a decimal
0AF0   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AF2                HEXNUM2:      
0AF2   D6 30                  SUB   $30   ; form decimal digit
0AF4   DA 8E 0B               JP   c,num2   
0AF7   FE 10                  CP   $0F+1   
0AF9   D2 8E 0B               JP   nc,num2   
0AFC   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AFD   29                     ADD   hl,hl   ; 4X
0AFE   29                     ADD   hl,hl   ; 8X
0AFF   29                     ADD   hl,hl   ; 16X
0B00   85                     ADD   a,l   ; add into bottom of hl
0B01   6F                     LD   l,a   
0B02   18 E6                  JR   hexnum1   
0B04                             ; ? if                            23
0B04                             ; condition then -- value
0B04                QUESTION:      
0B04                IF:          
0B04   03                     INC   bc   
0B05   0A                     LD   a,(bc)   
0B06   FE 3F                  CP   "?"   
0B08   28 06                  JR   z,ifte   
0B0A   0B                     DEC   bc   
0B0B   11 00 00               LD   de,NUL   ; NUL pointer for else
0B0E   18 01                  JR   ifte1   
0B10                             ; ?? ifte
0B10                             ; condition then else -- value
0B10                IFTE:        
0B10   D1                     POP   de   ; de = else
0B11                IFTE1:       
0B11   E1                     POP   hl   ; hl = then
0B12   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B13   7C                     LD   a,h   
0B14   B5                     OR   l   
0B15   E1                     POP   hl   ; hl = then
0B16   CA A0 03               JP   z,go1   ; if z de = else
0B19   EB                     EX   de,hl   ; condition = false, de = then
0B1A   C3 A0 03               JP   go1   
0B1D                             ; string                        ;38
0B1D                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B1D                QUOTE:       
0B1D                STRING:      
0B1D   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B20   E5                     PUSH   hl   ; save start of string
0B21   0A                     LD   a,(bc)   
0B22   5F                     LD   e,a   ; e = matching terminator
0B23   03                     INC   bc   ; point to next char
0B24   18 03                  JR   string2   
0B26                STRING1:      
0B26   77                     LD   (hl),a   
0B27   23                     INC   hl   ; increase count
0B28   03                     INC   bc   ; point to next char
0B29                STRING2:      
0B29   0A                     LD   a,(bc)   
0B2A   BB                     CP   e   ; is it the string terminator
0B2B   28 02                  JR   z,string3   
0B2D   18 F7                  JR   string1   
0B2F                STRING3:      
0B2F   AF                     XOR   a   ; write NUL to terminate string
0B30   77                     LD   (hl),a   ; hl = end of string
0B31   23                     INC   hl   
0B32   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B35   DD E9                  JP   (ix)   
0B37                             ; %a .. %z                      43
0B37                             ; -- value
0B37                             ; returns value of arg
0B37                PERCENT:      
0B37                ARG:         
0B37   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B3A   FD 56 05               LD   d,(iy+5)   
0B3D   EB                     EX   de,hl   
0B3E   7D                     LD   a,l   ; arg_list* == null, skip
0B3F   B4                     OR   h   
0B40   28 1A                  JR   z,arg0a   
0B42   23                     INC   hl   ; a = num_args, hl = arg_list*
0B43   7E                     LD   a,(hl)   
0B44   23                     INC   hl   
0B45   B7                     OR   a   
0B46   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B48   5F                     LD   e,a   ; e = a = num_args
0B49   03                     INC   bc   ; a = next char = dollar_name
0B4A   0A                     LD   a,(bc)   
0B4B   C5                     PUSH   bc   ; save IP
0B4C   43                     LD   b,e   ; b = e = num_args
0B4D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B50   FD 56 03               LD   d,(iy+3)   
0B53                ARG0:        
0B53   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B54   1B                     DEC   de   
0B55   BE                     CP   (hl)   
0B56   28 09                  JR   z,arg1   
0B58   23                     INC   hl   ; hl = next arg_list*
0B59   10 F8                  DJNZ   arg0   
0B5B   C1                     POP   bc   ; no match, restore IP
0B5C                ARG0A:       
0B5C   11 00 00               LD   de,0   ; return 0
0B5F   18 08                  JR   arg1a   
0B61                ARG1:        
0B61   C1                     POP   bc   ; restore IP
0B62   EB                     EX   de,hl   ; hl = arg*
0B63   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0B66   5E                     LD   e,(hl)   
0B67   23                     INC   hl   
0B68   56                     LD   d,(hl)   ; de = arg
0B69                ARG1A:       
0B69   D5                     PUSH   de   ; push arg
0B6A   DD E9                  JP   (ix)   
0B6C                             ; 0..9 number                   37
0B6C                NUM:         
0B6C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B6F   0A                     LD   a,(bc)   ; Get numeral or -
0B70   FE 2D                  CP   "-"   
0B72   20 01                  JR   nz,num0   
0B74   03                     INC   bc   ; move to next char, no flags affected
0B75                NUM0:        
0B75   08                     EX   af,af'   ; save zero flag = 0 for later
0B76                NUM1:        
0B76   0A                     LD   a,(bc)   ; read digit
0B77   D6 30                  SUB   "0"   ; less than 0?
0B79   38 13                  JR   c,num2   ; not a digit, exit loop
0B7B   FE 0A                  CP   10   ; greater that 9?
0B7D   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B7F   03                     INC   bc   ; inc IP
0B80   54 5D                  LD   de,hl   ; multiply hl * 10
0B82   29                     ADD   hl,hl   
0B83   29                     ADD   hl,hl   
0B84   19                     ADD   hl,de   
0B85   29                     ADD   hl,hl   
0B86   85                     ADD   a,l   ; add digit in a to hl
0B87   6F                     LD   l,a   
0B88   3E 00                  LD   a,0   
0B8A   8C                     ADC   a,h   
0B8B   67                     LD   h,a   
0B8C   18 E8                  JR   num1   
0B8E                NUM2:        
0B8E   0B                     DEC   bc   
0B8F   08                     EX   af,af'   ; restore zero flag
0B90   20 07                  JR   nz,num3   
0B92   EB                     EX   de,hl   ; negate the value of hl
0B93   21 00 00               LD   hl,0   
0B96   B7                     OR   a   ; jump to sub2
0B97   ED 52                  SBC   hl,de   
0B99                NUM3:        
0B99   E5                     PUSH   hl   ; Put the number on the stack
0B9A   DD E9                  JP   (ix)   ; and process the next character
0B9C                             ; }                               58
0B9C                RBRACE:      
0B9C                BLOCKEND:      
0B9C   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B9F   FD 56 01               LD   d,(iy+1)   
0BA2   ED 53 04 24            LD   (vTemp1),de   
0BA6   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BA9   FD 56 07               LD   d,(iy+7)   
0BAC   ED 53 06 24            LD   (vTemp2),de   
0BB0   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BB3   FD 56 03               LD   d,(iy+3)   
0BB6   EB                     EX   de,hl   
0BB7   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BBA   FD 56 01               LD   d,(iy+1)   
0BBD   13                     INC   de   ; for carry flag <=
0BBE   B7                     OR   a   
0BBF   ED 52                  SBC   hl,de   
0BC1   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BC3   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BC5   FD 5D                  LD   e,iyl   
0BC7   21 08 00               LD   hl,8   
0BCA   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BCB   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BCC   18 0C                  JR   blockEnd2   
0BCE                BLOCKEND1:      ; same scope
0BCE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD1   FD 56 03               LD   d,(iy+3)   
0BD4   EB                     EX   de,hl   
0BD5   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BD7   FD 5D                  LD   e,iyl   
0BD9   EB                     EX   de,hl   
0BDA                BLOCKEND2:      
0BDA   44 4D                  LD   bc,hl   ; bc = hl = BP
0BDC   B7                     OR   a   ; hl = BP - SP = count
0BDD   ED 72                  SBC   hl,sp   
0BDF   7D                     LD   a,l   
0BE0   B4                     OR   h   
0BE1   28 09                  JR   z,blockEnd3   
0BE3   C5                     PUSH   bc   ; bc = count, hl = BP
0BE4   44 4D                  LD   bc,hl   
0BE6   E1                     POP   hl   
0BE7   2B                     DEC   hl   ; hl = BP-1
0BE8   1B                     DEC   de   ; de = args*-1
0BE9   ED B8                  LDDR      
0BEB   13                     INC   de   
0BEC                BLOCKEND3:      
0BEC   EB                     EX   de,hl   ; sp = de = new tos*
0BED   F9                     LD   sp,hl   
0BEE   ED 4B 06 24            LD   bc,(vTemp2)   
0BF2   FD 2A 04 24            LD   iy,(vTemp1)   
0BF6   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0BFA   7B                     LD   a,e   ; check for NUL
0BFB   B2                     OR   d   
0BFC   20 02                  JR   nz,blockEnd4   
0BFE   DD E9                  JP   (ix)   
0C00                BLOCKEND4:      
0C00   21 00 00               LD   hl,0   ; clear recur vector
0C03   22 F2 23               LD   (vRecur),hl   
0C06   C3 A0 03               JP   go1   ; execute de
0C09                GOBLOCK:      
0C09   ED 53 04 24            LD   (vTemp1),de   ; save de
0C0D   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C10   FD 54                  LD   d,iyh   
0C12   FD 5D                  LD   e,iyl   
0C14   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C15   ED 52                  SBC   hl,de   
0C17   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C1B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C1C   B4                     OR   h   
0C1D   3E 00                  LD   a,0   
0C1F   28 6A                  JR   z,goFunc8   
0C21   C5                     PUSH   bc   ; push IP
0C22   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C25   FD 46 05               LD   b,(iy+5)   
0C28   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C2B   FD 66 03               LD   h,(iy+3)   
0C2E                GOBLOCK2:      
0C2E   C5                     PUSH   bc   ; arg_list*
0C2F   E5                     PUSH   hl   ; first_arg*
0C30   FD E5                  PUSH   iy   ; push BP
0C32   FD 21 00 00            LD   iy,0   ; BP = SP
0C36   FD 39                  ADD   iy,sp   
0C38                GOBLOCK3:      
0C38   42 4B                  LD   bc,de   ; bc = de = block*-1
0C3A   DD E9                  JP   (ix)   
0C3C                GOFUNC:      ; execute func
0C3C   EB                     EX   de,hl   ; hl = func*
0C3D   5E                     LD   e,(hl)   ; de = partial_array*
0C3E   23                     INC   hl   
0C3F   56                     LD   d,(hl)   
0C40   23                     INC   hl   
0C41   7B                     LD   a,e   ; if partial_array* == null skip
0C42   B2                     OR   d   
0C43   28 21                  JR   z,goFunc3   
0C45   ED 43 04 24            LD   (vTemp1),bc   
0C49   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C4C   EB                     EX   de,hl   ; hl = partial_array*
0C4D   2B                     DEC   hl   ; bc = count
0C4E   46                     LD   b,(hl)   
0C4F   2B                     DEC   hl   
0C50   4E                     LD   c,(hl)   
0C51   23                     INC   hl   ; hl = array data*
0C52   23                     INC   hl   
0C53   18 06                  JR   goFunc2   ; push each item on stack
0C55                GOFUNC1:      
0C55   5E                     LD   e,(hl)   ; de = partial item
0C56   23                     INC   hl   
0C57   56                     LD   d,(hl)   
0C58   23                     INC   hl   
0C59   D5                     PUSH   de   ; push on stack
0C5A   0B                     DEC   bc   
0C5B                GOFUNC2:      
0C5B   79                     LD   a,c   ; if count != 0 then loop
0C5C   B0                     OR   b   
0C5D   20 F6                  JR   nz,goFunc1   
0C5F   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C63   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C66                GOFUNC3:      
0C66   5E                     LD   e,(hl)   ; de = block*
0C67   23                     INC   hl   
0C68   56                     LD   d,(hl)   
0C69   23                     INC   hl   
0C6A   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C6E   5E                     LD   e,(hl)   ; de = arg_list*
0C6F   23                     INC   hl   
0C70   56                     LD   d,(hl)   
0C71   23                     INC   hl   
0C72   EB                     EX   de,hl   ; hl = arg_list*
0C73   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C77   7D                     LD   a,l   ; if arg_list* == null a = 0
0C78   B4                     OR   h   
0C79   20 03                  JR   nz,goFunc4   
0C7B   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C7C   18 0D                  JR   goFunc8   
0C7E                GOFUNC4:      ; allocate locals
0C7E   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C7F   18 03                  JR   goFunc6   
0C81                GOFUNC5:      ; loop
0C81   3B                     DEC   sp   
0C82   3B                     DEC   sp   
0C83   3D                     DEC   a   
0C84                GOFUNC6:      
0C84   B7                     OR   a   
0C85   20 FA                  JR   nz,goFunc5   ; end loop
0C87                GOFUNC7:      
0C87   23                     INC   hl   ; a = num_args* x 2
0C88   7E                     LD   a,(hl)   
0C89   2B                     DEC   hl   
0C8A   87                     ADD   a,a   ; a *= 2
0C8B                GOFUNC8:      
0C8B   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C8C   44 4D                  LD   bc,hl   
0C8E   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C91   85                     ADD   a,l   
0C92   6F                     LD   l,a   
0C93   39                     ADD   hl,sp   
0C94   18 98                  JR   goBlock2   
0C96                             ; =                              21
0C96                             ; value _oldValue --            ; uses address in vPointer 15
0C96                ASSIGN:      
0C96   E1                     POP   hl   ; discard last accessed value
0C97   E1                     POP   hl   ; hl = new value
0C98                ASSIGN0:      
0C98   EB                     EX   de,hl   ; de = new value
0C99   2A F8 23               LD   hl,(vPointer)   
0C9C                ASSIGN1:      ; entry point from defineEnd
0C9C   73                     LD   (hl),e   
0C9D   3A E6 23               LD   a,(vDataWidth)   
0CA0   3D                     DEC   a   ; is it byte?
0CA1   28 02                  JR   z,assign2   
0CA3   23                     INC   hl   
0CA4   72                     LD   (hl),d   
0CA5                ASSIGN2:      
0CA5   DD E9                  JP   (ix)   
0CA7                BOOLEANIZE:      
0CA7   E1                     POP   hl   
0CA8   7D                     LD   a,l   
0CA9   B4                     OR   h   
0CAA   28 03                  JR   z,booleanize1   
0CAC   21 FF FF               LD   hl,TRUE   
0CAF                BOOLEANIZE1:      
0CAF   E5                     PUSH   hl   
0CB0   DD E9                  JP   (ix)   
0CB2                             ; hl = value1, de = value2
0CB2                             ; hl = result
0CB2                EQUALS:      
0CB2   B7                     OR   a   ; reset the carry flag
0CB3   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0CB5   28 16                  JR   z,true1   
0CB7   18 1A                  JR   false1   
0CB9                NOTEQUALS:      
0CB9   B7                     OR   a   ; reset the carry flag
0CBA   ED 52                  SBC   hl,de   
0CBC   20 0F                  JR   nz,true1   
0CBE   18 13                  JR   false1   
0CC0                             ; hl = value1 de = value2
0CC0                             ; hl = result
0CC0                LESSTHANEQ:      
0CC0   B7                     OR   a   
0CC1   ED 52                  SBC   hl,de   
0CC3   18 05                  JR   lessthan1   
0CC5                             ; hl = value1 de = value2
0CC5                             ; hl = result
0CC5                LESSTHAN:      
0CC5   B7                     OR   a   
0CC6   ED 52                  SBC   hl,de   
0CC8   28 09                  JR   z,false1   
0CCA                LESSTHAN1:      
0CCA   FA D3 0C               JP   m,false1   
0CCD                TRUE1:       
0CCD   21 FF FF               LD   hl,TRUE   
0CD0   E5                     PUSH   hl   
0CD1   DD E9                  JP   (ix)   
0CD3                NULL1:       
0CD3                FALSE1:      
0CD3   21 00 00               LD   hl,FALSE   
0CD6   E5                     PUSH   hl   
0CD7   DD E9                  JP   (ix)   
0CD9                SPREAD:      
0CD9   E1                     POP   hl   ; hl = array*
0CDA   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0CDE   2B                     DEC   hl   ; bc = length
0CDF   46                     LD   b,(hl)   
0CE0   2B                     DEC   hl   
0CE1   4E                     LD   c,(hl)   
0CE2   23                     INC   hl   ; move back to array 0
0CE3   23                     INC   hl   
0CE4   18 0D                  JR   spread3   
0CE6                SPREAD1:      
0CE6   5E                     LD   e,(hl)   ; e = lsb data at hl
0CE7   23                     INC   hl   
0CE8   3A E6 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CEB   57                     LD   d,a   
0CEC   15                     DEC   d   
0CED   28 02                  JR   z,spread2   
0CEF   56                     LD   d,(hl)   ; d = msb data at hl
0CF0   23                     INC   hl   
0CF1                SPREAD2:      
0CF1   D5                     PUSH   de   ; return de
0CF2   0B                     DEC   bc   ; count--
0CF3                SPREAD3:      
0CF3   79                     LD   a,c   ; exit loop if bc == 0
0CF4   B0                     OR   b   
0CF5   20 EF                  JR   nz,spread1   
0CF7   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0CFB   DD E9                  JP   (ix)   
0CFD                             ; shiftLeft                     15
0CFD                             ; value count -- value2          shift left count places
0CFD                SHIFTLEFT:      
0CFD   50 59                  LD   de,bc   ; save IP
0CFF   C1                     POP   bc   ; bc = count
0D00   41                     LD   b,c   ; b = loop counter
0D01   E1                     POP   hl   
0D02   04                     INC   b   ; test for counter=0 case
0D03   18 01                  JR   shiftLeft2   
0D05                SHIFTLEFT1:      
0D05   29                     ADD   hl,hl   ; left shift hl
0D06                SHIFTLEFT2:      
0D06   10 FD                  DJNZ   shiftLeft1   
0D08   E5                     PUSH   hl   
0D09   42 4B                  LD   bc,de   ; restore IP
0D0B   DD E9                  JP   (ix)   
0D0D                             ; shiftRight                    16
0D0D                             ; value count -- value2          shift left count places
0D0D                SHIFTRIGHT:      
0D0D   50 59                  LD   de,bc   ; save IP
0D0F   C1                     POP   bc   ; bc = count
0D10   41                     LD   b,c   ; b = loop counter
0D11   E1                     POP   hl   
0D12   04                     INC   b   ; test for counter=0 case
0D13   18 04                  JR   shiftRight2   
0D15                SHIFTRIGHT1:      
0D15   CB 3C                  SRL   h   ; right shift hl
0D17   CB 1D                  RR   l   
0D19                SHIFTRIGHT2:      
0D19   10 FA                  DJNZ   shiftRight1   
0D1B   E5                     PUSH   hl   
0D1C   42 4B                  LD   bc,de   ; restore IP
0D1E   DD E9                  JP   (ix)   
0D20                             ; division subroutine.
0D20                             ; bc: divisor, de: dividend, hl: remainder
0D20                DIVIDE:      
0D20   21 00 00               LD   hl,0   ; zero the remainder
0D23   3E 10                  LD   a,16   ; loop counter
0D25                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D25   CB 21                  SLA   c   
0D27   CB 10                  RL   b   
0D29   ED 6A                  ADC   hl,hl   
0D2B   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D2D   38 03                  JR   c,divide2   
0D2F   0C                     INC   c   
0D30   18 01                  JR   divide3   
0D32                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D32   19                     ADD   hl,de   
0D33                DIVIDE3:      
0D33   3D                     DEC   a   
0D34   20 EF                  JR   nz,divide1   
0D36   50 59                  LD   de,bc   ; result from bc to de
0D38   C9                     RET      
0D39                DOTNEXT:      
0D39   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0D3C   3C                     INC   a   
0D3D   20 02                  JR   nz,dotNext1   
0D3F   DD E9                  JP   (ix)   
0D41                DOTNEXT1:      
0D41   11 00 22               LD   de,BUFFER   
0D44   2A EC 23               LD   hl,(vBufPtr)   
0D47   36 00                  LD   (hl),0   ; store NUL at end of string
0D49   ED 53 EC 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D4D   EB                     EX   de,hl   ; hl = BUFFER
0D4E   CD C7 0E               CALL   putstr   
0D51   DD E9                  JP   (ix)   
0D53                             ; arg_list - parses arg_list e.g. ab:c
0D53                             ; -- arg_list*
0D53                PARSEARGS:      
0D53   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D56   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0D59   E5                     PUSH   hl   ; save start of arg_list
0D5A   23                     INC   hl   ; skip length fields to start of string
0D5B   23                     INC   hl   
0D5C   03                     INC   bc   ; point to next char
0D5D                PARSEARGS1:      
0D5D   0A                     LD   a,(bc)   
0D5E   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D60   20 03                  JR   nz,parseArgs1a   
0D62   14                     INC   d   ; non zero value local count acts as flag
0D63   18 10                  JR   parseArgs3   
0D65                PARSEARGS1A:      
0D65   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D67   38 0F                  JR   c,parseArgs4   
0D69   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D6B   30 0B                  JR   nc,parseArgs4   
0D6D                PARSEARGS2:      
0D6D   77                     LD   (hl),a   
0D6E   23                     INC   hl   
0D6F   1C                     INC   e   ; increase arg count
0D70   AF                     XOR   a   
0D71   B2                     OR   d   
0D72   28 01                  JR   z,parseArgs3   
0D74   14                     INC   d   ; if d > 0 increase local count
0D75                PARSEARGS3:      
0D75   03                     INC   bc   ; point to next char
0D76   18 E5                  JR   parseArgs1   
0D78                PARSEARGS4:      
0D78   0B                     DEC   bc   
0D79   AF                     XOR   a   
0D7A   B2                     OR   d   
0D7B   28 01                  JR   z,parseArgs5   
0D7D   15                     DEC   d   ; remove initial inc
0D7E                PARSEARGS5:      
0D7E   23                     INC   hl   
0D7F   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D82   E1                     POP   hl   ; hl = start of arg_list
0D83   72                     LD   (hl),d   ; write number of locals at start - 1
0D84   23                     INC   hl   
0D85   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D86   2B                     DEC   hl   
0D87   E3                     EX   (sp),hl   
0D88   E9                     JP   (hl)   
0D89                             ; create block: parses block e.g. 00bbIC4uLi4g
0D89                             ; -- block*
0D89                PARSEBLOCK:      
0D89   C5                     PUSH   bc   ; return pointer to first { of block
0D8A   03                     INC   bc   
0D8B   16 01                  LD   d,1   ; nesting: count first parenthesis
0D8D                PARSEBLOCK1:      ; Skip to end of definition
0D8D   0A                     LD   a,(bc)   ; Get the next character
0D8E   03                     INC   bc   ; Point to next character
0D8F   FE 21                  CP   " " + 1   ; ignore whitespace
0D91   38 FA                  JR   c,parseBlock1   
0D93   FE 29                  CP   ")"   
0D95   28 2D                  JR   z,parseBlock4   
0D97   FE 7D                  CP   "}"   
0D99   28 29                  JR   z,parseBlock4   
0D9B   FE 5D                  CP   "]"   
0D9D   28 25                  JR   z,parseBlock4   
0D9F   FE 28                  CP   "("   
0DA1   28 16                  JR   z,parseBlock2   
0DA3   FE 7B                  CP   "{"   
0DA5   28 12                  JR   z,parseBlock2   
0DA7   FE 5B                  CP   "["   
0DA9   28 0E                  JR   z,parseBlock2   
0DAB   FE 27                  CP   "'"   
0DAD   28 0D                  JR   z,parseBlock3   
0DAF   FE 60                  CP   "`"   
0DB1   28 09                  JR   z,parseBlock3   
0DB3   FE 22                  CP   DQ   
0DB5   28 05                  JR   z,parseBlock3   
0DB7   18 D4                  JR   parseBlock1   
0DB9                PARSEBLOCK2:      
0DB9   14                     INC   d   
0DBA   18 D1                  JR   parseBlock1   
0DBC                PARSEBLOCK3:      
0DBC   3E 80                  LD   a,$80   
0DBE   AA                     XOR   d   
0DBF   57                     LD   d,a   
0DC0   20 CB                  JR   nz,parseBlock1   
0DC2   18 03                  JR   parseBlock5   
0DC4                PARSEBLOCK4:      
0DC4   15                     DEC   d   
0DC5   20 C6                  JR   nz,parseBlock1   ; get the next element
0DC7                PARSEBLOCK5:      
0DC7   60 69                  LD   hl,bc   ; hl = IP
0DC9   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0DCC   B7                     OR   a   ; IP - HEAP
0DCD   ED 52                  SBC   hl,de   
0DCF   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0DD1   28 1C                  JR   z,parseBlock6   
0DD3   60 69                  LD   hl,bc   ; hl = IP
0DD5   D1                     POP   de   ; de = block*
0DD6   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DDA   B7                     OR   a   ; bc = size
0DDB   ED 52                  SBC   hl,de   
0DDD   44 4D                  LD   bc,hl   
0DDF   EB                     EX   de,hl   ; hl = block* de = heap*
0DE0   ED 5B F0 23            LD   de,(vHeapPtr)   
0DE4   D5                     PUSH   de   ; return hblock*
0DE5   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0DE7   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0DEB   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DEF                PARSEBLOCK6:      
0DEF   0B                     DEC   bc   ; balanced, exit
0DF0   E1                     POP   hl   ; hl = block*
0DF1   E3                     EX   (sp),hl   ; return to caller
0DF2   E9                     JP   (hl)   
0DF3                             ; create function
0DF3                             ; arg_list* block* -- func*
0DF3                CREATEFUNC:      
0DF3   E1                     POP   hl   ; save retrn address
0DF4   22 08 24               LD   (vTemp3),hl   
0DF7   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DFB   E1                     POP   hl   ; hl = block*
0DFC   22 06 24               LD   (vTemp2),hl   ; save block*
0DFF   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0E02   FD 56 05               LD   d,(iy+5)   
0E05   7B                     LD   a,e   ; if arg_list == null then make a func
0E06   B2                     OR   d   
0E07   20 09                  JR   nz,createFunc0   
0E09   21 00 00               LD   hl,0   ; partial_array = null
0E0C   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0E10   18 65                  JR   createFunc5   
0E12                CREATEFUNC0:      
0E12   E1                     POP   hl   ; hl = inner_arg_list*
0E13   E5                     PUSH   hl   ; save inner_arg_list
0E14   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0E18   7E                     LD   a,(hl)   ; compile inner_num_locals
0E19   4F                     LD   c,a   ; b = inner_num_locals
0E1A   12                     LD   (de),a   
0E1B   23                     INC   hl   
0E1C   13                     INC   de   
0E1D   7E                     LD   a,(hl)   ; compile inner_length
0E1E   12                     LD   (de),a   
0E1F   91                     SUB   c   ; a = inner_num args
0E20   23                     INC   hl   
0E21   13                     INC   de   
0E22   B7                     OR   a   ; compile args if inner_length > 0
0E23   28 05                  JR   z,createFunc1   
0E25   4F                     LD   c,a   ; bc = a
0E26   06 00                  LD   b,0   
0E28   ED B0                  LDIR      
0E2A                CREATEFUNC1:      
0E2A   EB                     EX   de,hl   ; hl = outer_arg_list
0E2B   FD 5E 04               LD   e,(iy+4)   
0E2E   FD 56 05               LD   d,(iy+5)   
0E31   EB                     EX   de,hl   
0E32   23                     INC   hl   ; a = outer_length
0E33   7E                     LD   a,(hl)   
0E34   23                     INC   hl   
0E35   B7                     OR   a   
0E36   28 05                  JR   z,createFunc2   
0E38   4F                     LD   c,a   
0E39   06 00                  LD   b,0   
0E3B   ED B0                  LDIR      ; append outer_args
0E3D                CREATEFUNC2:      ; a = outer_length
0E3D   47                     LD   b,a   ; b = a = outer_length
0E3E   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E41   23                     INC   hl   
0E42   7E                     LD   a,(hl)   ; add outer_length to new length
0E43   80                     ADD   a,b   
0E44   77                     LD   (hl),a   
0E45   2B                     DEC   hl   
0E46   78                     LD   a,b   ; save outer_length in a'
0E47   08                     EX   af,af'   
0E48   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E49   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E4A   B7                     OR   a   
0E4B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E4D   4F                     LD   c,a   ; c = inner_num_locals
0E4E   06 00                  LD   b,0   ; bc = inner_num_locals
0E50   23                     INC   hl   ; a = inner_length
0E51   7E                     LD   a,(hl)   
0E52   91                     SUB   c   ; a = inner_num_args
0E53   23                     INC   hl   ; hl = inner_arg_chars
0E54   85                     ADD   a,l   ; hl += a
0E55   6F                     LD   l,a   
0E56   3E 00                  LD   a,0   
0E58   84                     ADD   a,h   
0E59   67                     LD   h,a   
0E5A   ED B0                  LDIR      ; append inner_locals
0E5C                CREATEFUNC2A:      
0E5C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E5D   12                     LD   (de),a   ; compile partial_array length field
0E5E   13                     INC   de   
0E5F   AF                     XOR   a   
0E60   12                     LD   (de),a   
0E61   13                     INC   de   
0E62   D5                     PUSH   de   ; push partial_array*
0E63   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E64   FD 5E 02               LD   e,(iy+2)   
0E67   FD 56 03               LD   d,(iy+3)   
0E6A   EB                     EX   de,hl   
0E6B                CREATEFUNC3:      
0E6B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E6C   4E                     LD   c,(hl)   
0E6D   2B                     DEC   hl   
0E6E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E6F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E70   13                     INC   de   
0E71   79                     LD   a,c   
0E72   12                     LD   (de),a   
0E73   13                     INC   de   
0E74   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E76                CREATEFUNC4:      
0E76   E1                     POP   hl   ; hl = partial_array*
0E77                CREATEFUNC5:      
0E77   C1                     POP   bc   ; bc = new_arg_list*
0E78   D5                     PUSH   de   ; return new func*
0E79   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E7A   73                     LD   (hl),e   ; compile partial_array* to func
0E7B   23                     INC   hl   
0E7C   72                     LD   (hl),d   
0E7D   23                     INC   hl   
0E7E   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0E82   73                     LD   (hl),e   ; compile block* to func
0E83   23                     INC   hl   
0E84   72                     LD   (hl),d   
0E85   23                     INC   hl   
0E86   71                     LD   (hl),c   ; compile new_arg_list* to func
0E87   23                     INC   hl   
0E88   70                     LD   (hl),b   
0E89   23                     INC   hl   
0E8A   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E8D   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E91   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E94   E9                     JP   (hl)   
0E95                             ;*******************************************************************
0E95                             ; general routines
0E95                             ;*******************************************************************
0E95                             ; followed by a table
0E95                             ; indexed on the 0-25 lowercase letter
0E95                             ; db lsb(addr)
0E95                             ; the final item index 26 matches any other char
0E95                LOWERCASETABLE:      
0E95   03                     INC   bc   
0E96   0A                     LD   a,(bc)   
0E97   FE 7B                  CP   "z"+1   
0E99   30 0B                  JR   nc,lowerCaseTable2   
0E9B   D6 61                  SUB   "a"   
0E9D   38 07                  JR   c,lowerCaseTable2   
0E9F                LOWERCASETABLE1:      
0E9F   E1                     POP   hl   
0EA0   85                     ADD   a,l   
0EA1   6F                     LD   l,a   
0EA2   6E                     LD   l,(hl)   ; must have the same msb as the table
0EA3   C3 AC 0E               JP   commandTable1   
0EA6                LOWERCASETABLE2:      
0EA6   3E 1A                  LD   a,26   
0EA8   0B                     DEC   bc   
0EA9   18 F4                  JR   lowerCaseTable1   
0EAB                             ; followed by a table
0EAB                             ; db char
0EAB                             ; dw addr
0EAB                             ; the final item must have char == NUL
0EAB                COMMANDTABLE:      
0EAB   E1                     POP   hl   
0EAC                COMMANDTABLE1:      
0EAC   03                     INC   bc   
0EAD                COMMANDTABLE2:      
0EAD   AF                     XOR   a   
0EAE   BE                     CP   (hl)   
0EAF   20 03                  JR   nz,commandTable3   
0EB1   0B                     DEC   bc   
0EB2   18 09                  JR   commandTable4   
0EB4                COMMANDTABLE3:      
0EB4   0A                     LD   a,(bc)   
0EB5   BE                     CP   (hl)   
0EB6   28 05                  JR   z,commandTable4   
0EB8   23                     INC   hl   
0EB9   23                     INC   hl   
0EBA   23                     INC   hl   
0EBB   18 F0                  JR   commandTable2   
0EBD                COMMANDTABLE4:      
0EBD   23                     INC   hl   
0EBE   5E                     LD   e,(hl)   
0EBF   23                     INC   hl   
0EC0   56                     LD   d,(hl)   
0EC1   EB                     EX   de,hl   
0EC2   E9                     JP   (hl)   
0EC3                PUTSTR0:      
0EC3   CD 85 00               CALL   putchar   
0EC6   23                     INC   hl   
0EC7                PUTSTR:      
0EC7   7E                     LD   a,(hl)   
0EC8   B7                     OR   a   
0EC9   20 F8                  JR   nz,putstr0   
0ECB   C9                     RET      
0ECC                             ; **************************************************************************
0ECC                             ; calculate nesting value
0ECC                             ; a is char to be tested,
0ECC                             ; e is the nesting value (initially 0)
0ECC                             ; e is increased by ( and [
0ECC                             ; e is decreased by ) and ]
0ECC                             ; e has its bit 7 toggled by `
0ECC                             ; limited to 127 levels
0ECC                             ; **************************************************************************
0ECC                NESTING:      
0ECC   FE 22                  CP   DQ   ; quote char
0ECE   28 06                  JR   z,nesting0   
0ED0   FE 60                  CP   "`"   ; quote char
0ED2   28 02                  JR   z,nesting0   
0ED4   18 0A                  JR   nesting1   
0ED6                NESTING0:      
0ED6   CB 7B                  BIT   7,e   
0ED8   28 03                  JR   z,nesting1a   
0EDA   CB BB                  RES   7,e   
0EDC   C9                     RET      
0EDD                NESTING1A:      
0EDD   CB FB                  SET   7,e   
0EDF   C9                     RET      
0EE0                NESTING1:      
0EE0   CB 7B                  BIT   7,e   
0EE2   C0                     RET   nz   
0EE3   FE 7B                  CP   "{"   
0EE5   28 08                  JR   z,nesting2   
0EE7   FE 5B                  CP   "["   
0EE9   28 04                  JR   z,nesting2   
0EEB   FE 28                  CP   "("   
0EED   20 02                  JR   nz,nesting3   
0EEF                NESTING2:      
0EEF   1C                     INC   e   
0EF0   C9                     RET      
0EF1                NESTING3:      
0EF1   FE 7D                  CP   "}"   
0EF3   28 07                  JR   z,nesting4   
0EF5   FE 5D                  CP   "]"   
0EF7   28 03                  JR   z,nesting4   
0EF9   FE 29                  CP   ")"   
0EFB   C0                     RET   nz   
0EFC                NESTING4:      
0EFC   1D                     DEC   e   
0EFD   C9                     RET      
0EFE                PROMPT:      
0EFE   CD 0E 0F               CALL   printStr   
0F01   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0F06   C9                     RET      
0F07                CRLF:        
0F07   CD 0E 0F               CALL   printStr   
0F0A   0D 0A 00               .CSTR   "\r\n"   
0F0D   C9                     RET      
0F0E                             ; prints a null teminated string
0F0E                             ; the string should be immediately following the call
0F0E                PRINTSTR:      
0F0E   E3                     EX   (sp),hl   ; swap			
0F0F   CD C7 0E               CALL   putstr   
0F12   23                     INC   hl   ; inc past NUL
0F13   E3                     EX   (sp),hl   ; put it back	
0F14   C9                     RET      
0F15                INIT:        
0F15   21 F0 01               LD   hl,titleStr   
0F18   11 0E 24               LD   de,titleBuf   
0F1B   06 14                  LD   b,20   
0F1D                INIT1:       
0F1D   1A                     LD   a,(de)   
0F1E   BE                     CP   (hl)   
0F1F   20 17                  JR   nz,coldBoot0   
0F21   13                     INC   de   
0F22   23                     INC   hl   
0F23   10 F8                  DJNZ   init1   
0F25                WARMINIT:      
0F25   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0F29   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0F2D   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0F31   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0F35   C3 6F 0F               JP   start1   
0F38                COLDBOOT0:      
0F38   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0F3B   11 0E 24               LD   de,titleBuf   
0F3E   06 14                  LD   b,20   
0F40   ED B0                  LDIR      
0F42                COLDINIT:      
0F42   21 DE 01               LD   hl,isysVars   
0F45   11 E6 23               LD   de,sysVars   
0F48   01 12 00               LD   bc,9 * 2   
0F4B   ED B0                  LDIR      
0F4D   21 00 23               LD   hl,vars   ; 52 vars LO HI
0F50   06 34                  LD   b,26*2   
0F52   AF                     XOR   a   
0F53                COLDBOOT1:      
0F53   77                     LD   (hl),a   
0F54   23                     INC   hl   
0F55   10 FC                  DJNZ   coldBoot1   
0F57   DD 2A EE 23            LD   ix,(vNext)   
0F5B   FD 21 00 21            LD   iy,STACK   
0F5F   C9                     RET      
0F60                COLDSTART:      
0F60   31 00 21               LD   sp,STACK   
0F63   CD 38 0F               CALL   coldBoot0   
0F66   C3 6F 0F               JP   start1   
0F69                START:       
0F69   31 00 21               LD   sp,STACK   ; start Monty
0F6C   CD 15 0F               CALL   init   ; setups
0F6F                START1:      
0F6F   21 0E 24               LD   hl,titleBuf   
0F72   CD C7 0E               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0F75                INTERPRET:      
0F75   CD FE 0E               CALL   prompt   
0F78   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F7B   21 00 21               LD   hl,TIB   
0F7E   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F81                INTERPRET2:      ; calculate nesting
0F81   1E 00                  LD   e,0   ; initilize nesting value
0F83   C5                     PUSH   bc   ; save offset into TIB,
0F84                             ; bc is also the count of chars in TIB
0F84   21 00 21               LD   hl,TIB   ; hl is start of TIB
0F87   18 0B                  JR   interpret4   
0F89                INTERPRET3:      
0F89   3E 33                  LD   a,"3"   
0F8B   CD 85 00               CALL   putchar   
0F8E   7E                     LD   a,(hl)   ; a = char in TIB
0F8F   23                     INC   hl   ; inc pointer into TIB
0F90   0B                     DEC   bc   ; dec count of chars in TIB
0F91   CD CC 0E               CALL   nesting   ; update nesting value
0F94                INTERPRET4:      
0F94   79                     LD   a,c   ; is count zero?
0F95   B0                     OR   b   
0F96   20 F1                  JR   nz,interpret3   ; if not loop
0F98   C1                     POP   bc   ; restore offset into TIB
0F99                INTERPRET5:      
0F99   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F9C   FE 20                  CP   $20   ; compare to space
0F9E   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0FA0   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0FA2                             ; ???? NEEDED?
0FA2   28 36                  JR   z,interpret8   
0FA4   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0FA6   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0FA8   FE 05                  CP   CTRL_E   
0FAA   CA 3B 10               JP   z,edit_   
0FAD   FE 08                  CP   CTRL_H   
0FAF   CA 2B 10               JP   z,backSpace_   
0FB2   FE 0A                  CP   CTRL_J   
0FB4   CA 3E 10               JP   z,reEdit_   
0FB7                             ; cp CTRL_S
0FB7                             ; jp z,printStack_
0FB7                             ; DB     lsb(edit_)       ; ENQ ^E  5
0FB7                             ; DB     lsb(reedit_)     ; LF  ^J 10
0FB7                             ; DB     lsb(list_)       ; FF  ^L 12
0FB7                             ; DB     lsb(printStack_) ; DLE ^P 16
0FB7                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0FB7                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0FB7                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0FB7                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0FB7                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0FB7                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0FB7                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0FB7                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0FB7                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0FB7                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0FB7                INTERPRET5A:      
0FB7                             ; ld (vTIBPtr),bc
0FB7                             ; ld bc,(vTIBPtr)
0FB7   18 C8                  JR   interpret2   
0FB9                INTERPRET6:      
0FB9   21 00 21               LD   hl,TIB   
0FBC   09                     ADD   hl,bc   
0FBD   77                     LD   (hl),a   ; store the character in textbuf
0FBE   03                     INC   bc   
0FBF   CD 85 00               CALL   putchar   ; echo character to screen
0FC2   CD CC 0E               CALL   nesting   
0FC5   18 D2                  JR   interpret5   ; wait for next character
0FC7                INTERPRET7:      
0FC7   21 00 21               LD   hl,TIB   
0FCA   09                     ADD   hl,bc   
0FCB   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0FCD   23                     INC   hl   
0FCE   36 0A                  LD   (hl),"\n"   
0FD0   23                     INC   hl   
0FD1   03                     INC   bc   
0FD2   03                     INC   bc   
0FD3   CD 07 0F               CALL   crlf   ; echo character to screen
0FD6   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0FD7   B7                     OR   a   
0FD8   20 BF                  JR   nz,interpret5   
0FDA                INTERPRET8:      
0FDA   21 00 21               LD   hl,TIB   
0FDD   09                     ADD   hl,bc   
0FDE   22 EA 23               LD   (vTIBPtr),hl   
0FE1   01 00 21               LD   bc,TIB   
0FE4   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0FE8   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0FEC   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0FF0   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0FF4   0B                     DEC   bc   
0FF5                NEXT:        
0FF5   03                     INC   bc   ; Increment the IP
0FF6   0A                     LD   a,(bc)   ; Get the next character and dispatch
0FF7   FE 20                  CP   " "   ; whitespace?
0FF9   28 FA                  JR   z,next   ; space? ignore
0FFB   38 0D                  JR   c,next1   
0FFD   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FFF   6F                     LD   l,a   ; index into table
1000   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1002   6E                     LD   l,(hl)   ; get low jump address
1003   24                     INC   h   ; page 2
1004   FE BA                  CP   "Z" - "!" + 1 + $80   
1006   38 01                  JR   c,next0   
1008   24                     INC   h   ; page 3
1009                NEXT0:       
1009   E9                     JP   (hl)   ; Jump to routine
100A                NEXT1:       
100A   FE 00                  CP   NUL   ; end of input string?
100C   28 03                  JR   z,exit   
100E   C3 75 0F               JP   interpret   ; no, other whitespace, macros?
1011                EXIT:        
1011   03                     INC   bc   
1012   60 69                  LD   hl,bc   
1014   E9                     JP   (hl)   
1015                RUN:         
1015   C1                     POP   bc   
1016   0B                     DEC   bc   
1017   DD E9                  JP   (ix)   
1019                ERROR:       
1019   E5                     PUSH   hl   
101A   CD 15 10               CALL   run   
101D   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1028   C3 75 0F               JP   interpret   
102B                BACKSPACE_:      
102B   79                     LD   a,c   
102C   B0                     OR   b   
102D   CA 81 0F               JP   z,interpret2   
1030   0B                     DEC   bc   
1031   CD 0E 0F               CALL   printStr   
1034   08 20 08 00            .CSTR   "\b \b"   
1038   C3 81 0F               JP   interpret2   
103B                             ; edit
103B                EDIT_:       
103B   C3 75 0F               JP   interpret   
103E                REEDIT_:      
103E   C3 75 0F               JP   interpret   
1041                             ; editDef:
1041                             ;     pop hl                      ; pop ret address
1041                             ;     ex (sp),hl                  ; swap with TOS
1041                             ;     push hl                     ; dup TOS
1041                             ;     ld a,l                      ; a = ident
1041                             ;     ld de,TIB                   ; de = start of TIB
1041                             ;     ld (vTIBPtr),de             ; update TIB*
1041                             ;     push ix                     ; save NEXT
1041                             ;     ld ix,editDef0              ; NEXT = editDef0
1041                             ;     jp lookupRef                ; convert letter into address
1041                             ; editDef0:
1041                             ;     ld e,(hl)                   ; de = (hl++)
1041                             ;     inc hl
1041                             ;     ld d,(hl)
1041                             ;     ld a,d                      ; de == 0 ?
1041                             ;     or e
1041                             ;     jr z,editDef4
1041                             ;     ld ix,editDef3              ; NEXT = editDef3
1041                             ;     ex de,hl
1041                             ;     ld a,(hl)
1041                             ;     cp "{"
1041                             ;     jr nz,editDef1
1041                             ;     jp editBlock0               ; convert letter into address
1041                             ; editDef1:
1041                             ;     cp "("
1041                             ;     jr nz,editDef2
1041                             ;     jp editBlock0               ; convert letter into address
1041                             ; editDef2:
1041                             ;     jp editFunc
1041                             ; editDef3:
1041                             ;     ld a," "                    ; write assign
1041                             ;     call writeChar
1041                             ;     pop hl                      ; a = ident
1041                             ;     ld a,l
1041                             ;     call writeChar
1041                             ;     ld a,"="                    ; write assign
1041                             ;     call writeChar
1041                             ;     ld ix,editDef4              ; NEXT = editDef4
1041                             ;     jp printTIB
1041                             ; editDef4:
1041                             ;     pop ix                      ; restore NEXT
1041                             ;     jp (ix)
1041                             ; writeChar:
1041                             ;     ld de,(vTIBPtr)             ; de = TIB*
1041                             ;     ld (de),a                   ; write ident
1041                             ;     inc de
1041                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
1041                             ;     ret
1041                             ; ; printTIB
1041                             ; printTIB:
1041                             ;     ld hl,(vTIBPtr)
1041                             ;     ld de,TIB
1041                             ;     or a
1041                             ;     sbc hl,de
1041                             ;     jp printTIB2
1041                             ; printTIB1:
1041                             ;     ld a,(de)
1041                             ;     call putchar
1041                             ; printTIB2:
1041                             ;     ld a,l
1041                             ;     or h
1041                             ;     jr nz,printTIB1
1041                             ;     jp (ix)
1041                             ; editBlock:
1041                             ;     pop hl                      ; hl = block*
1041                             ; editBlock0:
1041                             ;     push ix                     ; save next
1041                             ;     push hl                     ; push block*
1041                             ;     push hl                     ; push block*
1041                             ;     ld ix,(editBlock2)
1041                             ;     jp blockLength
1041                             ; editBlock1:
1041                             ;     pop hl                      ; bc = length, (sp) = IP
1041                             ;     pop de                      ; de = block*
1041                             ;     ld a,l
1041                             ;     or h
1041                             ;     jr z,editBlock2
1041                             ;     push bc
1041                             ;     ld bc,hl
1041                             ;     ex de,hl                    ; hl = block*
1041                             ;     ld de,(vTIBPtr)              ; de = TIB*
1041                             ;     ldir                        ; copy block to TIB
1041                             ;     ld (vTIBPtr),de              ; save TIB*
1041                             ;     pop bc
1041                             ; editBlock2:
1041                             ;     pop ix                      ; restore next
1041                             ;     jp (ix)
1041                             ; editFunc:
1041                             ;     jp (ix)
1041                             ; editArray:
1041                             ;     jp (ix)
1041                             ; editparseArgs:
1041                             ;     jp (ix)
1041                             ; ; blockLength
1041                             ; ; addr1 -- length
1041                             ; blockLength:
1041                             ;     pop hl                      ; block*
1041                             ;     push hl                     ; save block*
1041                             ;     inc hl                      ; skip first char
1041                             ;     ld d,1                      ; increase nesting
1041                             ; blockLength1:                   ; Skip to end of definition
1041                             ;     ld a,(hl)                   ; Get the next character
1041                             ;     inc hl                      ; Point to next character
1041                             ;     cp " " + 1                  ; ignore whitespace
1041                             ;     jr c,blockLength1
1041                             ;     cp ")"
1041                             ;     jr z,blockLength4
1041                             ;     cp "}"
1041                             ;     jr z,blockLength4
1041                             ;     cp "]"
1041                             ;     jr z,blockLength4
1041                             ;     cp "("
1041                             ;     jr z,blockLength2
1041                             ;     cp "{"
1041                             ;     jr z,blockLength2
1041                             ;     cp "["
1041                             ;     jr z,blockLength2
1041                             ;     cp "'"
1041                             ;     jr z,blockLength3
1041                             ;     cp "`"
1041                             ;     jr z,blockLength3
1041                             ;     cp DQ
1041                             ;     jr z,blockLength3
1041                             ;     jr blockLength1
1041                             ; blockLength2:
1041                             ;     inc d
1041                             ;     jr blockLength1
1041                             ; blockLength4:
1041                             ;     dec d
1041                             ;     jr nz, blockLength1         ; get the next element
1041                             ; blockLength3:
1041                             ;     ld a,$80
1041                             ;     xor d
1041                             ;     ld d,a
1041                             ;     jr nz, blockLength1
1041                             ;     pop hl                      ; hl = block*
1041                             ;     or a
1041                             ;     sbc hl,de
1041                             ;     push hl
1041                             ;     jp (ix)
1041                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
1041                             ; \a start of stack \#3 depth \b base \$ prompt
1041                             ; DW dStack               ; a vS0 start of datastack			
1041                             ; DW FALSE                ; b vBase16
1041                             ; DW 0                    ; c vTIBPtr an offset to the tib
1041                             ; DW 0                    ; d
1041                             ; DW 65                   ; e vLastDef "A" last command u defined
1041                             ; DW 0                    ; f
1041                             ; DW page6                ; g 256 bytes limits
1041                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
1041                F1:          
1041                F2:          
1041                F3:          
1041                F4:          
1041                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2538 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2456 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2381 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
QUESTION_:          021B DEFINED AT LINE 198 IN MAIN.asm
BANG_:              021E DEFINED AT LINE 201 IN MAIN.asm
BANG:               021E DEFINED AT LINE 202 IN MAIN.asm
NOT:                022E DEFINED AT LINE 212 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
EQ_:                0234 DEFINED AT LINE 216 IN MAIN.asm
EQ:                 0234 DEFINED AT LINE 217 IN MAIN.asm
EQ0:                023E DEFINED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
EQ1:                023F DEFINED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
GT_:                0243 DEFINED AT LINE 230 IN MAIN.asm
GT:                 0243 DEFINED AT LINE 231 IN MAIN.asm
LT_:                024E DEFINED AT LINE 239 IN MAIN.asm
LT:                 024E DEFINED AT LINE 240 IN MAIN.asm
LT1:                0257 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
HASH_:              0260 DEFINED AT LINE 255 IN MAIN.asm
HASH:               0260 DEFINED AT LINE 256 IN MAIN.asm
ARRAYINDEX:         0260 DEFINED AT LINE 257 IN MAIN.asm
ARRAYINDEX0:        0268 DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX1:        0269 DEFINED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
ARRAYINDEX2:        0275 DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
RPAREN_:            0278 DEFINED AT LINE 279 IN MAIN.asm
RPAREN:             0278 DEFINED AT LINE 281 IN MAIN.asm
AMPER_:             0280 DEFINED AT LINE 289 IN MAIN.asm
AMPER:              0280 DEFINED AT LINE 290 IN MAIN.asm
AND:                0280 DEFINED AT LINE 291 IN MAIN.asm
MINUS_:             028A DEFINED AT LINE 309 IN MAIN.asm
MINUS:              028A DEFINED AT LINE 310 IN MAIN.asm
SUB:                0296 DEFINED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
SUB1:               02A0 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
SUB2:               02A7 DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
SUB3:               02AA DEFINED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
STAR_:              02B2 DEFINED AT LINE 340 IN MAIN.asm
STAR:               02B2 DEFINED AT LINE 341 IN MAIN.asm
MUL:                02BA DEFINED AT LINE 347 IN MAIN.asm
MUL2:               02BC DEFINED AT LINE 350 IN MAIN.asm
MUL3:               02C4 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
PLUS_:              02D6 DEFINED AT LINE 370 IN MAIN.asm
PLUS:               02D6 DEFINED AT LINE 371 IN MAIN.asm
ADD:                02D6 DEFINED AT LINE 372 IN MAIN.asm
ADD1:               02E1 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
ADD3:               02E5 DEFINED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
ADD4:               02EF DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
COLON_:             02F2 DEFINED AT LINE 396 IN MAIN.asm
UPCASE_:            02F5 DEFINED AT LINE 400 IN MAIN.asm
UPCASE:             02F5 DEFINED AT LINE 401 IN MAIN.asm
SEMICOLON_:         02FA DEFINED AT LINE 407 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 415 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 416 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 404 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 432 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 433 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 434 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 449 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 450 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 451 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 471 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 472 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 473 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 525 IN MAIN.asm
CARET:              039F DEFINED AT LINE 529 IN MAIN.asm
GO:                 039F DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 546 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 547 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 548 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 563 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 570 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 571 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 572 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 583 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 587 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 590 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 591 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 599 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 600 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 601 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 613 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 783 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 784 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 785 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 794 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 830 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 844 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 854 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 860 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 880 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 887 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 893 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 897 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 903 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 907 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 912 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 918 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 928 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 944 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 948 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 964 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 970 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 975 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 980 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
ADDROF1:            060D DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
ADDROF2:            0618 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0620 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
ARRAYSIZE:          0623 DEFINED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
PERFORMM_1511S1068: 062A DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0637 DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
BREAK1:             063E DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
BYTEMODE:           0651 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
BYTEMODE1:          0654 DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
COMMENT:            0659 DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
CONSTHEAPSTART:     0662 DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
CONSTTIBSTART:      0668 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
CONSTBUFSTART:      066E DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
DECBASE:            0674 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
DECBASE1:           0677 DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
ERROR1:             067C DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
HEXBASE:            0682 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
INPUT:              0688 DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
KEY:                0693 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
OUTPUT:             069C DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
QUIT:               06A5 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
QUIT1:              06AC DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
RECUR:              06AF DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
REMAIN:             06B5 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
STRINGBEGIN:        06BB DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
STRINGEND:          06C3 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
STRINGEND1:         06EA DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
STRINGLENGTH:       06F2 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06F8 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
STRINGLENGTH2:      06FA DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
STRINGLENGTH3:      06FE DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
STRINGSIZE:         0701 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
PERFORMM_1659S1236: 0708 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      070D DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
STRINGCOMPARE1:     070F DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
STRINGCOMPARE2:     071A DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGCOMPARE3:     071F DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
STRINGCOMPARE4:     0722 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
VARBUFPTR:          0725 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
VARHEAPPTR:         072E DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
VARTIBPTR:          0737 DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
VARIABLE:           0740 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
CONSTANT:           0743 DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
WORDMODE:           0746 DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
XOR:                074C DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 972 IN MAIN.asm
XOR1:               074D DEFINED AT LINE 1294 IN MAIN.asm
RANGESRC:           0757 DEFINED AT LINE 32
                    > USED AT LINE 924 IN MAIN.asm
RANGESRCM_1724S1310: 0766 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07EB DEFINED AT LINE 32
                    > USED AT LINE 836 IN MAIN.asm
ARRAYITERM_1743S1330: 07F8 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         086C DEFINED AT LINE 32
                    > USED AT LINE 936 IN MAIN.asm
STRINGITERM_1762S1350: 0879 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08F4 DEFINED AT LINE 32
                    > USED AT LINE 899 IN MAIN.asm
MAPM_1782S1372:     0901 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0936 DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
FILTERM_1796S1387:  0944 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0994 DEFINED AT LINE 32
                    > USED AT LINE 862 IN MAIN.asm
FOLDM_1815S1407:    09A3 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09E6 DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
FOREACHM_1829S1422: 09F4 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A32 DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FUNCSRCM_1843S1437: 0A3E DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A6B DEFINED AT LINE 32
                    > USED AT LINE 616 IN MAIN.asm
PRINTARRAYM_1853S1448: 0A79 DEFINED AT LINE 39
                    > USED AT LINE 35
COLON:              0AB3 DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 397 IN MAIN.asm
DEFINESTART:        0AC0 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
SEMICOLON:          0AC9 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
DEFINEEND:          0AC9 DEFINED AT LINE 1473 IN MAIN.asm
DEFINEEND1:         0ADB DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
TILDE:              0ADD DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
INVERT:             0ADD DEFINED AT LINE 1487 IN MAIN.asm
DOLLAR:             0AE7 DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0AE7 DEFINED AT LINE 1499 IN MAIN.asm
HEXNUM1:            0AEA DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
HEXNUM2:            0AF2 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
QUESTION:           0B04 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
IF:                 0B04 DEFINED AT LINE 1523 IN MAIN.asm
IFTE:               0B10 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
IFTE1:              0B11 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
QUOTE:              0B1D DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0B1D DEFINED AT LINE 1549 IN MAIN.asm
STRING1:            0B26 DEFINED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
STRING2:            0B29 DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
STRING3:            0B2F DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
PERCENT:            0B37 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0B37 DEFINED AT LINE 1576 IN MAIN.asm
ARG0:               0B53 DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
ARG0A:              0B5C DEFINED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
ARG1:               0B61 DEFINED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
ARG1A:              0B69 DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
NUM:                0B6C DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
NUM0:               0B75 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
NUM1:               0B76 DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
NUM2:               0B8E DEFINED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
NUM3:               0B99 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
RBRACE:             0B9C DEFINED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
BLOCKEND:           0B9C DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
BLOCKEND1:          0BCE DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
BLOCKEND2:          0BDA DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
BLOCKEND3:          0BEC DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
BLOCKEND4:          0C00 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
GOBLOCK:            0C09 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
GOBLOCK2:           0C2E DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
GOBLOCK3:           0C38 DEFINED AT LINE 1739 IN MAIN.asm
GOFUNC:             0C3C DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
GOFUNC1:            0C55 DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
GOFUNC2:            0C5B DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
GOFUNC3:            0C66 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
GOFUNC4:            0C7E DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
GOFUNC5:            0C81 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
GOFUNC6:            0C84 DEFINED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
GOFUNC7:            0C87 DEFINED AT LINE 1802 IN MAIN.asm
GOFUNC8:            0C8B DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
ASSIGN:             0C96 DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
ASSIGN0:            0C98 DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 394 IN MAIN.asm
ASSIGN1:            0C9C DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
ASSIGN2:            0CA5 DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
BOOLEANIZE:         0CA7 DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
BOOLEANIZE1:        0CAF DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
EQUALS:             0CB2 DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
NOTEQUALS:          0CB9 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
LESSTHANEQ:         0CC0 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
LESSTHAN:           0CC5 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
LESSTHAN1:          0CCA DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
TRUE1:              0CCD DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
NULL1:              0CD3 DEFINED AT LINE 1879 IN MAIN.asm
FALSE1:             0CD3 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
SPREAD:             0CD9 DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
SPREAD1:            0CE6 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
SPREAD2:            0CF1 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
SPREAD3:            0CF3 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
SHIFTLEFT:          0CFD DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTLEFT1:         0D05 DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
SHIFTLEFT2:         0D06 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
SHIFTRIGHT:         0D0D DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
SHIFTRIGHT1:        0D15 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
SHIFTRIGHT2:        0D19 DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
DIVIDE:             0D20 DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
DIVIDE1:            0D25 DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
DIVIDE2:            0D32 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
DIVIDE3:            0D33 DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
DOTNEXT:            0D39 DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
DOTNEXT1:           0D41 DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
PARSEARGS:          0D53 DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
PARSEARGS1:         0D5D DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
PARSEARGS1A:        0D65 DEFINED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
PARSEARGS2:         0D6D DEFINED AT LINE 2005 IN MAIN.asm
PARSEARGS3:         0D75 DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
PARSEARGS4:         0D78 DEFINED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
PARSEARGS5:         0D7E DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
PARSEBLOCK:         0D89 DEFINED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
PARSEBLOCK1:        0D8D DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
PARSEBLOCK2:        0DB9 DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
PARSEBLOCK3:        0DBC DEFINED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
PARSEBLOCK4:        0DC4 DEFINED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
PARSEBLOCK5:        0DC7 DEFINED AT LINE 2078 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
PARSEBLOCK6:        0DEF DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
CREATEFUNC:         0DF3 DEFINED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
CREATEFUNC0:        0E12 DEFINED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
CREATEFUNC1:        0E2A DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
CREATEFUNC2:        0E3D DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
CREATEFUNC2A:       0E5C DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
CREATEFUNC3:        0E6B DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
CREATEFUNC4:        0E76 DEFINED AT LINE 2200 IN MAIN.asm
CREATEFUNC5:        0E77 DEFINED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
LOWERCASETABLE:     0E95 DEFINED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
LOWERCASETABLE1:    0E9F DEFINED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
LOWERCASETABLE2:    0EA6 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
COMMANDTABLE:       0EAB DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
COMMANDTABLE1:      0EAC DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
COMMANDTABLE2:      0EAD DEFINED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
COMMANDTABLE3:      0EB4 DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
COMMANDTABLE4:      0EBD DEFINED AT LINE 2272 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
PUTSTR0:            0EC3 DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
PUTSTR:             0EC7 DEFINED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
NESTING:            0ECC DEFINED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2432 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
NESTING0:           0ED6 DEFINED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
NESTING1A:          0EDD DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
NESTING1:           0EE0 DEFINED AT LINE 2313 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
NESTING2:           0EEF DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2319 IN MAIN.asm
NESTING3:           0EF1 DEFINED AT LINE 2325 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
NESTING4:           0EFC DEFINED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
PROMPT:             0EFE DEFINED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
CRLF:               0F07 DEFINED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
PRINTSTR:           0F0E DEFINED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 2563 IN MAIN.asm
INIT:               0F15 DEFINED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
INIT1:              0F1D DEFINED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
WARMINIT:           0F25 DEFINED AT LINE 2367 IN MAIN.asm
COLDBOOT0:          0F38 DEFINED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
COLDINIT:           0F42 DEFINED AT LINE 2380 IN MAIN.asm
COLDBOOT1:          0F53 DEFINED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
COLDSTART:          0F60 DEFINED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
START:              0F69 DEFINED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 7
START1:             0F6F DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
INTERPRET:          0F75 DEFINED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
                    > USED AT LINE 2556 IN MAIN.asm
                    > USED AT LINE 2569 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
INTERPRET2:         0F81 DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
INTERPRET3:         0F89 DEFINED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
INTERPRET4:         0F94 DEFINED AT LINE 2434 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
INTERPRET5:         0F99 DEFINED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2491 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
INTERPRET5A:        0FB7 DEFINED AT LINE 2478 IN MAIN.asm
INTERPRET6:         0FB9 DEFINED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
INTERPRET7:         0FC7 DEFINED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 2450 IN MAIN.asm
INTERPRET8:         0FDA DEFINED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
NEXT:               0FF5 DEFINED AT LINE 2521 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
NEXT0:              1009 DEFINED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
NEXT1:              100A DEFINED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
EXIT:               1011 DEFINED AT LINE 2542 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
RUN:                1015 DEFINED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2554 IN MAIN.asm
ERROR:              1019 DEFINED AT LINE 2552 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
BACKSPACE_:         102B DEFINED AT LINE 2558 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
EDIT_:              103B DEFINED AT LINE 2568 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
REEDIT_:            103E DEFINED AT LINE 2571 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
F1:                 1041 DEFINED AT LINE 10
                    > USED AT LINE 870 IN MAIN.asm
F2:                 1041 DEFINED AT LINE 11
                    > USED AT LINE 872 IN MAIN.asm
F3:                 1041 DEFINED AT LINE 12
                    > USED AT LINE 874 IN MAIN.asm
F4:                 1041 DEFINED AT LINE 13
                    > USED AT LINE 876 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1718 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2382 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2394 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 2515 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2369 IN MAIN.asm
                    > USED AT LINE 2516 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2370 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2518 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
