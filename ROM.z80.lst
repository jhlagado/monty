0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 DF 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   04                     DB   lsb(bang_)   ; !     1
0181   41                     DB   lsb(dquote_)   ; "     2
0182   44                     DB   lsb(hash_)   ; #     1
0183   5C                     DB   lsb(dollar_)   ; $     1
0184   5F                     DB   lsb(percent_)   ; %     1
0185   62                     DB   lsb(amper_)   ; &     1
0186   6D                     DB   lsb(quote_)   ; '     2
0187   70                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   7B                     DB   lsb(star_)   ; *     1
018A   97                     DB   lsb(plus_)   ; +     1
018B   B3                     DB   lsb(comma_)   ; ,     2
018C   B6                     DB   lsb(minus_)   ; -     1
018D   D4                     DB   lsb(dot_)   ; .     2
018E   D7                     DB   lsb(slash_)   ; /	    1
018F   DA                     DB   lsb(num_)   ; 0     1
0190   DA                     DB   lsb(num_)   ; 1
0191   DA                     DB   lsb(num_)   ; 2
0192   DA                     DB   lsb(num_)   ; 3
0193   DA                     DB   lsb(num_)   ; 4
0194   DA                     DB   lsb(num_)   ; 5
0195   DA                     DB   lsb(num_)   ; 6
0196   DA                     DB   lsb(num_)   ; 7
0197   DA                     DB   lsb(num_)   ; 8
0198   DA                     DB   lsb(num_)   ; 9
0199   DD                     DB   lsb(colon_)   ; :     2
019A   F6                     DB   lsb(semicolon_)   ; ;     2
019B   2F                     DB   lsb(lt_)   ; <     1
019C   15                     DB   lsb(eq_)   ; =     1
019D   24                     DB   lsb(gt_)   ; >     1
019E   F9                     DB   lsb(question_)   ; ?     1
019F   60                     DB   lsb(at_)   ; @     2
01A0   FC                     DB   lsb(upcase_)   ; A     1
01A1   FC                     DB   lsb(upcase_)   ; B
01A2   FC                     DB   lsb(upcase_)   ; C
01A3   FC                     DB   lsb(upcase_)   ; D
01A4   FC                     DB   lsb(upcase_)   ; E
01A5   FC                     DB   lsb(upcase_)   ; F
01A6   FC                     DB   lsb(upcase_)   ; G
01A7   FC                     DB   lsb(upcase_)   ; h
01A8   FC                     DB   lsb(upcase_)   ; I
01A9   FC                     DB   lsb(upcase_)   ; J
01AA   FC                     DB   lsb(upcase_)   ; K
01AB   FC                     DB   lsb(upcase_)   ; L
01AC   FC                     DB   lsb(upcase_)   ; M
01AD   FC                     DB   lsb(upcase_)   ; N
01AE   FC                     DB   lsb(upcase_)   ; O
01AF   FC                     DB   lsb(upcase_)   ; p
01B0   FC                     DB   lsb(upcase_)   ; Q
01B1   FC                     DB   lsb(upcase_)   ; R
01B2   FC                     DB   lsb(upcase_)   ; S
01B3   FC                     DB   lsb(upcase_)   ; T
01B4   FC                     DB   lsb(upcase_)   ; U
01B5   FC                     DB   lsb(upcase_)   ; V
01B6   FC                     DB   lsb(upcase_)   ; W
01B7   FC                     DB   lsb(upcase_)   ; X
01B8   FC                     DB   lsb(upcase_)   ; Y
01B9   FC                     DB   lsb(upcase_)   ; Z
01BA   13                     DB   lsb(lbrack_)   ; [     2
01BB   2F                     DB   lsb(backslash_)   ; \     2
01BC   50                     DB   lsb(rbrack_)   ; ]     2
01BD   A0                     DB   lsb(caret_)   ; ^     1
01BE   B6                     DB   lsb(underscore_)   ; _     2
01BF   B9                     DB   lsb(grave_)   ; `     2   	
01C0   01                     DB   lsb(lowcase_)   ; a     1
01C1   01                     DB   lsb(lowcase_)   ; b
01C2   01                     DB   lsb(lowcase_)   ; c
01C3   01                     DB   lsb(lowcase_)   ; d
01C4   01                     DB   lsb(lowcase_)   ; e
01C5   01                     DB   lsb(lowcase_)   ; f
01C6   01                     DB   lsb(lowcase_)   ; g
01C7   01                     DB   lsb(lowcase_)   ; h
01C8   01                     DB   lsb(lowcase_)   ; i
01C9   01                     DB   lsb(lowcase_)   ; j
01CA   01                     DB   lsb(lowcase_)   ; k
01CB   01                     DB   lsb(lowcase_)   ; l
01CC   01                     DB   lsb(lowcase_)   ; m
01CD   01                     DB   lsb(lowcase_)   ; n
01CE   01                     DB   lsb(lowcase_)   ; o
01CF   01                     DB   lsb(lowcase_)   ; p
01D0   01                     DB   lsb(lowcase_)   ; q
01D1   01                     DB   lsb(lowcase_)   ; r
01D2   01                     DB   lsb(lowcase_)   ; s
01D3   01                     DB   lsb(lowcase_)   ; t
01D4   01                     DB   lsb(lowcase_)   ; u
01D5   01                     DB   lsb(lowcase_)   ; v
01D6   01                     DB   lsb(lowcase_)   ; w
01D7   01                     DB   lsb(lowcase_)   ; x
01D8   01                     DB   lsb(lowcase_)   ; y
01D9   01                     DB   lsb(lowcase_)   ; z
01DA   CF                     DB   lsb(lbrace_)   ; {     1
01DB   D4                     DB   lsb(pipe_)   ; |     1
01DC   DE                     DB   lsb(rbrace_)   ; }     1
01DD   E1                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   6B 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                BANG_:       
0204                BANG:        ; logical invert, any non zero value
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 3D                  CP   "="   
0208   20 05                  JR   nz,not   
020A   E1                     POP   hl   
020B   D1                     POP   de   
020C   C3 F6 0B               JP   notequals   
020F                NOT:         
020F   0B                     DEC   bc   
0210   21 00 00               LD   hl,0   ; is considered true
0213   18 0B                  JR   eq1   
0215                EQ_:         
0215                EQ:          
0215   03                     INC   bc   
0216   0A                     LD   a,(bc)   
0217   FE 3D                  CP   "="   
0219   28 04                  JR   z,eq0   
021B   0B                     DEC   bc   
021C   C3 CA 0B               JP   assign   
021F                EQ0:         
021F   E1                     POP   hl   
0220                EQ1:         
0220   D1                     POP   de   
0221   C3 EF 0B               JP   equals   
0224                GT_:         
0224                GT:          
0224   03                     INC   bc   
0225   0A                     LD   a,(bc)   
0226   FE 3E                  CP   ">"   
0228   CA 26 0C               JP   z,shiftRight   
022B   D1                     POP   de   
022C   E1                     POP   hl   
022D   18 09                  JR   lt1   
022F                LT_:         
022F                LT:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3C                  CP   "<"   
0233   CA 16 0C               JP   z,shiftLeft   
0236   E1                     POP   hl   
0237   D1                     POP   de   
0238                LT1:         
0238   FE 3D                  CP   "="   
023A   CA FD 0B               JP   z,lessthaneq   
023D   0B                     DEC   bc   
023E   C3 02 0C               JP   lessthan   
0241                DQUOTE_:      
0241   C3 39 0C               JP   dquote   
0244                             ; index of an array, based on vDataWidth 22
0244                             ; array* num -- value    ; also sets vPointer to address
0244                HASH_:       
0244                HASH:        
0244                ARRAYINDEX:      
0244   E1                     POP   hl   ; hl = index
0245   D1                     POP   de   ; de = array
0246   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0249   3D                     DEC   a   
024A   28 01                  JR   z,arrayIndex1   
024C                ARRAYINDEX0:      
024C   29                     ADD   hl,hl   ; if data width = 2 then double
024D                ARRAYINDEX1:      
024D   19                     ADD   hl,de   ; add addr
024E   22 F8 23               LD   (vPointer),hl   ; store address in setter
0251   16 00                  LD   d,0   
0253   5E                     LD   e,(hl)   
0254   B7                     OR   a   ; check data width again
0255   28 02                  JR   z,arrayIndex2   
0257   23                     INC   hl   
0258   56                     LD   d,(hl)   
0259                ARRAYINDEX2:      
0259   D5                     PUSH   de   
025A   DD E9                  JP   (ix)   
025C                DOLLAR_:      
025C   C3 6A 0A               JP   dollar   
025F                PERCENT_:      
025F   C3 53 0C               JP   percent   
0262                             ; & and                          14
0262                             ; a b -- c
0262                AMPER_:      
0262                AMPER:       
0262                AND:         
0262   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0263   E1                     POP   hl   
0264   7B                     LD   a,e   
0265   A5                     AND   l   
0266   6F                     LD   l,a   
0267   7A                     LD   a,d   
0268   A4                     AND   h   
0269                AND1:        
0269   67                     LD   h,a   
026A   E5                     PUSH   hl   
026B   DD E9                  JP   (ix)   
026D                QUOTE_:      
026D   C3 39 0C               JP   quote   
0270                             ; { block start                 ; 4
0270                             ; -- block*
0270                LPAREN_:      
0270   C3 CF 03               JP   lbrace   
0273                             ;                               4
0273                RPAREN_:      
0273                RPAREN:      
0273   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0276   FD 46 09               LD   b,(iy+9)   
0279   DD E9                  JP   (ix)   
027B                STAR_:       ; 21
027B                STAR:        
027B                MUL:         
027B   D1                     POP   de   ; get first value
027C   E1                     POP   hl   
027D                MUL2:        
027D   C5                     PUSH   bc   ; Preserve the IP
027E   44 4D                  LD   bc,hl   ; bc = 2nd value
0280   21 00 00               LD   hl,0   
0283   3E 10                  LD   a,16   
0285                MUL3:        
0285   29                     ADD   hl,hl   
0286   CB 13                  RL   e   
0288   CB 12                  RL   d   
028A   30 04                  JR   nc,$+6   
028C   09                     ADD   hl,bc   
028D   30 01                  JR   nc,$+3   
028F   13                     INC   de   
0290   3D                     DEC   a   
0291   20 F2                  JR   nz,mul3   
0293   C1                     POP   bc   ; Restore the IP
0294   C3 A6 02               JP   add3   
0297                             ; + add                         25
0297                             ; a b -- c
0297                PLUS_:       
0297                PLUS:        
0297                ADD:         
0297   03                     INC   bc   
0298   0A                     LD   a,(bc)   
0299   FE 2B                  CP   "+"   ; ++ increment variable
029B   20 05                  JR   nz,add1   
029D   E1                     POP   hl   
029E   23                     INC   hl   
029F   C3 CC 0B               JP   assign0   
02A2                ADD1:        
02A2   0B                     DEC   bc   
02A3   D1                     POP   de   ; second term
02A4   E1                     POP   hl   ; first term
02A5   19                     ADD   hl,de   
02A6                ADD3:        
02A6   03                     INC   bc   
02A7   0A                     LD   a,(bc)   
02A8   FE 3D                  CP   "="   
02AA   28 04                  JR   z,add4   
02AC   0B                     DEC   bc   
02AD   E5                     PUSH   hl   
02AE   DD E9                  JP   (ix)   
02B0                ADD4:        
02B0   C3 CC 0B               JP   assign0   
02B3                COMMA_:      
02B3   C3 AE 0C               JP   comma   
02B6                             ; - sub                          23
02B6                             ; a b -- c
02B6                MINUS_:      
02B6                MINUS:       
02B6   03                     INC   bc   ; check if sign of a number
02B7   0A                     LD   a,(bc)   
02B8   0B                     DEC   bc   
02B9   FE 30                  CP   "0"   
02BB   38 05                  JR   c,sub   
02BD   FE 3A                  CP   "9"+1   
02BF   DA A0 0A               JP   c,num   
02C2                SUB:         ; Subtract the value 2nd on stack from top of stack
02C2   03                     INC   bc   
02C3   FE 2D                  CP   "-"   
02C5   20 05                  JR   nz,sub1   
02C7   E1                     POP   hl   
02C8   2B                     DEC   hl   
02C9   C3 CC 0B               JP   assign0   
02CC                SUB1:        
02CC   0B                     DEC   bc   
02CD   D1                     POP   de   
02CE   E1                     POP   hl   
02CF   B7                     OR   a   
02D0   ED 52                  SBC   hl,de   
02D2   18 D2                  JR   add3   
02D4                DOT_:        
02D4   C3 00 04               JP   dot   
02D7                SLASH_:      
02D7   C3 00 05               JP   slash   
02DA                NUM_:        
02DA   C3 A0 0A               JP   num   
02DD                COLON_:      
02DD   C3 E0 02               JP   colon   
02E0                COLON:       
02E0   03                     INC   bc   ; arg_list must ve immediately followed by {
02E1   0A                     LD   a,(bc)   
02E2   FE 3D                  CP   "="   ; := definition
02E4   28 07                  JR   z,defineStart   
02E6   0B                     DEC   bc   
02E7   21 01 00               LD   hl,1   
02EA   C3 8F 0F               JP   error   
02ED                DEFINESTART:      
02ED   E1                     POP   hl   ; discard variable value
02EE   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
02F1   22 F4 23               LD   (vDefine),hl   
02F4   DD E9                  JP   (ix)   
02F6                SEMICOLON_:      
02F6   C3 DB 0B               JP   semicolon   
02F9                QUESTION_:      
02F9   C3 87 0A               JP   question   
02FC                             ;                               18
02FC                UPCASE_:      
02FC                UPCASE:      
02FC   0A                     LD   a,(bc)   ; a = identifier char
02FD   D6 41                  SUB   "A"   ; "A" = 0
02FF   18 05                  JR   ident1   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                LOWCASE_:      
0301                LOWCASE:      
0301   0A                     LD   a,(bc)   
0302   D6 61                  SUB   "a"   
0304   C6 1A                  ADD   a,26   
0306                IDENT1:      
0306   87                     ADD   a,a   ; l = a * 2
0307   6F                     LD   l,a   
0308   26 23                  LD   h,msb(vars)   
030A   22 F8 23               LD   (vPointer),hl   ; store address in setter
030D   5E                     LD   e,(hl)   
030E   23                     INC   hl   
030F   56                     LD   d,(hl)   
0310   D5                     PUSH   de   
0311   DD E9                  JP   (ix)   
0313                             ; [                             14
0313                LBRACK_:      
0313                LBRACK:      
0313                ARRAYSTART:      
0313   11 00 00               LD   de,0   ; create stack frame
0316   D5                     PUSH   de   ; push null for IP
0317   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
031A   FD 56 05               LD   d,(iy+5)   ; 
031D   D5                     PUSH   de   ; 
031E   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0321   FD 56 03               LD   d,(iy+3)   ; 
0324   D5                     PUSH   de   ; 
0325   FD E5                  PUSH   iy   ; push BP
0327   FD 21 00 00            LD   iy,0   ; BP = SP
032B   FD 39                  ADD   iy,sp   
032D   DD E9                  JP   (ix)   
032F                             ; \                             19
032F                BACKSLASH_:      
032F                BACKSLASH:      
032F                LAMBDA:      
032F   DD E5                  PUSH   ix   
0331   CD C9 0C               CALL   parseArgs   
0334                LAMBDA1:      
0334   03                     INC   bc   ; arg_list must ve immediately followed by {
0335   0A                     LD   a,(bc)   
0336   FE 21                  CP   " "+1   ; skip white space
0338   38 FA                  JR   c,lambda1   
033A   FE 7B                  CP   "{"   
033C   28 06                  JR   z,lambda2   
033E   21 02 00               LD   hl,2   ; error 2: parse error
0341   C3 8F 0F               JP   error   
0344                LAMBDA2:      
0344   CD FF 0C               CALL   parseBlock   
0347   CD 69 0D               CALL   createFunc   
034A   E1                     POP   hl   
034B   DD E1                  POP   ix   
034D   E5                     PUSH   hl   
034E   DD E9                  JP   (ix)   
0350                RBRACK_:      
0350                RBRACK:      
0350                ARRAYEND:      ; 53
0350   FD 54                  LD   d,iyh   ; de = BP
0352   FD 5D                  LD   e,iyl   
0354   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0358   62 6B                  LD   hl,de   ; hl = de = BP
035A   B7                     OR   a   
035B   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035D   CB 3C                  SRL   h   ; 
035F   CB 1D                  RR   l   
0361   44 4D                  LD   bc,hl   ; bc = count
0363   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0366   71                     LD   (hl),c   ; write num items in length word
0367   23                     INC   hl   
0368   70                     LD   (hl),b   
0369   23                     INC   hl   ; hl = array[0], bc = count
036A                             ; de = BP, hl = array[0], bc = count
036A   18 15                  JR   arrayEnd3   
036C                ARRAYEND1:      
036C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036F   77                     LD   (hl),a   ; write lsb of array item
0370   23                     INC   hl   ; move to msb of array item
0371   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0374   3D                     DEC   a   
0375   28 05                  JR   z,arrayEnd2   
0377   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
037A   77                     LD   (hl),a   ; write msb of array item
037B   23                     INC   hl   ; move to next word in array
037C                ARRAYEND2:      
037C   FD 2B                  DEC   iy   ; move to next word on stack
037E   FD 2B                  DEC   iy   
0380   0B                     DEC   bc   ; dec items count
0381                ARRAYEND3:      
0381   79                     LD   a,c   ; if not zero loop
0382   B0                     OR   b   
0383   20 E7                  JR   nz,arrayEnd1   
0385   EB                     EX   de,hl   ; de = end of array, hl = BP
0386   F9                     LD   sp,hl   ; sp = BP
0387   E1                     POP   hl   ; de = end of array, hl = old BP
0388   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0389   FD 62                  LD   iyh,d   
038B   FD 6B                  LD   iyl,e   
038D   D1                     POP   de   ; pop arg_list (discard)
038E   D1                     POP   de   ; pop first_arg* (discard)
038F   D1                     POP   de   ; pop IP (discard)
0390   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0394   13                     INC   de   
0395   13                     INC   de   
0396   D5                     PUSH   de   ; return array[0]
0397   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
039A   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039E   DD E9                  JP   (ix)   
03A0                CARET_:      
03A0                             ; execute a block of code which ends with } 116
03A0                             ; creates a root scope if BP == stack
03A0                             ; else uses outer scope
03A0                CARET:       
03A0                GO:          
03A0   D1                     POP   de   ; de = block*
03A1                GO1:         
03A1   7B                     LD   a,e   ; if block* == null, exit
03A2   B2                     OR   d   
03A3   20 02                  JR   nz,go2   
03A5   DD E9                  JP   (ix)   
03A7                GO2:         
03A7   1A                     LD   a,(de)   
03A8   FE 7B                  CP   "{"   
03AA   CA 3D 0B               JP   z,goBlock   
03AD   FE 28                  CP   "("   
03AF   C2 70 0B               JP   nz,goFunc   
03B2   D5                     PUSH   de   ; push de just before stack frame
03B3   CA 3D 0B               JP   z,goBlock   
03B6                UNDERSCORE_:      
03B6   C3 AE 0C               JP   underscore   
03B9                GRAVE_:      
03B9                GRAVE:       
03B9                PRINTLITERAL:      
03B9   03                     INC   bc   ; move to first char
03BA   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
03BE   18 03                  JR   printLiteral1   
03C0                PRINTLITERAL0:      
03C0   12                     LD   (de),a   ; a -> buffer*
03C1   13                     INC   de   ; string*++,
03C2   03                     INC   bc   
03C3                PRINTLITERAL1:      
03C3   0A                     LD   a,(bc)   ; a <- string*
03C4   FE 60                  CP   "`"   ; if ` exit loop
03C6   20 F8                  JR   nz,printLiteral0   
03C8   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03CC   C3 88 0C               JP   dotNext   
03CF                LBRACE_:      
03CF                LBRACE:      
03CF   CD FF 0C               CALL   parseBlock   
03D2   DD E9                  JP   (ix)   
03D4                             ; | or                          11
03D4                             ; a b -- c
03D4                PIPE_:       
03D4                PIPE:        
03D4                OR:          
03D4   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D5   E1                     POP   hl   
03D6   7B                     LD   a,e   
03D7   B5                     OR   l   
03D8   6F                     LD   l,a   
03D9   7A                     LD   a,d   
03DA   B4                     OR   h   
03DB   C3 69 02               JP   and1   
03DE                RBRACE_:      
03DE   C3 D0 0A               JP   rbrace   
03E1                             ; ~ char                        8
03E1                TILDE_:      
03E1                TILDE:       
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                             ;********************** PAGE 3 END *********************************************
03E9                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 21 0E               CALL   jumpTable   
0403   61                     DB   "a"   ; .a print array
0404   18 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
041B   C3 88 0C               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   dotString1   
0425                DOTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                DOTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,dotString0   
042C   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 88 0C               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A E8 23               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,dotHex   ; else falls through
043B   C3 3E 04               JP   dotDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                DOTDEC:      
043E   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A E6 23               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,dotDecX   
044A   26 00                  LD   h,0   
044C                DOTDECX:      
044C   CD 5B 04               CALL   dotDec0   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 88 0C               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                DOTDEC0:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,dotDec1   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                DOTDEC1:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   dotDec2   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   dotDec2   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   dotDec2   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   dotDec2   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   dotDec2   
048A   C9                     RET      
048B                DOTDEC2:      
048B   06 2F                  LD   b,"0"-1   
048D                DOTDEC3:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,dotDec3   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,dotDec4   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   dotDec5   
049D                DOTDEC4:      
049D   0C                     INC   c   
049E                DOTDEC5:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                DOTHEX:      
04A4   E1                     POP   hl   ; hl = value
04A5   ED 5B EC 23            LD   de,(vBufPtr)   
04A9   3E 24                  LD   a,"$"   ; # prefix
04AB   12                     LD   (de),a   
04AC   13                     INC   de   ; string*++,
04AD   3A E6 23               LD   a,(vDataWidth)   
04B0   3D                     DEC   a   
04B1   28 04                  JR   z,dotHex0   
04B3   7C                     LD   a,h   
04B4   CD C6 04               CALL   dotHex1   
04B7                DOTHEX0:      
04B7   7D                     LD   a,l   
04B8   CD C6 04               CALL   dotHex1   
04BB   3E 20                  LD   a," "   ; append space to buffer
04BD   12                     LD   (de),a   
04BE   13                     INC   de   ; string*++,
04BF   ED 53 EC 23            LD   (vBufPtr),de   
04C3   C3 88 0C               JP   dotNext   
04C6                DOTHEX1:      
04C6   F5                     PUSH   af   
04C7   1F                     RRA      
04C8   1F                     RRA      
04C9   1F                     RRA      
04CA   1F                     RRA      
04CB   CD CF 04               CALL   dotHex2   
04CE   F1                     POP   af   
04CF                DOTHEX2:      
04CF   E6 0F                  AND   0x0F   
04D1   C6 90                  ADD   a,0x90   
04D3   27                     DAA      
04D4   CE 40                  ADC   a,0x40   
04D6   27                     DAA      
04D7   12                     LD   (de),a   
04D8   13                     INC   de   ; string*++,
04D9   C9                     RET      
04DA                             ;********************** PAGE 4 END *********************************************
04DA                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 45 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 0B 0E               CALL   commandTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   BF                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   BF                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   BF                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   BF                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   BF                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   BF                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A4                     DB   lsb(true_)   
051F   BF                     DB   lsb(command_nop_)   
0520   A7                     DB   lsb(command_v_)   
0521   B6                     DB   lsb(command_w_)   
0522   BC                     DB   lsb(xor_)   
0523   BF                     DB   lsb(command_nop_)   
0524   BF                     DB   lsb(command_nop_)   
0525   C2                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   D8 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   E5 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   98 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   06 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   0F 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   62 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   D6 0E                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   3D 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   23 06                  DW   break   
0541   00                     DB   NUL   
0542   62 06                  DW   error1   
0544                COMMAND_D_:      
0544   62                     DB   "b"   ; /db decimal base
0545   5A 06                  DW   decBase   
0547   00                     DB   NUL   
0548   5A 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   41 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   93 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   DF 09                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   E3 08                  DW   filter   
0556   31                     DB   "1"   
0557   D4 0F                  DW   f1   
0559   32                     DB   "2"   
055A   D4 0F                  DW   f2   
055C   33                     DB   "3"   
055D   D4 0F                  DW   f3   
055F   34                     DB   "4"   
0560   D4 0F                  DW   f4   
0562   00                     DB   NUL   
0563   10 0C                  DW   false1   
0565                COMMAND_H_:      
0565   62                     DB   "b"   ; /hb hex base
0566   68 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   62 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   6E 06                  DW   input   
056E   00                     DB   NUL   
056F   62 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   79 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   A1 08                  DW   map   
0577   00                     DB   NUL   
0578   62 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   82 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   62 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   8B 06                  DW   quit   
0583   00                     DB   NUL   
0584   62 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   95 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   9B 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   1C 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   62 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   A1 06                  DW   stringBegin   
0595   65                     DB   "e"   
0596   A9 06                  DW   stringEnd   
0598   69                     DB   "i"   
0599   19 08                  DW   stringIter   
059B   6C                     DB   "l"   
059C   D8 06                  DW   stringLength   
059E   73                     DB   "s"   
059F   E7 06                  DW   stringSize   
05A1   00                     DB   NUL   
05A2   62 06                  DW   error1   
05A4                TRUE_:       
05A4   00                     DB   NUL   
05A5   0A 0C                  DW   true1   
05A7                COMMAND_V_:      
05A7   68                     DB   "h"   
05A8   F3 06                  DW   varHeapPtr   
05AA   74                     DB   "t"   
05AB   FC 06                  DW   varTIBPtr   
05AD   48                     DB   "H"   
05AE   4E 06                  DW   constHeapStart   
05B0   54                     DB   "T"   
05B1   54 06                  DW   constTIBStart   
05B3   00                     DB   NUL   
05B4   62 06                  DW   error1   
05B6                COMMAND_W_:      
05B6   6D                     DB   "m"   ; /wm word mode
05B7   0B 07                  DW   wordMode   
05B9   00                     DB   NUL   
05BA   62 06                  DW   error1   
05BC                XOR_:        
05BC   00                     DB   NUL   
05BD   11 07                  DW   xor   
05BF                             ; 2
05BF                COMMAND_NOP_:      
05BF   00                     DB   NUL   
05C0   C5 05                  DW   nop   
05C2                             ; 3
05C2                COMMAND_DEFAULT_:      
05C2   00                     DB   NUL   
05C3   C7 05                  DW   div   
05C5                             ;********************** PAGE 5 END *********************************************
05C5                NOP:         
05C5   DD E9                  JP   (ix)   
05C7                             ;                               32
05C7                DIV:         
05C7   D1                     POP   de   
05C8   E1                     POP   hl   
05C9   C5                     PUSH   bc   ; preserve the IP
05CA   44 4D                  LD   bc,hl   
05CC   CD B0 0C               CALL   divide   
05CF   EB                     EX   de,hl   
05D0   ED 53 FA 23            LD   (vRemain),de   
05D4   C1                     POP   bc   
05D5   C3 A6 02               JP   add3   
05D8                             ; /ab absolute
05D8                             ; num -- num
05D8                ABSOLUTE:      
05D8   E1                     POP   hl   
05D9   CB 7C                  BIT   7,h   
05DB   C8                     RET   z   
05DC   AF                     XOR   a   
05DD   95                     SUB   l   
05DE   6F                     LD   l,a   
05DF   9F                     SBC   a,a   
05E0   94                     SUB   h   
05E1   67                     LD   h,a   
05E2   E5                     PUSH   hl   
05E3   DD E9                  JP   (ix)   
05E5                             ; /ad addrOf                    24
05E5                             ; char -- addr
05E5                ADDROF:      
05E5   E1                     POP   hl   ; a = char
05E6   7D                     LD   a,l   
05E7   FE 7B                  CP   "z"+1   ; if a > z then exit
05E9   30 19                  JR   nc,addrOf2   
05EB   D6 41                  SUB   "A"   ; a - 65
05ED   38 15                  JR   c,addrOf2   ; if < A then exit
05EF   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
05F1   38 06                  JR   c,addrOf1   
05F3   D6 06                  SUB   "a"-("Z"+1)   
05F5   FE 1A                  CP   "Z"-"A"+1   
05F7   38 0B                  JR   c,addrOf2   ; if < a then exit
05F9                ADDROF1:      
05F9   87                     ADD   a,a   ; double a
05FA   21 00 23               LD   hl,VARS   ; hl = VARS + a
05FD   85                     ADD   a,l   
05FE   6F                     LD   l,a   
05FF   3E 00                  LD   a,0   
0601   8C                     ADC   a,h   
0602   67                     LD   h,a   
0603   E5                     PUSH   hl   
0604                ADDROF2:      
0604   DD E9                  JP   (ix)   
0606                             ; /al length of an array, num elements
0606                             ; array* -- num
0606                ARRAYLENGTH:      
0606   E1                     POP   hl   
0607   2B                     DEC   hl   ; msb size
0608   56                     LD   d,(hl)   
0609   2B                     DEC   hl   ; lsb size
060A   5E                     LD   e,(hl)   
060B   EB                     EX   de,hl   
060C                ARRAYLENGTH1:      
060C   E5                     PUSH   hl   
060D   DD E9                  JP   (ix)   
060F                             ; /as size in bytes of an array, based on current data width
060F                             ; array* -- num
060F                ARRAYSIZE:      
060F                          ;*Macro unroll:  PERFORM arrayLength
060F   DD 21 16 06            LD   ix,performM_1475S1026   
0613   C3 06 06               JP   arrayLength   
0616                PERFORMM_1475S1026:      
0616   E1                     POP   hl   
0617   3A E6 23               LD   a,(vDataWidth)   
061A   3D                     DEC   a   
061B   28 EF                  JR   z,arrayLength1   
061D   CB 3C                  SRL   h   
061F   CB 1D                  RR   l   
0621   18 E9                  JR   arrayLength1   
0623                             ; 13
0623                             ; /br break from loop
0623                             ; --
0623                BREAK:       
0623   E1                     POP   hl   ; hl = condition, break if false
0624   7D                     LD   a,l   
0625   B4                     OR   h   
0626   28 02                  JR   z,break1   
0628   DD E9                  JP   (ix)   
062A                BREAK1:      
062A   FD 5D                  LD   e,iyl   ; get block* just under stack frame
062C   FD 54                  LD   d,iyh   
062E   21 08 00               LD   hl,8   
0631   19                     ADD   hl,de   
0632   23                     INC   hl   
0633   23                     INC   hl   
0634   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0637   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
063A   C3 D0 0A               JP   blockEnd   
063D                             ; /b
063D                BYTEMODE:      
063D   21 01 00               LD   hl,1   
0640                BYTEMODE1:      
0640   22 E6 23               LD   (vDataWidth),hl   
0643   DD E9                  JP   (ix)   
0645                             ; //
0645                COMMENT:      
0645   03                     INC   bc   ; point to next char
0646   0A                     LD   a,(bc)   
0647   FE 20                  CP   " "   ; terminate on any char less than SP
0649   30 FA                  JR   nc,comment   
064B   0B                     DEC   bc   
064C   DD E9                  JP   (ix)   
064E                CONSTHEAPSTART:      
064E   11 22 24               LD   de,HEAP   
0651   C3 08 07               JP   constant   
0654                CONSTTIBSTART:      
0654   11 00 21               LD   de,TIB   
0657   C3 08 07               JP   constant   
065A                DECBASE:      
065A   21 0A 00               LD   hl,10   
065D                DECBASE1:      
065D   22 E8 23               LD   (vNumBase),hl   
0660   DD E9                  JP   (ix)   
0662                ERROR1:      
0662   21 01 00               LD   hl,1   ; error 1: unknown command
0665   C3 8F 0F               JP   error   
0668                HEXBASE:      
0668   21 10 00               LD   hl,16   
066B   C3 5D 06               JP   decBase1   
066E                             ; Z80 port input
066E                             ; port -- value
066E                INPUT:       
066E   E1                     POP   hl   
066F   59                     LD   e,c   ; save IP
0670   4D                     LD   c,l   
0671   ED 68                  IN   l,(c)   
0673   26 00                  LD   h,0   
0675   4B                     LD   c,e   ; restore IP
0676   E5                     PUSH   hl   
0677   DD E9                  JP   (ix)   
0679                             ; /k                              6
0679                KEY:         
0679   CD 81 00               CALL   getchar   
067C   26 00                  LD   h,0   
067E   6F                     LD   l,a   
067F   E5                     PUSH   hl   
0680   DD E9                  JP   (ix)   
0682                             ; /o Z80 port output
0682                             ; value port --
0682                OUTPUT:      
0682   E1                     POP   hl   
0683   59                     LD   e,c   ; save IP
0684   4D                     LD   c,l   
0685   E1                     POP   hl   
0686   ED 69                  OUT   (c),l   
0688   4B                     LD   c,e   ; restore IP
0689   DD E9                  JP   (ix)   
068B                             ; /qt
068B                             ; bool --
068B                QUIT:        
068B   E1                     POP   hl   ; hl = condition, exit if true
068C   7D                     LD   a,l   
068D   B4                     OR   h   
068E   20 02                  JR   nz,quit1   
0690   DD E9                  JP   (ix)   
0692                QUIT1:       
0692   C3 D0 0A               JP   blockEnd   
0695                RECUR:       
0695   E1                     POP   hl   
0696   22 F2 23               LD   (vRecur),hl   
0699   DD E9                  JP   (ix)   
069B                REMAIN:      
069B   2A FA 23               LD   hl,(vRemain)   
069E   E5                     PUSH   hl   
069F   DD E9                  JP   (ix)   
06A1                STRINGBEGIN:      
06A1   21 FF FF               LD   hl,TRUE   ; string mode = true
06A4   22 F6 23               LD   (vStrMode),hl   
06A7   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06A9                STRINGEND:      
06A9   21 00 00               LD   hl,FALSE   ; string mode = false
06AC   22 F6 23               LD   (vStrMode),hl   
06AF   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
06B2   AF                     XOR   a   
06B3   77                     LD   (hl),a   
06B4   23                     INC   hl   ; hl = string_end*
06B5   ED 43 04 24            LD   (vTemp1),bc   ; save IP
06B9   11 00 22               LD   de,BUFFER   ; de = string*
06BC   B7                     OR   a   ; bc = size
06BD   ED 52                  SBC   hl,de   
06BF   44 4D                  LD   bc,hl   
06C1   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06C4   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06C5   D5                     PUSH   de   ; return hstring*
06C6   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06C8   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06CC   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
06D0                STRINGEND1:      
06D0   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06D3   22 EC 23               LD   (vBufPtr),hl   
06D6   DD E9                  JP   (ix)   
06D8                STRINGLENGTH:      
06D8   D1                     POP   de   
06D9   21 00 00               LD   hl,0   
06DC   18 02                  JR   stringLength2   
06DE                STRINGLENGTH1:      
06DE   13                     INC   de   
06DF   23                     INC   hl   
06E0                STRINGLENGTH2:      
06E0   1A                     LD   a,(de)   
06E1   B7                     OR   a   
06E2   20 FA                  JR   nz,stringLength1   
06E4                STRINGLENGTH3:      
06E4   E5                     PUSH   hl   
06E5   DD E9                  JP   (ix)   
06E7                STRINGSIZE:      
06E7                          ;*Macro unroll:  PERFORM stringLength
06E7   DD 21 EE 06            LD   ix,performM_1620S1190   
06EB   C3 D8 06               JP   stringLength   
06EE                PERFORMM_1620S1190:      
06EE   E1                     POP   hl   
06EF   23                     INC   hl   
06F0   C3 E4 06               JP   stringLength3   
06F3                VARHEAPPTR:      
06F3   ED 5B F0 23            LD   de,(vHeapPtr)   
06F7   21 F0 23               LD   hl,vHeapPtr   
06FA   18 09                  JR   variable   
06FC                VARTIBPTR:      
06FC   ED 5B EA 23            LD   de,(vTIBPtr)   
0700   21 EA 23               LD   hl,vTIBPtr   
0703   18 00                  JR   variable   
0705                VARIABLE:      
0705   22 F8 23               LD   (vPointer),hl   
0708                CONSTANT:      
0708   D5                     PUSH   de   
0709   DD E9                  JP   (ix)   
070B                             ; /wm
070B                WORDMODE:      
070B   21 02 00               LD   hl,2   
070E   C3 40 06               JP   byteMode1   
0711                XOR:         
0711   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0712                XOR1:        
0712   E1                     POP   hl   
0713   7B                     LD   a,e   
0714   AD                     XOR   l   
0715   6F                     LD   l,a   
0716   7A                     LD   a,d   
0717   AC                     XOR   h   
0718   67                     LD   h,a   
0719   E5                     PUSH   hl   
071A   DD E9                  JP   (ix)   
071C                             ;*******************************************************************
071C                             ; Monty implementations
071C                             ;*******************************************************************
071C                             ; /rg rangeSrc
071C                             ; begin end step -- src
071C                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
071C                RANGESRC:      ; range source: begin, end, step, local: L
071C   CD A0 03               CALL   go   
071F   00 00                  DW   NUL   
0721   2B 07                  DW   rangeSrcM_1658S1235   
0723   25 07                  DW   $+2   
0725   01                     DB   1   
0726   04 62 65 73 4C         .PSTR   "besL"   
072B                RANGESRCM_1658S1235:      
072B   7B                     DB   "{"   
072C   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0737   5C 6B 74 7B            DB   "\\kt{"   
073B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0743   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0749   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0751   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0759   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
0763   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
076B   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0772   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
0786   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
078E   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0795   7D                     DB   "}"   
0796   7D                     DB   "}"   
0797   00                     DB   0   
0798                             ; /ai arrayIter
0798                             ; array* -- src
0798                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0798                ARRAYITER:      
0798   CD A0 03               CALL   go   
079B   00 00                  DW   NUL   
079D   A5 07                  DW   arrayIterM_1677S1255   
079F   A1 07                  DW   $+2   
07A1   01                     DB   1   
07A2   02 61 4C               .PSTR   "aL"   
07A5                ARRAYITERM_1677S1255:      
07A5   7B                     DB   "{"   
07A6   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07B6   5C 6B 74 7B            DB   "\\kt{"   
07BA   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07C2   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07C8   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07D0   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
07D8   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
07DF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07E7   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
07F0   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0807   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
080F   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0816   7D                     DB   "}"   
0817   7D                     DB   "}"   
0818   00                     DB   0   
0819                             ; /si stringIter
0819                             ; string* -- src
0819                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0819                STRINGITER:      
0819   CD A0 03               CALL   go   
081C   00 00                  DW   NUL   
081E   26 08                  DW   stringIterM_1696S1275   
0820   22 08                  DW   $+2   
0822   01                     DB   1   
0823   02 73 4C               .PSTR   "sL"   
0826                STRINGITERM_1696S1275:      
0826   7B                     DB   "{"   
0827   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
0831   5C 6B 74 7B            DB   "\\kt{"   
0835   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
083D   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0844   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
084C   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
0854   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
085B   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
086C   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0874   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
087B   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
088F   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0897   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
089E   7D                     DB   "}"   
089F   7D                     DB   "}"   
08A0   00                     DB   0   
08A1                             ; /mp map
08A1                             ; src func -- src1
08A1                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08A1                MAP:         ; map: source, function
08A1   CD A0 03               CALL   go   
08A4   00 00                  DW   NUL   
08A6   AE 08                  DW   mapM_1716S1297   
08A8   AA 08                  DW   $+2   
08AA   00                     DB   0   
08AB   02 73 66               .PSTR   "sf"   
08AE                MAPM_1716S1297:      
08AE   7B                     DB   "{"   
08AF   5C 6B 74 7B            DB   "\\kt{"   
08B3   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08BB   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08BF   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08C4   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
08D0   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
08D9   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
08E0   7D                     DB   "}"   
08E1   7D                     DB   "}"   
08E2   00                     DB   0   
08E3                             ; /ft filter
08E3                             ; src pred -- src1
08E3                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
08E3                FILTER:      ; filter: source, predicate, local: T
08E3   CD A0 03               CALL   go   
08E6   00 00                  DW   NUL   
08E8   F1 08                  DW   filterM_1730S1312   
08EA   EC 08                  DW   $+2   
08EC   01                     DB   1   
08ED   03 73 70 54            .PSTR   "spT"   
08F1                FILTERM_1730S1312:      
08F1   7B                     DB   "{"   
08F2   5B 30 5D 25 54 3D      DB   "[0]%T="   
08F8   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
08FC   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0900   5B                     DB   "["   
0901   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
090E   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0916   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
091A   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
091F   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0935   3F 3F                  DB   "??"   
0937   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
093E   7D                     DB   "}"   
093F   7D                     DB   "}"   
0940   00                     DB   0   
0941                             ; /fd fold
0941                             ; reducer is a function like: \\da00bbLi4u
0941                             ; src init reducer -- src1
0941                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0941                FOLD:        ; src, init, reducer
0941   CD A0 03               CALL   go   
0944   00 00                  DW   NUL   
0946   50 09                  DW   foldM_1749S1332   
0948   4A 09                  DW   $+2   
094A   01                     DB   1   
094B   04 73 69 72 41         .PSTR   "sirA"   
0950                FOLDM_1749S1332:      
0950   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0951   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0958   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
095C   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0960   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0965   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0980   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0989   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0990   7D                     DB   "}"   
0991   7D                     DB   "}"   
0992   00                     DB   0   
0993                             ; /fe forEach
0993                             ; src proc --
0993                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0993                FOREACH:      ; forEach: source, procedure, local: T
0993   CD A0 03               CALL   go   
0996   00 00                  DW   NUL   
0998   A1 09                  DW   forEachM_1763S1347   
099A   9C 09                  DW   $+2   
099C   01                     DB   1   
099D   03 73 70 54            .PSTR   "spT"   
09A1                FOREACHM_1763S1347:      
09A1   7B                     DB   "{"   
09A2   5B 30 5D 25 54 3D      DB   "[0]%T="   
09A8   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09AC   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09B4   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09B9   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09CB   3F 3F                  DB   "??"   ; ifte:
09CD   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
09D6   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09DD   7D                     DB   "}"   
09DE   00                     DB   0   
09DF                             ; ; /fs funcSrc
09DF                             ; ; func -- src
09DF                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
09DF                FUNCSRC:      ; :f func or block
09DF   CD A0 03               CALL   go   
09E2   00 00                  DW   NUL   
09E4   EB 09                  DW   funcSrcM_1777S1362   
09E6   E8 09                  DW   $+2   
09E8   00                     DB   0   
09E9   01 66                  .PSTR   "f"   
09EB                FUNCSRCM_1777S1362:      
09EB   7B                     DB   "{"   
09EC   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
09F0   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09F8   5C 64 74 7B            DB   "\\dt{"   
09FC   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A0E   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A15   7D                     DB   "}"   
0A16   7D                     DB   "}"   
0A17   00                     DB   0   
0A18                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A18                PRINTARRAY:      
0A18   CD A0 03               CALL   go   
0A1B   00 00                  DW   NUL   
0A1D   26 0A                  DW   printArrayM_1787S1373   
0A1F   21 0A                  DW   $+2   
0A21   02                     DB   2   
0A22   03 61 62 63            .PSTR   "abc"   
0A26                PRINTARRAYM_1787S1373:      
0A26   7B                     DB   "{"   
0A27   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0A5E   7D                     DB   "}"   
0A5F   00                     DB   0   
0A60                             ;*******************************************************************
0A60                             ; implementations continued
0A60                             ;*******************************************************************
0A60                AT_:         
0A60                AT:          
0A60                ADDR:        
0A60   ED 5B F8 23            LD   de,(vPointer)   
0A64   21 F8 23               LD   hl,vPointer   
0A67   C3 05 07               JP   variable   
0A6A                             ; $ hex                         ; 22
0A6A                DOLLAR:      
0A6A                HEXNUM:      
0A6A   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A6D                HEXNUM1:      
0A6D   03                     INC   bc   
0A6E   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A6F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A71   28 02                  JR   z,hexnum2   ; no a decimal
0A73   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A75                HEXNUM2:      
0A75   D6 30                  SUB   $30   ; form decimal digit
0A77   DA C2 0A               JP   c,num2   
0A7A   FE 10                  CP   $0F+1   
0A7C   D2 C2 0A               JP   nc,num2   
0A7F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A80   29                     ADD   hl,hl   ; 4X
0A81   29                     ADD   hl,hl   ; 8X
0A82   29                     ADD   hl,hl   ; 16X
0A83   85                     ADD   a,l   ; add into bottom of hl
0A84   6F                     LD   l,a   
0A85   18 E6                  JR   hexnum1   
0A87                             ; if                            23
0A87                             ; condition then -- value
0A87                QUESTION:      
0A87                IF:          
0A87   03                     INC   bc   
0A88   0A                     LD   a,(bc)   
0A89   FE 3F                  CP   "?"   
0A8B   28 06                  JR   z,ifte   
0A8D   0B                     DEC   bc   
0A8E   11 00 00               LD   de,NUL   ; NUL pointer for else
0A91   18 01                  JR   ifte1   
0A93                             ; ifte
0A93                             ; condition then else -- value
0A93                IFTE:        
0A93   D1                     POP   de   ; de = else
0A94                IFTE1:       
0A94   E1                     POP   hl   ; hl = then
0A95   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0A96   7C                     LD   a,h   
0A97   B5                     OR   l   
0A98   E1                     POP   hl   ; hl = then
0A99   CA A1 03               JP   z,go1   ; if z de = else
0A9C   EB                     EX   de,hl   ; condition = false, de = then
0A9D   C3 A1 03               JP   go1   
0AA0                             ; 0..9 number                   37
0AA0                NUM:         
0AA0   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0AA3   0A                     LD   a,(bc)   ; Get numeral or -
0AA4   FE 2D                  CP   "-"   
0AA6   20 01                  JR   nz,num0   
0AA8   03                     INC   bc   ; move to next char, no flags affected
0AA9                NUM0:        
0AA9   08                     EX   af,af'   ; save zero flag = 0 for later
0AAA                NUM1:        
0AAA   0A                     LD   a,(bc)   ; read digit
0AAB   D6 30                  SUB   "0"   ; less than 0?
0AAD   38 13                  JR   c,num2   ; not a digit, exit loop
0AAF   FE 0A                  CP   10   ; greater that 9?
0AB1   30 0F                  JR   nc,num2   ; not a digit, exit loop
0AB3   03                     INC   bc   ; inc IP
0AB4   54 5D                  LD   de,hl   ; multiply hl * 10
0AB6   29                     ADD   hl,hl   
0AB7   29                     ADD   hl,hl   
0AB8   19                     ADD   hl,de   
0AB9   29                     ADD   hl,hl   
0ABA   85                     ADD   a,l   ; add digit in a to hl
0ABB   6F                     LD   l,a   
0ABC   3E 00                  LD   a,0   
0ABE   8C                     ADC   a,h   
0ABF   67                     LD   h,a   
0AC0   18 E8                  JR   num1   
0AC2                NUM2:        
0AC2   0B                     DEC   bc   
0AC3   08                     EX   af,af'   ; restore zero flag
0AC4   20 07                  JR   nz,num3   
0AC6   EB                     EX   de,hl   ; negate the value of hl
0AC7   21 00 00               LD   hl,0   
0ACA   B7                     OR   a   ; jump to sub2
0ACB   ED 52                  SBC   hl,de   
0ACD                NUM3:        
0ACD   E5                     PUSH   hl   ; Put the number on the stack
0ACE   DD E9                  JP   (ix)   ; and process the next character
0AD0                             ;                               58
0AD0                RBRACE:      
0AD0                BLOCKEND:      
0AD0   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0AD3   FD 56 01               LD   d,(iy+1)   
0AD6   ED 53 04 24            LD   (vTemp1),de   
0ADA   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0ADD   FD 56 07               LD   d,(iy+7)   
0AE0   ED 53 06 24            LD   (vTemp2),de   
0AE4   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0AE7   FD 56 03               LD   d,(iy+3)   
0AEA   EB                     EX   de,hl   
0AEB   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0AEE   FD 56 01               LD   d,(iy+1)   
0AF1   13                     INC   de   ; for carry flag <=
0AF2   B7                     OR   a   
0AF3   ED 52                  SBC   hl,de   
0AF5   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0AF7   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0AF9   FD 5D                  LD   e,iyl   
0AFB   21 08 00               LD   hl,8   
0AFE   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0AFF   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0B00   18 0C                  JR   blockEnd2   
0B02                BLOCKEND1:      ; same scope
0B02   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0B05   FD 56 03               LD   d,(iy+3)   
0B08   EB                     EX   de,hl   
0B09   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0B0B   FD 5D                  LD   e,iyl   
0B0D   EB                     EX   de,hl   
0B0E                BLOCKEND2:      
0B0E   44 4D                  LD   bc,hl   ; bc = hl = BP
0B10   B7                     OR   a   ; hl = BP - SP = count
0B11   ED 72                  SBC   hl,sp   
0B13   7D                     LD   a,l   
0B14   B4                     OR   h   
0B15   28 09                  JR   z,blockEnd3   
0B17   C5                     PUSH   bc   ; bc = count, hl = BP
0B18   44 4D                  LD   bc,hl   
0B1A   E1                     POP   hl   
0B1B   2B                     DEC   hl   ; hl = BP-1
0B1C   1B                     DEC   de   ; de = args*-1
0B1D   ED B8                  LDDR      
0B1F   13                     INC   de   
0B20                BLOCKEND3:      
0B20   EB                     EX   de,hl   ; sp = de = new tos*
0B21   F9                     LD   sp,hl   
0B22   ED 4B 06 24            LD   bc,(vTemp2)   
0B26   FD 2A 04 24            LD   iy,(vTemp1)   
0B2A   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0B2E   7B                     LD   a,e   ; check for NUL
0B2F   B2                     OR   d   
0B30   20 02                  JR   nz,blockEnd4   
0B32   DD E9                  JP   (ix)   
0B34                BLOCKEND4:      
0B34   21 00 00               LD   hl,0   ; clear recur vector
0B37   22 F2 23               LD   (vRecur),hl   
0B3A   C3 A1 03               JP   go1   ; execute de
0B3D                GOBLOCK:      
0B3D   ED 53 04 24            LD   (vTemp1),de   ; save de
0B41   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0B44   FD 54                  LD   d,iyh   
0B46   FD 5D                  LD   e,iyl   
0B48   B7                     OR   a   ; if stack* == BP then this is the root_scope
0B49   ED 52                  SBC   hl,de   
0B4B   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0B4F   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0B50   B4                     OR   h   
0B51   3E 00                  LD   a,0   
0B53   28 6A                  JR   z,goFunc8   
0B55   C5                     PUSH   bc   ; push IP
0B56   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0B59   FD 46 05               LD   b,(iy+5)   
0B5C   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0B5F   FD 66 03               LD   h,(iy+3)   
0B62                GOBLOCK2:      
0B62   C5                     PUSH   bc   ; arg_list*
0B63   E5                     PUSH   hl   ; first_arg*
0B64   FD E5                  PUSH   iy   ; push BP
0B66   FD 21 00 00            LD   iy,0   ; BP = SP
0B6A   FD 39                  ADD   iy,sp   
0B6C                GOBLOCK3:      
0B6C   42 4B                  LD   bc,de   ; bc = de = block*-1
0B6E   DD E9                  JP   (ix)   
0B70                GOFUNC:      ; execute func
0B70   EB                     EX   de,hl   ; hl = func*
0B71   5E                     LD   e,(hl)   ; de = partial_array*
0B72   23                     INC   hl   
0B73   56                     LD   d,(hl)   
0B74   23                     INC   hl   
0B75   7B                     LD   a,e   ; if partial_array* == null skip
0B76   B2                     OR   d   
0B77   28 21                  JR   z,goFunc3   
0B79   ED 43 04 24            LD   (vTemp1),bc   
0B7D   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0B80   EB                     EX   de,hl   ; hl = partial_array*
0B81   2B                     DEC   hl   ; bc = count
0B82   46                     LD   b,(hl)   
0B83   2B                     DEC   hl   
0B84   4E                     LD   c,(hl)   
0B85   23                     INC   hl   ; hl = array data*
0B86   23                     INC   hl   
0B87   18 06                  JR   goFunc2   ; push each item on stack
0B89                GOFUNC1:      
0B89   5E                     LD   e,(hl)   ; de = partial item
0B8A   23                     INC   hl   
0B8B   56                     LD   d,(hl)   
0B8C   23                     INC   hl   
0B8D   D5                     PUSH   de   ; push on stack
0B8E   0B                     DEC   bc   
0B8F                GOFUNC2:      
0B8F   79                     LD   a,c   ; if count != 0 then loop
0B90   B0                     OR   b   
0B91   20 F6                  JR   nz,goFunc1   
0B93   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0B97   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0B9A                GOFUNC3:      
0B9A   5E                     LD   e,(hl)   ; de = block*
0B9B   23                     INC   hl   
0B9C   56                     LD   d,(hl)   
0B9D   23                     INC   hl   
0B9E   ED 53 04 24            LD   (vTemp1),de   ; save block*
0BA2   5E                     LD   e,(hl)   ; de = arg_list*
0BA3   23                     INC   hl   
0BA4   56                     LD   d,(hl)   
0BA5   23                     INC   hl   
0BA6   EB                     EX   de,hl   ; hl = arg_list*
0BA7   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0BAB   7D                     LD   a,l   ; if arg_list* == null a = 0
0BAC   B4                     OR   h   
0BAD   20 03                  JR   nz,goFunc4   
0BAF   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0BB0   18 0D                  JR   goFunc8   
0BB2                GOFUNC4:      ; allocate locals
0BB2   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0BB3   18 03                  JR   goFunc6   
0BB5                GOFUNC5:      ; loop
0BB5   3B                     DEC   sp   
0BB6   3B                     DEC   sp   
0BB7   3D                     DEC   a   
0BB8                GOFUNC6:      
0BB8   B7                     OR   a   
0BB9   20 FA                  JR   nz,goFunc5   ; end loop
0BBB                GOFUNC7:      
0BBB   23                     INC   hl   ; a = num_args* x 2
0BBC   7E                     LD   a,(hl)   
0BBD   2B                     DEC   hl   
0BBE   87                     ADD   a,a   ; a *= 2
0BBF                GOFUNC8:      
0BBF   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0BC0   44 4D                  LD   bc,hl   
0BC2   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0BC5   85                     ADD   a,l   
0BC6   6F                     LD   l,a   
0BC7   39                     ADD   hl,sp   
0BC8   18 98                  JR   goBlock2   
0BCA                             ;                               21
0BCA                             ; value _oldValue --            ; uses address in vPointer 15
0BCA                ASSIGN:      
0BCA   E1                     POP   hl   ; discard last accessed value
0BCB   E1                     POP   hl   ; hl = new value
0BCC                ASSIGN0:      
0BCC   EB                     EX   de,hl   ; de = new value
0BCD   2A F8 23               LD   hl,(vPointer)   
0BD0                ASSIGN1:      ; entry point from defineEnd
0BD0   73                     LD   (hl),e   
0BD1   3A E6 23               LD   a,(vDataWidth)   
0BD4   3D                     DEC   a   ; is it byte?
0BD5   28 02                  JR   z,assign2   
0BD7   23                     INC   hl   
0BD8   72                     LD   (hl),d   
0BD9                ASSIGN2:      
0BD9   DD E9                  JP   (ix)   
0BDB                SEMICOLON:      
0BDB                DEFINEEND:      
0BDB   2A F4 23               LD   hl,(vDefine)   ; hl = define*
0BDE   7D                     LD   a,l   
0BDF   B4                     OR   h   
0BE0   28 0B                  JR   z,defineEnd1   
0BE2   11 00 00               LD   de,NUL   ; set vDefine=NUL
0BE5   ED 53 F4 23            LD   (vDefine),de   
0BE9   D1                     POP   de   ; de = value
0BEA   C3 D0 0B               JP   assign1   
0BED                DEFINEEND1:      
0BED   DD E9                  JP   (ix)   
0BEF                             ; hl = value1, de = value2
0BEF                             ; hl = result
0BEF                EQUALS:      
0BEF   B7                     OR   a   ; reset the carry flag
0BF0   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0BF2   28 16                  JR   z,true1   
0BF4   18 1A                  JR   false1   
0BF6                NOTEQUALS:      
0BF6   B7                     OR   a   ; reset the carry flag
0BF7   ED 52                  SBC   hl,de   
0BF9   20 0F                  JR   nz,true1   
0BFB   18 13                  JR   false1   
0BFD                             ; hl = value1 de = value2
0BFD                             ; hl = result
0BFD                LESSTHANEQ:      
0BFD   B7                     OR   a   
0BFE   ED 52                  SBC   hl,de   
0C00   18 05                  JR   lessthan1   
0C02                             ; hl = value1 de = value2
0C02                             ; hl = result
0C02                LESSTHAN:      
0C02   B7                     OR   a   
0C03   ED 52                  SBC   hl,de   
0C05   28 09                  JR   z,false1   
0C07                LESSTHAN1:      
0C07   FA 10 0C               JP   m,false1   
0C0A                TRUE1:       
0C0A   21 FF FF               LD   hl,TRUE   
0C0D   E5                     PUSH   hl   
0C0E   DD E9                  JP   (ix)   
0C10                NULL1:       
0C10                FALSE1:      
0C10   21 00 00               LD   hl,FALSE   
0C13   E5                     PUSH   hl   
0C14   DD E9                  JP   (ix)   
0C16                             ; shiftLeft                     15
0C16                             ; value count -- value2          shift left count places
0C16                SHIFTLEFT:      
0C16   50 59                  LD   de,bc   ; save IP
0C18   C1                     POP   bc   ; bc = count
0C19   41                     LD   b,c   ; b = loop counter
0C1A   E1                     POP   hl   
0C1B   04                     INC   b   ; test for counter=0 case
0C1C   18 01                  JR   shiftLeft2   
0C1E                SHIFTLEFT1:      
0C1E   29                     ADD   hl,hl   ; left shift hl
0C1F                SHIFTLEFT2:      
0C1F   10 FD                  DJNZ   shiftLeft1   
0C21   E5                     PUSH   hl   
0C22   42 4B                  LD   bc,de   ; restore IP
0C24   DD E9                  JP   (ix)   
0C26                             ; shiftRight                    16
0C26                             ; value count -- value2          shift left count places
0C26                SHIFTRIGHT:      
0C26   50 59                  LD   de,bc   ; save IP
0C28   C1                     POP   bc   ; bc = count
0C29   41                     LD   b,c   ; b = loop counter
0C2A   E1                     POP   hl   
0C2B   04                     INC   b   ; test for counter=0 case
0C2C   18 04                  JR   shiftRight2   
0C2E                SHIFTRIGHT1:      
0C2E   CB 3C                  SRL   h   ; right shift hl
0C30   CB 1D                  RR   l   
0C32                SHIFTRIGHT2:      
0C32   10 FA                  DJNZ   shiftRight1   
0C34   E5                     PUSH   hl   
0C35   42 4B                  LD   bc,de   ; restore IP
0C37   DD E9                  JP   (ix)   
0C39                             ; string                        ;38
0C39                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0C39                QUOTE:       
0C39                DQUOTE:      
0C39                STRING:      
0C39   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0C3C   E5                     PUSH   hl   ; save start of string
0C3D   0A                     LD   a,(bc)   
0C3E   5F                     LD   e,a   ; e = matching terminator
0C3F   03                     INC   bc   ; point to next char
0C40   18 03                  JR   string2   
0C42                STRING1:      
0C42   77                     LD   (hl),a   
0C43   23                     INC   hl   ; increase count
0C44   03                     INC   bc   ; point to next char
0C45                STRING2:      
0C45   0A                     LD   a,(bc)   
0C46   BB                     CP   e   ; is it the string terminator
0C47   28 02                  JR   z,string3   
0C49   18 F7                  JR   string1   
0C4B                STRING3:      
0C4B   AF                     XOR   a   ; write NUL to terminate string
0C4C   77                     LD   (hl),a   ; hl = end of string
0C4D   23                     INC   hl   
0C4E   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C51   DD E9                  JP   (ix)   
0C53                             ; %a .. %z                      43
0C53                             ; -- value
0C53                             ; returns value of arg
0C53                PERCENT:      
0C53                ARG:         
0C53   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C56   FD 56 05               LD   d,(iy+5)   
0C59   EB                     EX   de,hl   
0C5A   7D                     LD   a,l   ; arg_list* == null, skip
0C5B   B4                     OR   h   
0C5C   28 1A                  JR   z,arg0a   
0C5E   23                     INC   hl   ; a = num_args, hl = arg_list*
0C5F   7E                     LD   a,(hl)   
0C60   23                     INC   hl   
0C61   B7                     OR   a   
0C62   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C64   5F                     LD   e,a   ; e = a = num_args
0C65   03                     INC   bc   ; a = next char = dollar_name
0C66   0A                     LD   a,(bc)   
0C67   C5                     PUSH   bc   ; save IP
0C68   43                     LD   b,e   ; b = e = num_args
0C69   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C6C   FD 56 03               LD   d,(iy+3)   
0C6F                ARG0:        
0C6F   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C70   1B                     DEC   de   
0C71   BE                     CP   (hl)   
0C72   28 09                  JR   z,arg1   
0C74   23                     INC   hl   ; hl = next arg_list*
0C75   10 F8                  DJNZ   arg0   
0C77   C1                     POP   bc   ; no match, restore IP
0C78                ARG0A:       
0C78   11 00 00               LD   de,0   ; return 0
0C7B   18 08                  JR   arg1a   
0C7D                ARG1:        
0C7D   C1                     POP   bc   ; restore IP
0C7E   EB                     EX   de,hl   ; hl = arg*
0C7F   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0C82   5E                     LD   e,(hl)   
0C83   23                     INC   hl   
0C84   56                     LD   d,(hl)   ; de = arg
0C85                ARG1A:       
0C85   D5                     PUSH   de   ; push arg
0C86   DD E9                  JP   (ix)   
0C88                DOTNEXT:      
0C88   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0C8B   3C                     INC   a   
0C8C   20 02                  JR   nz,dotNext1   
0C8E   DD E9                  JP   (ix)   
0C90                DOTNEXT1:      
0C90   11 00 22               LD   de,BUFFER   
0C93   2A EC 23               LD   hl,(vBufPtr)   
0C96   B7                     OR   a   ; hl = count, de = vHeapPtr
0C97   ED 52                  SBC   hl,de   
0C99   C3 A2 0C               JP   dotNext3   
0C9C                DOTNEXT2:      
0C9C   1A                     LD   a,(de)   ; print char at char*
0C9D   CD 85 00               CALL   putchar   
0CA0   13                     INC   de   ; char*++
0CA1   2B                     DEC   hl   ; count--
0CA2                DOTNEXT3:      
0CA2   7D                     LD   a,l   ; count == 0?
0CA3   B4                     OR   h   
0CA4   20 F6                  JR   nz,dotNext2   ; if not loop
0CA6   21 00 22               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0CA9   22 EC 23               LD   (vBufPtr),hl   
0CAC   DD E9                  JP   (ix)   
0CAE                UNDERSCORE:      
0CAE                COMMA:       
0CAE   DD E9                  JP   (ix)   
0CB0                             ; division subroutine.
0CB0                             ; bc: divisor, de: dividend, hl: remainder
0CB0                DIVIDE:      
0CB0   21 00 00               LD   hl,0   ; zero the remainder
0CB3   3E 10                  LD   a,16   ; loop counter
0CB5                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CB5   CB 21                  SLA   c   
0CB7   CB 10                  RL   b   
0CB9   ED 6A                  ADC   hl,hl   
0CBB   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CBD   38 03                  JR   c,divide2   
0CBF   0C                     INC   c   
0CC0   18 01                  JR   divide3   
0CC2                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CC2   19                     ADD   hl,de   
0CC3                DIVIDE3:      
0CC3   3D                     DEC   a   
0CC4   20 EF                  JR   nz,divide1   
0CC6   50 59                  LD   de,bc   ; result from bc to de
0CC8   C9                     RET      
0CC9                             ; arg_list - parses arg_list e.g. ab:c
0CC9                             ; -- arg_list*
0CC9                PARSEARGS:      
0CC9   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CCC   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CCF   E5                     PUSH   hl   ; save start of arg_list
0CD0   23                     INC   hl   ; skip length fields to start of string
0CD1   23                     INC   hl   
0CD2   03                     INC   bc   ; point to next char
0CD3                PARSEARGS1:      
0CD3   0A                     LD   a,(bc)   
0CD4   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CD6   20 03                  JR   nz,parseArgs1a   
0CD8   14                     INC   d   ; non zero value local count acts as flag
0CD9   18 10                  JR   parseArgs3   
0CDB                PARSEARGS1A:      
0CDB   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CDD   38 0F                  JR   c,parseArgs4   
0CDF   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CE1   30 0B                  JR   nc,parseArgs4   
0CE3                PARSEARGS2:      
0CE3   77                     LD   (hl),a   
0CE4   23                     INC   hl   
0CE5   1C                     INC   e   ; increase arg count
0CE6   AF                     XOR   a   
0CE7   B2                     OR   d   
0CE8   28 01                  JR   z,parseArgs3   
0CEA   14                     INC   d   ; if d > 0 increase local count
0CEB                PARSEARGS3:      
0CEB   03                     INC   bc   ; point to next char
0CEC   18 E5                  JR   parseArgs1   
0CEE                PARSEARGS4:      
0CEE   0B                     DEC   bc   
0CEF   AF                     XOR   a   
0CF0   B2                     OR   d   
0CF1   28 01                  JR   z,parseArgs5   
0CF3   15                     DEC   d   ; remove initial inc
0CF4                PARSEARGS5:      
0CF4   23                     INC   hl   
0CF5   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CF8   E1                     POP   hl   ; hl = start of arg_list
0CF9   72                     LD   (hl),d   ; write number of locals at start - 1
0CFA   23                     INC   hl   
0CFB   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CFC   2B                     DEC   hl   
0CFD   E3                     EX   (sp),hl   
0CFE   E9                     JP   (hl)   
0CFF                             ; create block: parses block e.g. 00bbIC4uLi4g
0CFF                             ; -- block*
0CFF                PARSEBLOCK:      
0CFF   C5                     PUSH   bc   ; return pointer to first { of block
0D00   03                     INC   bc   
0D01   16 01                  LD   d,1   ; nesting: count first parenthesis
0D03                PARSEBLOCK1:      ; Skip to end of definition
0D03   0A                     LD   a,(bc)   ; Get the next character
0D04   03                     INC   bc   ; Point to next character
0D05   FE 21                  CP   " " + 1   ; ignore whitespace
0D07   38 FA                  JR   c,parseBlock1   
0D09   FE 29                  CP   ")"   
0D0B   28 2D                  JR   z,parseBlock4   
0D0D   FE 7D                  CP   "}"   
0D0F   28 29                  JR   z,parseBlock4   
0D11   FE 5D                  CP   "]"   
0D13   28 25                  JR   z,parseBlock4   
0D15   FE 28                  CP   "("   
0D17   28 16                  JR   z,parseBlock2   
0D19   FE 7B                  CP   "{"   
0D1B   28 12                  JR   z,parseBlock2   
0D1D   FE 5B                  CP   "["   
0D1F   28 0E                  JR   z,parseBlock2   
0D21   FE 27                  CP   "'"   
0D23   28 0D                  JR   z,parseBlock3   
0D25   FE 60                  CP   "`"   
0D27   28 09                  JR   z,parseBlock3   
0D29   FE 22                  CP   DQ   
0D2B   28 05                  JR   z,parseBlock3   
0D2D   18 D4                  JR   parseBlock1   
0D2F                PARSEBLOCK2:      
0D2F   14                     INC   d   
0D30   18 D1                  JR   parseBlock1   
0D32                PARSEBLOCK3:      
0D32   3E 80                  LD   a,$80   
0D34   AA                     XOR   d   
0D35   57                     LD   d,a   
0D36   20 CB                  JR   nz,parseBlock1   
0D38   18 03                  JR   parseBlock5   
0D3A                PARSEBLOCK4:      
0D3A   15                     DEC   d   
0D3B   20 C6                  JR   nz,parseBlock1   ; get the next element
0D3D                PARSEBLOCK5:      
0D3D   60 69                  LD   hl,bc   ; hl = IP
0D3F   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D42   B7                     OR   a   ; IP - HEAP
0D43   ED 52                  SBC   hl,de   
0D45   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D47   28 1C                  JR   z,parseBlock6   
0D49   60 69                  LD   hl,bc   ; hl = IP
0D4B   D1                     POP   de   ; de = block*
0D4C   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D50   B7                     OR   a   ; bc = size
0D51   ED 52                  SBC   hl,de   
0D53   44 4D                  LD   bc,hl   
0D55   EB                     EX   de,hl   ; hl = block* de = heap*
0D56   ED 5B F0 23            LD   de,(vHeapPtr)   
0D5A   D5                     PUSH   de   ; return hblock*
0D5B   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D5D   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D61   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D65                PARSEBLOCK6:      
0D65   0B                     DEC   bc   ; balanced, exit
0D66   E1                     POP   hl   ; hl = block*
0D67   E3                     EX   (sp),hl   ; return to caller
0D68   E9                     JP   (hl)   
0D69                             ; create function
0D69                             ; arg_list* block* -- func*
0D69                CREATEFUNC:      
0D69   E1                     POP   hl   ; save retrn address
0D6A   22 08 24               LD   (vTemp3),hl   
0D6D   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D71   E1                     POP   hl   ; hl = block*
0D72   22 06 24               LD   (vTemp2),hl   ; save block*
0D75   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D78   FD 56 05               LD   d,(iy+5)   
0D7B   7B                     LD   a,e   ; if arg_list == null then make a func
0D7C   B2                     OR   d   
0D7D   20 09                  JR   nz,createFunc0   
0D7F   21 00 00               LD   hl,0   ; partial_array = null
0D82   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D86   18 65                  JR   createFunc5   
0D88                CREATEFUNC0:      
0D88   E1                     POP   hl   ; hl = inner_arg_list*
0D89   E5                     PUSH   hl   ; save inner_arg_list
0D8A   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D8E   7E                     LD   a,(hl)   ; compile inner_num_locals
0D8F   4F                     LD   c,a   ; b = inner_num_locals
0D90   12                     LD   (de),a   
0D91   23                     INC   hl   
0D92   13                     INC   de   
0D93   7E                     LD   a,(hl)   ; compile inner_length
0D94   12                     LD   (de),a   
0D95   91                     SUB   c   ; a = inner_num args
0D96   23                     INC   hl   
0D97   13                     INC   de   
0D98   B7                     OR   a   ; compile args if inner_length > 0
0D99   28 05                  JR   z,createFunc1   
0D9B   4F                     LD   c,a   ; bc = a
0D9C   06 00                  LD   b,0   
0D9E   ED B0                  LDIR      
0DA0                CREATEFUNC1:      
0DA0   EB                     EX   de,hl   ; hl = outer_arg_list
0DA1   FD 5E 04               LD   e,(iy+4)   
0DA4   FD 56 05               LD   d,(iy+5)   
0DA7   EB                     EX   de,hl   
0DA8   23                     INC   hl   ; a = outer_length
0DA9   7E                     LD   a,(hl)   
0DAA   23                     INC   hl   
0DAB   B7                     OR   a   
0DAC   28 05                  JR   z,createFunc2   
0DAE   4F                     LD   c,a   
0DAF   06 00                  LD   b,0   
0DB1   ED B0                  LDIR      ; append outer_args
0DB3                CREATEFUNC2:      ; a = outer_length
0DB3   47                     LD   b,a   ; b = a = outer_length
0DB4   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DB7   23                     INC   hl   
0DB8   7E                     LD   a,(hl)   ; add outer_length to new length
0DB9   80                     ADD   a,b   
0DBA   77                     LD   (hl),a   
0DBB   2B                     DEC   hl   
0DBC   78                     LD   a,b   ; save outer_length in a'
0DBD   08                     EX   af,af'   
0DBE   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DBF   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DC0   B7                     OR   a   
0DC1   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DC3   4F                     LD   c,a   ; c = inner_num_locals
0DC4   06 00                  LD   b,0   ; bc = inner_num_locals
0DC6   23                     INC   hl   ; a = inner_length
0DC7   7E                     LD   a,(hl)   
0DC8   91                     SUB   c   ; a = inner_num_args
0DC9   23                     INC   hl   ; hl = inner_arg_chars
0DCA   85                     ADD   a,l   ; hl += a
0DCB   6F                     LD   l,a   
0DCC   3E 00                  LD   a,0   
0DCE   84                     ADD   a,h   
0DCF   67                     LD   h,a   
0DD0   ED B0                  LDIR      ; append inner_locals
0DD2                CREATEFUNC2A:      
0DD2   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DD3   12                     LD   (de),a   ; compile partial_array length field
0DD4   13                     INC   de   
0DD5   AF                     XOR   a   
0DD6   12                     LD   (de),a   
0DD7   13                     INC   de   
0DD8   D5                     PUSH   de   ; push partial_array*
0DD9   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DDA   FD 5E 02               LD   e,(iy+2)   
0DDD   FD 56 03               LD   d,(iy+3)   
0DE0   EB                     EX   de,hl   
0DE1                CREATEFUNC3:      
0DE1   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DE2   4E                     LD   c,(hl)   
0DE3   2B                     DEC   hl   
0DE4   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DE5   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DE6   13                     INC   de   
0DE7   79                     LD   a,c   
0DE8   12                     LD   (de),a   
0DE9   13                     INC   de   
0DEA   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DEC                CREATEFUNC4:      
0DEC   E1                     POP   hl   ; hl = partial_array*
0DED                CREATEFUNC5:      
0DED   C1                     POP   bc   ; bc = new_arg_list*
0DEE   D5                     PUSH   de   ; return new func*
0DEF   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DF0   73                     LD   (hl),e   ; compile partial_array* to func
0DF1   23                     INC   hl   
0DF2   72                     LD   (hl),d   
0DF3   23                     INC   hl   
0DF4   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0DF8   73                     LD   (hl),e   ; compile block* to func
0DF9   23                     INC   hl   
0DFA   72                     LD   (hl),d   
0DFB   23                     INC   hl   
0DFC   71                     LD   (hl),c   ; compile new_arg_list* to func
0DFD   23                     INC   hl   
0DFE   70                     LD   (hl),b   
0DFF   23                     INC   hl   
0E00   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E03   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E07   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E0A   E9                     JP   (hl)   
0E0B                             ;*******************************************************************
0E0B                             ; general routines
0E0B                             ;*******************************************************************
0E0B                             ; followed by a table
0E0B                             ; indexed on the 0-25 lowercase letter
0E0B                             ; db lsb(addr)
0E0B                             ; the final item index 26 matches any other char
0E0B                COMMANDTABLE:      
0E0B   03                     INC   bc   
0E0C   0A                     LD   a,(bc)   
0E0D   FE 7B                  CP   "z"+1   
0E0F   30 0B                  JR   nc,commandTable2   
0E11   D6 61                  SUB   "a"   
0E13   38 07                  JR   c,commandTable2   
0E15                COMMANDTABLE1:      
0E15   E1                     POP   hl   
0E16   85                     ADD   a,l   
0E17   6F                     LD   l,a   
0E18   6E                     LD   l,(hl)   ; must have the same msb as the table
0E19   C3 22 0E               JP   jumpTable1   
0E1C                COMMANDTABLE2:      
0E1C   3E 1A                  LD   a,26   
0E1E   0B                     DEC   bc   
0E1F   18 F4                  JR   commandTable1   
0E21                             ; followed by a table
0E21                             ; db char
0E21                             ; dw addr
0E21                             ; the final item must have char == NUL
0E21                JUMPTABLE:      
0E21   E1                     POP   hl   
0E22                JUMPTABLE1:      
0E22   03                     INC   bc   
0E23                JUMPTABLE2:      
0E23   AF                     XOR   a   
0E24   BE                     CP   (hl)   
0E25   20 03                  JR   nz,jumpTable3   
0E27   0B                     DEC   bc   
0E28   18 09                  JR   jumpTable4   
0E2A                JUMPTABLE3:      
0E2A   0A                     LD   a,(bc)   
0E2B   BE                     CP   (hl)   
0E2C   28 05                  JR   z,jumpTable4   
0E2E   23                     INC   hl   
0E2F   23                     INC   hl   
0E30   23                     INC   hl   
0E31   18 F0                  JR   jumpTable2   
0E33                JUMPTABLE4:      
0E33   23                     INC   hl   
0E34   5E                     LD   e,(hl)   
0E35   23                     INC   hl   
0E36   56                     LD   d,(hl)   
0E37   EB                     EX   de,hl   
0E38   E9                     JP   (hl)   
0E39                PRTSTR0:      
0E39   CD 85 00               CALL   putchar   
0E3C   23                     INC   hl   
0E3D                PRTSTR:      
0E3D   7E                     LD   a,(hl)   
0E3E   B7                     OR   a   
0E3F   20 F8                  JR   nz,prtstr0   
0E41   C9                     RET      
0E42                             ; **************************************************************************
0E42                             ; calculate nesting value
0E42                             ; a is char to be tested,
0E42                             ; e is the nesting value (initially 0)
0E42                             ; e is increased by ( and [
0E42                             ; e is decreased by ) and ]
0E42                             ; e has its bit 7 toggled by `
0E42                             ; limited to 127 levels
0E42                             ; **************************************************************************
0E42                NESTING:      
0E42   FE 22                  CP   DQ   ; quote char
0E44   28 06                  JR   z,nesting0   
0E46   FE 60                  CP   "`"   ; quote char
0E48   28 02                  JR   z,nesting0   
0E4A   18 0A                  JR   nesting1   
0E4C                NESTING0:      
0E4C   CB 7B                  BIT   7,e   
0E4E   28 03                  JR   z,nesting1a   
0E50   CB BB                  RES   7,e   
0E52   C9                     RET      
0E53                NESTING1A:      
0E53   CB FB                  SET   7,e   
0E55   C9                     RET      
0E56                NESTING1:      
0E56   CB 7B                  BIT   7,e   
0E58   C0                     RET   nz   
0E59   FE 7B                  CP   "{"   
0E5B   28 08                  JR   z,nesting2   
0E5D   FE 5B                  CP   "["   
0E5F   28 04                  JR   z,nesting2   
0E61   FE 28                  CP   "("   
0E63   20 02                  JR   nz,nesting3   
0E65                NESTING2:      
0E65   1C                     INC   e   
0E66   C9                     RET      
0E67                NESTING3:      
0E67   FE 7D                  CP   "}"   
0E69   28 07                  JR   z,nesting4   
0E6B   FE 5D                  CP   "]"   
0E6D   28 03                  JR   z,nesting4   
0E6F   FE 29                  CP   ")"   
0E71   C0                     RET   nz   
0E72                NESTING4:      
0E72   1D                     DEC   e   
0E73   C9                     RET      
0E74                PROMPT:      
0E74   CD 84 0E               CALL   printStr   
0E77   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E7C   C9                     RET      
0E7D                CRLF:        
0E7D   CD 84 0E               CALL   printStr   
0E80   0D 0A 00               .CSTR   "\r\n"   
0E83   C9                     RET      
0E84                             ; prints a null teminated string
0E84                             ; the string should be immediately following the call
0E84                PRINTSTR:      
0E84   E3                     EX   (sp),hl   ; swap			
0E85   CD 3D 0E               CALL   prtstr   
0E88   23                     INC   hl   ; inc past NUL
0E89   E3                     EX   (sp),hl   ; put it back	
0E8A   C9                     RET      
0E8B                INIT:        
0E8B   21 F0 01               LD   hl,titleStr   
0E8E   11 0E 24               LD   de,titleBuf   
0E91   06 14                  LD   b,20   
0E93                INIT1:       
0E93   1A                     LD   a,(de)   
0E94   BE                     CP   (hl)   
0E95   20 17                  JR   nz,coldBoot0   
0E97   13                     INC   de   
0E98   23                     INC   hl   
0E99   10 F8                  DJNZ   init1   
0E9B                WARMINIT:      
0E9B   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0E9F   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EA3   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EA7   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EAB   C3 E5 0E               JP   start1   
0EAE                COLDBOOT0:      
0EAE   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EB1   11 0E 24               LD   de,titleBuf   
0EB4   06 14                  LD   b,20   
0EB6   ED B0                  LDIR      
0EB8                COLDINIT:      
0EB8   21 DE 01               LD   hl,isysVars   
0EBB   11 E6 23               LD   de,sysVars   
0EBE   01 12 00               LD   bc,9 * 2   
0EC1   ED B0                  LDIR      
0EC3   21 00 23               LD   hl,vars   ; 52 vars LO HI
0EC6   06 34                  LD   b,26*2   
0EC8   AF                     XOR   a   
0EC9                COLDBOOT1:      
0EC9   77                     LD   (hl),a   
0ECA   23                     INC   hl   
0ECB   10 FC                  DJNZ   coldBoot1   
0ECD   DD 2A EE 23            LD   ix,(vNext)   
0ED1   FD 21 00 21            LD   iy,STACK   
0ED5   C9                     RET      
0ED6                COLDSTART:      
0ED6   31 00 21               LD   sp,STACK   
0ED9   CD AE 0E               CALL   coldBoot0   
0EDC   C3 E5 0E               JP   start1   
0EDF                START:       
0EDF   31 00 21               LD   sp,STACK   ; start Monty
0EE2   CD 8B 0E               CALL   init   ; setups
0EE5                START1:      
0EE5   21 0E 24               LD   hl,titleBuf   
0EE8   CD 3D 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EEB                INTERPRET:      
0EEB   CD 74 0E               CALL   prompt   
0EEE   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EF1   21 00 21               LD   hl,TIB   
0EF4   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EF7                INTERPRET2:      ; calculate nesting
0EF7   1E 00                  LD   e,0   ; initilize nesting value
0EF9   C5                     PUSH   bc   ; save offset into TIB,
0EFA                             ; bc is also the count of chars in TIB
0EFA   21 00 21               LD   hl,TIB   ; hl is start of TIB
0EFD   18 0B                  JR   interpret4   
0EFF                INTERPRET3:      
0EFF   3E 33                  LD   a,"3"   
0F01   CD 85 00               CALL   putchar   
0F04   7E                     LD   a,(hl)   ; a = char in TIB
0F05   23                     INC   hl   ; inc pointer into TIB
0F06   0B                     DEC   bc   ; dec count of chars in TIB
0F07   CD 42 0E               CALL   nesting   ; update nesting value
0F0A                INTERPRET4:      
0F0A   79                     LD   a,c   ; is count zero?
0F0B   B0                     OR   b   
0F0C   20 F1                  JR   nz,interpret3   ; if not loop
0F0E   C1                     POP   bc   ; restore offset into TIB
0F0F                INTERPRET5:      
0F0F   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F12   FE 20                  CP   $20   ; compare to space
0F14   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F16   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F18                             ; ???? NEEDED?
0F18   28 36                  JR   z,interpret8   
0F1A   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F1C   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F1E   FE 05                  CP   CTRL_E   
0F20   CA B1 0F               JP   z,edit_   
0F23   FE 08                  CP   CTRL_H   
0F25   CA A1 0F               JP   z,backSpace_   
0F28   FE 0A                  CP   CTRL_J   
0F2A   CA C7 0F               JP   z,reEdit_   
0F2D                             ; cp CTRL_S
0F2D                             ; jp z,printStack_
0F2D                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F2D                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F2D                             ; DB     lsb(list_)       ; FF  ^L 12
0F2D                             ; DB     lsb(printStack_) ; DLE ^P 16
0F2D                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F2D                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F2D                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F2D                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F2D                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F2D                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F2D                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F2D                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F2D                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F2D                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F2D                INTERPRET5A:      
0F2D                             ; ld (vTIBPtr),bc
0F2D                             ; ld bc,(vTIBPtr)
0F2D   18 C8                  JR   interpret2   
0F2F                INTERPRET6:      
0F2F   21 00 21               LD   hl,TIB   
0F32   09                     ADD   hl,bc   
0F33   77                     LD   (hl),a   ; store the character in textbuf
0F34   03                     INC   bc   
0F35   CD 85 00               CALL   putchar   ; echo character to screen
0F38   CD 42 0E               CALL   nesting   
0F3B   18 D2                  JR   interpret5   ; wait for next character
0F3D                INTERPRET7:      
0F3D   21 00 21               LD   hl,TIB   
0F40   09                     ADD   hl,bc   
0F41   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F43   23                     INC   hl   
0F44   36 0A                  LD   (hl),"\n"   
0F46   23                     INC   hl   
0F47   03                     INC   bc   
0F48   03                     INC   bc   
0F49   CD 7D 0E               CALL   crlf   ; echo character to screen
0F4C   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F4D   B7                     OR   a   
0F4E   20 BF                  JR   nz,interpret5   
0F50                INTERPRET8:      
0F50   21 00 21               LD   hl,TIB   
0F53   09                     ADD   hl,bc   
0F54   22 EA 23               LD   (vTIBPtr),hl   
0F57   01 00 21               LD   bc,TIB   
0F5A   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F5E   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F62   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F66   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F6A   0B                     DEC   bc   
0F6B                NEXT:        
0F6B   03                     INC   bc   ; Increment the IP
0F6C   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F6D   FE 20                  CP   " "   ; whitespace?
0F6F   28 FA                  JR   z,next   ; space? ignore
0F71   38 0D                  JR   c,next1   
0F73   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F75   6F                     LD   l,a   ; index into table
0F76   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F78   6E                     LD   l,(hl)   ; get low jump address
0F79   24                     INC   h   ; page 2
0F7A   FE BA                  CP   "Z" - "!" + 1 + $80   
0F7C   38 01                  JR   c,next0   
0F7E   24                     INC   h   ; page 3
0F7F                NEXT0:       
0F7F   E9                     JP   (hl)   ; Jump to routine
0F80                NEXT1:       
0F80   FE 00                  CP   NUL   ; end of input string?
0F82   28 03                  JR   z,exit   
0F84   C3 EB 0E               JP   interpret   ; no, other whitespace, macros?
0F87                EXIT:        
0F87   03                     INC   bc   
0F88   60 69                  LD   hl,bc   
0F8A   E9                     JP   (hl)   
0F8B                RUN:         
0F8B   C1                     POP   bc   
0F8C   0B                     DEC   bc   
0F8D   DD E9                  JP   (ix)   
0F8F                ERROR:       
0F8F   E5                     PUSH   hl   
0F90   CD 8B 0F               CALL   run   
0F93   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0F9E   C3 EB 0E               JP   interpret   
0FA1                BACKSPACE_:      
0FA1   79                     LD   a,c   
0FA2   B0                     OR   b   
0FA3   CA F7 0E               JP   z,interpret2   
0FA6   0B                     DEC   bc   
0FA7   CD 84 0E               CALL   printStr   
0FAA   08 20 08 00            .CSTR   "\b \b"   
0FAE   C3 F7 0E               JP   interpret2   
0FB1                             ; edit
0FB1                EDIT_:       
0FB1   CD 8B 0F               CALL   run   
0FB4   60 76 61 72 3F 60 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?` /k/ad .h",0   
0FC4   C3 EB 0E               JP   interpret   
0FC7                REEDIT_:      
0FC7   C3 EB 0E               JP   interpret   
0FCA                PRINTSTACK_:      
0FCA   CD 8B 0F               CALL   run   
0FCD   2F 70 6B 00            .CSTR   "/pk"   
0FD1   C3 EB 0E               JP   interpret   
0FD4                             ; editDef:
0FD4                             ;     pop hl                      ; pop ret address
0FD4                             ;     ex (sp),hl                  ; swap with TOS
0FD4                             ;     push hl                     ; dup TOS
0FD4                             ;     ld a,l                      ; a = ident
0FD4                             ;     ld de,TIB                   ; de = start of TIB
0FD4                             ;     ld (vTIBPtr),de             ; update TIB*
0FD4                             ;     push ix                     ; save NEXT
0FD4                             ;     ld ix,editDef0              ; NEXT = editDef0
0FD4                             ;     jp lookupRef                ; convert letter into address
0FD4                             ; editDef0:
0FD4                             ;     ld e,(hl)                   ; de = (hl++)
0FD4                             ;     inc hl
0FD4                             ;     ld d,(hl)
0FD4                             ;     ld a,d                      ; de == 0 ?
0FD4                             ;     or e
0FD4                             ;     jr z,editDef4
0FD4                             ;     ld ix,editDef3              ; NEXT = editDef3
0FD4                             ;     ex de,hl
0FD4                             ;     ld a,(hl)
0FD4                             ;     cp "{"
0FD4                             ;     jr nz,editDef1
0FD4                             ;     jp editBlock0               ; convert letter into address
0FD4                             ; editDef1:
0FD4                             ;     cp "("
0FD4                             ;     jr nz,editDef2
0FD4                             ;     jp editBlock0               ; convert letter into address
0FD4                             ; editDef2:
0FD4                             ;     jp editFunc
0FD4                             ; editDef3:
0FD4                             ;     ld a," "                    ; write assign
0FD4                             ;     call writeChar
0FD4                             ;     pop hl                      ; a = ident
0FD4                             ;     ld a,l
0FD4                             ;     call writeChar
0FD4                             ;     ld a,"="                    ; write assign
0FD4                             ;     call writeChar
0FD4                             ;     ld ix,editDef4              ; NEXT = editDef4
0FD4                             ;     jp printTIB
0FD4                             ; editDef4:
0FD4                             ;     pop ix                      ; restore NEXT
0FD4                             ;     jp (ix)
0FD4                             ; writeChar:
0FD4                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FD4                             ;     ld (de),a                   ; write ident
0FD4                             ;     inc de
0FD4                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FD4                             ;     ret
0FD4                             ; ; printTIB
0FD4                             ; printTIB:
0FD4                             ;     ld hl,(vTIBPtr)
0FD4                             ;     ld de,TIB
0FD4                             ;     or a
0FD4                             ;     sbc hl,de
0FD4                             ;     jp printTIB2
0FD4                             ; printTIB1:
0FD4                             ;     ld a,(de)
0FD4                             ;     call putchar
0FD4                             ; printTIB2:
0FD4                             ;     ld a,l
0FD4                             ;     or h
0FD4                             ;     jr nz,printTIB1
0FD4                             ;     jp (ix)
0FD4                             ; editBlock:
0FD4                             ;     pop hl                      ; hl = block*
0FD4                             ; editBlock0:
0FD4                             ;     push ix                     ; save next
0FD4                             ;     push hl                     ; push block*
0FD4                             ;     push hl                     ; push block*
0FD4                             ;     ld ix,(editBlock2)
0FD4                             ;     jp blockLength
0FD4                             ; editBlock1:
0FD4                             ;     pop hl                      ; bc = length, (sp) = IP
0FD4                             ;     pop de                      ; de = block*
0FD4                             ;     ld a,l
0FD4                             ;     or h
0FD4                             ;     jr z,editBlock2
0FD4                             ;     push bc
0FD4                             ;     ld bc,hl
0FD4                             ;     ex de,hl                    ; hl = block*
0FD4                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FD4                             ;     ldir                        ; copy block to TIB
0FD4                             ;     ld (vTIBPtr),de              ; save TIB*
0FD4                             ;     pop bc
0FD4                             ; editBlock2:
0FD4                             ;     pop ix                      ; restore next
0FD4                             ;     jp (ix)
0FD4                             ; editFunc:
0FD4                             ;     jp (ix)
0FD4                             ; editArray:
0FD4                             ;     jp (ix)
0FD4                             ; editparseArgs:
0FD4                             ;     jp (ix)
0FD4                             ; ; blockLength
0FD4                             ; ; addr1 -- length
0FD4                             ; blockLength:
0FD4                             ;     pop hl                      ; block*
0FD4                             ;     push hl                     ; save block*
0FD4                             ;     inc hl                      ; skip first char
0FD4                             ;     ld d,1                      ; increase nesting
0FD4                             ; blockLength1:                   ; Skip to end of definition
0FD4                             ;     ld a,(hl)                   ; Get the next character
0FD4                             ;     inc hl                      ; Point to next character
0FD4                             ;     cp " " + 1                  ; ignore whitespace
0FD4                             ;     jr c,blockLength1
0FD4                             ;     cp ")"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "}"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "]"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "("
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "{"
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "["
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "'"
0FD4                             ;     jr z,blockLength3
0FD4                             ;     cp "`"
0FD4                             ;     jr z,blockLength3
0FD4                             ;     cp DQ
0FD4                             ;     jr z,blockLength3
0FD4                             ;     jr blockLength1
0FD4                             ; blockLength2:
0FD4                             ;     inc d
0FD4                             ;     jr blockLength1
0FD4                             ; blockLength4:
0FD4                             ;     dec d
0FD4                             ;     jr nz, blockLength1         ; get the next element
0FD4                             ; blockLength3:
0FD4                             ;     ld a,$80
0FD4                             ;     xor d
0FD4                             ;     ld d,a
0FD4                             ;     jr nz, blockLength1
0FD4                             ;     pop hl                      ; hl = block*
0FD4                             ;     or a
0FD4                             ;     sbc hl,de
0FD4                             ;     push hl
0FD4                             ;     jp (ix)
0FD4                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FD4                             ; \a start of stack \#3 depth \b base \$ prompt
0FD4                             ; DW dStack               ; a vS0 start of datastack			
0FD4                             ; DW FALSE                ; b vBase16
0FD4                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FD4                             ; DW 0                    ; d
0FD4                             ; DW 65                   ; e vLastDef "A" last command u defined
0FD4                             ; DW 0                    ; f
0FD4                             ; DW page6                ; g 256 bytes limits
0FD4                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FD4                F1:          
0FD4                F2:          
0FD4                F3:          
0FD4                F4:          
0FD4                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 2328 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2334 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
BANG_:              0204 DEFINED AT LINE 174 IN MAIN.asm
BANG:               0204 DEFINED AT LINE 175 IN MAIN.asm
NOT:                020F DEFINED AT LINE 183 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
EQ_:                0215 DEFINED AT LINE 187 IN MAIN.asm
EQ:                 0215 DEFINED AT LINE 188 IN MAIN.asm
EQ0:                021F DEFINED AT LINE 195 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
EQ1:                0220 DEFINED AT LINE 197 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
GT_:                0224 DEFINED AT LINE 201 IN MAIN.asm
GT:                 0224 DEFINED AT LINE 202 IN MAIN.asm
LT_:                022F DEFINED AT LINE 210 IN MAIN.asm
LT:                 022F DEFINED AT LINE 211 IN MAIN.asm
LT1:                0238 DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
DQUOTE_:            0241 DEFINED AT LINE 224 IN MAIN.asm
HASH_:              0244 DEFINED AT LINE 229 IN MAIN.asm
HASH:               0244 DEFINED AT LINE 230 IN MAIN.asm
ARRAYINDEX:         0244 DEFINED AT LINE 231 IN MAIN.asm
ARRAYINDEX0:        024C DEFINED AT LINE 237 IN MAIN.asm
ARRAYINDEX1:        024D DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ARRAYINDEX2:        0259 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
DOLLAR_:            025C DEFINED AT LINE 252 IN MAIN.asm
PERCENT_:           025F DEFINED AT LINE 255 IN MAIN.asm
AMPER_:             0262 DEFINED AT LINE 260 IN MAIN.asm
AMPER:              0262 DEFINED AT LINE 261 IN MAIN.asm
AND:                0262 DEFINED AT LINE 262 IN MAIN.asm
AND1:               0269 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
QUOTE_:             026D DEFINED AT LINE 275 IN MAIN.asm
LPAREN_:            0270 DEFINED AT LINE 280 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 284 IN MAIN.asm
RPAREN:             0273 DEFINED AT LINE 285 IN MAIN.asm
STAR_:              027B DEFINED AT LINE 290 IN MAIN.asm
STAR:               027B DEFINED AT LINE 291 IN MAIN.asm
MUL:                027B DEFINED AT LINE 292 IN MAIN.asm
MUL2:               027D DEFINED AT LINE 295 IN MAIN.asm
MUL3:               0285 DEFINED AT LINE 300 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
PLUS_:              0297 DEFINED AT LINE 315 IN MAIN.asm
PLUS:               0297 DEFINED AT LINE 316 IN MAIN.asm
ADD:                0297 DEFINED AT LINE 317 IN MAIN.asm
ADD1:               02A2 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
ADD3:               02A6 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
ADD4:               02B0 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
COMMA_:             02B3 DEFINED AT LINE 341 IN MAIN.asm
MINUS_:             02B6 DEFINED AT LINE 346 IN MAIN.asm
MINUS:              02B6 DEFINED AT LINE 347 IN MAIN.asm
SUB:                02C2 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
SUB1:               02CC DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
DOT_:               02D4 DEFINED AT LINE 370 IN MAIN.asm
SLASH_:             02D7 DEFINED AT LINE 373 IN MAIN.asm
NUM_:               02DA DEFINED AT LINE 376 IN MAIN.asm
COLON_:             02DD DEFINED AT LINE 379 IN MAIN.asm
COLON:              02E0 DEFINED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
DEFINESTART:        02ED DEFINED AT LINE 389 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
SEMICOLON_:         02F6 DEFINED AT LINE 395 IN MAIN.asm
QUESTION_:          02F9 DEFINED AT LINE 398 IN MAIN.asm
UPCASE_:            02FC DEFINED AT LINE 402 IN MAIN.asm
UPCASE:             02FC DEFINED AT LINE 403 IN MAIN.asm
LOWCASE_:           0301 DEFINED AT LINE 411 IN MAIN.asm
LOWCASE:            0301 DEFINED AT LINE 412 IN MAIN.asm
IDENT1:             0306 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
LBRACK_:            0313 DEFINED AT LINE 428 IN MAIN.asm
LBRACK:             0313 DEFINED AT LINE 429 IN MAIN.asm
ARRAYSTART:         0313 DEFINED AT LINE 430 IN MAIN.asm
BACKSLASH_:         032F DEFINED AT LINE 445 IN MAIN.asm
BACKSLASH:          032F DEFINED AT LINE 446 IN MAIN.asm
LAMBDA:             032F DEFINED AT LINE 447 IN MAIN.asm
LAMBDA1:            0334 DEFINED AT LINE 450 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
LAMBDA2:            0344 DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
RBRACK_:            0350 DEFINED AT LINE 467 IN MAIN.asm
RBRACK:             0350 DEFINED AT LINE 468 IN MAIN.asm
ARRAYEND:           0350 DEFINED AT LINE 469 IN MAIN.asm
ARRAYEND1:          036C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
ARRAYEND2:          037C DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
ARRAYEND3:          0381 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
CARET_:             03A0 DEFINED AT LINE 521 IN MAIN.asm
CARET:              03A0 DEFINED AT LINE 525 IN MAIN.asm
GO:                 03A0 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A1 DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
GO2:                03A7 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
UNDERSCORE_:        03B6 DEFINED AT LINE 542 IN MAIN.asm
GRAVE_:             03B9 DEFINED AT LINE 545 IN MAIN.asm
GRAVE:              03B9 DEFINED AT LINE 546 IN MAIN.asm
PRINTLITERAL:       03B9 DEFINED AT LINE 547 IN MAIN.asm
PRINTLITERAL0:      03C0 DEFINED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
PRINTLITERAL1:      03C3 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
LBRACE_:            03CF DEFINED AT LINE 562 IN MAIN.asm
LBRACE:             03CF DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
PIPE_:              03D4 DEFINED AT LINE 569 IN MAIN.asm
PIPE:               03D4 DEFINED AT LINE 570 IN MAIN.asm
OR:                 03D4 DEFINED AT LINE 571 IN MAIN.asm
RBRACE_:            03DE DEFINED AT LINE 581 IN MAIN.asm
TILDE_:             03E1 DEFINED AT LINE 585 IN MAIN.asm
TILDE:              03E1 DEFINED AT LINE 586 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 587 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 601 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
DOTSTRING0:         0425 DEFINED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
DOTSTRING1:         0428 DEFINED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
DOTDEC:             043E DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
DOTDECX:            044C DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
DOTDEC0:            045B DEFINED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
DOTDEC1:            046B DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
DOTDEC2:            048B DEFINED AT LINE 698 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
DOTDEC3:            048D DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
DOTDEC4:            049D DEFINED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
DOTDEC5:            049E DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
DOTHEX:             04A4 DEFINED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
DOTHEX0:            04B7 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
DOTHEX1:            04C6 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
DOTHEX2:            04CF DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 768 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 804 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 818 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 828 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 834 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 854 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 861 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 867 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 871 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 877 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 881 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 886 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 892 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 902 IN MAIN.asm
TRUE_:              05A4 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_V_:         05A7 DEFINED AT LINE 920 IN MAIN.asm
COMMAND_W_:         05B6 DEFINED AT LINE 932 IN MAIN.asm
XOR_:               05BC DEFINED AT LINE 938 IN MAIN.asm
COMMAND_NOP_:       05BF DEFINED AT LINE 943 IN MAIN.asm
COMMAND_DEFAULT_:   05C2 DEFINED AT LINE 948 IN MAIN.asm
NOP:                05C5 DEFINED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
DIV:                05C7 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
ABSOLUTE:           05D8 DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
ADDROF:             05E5 DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ADDROF1:            05F9 DEFINED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
ADDROF2:            0604 DEFINED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
ARRAYLENGTH:        0606 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       060C DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
ARRAYSIZE:          060F DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
PERFORMM_1475S1026: 0616 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0623 DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
BREAK1:             062A DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
BYTEMODE:           063D DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
BYTEMODE1:          0640 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
COMMENT:            0645 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
CONSTHEAPSTART:     064E DEFINED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
CONSTTIBSTART:      0654 DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
DECBASE:            065A DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
DECBASE1:           065D DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
ERROR1:             0662 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
HEXBASE:            0668 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
INPUT:              066E DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
KEY:                0679 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
OUTPUT:             0682 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
QUIT:               068B DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
QUIT1:              0692 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
RECUR:              0695 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
REMAIN:             069B DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
STRINGBEGIN:        06A1 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
STRINGEND:          06A9 DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
STRINGEND1:         06D0 DEFINED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
STRINGLENGTH:       06D8 DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06DE DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
STRINGLENGTH2:      06E0 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
STRINGLENGTH3:      06E4 DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
STRINGSIZE:         06E7 DEFINED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
PERFORMM_1620S1190: 06EE DEFINED AT LINE 45
                    > USED AT LINE 43
VARHEAPPTR:         06F3 DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
VARTIBPTR:          06FC DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
VARIABLE:           0705 DEFINED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
CONSTANT:           0708 DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
WORDMODE:           070B DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
XOR:                0711 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
XOR1:               0712 DEFINED AT LINE 1218 IN MAIN.asm
RANGESRC:           071C DEFINED AT LINE 32
                    > USED AT LINE 898 IN MAIN.asm
RANGESRCM_1658S1235: 072B DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0798 DEFINED AT LINE 32
                    > USED AT LINE 810 IN MAIN.asm
ARRAYITERM_1677S1255: 07A5 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0819 DEFINED AT LINE 32
                    > USED AT LINE 908 IN MAIN.asm
STRINGITERM_1696S1275: 0826 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08A1 DEFINED AT LINE 32
                    > USED AT LINE 873 IN MAIN.asm
MAPM_1716S1297:     08AE DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             08E3 DEFINED AT LINE 32
                    > USED AT LINE 842 IN MAIN.asm
FILTERM_1730S1312:  08F1 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0941 DEFINED AT LINE 32
                    > USED AT LINE 836 IN MAIN.asm
FOLDM_1749S1332:    0950 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0993 DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
FOREACHM_1763S1347: 09A1 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            09DF DEFINED AT LINE 32
                    > USED AT LINE 840 IN MAIN.asm
FUNCSRCM_1777S1362: 09EB DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A18 DEFINED AT LINE 32
                    > USED AT LINE 604 IN MAIN.asm
PRINTARRAYM_1787S1373: 0A26 DEFINED AT LINE 39
                    > USED AT LINE 35
AT_:                0A60 DEFINED AT LINE 1383 IN MAIN.asm
AT:                 0A60 DEFINED AT LINE 1384 IN MAIN.asm
ADDR:               0A60 DEFINED AT LINE 1385 IN MAIN.asm
DOLLAR:             0A6A DEFINED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
HEXNUM:             0A6A DEFINED AT LINE 1392 IN MAIN.asm
HEXNUM1:            0A6D DEFINED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
HEXNUM2:            0A75 DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
QUESTION:           0A87 DEFINED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
IF:                 0A87 DEFINED AT LINE 1417 IN MAIN.asm
IFTE:               0A93 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
IFTE1:              0A94 DEFINED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
NUM:                0AA0 DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
NUM0:               0AA9 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
NUM1:               0AAA DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
NUM2:               0AC2 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
NUM3:               0ACD DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
RBRACE:             0AD0 DEFINED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKEND:           0AD0 DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
BLOCKEND1:          0B02 DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
BLOCKEND2:          0B0E DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
BLOCKEND3:          0B20 DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
BLOCKEND4:          0B34 DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
GOBLOCK:            0B3D DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
GOBLOCK2:           0B62 DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
GOBLOCK3:           0B6C DEFINED AT LINE 1561 IN MAIN.asm
GOFUNC:             0B70 DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
GOFUNC1:            0B89 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
GOFUNC2:            0B8F DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
GOFUNC3:            0B9A DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
GOFUNC4:            0BB2 DEFINED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
GOFUNC5:            0BB5 DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
GOFUNC6:            0BB8 DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
GOFUNC7:            0BBB DEFINED AT LINE 1624 IN MAIN.asm
GOFUNC8:            0BBF DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
ASSIGN:             0BCA DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
ASSIGN0:            0BCC DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 339 IN MAIN.asm
                    > USED AT LINE 361 IN MAIN.asm
ASSIGN1:            0BD0 DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
ASSIGN2:            0BD9 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
SEMICOLON:          0BDB DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
DEFINEEND:          0BDB DEFINED AT LINE 1657 IN MAIN.asm
DEFINEEND1:         0BED DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
EQUALS:             0BEF DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
NOTEQUALS:          0BF6 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
LESSTHANEQ:         0BFD DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
LESSTHAN:           0C02 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
LESSTHAN1:          0C07 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
TRUE1:              0C0A DEFINED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
NULL1:              0C10 DEFINED AT LINE 1704 IN MAIN.asm
FALSE1:             0C10 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
SHIFTLEFT:          0C16 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
SHIFTLEFT1:         0C1E DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
SHIFTLEFT2:         0C1F DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
SHIFTRIGHT:         0C26 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
SHIFTRIGHT1:        0C2E DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
SHIFTRIGHT2:        0C32 DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
QUOTE:              0C39 DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
DQUOTE:             0C39 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
STRING:             0C39 DEFINED AT LINE 1749 IN MAIN.asm
STRING1:            0C42 DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
STRING2:            0C45 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
STRING3:            0C4B DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
PERCENT:            0C53 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
ARG:                0C53 DEFINED AT LINE 1776 IN MAIN.asm
ARG0:               0C6F DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
ARG0A:              0C78 DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
ARG1:               0C7D DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
ARG1A:              0C85 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
DOTNEXT:            0C88 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DOTNEXT1:           0C90 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
DOTNEXT2:           0C9C DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
DOTNEXT3:           0CA2 DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
UNDERSCORE:         0CAE DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 543 IN MAIN.asm
COMMA:              0CAE DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
DIVIDE:             0CB0 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
DIVIDE1:            0CB5 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
DIVIDE2:            0CC2 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
DIVIDE3:            0CC3 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
PARSEARGS:          0CC9 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 449 IN MAIN.asm
PARSEARGS1:         0CD3 DEFINED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
PARSEARGS1A:        0CDB DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
PARSEARGS2:         0CE3 DEFINED AT LINE 1887 IN MAIN.asm
PARSEARGS3:         0CEB DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
PARSEARGS4:         0CEE DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
PARSEARGS5:         0CF4 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
PARSEBLOCK:         0CFF DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
PARSEBLOCK1:        0D03 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
PARSEBLOCK2:        0D2F DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
PARSEBLOCK3:        0D32 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
PARSEBLOCK4:        0D3A DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
PARSEBLOCK5:        0D3D DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
PARSEBLOCK6:        0D65 DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
CREATEFUNC:         0D69 DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 461 IN MAIN.asm
CREATEFUNC0:        0D88 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
CREATEFUNC1:        0DA0 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
CREATEFUNC2:        0DB3 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
CREATEFUNC2A:       0DD2 DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
CREATEFUNC3:        0DE1 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
CREATEFUNC4:        0DEC DEFINED AT LINE 2082 IN MAIN.asm
CREATEFUNC5:        0DED DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
COMMANDTABLE:       0E0B DEFINED AT LINE 2114 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
COMMANDTABLE1:      0E15 DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
COMMANDTABLE2:      0E1C DEFINED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
JUMPTABLE:          0E21 DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
JUMPTABLE1:         0E22 DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
JUMPTABLE2:         0E23 DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
JUMPTABLE3:         0E2A DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
JUMPTABLE4:         0E33 DEFINED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
PRTSTR0:            0E39 DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
PRTSTR:             0E3D DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
NESTING:            0E42 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
NESTING0:           0E4C DEFINED AT LINE 2187 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
NESTING1A:          0E53 DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
NESTING1:           0E56 DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
NESTING2:           0E65 DEFINED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
NESTING3:           0E67 DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
NESTING4:           0E72 DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
PROMPT:             0E74 DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
CRLF:               0E7D DEFINED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
PRINTSTR:           0E84 DEFINED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
INIT:               0E8B DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
INIT1:              0E93 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
WARMINIT:           0E9B DEFINED AT LINE 2249 IN MAIN.asm
COLDBOOT0:          0EAE DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
COLDINIT:           0EB8 DEFINED AT LINE 2262 IN MAIN.asm
COLDBOOT1:          0EC9 DEFINED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
COLDSTART:          0ED6 DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
START:              0EDF DEFINED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EE5 DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
INTERPRET:          0EEB DEFINED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
INTERPRET2:         0EF7 DEFINED AT LINE 2299 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
INTERPRET3:         0EFF DEFINED AT LINE 2307 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
INTERPRET4:         0F0A DEFINED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
INTERPRET5:         0F0F DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
INTERPRET5A:        0F2D DEFINED AT LINE 2360 IN MAIN.asm
INTERPRET6:         0F2F DEFINED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
INTERPRET7:         0F3D DEFINED AT LINE 2375 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
INTERPRET8:         0F50 DEFINED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2330 IN MAIN.asm
NEXT:               0F6B DEFINED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
NEXT0:              0F7F DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
NEXT1:              0F80 DEFINED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 2408 IN MAIN.asm
EXIT:               0F87 DEFINED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
RUN:                0F8B DEFINED AT LINE 2428 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2452 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
ERROR:              0F8F DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
BACKSPACE_:         0FA1 DEFINED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
EDIT_:              0FB1 DEFINED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
REEDIT_:            0FC7 DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
PRINTSTACK_:        0FCA DEFINED AT LINE 2459 IN MAIN.asm
F1:                 0FD4 DEFINED AT LINE 10
                    > USED AT LINE 844 IN MAIN.asm
F2:                 0FD4 DEFINED AT LINE 11
                    > USED AT LINE 846 IN MAIN.asm
F3:                 0FD4 DEFINED AT LINE 12
                    > USED AT LINE 848 IN MAIN.asm
F4:                 0FD4 DEFINED AT LINE 13
                    > USED AT LINE 850 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2264 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2276 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 241 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2397 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2252 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
