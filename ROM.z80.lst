0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0D               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0E               LD   (RST08),HL   
0094   22 D2 0E               LD   (RST10),HL   
0097   22 D4 0E               LD   (RST18),HL   
009A   22 D6 0E               LD   (RST20),HL   
009D   22 D8 0E               LD   (RST28),HL   
00A0   22 DA 0E               LD   (RST30),HL   
00A3   22 DE 0E               LD   (INTVEC),HL   
00A6   22 E0 0E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 0D               LD   sp,STACK   
00C6   CD 7E 0B               CALL   init   
00C9   C3 9C 0B               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 10                  DW   TIB   ; vTIBPtr pointer into TIB
0184   00 11                  DW   BUF   ; vBUFPtr pointer into BUF
0186   22 0C                  DW   next   ; nNext
0188   00 13                  DW   HEAP   ; vHeapPtr \h start of the free mem
018A                          ALIGN   $100   
0200                OPCODESBASE:      
0200                             ; ctrlCodes:
0200                             ;     DB 0               ; ^@  0 NUL
0200                             ;     DB 0               ; ^A  1 SOH
0200                             ;     DB 0               ; ^B  2 STX
0200                             ;     DB 0               ; ^C  3 ETX
0200                             ;     DB 0               ; ^D  4 EOT
0200                             ;     DB 0               ; ^E  5 ENQ
0200                             ;     DB 0               ; ^F  6 ACK
0200                             ;     DB 0               ; ^G  7 BEL
0200                             ;     DB 0               ; ^H  8 BS
0200                             ;     DB 0               ; ^I  9 TAB
0200                             ;     DB 0               ; ^J 10 LF
0200                             ;     DB 0               ; ^K 11 VT
0200                             ;     DB 0               ; ^L 12 FF
0200                             ;     DB 0               ; ^M 13 CR
0200                             ;     DB 0               ; ^N 14 SO
0200                             ;     DB 0               ; ^O 15 SI
0200                             ;     DB 0               ; ^P 16 DLE
0200                             ;     DB 0               ; ^Q 17 DC1
0200                             ;     DB 0               ; ^R 18 DC2
0200                             ;     DB 0               ; ^S 19 DC3
0200                             ;     DB 0               ; ^T 20 DC4
0200                             ;     DB 0               ; ^U 21 NAK
0200                             ;     DB 0               ; ^V 22 SYN
0200                             ;     DB 0               ; ^W 23 ETB
0200                             ;     DB 0               ; ^X 24 CAN
0200                             ;     DB 0               ; ^Y 25 EM
0200                             ;     DB 0               ; ^Z 26 SUB
0200                             ;     DB 0               ; ^[ 27 ESC
0200                             ;     DB 0               ; ^\ 28 FS
0200                             ;     DB 0               ; ^] 29 GS
0200                             ;     DB 0               ; ^^ 30 RS
0200                             ;     DB 0               ; ^_ 31 US
0200                OPCODES:      ; still available ~ `
0200   85                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   6D                     DB   lsb(lparen_)   ; (
0209   87                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   82                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   70                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   85                     DB   lsb(nop_)   ; ~
025F   85                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6B 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A5 05               JP   backslash   
0318                LBRACE_:      
0318   C3 CB 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 34 05               JP   rbrace   
031E                TICK_:       
031E   C3 90 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 BF 07               JP   semicolon   
0324                DOT_:        
0324   C3 D4 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 B1 07               JP   underscore   
032A                COLON_:      
032A   C3 94 04               JP   colon   
032D                UPCASE_:      
032D   C3 35 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 3A 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 4C 07               JP   question   
0336                STAR_:       
0336   C3 65 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 81 07               JP   num   
0341                HASH_:       
0341   C3 18 07               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 76 06               JP   caret   
034A                COMMA_:      
034A   C3 A7 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 FE 07               JP   dblquote   
0350                MINUS_:      
0350   C3 26 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 83 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 52 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA EB 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 73 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA DB 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 5A 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 5F 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B6 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 B7 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; implementations
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 85 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B F0 0E            LD   de,(vPointer)   
03A0   21 F0 0E               LD   hl,vPointer   
03A3   C3 A8 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 F0 0E               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRBEGIN:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARREND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FC 0E            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = array[-2]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437                ARREND1:      
0437   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043A   77                     LD   (hl),a   ; write lsb of array item
043B   23                     INC   hl   ; move to msb of array item
043C   3A E6 0E               LD   a,(vDataWidth)   ; vDataWidth=1?
043F   3D                     DEC   a   
0440   28 05                  JR   z,arrEnd2   
0442   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0445   77                     LD   (hl),a   ; write msb of array item
0446   23                     INC   hl   ; move to next word in array
0447                ARREND2:      
0447   FD 2B                  DEC   iy   ; move to next word on stack
0449   FD 2B                  DEC   iy   
044B   0B                     DEC   bc   ; dec items count
044C   79                     LD   a,c   ; if not zero loop
044D   B0                     OR   b   
044E   20 E7                  JR   nz,arrEnd1   
0450   EB                     EX   de,hl   ; de = end of array, hl = BP
0451   F9                     LD   sp,hl   ; sp = BP
0452   E1                     POP   hl   ; de = end of array, hl = old BP
0453   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0454   FD 62                  LD   iyh,d   
0456   FD 6B                  LD   iyl,e   
0458   D1                     POP   de   ; pop arg_list (discard)
0459   D1                     POP   de   ; pop first_arg* (discard)
045A   D1                     POP   de   ; pop IP (discard)
045B   ED 5B EE 0E            LD   de,(vHeapPtr)   ; de = array[-2]
045F   13                     INC   de   ; de = array[0]
0460   13                     INC   de   
0461   D5                     PUSH   de   ; return array[0]
0462   22 EE 0E               LD   (vHeapPtr),hl   ; move heap* to end of array
0465   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore IP
0469   DD E9                  JP   (ix)   
046B                             ; index of an array, based on vDataWidth
046B                             ; array num -- value    ; also sets vPointer to address
046B                ARRINDEX:      
046B   E1                     POP   hl   ; hl = index
046C   D1                     POP   de   ; de = array
046D   3A E6 0E               LD   a,(vDataWidth)   ; a = data width
0470   3D                     DEC   a   
0471   28 01                  JR   z,arrIndex1   
0473                ARRINDEX0:      
0473   29                     ADD   hl,hl   ; if data width = 2 then double
0474                ARRINDEX1:      
0474   19                     ADD   hl,de   ; add addr
0475   22 F0 0E               LD   (vPointer),hl   ; store address in setter
0478   16 00                  LD   d,0   
047A   5E                     LD   e,(hl)   
047B   B7                     OR   a   ; check data width again
047C   28 02                  JR   z,arrIndex2   
047E   23                     INC   hl   
047F   56                     LD   d,(hl)   
0480                ARRINDEX2:      
0480   D5                     PUSH   de   
0481   DD E9                  JP   (ix)   
0483                             ; value _oldValue --            ; uses address in vPointer
0483                ASSIGN:      
0483   E1                     POP   hl   ; discard last accessed value
0484   E1                     POP   hl   ; hl = new value
0485                ASSIGN0:      
0485   EB                     EX   de,hl   ; de = new value
0486                ASSIGNX:      
0486   2A F0 0E               LD   hl,(vPointer)   
0489   73                     LD   (hl),e   
048A   3A E6 0E               LD   a,(vDataWidth)   
048D   3D                     DEC   a   ; is it byte?
048E   28 02                  JR   z,assign1   
0490   23                     INC   hl   
0491   72                     LD   (hl),d   
0492                ASSIGN1:      
0492   DD E9                  JP   (ix)   
0494                             ; arg_list - parses input (ab:c)
0494                             ; names after the : represent uninitialised locals
0494                             ; return values are the state of the stack after the block ends
0494                COLON:       
0494                ARGLIST:      
0494   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0497   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = heap*
049A   23                     INC   hl   ; skip length field to start
049B   23                     INC   hl   
049C   E5                     PUSH   hl   ; save start of arg_list
049D   03                     INC   bc   ; point to next char
049E                ARGLIST1:      
049E   0A                     LD   a,(bc)   
049F   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A1   20 03                  JR   nz,arglist1a   
04A3   14                     INC   d   ; non zero value local count acts as flag
04A4   18 10                  JR   arglist3   
04A6                ARGLIST1A:      
04A6   FE 41                  CP   "A"   ; < "A" terminates arg_list
04A8   38 0F                  JR   c,arglist4   
04AA   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AC   30 0B                  JR   nc,arglist4   
04AE                ARGLIST2:      
04AE   77                     LD   (hl),a   
04AF   23                     INC   hl   
04B0   1C                     INC   e   ; increase arg count
04B1   AF                     XOR   a   
04B2   B2                     OR   d   
04B3   28 01                  JR   z,arglist3   
04B5   14                     INC   d   ; if d > 0 increase local count
04B6                ARGLIST3:      
04B6   03                     INC   bc   ; point to next char
04B7   18 E5                  JR   arglist1   
04B9                ARGLIST4:      
04B9   0B                     DEC   bc   
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist5   
04BE   15                     DEC   d   ; remove initial inc
04BF                ARGLIST5:      
04BF   23                     INC   hl   
04C0   22 EE 0E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C3   E1                     POP   hl   ; hl = start of arg_list
04C4   E5                     PUSH   hl   ; return start of arg_list
04C5   2B                     DEC   hl   ; write number of locals at start - 1
04C6   72                     LD   (hl),d   
04C7   2B                     DEC   hl   ; write number of args + locals at start - 2
04C8   73                     LD   (hl),e   
04C9   DD E9                  JP   (ix)   
04CB                LBRACE:      
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   DQUOTE   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 13               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 FC 0E            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EE 0E            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EE 0E            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                RBRACE:      
0534                BLOCKEND:      
0534   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0537   FD 56 01               LD   d,(iy+1)   
053A   ED 53 FC 0E            LD   (vTemp1),de   
053E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0541   FD 56 07               LD   d,(iy+7)   
0544   ED 53 FE 0E            LD   (vTemp2),de   
0548   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054B   FD 56 03               LD   d,(iy+3)   
054E   EB                     EX   de,hl   
054F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0552   FD 56 01               LD   d,(iy+1)   
0555   13                     INC   de   ; for carry flag <=
0556   B7                     OR   a   
0557   ED 52                  SBC   hl,de   
0559   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055D   FD 5D                  LD   e,iyl   
055F   21 08 00               LD   hl,8   
0562   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0563   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0564   18 0C                  JR   blockEnd2   
0566                BLOCKEND1:      ; same scope
0566   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0569   FD 56 03               LD   d,(iy+3)   
056C   EB                     EX   de,hl   
056D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056F   FD 5D                  LD   e,iyl   
0571   EB                     EX   de,hl   
0572                BLOCKEND2:      
0572   44 4D                  LD   bc,hl   ; bc = hl = BP
0574   B7                     OR   a   ; hl = BP - SP = count
0575   ED 72                  SBC   hl,sp   
0577   7D                     LD   a,l   
0578   B4                     OR   h   
0579   28 09                  JR   z,blockEnd3   
057B   C5                     PUSH   bc   ; bc = count, hl = BP
057C   44 4D                  LD   bc,hl   
057E   E1                     POP   hl   
057F   2B                     DEC   hl   ; hl = BP-1
0580   1B                     DEC   de   ; de = args*-1
0581   ED B8                  LDDR      
0583   13                     INC   de   
0584                BLOCKEND3:      
0584   EB                     EX   de,hl   ; sp = de = new tos*
0585   F9                     LD   sp,hl   
0586   ED 4B FE 0E            LD   bc,(vTemp2)   
058A   FD 2A FC 0E            LD   iy,(vTemp1)   
058E   DD E9                  JP   (ix)   
0590                TICK:        
0590                CHAR:        
0590   21 00 00               LD   hl,0   ; if "" is empty or null
0593                CHAR1:       
0593   03                     INC   bc   ; point to next char
0594   0A                     LD   a,(bc)   
0595   FE 27                  CP   "'"   ; ' is the terminator
0597   28 09                  JR   z,char3   
0599   FE 5C                  CP   $5c   ; \ is the escape
059B   20 02                  JR   nz,char2   
059D   03                     INC   bc   
059E   0A                     LD   a,(bc)   
059F                CHAR2:       
059F   6F                     LD   l,a   
05A0   18 F1                  JR   char1   
05A2                CHAR3:       
05A2   E5                     PUSH   hl   
05A3   DD E9                  JP   (ix)   
05A5                BACKSLASH:      
05A5   DD E9                  JP   (ix)   
05A7                             ; , discard stack item
05A7                             ; x y -- x
05A7                COMMA:       
05A7                DISCARD:      
05A7   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A9   FD 5D                  LD   e,iyl   
05AB   EB                     EX   de,hl   
05AC   B7                     OR   a   
05AD   ED 72                  SBC   hl,sp   
05AF   CB 7C                  BIT   7,h   
05B1   20 01                  JR   nz,discard1   
05B3   E1                     POP   hl   
05B4                DISCARD1:      
05B4   DD E9                  JP   (ix)   
05B6                SLASH:       
05B6   03                     INC   bc   
05B7   0A                     LD   a,(bc)   
05B8   FE 5C                  CP   $5C   
05BA   CA 91 08               JP   z,comment   
05BD   FE 41                  CP   "A"   
05BF   D2 45 08               JP   nc,command   
05C2   0B                     DEC   bc   
05C3   D1                     POP   de   
05C4   E1                     POP   hl   
05C5   C5                     PUSH   bc   ; preserve the IP
05C6   44 4D                  LD   bc,hl   
05C8   CD 39 06               CALL   divide   
05CB   EB                     EX   de,hl   
05CC   ED 53 F2 0E            LD   (vRemain),de   
05D0   C1                     POP   bc   
05D1   C3 99 03               JP   add3   
05D4                DOT:         
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   FE 68                  CP   "h"   
05D8   CA E9 05               JP   z,dotHex   
05DB   FE 73                  CP   "s"   
05DD   CA FD 05               JP   z,dotStr   
05E0   FE 63                  CP   "c"   
05E2   CA 11 06               JP   z,dotChar   
05E5   0B                     DEC   bc   
05E6   C3 25 06               JP   dotDec   
05E9                DOTHEX:      
05E9   CD 76 06               CALL   go   
05EC   00 00                  DW   NUL   ; closure
05EE   F2 05                  DW   dotHex_block   
05F0   23 0B                  DW   args1A0L   
05F2                DOTHEX_BLOCK:      
05F2   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
05FD                DOTSTR:      
05FD   CD 76 06               CALL   go   
0600   00 00                  DW   NUL   ; closure
0602   06 06                  DW   dotStr_block   
0604   23 0B                  DW   args1A0L   
0606                DOTSTR_BLOCK:      
0606   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
0611                DOTCHAR:      
0611   CD 76 06               CALL   go   
0614   00 00                  DW   NUL   ; closure
0616   1A 06                  DW   dotChar_block   
0618   23 0B                  DW   args1A0L   
061A                DOTCHAR_BLOCK:      
061A   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0625                DOTDEC:      
0625   CD 76 06               CALL   go   
0628   00 00                  DW   NUL   ; closure
062A   2E 06                  DW   dotDec_block   
062C   23 0B                  DW   args1A0L   
062E                DOTDEC_BLOCK:      
062E   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
0639                             ; division subroutine.
0639                             ; bc: divisor, de: dividend, hl: remainder
0639                DIVIDE:      
0639   21 00 00               LD   hl,0   ; zero the remainder
063C   3E 10                  LD   a,16   ; loop counter
063E                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
063E   CB 21                  SLA   c   
0640   CB 10                  RL   b   
0642   ED 6A                  ADC   hl,hl   
0644   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0646   38 03                  JR   c,divide2   
0648   0C                     INC   c   
0649   18 01                  JR   divide3   
064B                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
064B   19                     ADD   hl,de   
064C                DIVIDE3:      
064C   3D                     DEC   a   
064D   20 EF                  JR   nz,divide1   
064F   50 59                  LD   de,bc   ; result from bc to de
0651   C9                     RET      
0652                             ; hl = value1, de = value2
0652                             ; hl = result
0652                EQUALS:      
0652   B7                     OR   a   ; reset the carry flag
0653   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0655   28 10                  JR   z,true1   
0657   C3 6D 06               JP   false1   
065A                             ; hl = value1 de = value2
065A                             ; hl = result
065A                LESSTHANEQ:      
065A   B7                     OR   a   
065B   ED 52                  SBC   hl,de   
065D   18 05                  JR   lessthan1   
065F                             ; hl = value1 de = value2
065F                             ; hl = result
065F                LESSTHAN:      
065F   B7                     OR   a   
0660   ED 52                  SBC   hl,de   
0662   28 09                  JR   z,false1   
0664                LESSTHAN1:      
0664   FA 6D 06               JP   m,false1   
0667                TRUE1:       
0667   21 FF FF               LD   hl,TRUE   
066A   E5                     PUSH   hl   
066B   DD E9                  JP   (ix)   
066D                NULL1:       
066D                FALSE1:      
066D   21 00 00               LD   hl,FALSE   
0670   E5                     PUSH   hl   
0671   DD E9                  JP   (ix)   
0673                LPAREN:      
0673   C3 CB 04               JP   block   
0676                             ; execute a block of code which ends with }
0676                             ; creates a root scope if BP == stack
0676                             ; else uses outer scope
0676                CARET:       
0676                GO:          
0676   D1                     POP   de   ; de = block*
0677                GO1:         
0677   7B                     LD   a,e   ; if block* == null, exit
0678   B2                     OR   d   
0679   20 02                  JR   nz,go2   
067B   DD E9                  JP   (ix)   
067D                GO2:         
067D   1A                     LD   a,(de)   
067E   FE 7B                  CP   "{"   
0680   28 07                  JR   z,goBlock1   
0682   FE 28                  CP   "("   
0684   C2 BC 06               JP   nz,goFunc   
0687   13                     INC   de   ; de is the address to jump back to
0688   D5                     PUSH   de   ; push de just before stack frame
0689                GOBLOCK:      
0689                GOBLOCK1:      
0689   ED 53 FC 0E            LD   (vTemp1),de   ; save de
068D   21 80 0D               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0690   FD 54                  LD   d,iyh   
0692   FD 5D                  LD   e,iyl   
0694   B7                     OR   a   ; if stack* == BP then this is the root_scope
0695   ED 52                  SBC   hl,de   
0697   ED 5B FC 0E            LD   de,(vTemp1)   ; restore de
069B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
069C   B4                     OR   h   
069D   3E 00                  LD   a,0   
069F   28 6C                  JR   z,goFunc8   
06A1   C5                     PUSH   bc   ; push IP
06A2   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06A5   FD 46 05               LD   b,(iy+5)   
06A8   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06AB   FD 66 03               LD   h,(iy+3)   
06AE                GOBLOCK2:      
06AE   C5                     PUSH   bc   ; arg_list*
06AF   E5                     PUSH   hl   ; first_arg*
06B0   FD E5                  PUSH   iy   ; push BP
06B2   FD 21 00 00            LD   iy,0   ; BP = SP
06B6   FD 39                  ADD   iy,sp   
06B8   42 4B                  LD   bc,de   ; bc = de = block*-1
06BA   DD E9                  JP   (ix)   
06BC                GOFUNC:      ; execute function
06BC   EB                     EX   de,hl   ; hl = func*
06BD   5E                     LD   e,(hl)   ; de = partial_array*
06BE   23                     INC   hl   
06BF   56                     LD   d,(hl)   
06C0   23                     INC   hl   
06C1   7B                     LD   a,e   ; if partial_array* == null skip
06C2   B2                     OR   d   
06C3   28 21                  JR   z,goFunc3   
06C5   ED 43 FC 0E            LD   (vTemp1),bc   
06C9   22 FE 0E               LD   (vTemp2),hl   ; save bc,hl
06CC   EB                     EX   de,hl   ; hl = partial_array*
06CD   2B                     DEC   hl   ; bc = count
06CE   46                     LD   b,(hl)   
06CF   2B                     DEC   hl   
06D0   4E                     LD   c,(hl)   
06D1   23                     INC   hl   ; push each item on stack
06D2   23                     INC   hl   
06D3   18 06                  JR   goFunc2   
06D5                GOFUNC1:      
06D5   5E                     LD   e,(hl)   ; de = partial item
06D6   23                     INC   hl   
06D7   56                     LD   d,(hl)   
06D8   23                     INC   hl   
06D9   D5                     PUSH   de   ; push on stack
06DA   0B                     DEC   bc   
06DB                GOFUNC2:      
06DB   79                     LD   a,c   ; if count != 0 then loop
06DC   B0                     OR   b   
06DD   20 F6                  JR   nz,goFunc1   
06DF   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore bc
06E3   2A FE 0E               LD   hl,(vTemp2)   ; restore hl
06E6                GOFUNC3:      
06E6   5E                     LD   e,(hl)   ; de = block*
06E7   23                     INC   hl   
06E8   56                     LD   d,(hl)   
06E9   23                     INC   hl   
06EA   ED 53 FC 0E            LD   (vTemp1),de   ; save block*
06EE   5E                     LD   e,(hl)   ; de = arg_list*
06EF   23                     INC   hl   
06F0   56                     LD   d,(hl)   
06F1   23                     INC   hl   
06F2   EB                     EX   de,hl   ; hl = arg_list*
06F3   ED 5B FC 0E            LD   de,(vTemp1)   ; restore de = block*
06F7   7D                     LD   a,l   ; if arg_list* == null a = 0
06F8   B4                     OR   h   
06F9   20 03                  JR   nz,goFunc4   
06FB   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06FC   18 0F                  JR   goFunc8   
06FE                GOFUNC4:      ; allocate locals
06FE   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06FF   7E                     LD   a,(hl)   
0700   18 03                  JR   goFunc6   
0702                GOFUNC5:      ; loop
0702   3B                     DEC   sp   
0703   3B                     DEC   sp   
0704   3D                     DEC   a   
0705                GOFUNC6:      
0705   B7                     OR   a   
0706   20 FA                  JR   nz,goFunc5   ; end loop
0708                GOFUNC7:      
0708   2B                     DEC   hl   ; a = num_args* x 2
0709   7E                     LD   a,(hl)   
070A   23                     INC   hl   
070B   23                     INC   hl   
070C   87                     ADD   a,a   ; a *= 2
070D                GOFUNC8:      
070D   C5                     PUSH   bc   ; push IP
070E   44 4D                  LD   bc,hl   
0710   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0713   85                     ADD   a,l   
0714   6F                     LD   l,a   
0715   39                     ADD   hl,sp   
0716   18 96                  JR   goBlock2   
0718                HASH:        
0718                HEXNUM:      
0718   21 00 00               LD   hl,0   ; Clear hl to accept the number
071B                HEXNUM1:      
071B   03                     INC   bc   
071C   0A                     LD   a,(bc)   ; Get the character which is a numeral
071D   CB 77                  BIT   6,a   ; is it uppercase alpha?
071F   28 02                  JR   z,hexnum2   ; no a decimal
0721   D6 07                  SUB   7   ; sub 7  to make $a - $F
0723                HEXNUM2:      
0723   D6 30                  SUB   $30   ; form decimal digit
0725   DA A3 07               JP   c,num2   
0728   FE 10                  CP   $0F+1   
072A   D2 A3 07               JP   nc,num2   
072D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
072E   29                     ADD   hl,hl   ; 4X
072F   29                     ADD   hl,hl   ; 8X
0730   29                     ADD   hl,hl   ; 16X
0731   85                     ADD   a,l   ; add into bottom of hl
0732   6F                     LD   l,a   
0733   18 E6                  JR   hexnum1   
0735                UPCASE:      
0735   0A                     LD   a,(bc)   ; a = identifier char
0736   D6 41                  SUB   "A"   ; "A" = 0
0738   18 05                  JR   ident1   
073A                LOWCASE:      
073A   0A                     LD   a,(bc)   
073B   D6 61                  SUB   "a"   
073D   C6 1A                  ADD   a,26   
073F                IDENT1:      
073F   87                     ADD   a,a   ; l = a * 2
0740   6F                     LD   l,a   
0741   26 0E                  LD   h,msb(vars)   
0743   22 F0 0E               LD   (vPointer),hl   ; store address in setter
0746   5E                     LD   e,(hl)   
0747   23                     INC   hl   
0748   56                     LD   d,(hl)   
0749   D5                     PUSH   de   
074A   DD E9                  JP   (ix)   
074C                             ; if
074C                             ; condition then -- value
074C                QUESTION:      
074C                IF:          
074C   03                     INC   bc   
074D   0A                     LD   a,(bc)   
074E   FE 3F                  CP   "?"   
0750   28 06                  JR   z,ifte   
0752   0B                     DEC   bc   
0753   11 00 00               LD   de,NUL   ; NUL pointer for else
0756   18 01                  JR   ifte1   
0758                             ; ifte
0758                             ; condition then else -- value
0758                IFTE:        
0758   D1                     POP   de   ; de = else
0759                IFTE1:       
0759   E1                     POP   hl   ; hl = then
075A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
075B   7C                     LD   a,h   
075C   B5                     OR   l   
075D   E1                     POP   hl   ; hl = then
075E   CA 77 06               JP   z,go1   ; if z de = else
0761   EB                     EX   de,hl   ; condition = false, de = then
0762   C3 77 06               JP   go1   
0765                STAR:        
0765                MUL:         
0765   D1                     POP   de   ; get first value
0766   E1                     POP   hl   
0767                MUL2:        
0767   C5                     PUSH   bc   ; Preserve the IP
0768   44 4D                  LD   bc,hl   ; bc = 2nd value
076A   21 00 00               LD   hl,0   
076D   3E 10                  LD   a,16   
076F                MUL3:        
076F   29                     ADD   hl,hl   
0770   CB 13                  RL   e   
0772   CB 12                  RL   d   
0774   30 04                  JR   nc,$+6   
0776   09                     ADD   hl,bc   
0777   30 01                  JR   nc,$+3   
0779   13                     INC   de   
077A   3D                     DEC   a   
077B   20 F2                  JR   nz,mul3   
077D   C1                     POP   bc   ; Restore the IP
077E   C3 99 03               JP   add3   
0781                NUM:         
0781   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0784   0A                     LD   a,(bc)   ; Get numeral or -
0785   FE 2D                  CP   "-"   
0787   20 01                  JR   nz,num0   
0789   03                     INC   bc   ; move to next char, no flags affected
078A                NUM0:        
078A   08                     EX   af,af'   ; save zero flag = 0 for later
078B                NUM1:        
078B   0A                     LD   a,(bc)   ; read digit
078C   D6 30                  SUB   "0"   ; less than 0?
078E   38 13                  JR   c,num2   ; not a digit, exit loop
0790   FE 0A                  CP   10   ; greater that 9?
0792   30 0F                  JR   nc,num2   ; not a digit, exit loop
0794   03                     INC   bc   ; inc IP
0795   54 5D                  LD   de,hl   ; multiply hl * 10
0797   29                     ADD   hl,hl   
0798   29                     ADD   hl,hl   
0799   19                     ADD   hl,de   
079A   29                     ADD   hl,hl   
079B   85                     ADD   a,l   ; add digit in a to hl
079C   6F                     LD   l,a   
079D   3E 00                  LD   a,0   
079F   8C                     ADC   a,h   
07A0   67                     LD   h,a   
07A1   18 E8                  JR   num1   
07A3                NUM2:        
07A3   0B                     DEC   bc   
07A4   08                     EX   af,af'   ; restore zero flag
07A5   20 07                  JR   nz,num3   
07A7   EB                     EX   de,hl   ; negate the value of hl
07A8   21 00 00               LD   hl,0   
07AB   B7                     OR   a   ; jump to sub2
07AC   ED 52                  SBC   hl,de   
07AE                NUM3:        
07AE   E5                     PUSH   hl   ; Put the number on the stack
07AF   DD E9                  JP   (ix)   ; and process the next character
07B1                UNDERSCORE:      
07B1                REMAIN:      
07B1   2A F2 0E               LD   hl,(vRemain)   
07B4   E5                     PUSH   hl   
07B5   DD E9                  JP   (ix)   
07B7                RPAREN:      
07B7   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07BA   FD 46 09               LD   b,(iy+9)   
07BD   DD E9                  JP   (ix)   
07BF                             ; arg_list* block* -- ptr
07BF                SEMICOLON:      
07BF   D1                     POP   de   ; de = block* hl = heap*
07C0   2A EE 0E               LD   hl,(vHeapPtr)   
07C3   AF                     XOR   a   
07C4   77                     LD   (hl),a   ; compile null partial_array*
07C5   23                     INC   hl   
07C6   77                     LD   (hl),a   
07C7   23                     INC   hl   
07C8   73                     LD   (hl),e   ; compile block*
07C9   23                     INC   hl   
07CA   72                     LD   (hl),d   
07CB   23                     INC   hl   
07CC   D1                     POP   de   ; de = block*
07CD   73                     LD   (hl),e   ; compile arg_list*
07CE   23                     INC   hl   
07CF   72                     LD   (hl),d   
07D0   23                     INC   hl   
07D1   ED 5B EE 0E            LD   de,(vHeapPtr)   ; return func*
07D5   D5                     PUSH   de   
07D6   22 EE 0E               LD   (vHeapPtr),hl   ; heap* += 4
07D9   DD E9                  JP   (ix)   
07DB                             ; shiftLeft
07DB                             ; value count -- value2          shift left count places
07DB                SHIFTLEFT:      
07DB   50 59                  LD   de,bc   ; save IP
07DD   C1                     POP   bc   ; bc = count
07DE   41                     LD   b,c   ; b = loop counter
07DF   E1                     POP   hl   
07E0   04                     INC   b   ; test for counter=0 case
07E1   18 01                  JR   shiftLeft2   
07E3                SHIFTLEFT1:      
07E3   29                     ADD   hl,hl   ; left shift hl
07E4                SHIFTLEFT2:      
07E4   10 FD                  DJNZ   shiftLeft1   
07E6   E5                     PUSH   hl   
07E7   42 4B                  LD   bc,de   ; restore IP
07E9   DD E9                  JP   (ix)   
07EB                             ; shiftRight
07EB                             ; value count -- value2          shift left count places
07EB                SHIFTRIGHT:      
07EB   50 59                  LD   de,bc   ; save IP
07ED   C1                     POP   bc   ; bc = count
07EE   41                     LD   b,c   ; b = loop counter
07EF   E1                     POP   hl   
07F0   04                     INC   b   ; test for counter=0 case
07F1   18 04                  JR   shiftRight2   
07F3                SHIFTRIGHT1:      
07F3   CB 3C                  SRL   h   ; right shift hl
07F5   CB 1D                  RR   l   
07F7                SHIFTRIGHT2:      
07F7   10 FA                  DJNZ   shiftRight1   
07F9   E5                     PUSH   hl   
07FA   42 4B                  LD   bc,de   ; restore IP
07FC   DD E9                  JP   (ix)   
07FE                             ; string
07FE                             ; -- ptr                        ; points to start of string chars,
07FE                             ; length is stored at start - 2 bytes
07FE                DBLQUOTE:      
07FE                STRING:      
07FE   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = heap*
0801   23                     INC   hl   ; skip length field to start
0802   23                     INC   hl   
0803   E5                     PUSH   hl   ; save start of string
0804   03                     INC   bc   ; point to next char
0805   18 03                  JR   string2   
0807                STRING1:      
0807   77                     LD   (hl),a   
0808   23                     INC   hl   ; increase count
0809   03                     INC   bc   ; point to next char
080A                STRING2:      
080A   0A                     LD   a,(bc)   
080B   FE 22                  CP   DQUOTE   ; " is the string terminator
080D   28 04                  JR   z,string3   
080F   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0811   20 F4                  JR   nz,string1   
0813                STRING3:      
0813   AF                     XOR   a   ; write NUL to terminate string
0814   77                     LD   (hl),a   ; hl = end of string
0815   23                     INC   hl   
0816   22 EE 0E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0819   2B                     DEC   hl   ; hl = end of string without terminator
081A   D1                     POP   de   ; de = start of string
081B   D5                     PUSH   de   ; return start of string
081C   B7                     OR   a   ; hl = length bytes, de = start of string
081D   ED 52                  SBC   hl,de   
081F   EB                     EX   de,hl   
0820   2B                     DEC   hl   ; write length bytes to length field at start - 2
0821   72                     LD   (hl),d   
0822   2B                     DEC   hl   
0823   73                     LD   (hl),e   
0824   DD E9                  JP   (ix)   
0826                MINUS:       ; negative sign or subtract
0826   03                     INC   bc   ; check if sign of a number
0827   0A                     LD   a,(bc)   
0828   0B                     DEC   bc   
0829   FE 30                  CP   "0"   
082B   38 05                  JR   c,sub   
082D   FE 3A                  CP   "9"+1   
082F   DA 3E 03               JP   c,num_   
0832                SUB:         ; Subtract the value 2nd on stack from top of stack
0832   03                     INC   bc   
0833   FE 2D                  CP   "-"   
0835   20 05                  JR   nz,sub1   
0837   E1                     POP   hl   
0838   2B                     DEC   hl   
0839   C3 85 04               JP   assign0   
083C                SUB1:        
083C   0B                     DEC   bc   
083D   D1                     POP   de   
083E   E1                     POP   hl   
083F   B7                     OR   a   
0840   ED 52                  SBC   hl,de   
0842   C3 99 03               JP   add3   
0845                             ;*******************************************************************
0845                             ; commands
0845                             ; a contains command letter
0845                             ; bc points to command letter
0845                             ;*******************************************************************
0845                COMMAND:      
0845   FE 2F                  CP   "/"   ; // comment
0847   CA 91 08               JP   z,comment   
084A   FE 61                  CP   "a"   ; /ab absolute /ad address of
084C   28 4C                  JR   z,command_a   
084E   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0850                             ; /bd buf decimal /bp buf params
0850                             ; /bs buf string /br break
0850   CA D7 08               JP   z,command_b   
0853   FE 63                  CP   "c"   ; /c chars
0855   CA BD 0A               JP   z,chars   
0858   FE 66                  CP   "f"   ; /f false
085A   CA 6D 06               JP   z,false1   
085D   FE 69                  CP   "i"   ; /in input iv invert
085F   CA AE 0A               JP   z,command_i   
0862   FE 6B                  CP   "k"   ; /k key
0864   CA D0 0A               JP   z,key   
0867   FE 6E                  CP   "n"   ; /n numbers
0869   CA E2 0A               JP   z,numbers   
086C   FE 6F                  CP   "o"   ; /o output
086E   CA D9 0A               JP   z,output   
0871   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0873   CA E3 09               JP   z,command_p   
0876   FE 74                  CP   "t"   ; /t true
0878   CA 67 06               JP   z,true1   
087B   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
087D   CA 5B 0A               JP   z,command_v   
0880   FE 78                  CP   "x"   ; /x xor
0882   CA BA 03               JP   z,xor   
0885   FE 7A                  CP   "z"   ; /z
0887   CA EA 0A               JP   z,zprt   
088A                ERROR1:      
088A   21 01 00               LD   hl,1   ; error 1: unknown command
088D   E5                     PUSH   hl   
088E   C3 42 0C               JP   error   
0891                COMMENT:      
0891   03                     INC   bc   ; point to next char
0892   0A                     LD   a,(bc)   
0893   FE 20                  CP   " "   ; terminate on any char less than SP
0895   30 FA                  JR   nc,comment   
0897   0B                     DEC   bc   
0898   DD E9                  JP   (ix)   
089A                COMMAND_A:      
089A   03                     INC   bc   
089B   0A                     LD   a,(bc)   
089C   FE 62                  CP   "b"   
089E   CA A9 08               JP   z,absolute   
08A1   FE 64                  CP   "d"   
08A3   CA B6 08               JP   z,addrOf   
08A6   C3 8A 08               JP   error1   
08A9                             ; /ab absolute
08A9                             ; num -- num
08A9                ABSOLUTE:      
08A9   E1                     POP   hl   
08AA   CB 7C                  BIT   7,h   
08AC   C8                     RET   z   
08AD   AF                     XOR   a   
08AE   95                     SUB   l   
08AF   6F                     LD   l,a   
08B0   9F                     SBC   a,a   
08B1   94                     SUB   h   
08B2   67                     LD   h,a   
08B3   E5                     PUSH   hl   
08B4   DD E9                  JP   (ix)   
08B6                             ; /ad addrOf
08B6                             ; char -- addr
08B6                ADDROF:      
08B6   E1                     POP   hl   ; a = char
08B7   7D                     LD   a,l   
08B8   FE 7B                  CP   "z"+1   ; if a > z then exit
08BA   30 19                  JR   nc,addrOf2   
08BC   D6 41                  SUB   "A"   ; a - 65
08BE   38 15                  JR   c,addrOf2   ; if < A then exit
08C0   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08C2   38 06                  JR   c,addrOf1   
08C4   D6 06                  SUB   "a"-("Z"+1)   
08C6   FE 1A                  CP   "Z"-"A"+1   
08C8   38 0B                  JR   c,addrOf2   ; if < a then exit
08CA                ADDROF1:      
08CA   87                     ADD   a,a   ; double a
08CB   21 00 0E               LD   hl,VARS   ; hl = VARS + a
08CE   85                     ADD   a,l   
08CF   6F                     LD   l,a   
08D0   3E 00                  LD   a,0   
08D2   8C                     ADC   a,h   
08D3   67                     LD   h,a   
08D4   E5                     PUSH   hl   
08D5                ADDROF2:      
08D5   DD E9                  JP   (ix)   
08D7                COMMAND_B:      
08D7   03                     INC   bc   
08D8   0A                     LD   a,(bc)   
08D9   FE 63                  CP   "c"   ; /bc buffer char
08DB   CA FA 08               JP   z,bufferChar   
08DE   FE 64                  CP   "d"   ; /bd buffer decimal
08E0   CA 09 09               JP   z,bufferDec   
08E3   FE 68                  CP   "h"   ; /bd buffer hexadecimal
08E5   CA 6A 09               JP   z,bufferHex   
08E8   FE 72                  CP   "r"   ; /br break
08EA   CA 99 09               JP   z,break   
08ED   FE 73                  CP   "s"   ; /bs buffer string
08EF   CA B3 09               JP   z,bufferString   
08F2   FE 78                  CP   "x"   ; /bx buffer x spaces
08F4   CA CF 09               JP   z,bufferXSpaces   
08F7   C3 8A 08               JP   error1   
08FA                             ; /bc buffer char
08FA                             ; char -- length
08FA                BUFFERCHAR:      
08FA   D1                     POP   de   ; e = char
08FB   2A EA 0E               LD   hl,(vBufPtr)   ; hl = buffer*
08FE   73                     LD   (hl),e   ; e -> buffer*
08FF   23                     INC   hl   ; buffer*++
0900   22 EA 0E               LD   (vBufPtr),hl   ; save buffer*' in pointer
0903   11 01 00               LD   de,1   ; return 1 byte
0906   D5                     PUSH   de   
0907   DD E9                  JP   (ix)   
0909                             ; /bd buffer decimal
0909                             ; value -- length               ; length can be used to rewind buffer*
0909                BUFFERDEC:      
0909   ED 5B EA 0E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
090D   D9                     EXX      
090E   E1                     POP   hl   ; hl = value
090F   CD 21 09               CALL   bufferDec0   
0912   D9                     EXX      ; de = buffer*' bc = IP
0913   2A EA 0E               LD   hl,(vBufPtr)   ; hl = buffer*
0916   ED 53 EA 0E            LD   (vBufPtr),de   ; update buffer* with buffer*'
091A   EB                     EX   de,hl   ; hl = length
091B   B7                     OR   a   
091C   ED 52                  SBC   hl,de   
091E   E5                     PUSH   hl   ; return length
091F   DD E9                  JP   (ix)   
0921                             ; hl = value
0921                             ; de' = buffer*
0921                             ; a, bc, de, hl destroyed
0921                BUFFERDEC0:      
0921   CB 7C                  BIT   7,h   
0923   28 0C                  JR   z,bufferDec1   
0925   D9                     EXX      
0926   3E 2D                  LD   a,"-"   
0928   12                     LD   (de),a   
0929   13                     INC   de   
092A   D9                     EXX      
092B   AF                     XOR   a   
092C   95                     SUB   l   
092D   6F                     LD   l,a   
092E   9F                     SBC   a,a   
092F   94                     SUB   h   
0930   67                     LD   h,a   
0931                BUFFERDEC1:      
0931   0E 00                  LD   c,0   ; leading zeros flag = false
0933   11 F0 D8               LD   de,-10000   
0936   CD 51 09               CALL   bufferDec2   
0939   11 18 FC               LD   de,-1000   
093C   CD 51 09               CALL   bufferDec2   
093F   11 9C FF               LD   de,-100   
0942   CD 51 09               CALL   bufferDec2   
0945   1E F6                  LD   e,-10   
0947   CD 51 09               CALL   bufferDec2   
094A   0C                     INC   c   ; flag = true for at least digit
094B   1E FF                  LD   e,-1   
094D   CD 51 09               CALL   bufferDec2   
0950   C9                     RET      
0951                BUFFERDEC2:      
0951   06 2F                  LD   b,"0"-1   
0953                BUFFERDEC3:      
0953   04                     INC   b   
0954   19                     ADD   hl,de   
0955   38 FC                  JR   c,bufferDec3   
0957   ED 52                  SBC   hl,de   
0959   3E 30                  LD   a,"0"   
095B   B8                     CP   b   
095C   20 05                  JR   nz,bufferDec4   
095E   AF                     XOR   a   
095F   B1                     OR   c   
0960   C8                     RET   z   
0961   18 01                  JR   bufferDec5   
0963                BUFFERDEC4:      
0963   0C                     INC   c   
0964                BUFFERDEC5:      
0964   78                     LD   a,b   
0965   D9                     EXX      
0966   12                     LD   (de),a   
0967   13                     INC   de   
0968   D9                     EXX      
0969   C9                     RET      
096A                             ; /bh buffer hex
096A                             ; value -- length               ; length can be used to rewind buffer*
096A                BUFFERHEX:      
096A   E1                     POP   hl   ; hl = value
096B   ED 5B EA 0E            LD   de,(vBufPtr)   
096F   7C                     LD   a,h   
0970   CD 85 09               CALL   bufferHex1   
0973   7D                     LD   a,l   
0974   CD 85 09               CALL   bufferHex1   
0977   EB                     EX   de,hl   
0978   ED 5B EA 0E            LD   de,(vBufPtr)   
097C   22 EA 0E               LD   (vBufPtr),hl   
097F   B7                     OR   a   
0980   ED 52                  SBC   hl,de   
0982   E5                     PUSH   hl   
0983   DD E9                  JP   (ix)   
0985                BUFFERHEX1:      
0985   F5                     PUSH   af   
0986   1F                     RRA      
0987   1F                     RRA      
0988   1F                     RRA      
0989   1F                     RRA      
098A   CD 8E 09               CALL   bufferHex2   
098D   F1                     POP   af   
098E                BUFFERHEX2:      
098E   E6 0F                  AND   0x0F   
0990   C6 90                  ADD   a,0x90   
0992   27                     DAA      
0993   CE 40                  ADC   a,0x40   
0995   27                     DAA      
0996   12                     LD   (de),a   
0997   13                     INC   de   
0998   C9                     RET      
0999                             ; /br break from loop
0999                             ; --
0999                BREAK:       
0999   E1                     POP   hl   
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   28 02                  JR   z,break1   
099E   DD E9                  JP   (ix)   
09A0                BREAK1:      
09A0   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09A2   FD 54                  LD   d,iyh   
09A4   21 08 00               LD   hl,8   
09A7   19                     ADD   hl,de   
09A8   23                     INC   hl   
09A9   23                     INC   hl   
09AA   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09AD   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09B0   C3 34 05               JP   blockEnd   
09B3                             ; /bs buffered string
09B3                             ; string* -- length
09B3                BUFFERSTRING:      
09B3   E1                     POP   hl   ; hl = string*
09B4   ED 5B EA 0E            LD   de,(vBufPtr)   ; de = buffer*
09B8   18 03                  JR   bufferString1   
09BA                BUFFERSTRING0:      
09BA   12                     LD   (de),a   ; a -> buffer*
09BB   13                     INC   de   ; string*++ buffer++
09BC   23                     INC   hl   
09BD                BUFFERSTRING1:      
09BD   7E                     LD   a,(hl)   ; a <- string*
09BE   B7                     OR   a   ; if NUL exit loop
09BF   20 F9                  JR   nz,bufferString0   
09C1   2A EA 0E               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09C4   ED 53 EA 0E            LD   (vBufPtr),de   ; save buffer*' in pointer
09C8   EB                     EX   de,hl   ; hl = length
09C9   B7                     OR   a   
09CA   ED 52                  SBC   hl,de   
09CC   E5                     PUSH   hl   ; return length
09CD   DD E9                  JP   (ix)   
09CF                             ; /bx buffered x spaces
09CF                             ; length -- length
09CF                BUFFERXSPACES:      
09CF   D1                     POP   de   ; bc = length
09D0   D5                     PUSH   de   ; return length
09D1   2A EA 0E               LD   hl,(vBufPtr)   ; hl = buffer*
09D4   18 04                  JR   bufferXSpaces2   
09D6                BUFFERXSPACES1:      
09D6   36 20                  LD   (hl)," "   
09D8   23                     INC   hl   
09D9   1B                     DEC   de   
09DA                BUFFERXSPACES2:      
09DA   7B                     LD   a,e   
09DB   B2                     OR   d   
09DC   20 F8                  JR   nz,bufferXSpaces1   
09DE   22 EA 0E               LD   (vBufPtr),hl   ; save buffer*'
09E1   DD E9                  JP   (ix)   
09E3                COMMAND_P:      
09E3   03                     INC   bc   
09E4   0A                     LD   a,(bc)   
09E5   FE 61                  CP   "a"   
09E7   CA FC 09               JP   z,partial   
09EA   FE 63                  CP   "c"   
09EC   CA 1C 0A               JP   z,printChars   
09EF   FE 6B                  CP   "k"   
09F1   CA 2E 0A               JP   z,printStack   
09F4   FE 78                  CP   "x"   
09F6   CA 30 0A               JP   z,printX   
09F9   C3 8A 08               JP   error1   
09FC                             ; partial
09FC                             ; array* func* -- func1*
09FC                PARTIAL:      
09FC   E1                     POP   hl   ; h1 = func*
09FD   ED 5B EE 0E            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A01   ED 43 FC 0E            LD   (vTemp1),bc   ; save IP
0A05   01 06 00               LD   bc,6   ; bc = count
0A08   ED B0                  LDIR      ; clone func
0A0A   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore IP
0A0E   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A11   ED 53 EE 0E            LD   (vHeapPtr),de   ; heap* += 6
0A15   D1                     POP   de   ; de = array*
0A16   E5                     PUSH   hl   ; return partial_array*
0A17   73                     LD   (hl),e   ; compile array*
0A18   23                     INC   hl   
0A19   72                     LD   (hl),d   
0A1A   DD E9                  JP   (ix)   
0A1C                             ; printChars
0A1C                             ; char* len --
0A1C                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A1C                PRINTCHARS:      
0A1C   E1                     POP   hl   
0A1D   2B                     DEC   hl   
0A1E   D1                     POP   de   
0A1F   C3 24 0A               JP   printChars2   
0A22                PRINTCHARS1:      
0A22   13                     INC   de   
0A23   2B                     DEC   hl   
0A24                PRINTCHARS2:      
0A24   1A                     LD   a,(de)   
0A25   CD 85 00               CALL   putchar   
0A28   7D                     LD   a,l   
0A29   B4                     OR   h   
0A2A   20 F6                  JR   nz,printChars1   
0A2C   DD E9                  JP   (ix)   
0A2E                             ; /pk print stack
0A2E                             ; --
0A2E                PRINTSTACK:      
0A2E                             ;     ld (vTemp1),bc
0A2E                             ;     call printStr
0A2E                             ;     .cstr "=> "
0A2E                             ;     ld hl,STACK
0A2E                             ;     sbc hl,sp
0A2E                             ;     srl h
0A2E                             ;     rr l
0A2E                             ;     ld bc,hl
0A2E                             ;     ld hl,STACK
0A2E                             ;     jr printStack2
0A2E                             ; printStack1:
0A2E                             ;     dec bc
0A2E                             ;     dec hl
0A2E                             ;     ld d,(hl)
0A2E                             ;     dec hl
0A2E                             ;     ld e,(hl)
0A2E                             ;     ex de,hl
0A2E                             ;     call prthex
0A2E                             ;     ex de,hl
0A2E                             ;     ld a," "
0A2E                             ;     call putchar
0A2E                             ; printStack2:
0A2E                             ;     ld a,c
0A2E                             ;     or b
0A2E                             ;     jr nz,printStack1
0A2E                             ;     call prompt
0A2E                             ;     ld bc,(vTemp1)
0A2E   DD E9                  JP   (ix)   
0A30                PRINTX:      
0A30   CD 76 06               CALL   go   
0A33   00 00                  DW   NUL   ; closure
0A35   39 0A                  DW   printX_block   
0A37   23 0B                  DW   args1A0L   
0A39                PRINTX_BLOCK:      
0A39   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0A5B                COMMAND_V:      
0A5B   03                     INC   bc   
0A5C   0A                     LD   a,(bc)   
0A5D   FE 62                  CP   "b"   
0A5F   CA 8D 0A               JP   z,varBufPtr   
0A62   FE 68                  CP   "h"   
0A64   CA 96 0A               JP   z,varHeapPtr   
0A67   FE 74                  CP   "t"   
0A69   CA 9F 0A               JP   z,varTIBPtr   
0A6C   FE 42                  CP   "B"   
0A6E   CA 7E 0A               JP   z,constBufStart   
0A71   FE 48                  CP   "H"   
0A73   CA 83 0A               JP   z,constHeapStart   
0A76   FE 54                  CP   "T"   
0A78   CA 88 0A               JP   z,constTIBStart   
0A7B   C3 8A 08               JP   error1   
0A7E                CONSTBUFSTART:      
0A7E   11 00 11               LD   de,BUF   
0A81   18 28                  JR   constant   
0A83                CONSTHEAPSTART:      
0A83   11 00 13               LD   de,HEAP   
0A86   18 23                  JR   constant   
0A88                CONSTTIBSTART:      
0A88   11 00 10               LD   de,TIB   
0A8B   18 1E                  JR   constant   
0A8D                VARBUFPTR:      
0A8D   ED 5B EA 0E            LD   de,(vBufPtr)   
0A91   21 EA 0E               LD   hl,vBufPtr   
0A94   18 12                  JR   variable   
0A96                VARHEAPPTR:      
0A96   ED 5B EE 0E            LD   de,(vHeapPtr)   
0A9A   21 EE 0E               LD   hl,vHeapPtr   
0A9D   18 09                  JR   variable   
0A9F                VARTIBPTR:      
0A9F   ED 5B E8 0E            LD   de,(vTIBPtr)   
0AA3   21 E8 0E               LD   hl,vTIBPtr   
0AA6   18 00                  JR   variable   
0AA8                VARIABLE:      
0AA8   22 F0 0E               LD   (vPointer),hl   
0AAB                CONSTANT:      
0AAB   D5                     PUSH   de   
0AAC   DD E9                  JP   (ix)   
0AAE                COMMAND_I:      
0AAE   03                     INC   bc   
0AAF   0A                     LD   a,(bc)   
0AB0   FE 6E                  CP   "n"   ; /in input
0AB2   CA C5 0A               JP   z,input   
0AB5   FE 76                  CP   "v"   ; /iv invert
0AB7   CA C5 03               JP   z,invert   
0ABA   C3 8A 08               JP   error1   
0ABD                CHARS:       
0ABD   21 01 00               LD   hl,1   
0AC0                CHARS1:      
0AC0   22 E6 0E               LD   (vDataWidth),hl   
0AC3   DD E9                  JP   (ix)   
0AC5                             ; Z80 port input
0AC5                             ; port -- value
0AC5                INPUT:       
0AC5   E1                     POP   hl   
0AC6   59                     LD   e,c   ; save IP
0AC7   4D                     LD   c,l   
0AC8   ED 68                  IN   l,(c)   
0ACA   26 00                  LD   h,0   
0ACC   4B                     LD   c,e   ; restore IP
0ACD   E5                     PUSH   hl   
0ACE   DD E9                  JP   (ix)   
0AD0                KEY:         
0AD0   CD 81 00               CALL   getchar   
0AD3   26 00                  LD   h,0   
0AD5   6F                     LD   l,a   
0AD6   E5                     PUSH   hl   
0AD7   DD E9                  JP   (ix)   
0AD9                             ; Z80 port output
0AD9                             ; value port --
0AD9                OUTPUT:      
0AD9   E1                     POP   hl   
0ADA   59                     LD   e,c   ; save IP
0ADB   4D                     LD   c,l   
0ADC   E1                     POP   hl   
0ADD   ED 69                  OUT   (c),l   
0ADF   4B                     LD   c,e   ; restore IP
0AE0   DD E9                  JP   (ix)   
0AE2                NUMBERS:      
0AE2   21 02 00               LD   hl,2   
0AE5   C3 C0 0A               JP   chars1   
0AE8                             ; 
0AE8                             ; 
0AE8                             ; 
0AE8                             ; 
0AE8                FILTER:      
0AE8                MAP:         
0AE8                SCAN:        
0AE8   DD E9                  JP   (ix)   
0AEA                ZPRT:        
0AEA   CD 76 06               CALL   go   
0AED   00 00                  DW   NUL   ; closure
0AEF   F7 0A                  DW   zprt_block   
0AF1   F5 0A                  DW   zprt_args   
0AF3   02                     DB   2   ; num args + locals
0AF4   01                     DB   1   ; num locals
0AF5                ZPRT_ARGS:      
0AF5   6E 73                  DB   "ns"   
0AF7                ZPRT_BLOCK:      
0AF7   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B1E                             ;*******************************************************************
0B1E                             ; reusable arglists
0B1E                             ;*******************************************************************
0B1E                ARGS0A1L_:      ; zero args one local
0B1E   01                     DB   1   ; num args + locals
0B1F   01                     DB   1   ; num locals
0B20                ARGS0A1L:      
0B20   61                     DB   "a"   
0B21                ARGS1A0L_:      ; one arg zero locals
0B21   01                     DB   1   ; num args + locals
0B22   00                     DB   0   ; num locals
0B23                ARGS1A0L:      
0B23   61                     DB   "a"   
0B24                ARGS1A1L_:      ; one arg one local
0B24   02                     DB   2   ; num args + locals
0B25   01                     DB   1   ; num locals
0B26                ARGS1A1L:      
0B26   61 62                  DB   "ab"   
0B28                ARGS2A0L_:      ; two args zero locals
0B28   02                     DB   2   ; num args + locals
0B29   00                     DB   0   ; num locals
0B2A                ARGS2A0L:      
0B2A   61 62                  DB   "ab"   
0B2C                             ;*******************************************************************
0B2C                             ; general routines
0B2C                             ;*******************************************************************
0B2C                PRTSTR0:      
0B2C   CD 85 00               CALL   putchar   
0B2F   23                     INC   hl   
0B30                PRTSTR:      
0B30   7E                     LD   a,(hl)   
0B31   B7                     OR   a   
0B32   20 F8                  JR   nz,prtstr0   
0B34   C9                     RET      
0B35                             ; **************************************************************************
0B35                             ; calculate nesting value
0B35                             ; a is char to be tested,
0B35                             ; e is the nesting value (initially 0)
0B35                             ; e is increased by ( and [
0B35                             ; e is decreased by ) and ]
0B35                             ; e has its bit 7 toggled by `
0B35                             ; limited to 127 levels
0B35                             ; **************************************************************************
0B35                NESTING:      
0B35   FE 22                  CP   DQUOTE   ; quote char
0B37   28 06                  JR   z,nesting0   
0B39   FE 60                  CP   "`"   ; quote char
0B3B   28 02                  JR   z,nesting0   
0B3D   18 0A                  JR   nesting1   
0B3F                NESTING0:      
0B3F   CB 7B                  BIT   7,e   
0B41   28 03                  JR   z,nesting1a   
0B43   CB BB                  RES   7,e   
0B45   C9                     RET      
0B46                NESTING1A:      
0B46   CB FB                  SET   7,e   
0B48   C9                     RET      
0B49                NESTING1:      
0B49   CB 7B                  BIT   7,e   
0B4B   C0                     RET   nz   
0B4C   FE 7B                  CP   "{"   
0B4E   28 08                  JR   z,nesting2   
0B50   FE 5B                  CP   "["   
0B52   28 04                  JR   z,nesting2   
0B54   FE 28                  CP   "("   
0B56   20 02                  JR   nz,nesting3   
0B58                NESTING2:      
0B58   1C                     INC   e   
0B59   C9                     RET      
0B5A                NESTING3:      
0B5A   FE 7D                  CP   "}"   
0B5C   28 07                  JR   z,nesting4   
0B5E   FE 5D                  CP   "]"   
0B60   28 03                  JR   z,nesting4   
0B62   FE 29                  CP   ")"   
0B64   C0                     RET   nz   
0B65                NESTING4:      
0B65   1D                     DEC   e   
0B66   C9                     RET      
0B67                PROMPT:      
0B67   CD 77 0B               CALL   printStr   
0B6A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B6F   C9                     RET      
0B70                CRLF:        
0B70   CD 77 0B               CALL   printStr   
0B73   0D 0A 00               .CSTR   "\r\n"   
0B76   C9                     RET      
0B77                             ; prints a null teminated string
0B77                             ; the string should be immediately following the call
0B77                PRINTSTR:      
0B77   E3                     EX   (sp),hl   ; swap			
0B78   CD 30 0B               CALL   prtstr   
0B7B   23                     INC   hl   ; inc past NUL
0B7C   E3                     EX   (sp),hl   ; put it back	
0B7D   C9                     RET      
0B7E                INIT:        
0B7E   DD 2A EC 0E            LD   ix,(vNext)   
0B82   FD 21 80 0D            LD   iy,STACK   
0B86   21 80 01               LD   hl,isysVars   
0B89   11 E6 0E               LD   de,sysVars   
0B8C   01 10 00               LD   bc,8 * 2   
0B8F   ED B0                  LDIR      
0B91   21 00 0E               LD   hl,vars   ; 52 vars LO HI
0B94   06 34                  LD   b,26*2   
0B96   AF                     XOR   a   
0B97                INIT0:       
0B97   77                     LD   (hl),a   
0B98   23                     INC   hl   
0B99   10 FC                  DJNZ   init0   
0B9B   C9                     RET      
0B9C                START:       
0B9C   31 80 0D               LD   sp,STACK   ; start Monty
0B9F   CD 7E 0B               CALL   init   ; setups
0BA2   CD 77 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BA5   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BB2                INTERPRET:      
0BB2   CD 67 0B               CALL   prompt   
0BB5   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BB8   21 00 10               LD   hl,TIB   
0BBB   22 E8 0E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BBE                INTERPRET2:      ; calculate nesting
0BBE   1E 00                  LD   e,0   ; initilize nesting value
0BC0   C5                     PUSH   bc   ; save offset into TIB,
0BC1                             ; bc is also the count of chars in TIB
0BC1   21 00 10               LD   hl,TIB   ; hl is start of TIB
0BC4   18 06                  JR   interpret4   
0BC6                INTERPRET3:      
0BC6   7E                     LD   a,(hl)   ; a = char in TIB
0BC7   23                     INC   hl   ; inc pointer into TIB
0BC8   0B                     DEC   bc   ; dec count of chars in TIB
0BC9   CD 35 0B               CALL   nesting   ; update nesting value
0BCC                INTERPRET4:      
0BCC   79                     LD   a,c   ; is count zero?
0BCD   B0                     OR   b   
0BCE   20 F6                  JR   nz,interpret3   ; if not loop
0BD0   C1                     POP   bc   ; restore offset into TIB
0BD1                INTERPRET5:      
0BD1   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BD4   FE 20                  CP   $20   ; compare to space
0BD6   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BD8   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BDA                             ; ???? NEEDED?
0BDA   28 3B                  JR   z,interpret8   
0BDC   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BDE   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BE0   FE 05                  CP   CTRL_E   
0BE2   CA 65 0C               JP   z,edit_   
0BE5   FE 08                  CP   CTRL_H   
0BE7   CA 55 0C               JP   z,backSpace_   
0BEA   FE 0A                  CP   CTRL_J   
0BEC   CA 7D 0C               JP   z,reEdit_   
0BEF   FE 13                  CP   CTRL_S   
0BF1   CA 80 0C               JP   z,printStack_   
0BF4                             ; DB     lsb(edit_)       ; ENQ ^E  5
0BF4                             ; DB     lsb(reedit_)     ; LF  ^J 10
0BF4                             ; DB     lsb(list_)       ; FF  ^L 12
0BF4                             ; DB     lsb(printStack_) ; DLE ^P 16
0BF4                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0BF4                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0BF4                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0BF4                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0BF4                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0BF4                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0BF4                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0BF4                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0BF4                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0BF4                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0BF4                INTERPRET5A:      
0BF4                             ; ld (vTIBPtr),bc
0BF4                             ; ld bc,(vTIBPtr)
0BF4   18 C8                  JR   interpret2   
0BF6                INTERPRET6:      
0BF6   21 00 10               LD   hl,TIB   
0BF9   09                     ADD   hl,bc   
0BFA   77                     LD   (hl),a   ; store the character in textbuf
0BFB   03                     INC   bc   
0BFC   CD 85 00               CALL   putchar   ; echo character to screen
0BFF   CD 35 0B               CALL   nesting   
0C02   18 CD                  JR   interpret5   ; wait for next character
0C04                INTERPRET7:      
0C04   21 00 10               LD   hl,TIB   
0C07   09                     ADD   hl,bc   
0C08   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C0A   23                     INC   hl   
0C0B   36 0A                  LD   (hl),"\n"   
0C0D   23                     INC   hl   
0C0E   03                     INC   bc   
0C0F   03                     INC   bc   
0C10   CD 70 0B               CALL   crlf   ; echo character to screen
0C13   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C14   B7                     OR   a   
0C15   20 BA                  JR   nz,interpret5   
0C17                INTERPRET8:      
0C17   21 00 10               LD   hl,TIB   
0C1A   09                     ADD   hl,bc   
0C1B   22 E8 0E               LD   (vTIBPtr),hl   
0C1E   01 00 10               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C21                             ; we pressed enter
0C21   0B                     DEC   bc   
0C22                NEXT:        
0C22   03                     INC   bc   ; Increment the IP
0C23   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C24   FE 20                  CP   " "   ; whitespace?
0C26   28 FA                  JR   z,next   ; space? ignore
0C28   38 09                  JR   c,next1   
0C2A   D6 20                  SUB   " "   
0C2C   6F                     LD   l,a   ; index into table
0C2D   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0C2F   6E                     LD   l,(hl)   ; get low jump address
0C30   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C32   E9                     JP   (hl)   ; Jump to routine
0C33                NEXT1:       
0C33   FE 00                  CP   NUL   ; end of input string?
0C35   28 03                  JR   z,exit   
0C37   C3 B2 0B               JP   interpret   ; no, other whitespace, macros?
0C3A                EXIT:        
0C3A   03                     INC   bc   
0C3B   60 69                  LD   hl,bc   
0C3D   E9                     JP   (hl)   
0C3E                RUN:         
0C3E   C1                     POP   bc   
0C3F   0B                     DEC   bc   
0C40   DD E9                  JP   (ix)   
0C42                ERROR:       
0C42   CD 3E 0C               CALL   run   
0C45   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C52   C3 B2 0B               JP   interpret   
0C55                BACKSPACE_:      
0C55   79                     LD   a,c   
0C56   B0                     OR   b   
0C57   CA BE 0B               JP   z,interpret2   
0C5A   0B                     DEC   bc   
0C5B   CD 77 0B               CALL   printStr   
0C5E   08 20 08 00            .CSTR   "\b \b"   
0C62   C3 BE 0B               JP   interpret2   
0C65                             ; edit
0C65                EDIT_:       
0C65   CD 3E 0C               CALL   run   
0C68   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C7A   C3 B2 0B               JP   interpret   
0C7D                REEDIT_:      
0C7D   C3 B2 0B               JP   interpret   
0C80                PRINTSTACK_:      
0C80   CD 3E 0C               CALL   run   
0C83   2F 70 6B 00            .CSTR   "/pk"   
0C87   C3 B2 0B               JP   interpret   
0C8A                             ; editDef:
0C8A                             ;     pop hl                      ; pop ret address
0C8A                             ;     ex (sp),hl                  ; swap with TOS
0C8A                             ;     push hl                     ; dup TOS
0C8A                             ;     ld a,l                      ; a = ident
0C8A                             ;     ld de,TIB                   ; de = start of TIB
0C8A                             ;     ld (vTIBPtr),de             ; update TIB*
0C8A                             ;     push ix                     ; save NEXT
0C8A                             ;     ld ix,editDef0              ; NEXT = editDef0
0C8A                             ;     jp lookupRef                ; convert letter into address
0C8A                             ; editDef0:
0C8A                             ;     ld e,(hl)                   ; de = (hl++)
0C8A                             ;     inc hl
0C8A                             ;     ld d,(hl)
0C8A                             ;     ld a,d                      ; de == 0 ?
0C8A                             ;     or e
0C8A                             ;     jr z,editDef4
0C8A                             ;     ld ix,editDef3              ; NEXT = editDef3
0C8A                             ;     ex de,hl
0C8A                             ;     ld a,(hl)
0C8A                             ;     cp "{"
0C8A                             ;     jr nz,editDef1
0C8A                             ;     jp editBlock0               ; convert letter into address
0C8A                             ; editDef1:
0C8A                             ;     cp "("
0C8A                             ;     jr nz,editDef2
0C8A                             ;     jp editBlock0               ; convert letter into address
0C8A                             ; editDef2:
0C8A                             ;     jp editFunc
0C8A                             ; editDef3:
0C8A                             ;     ld a," "                    ; write assign
0C8A                             ;     call writeChar
0C8A                             ;     pop hl                      ; a = ident
0C8A                             ;     ld a,l
0C8A                             ;     call writeChar
0C8A                             ;     ld a,"="                    ; write assign
0C8A                             ;     call writeChar
0C8A                             ;     ld ix,editDef4              ; NEXT = editDef4
0C8A                             ;     jp printTIB
0C8A                             ; editDef4:
0C8A                             ;     pop ix                      ; restore NEXT
0C8A                             ;     jp (ix)
0C8A                             ; writeChar:
0C8A                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C8A                             ;     ld (de),a                   ; write ident
0C8A                             ;     inc de
0C8A                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C8A                             ;     ret
0C8A                             ; ; printTIB
0C8A                             ; printTIB:
0C8A                             ;     ld hl,(vTIBPtr)
0C8A                             ;     ld de,TIB
0C8A                             ;     or a
0C8A                             ;     sbc hl,de
0C8A                             ;     jp printTIB2
0C8A                             ; printTIB1:
0C8A                             ;     ld a,(de)
0C8A                             ;     call putchar
0C8A                             ; printTIB2:
0C8A                             ;     ld a,l
0C8A                             ;     or h
0C8A                             ;     jr nz,printTIB1
0C8A                             ;     jp (ix)
0C8A                             ; editBlock:
0C8A                             ;     pop hl                      ; hl = block*
0C8A                             ; editBlock0:
0C8A                             ;     push ix                     ; save next
0C8A                             ;     push hl                     ; push block*
0C8A                             ;     push hl                     ; push block*
0C8A                             ;     ld ix,(editBlock2)
0C8A                             ;     jp blockLength
0C8A                             ; editBlock1:
0C8A                             ;     pop hl                      ; bc = length, (sp) = IP
0C8A                             ;     pop de                      ; de = block*
0C8A                             ;     ld a,l
0C8A                             ;     or h
0C8A                             ;     jr z,editBlock2
0C8A                             ;     push bc
0C8A                             ;     ld bc,hl
0C8A                             ;     ex de,hl                    ; hl = block*
0C8A                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C8A                             ;     ldir                        ; copy block to TIB
0C8A                             ;     ld (vTIBPtr),de              ; save TIB*
0C8A                             ;     pop bc
0C8A                             ; editBlock2:
0C8A                             ;     pop ix                      ; restore next
0C8A                             ;     jp (ix)
0C8A                             ; editFunc:
0C8A                             ;     jp (ix)
0C8A                             ; editArray:
0C8A                             ;     jp (ix)
0C8A                             ; editArglist:
0C8A                             ;     jp (ix)
0C8A                             ; ; blockLength
0C8A                             ; ; addr1 -- length
0C8A                             ; blockLength:
0C8A                             ;     pop hl                      ; block*
0C8A                             ;     push hl                     ; save block*
0C8A                             ;     inc hl                      ; skip first char
0C8A                             ;     ld d,1                      ; increase nesting
0C8A                             ; blockLength1:                   ; Skip to end of definition
0C8A                             ;     ld a,(hl)                   ; Get the next character
0C8A                             ;     inc hl                      ; Point to next character
0C8A                             ;     cp " " + 1                  ; ignore whitespace
0C8A                             ;     jr c,blockLength1
0C8A                             ;     cp ")"
0C8A                             ;     jr z,blockLength4
0C8A                             ;     cp "}"
0C8A                             ;     jr z,blockLength4
0C8A                             ;     cp "]"
0C8A                             ;     jr z,blockLength4
0C8A                             ;     cp "("
0C8A                             ;     jr z,blockLength2
0C8A                             ;     cp "{"
0C8A                             ;     jr z,blockLength2
0C8A                             ;     cp "["
0C8A                             ;     jr z,blockLength2
0C8A                             ;     cp "'"
0C8A                             ;     jr z,blockLength3
0C8A                             ;     cp "`"
0C8A                             ;     jr z,blockLength3
0C8A                             ;     cp DQUOTE
0C8A                             ;     jr z,blockLength3
0C8A                             ;     jr blockLength1
0C8A                             ; blockLength2:
0C8A                             ;     inc d
0C8A                             ;     jr blockLength1
0C8A                             ; blockLength4:
0C8A                             ;     dec d
0C8A                             ;     jr nz, blockLength1         ; get the next element
0C8A                             ; blockLength3:
0C8A                             ;     ld a,$80
0C8A                             ;     xor d
0C8A                             ;     ld d,a
0C8A                             ;     jr nz, blockLength1
0C8A                             ;     pop hl                      ; hl = block*
0C8A                             ;     or a
0C8A                             ;     sbc hl,de
0C8A                             ;     push hl
0C8A                             ;     jp (ix)
0C8A                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C8A                             ; \a start of stack \#3 depth \b base \$ prompt
0C8A                             ; DW dStack               ; a vS0 start of datastack			
0C8A                             ; DW FALSE                ; b vBase16
0C8A                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C8A                             ; DW 0                    ; d
0C8A                             ; DW 65                   ; e vLastDef "A" last command u defined
0C8A                             ; DW 0                    ; f
0C8A                             ; DW page6                ; g 256 bytes limits
0C8A                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C8A                          ALIGN   $100   
0D00                             ; .org RAMSTART
0D00                          DS   DSIZE   
0D80                STACK:       
0D80                          ALIGN   $100   
0E00                VARS:        
0E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0ED0                RESTARTS:      
0ED0                RST08:    DS   2   
0ED2                RST10:    DS   2   
0ED4                RST18:    DS   2   
0ED6                RST20:    DS   2   
0ED8                RST28:    DS   2   
0EDA                RST30:    DS   2   ; 
0EDC                BAUD:     DS   2   ; 
0EDE                INTVEC:   DS   2   ; 
0EE0                NMIVEC:   DS   2   ; 
0EE2                GETCVEC:   DS   2   ; 
0EE4                PUTCVEC:   DS   2   ; 
0EE6                SYSVARS:      
0EE6                             ; initialised sys variables (preserved)
0EE6                VDATAWIDTH:   DS   2   ; 
0EE8                VTIBPTR:   DS   2   ; 
0EEA                VBUFPTR:   DS   2   ; 
0EEC                VNEXT:    DS   2   ; 
0EEE                VHEAPPTR:   DS   2   ; 
0EF0                             ; uninitialised sys variables (preserved)
0EF0                VPOINTER:   DS   2   ; 
0EF2                VREMAIN:   DS   2   ; 
0EF4                VSAVEDIP:   DS   2   ; 
0EF6                VSAVEDSP:   DS   2   ; 
0EF8                VSAVEDBP:   DS   2   ; 
0EFA                VCHECKSUM:   DS   2   ; 
0EFC                             ; uninitialised sys variables (unpreserved)
0EFC                VTEMP1:   DS   2   ; 
0EFE                VTEMP2:   DS   2   ; 
0F00                VLASTDEF:   DS   2   ; 
0F02                VHASHSTR:   DS   2   ; 
0F04                TBPTR:    DS   2   ; reserved for tests
0F06                          ALIGN   $100   
1000                TIB:      DS   TIBSIZE   
1100                BUF:      DS   BUFSIZE   
1200                          ALIGN   $100   
1200                PAD:      DS   $100   
1300                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 59 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AE8 DEFINED AT LINE 1741 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 32 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 64 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 78 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 114 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 217 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 219 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 221 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 223 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 225 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 227 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 229 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 231 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 233 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 235 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 237 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 239 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 241 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 243 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 245 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 247 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 249 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 251 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 253 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 255 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 257 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 262 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 264 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 266 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 268 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 270 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 272 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 274 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 287 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 295 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 297 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 309 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 311 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 313 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADD:                038A DEFINED AT LINE 320 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
AT:                 039C DEFINED AT LINE 344 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 345 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 351 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 359 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 365 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 395 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARRBEGIN:           0401 DEFINED AT LINE 439 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARREND:             041D DEFINED AT LINE 454 IN MAIN.asm
ARREND1:            0437 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARREND2:            0447 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
ARRINDEX:           046B DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
ARRINDEX0:          0473 DEFINED AT LINE 513 IN MAIN.asm
ARRINDEX1:          0474 DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARRINDEX2:          0480 DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ASSIGN:             0483 DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
ASSIGN0:            0485 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
ASSIGNX:            0486 DEFINED AT LINE 534 IN MAIN.asm
ASSIGN1:            0492 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
COLON:              0494 DEFINED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
ARGLIST:            0494 DEFINED AT LINE 550 IN MAIN.asm
ARGLIST1:           049E DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
ARGLIST1A:          04A6 DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
ARGLIST2:           04AE DEFINED AT LINE 568 IN MAIN.asm
ARGLIST3:           04B6 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
ARGLIST4:           04B9 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
ARGLIST5:           04BF DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
LBRACE:             04CB DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCK:              04CB DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
BLOCK1:             04CF DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCK2:             04FB DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
BLOCK3:             04FE DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
BLOCK4:             0506 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
BLOCK5:             0509 DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCK6:             0531 DEFINED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
RBRACE:             0534 DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
BLOCKEND:           0534 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 1501 IN MAIN.asm
BLOCKEND1:          0566 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
BLOCKEND2:          0572 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
BLOCKEND3:          0584 DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
TICK:               0590 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
CHAR:               0590 DEFINED AT LINE 715 IN MAIN.asm
CHAR1:              0593 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
CHAR2:              059F DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
CHAR3:              05A2 DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
BACKSLASH:          05A5 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
COMMA:              05A7 DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
DISCARD:            05A7 DEFINED AT LINE 739 IN MAIN.asm
DISCARD1:           05B4 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
SLASH:              05B6 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
DOT:                05D4 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
DOTHEX:             05E9 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
DOTHEX_BLOCK:       05F2 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DOTSTR:             05FD DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
DOTSTR_BLOCK:       0606 DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
DOTCHAR:            0611 DEFINED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DOTCHAR_BLOCK:      061A DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
DOTDEC:             0625 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DOTDEC_BLOCK:       062E DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
DIVIDE:             0639 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DIVIDE1:            063E DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
DIVIDE2:            064B DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
DIVIDE3:            064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
EQUALS:             0652 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
LESSTHANEQ:         065A DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN:           065F DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
LESSTHAN1:          0664 DEFINED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
TRUE1:              0667 DEFINED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
NULL1:              066D DEFINED AT LINE 864 IN MAIN.asm
FALSE1:             066D DEFINED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
LPAREN:             0673 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
CARET:              0676 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
GO:                 0676 DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
GO1:                0677 DEFINED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
GO2:                067D DEFINED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOBLOCK:            0689 DEFINED AT LINE 892 IN MAIN.asm
GOBLOCK1:           0689 DEFINED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
GOBLOCK2:           06AE DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
GOFUNC:             06BC DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
GOFUNC1:            06D5 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOFUNC2:            06DB DEFINED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
GOFUNC3:            06E6 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
GOFUNC4:            06FE DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
GOFUNC5:            0702 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
GOFUNC6:            0705 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
GOFUNC7:            0708 DEFINED AT LINE 979 IN MAIN.asm
GOFUNC8:            070D DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
HASH:               0718 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
HEXNUM:             0718 DEFINED AT LINE 995 IN MAIN.asm
HEXNUM1:            071B DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
HEXNUM2:            0723 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
UPCASE:             0735 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LOWCASE:            073A DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IDENT1:             073F DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
QUESTION:           074C DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
IF:                 074C DEFINED AT LINE 1037 IN MAIN.asm
IFTE:               0758 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
IFTE1:              0759 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
STAR:               0765 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
MUL:                0765 DEFINED AT LINE 1060 IN MAIN.asm
MUL2:               0767 DEFINED AT LINE 1063 IN MAIN.asm
MUL3:               076F DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
NUM:                0781 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
NUM0:               078A DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
NUM1:               078B DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
NUM2:               07A3 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
NUM3:               07AE DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
UNDERSCORE:         07B1 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
REMAIN:             07B1 DEFINED AT LINE 1120 IN MAIN.asm
RPAREN:             07B7 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
SEMICOLON:          07BF DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT:          07DB DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
SHIFTLEFT1:         07E3 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
SHIFTLEFT2:         07E4 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
SHIFTRIGHT:         07EB DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
SHIFTRIGHT1:        07F3 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
SHIFTRIGHT2:        07F7 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
DBLQUOTE:           07FE DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
STRING:             07FE DEFINED AT LINE 1192 IN MAIN.asm
STRING1:            0807 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
STRING2:            080A DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
STRING3:            0813 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
MINUS:              0826 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
SUB:                0832 DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
SUB1:               083C DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
COMMAND:            0845 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
ERROR1:             088A DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
COMMENT:            0891 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
COMMAND_A:          089A DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
ABSOLUTE:           08A9 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
ADDROF:             08B6 DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
ADDROF1:            08CA DEFINED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
ADDROF2:            08D5 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
COMMAND_B:          08D7 DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BUFFERCHAR:         08FA DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERDEC:          0909 DEFINED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
BUFFERDEC0:         0921 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1384 IN MAIN.asm
BUFFERDEC1:         0931 DEFINED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BUFFERDEC2:         0951 DEFINED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
BUFFERDEC3:         0953 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
BUFFERDEC4:         0963 DEFINED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
BUFFERDEC5:         0964 DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
BUFFERHEX:          096A DEFINED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
BUFFERHEX1:         0985 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
BUFFERHEX2:         098E DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
BREAK:              0999 DEFINED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BREAK1:             09A0 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
BUFFERSTRING:       09B3 DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
BUFFERSTRING0:      09BA DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
BUFFERSTRING1:      09BD DEFINED AT LINE 1513 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
BUFFERXSPACES:      09CF DEFINED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
BUFFERXSPACES1:     09D6 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
BUFFERXSPACES2:     09DA DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
COMMAND_P:          09E3 DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
PARTIAL:            09FC DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
PRINTCHARS:         0A1C DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
PRINTCHARS1:        0A22 DEFINED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
PRINTCHARS2:        0A24 DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
PRINTSTACK:         0A2E DEFINED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
PRINTX:             0A30 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
PRINTX_BLOCK:       0A39 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1628 IN MAIN.asm
COMMAND_V:          0A5B DEFINED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
CONSTBUFSTART:      0A7E DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
CONSTHEAPSTART:     0A83 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
CONSTTIBSTART:      0A88 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
VARBUFPTR:          0A8D DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
VARHEAPPTR:         0A96 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
VARTIBPTR:          0A9F DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
VARIABLE:           0AA8 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
CONSTANT:           0AAB DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
COMMAND_I:          0AAE DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
CHARS:              0ABD DEFINED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
CHARS1:             0AC0 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
INPUT:              0AC5 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
KEY:                0AD0 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
OUTPUT:             0AD9 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
NUMBERS:            0AE2 DEFINED AT LINE 1730 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
FILTER:             0AE8 DEFINED AT LINE 1739 IN MAIN.asm
MAP:                0AE8 DEFINED AT LINE 1740 IN MAIN.asm
ZPRT:               0AEA DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
ZPRT_ARGS:          0AF5 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
ZPRT_BLOCK:         0AF7 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
ARGS0A1L_:          0B1E DEFINED AT LINE 1759 IN MAIN.asm
ARGS0A1L:           0B20 DEFINED AT LINE 1762 IN MAIN.asm
ARGS1A0L_:          0B21 DEFINED AT LINE 1765 IN MAIN.asm
ARGS1A0L:           0B23 DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
ARGS1A1L_:          0B24 DEFINED AT LINE 1771 IN MAIN.asm
ARGS1A1L:           0B26 DEFINED AT LINE 1774 IN MAIN.asm
ARGS2A0L_:          0B28 DEFINED AT LINE 1777 IN MAIN.asm
ARGS2A0L:           0B2A DEFINED AT LINE 1780 IN MAIN.asm
PRTSTR0:            0B2C DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
PRTSTR:             0B30 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
NESTING:            0B35 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
NESTING0:           0B3F DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1810 IN MAIN.asm
NESTING1A:          0B46 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
NESTING1:           0B49 DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
NESTING2:           0B58 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
NESTING3:           0B5A DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
NESTING4:           0B65 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
PROMPT:             0B67 DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
CRLF:               0B70 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PRINTSTR:           0B77 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
INIT:               0B7E DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 1880 IN MAIN.asm
INIT0:              0B97 DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
START:              0B9C DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0BB2 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
INTERPRET2:         0BBE DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
INTERPRET3:         0BC6 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
INTERPRET4:         0BCC DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
INTERPRET5:         0BD1 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
INTERPRET5A:        0BF4 DEFINED AT LINE 1946 IN MAIN.asm
INTERPRET6:         0BF6 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
INTERPRET7:         0C04 DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
INTERPRET8:         0C17 DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
NEXT:               0C22 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
NEXT1:              0C33 DEFINED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
EXIT:               0C3A DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
RUN:                0C3E DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
ERROR:              0C42 DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
BACKSPACE_:         0C55 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
EDIT_:              0C65 DEFINED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
REEDIT_:            0C7D DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
PRINTSTACK_:        0C80 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
STACK:              0D80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
VARS:               0E00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
RESTARTS:           0ED0 DEFINED AT LINE 11 IN ram.asm
RST08:              0ED0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0ED2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0ED4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0ED6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0ED8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0EDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0EDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0EDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0EE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0EE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            0EE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0EE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1866 IN MAIN.asm
VDATAWIDTH:         0EE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
VTIBPTR:            0EE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
VBUFPTR:            0EEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
VNEXT:              0EEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1863 IN MAIN.asm
VHEAPPTR:           0EEE DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
VPOINTER:           0EF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 346 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
VREMAIN:            0EF2 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
VSAVEDIP:           0EF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           0EF6 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           0EF8 DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          0EFA DEFINED AT LINE 43 IN ram.asm
VTEMP1:             0EFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
VTEMP2:             0EFE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
VLASTDEF:           0F00 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           0F02 DEFINED AT LINE 50 IN ram.asm
TBPTR:              0F04 DEFINED AT LINE 51 IN ram.asm
TIB:                1000 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
BUF:                1100 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
PAD:                1200 DEFINED AT LINE 58 IN ram.asm
HEAP:               1300 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
