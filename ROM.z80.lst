0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 21               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 21               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 21               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 21               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 21               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 21               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 21               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 21               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 21               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 21               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 20               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 21               LD   (RST08),HL   
0094   22 D2 21               LD   (RST10),HL   
0097   22 D4 21               LD   (RST18),HL   
009A   22 D6 21               LD   (RST20),HL   
009D   22 D8 21               LD   (RST28),HL   
00A0   22 DA 21               LD   (RST30),HL   
00A3   22 DE 21               LD   (INTVEC),HL   
00A6   22 E0 21               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 21               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 21               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 20               LD   sp,STACK   
00C6   CD 14 0C               CALL   init   
00C9   C3 32 0C               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TRESERV:   EQU   0   ; reserved
00CC                TNUMBER:   EQU   1   ; number
00CC                TSTRING:   EQU   2   ; string
00CC                TPOINTER:   EQU   3   ; pointer
00CC                TARRAY:   EQU   4   ; array
00CC                TBLOCK:   EQU   5   ; block
00CC                TLAMBDA:   EQU   6   ; lambda
00CC                TARGLST:   EQU   7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 23                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 24                  DW   BUF   ; vBUFPtr pointer into BUF
0188   B8 0C                  DW   next   ; nNext
018A   00 26                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6D 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A7 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 CD 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 36 05               JP   rbrace   
031E                TICK_:       
031E   C3 92 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 D9 07               JP   semicolon   
0324                DOT_:        
0324   C3 D6 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 CB 07               JP   underscore   
032A                COLON_:      
032A   C3 96 04               JP   colon   
032D                UPCASE_:      
032D   C3 4F 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 54 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 66 07               JP   question   
0336                STAR_:       
0336   C3 7F 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 9B 07               JP   num   
0341                HASH_:       
0341   C3 32 07               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 8E 06               JP   caret   
034A                COMMA_:      
034A   C3 A9 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 18 08               JP   dblquote   
0350                MINUS_:      
0350   C3 40 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 85 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 6D 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA 05 08               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA F5 07               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 75 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 7A 06               JP   lessthan   
037F                SLASH_:      
037F   C3 B8 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 D1 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 87 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 21            LD   de,(vPointer)   
039D   21 F2 21               LD   hl,vPointer   
03A0   C3 30 0B               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 21               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 21               LD   hl,(vHeapPtr)   ; hl = array[-3]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E 04                  LD   a,TARRAY   
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438                ARRAYEND1:      
0438   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043B   77                     LD   (hl),a   ; write lsb of array item
043C   23                     INC   hl   ; move to msb of array item
043D   3A E6 21               LD   a,(vDataWidth)   ; vDataWidth=1?
0440   3D                     DEC   a   
0441   28 05                  JR   z,arrayEnd2   
0443   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0446   77                     LD   (hl),a   ; write msb of array item
0447   23                     INC   hl   ; move to next word in array
0448                ARRAYEND2:      
0448   FD 2B                  DEC   iy   ; move to next word on stack
044A   FD 2B                  DEC   iy   
044C   0B                     DEC   bc   ; dec items count
044D   79                     LD   a,c   ; if not zero loop
044E   B0                     OR   b   
044F   20 E7                  JR   nz,arrayEnd1   
0451   EB                     EX   de,hl   ; de = end of array, hl = BP
0452   F9                     LD   sp,hl   ; sp = BP
0453   E1                     POP   hl   ; de = end of array, hl = old BP
0454   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0455   FD 62                  LD   iyh,d   
0457   FD 6B                  LD   iyl,e   
0459   D1                     POP   de   ; pop arg_list (discard)
045A   D1                     POP   de   ; pop first_arg* (discard)
045B   D1                     POP   de   ; pop IP (discard)
045C   ED 5B F0 21            LD   de,(vHeapPtr)   ; de = array[-4]
0460   13                     INC   de   ; de = array[0]
0461   13                     INC   de   
0462   13                     INC   de   
0463   D5                     PUSH   de   ; return array[0]
0464   22 F0 21               LD   (vHeapPtr),hl   ; move heap* to end of array
0467   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
046B   DD E9                  JP   (ix)   
046D                             ; index of an array, based on vDataWidth
046D                             ; array num -- value    ; also sets vPointer to address
046D                ARRINDEX:      
046D   E1                     POP   hl   ; hl = index
046E   D1                     POP   de   ; de = array
046F   3A E6 21               LD   a,(vDataWidth)   ; a = data width
0472   3D                     DEC   a   
0473   28 01                  JR   z,arrIndex1   
0475                ARRINDEX0:      
0475   29                     ADD   hl,hl   ; if data width = 2 then double
0476                ARRINDEX1:      
0476   19                     ADD   hl,de   ; add addr
0477   22 F2 21               LD   (vPointer),hl   ; store address in setter
047A   16 00                  LD   d,0   
047C   5E                     LD   e,(hl)   
047D   B7                     OR   a   ; check data width again
047E   28 02                  JR   z,arrIndex2   
0480   23                     INC   hl   
0481   56                     LD   d,(hl)   
0482                ARRINDEX2:      
0482   D5                     PUSH   de   
0483   DD E9                  JP   (ix)   
0485                             ; value _oldValue --            ; uses address in vPointer
0485                ASSIGN:      
0485   E1                     POP   hl   ; discard last accessed value
0486   E1                     POP   hl   ; hl = new value
0487                ASSIGN0:      
0487   EB                     EX   de,hl   ; de = new value
0488                ASSIGNX:      
0488   2A F2 21               LD   hl,(vPointer)   
048B   73                     LD   (hl),e   
048C   3A E6 21               LD   a,(vDataWidth)   
048F   3D                     DEC   a   ; is it byte?
0490   28 02                  JR   z,assign1   
0492   23                     INC   hl   
0493   72                     LD   (hl),d   
0494                ASSIGN1:      
0494   DD E9                  JP   (ix)   
0496                             ; arg_list - parses input (ab:c)
0496                             ; names after the : represent uninitialised locals
0496                             ; return values are the state of the stack after the block ends
0496                COLON:       
0496                ARGLIST:      
0496   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0499   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap*
049C   23                     INC   hl   ; skip length field to start
049D   23                     INC   hl   
049E   E5                     PUSH   hl   ; save start of arg_list
049F   03                     INC   bc   ; point to next char
04A0                ARGLIST1:      
04A0   0A                     LD   a,(bc)   
04A1   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A3   20 03                  JR   nz,arglist1a   
04A5   14                     INC   d   ; non zero value local count acts as flag
04A6   18 10                  JR   arglist3   
04A8                ARGLIST1A:      
04A8   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AA   38 0F                  JR   c,arglist4   
04AC   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AE   30 0B                  JR   nc,arglist4   
04B0                ARGLIST2:      
04B0   77                     LD   (hl),a   
04B1   23                     INC   hl   
04B2   1C                     INC   e   ; increase arg count
04B3   AF                     XOR   a   
04B4   B2                     OR   d   
04B5   28 01                  JR   z,arglist3   
04B7   14                     INC   d   ; if d > 0 increase local count
04B8                ARGLIST3:      
04B8   03                     INC   bc   ; point to next char
04B9   18 E5                  JR   arglist1   
04BB                ARGLIST4:      
04BB   0B                     DEC   bc   
04BC   AF                     XOR   a   
04BD   B2                     OR   d   
04BE   28 01                  JR   z,arglist5   
04C0   15                     DEC   d   ; remove initial inc
04C1                ARGLIST5:      
04C1   23                     INC   hl   
04C2   22 F0 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C5   E1                     POP   hl   ; hl = start of arg_list
04C6   E5                     PUSH   hl   ; return start of arg_list
04C7   2B                     DEC   hl   ; write number of locals at start - 1
04C8   72                     LD   (hl),d   
04C9   2B                     DEC   hl   ; write number of args + locals at start - 2
04CA   73                     LD   (hl),e   
04CB   DD E9                  JP   (ix)   
04CD                LBRACE:      
04CD                BLOCKSTART:      
04CD   C5                     PUSH   bc   ; return pointer to first { of block
04CE   03                     INC   bc   
04CF   16 01                  LD   d,1   ; nesting: count first parenthesis
04D1                BLOCKSTART1:      ; Skip to end of definition
04D1   0A                     LD   a,(bc)   ; Get the next character
04D2   03                     INC   bc   ; Point to next character
04D3   FE 21                  CP   " " + 1   ; ignore whitespace
04D5   38 FA                  JR   c,blockStart1   
04D7   FE 29                  CP   ")"   
04D9   28 2D                  JR   z,blockStart4   
04DB   FE 7D                  CP   "}"   
04DD   28 29                  JR   z,blockStart4   
04DF   FE 5D                  CP   "]"   
04E1   28 25                  JR   z,blockStart4   
04E3   FE 28                  CP   "("   
04E5   28 16                  JR   z,blockStart2   
04E7   FE 7B                  CP   "{"   
04E9   28 12                  JR   z,blockStart2   
04EB   FE 5B                  CP   "["   
04ED   28 0E                  JR   z,blockStart2   
04EF   FE 27                  CP   "'"   
04F1   28 0D                  JR   z,blockStart3   
04F3   FE 60                  CP   "`"   
04F5   28 09                  JR   z,blockStart3   
04F7   FE 22                  CP   DQUOTE   
04F9   28 05                  JR   z,blockStart3   
04FB   18 D4                  JR   blockStart1   
04FD                BLOCKSTART2:      
04FD   14                     INC   d   
04FE   18 D1                  JR   blockStart1   
0500                BLOCKSTART3:      
0500   3E 80                  LD   a,$80   
0502   AA                     XOR   d   
0503   47                     LD   b,a   
0504   20 CB                  JR   nz,blockStart1   
0506   18 03                  JR   blockStart5   
0508                BLOCKSTART4:      
0508   15                     DEC   d   
0509   20 C6                  JR   nz,blockStart1   ; get the next element
050B                BLOCKSTART5:      
050B   60 69                  LD   hl,bc   ; hl = IP
050D   11 00 26               LD   de,HEAP   ; is IP pointing to object in heap
0510   B7                     OR   a   ; IP - HEAP
0511   ED 52                  SBC   hl,de   
0513   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0515   28 1C                  JR   z,blockStart6   
0517   60 69                  LD   hl,bc   ; hl = IP
0519   D1                     POP   de   ; de = block*
051A   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
051E   B7                     OR   a   ; bc = size
051F   ED 52                  SBC   hl,de   
0521   44 4D                  LD   bc,hl   
0523   EB                     EX   de,hl   ; hl = block* de = heap*
0524   ED 5B F0 21            LD   de,(vHeapPtr)   
0528   D5                     PUSH   de   ; return hblock*
0529   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052B   ED 53 F0 21            LD   (vHeapPtr),de   ; heap* += size
052F   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0533                BLOCKSTART6:      
0533   0B                     DEC   bc   ; balanced, exit
0534   DD E9                  JP   (ix)   
0536                RBRACE:      
0536                BLOCKEND:      
0536   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0539   FD 56 01               LD   d,(iy+1)   
053C   ED 53 FE 21            LD   (vTemp1),de   
0540   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0543   FD 56 07               LD   d,(iy+7)   
0546   ED 53 00 22            LD   (vTemp2),de   
054A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054D   FD 56 03               LD   d,(iy+3)   
0550   EB                     EX   de,hl   
0551   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0554   FD 56 01               LD   d,(iy+1)   
0557   13                     INC   de   ; for carry flag <=
0558   B7                     OR   a   
0559   ED 52                  SBC   hl,de   
055B   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055D   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055F   FD 5D                  LD   e,iyl   
0561   21 08 00               LD   hl,8   
0564   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0565   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0566   18 0C                  JR   blockEnd2   
0568                BLOCKEND1:      ; same scope
0568   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056B   FD 56 03               LD   d,(iy+3)   
056E   EB                     EX   de,hl   
056F   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0571   FD 5D                  LD   e,iyl   
0573   EB                     EX   de,hl   
0574                BLOCKEND2:      
0574   44 4D                  LD   bc,hl   ; bc = hl = BP
0576   B7                     OR   a   ; hl = BP - SP = count
0577   ED 72                  SBC   hl,sp   
0579   7D                     LD   a,l   
057A   B4                     OR   h   
057B   28 09                  JR   z,blockEnd3   
057D   C5                     PUSH   bc   ; bc = count, hl = BP
057E   44 4D                  LD   bc,hl   
0580   E1                     POP   hl   
0581   2B                     DEC   hl   ; hl = BP-1
0582   1B                     DEC   de   ; de = args*-1
0583   ED B8                  LDDR      
0585   13                     INC   de   
0586                BLOCKEND3:      
0586   EB                     EX   de,hl   ; sp = de = new tos*
0587   F9                     LD   sp,hl   
0588   ED 4B 00 22            LD   bc,(vTemp2)   
058C   FD 2A FE 21            LD   iy,(vTemp1)   
0590   DD E9                  JP   (ix)   
0592                TICK:        
0592                CHAR:        
0592   21 00 00               LD   hl,0   ; if "" is empty or null
0595                CHAR1:       
0595   03                     INC   bc   ; point to next char
0596   0A                     LD   a,(bc)   
0597   FE 27                  CP   "'"   ; ' is the terminator
0599   28 09                  JR   z,char3   
059B   FE 5C                  CP   $5c   ; \ is the escape
059D   20 02                  JR   nz,char2   
059F   03                     INC   bc   
05A0   0A                     LD   a,(bc)   
05A1                CHAR2:       
05A1   6F                     LD   l,a   
05A2   18 F1                  JR   char1   
05A4                CHAR3:       
05A4   E5                     PUSH   hl   
05A5   DD E9                  JP   (ix)   
05A7                BACKSLASH:      
05A7   DD E9                  JP   (ix)   
05A9                             ; , discard stack item
05A9                             ; x y -- x
05A9                COMMA:       
05A9                DISCARD:      
05A9   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AB   FD 5D                  LD   e,iyl   
05AD   EB                     EX   de,hl   
05AE   B7                     OR   a   
05AF   ED 72                  SBC   hl,sp   
05B1   CB 7C                  BIT   7,h   
05B3   20 01                  JR   nz,discard1   
05B5   E1                     POP   hl   
05B6                DISCARD1:      
05B6   DD E9                  JP   (ix)   
05B8                SLASH:       
05B8   03                     INC   bc   
05B9   0A                     LD   a,(bc)   
05BA   FE 5C                  CP   $5C   
05BC   CA BA 08               JP   z,comment   
05BF   FE 41                  CP   "A"   
05C1   D2 5F 08               JP   nc,command   
05C4   0B                     DEC   bc   
05C5   D1                     POP   de   
05C6   E1                     POP   hl   
05C7   C5                     PUSH   bc   ; preserve the IP
05C8   44 4D                  LD   bc,hl   
05CA   CD 54 06               CALL   divide   
05CD   EB                     EX   de,hl   
05CE   ED 53 F4 21            LD   (vRemain),de   
05D2   C1                     POP   bc   
05D3   C3 96 03               JP   add3   
05D6                DOT:         
05D6   03                     INC   bc   
05D7   0A                     LD   a,(bc)   
05D8   FE 61                  CP   "a"   
05DA   CA F0 05               JP   z,dotArray   
05DD   FE 68                  CP   "h"   
05DF   CA 04 06               JP   z,dotHex   
05E2   FE 73                  CP   "s"   
05E4   CA 18 06               JP   z,dotStr   
05E7   FE 63                  CP   "c"   
05E9   CA 2C 06               JP   z,dotChar   
05EC   0B                     DEC   bc   
05ED   C3 40 06               JP   dotDec   
05F0                DOTARRAY:      
05F0   CD 8E 06               CALL   go   
05F3   00 00                  DW   NUL   ; null closure
05F5   F9 05                  DW   dotArray_block   
05F7   B9 0B                  DW   args1A0L   
05F9                DOTARRAY_BLOCK:      
05F9   7B 24 61 2F 62 61 2F 70 78 7D 00 .CSTR   "{$a/ba/px}"   ; block
0604                DOTHEX:      
0604   CD 8E 06               CALL   go   
0607   00 00                  DW   NUL   ; null closure
0609   0D 06                  DW   dotHex_block   
060B   B9 0B                  DW   args1A0L   
060D                DOTHEX_BLOCK:      
060D   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
0618                DOTSTR:      
0618   CD 8E 06               CALL   go   
061B   00 00                  DW   NUL   ; null closure
061D   21 06                  DW   dotStr_block   
061F   B9 0B                  DW   args1A0L   
0621                DOTSTR_BLOCK:      
0621   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
062C                DOTCHAR:      
062C   CD 8E 06               CALL   go   
062F   00 00                  DW   NUL   ; null closure
0631   35 06                  DW   dotChar_block   
0633   B9 0B                  DW   args1A0L   
0635                DOTCHAR_BLOCK:      
0635   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0640                DOTDEC:      
0640   CD 8E 06               CALL   go   
0643   00 00                  DW   NUL   ; closure
0645   49 06                  DW   dotDec_block   
0647   B9 0B                  DW   args1A0L   
0649                DOTDEC_BLOCK:      
0649   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
0654                             ; division subroutine.
0654                             ; bc: divisor, de: dividend, hl: remainder
0654                DIVIDE:      
0654   21 00 00               LD   hl,0   ; zero the remainder
0657   3E 10                  LD   a,16   ; loop counter
0659                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0659   CB 21                  SLA   c   
065B   CB 10                  RL   b   
065D   ED 6A                  ADC   hl,hl   
065F   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0661   38 03                  JR   c,divide2   
0663   0C                     INC   c   
0664   18 01                  JR   divide3   
0666                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0666   19                     ADD   hl,de   
0667                DIVIDE3:      
0667   3D                     DEC   a   
0668   20 EF                  JR   nz,divide1   
066A   50 59                  LD   de,bc   ; result from bc to de
066C   C9                     RET      
066D                             ; hl = value1, de = value2
066D                             ; hl = result
066D                EQUALS:      
066D   B7                     OR   a   ; reset the carry flag
066E   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0670   28 10                  JR   z,true1   
0672   C3 88 06               JP   false1   
0675                             ; hl = value1 de = value2
0675                             ; hl = result
0675                LESSTHANEQ:      
0675   B7                     OR   a   
0676   ED 52                  SBC   hl,de   
0678   18 05                  JR   lessthan1   
067A                             ; hl = value1 de = value2
067A                             ; hl = result
067A                LESSTHAN:      
067A   B7                     OR   a   
067B   ED 52                  SBC   hl,de   
067D   28 09                  JR   z,false1   
067F                LESSTHAN1:      
067F   FA 88 06               JP   m,false1   
0682                TRUE1:       
0682   21 FF FF               LD   hl,TRUE   
0685   E5                     PUSH   hl   
0686   DD E9                  JP   (ix)   
0688                NULL1:       
0688                FALSE1:      
0688   21 00 00               LD   hl,FALSE   
068B   E5                     PUSH   hl   
068C   DD E9                  JP   (ix)   
068E                             ; execute a block of code which ends with }
068E                             ; creates a root scope if BP == stack
068E                             ; else uses outer scope
068E                CARET:       
068E                GO:          
068E   D1                     POP   de   ; de = block*
068F                GO1:         
068F   7B                     LD   a,e   ; if block* == null, exit
0690   B2                     OR   d   
0691   20 02                  JR   nz,go2   
0693   DD E9                  JP   (ix)   
0695                GO2:         
0695   1A                     LD   a,(de)   
0696   FE 7B                  CP   "{"   
0698   28 07                  JR   z,goBlock1   
069A   FE 28                  CP   "("   
069C   C2 D4 06               JP   nz,goLambda   
069F   13                     INC   de   ; de is the address to jump back to
06A0   D5                     PUSH   de   ; push de just before stack frame
06A1                GOBLOCK:      
06A1                GOBLOCK1:      
06A1   ED 53 FE 21            LD   (vTemp1),de   ; save de
06A5   21 80 20               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
06A8   FD 54                  LD   d,iyh   
06AA   FD 5D                  LD   e,iyl   
06AC   B7                     OR   a   ; if stack* == BP then this is the root_scope
06AD   ED 52                  SBC   hl,de   
06AF   ED 5B FE 21            LD   de,(vTemp1)   ; restore de
06B3   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06B4   B4                     OR   h   
06B5   3E 00                  LD   a,0   
06B7   28 6E                  JR   z,goLambda8   
06B9   C5                     PUSH   bc   ; push IP
06BA   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06BD   FD 46 05               LD   b,(iy+5)   
06C0   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06C3   FD 66 03               LD   h,(iy+3)   
06C6                GOBLOCK2:      
06C6   C5                     PUSH   bc   ; arg_list*
06C7   E5                     PUSH   hl   ; first_arg*
06C8   FD E5                  PUSH   iy   ; push BP
06CA   FD 21 00 00            LD   iy,0   ; BP = SP
06CE   FD 39                  ADD   iy,sp   
06D0   42 4B                  LD   bc,de   ; bc = de = block*-1
06D2   DD E9                  JP   (ix)   
06D4                GOLAMBDA:      ; execute lambda
06D4   EB                     EX   de,hl   ; hl = lambda*
06D5   5E                     LD   e,(hl)   ; de = partial_array*
06D6   23                     INC   hl   
06D7   56                     LD   d,(hl)   
06D8   23                     INC   hl   
06D9   7B                     LD   a,e   ; if partial_array* == null skip
06DA   B2                     OR   d   
06DB   28 23                  JR   z,goLambda3   
06DD   ED 43 FE 21            LD   (vTemp1),bc   
06E1   22 00 22               LD   (vTemp2),hl   ; save bc,hl
06E4   EB                     EX   de,hl   ; hl = partial_array*
06E5   2B                     DEC   hl   ; skip type byte
06E6   2B                     DEC   hl   ; bc = count
06E7   46                     LD   b,(hl)   
06E8   2B                     DEC   hl   
06E9   4E                     LD   c,(hl)   
06EA   23                     INC   hl   ; hl = array data*
06EB   23                     INC   hl   
06EC   23                     INC   hl   
06ED   18 06                  JR   goLambda2   ; push each item on stack
06EF                GOLAMBDA1:      
06EF   5E                     LD   e,(hl)   ; de = partial item
06F0   23                     INC   hl   
06F1   56                     LD   d,(hl)   
06F2   23                     INC   hl   
06F3   D5                     PUSH   de   ; push on stack
06F4   0B                     DEC   bc   
06F5                GOLAMBDA2:      
06F5   79                     LD   a,c   ; if count != 0 then loop
06F6   B0                     OR   b   
06F7   20 F6                  JR   nz,goLambda1   
06F9   ED 4B FE 21            LD   bc,(vTemp1)   ; restore bc
06FD   2A 00 22               LD   hl,(vTemp2)   ; restore hl
0700                GOLAMBDA3:      
0700   5E                     LD   e,(hl)   ; de = block*
0701   23                     INC   hl   
0702   56                     LD   d,(hl)   
0703   23                     INC   hl   
0704   ED 53 FE 21            LD   (vTemp1),de   ; save block*
0708   5E                     LD   e,(hl)   ; de = arg_list*
0709   23                     INC   hl   
070A   56                     LD   d,(hl)   
070B   23                     INC   hl   
070C   EB                     EX   de,hl   ; hl = arg_list*
070D   ED 5B FE 21            LD   de,(vTemp1)   ; restore de = block*
0711   7D                     LD   a,l   ; if arg_list* == null a = 0
0712   B4                     OR   h   
0713   20 03                  JR   nz,goLambda4   
0715   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
0716   18 0F                  JR   goLambda8   
0718                GOLAMBDA4:      ; allocate locals
0718   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0719   7E                     LD   a,(hl)   
071A   18 03                  JR   goLambda6   
071C                GOLAMBDA5:      ; loop
071C   3B                     DEC   sp   
071D   3B                     DEC   sp   
071E   3D                     DEC   a   
071F                GOLAMBDA6:      
071F   B7                     OR   a   
0720   20 FA                  JR   nz,goLambda5   ; end loop
0722                GOLAMBDA7:      
0722   2B                     DEC   hl   ; a = num_args* x 2
0723   7E                     LD   a,(hl)   
0724   23                     INC   hl   
0725   23                     INC   hl   
0726   87                     ADD   a,a   ; a *= 2
0727                GOLAMBDA8:      
0727   C5                     PUSH   bc   ; push IP
0728   44 4D                  LD   bc,hl   
072A   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
072D   85                     ADD   a,l   
072E   6F                     LD   l,a   
072F   39                     ADD   hl,sp   
0730   18 94                  JR   goBlock2   
0732                HASH:        
0732                HEXNUM:      
0732   21 00 00               LD   hl,0   ; Clear hl to accept the number
0735                HEXNUM1:      
0735   03                     INC   bc   
0736   0A                     LD   a,(bc)   ; Get the character which is a numeral
0737   CB 77                  BIT   6,a   ; is it uppercase alpha?
0739   28 02                  JR   z,hexnum2   ; no a decimal
073B   D6 07                  SUB   7   ; sub 7  to make $a - $F
073D                HEXNUM2:      
073D   D6 30                  SUB   $30   ; form decimal digit
073F   DA BD 07               JP   c,num2   
0742   FE 10                  CP   $0F+1   
0744   D2 BD 07               JP   nc,num2   
0747   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0748   29                     ADD   hl,hl   ; 4X
0749   29                     ADD   hl,hl   ; 8X
074A   29                     ADD   hl,hl   ; 16X
074B   85                     ADD   a,l   ; add into bottom of hl
074C   6F                     LD   l,a   
074D   18 E6                  JR   hexnum1   
074F                UPCASE:      
074F   0A                     LD   a,(bc)   ; a = identifier char
0750   D6 41                  SUB   "A"   ; "A" = 0
0752   18 05                  JR   ident1   
0754                LOWCASE:      
0754   0A                     LD   a,(bc)   
0755   D6 61                  SUB   "a"   
0757   C6 1A                  ADD   a,26   
0759                IDENT1:      
0759   87                     ADD   a,a   ; l = a * 2
075A   6F                     LD   l,a   
075B   26 21                  LD   h,msb(vars)   
075D   22 F2 21               LD   (vPointer),hl   ; store address in setter
0760   5E                     LD   e,(hl)   
0761   23                     INC   hl   
0762   56                     LD   d,(hl)   
0763   D5                     PUSH   de   
0764   DD E9                  JP   (ix)   
0766                             ; if
0766                             ; condition then -- value
0766                QUESTION:      
0766                IF:          
0766   03                     INC   bc   
0767   0A                     LD   a,(bc)   
0768   FE 3F                  CP   "?"   
076A   28 06                  JR   z,ifte   
076C   0B                     DEC   bc   
076D   11 00 00               LD   de,NUL   ; NUL pointer for else
0770   18 01                  JR   ifte1   
0772                             ; ifte
0772                             ; condition then else -- value
0772                IFTE:        
0772   D1                     POP   de   ; de = else
0773                IFTE1:       
0773   E1                     POP   hl   ; hl = then
0774   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0775   7C                     LD   a,h   
0776   B5                     OR   l   
0777   E1                     POP   hl   ; hl = then
0778   CA 8F 06               JP   z,go1   ; if z de = else
077B   EB                     EX   de,hl   ; condition = false, de = then
077C   C3 8F 06               JP   go1   
077F                STAR:        
077F                MUL:         
077F   D1                     POP   de   ; get first value
0780   E1                     POP   hl   
0781                MUL2:        
0781   C5                     PUSH   bc   ; Preserve the IP
0782   44 4D                  LD   bc,hl   ; bc = 2nd value
0784   21 00 00               LD   hl,0   
0787   3E 10                  LD   a,16   
0789                MUL3:        
0789   29                     ADD   hl,hl   
078A   CB 13                  RL   e   
078C   CB 12                  RL   d   
078E   30 04                  JR   nc,$+6   
0790   09                     ADD   hl,bc   
0791   30 01                  JR   nc,$+3   
0793   13                     INC   de   
0794   3D                     DEC   a   
0795   20 F2                  JR   nz,mul3   
0797   C1                     POP   bc   ; Restore the IP
0798   C3 96 03               JP   add3   
079B                NUM:         
079B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
079E   0A                     LD   a,(bc)   ; Get numeral or -
079F   FE 2D                  CP   "-"   
07A1   20 01                  JR   nz,num0   
07A3   03                     INC   bc   ; move to next char, no flags affected
07A4                NUM0:        
07A4   08                     EX   af,af'   ; save zero flag = 0 for later
07A5                NUM1:        
07A5   0A                     LD   a,(bc)   ; read digit
07A6   D6 30                  SUB   "0"   ; less than 0?
07A8   38 13                  JR   c,num2   ; not a digit, exit loop
07AA   FE 0A                  CP   10   ; greater that 9?
07AC   30 0F                  JR   nc,num2   ; not a digit, exit loop
07AE   03                     INC   bc   ; inc IP
07AF   54 5D                  LD   de,hl   ; multiply hl * 10
07B1   29                     ADD   hl,hl   
07B2   29                     ADD   hl,hl   
07B3   19                     ADD   hl,de   
07B4   29                     ADD   hl,hl   
07B5   85                     ADD   a,l   ; add digit in a to hl
07B6   6F                     LD   l,a   
07B7   3E 00                  LD   a,0   
07B9   8C                     ADC   a,h   
07BA   67                     LD   h,a   
07BB   18 E8                  JR   num1   
07BD                NUM2:        
07BD   0B                     DEC   bc   
07BE   08                     EX   af,af'   ; restore zero flag
07BF   20 07                  JR   nz,num3   
07C1   EB                     EX   de,hl   ; negate the value of hl
07C2   21 00 00               LD   hl,0   
07C5   B7                     OR   a   ; jump to sub2
07C6   ED 52                  SBC   hl,de   
07C8                NUM3:        
07C8   E5                     PUSH   hl   ; Put the number on the stack
07C9   DD E9                  JP   (ix)   ; and process the next character
07CB                UNDERSCORE:      
07CB                REMAIN:      
07CB   2A F4 21               LD   hl,(vRemain)   
07CE   E5                     PUSH   hl   
07CF   DD E9                  JP   (ix)   
07D1                RPAREN:      
07D1   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07D4   FD 46 09               LD   b,(iy+9)   
07D7   DD E9                  JP   (ix)   
07D9                             ; arg_list* block* -- ptr
07D9                SEMICOLON:      
07D9   D1                     POP   de   ; de = block* hl = heap*
07DA   2A F0 21               LD   hl,(vHeapPtr)   
07DD   AF                     XOR   a   
07DE   77                     LD   (hl),a   ; compile null partial_array*
07DF   23                     INC   hl   
07E0   77                     LD   (hl),a   
07E1   23                     INC   hl   
07E2   73                     LD   (hl),e   ; compile block*
07E3   23                     INC   hl   
07E4   72                     LD   (hl),d   
07E5   23                     INC   hl   
07E6   D1                     POP   de   ; de = block*
07E7   73                     LD   (hl),e   ; compile arg_list*
07E8   23                     INC   hl   
07E9   72                     LD   (hl),d   
07EA   23                     INC   hl   
07EB   ED 5B F0 21            LD   de,(vHeapPtr)   ; return lambda*
07EF   D5                     PUSH   de   
07F0   22 F0 21               LD   (vHeapPtr),hl   ; heap* += 4
07F3   DD E9                  JP   (ix)   
07F5                             ; shiftLeft
07F5                             ; value count -- value2          shift left count places
07F5                SHIFTLEFT:      
07F5   50 59                  LD   de,bc   ; save IP
07F7   C1                     POP   bc   ; bc = count
07F8   41                     LD   b,c   ; b = loop counter
07F9   E1                     POP   hl   
07FA   04                     INC   b   ; test for counter=0 case
07FB   18 01                  JR   shiftLeft2   
07FD                SHIFTLEFT1:      
07FD   29                     ADD   hl,hl   ; left shift hl
07FE                SHIFTLEFT2:      
07FE   10 FD                  DJNZ   shiftLeft1   
0800   E5                     PUSH   hl   
0801   42 4B                  LD   bc,de   ; restore IP
0803   DD E9                  JP   (ix)   
0805                             ; shiftRight
0805                             ; value count -- value2          shift left count places
0805                SHIFTRIGHT:      
0805   50 59                  LD   de,bc   ; save IP
0807   C1                     POP   bc   ; bc = count
0808   41                     LD   b,c   ; b = loop counter
0809   E1                     POP   hl   
080A   04                     INC   b   ; test for counter=0 case
080B   18 04                  JR   shiftRight2   
080D                SHIFTRIGHT1:      
080D   CB 3C                  SRL   h   ; right shift hl
080F   CB 1D                  RR   l   
0811                SHIFTRIGHT2:      
0811   10 FA                  DJNZ   shiftRight1   
0813   E5                     PUSH   hl   
0814   42 4B                  LD   bc,de   ; restore IP
0816   DD E9                  JP   (ix)   
0818                             ; string
0818                             ; -- ptr                        ; points to start of string chars,
0818                             ; length is stored at start - 2 bytes
0818                DBLQUOTE:      
0818                STRING:      
0818   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap*
081B   23                     INC   hl   ; skip length field to start
081C   23                     INC   hl   
081D   E5                     PUSH   hl   ; save start of string
081E   03                     INC   bc   ; point to next char
081F   18 03                  JR   string2   
0821                STRING1:      
0821   77                     LD   (hl),a   
0822   23                     INC   hl   ; increase count
0823   03                     INC   bc   ; point to next char
0824                STRING2:      
0824   0A                     LD   a,(bc)   
0825   FE 22                  CP   DQUOTE   ; " is the string terminator
0827   28 04                  JR   z,string3   
0829   FE 60                  CP   "`"   ; ` is the string terminator used in testing
082B   20 F4                  JR   nz,string1   
082D                STRING3:      
082D   AF                     XOR   a   ; write NUL to terminate string
082E   77                     LD   (hl),a   ; hl = end of string
082F   23                     INC   hl   
0830   22 F0 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0833   2B                     DEC   hl   ; hl = end of string without terminator
0834   D1                     POP   de   ; de = start of string
0835   D5                     PUSH   de   ; return start of string
0836   B7                     OR   a   ; hl = length bytes, de = start of string
0837   ED 52                  SBC   hl,de   
0839   EB                     EX   de,hl   
083A   2B                     DEC   hl   ; write length bytes to length field at start - 2
083B   72                     LD   (hl),d   
083C   2B                     DEC   hl   
083D   73                     LD   (hl),e   
083E   DD E9                  JP   (ix)   
0840                MINUS:       ; negative sign or subtract
0840   03                     INC   bc   ; check if sign of a number
0841   0A                     LD   a,(bc)   
0842   0B                     DEC   bc   
0843   FE 30                  CP   "0"   
0845   38 05                  JR   c,sub   
0847   FE 3A                  CP   "9"+1   
0849   DA 3E 03               JP   c,num_   
084C                SUB:         ; Subtract the value 2nd on stack from top of stack
084C   03                     INC   bc   
084D   FE 2D                  CP   "-"   
084F   20 05                  JR   nz,sub1   
0851   E1                     POP   hl   
0852   2B                     DEC   hl   
0853   C3 87 04               JP   assign0   
0856                SUB1:        
0856   0B                     DEC   bc   
0857   D1                     POP   de   
0858   E1                     POP   hl   
0859   B7                     OR   a   
085A   ED 52                  SBC   hl,de   
085C   C3 96 03               JP   add3   
085F                             ;*******************************************************************
085F                             ; commands
085F                             ; a contains command letter
085F                             ; bc points to command letter
085F                             ;*******************************************************************
085F                COMMAND:      
085F   FE 2F                  CP   "/"   ; // comment
0861   CA BA 08               JP   z,comment   
0864   FE 61                  CP   "a"   ; /ab absolute /ad address of
0866   28 5B                  JR   z,command_a   
0868   FE 62                  CP   "b"   ; /ba buf array /bb buf block
086A                             ; /bd buf decimal /bp buf params
086A                             ; /bs buf string /br break
086A   CA 00 09               JP   z,command_b   
086D   FE 63                  CP   "c"   ; /c chars
086F   CA 45 0B               JP   z,chars   
0872   FE 64                  CP   "d"   ; /d decimal
0874   CA 4D 0B               JP   z,decimal   
0877   FE 66                  CP   "f"   ; /f false
0879   CA 88 06               JP   z,false1   
087C   FE 68                  CP   "h"   ; /h hexadecimal
087E   CA 55 0B               JP   z,hexadecimal   
0881   FE 69                  CP   "i"   ; /in input iv invert
0883   CA 36 0B               JP   z,command_i   
0886   FE 6B                  CP   "k"   ; /k key
0888   CA 66 0B               JP   z,key   
088B   FE 6E                  CP   "n"   ; /n numbers
088D   CA 78 0B               JP   z,numbers   
0890   FE 6F                  CP   "o"   ; /o output
0892   CA 6F 0B               JP   z,output   
0895   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0897   CA 62 0A               JP   z,command_p   
089A   FE 73                  CP   "s"   ; /s size
089C   CA AF 0A               JP   z,size   
089F   FE 74                  CP   "t"   ; /t true
08A1   CA 82 06               JP   z,true1   
08A4   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
08A6   CA E3 0A               JP   z,command_v   
08A9   FE 78                  CP   "x"   ; /x xor
08AB   CA B7 03               JP   z,xor   
08AE   FE 7A                  CP   "z"   ; /z
08B0   CA 80 0B               JP   z,zprt   
08B3                ERROR1:      
08B3   21 01 00               LD   hl,1   ; error 1: unknown command
08B6   E5                     PUSH   hl   
08B7   C3 D8 0C               JP   error   
08BA                COMMENT:      
08BA   03                     INC   bc   ; point to next char
08BB   0A                     LD   a,(bc)   
08BC   FE 20                  CP   " "   ; terminate on any char less than SP
08BE   30 FA                  JR   nc,comment   
08C0   0B                     DEC   bc   
08C1   DD E9                  JP   (ix)   
08C3                COMMAND_A:      
08C3   03                     INC   bc   
08C4   0A                     LD   a,(bc)   
08C5   FE 62                  CP   "b"   
08C7   CA D2 08               JP   z,absolute   
08CA   FE 64                  CP   "d"   
08CC   CA DF 08               JP   z,addrOf   
08CF   C3 B3 08               JP   error1   
08D2                             ; /ab absolute
08D2                             ; num -- num
08D2                ABSOLUTE:      
08D2   E1                     POP   hl   
08D3   CB 7C                  BIT   7,h   
08D5   C8                     RET   z   
08D6   AF                     XOR   a   
08D7   95                     SUB   l   
08D8   6F                     LD   l,a   
08D9   9F                     SBC   a,a   
08DA   94                     SUB   h   
08DB   67                     LD   h,a   
08DC   E5                     PUSH   hl   
08DD   DD E9                  JP   (ix)   
08DF                             ; /ad addrOf
08DF                             ; char -- addr
08DF                ADDROF:      
08DF   E1                     POP   hl   ; a = char
08E0   7D                     LD   a,l   
08E1   FE 7B                  CP   "z"+1   ; if a > z then exit
08E3   30 19                  JR   nc,addrOf2   
08E5   D6 41                  SUB   "A"   ; a - 65
08E7   38 15                  JR   c,addrOf2   ; if < A then exit
08E9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08EB   38 06                  JR   c,addrOf1   
08ED   D6 06                  SUB   "a"-("Z"+1)   
08EF   FE 1A                  CP   "Z"-"A"+1   
08F1   38 0B                  JR   c,addrOf2   ; if < a then exit
08F3                ADDROF1:      
08F3   87                     ADD   a,a   ; double a
08F4   21 00 21               LD   hl,VARS   ; hl = VARS + a
08F7   85                     ADD   a,l   
08F8   6F                     LD   l,a   
08F9   3E 00                  LD   a,0   
08FB   8C                     ADC   a,h   
08FC   67                     LD   h,a   
08FD   E5                     PUSH   hl   
08FE                ADDROF2:      
08FE   DD E9                  JP   (ix)   
0900                COMMAND_B:      
0900   03                     INC   bc   
0901   0A                     LD   a,(bc)   
0902   FE 61                  CP   "a"   ; /bc buffer array
0904   CA 28 09               JP   z,bufferArray   
0907   FE 63                  CP   "c"   ; /bc buffer char
0909   CA 79 09               JP   z,bufferChar   
090C   FE 64                  CP   "d"   ; /bd buffer decimal
090E   CA 88 09               JP   z,bufferDec   
0911   FE 68                  CP   "h"   ; /bd buffer hexadecimal
0913   CA E9 09               JP   z,bufferHex   
0916   FE 72                  CP   "r"   ; /br break
0918   CA 18 0A               JP   z,break   
091B   FE 73                  CP   "s"   ; /bs buffer string
091D   CA 32 0A               JP   z,bufferString   
0920   FE 78                  CP   "x"   ; /bx buffer x spaces
0922   CA 4E 0A               JP   z,bufferXSpaces   
0925   C3 B3 08               JP   error1   
0928                BUFFERARRAY:      
0928   ED 43 FE 21            LD   (vTemp1),bc   
092C   DD 22 00 22            LD   (vTemp2),ix   
0930   ED 5B EC 21            LD   de,(vBufPtr)   
0934   3E 5B                  LD   a,"["   
0936   12                     LD   (de),a   
0937   13                     INC   de   
0938   3E 20                  LD   a," "   
093A   12                     LD   (de),a   
093B   13                     INC   de   
093C   ED 53 EC 21            LD   (vBufPtr),de   
0940   E1                     POP   hl   
0941   2B                     DEC   hl   
0942   2B                     DEC   hl   
0943   46                     LD   b,(hl)   
0944   2B                     DEC   hl   
0945   4E                     LD   c,(hl)   
0946   23                     INC   hl   
0947   23                     INC   hl   
0948   23                     INC   hl   
0949   E5                     PUSH   hl   
094A   DD 21 5A 09            LD   ix,bufferArray3   
094E   DD E9                  JP   (ix)   
0950                BUFFERARRAY2:      
0950   0B                     DEC   bc   
0951   5E                     LD   e,(hl)   
0952   23                     INC   hl   
0953   56                     LD   d,(hl)   
0954   23                     INC   hl   
0955   E5                     PUSH   hl   
0956   D5                     PUSH   de   
0957   C3 88 09               JP   bufferDec   
095A                BUFFERARRAY3:      
095A   E1                     POP   hl   
095B   79                     LD   a,c   
095C   B0                     OR   b   
095D   20 F1                  JR   nz,bufferArray2   
095F   ED 5B EC 21            LD   de,(vBufPtr)   
0963   3E 20                  LD   a," "   
0965   12                     LD   (de),a   
0966   13                     INC   de   
0967   3E 5D                  LD   a,"]"   
0969   12                     LD   (de),a   
096A   13                     INC   de   
096B   ED 53 EC 21            LD   (vBufPtr),de   
096F   ED 4B FE 21            LD   bc,(vTemp1)   
0973   DD 2A 00 22            LD   ix,(vTemp2)   
0977   DD E9                  JP   (ix)   
0979                             ; /bc buffer char
0979                             ; char -- length
0979                BUFFERCHAR:      
0979   D1                     POP   de   ; e = char
097A   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
097D   73                     LD   (hl),e   ; e -> buffer*
097E   23                     INC   hl   ; buffer*++
097F   22 EC 21               LD   (vBufPtr),hl   ; save buffer*' in pointer
0982   11 01 00               LD   de,1   ; return 1 byte
0985   D5                     PUSH   de   
0986   DD E9                  JP   (ix)   
0988                             ; /bd buffer decimal
0988                             ; value -- length               ; length can be used to rewind buffer*
0988                BUFFERDEC:      
0988   ED 5B EC 21            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
098C   D9                     EXX      
098D   E1                     POP   hl   ; hl = value
098E   CD A0 09               CALL   bufferDec0   
0991   D9                     EXX      ; de = buffer*' bc = IP
0992   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
0995   ED 53 EC 21            LD   (vBufPtr),de   ; update buffer* with buffer*'
0999   EB                     EX   de,hl   ; hl = length
099A   B7                     OR   a   
099B   ED 52                  SBC   hl,de   
099D   E5                     PUSH   hl   ; return length
099E   DD E9                  JP   (ix)   
09A0                             ; hl = value
09A0                             ; de' = buffer*
09A0                             ; a, bc, de, hl destroyed
09A0                BUFFERDEC0:      
09A0   CB 7C                  BIT   7,h   
09A2   28 0C                  JR   z,bufferDec1   
09A4   D9                     EXX      
09A5   3E 2D                  LD   a,"-"   
09A7   12                     LD   (de),a   
09A8   13                     INC   de   
09A9   D9                     EXX      
09AA   AF                     XOR   a   
09AB   95                     SUB   l   
09AC   6F                     LD   l,a   
09AD   9F                     SBC   a,a   
09AE   94                     SUB   h   
09AF   67                     LD   h,a   
09B0                BUFFERDEC1:      
09B0   0E 00                  LD   c,0   ; leading zeros flag = false
09B2   11 F0 D8               LD   de,-10000   
09B5   CD D0 09               CALL   bufferDec2   
09B8   11 18 FC               LD   de,-1000   
09BB   CD D0 09               CALL   bufferDec2   
09BE   11 9C FF               LD   de,-100   
09C1   CD D0 09               CALL   bufferDec2   
09C4   1E F6                  LD   e,-10   
09C6   CD D0 09               CALL   bufferDec2   
09C9   0C                     INC   c   ; flag = true for at least digit
09CA   1E FF                  LD   e,-1   
09CC   CD D0 09               CALL   bufferDec2   
09CF   C9                     RET      
09D0                BUFFERDEC2:      
09D0   06 2F                  LD   b,"0"-1   
09D2                BUFFERDEC3:      
09D2   04                     INC   b   
09D3   19                     ADD   hl,de   
09D4   38 FC                  JR   c,bufferDec3   
09D6   ED 52                  SBC   hl,de   
09D8   3E 30                  LD   a,"0"   
09DA   B8                     CP   b   
09DB   20 05                  JR   nz,bufferDec4   
09DD   AF                     XOR   a   
09DE   B1                     OR   c   
09DF   C8                     RET   z   
09E0   18 01                  JR   bufferDec5   
09E2                BUFFERDEC4:      
09E2   0C                     INC   c   
09E3                BUFFERDEC5:      
09E3   78                     LD   a,b   
09E4   D9                     EXX      
09E5   12                     LD   (de),a   
09E6   13                     INC   de   
09E7   D9                     EXX      
09E8   C9                     RET      
09E9                             ; /bh buffer hex
09E9                             ; value -- length               ; length can be used to rewind buffer*
09E9                BUFFERHEX:      
09E9   E1                     POP   hl   ; hl = value
09EA   ED 5B EC 21            LD   de,(vBufPtr)   
09EE   7C                     LD   a,h   
09EF   CD 04 0A               CALL   bufferHex1   
09F2   7D                     LD   a,l   
09F3   CD 04 0A               CALL   bufferHex1   
09F6   EB                     EX   de,hl   
09F7   ED 5B EC 21            LD   de,(vBufPtr)   
09FB   22 EC 21               LD   (vBufPtr),hl   
09FE   B7                     OR   a   
09FF   ED 52                  SBC   hl,de   
0A01   E5                     PUSH   hl   
0A02   DD E9                  JP   (ix)   
0A04                BUFFERHEX1:      
0A04   F5                     PUSH   af   
0A05   1F                     RRA      
0A06   1F                     RRA      
0A07   1F                     RRA      
0A08   1F                     RRA      
0A09   CD 0D 0A               CALL   bufferHex2   
0A0C   F1                     POP   af   
0A0D                BUFFERHEX2:      
0A0D   E6 0F                  AND   0x0F   
0A0F   C6 90                  ADD   a,0x90   
0A11   27                     DAA      
0A12   CE 40                  ADC   a,0x40   
0A14   27                     DAA      
0A15   12                     LD   (de),a   
0A16   13                     INC   de   
0A17   C9                     RET      
0A18                             ; /br break from loop
0A18                             ; --
0A18                BREAK:       
0A18   E1                     POP   hl   
0A19   7D                     LD   a,l   
0A1A   B4                     OR   h   
0A1B   28 02                  JR   z,break1   
0A1D   DD E9                  JP   (ix)   
0A1F                BREAK1:      
0A1F   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0A21   FD 54                  LD   d,iyh   
0A23   21 08 00               LD   hl,8   
0A26   19                     ADD   hl,de   
0A27   23                     INC   hl   
0A28   23                     INC   hl   
0A29   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0A2C   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0A2F   C3 36 05               JP   blockEnd   
0A32                             ; /bs buffered string
0A32                             ; string* -- length
0A32                BUFFERSTRING:      
0A32   E1                     POP   hl   ; hl = string*
0A33   ED 5B EC 21            LD   de,(vBufPtr)   ; de = buffer*
0A37   18 03                  JR   bufferString1   
0A39                BUFFERSTRING0:      
0A39   12                     LD   (de),a   ; a -> buffer*
0A3A   13                     INC   de   ; string*++ buffer++
0A3B   23                     INC   hl   
0A3C                BUFFERSTRING1:      
0A3C   7E                     LD   a,(hl)   ; a <- string*
0A3D   B7                     OR   a   ; if NUL exit loop
0A3E   20 F9                  JR   nz,bufferString0   
0A40   2A EC 21               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0A43   ED 53 EC 21            LD   (vBufPtr),de   ; save buffer*' in pointer
0A47   EB                     EX   de,hl   ; hl = length
0A48   B7                     OR   a   
0A49   ED 52                  SBC   hl,de   
0A4B   E5                     PUSH   hl   ; return length
0A4C   DD E9                  JP   (ix)   
0A4E                             ; /bx buffered x spaces
0A4E                             ; length -- length
0A4E                BUFFERXSPACES:      
0A4E   D1                     POP   de   ; bc = length
0A4F   D5                     PUSH   de   ; return length
0A50   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
0A53   18 04                  JR   bufferXSpaces2   
0A55                BUFFERXSPACES1:      
0A55   36 20                  LD   (hl)," "   
0A57   23                     INC   hl   
0A58   1B                     DEC   de   
0A59                BUFFERXSPACES2:      
0A59   7B                     LD   a,e   
0A5A   B2                     OR   d   
0A5B   20 F8                  JR   nz,bufferXSpaces1   
0A5D   22 EC 21               LD   (vBufPtr),hl   ; save buffer*'
0A60   DD E9                  JP   (ix)   
0A62                COMMAND_P:      
0A62   03                     INC   bc   
0A63   0A                     LD   a,(bc)   
0A64   FE 61                  CP   "a"   
0A66   CA 7B 0A               JP   z,partial   
0A69   FE 63                  CP   "c"   
0A6B   CA 9B 0A               JP   z,printChars   
0A6E   FE 6B                  CP   "k"   
0A70   CA AD 0A               JP   z,printStack   
0A73   FE 78                  CP   "x"   
0A75   CA B8 0A               JP   z,printX   
0A78   C3 B3 08               JP   error1   
0A7B                             ; partial
0A7B                             ; array* lambda* -- lambda1*
0A7B                PARTIAL:      
0A7B   E1                     POP   hl   ; h1 = lambda*
0A7C   ED 5B F0 21            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A80   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0A84   01 06 00               LD   bc,6   ; bc = count
0A87   ED B0                  LDIR      ; clone lambda
0A89   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0A8D   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A90   ED 53 F0 21            LD   (vHeapPtr),de   ; heap* += 6
0A94   D1                     POP   de   ; de = array*
0A95   E5                     PUSH   hl   ; return partial_array*
0A96   73                     LD   (hl),e   ; compile array*
0A97   23                     INC   hl   
0A98   72                     LD   (hl),d   
0A99   DD E9                  JP   (ix)   
0A9B                             ; printChars
0A9B                             ; char* len --
0A9B                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A9B                PRINTCHARS:      
0A9B   E1                     POP   hl   
0A9C   2B                     DEC   hl   
0A9D   D1                     POP   de   
0A9E   C3 A3 0A               JP   printChars2   
0AA1                PRINTCHARS1:      
0AA1   13                     INC   de   
0AA2   2B                     DEC   hl   
0AA3                PRINTCHARS2:      
0AA3   1A                     LD   a,(de)   
0AA4   CD 85 00               CALL   putchar   
0AA7   7D                     LD   a,l   
0AA8   B4                     OR   h   
0AA9   20 F6                  JR   nz,printChars1   
0AAB   DD E9                  JP   (ix)   
0AAD                             ; /pk print stack
0AAD                             ; --
0AAD                PRINTSTACK:      
0AAD                             ;     ld (vTemp1),bc
0AAD                             ;     call printStr
0AAD                             ;     .cstr "=> "
0AAD                             ;     ld hl,STACK
0AAD                             ;     sbc hl,sp
0AAD                             ;     srl h
0AAD                             ;     rr l
0AAD                             ;     ld bc,hl
0AAD                             ;     ld hl,STACK
0AAD                             ;     jr printStack2
0AAD                             ; printStack1:
0AAD                             ;     dec bc
0AAD                             ;     dec hl
0AAD                             ;     ld d,(hl)
0AAD                             ;     dec hl
0AAD                             ;     ld e,(hl)
0AAD                             ;     ex de,hl
0AAD                             ;     call prthex
0AAD                             ;     ex de,hl
0AAD                             ;     ld a," "
0AAD                             ;     call putchar
0AAD                             ; printStack2:
0AAD                             ;     ld a,c
0AAD                             ;     or b
0AAD                             ;     jr nz,printStack1
0AAD                             ;     call prompt
0AAD                             ;     ld bc,(vTemp1)
0AAD   DD E9                  JP   (ix)   
0AAF                SIZE:        
0AAF   E1                     POP   hl   
0AB0   2B                     DEC   hl   
0AB1   2B                     DEC   hl   
0AB2   56                     LD   d,(hl)   
0AB3   2B                     DEC   hl   
0AB4   5E                     LD   e,(hl)   
0AB5   D5                     PUSH   de   
0AB6   DD E9                  JP   (ix)   
0AB8                PRINTX:      
0AB8   CD 8E 06               CALL   go   
0ABB   00 00                  DW   NUL   ; closure
0ABD   C1 0A                  DW   printX_block   
0ABF   B9 0B                  DW   args1A0L   
0AC1                PRINTX_BLOCK:      
0AC1   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0AE3                COMMAND_V:      
0AE3   03                     INC   bc   
0AE4   0A                     LD   a,(bc)   
0AE5   FE 62                  CP   "b"   
0AE7   CA 15 0B               JP   z,varBufPtr   
0AEA   FE 68                  CP   "h"   
0AEC   CA 1E 0B               JP   z,varHeapPtr   
0AEF   FE 74                  CP   "t"   
0AF1   CA 27 0B               JP   z,varTIBPtr   
0AF4   FE 42                  CP   "B"   
0AF6   CA 06 0B               JP   z,constBufStart   
0AF9   FE 48                  CP   "H"   
0AFB   CA 0B 0B               JP   z,constHeapStart   
0AFE   FE 54                  CP   "T"   
0B00   CA 10 0B               JP   z,constTIBStart   
0B03   C3 B3 08               JP   error1   
0B06                CONSTBUFSTART:      
0B06   11 00 24               LD   de,BUF   
0B09   18 28                  JR   constant   
0B0B                CONSTHEAPSTART:      
0B0B   11 00 26               LD   de,HEAP   
0B0E   18 23                  JR   constant   
0B10                CONSTTIBSTART:      
0B10   11 00 23               LD   de,TIB   
0B13   18 1E                  JR   constant   
0B15                VARBUFPTR:      
0B15   ED 5B EC 21            LD   de,(vBufPtr)   
0B19   21 EC 21               LD   hl,vBufPtr   
0B1C   18 12                  JR   variable   
0B1E                VARHEAPPTR:      
0B1E   ED 5B F0 21            LD   de,(vHeapPtr)   
0B22   21 F0 21               LD   hl,vHeapPtr   
0B25   18 09                  JR   variable   
0B27                VARTIBPTR:      
0B27   ED 5B EA 21            LD   de,(vTIBPtr)   
0B2B   21 EA 21               LD   hl,vTIBPtr   
0B2E   18 00                  JR   variable   
0B30                VARIABLE:      
0B30   22 F2 21               LD   (vPointer),hl   
0B33                CONSTANT:      
0B33   D5                     PUSH   de   
0B34   DD E9                  JP   (ix)   
0B36                COMMAND_I:      
0B36   03                     INC   bc   
0B37   0A                     LD   a,(bc)   
0B38   FE 6E                  CP   "n"   ; /in input
0B3A   CA 5B 0B               JP   z,input   
0B3D   FE 76                  CP   "v"   ; /iv invert
0B3F   CA C2 03               JP   z,invert   
0B42   C3 B3 08               JP   error1   
0B45                CHARS:       
0B45   21 01 00               LD   hl,1   
0B48                CHARS1:      
0B48   22 E6 21               LD   (vDataWidth),hl   
0B4B   DD E9                  JP   (ix)   
0B4D                DECIMAL:      
0B4D   21 0A 00               LD   hl,10   
0B50                DECIMAL1:      
0B50   22 E8 21               LD   (vNumBase),hl   
0B53   DD E9                  JP   (ix)   
0B55                HEXADECIMAL:      
0B55   21 10 00               LD   hl,16   
0B58   C3 50 0B               JP   decimal1   
0B5B                             ; Z80 port input
0B5B                             ; port -- value
0B5B                INPUT:       
0B5B   E1                     POP   hl   
0B5C   59                     LD   e,c   ; save IP
0B5D   4D                     LD   c,l   
0B5E   ED 68                  IN   l,(c)   
0B60   26 00                  LD   h,0   
0B62   4B                     LD   c,e   ; restore IP
0B63   E5                     PUSH   hl   
0B64   DD E9                  JP   (ix)   
0B66                KEY:         
0B66   CD 81 00               CALL   getchar   
0B69   26 00                  LD   h,0   
0B6B   6F                     LD   l,a   
0B6C   E5                     PUSH   hl   
0B6D   DD E9                  JP   (ix)   
0B6F                             ; Z80 port output
0B6F                             ; value port --
0B6F                OUTPUT:      
0B6F   E1                     POP   hl   
0B70   59                     LD   e,c   ; save IP
0B71   4D                     LD   c,l   
0B72   E1                     POP   hl   
0B73   ED 69                  OUT   (c),l   
0B75   4B                     LD   c,e   ; restore IP
0B76   DD E9                  JP   (ix)   
0B78                NUMBERS:      
0B78   21 02 00               LD   hl,2   
0B7B   C3 48 0B               JP   chars1   
0B7E                             ; 
0B7E                             ; 
0B7E                             ; 
0B7E                             ; 
0B7E                FILTER:      
0B7E                MAP:         
0B7E                SCAN:        
0B7E   DD E9                  JP   (ix)   
0B80                ZPRT:        
0B80   CD 8E 06               CALL   go   
0B83   00 00                  DW   NUL   ; closure
0B85   8D 0B                  DW   zprt_block   
0B87   8B 0B                  DW   zprt_args   
0B89   02                     DB   2   ; num args + locals
0B8A   01                     DB   1   ; num locals
0B8B                ZPRT_ARGS:      
0B8B   6E 73                  DB   "ns"   
0B8D                ZPRT_BLOCK:      
0B8D   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0BB4                             ;*******************************************************************
0BB4                             ; reusable arglists
0BB4                             ;*******************************************************************
0BB4                ARGS0A1L_:      ; zero args one local
0BB4   01                     DB   1   ; num args + locals
0BB5   01                     DB   1   ; num locals
0BB6                ARGS0A1L:      
0BB6   61                     DB   "a"   
0BB7                ARGS1A0L_:      ; one arg zero locals
0BB7   01                     DB   1   ; num args + locals
0BB8   00                     DB   0   ; num locals
0BB9                ARGS1A0L:      
0BB9   61                     DB   "a"   
0BBA                ARGS1A1L_:      ; one arg one local
0BBA   02                     DB   2   ; num args + locals
0BBB   01                     DB   1   ; num locals
0BBC                ARGS1A1L:      
0BBC   61 62                  DB   "ab"   
0BBE                ARGS2A0L_:      ; two args zero locals
0BBE   02                     DB   2   ; num args + locals
0BBF   00                     DB   0   ; num locals
0BC0                ARGS2A0L:      
0BC0   61 62                  DB   "ab"   
0BC2                             ;*******************************************************************
0BC2                             ; general routines
0BC2                             ;*******************************************************************
0BC2                PRTSTR0:      
0BC2   CD 85 00               CALL   putchar   
0BC5   23                     INC   hl   
0BC6                PRTSTR:      
0BC6   7E                     LD   a,(hl)   
0BC7   B7                     OR   a   
0BC8   20 F8                  JR   nz,prtstr0   
0BCA   C9                     RET      
0BCB                             ; **************************************************************************
0BCB                             ; calculate nesting value
0BCB                             ; a is char to be tested,
0BCB                             ; e is the nesting value (initially 0)
0BCB                             ; e is increased by ( and [
0BCB                             ; e is decreased by ) and ]
0BCB                             ; e has its bit 7 toggled by `
0BCB                             ; limited to 127 levels
0BCB                             ; **************************************************************************
0BCB                NESTING:      
0BCB   FE 22                  CP   DQUOTE   ; quote char
0BCD   28 06                  JR   z,nesting0   
0BCF   FE 60                  CP   "`"   ; quote char
0BD1   28 02                  JR   z,nesting0   
0BD3   18 0A                  JR   nesting1   
0BD5                NESTING0:      
0BD5   CB 7B                  BIT   7,e   
0BD7   28 03                  JR   z,nesting1a   
0BD9   CB BB                  RES   7,e   
0BDB   C9                     RET      
0BDC                NESTING1A:      
0BDC   CB FB                  SET   7,e   
0BDE   C9                     RET      
0BDF                NESTING1:      
0BDF   CB 7B                  BIT   7,e   
0BE1   C0                     RET   nz   
0BE2   FE 7B                  CP   "{"   
0BE4   28 08                  JR   z,nesting2   
0BE6   FE 5B                  CP   "["   
0BE8   28 04                  JR   z,nesting2   
0BEA   FE 28                  CP   "("   
0BEC   20 02                  JR   nz,nesting3   
0BEE                NESTING2:      
0BEE   1C                     INC   e   
0BEF   C9                     RET      
0BF0                NESTING3:      
0BF0   FE 7D                  CP   "}"   
0BF2   28 07                  JR   z,nesting4   
0BF4   FE 5D                  CP   "]"   
0BF6   28 03                  JR   z,nesting4   
0BF8   FE 29                  CP   ")"   
0BFA   C0                     RET   nz   
0BFB                NESTING4:      
0BFB   1D                     DEC   e   
0BFC   C9                     RET      
0BFD                PROMPT:      
0BFD   CD 0D 0C               CALL   printStr   
0C00   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C05   C9                     RET      
0C06                CRLF:        
0C06   CD 0D 0C               CALL   printStr   
0C09   0D 0A 00               .CSTR   "\r\n"   
0C0C   C9                     RET      
0C0D                             ; prints a null teminated string
0C0D                             ; the string should be immediately following the call
0C0D                PRINTSTR:      
0C0D   E3                     EX   (sp),hl   ; swap			
0C0E   CD C6 0B               CALL   prtstr   
0C11   23                     INC   hl   ; inc past NUL
0C12   E3                     EX   (sp),hl   ; put it back	
0C13   C9                     RET      
0C14                INIT:        
0C14   DD 2A EE 21            LD   ix,(vNext)   
0C18   FD 21 80 20            LD   iy,STACK   
0C1C   21 80 01               LD   hl,isysVars   
0C1F   11 E6 21               LD   de,sysVars   
0C22   01 10 00               LD   bc,8 * 2   
0C25   ED B0                  LDIR      
0C27   21 00 21               LD   hl,vars   ; 52 vars LO HI
0C2A   06 34                  LD   b,26*2   
0C2C   AF                     XOR   a   
0C2D                INIT0:       
0C2D   77                     LD   (hl),a   
0C2E   23                     INC   hl   
0C2F   10 FC                  DJNZ   init0   
0C31   C9                     RET      
0C32                START:       
0C32   31 80 20               LD   sp,STACK   ; start Monty
0C35   CD 14 0C               CALL   init   ; setups
0C38   CD 0D 0C               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0C3B   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0C48                INTERPRET:      
0C48   CD FD 0B               CALL   prompt   
0C4B   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C4E   21 00 23               LD   hl,TIB   
0C51   22 EA 21               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C54                INTERPRET2:      ; calculate nesting
0C54   1E 00                  LD   e,0   ; initilize nesting value
0C56   C5                     PUSH   bc   ; save offset into TIB,
0C57                             ; bc is also the count of chars in TIB
0C57   21 00 23               LD   hl,TIB   ; hl is start of TIB
0C5A   18 06                  JR   interpret4   
0C5C                INTERPRET3:      
0C5C   7E                     LD   a,(hl)   ; a = char in TIB
0C5D   23                     INC   hl   ; inc pointer into TIB
0C5E   0B                     DEC   bc   ; dec count of chars in TIB
0C5F   CD CB 0B               CALL   nesting   ; update nesting value
0C62                INTERPRET4:      
0C62   79                     LD   a,c   ; is count zero?
0C63   B0                     OR   b   
0C64   20 F6                  JR   nz,interpret3   ; if not loop
0C66   C1                     POP   bc   ; restore offset into TIB
0C67                INTERPRET5:      
0C67   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C6A   FE 20                  CP   $20   ; compare to space
0C6C   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C6E   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C70                             ; ???? NEEDED?
0C70   28 3B                  JR   z,interpret8   
0C72   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C74   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C76   FE 05                  CP   CTRL_E   
0C78   CA FB 0C               JP   z,edit_   
0C7B   FE 08                  CP   CTRL_H   
0C7D   CA EB 0C               JP   z,backSpace_   
0C80   FE 0A                  CP   CTRL_J   
0C82   CA 13 0D               JP   z,reEdit_   
0C85   FE 13                  CP   CTRL_S   
0C87   CA 16 0D               JP   z,printStack_   
0C8A                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C8A                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C8A                             ; DB     lsb(list_)       ; FF  ^L 12
0C8A                             ; DB     lsb(printStack_) ; DLE ^P 16
0C8A                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C8A                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C8A                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C8A                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C8A                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C8A                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C8A                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C8A                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C8A                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C8A                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C8A                INTERPRET5A:      
0C8A                             ; ld (vTIBPtr),bc
0C8A                             ; ld bc,(vTIBPtr)
0C8A   18 C8                  JR   interpret2   
0C8C                INTERPRET6:      
0C8C   21 00 23               LD   hl,TIB   
0C8F   09                     ADD   hl,bc   
0C90   77                     LD   (hl),a   ; store the character in textbuf
0C91   03                     INC   bc   
0C92   CD 85 00               CALL   putchar   ; echo character to screen
0C95   CD CB 0B               CALL   nesting   
0C98   18 CD                  JR   interpret5   ; wait for next character
0C9A                INTERPRET7:      
0C9A   21 00 23               LD   hl,TIB   
0C9D   09                     ADD   hl,bc   
0C9E   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0CA0   23                     INC   hl   
0CA1   36 0A                  LD   (hl),"\n"   
0CA3   23                     INC   hl   
0CA4   03                     INC   bc   
0CA5   03                     INC   bc   
0CA6   CD 06 0C               CALL   crlf   ; echo character to screen
0CA9   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0CAA   B7                     OR   a   
0CAB   20 BA                  JR   nz,interpret5   
0CAD                INTERPRET8:      
0CAD   21 00 23               LD   hl,TIB   
0CB0   09                     ADD   hl,bc   
0CB1   22 EA 21               LD   (vTIBPtr),hl   
0CB4   01 00 23               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0CB7                             ; we pressed enter
0CB7   0B                     DEC   bc   
0CB8                NEXT:        
0CB8   03                     INC   bc   ; Increment the IP
0CB9   0A                     LD   a,(bc)   ; Get the next character and dispatch
0CBA   FE 20                  CP   " "   ; whitespace?
0CBC   28 FA                  JR   z,next   ; space? ignore
0CBE   38 09                  JR   c,next1   
0CC0   D6 20                  SUB   " "   
0CC2   6F                     LD   l,a   ; index into table
0CC3   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CC5   6E                     LD   l,(hl)   ; get low jump address
0CC6   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CC8   E9                     JP   (hl)   ; Jump to routine
0CC9                NEXT1:       
0CC9   FE 00                  CP   NUL   ; end of input string?
0CCB   28 03                  JR   z,exit   
0CCD   C3 48 0C               JP   interpret   ; no, other whitespace, macros?
0CD0                EXIT:        
0CD0   03                     INC   bc   
0CD1   60 69                  LD   hl,bc   
0CD3   E9                     JP   (hl)   
0CD4                RUN:         
0CD4   C1                     POP   bc   
0CD5   0B                     DEC   bc   
0CD6   DD E9                  JP   (ix)   
0CD8                ERROR:       
0CD8   CD D4 0C               CALL   run   
0CDB   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0CE8   C3 48 0C               JP   interpret   
0CEB                BACKSPACE_:      
0CEB   79                     LD   a,c   
0CEC   B0                     OR   b   
0CED   CA 54 0C               JP   z,interpret2   
0CF0   0B                     DEC   bc   
0CF1   CD 0D 0C               CALL   printStr   
0CF4   08 20 08 00            .CSTR   "\b \b"   
0CF8   C3 54 0C               JP   interpret2   
0CFB                             ; edit
0CFB                EDIT_:       
0CFB   CD D4 0C               CALL   run   
0CFE   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0D10   C3 48 0C               JP   interpret   
0D13                REEDIT_:      
0D13   C3 48 0C               JP   interpret   
0D16                PRINTSTACK_:      
0D16   CD D4 0C               CALL   run   
0D19   2F 70 6B 00            .CSTR   "/pk"   
0D1D   C3 48 0C               JP   interpret   
0D20                             ; editDef:
0D20                             ;     pop hl                      ; pop ret address
0D20                             ;     ex (sp),hl                  ; swap with TOS
0D20                             ;     push hl                     ; dup TOS
0D20                             ;     ld a,l                      ; a = ident
0D20                             ;     ld de,TIB                   ; de = start of TIB
0D20                             ;     ld (vTIBPtr),de             ; update TIB*
0D20                             ;     push ix                     ; save NEXT
0D20                             ;     ld ix,editDef0              ; NEXT = editDef0
0D20                             ;     jp lookupRef                ; convert letter into address
0D20                             ; editDef0:
0D20                             ;     ld e,(hl)                   ; de = (hl++)
0D20                             ;     inc hl
0D20                             ;     ld d,(hl)
0D20                             ;     ld a,d                      ; de == 0 ?
0D20                             ;     or e
0D20                             ;     jr z,editDef4
0D20                             ;     ld ix,editDef3              ; NEXT = editDef3
0D20                             ;     ex de,hl
0D20                             ;     ld a,(hl)
0D20                             ;     cp "{"
0D20                             ;     jr nz,editDef1
0D20                             ;     jp editBlock0               ; convert letter into address
0D20                             ; editDef1:
0D20                             ;     cp "("
0D20                             ;     jr nz,editDef2
0D20                             ;     jp editBlock0               ; convert letter into address
0D20                             ; editDef2:
0D20                             ;     jp editLambda
0D20                             ; editDef3:
0D20                             ;     ld a," "                    ; write assign
0D20                             ;     call writeChar
0D20                             ;     pop hl                      ; a = ident
0D20                             ;     ld a,l
0D20                             ;     call writeChar
0D20                             ;     ld a,"="                    ; write assign
0D20                             ;     call writeChar
0D20                             ;     ld ix,editDef4              ; NEXT = editDef4
0D20                             ;     jp printTIB
0D20                             ; editDef4:
0D20                             ;     pop ix                      ; restore NEXT
0D20                             ;     jp (ix)
0D20                             ; writeChar:
0D20                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D20                             ;     ld (de),a                   ; write ident
0D20                             ;     inc de
0D20                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D20                             ;     ret
0D20                             ; ; printTIB
0D20                             ; printTIB:
0D20                             ;     ld hl,(vTIBPtr)
0D20                             ;     ld de,TIB
0D20                             ;     or a
0D20                             ;     sbc hl,de
0D20                             ;     jp printTIB2
0D20                             ; printTIB1:
0D20                             ;     ld a,(de)
0D20                             ;     call putchar
0D20                             ; printTIB2:
0D20                             ;     ld a,l
0D20                             ;     or h
0D20                             ;     jr nz,printTIB1
0D20                             ;     jp (ix)
0D20                             ; editBlock:
0D20                             ;     pop hl                      ; hl = block*
0D20                             ; editBlock0:
0D20                             ;     push ix                     ; save next
0D20                             ;     push hl                     ; push block*
0D20                             ;     push hl                     ; push block*
0D20                             ;     ld ix,(editBlock2)
0D20                             ;     jp blockLength
0D20                             ; editBlock1:
0D20                             ;     pop hl                      ; bc = length, (sp) = IP
0D20                             ;     pop de                      ; de = block*
0D20                             ;     ld a,l
0D20                             ;     or h
0D20                             ;     jr z,editBlock2
0D20                             ;     push bc
0D20                             ;     ld bc,hl
0D20                             ;     ex de,hl                    ; hl = block*
0D20                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D20                             ;     ldir                        ; copy block to TIB
0D20                             ;     ld (vTIBPtr),de              ; save TIB*
0D20                             ;     pop bc
0D20                             ; editBlock2:
0D20                             ;     pop ix                      ; restore next
0D20                             ;     jp (ix)
0D20                             ; editLambda:
0D20                             ;     jp (ix)
0D20                             ; editArray:
0D20                             ;     jp (ix)
0D20                             ; editArglist:
0D20                             ;     jp (ix)
0D20                             ; ; blockLength
0D20                             ; ; addr1 -- length
0D20                             ; blockLength:
0D20                             ;     pop hl                      ; block*
0D20                             ;     push hl                     ; save block*
0D20                             ;     inc hl                      ; skip first char
0D20                             ;     ld d,1                      ; increase nesting
0D20                             ; blockLength1:                   ; Skip to end of definition
0D20                             ;     ld a,(hl)                   ; Get the next character
0D20                             ;     inc hl                      ; Point to next character
0D20                             ;     cp " " + 1                  ; ignore whitespace
0D20                             ;     jr c,blockLength1
0D20                             ;     cp ")"
0D20                             ;     jr z,blockLength4
0D20                             ;     cp "}"
0D20                             ;     jr z,blockLength4
0D20                             ;     cp "]"
0D20                             ;     jr z,blockLength4
0D20                             ;     cp "("
0D20                             ;     jr z,blockLength2
0D20                             ;     cp "{"
0D20                             ;     jr z,blockLength2
0D20                             ;     cp "["
0D20                             ;     jr z,blockLength2
0D20                             ;     cp "'"
0D20                             ;     jr z,blockLength3
0D20                             ;     cp "`"
0D20                             ;     jr z,blockLength3
0D20                             ;     cp DQUOTE
0D20                             ;     jr z,blockLength3
0D20                             ;     jr blockLength1
0D20                             ; blockLength2:
0D20                             ;     inc d
0D20                             ;     jr blockLength1
0D20                             ; blockLength4:
0D20                             ;     dec d
0D20                             ;     jr nz, blockLength1         ; get the next element
0D20                             ; blockLength3:
0D20                             ;     ld a,$80
0D20                             ;     xor d
0D20                             ;     ld d,a
0D20                             ;     jr nz, blockLength1
0D20                             ;     pop hl                      ; hl = block*
0D20                             ;     or a
0D20                             ;     sbc hl,de
0D20                             ;     push hl
0D20                             ;     jp (ix)
0D20                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D20                             ; \a start of stack \#3 depth \b base \$ prompt
0D20                             ; DW dStack               ; a vS0 start of datastack			
0D20                             ; DW FALSE                ; b vBase16
0D20                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D20                             ; DW 0                    ; d
0D20                             ; DW 65                   ; e vLastDef "A" last command u defined
0D20                             ; DW 0                    ; f
0D20                             ; DW page6                ; g 256 bytes limits
0D20                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D20                             ; 
2000                          .ORG   RAMSTART   
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2080                STACK:       
2080                          ALIGN   $100   
2100                VARS:        
2100                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
21D0                RESTARTS:      
21D0                RST08:    DS   2   
21D2                RST10:    DS   2   
21D4                RST18:    DS   2   
21D6                RST20:    DS   2   
21D8                RST28:    DS   2   
21DA                RST30:    DS   2   ; 
21DC                BAUD:     DS   2   ; 
21DE                INTVEC:   DS   2   ; 
21E0                NMIVEC:   DS   2   ; 
21E2                GETCVEC:   DS   2   ; 
21E4                PUTCVEC:   DS   2   ; 
21E6                SYSVARS:      
21E6                             ; initialised sys variables (preserved)
21E6                VDATAWIDTH:   DS   2   ; 
21E8                VNUMBASE:   DS   2   ; 
21EA                VTIBPTR:   DS   2   ; 
21EC                VBUFPTR:   DS   2   ; 
21EE                VNEXT:    DS   2   ; 
21F0                VHEAPPTR:   DS   2   ; 
21F2                             ; uninitialised sys variables (preserved)
21F2                VPOINTER:   DS   2   ; 
21F4                VREMAIN:   DS   2   ; 
21F6                VSAVEDIP:   DS   2   ; 
21F8                VSAVEDSP:   DS   2   ; 
21FA                VSAVEDBP:   DS   2   ; 
21FC                VCHECKSUM:   DS   2   ; 
21FE                             ; uninitialised sys variables (unpreserved)
21FE                VTEMP1:   DS   2   ; 
2200                VTEMP2:   DS   2   ; 
2202                VLASTDEF:   DS   2   ; 
2204                VHASHSTR:   DS   2   ; 
2206                TBPTR:    DS   2   ; reserved for tests
2208                          ALIGN   $100   
2300                TIB:      DS   TIBSIZE   
2400                BUF:      DS   BUFSIZE   
2500                          ALIGN   $100   
2500                PAD:      DS   $100   
2600                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 12
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B7E DEFINED AT LINE 1776 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
TRESERV:            0000 DEFINED AT LINE 32 IN MAIN.asm
TNUMBER:            0001 DEFINED AT LINE 33 IN MAIN.asm
TSTRING:            0002 DEFINED AT LINE 34 IN MAIN.asm
TPOINTER:           0003 DEFINED AT LINE 35 IN MAIN.asm
TARRAY:             0004 DEFINED AT LINE 36 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
TBLOCK:             0005 DEFINED AT LINE 37 IN MAIN.asm
TLAMBDA:            0006 DEFINED AT LINE 38 IN MAIN.asm
TARGLST:            0007 DEFINED AT LINE 39 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 200 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 202 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 204 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 206 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 208 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 210 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 212 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 215 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 217 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 219 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 221 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 223 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 225 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 227 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 229 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 238 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 242 IN MAIN.asm
LT_:                036D DEFINED AT LINE 250 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 257 IN MAIN.asm
                    > USED AT LINE 249 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 262 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 264 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 266 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 273 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 277 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 293 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 299 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 321 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 313 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 337 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 335 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 343 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 387 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 402 IN MAIN.asm
ARRAYEND1:          0438 DEFINED AT LINE 421 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
ARRAYEND2:          0448 DEFINED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 427 IN MAIN.asm
ARRINDEX:           046D DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARRINDEX0:          0475 DEFINED AT LINE 465 IN MAIN.asm
ARRINDEX1:          0476 DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
ARRINDEX2:          0482 DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
ASSIGN:             0485 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 235 IN MAIN.asm
ASSIGN0:            0487 DEFINED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
ASSIGNX:            0488 DEFINED AT LINE 486 IN MAIN.asm
ASSIGN1:            0494 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
COLON:              0496 DEFINED AT LINE 501 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
ARGLIST:            0496 DEFINED AT LINE 502 IN MAIN.asm
ARGLIST1:           04A0 DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
ARGLIST1A:          04A8 DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARGLIST2:           04B0 DEFINED AT LINE 520 IN MAIN.asm
ARGLIST3:           04B8 DEFINED AT LINE 528 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 526 IN MAIN.asm
ARGLIST4:           04BB DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
ARGLIST5:           04C1 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
LBRACE:             04CD DEFINED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04CD DEFINED AT LINE 549 IN MAIN.asm
BLOCKSTART1:        04D1 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
BLOCKSTART2:        04FD DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
BLOCKSTART3:        0500 DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
BLOCKSTART4:        0508 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
BLOCKSTART5:        050B DEFINED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
BLOCKSTART6:        0533 DEFINED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 598 IN MAIN.asm
RBRACE:             0536 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           0536 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
BLOCKEND1:          0568 DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND2:          0574 DEFINED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
BLOCKEND3:          0586 DEFINED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
TICK:               0592 DEFINED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0592 DEFINED AT LINE 667 IN MAIN.asm
CHAR1:              0595 DEFINED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR2:              05A1 DEFINED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
CHAR3:              05A4 DEFINED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
BACKSLASH:          05A7 DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A9 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
DISCARD:            05A9 DEFINED AT LINE 691 IN MAIN.asm
DISCARD1:           05B6 DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
SLASH:              05B8 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
DOT:                05D6 DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTARRAY:           05F0 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
DOTARRAY_BLOCK:     05F9 DEFINED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
DOTHEX:             0604 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
DOTHEX_BLOCK:       060D DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
DOTSTR:             0618 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
DOTSTR_BLOCK:       0621 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
DOTCHAR:            062C DEFINED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
DOTCHAR_BLOCK:      0635 DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
DOTDEC:             0640 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
DOTDEC_BLOCK:       0649 DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
DIVIDE:             0654 DEFINED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
DIVIDE1:            0659 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
DIVIDE2:            0666 DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
DIVIDE3:            0667 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
EQUALS:             066D DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
LESSTHANEQ:         0675 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN:           067A DEFINED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
LESSTHAN1:          067F DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
TRUE1:              0682 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
NULL1:              0688 DEFINED AT LINE 826 IN MAIN.asm
FALSE1:             0688 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
CARET:              068E DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
GO:                 068E DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
GO1:                068F DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
GO2:                0695 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
GOBLOCK:            06A1 DEFINED AT LINE 851 IN MAIN.asm
GOBLOCK1:           06A1 DEFINED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
GOBLOCK2:           06C6 DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
GOLAMBDA:           06D4 DEFINED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
GOLAMBDA1:          06EF DEFINED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
GOLAMBDA2:          06F5 DEFINED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
GOLAMBDA3:          0700 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
GOLAMBDA4:          0718 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
GOLAMBDA5:          071C DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
GOLAMBDA6:          071F DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
GOLAMBDA7:          0722 DEFINED AT LINE 940 IN MAIN.asm
GOLAMBDA8:          0727 DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
HASH:               0732 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
HEXNUM:             0732 DEFINED AT LINE 956 IN MAIN.asm
HEXNUM1:            0735 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
HEXNUM2:            073D DEFINED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
UPCASE:             074F DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
LOWCASE:            0754 DEFINED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IDENT1:             0759 DEFINED AT LINE 984 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
QUESTION:           0766 DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
IF:                 0766 DEFINED AT LINE 998 IN MAIN.asm
IFTE:               0772 DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1002 IN MAIN.asm
IFTE1:              0773 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
STAR:               077F DEFINED AT LINE 1020 IN MAIN.asm
                    > USED AT LINE 211 IN MAIN.asm
MUL:                077F DEFINED AT LINE 1021 IN MAIN.asm
MUL2:               0781 DEFINED AT LINE 1024 IN MAIN.asm
MUL3:               0789 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
NUM:                079B DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
NUM0:               07A4 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
NUM1:               07A5 DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
NUM2:               07BD DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
NUM3:               07C8 DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
UNDERSCORE:         07CB DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
REMAIN:             07CB DEFINED AT LINE 1081 IN MAIN.asm
RPAREN:             07D1 DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
SEMICOLON:          07D9 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
SHIFTLEFT:          07F5 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
SHIFTLEFT1:         07FD DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
SHIFTLEFT2:         07FE DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
SHIFTRIGHT:         0805 DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
SHIFTRIGHT1:        080D DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
SHIFTRIGHT2:        0811 DEFINED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
DBLQUOTE:           0818 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
STRING:             0818 DEFINED AT LINE 1153 IN MAIN.asm
STRING1:            0821 DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
STRING2:            0824 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
STRING3:            082D DEFINED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
MINUS:              0840 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
SUB:                084C DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
SUB1:               0856 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
COMMAND:            085F DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
ERROR1:             08B3 DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
COMMENT:            08BA DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
COMMAND_A:          08C3 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
ABSOLUTE:           08D2 DEFINED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
ADDROF:             08DF DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
ADDROF1:            08F3 DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
ADDROF2:            08FE DEFINED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
COMMAND_B:          0900 DEFINED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
BUFFERARRAY:        0928 DEFINED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
BUFFERARRAY2:       0950 DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
BUFFERARRAY3:       095A DEFINED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
BUFFERCHAR:         0979 DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERDEC:          0988 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1365 IN MAIN.asm
BUFFERDEC0:         09A0 DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1401 IN MAIN.asm
BUFFERDEC1:         09B0 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
BUFFERDEC2:         09D0 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
BUFFERDEC3:         09D2 DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
BUFFERDEC4:         09E2 DEFINED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
BUFFERDEC5:         09E3 DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
BUFFERHEX:          09E9 DEFINED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
BUFFERHEX1:         0A04 DEFINED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
BUFFERHEX2:         0A0D DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
BREAK:              0A18 DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
BREAK1:             0A1F DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
BUFFERSTRING:       0A32 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
BUFFERSTRING0:      0A39 DEFINED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
BUFFERSTRING1:      0A3C DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
BUFFERXSPACES:      0A4E DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
BUFFERXSPACES1:     0A55 DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
BUFFERXSPACES2:     0A59 DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
COMMAND_P:          0A62 DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
PARTIAL:            0A7B DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
PRINTCHARS:         0A9B DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1566 IN MAIN.asm
PRINTCHARS1:        0AA1 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
PRINTCHARS2:        0AA3 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
PRINTSTACK:         0AAD DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
SIZE:               0AAF DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
PRINTX:             0AB8 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
PRINTX_BLOCK:       0AC1 DEFINED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
COMMAND_V:          0AE3 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
CONSTBUFSTART:      0B06 DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
CONSTHEAPSTART:     0B0B DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
CONSTTIBSTART:      0B10 DEFINED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
VARBUFPTR:          0B15 DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
VARHEAPPTR:         0B1E DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
VARTIBPTR:          0B27 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1668 IN MAIN.asm
VARIABLE:           0B30 DEFINED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
CONSTANT:           0B33 DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
COMMAND_I:          0B36 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
CHARS:              0B45 DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
CHARS1:             0B48 DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
DECIMAL:            0B4D DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
DECIMAL1:           0B50 DEFINED AT LINE 1728 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
HEXADECIMAL:        0B55 DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
INPUT:              0B5B DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
KEY:                0B66 DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1235 IN MAIN.asm
OUTPUT:             0B6F DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
NUMBERS:            0B78 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
FILTER:             0B7E DEFINED AT LINE 1774 IN MAIN.asm
MAP:                0B7E DEFINED AT LINE 1775 IN MAIN.asm
ZPRT:               0B80 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
ZPRT_ARGS:          0B8B DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
ZPRT_BLOCK:         0B8D DEFINED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
ARGS0A1L_:          0BB4 DEFINED AT LINE 1794 IN MAIN.asm
ARGS0A1L:           0BB6 DEFINED AT LINE 1797 IN MAIN.asm
ARGS1A0L_:          0BB7 DEFINED AT LINE 1800 IN MAIN.asm
ARGS1A0L:           0BB9 DEFINED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
ARGS1A1L_:          0BBA DEFINED AT LINE 1806 IN MAIN.asm
ARGS1A1L:           0BBC DEFINED AT LINE 1809 IN MAIN.asm
ARGS2A0L_:          0BBE DEFINED AT LINE 1812 IN MAIN.asm
ARGS2A0L:           0BC0 DEFINED AT LINE 1815 IN MAIN.asm
PRTSTR0:            0BC2 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
PRTSTR:             0BC6 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
NESTING:            0BCB DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
NESTING0:           0BD5 DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1845 IN MAIN.asm
NESTING1A:          0BDC DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
NESTING1:           0BDF DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
NESTING2:           0BEE DEFINED AT LINE 1864 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
NESTING3:           0BF0 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
NESTING4:           0BFB DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
PROMPT:             0BFD DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
CRLF:               0C06 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
PRINTSTR:           0C0D DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
INIT:               0C14 DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 1915 IN MAIN.asm
INIT0:              0C2D DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
START:              0C32 DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0C48 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
INTERPRET2:         0C54 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
INTERPRET3:         0C5C DEFINED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
INTERPRET4:         0C62 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
INTERPRET5:         0C67 DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
INTERPRET5A:        0C8A DEFINED AT LINE 1981 IN MAIN.asm
INTERPRET6:         0C8C DEFINED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
INTERPRET7:         0C9A DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
INTERPRET8:         0CAD DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
NEXT:               0CB8 DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
NEXT1:              0CC9 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
EXIT:               0CD0 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
RUN:                0CD4 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
ERROR:              0CD8 DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
BACKSPACE_:         0CEB DEFINED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 1958 IN MAIN.asm
EDIT_:              0CFB DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
REEDIT_:            0D13 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
PRINTSTACK_:        0D16 DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
STACK:              2080 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
VARS:               2100 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
RESTARTS:           21D0 DEFINED AT LINE 10 IN ram.asm
RST08:              21D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              21D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              21D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              21D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              21D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              21DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               21DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             21DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             21E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            21E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            21E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            21E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1901 IN MAIN.asm
VDATAWIDTH:         21E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
VNUMBASE:           21E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1729 IN MAIN.asm
VTIBPTR:            21EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
VBUFPTR:            21EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1691 IN MAIN.asm
VNEXT:              21EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1898 IN MAIN.asm
VHEAPPTR:           21F0 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 412 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
VPOINTER:           21F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
VREMAIN:            21F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
VSAVEDIP:           21F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           21F8 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           21FA DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          21FC DEFINED AT LINE 43 IN ram.asm
VTEMP1:             21FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 405 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
VTEMP2:             2200 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
VLASTDEF:           2202 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           2204 DEFINED AT LINE 50 IN ram.asm
TBPTR:              2206 DEFINED AT LINE 51 IN ram.asm
TIB:                2300 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
BUF:                2400 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
PAD:                2500 DEFINED AT LINE 58 IN ram.asm
HEAP:               2600 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
