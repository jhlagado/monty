0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 9C 19               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 9E 19               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A A0 19               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A A2 19               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A A4 19               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A A6 19               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A AA 19               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A AC 19               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A AE 19               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A B0 19               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 9C 19               LD   (RST08),HL   
0094   22 9E 19               LD   (RST10),HL   
0097   22 A0 19               LD   (RST18),HL   
009A   22 A2 19               LD   (RST20),HL   
009D   22 A4 19               LD   (RST28),HL   
00A0   22 A6 19               LD   (RST30),HL   
00A3   22 AA 19               LD   (INTVEC),HL   
00A6   22 AC 19               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 AE 19               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 B0 19               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD 1C 09               CALL   init   
00C9   C3 49 09               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   B6 09                  DW   next   ; g nNext
018E   00 1C                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available _ @ " % , ; DEL
0220   EC                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   EC                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   EC                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   EC                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   EC                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   0F                     DB   lsb(dot_)   ; .
022F   C8                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   EC                     DB   lsb(nop_)   ; ;
023C   B6                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   AB                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(index_)   ; ?
0240   EC                     DB   lsb(nop_)   ; @
0241   4B                     DB   lsb(identU_)   ; A
0242   4B                     DB   lsb(identU_)   ; B
0243   4B                     DB   lsb(identU_)   ; C
0244   4B                     DB   lsb(identU_)   ; D
0245   4B                     DB   lsb(identU_)   ; E
0246   4B                     DB   lsb(identU_)   ; F
0247   4B                     DB   lsb(identU_)   ; G
0248   4B                     DB   lsb(identU_)   ; h
0249   4B                     DB   lsb(identU_)   ; I
024A   4B                     DB   lsb(identU_)   ; J
024B   4B                     DB   lsb(identU_)   ; K
024C   4B                     DB   lsb(identU_)   ; L
024D   4B                     DB   lsb(identU_)   ; M
024E   4B                     DB   lsb(identU_)   ; N
024F   4B                     DB   lsb(identU_)   ; O
0250   4B                     DB   lsb(identU_)   ; p
0251   4B                     DB   lsb(identU_)   ; Q
0252   4B                     DB   lsb(identU_)   ; R
0253   4B                     DB   lsb(identU_)   ; S
0254   4B                     DB   lsb(identU_)   ; T
0255   4B                     DB   lsb(identU_)   ; U
0256   4B                     DB   lsb(identU_)   ; V
0257   4B                     DB   lsb(identU_)   ; W
0258   4B                     DB   lsb(identU_)   ; X
0259   4B                     DB   lsb(identU_)   ; Y
025A   4B                     DB   lsb(identU_)   ; Z
025B   45                     DB   lsb(array_)   ; [
025C   D7                     DB   lsb(command_)   ; \
025D   48                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   EC                     DB   lsb(nop_)   ; _
0260   42                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(identL_)   ; a
0262   4E                     DB   lsb(identL_)   ; b
0263   4E                     DB   lsb(identL_)   ; c
0264   4E                     DB   lsb(identL_)   ; d
0265   4E                     DB   lsb(identL_)   ; e
0266   4E                     DB   lsb(identL_)   ; f
0267   4E                     DB   lsb(identL_)   ; g
0268   4E                     DB   lsb(identL_)   ; h
0269   4E                     DB   lsb(identL_)   ; i
026A   4E                     DB   lsb(identL_)   ; j
026B   4E                     DB   lsb(identL_)   ; k
026C   4E                     DB   lsb(identL_)   ; l
026D   4E                     DB   lsb(identL_)   ; m
026E   4E                     DB   lsb(identL_)   ; n
026F   4E                     DB   lsb(identL_)   ; o
0270   4E                     DB   lsb(identL_)   ; p
0271   4E                     DB   lsb(identL_)   ; q
0272   4E                     DB   lsb(identL_)   ; r
0273   4E                     DB   lsb(identL_)   ; s
0274   4E                     DB   lsb(identL_)   ; t
0275   4E                     DB   lsb(identL_)   ; u
0276   4E                     DB   lsb(identL_)   ; v
0277   4E                     DB   lsb(identL_)   ; w
0278   4E                     DB   lsb(identL_)   ; x
0279   4E                     DB   lsb(identL_)   ; y
027A   4E                     DB   lsb(identL_)   ; z
027B   3C                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   3F                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   EC                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 2D 04               JP   num   
0303                HEXNUM_:      
0303   C3 5D 04               JP   hexnum   
0306                ARG_:        
0306   C3 A5 08               JP   arg   
0309                STRING_:      
0309   C3 7A 04               JP   string   
030C                ARG_LIST_:      
030C   C3 9E 04               JP   arg_list   
030F                DOT_:        
030F   E1                     POP   hl   
0310   03                     INC   bc   
0311   0A                     LD   a,(bc)   
0312   FE 68                  CP   "h"   
0314   20 05                  JR   nz,dot1   
0316   CD 6C 07               CALL   prthex   
0319   18 17                  JR   dot4   
031B                DOT1:        
031B   FE 73                  CP   "s"   
031D   20 05                  JR   nz,dot2   
031F   CD 8F 07               CALL   prtstr   
0322   18 0E                  JR   dot4   
0324                DOT2:        
0324   FE 63                  CP   "c"   
0326   20 06                  JR   nz,dot3   
0328   7D                     LD   a,l   
0329   CD 85 00               CALL   putchar   
032C   18 04                  JR   dot4   
032E                DOT3:        
032E   0B                     DEC   bc   
032F   CD 24 07               CALL   prtdec   
0332                DOT4:        
0332   3E 20                  LD   a," "   
0334   CD 85 00               CALL   putchar   
0337   DD E9                  JP   (ix)   
0339                             ; addr index -- addr2
0339                INDEX_:      
0339   C3 8F 05               JP   index   
033C                BLOCK_:      
033C   C3 E5 04               JP   block   
033F                BLOCKEND_:      
033F   C3 22 05               JP   blockend   
0342                CHAR_:       
0342   C3 D0 04               JP   char   
0345                ARRAY_:      
0345   C3 C6 05               JP   array   
0348                ARRAYEND_:      
0348   C3 E2 05               JP   arrayEnd   
034B                IDENTU_:      
034B   C3 5D 06               JP   identU   
034E                IDENTL_:      
034E   C3 62 06               JP   identL   
0351                SYMBOL_:      
0351   C3 5B 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 6C 07               CALL   prthex   
0380   C3 2E 03               JP   dot3   
0383                MUL_:        
0383   C3 11 04               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 08                  JR   eq1   
039F                EQ_:         
039F   0A                     LD   a,(bc)   ; is it == ?
03A0   FE 3D                  CP   "="   
03A2   C2 43 06               JP   nz,let   ; no its assignment
03A5   03                     INC   bc   
03A6   E1                     POP   hl   
03A7                EQ1:         
03A7   D1                     POP   de   
03A8   C3 9A 06               JP   equals   
03AB                GT_:         
03AB   03                     INC   bc   
03AC   0A                     LD   a,(bc)   
03AD   FE 3E                  CP   ">"   
03AF   CA FE 03               JP   z,shiftRight   
03B2   D1                     POP   de   
03B3   E1                     POP   hl   
03B4   18 09                  JR   lt1   
03B6                LT_:         
03B6   03                     INC   bc   
03B7   0A                     LD   a,(bc)   
03B8   FE 3C                  CP   "<"   
03BA   CA EE 03               JP   z,shiftLeft   
03BD   E1                     POP   hl   
03BE   D1                     POP   de   
03BF                LT1:         
03BF   FE 3D                  CP   "="   
03C1   CA A2 06               JP   z,lessthaneq   
03C4   0B                     DEC   bc   
03C5   C3 A7 06               JP   lessthan   
03C8                DIV_:        
03C8   D1                     POP   de   ; get first value
03C9   E1                     POP   hl   ; get 2nd value
03CA   C5                     PUSH   bc   ; preserve the IP
03CB   44 4D                  LD   bc,hl   
03CD   CD E1 06               CALL   divide   
03D0   22 B2 19               LD   (vFrac),hl   
03D3   C1                     POP   bc   
03D4   D5                     PUSH   de   ; push result
03D5   DD E9                  JP   (ix)   
03D7                COMMAND_:      
03D7   03                     INC   bc   
03D8   0A                     LD   a,(bc)   
03D9   FE 5C                  CP   $5C   ; \\ comment
03DB   28 06                  JR   z,comment   
03DD   21 01 00               LD   hl,1   ; error 1: unknown command
03E0   C3 F1 09               JP   error   
03E3                COMMENT:      
03E3   03                     INC   bc   ; point to next char
03E4   0A                     LD   a,(bc)   
03E5   FE 20                  CP   " "   ; terminate on any char less than SP
03E7   30 FA                  JR   nc,comment   
03E9   0B                     DEC   bc   
03EA   DD E9                  JP   (ix)   
03EC                NOP_:        
03EC   DD E9                  JP   (ix)   
03EE                             ;*******************************************************************
03EE                             ; word operators
03EE                             ;*******************************************************************
03EE                             ; shiftLeft
03EE                             ; value count -- value2          shift left count places
03EE                SHIFTLEFT:      
03EE   50 59                  LD   de,bc   ; save IP
03F0   C1                     POP   bc   ; bc = count
03F1   41                     LD   b,c   ; b = loop counter
03F2   E1                     POP   hl   
03F3   04                     INC   b   ; test for counter=0 case
03F4   18 01                  JR   shiftLeft2   
03F6                SHIFTLEFT1:      
03F6   29                     ADD   hl,hl   ; left shift hl
03F7                SHIFTLEFT2:      
03F7   10 FD                  DJNZ   shiftLeft1   
03F9   E5                     PUSH   hl   
03FA   42 4B                  LD   bc,de   ; restore IP
03FC   DD E9                  JP   (ix)   
03FE                             ; shiftRight
03FE                             ; value count -- value2          shift left count places
03FE                SHIFTRIGHT:      
03FE   50 59                  LD   de,bc   ; save IP
0400   C1                     POP   bc   ; bc = count
0401   41                     LD   b,c   ; b = loop counter
0402   E1                     POP   hl   
0403   04                     INC   b   ; test for counter=0 case
0404   18 04                  JR   shiftRight2   
0406                SHIFTRIGHT1:      
0406   CB 3C                  SRL   h   ; right shift hl
0408   CB 1D                  RR   l   
040A                SHIFTRIGHT2:      
040A   10 FA                  DJNZ   shiftRight1   
040C   E5                     PUSH   hl   
040D   42 4B                  LD   bc,de   ; restore IP
040F   DD E9                  JP   (ix)   
0411                MUL:         ;=19
0411   D1                     POP   de   ; get first value
0412   E1                     POP   hl   
0413   C5                     PUSH   bc   ; Preserve the IP
0414   44                     LD   b,h   ; bc = 2nd value
0415   4D                     LD   c,l   
0416   21 00 00               LD   hl,0   
0419   3E 10                  LD   a,16   
041B                MUL2:        
041B   29                     ADD   hl,hl   
041C   CB 13                  RL   e   
041E   CB 12                  RL   d   
0420   30 04                  JR   nc,$+6   
0422   09                     ADD   hl,bc   
0423   30 01                  JR   nc,$+3   
0425   13                     INC   de   
0426   3D                     DEC   a   
0427   20 F2                  JR   nz,mul2   
0429   C1                     POP   bc   ; Restore the IP
042A   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
042B   DD E9                  JP   (ix)   
042D                NUM:         
042D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0430   0A                     LD   a,(bc)   ; Get numeral or -
0431   FE 2D                  CP   "-"   
0433   20 01                  JR   nz,num0   
0435   03                     INC   bc   ; move to next char, no flags affected
0436                NUM0:        
0436   08                     EX   af,af'   ; save zero flag = 0 for later
0437                NUM1:        
0437   0A                     LD   a,(bc)   ; read digit
0438   D6 30                  SUB   "0"   ; less than 0?
043A   38 13                  JR   c,num2   ; not a digit, exit loop
043C   FE 0A                  CP   10   ; greater that 9?
043E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0440   03                     INC   bc   ; inc IP
0441   54 5D                  LD   de,hl   ; multiply hl * 10
0443   29                     ADD   hl,hl   
0444   29                     ADD   hl,hl   
0445   19                     ADD   hl,de   
0446   29                     ADD   hl,hl   
0447   85                     ADD   a,l   ; add digit in a to hl
0448   6F                     LD   l,a   
0449   3E 00                  LD   a,0   
044B   8C                     ADC   a,h   
044C   67                     LD   h,a   
044D   18 E8                  JR   num1   
044F                NUM2:        
044F   0B                     DEC   bc   
0450   08                     EX   af,af'   ; restore zero flag
0451   20 07                  JR   nz,num3   
0453   EB                     EX   de,hl   ; negate the value of hl
0454   21 00 00               LD   hl,0   
0457   B7                     OR   a   ; jump to sub2
0458   ED 52                  SBC   hl,de   
045A                NUM3:        
045A   E5                     PUSH   hl   ; Put the number on the stack
045B   DD E9                  JP   (ix)   ; and process the next character
045D                HEXNUM:      
045D   21 00 00               LD   hl,0   ; Clear hl to accept the number
0460                HEXNUM1:      
0460   03                     INC   bc   
0461   0A                     LD   a,(bc)   ; Get the character which is a numeral
0462   CB 77                  BIT   6,a   ; is it uppercase alpha?
0464   28 02                  JR   z,hexnum2   ; no a decimal
0466   D6 07                  SUB   7   ; sub 7  to make $a - $F
0468                HEXNUM2:      
0468   D6 30                  SUB   $30   ; Form decimal digit
046A   DA 4F 04               JP   c,num2   
046D   FE 10                  CP   $0F+1   
046F   D2 4F 04               JP   nc,num2   
0472   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0473   29                     ADD   hl,hl   ; 4X
0474   29                     ADD   hl,hl   ; 8X
0475   29                     ADD   hl,hl   ; 16X
0476   85                     ADD   a,l   ; add into bottom of hl
0477   6F                     LD   l,a   ; 
0478   18 E6                  JR   hexnum1   
047A                             ; string
047A                             ; -- ptr                        ; points to start of string chars,
047A                             ; length is stored at start - 2 bytes
047A                STRING:      
047A   2A C0 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
047D   23                     INC   hl   ; skip length field to start
047E   23                     INC   hl   
047F   E5                     PUSH   hl   ; save start of string
0480   03                     INC   bc   ; point to next char
0481   18 03                  JR   string2   
0483                STRING1:      
0483   77                     LD   (hl),a   
0484   23                     INC   hl   ; increase count
0485   03                     INC   bc   ; point to next char
0486                STRING2:      
0486   0A                     LD   a,(bc)   
0487   FE 27                  CP   "'"   ; ' is the string terminator
0489   20 F8                  JR   nz,string1   
048B   AF                     XOR   a   ; write NUL to terminate string
048C   77                     LD   (hl),a   ; hl = end of string
048D   23                     INC   hl   
048E   22 C0 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
0491   2B                     DEC   hl   ; hl = end of string without terminator
0492   D1                     POP   de   ; de = start of string
0493   D5                     PUSH   de   ; return start of string
0494   B7                     OR   a   ; hl = length bytes, de = start of string
0495   ED 52                  SBC   hl,de   
0497   EB                     EX   de,hl   
0498   2B                     DEC   hl   ; write length bytes to length field at start - 2
0499   72                     LD   (hl),d   
049A   2B                     DEC   hl   
049B   73                     LD   (hl),e   
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                ARG_LIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A C0 19               LD   hl,(vHeapPtr)   ; hl = heap ptr
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARG_LIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 29                  CP   ")"   ; ) is the arg_list terminator
04AB   28 12                  JR   z,arg_list4   
04AD   FE 3A                  CP   ":"   
04AF   20 03                  JR   nz,arg_list2   
04B1   14                     INC   d   ; non zero value local count acts as flag
04B2   20 08                  JR   nz,arg_list3   
04B4                ARG_LIST2:      
04B4   77                     LD   (hl),a   
04B5   23                     INC   hl   
04B6   1C                     INC   e   ; increase arg count
04B7   AF                     XOR   a   
04B8   B2                     OR   d   
04B9   28 01                  JR   z,arg_list3   
04BB   14                     INC   d   ; if d > 0 increase local count
04BC                ARG_LIST3:      
04BC   03                     INC   bc   ; point to next char
04BD   18 E9                  JR   arg_list1   
04BF                ARG_LIST4:      
04BF   AF                     XOR   a   
04C0   B2                     OR   d   
04C1   28 01                  JR   z,arg_list5   
04C3   15                     DEC   d   ; remove initial inc
04C4                ARG_LIST5:      
04C4   23                     INC   hl   
04C5   22 C0 19               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04C8   E1                     POP   hl   ; hl = start of arg_list
04C9   E5                     PUSH   hl   ; return start of string
04CA   2B                     DEC   hl   ; write length bytes to length field at start - 2
04CB   72                     LD   (hl),d   
04CC   2B                     DEC   hl   
04CD   73                     LD   (hl),e   
04CE   DD E9                  JP   (ix)   
04D0                CHAR:        
04D0   21 00 00               LD   hl,0   ; if `` is empty
04D3                CHAR1:       
04D3   03                     INC   bc   ; point to next char
04D4   0A                     LD   a,(bc)   
04D5   FE 60                  CP   "`"   ; ` is the string terminator
04D7   28 09                  JR   z,char3   
04D9   FE 5C                  CP   $5c   ; \ is the escape
04DB   20 02                  JR   nz,char2   
04DD   03                     INC   bc   
04DE   0A                     LD   a,(bc)   
04DF                CHAR2:       
04DF   6F                     LD   l,a   
04E0   18 F1                  JR   char1   
04E2                CHAR3:       
04E2   E5                     PUSH   hl   
04E3   DD E9                  JP   (ix)   
04E5                BLOCK:       
04E5   03                     INC   bc   
04E6   C5                     PUSH   bc   ; return first opcode of block
04E7   16 01                  LD   d,1   ; nesting: count first parenthesis
04E9                BLOCK1:      ; Skip to end of definition
04E9   0A                     LD   a,(bc)   ; Get the next character
04EA   03                     INC   bc   ; Point to next character
04EB   FE 21                  CP   " " + 1   ; ignore whitespace
04ED   38 FA                  JR   c,block1   
04EF   FE 29                  CP   ")"   
04F1   28 29                  JR   z,block4   
04F3   FE 7D                  CP   "}"   
04F5   28 25                  JR   z,block4   
04F7   FE 5D                  CP   "]"   
04F9   28 21                  JR   z,block4   
04FB   FE 28                  CP   "("   
04FD   28 12                  JR   z,block2   
04FF   FE 7B                  CP   "{"   
0501   28 0E                  JR   z,block2   
0503   FE 5B                  CP   "["   
0505   28 0A                  JR   z,block2   
0507   FE 27                  CP   "'"   
0509   28 09                  JR   z,block3   
050B   FE 60                  CP   "`"   
050D   28 05                  JR   z,block3   
050F   18 D8                  JR   block1   
0511                BLOCK2:      
0511   14                     INC   d   
0512   18 D5                  JR   block1   
0514                BLOCK3:      
0514   3E 80                  LD   a,$80   
0516   AA                     XOR   d   
0517   47                     LD   b,a   
0518   20 CF                  JR   nz,block1   
051A   18 03                  JR   block5   
051C                BLOCK4:      
051C   15                     DEC   d   
051D   20 CA                  JR   nz,block1   ; get the next element
051F                BLOCK5:      
051F   0B                     DEC   bc   ; balanced, exit
0520   DD E9                  JP   (ix)   
0522                BLOCKEND:      
0522   D9                     EXX      
0523   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0526   FD 56 01               LD   d,(iy+1)   
0529   FD 4E 06               LD   c,(iy+6)   ; bc = IP
052C   FD 46 07               LD   b,(iy+7)   
052F   D9                     EXX      
0530   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0533   FD 56 03               LD   d,(iy+3)   
0536   EB                     EX   de,hl   
0537   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
053A   FD 56 01               LD   d,(iy+1)   
053D                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
053D   13                     INC   de   ; for carry flag <=
053E   B7                     OR   a   
053F   ED 52                  SBC   hl,de   
0541   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0543   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0545   FD 5D                  LD   e,iyl   
0547   21 08 00               LD   hl,8   
054A   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
054B   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
054C   18 0C                  JR   blockend2   
054E                BLOCKEND1:      ; same scope
054E   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0551   FD 56 03               LD   d,(iy+3)   
0554   EB                     EX   de,hl   
0555   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0557   FD 5D                  LD   e,iyl   
0559   EB                     EX   de,hl   
055A                BLOCKEND2:      
055A   44 4D                  LD   bc,hl   ; bc = hl = BP
055C   B7                     OR   a   ; hl = BP - SP = count
055D   ED 72                  SBC   hl,sp   
055F   C5                     PUSH   bc   ; bc = count, hl = BP
0560   44 4D                  LD   bc,hl   
0562   E1                     POP   hl   
0563   2B                     DEC   hl   ; hl = BP-1
0564   1B                     DEC   de   ; de = args*-1
0565   ED B8                  LDDR      
0567   13                     INC   de   ; hl = new tos
0568   EB                     EX   de,hl   
0569   F9                     LD   sp,hl   ; sp = new tos
056A   D9                     EXX      ; bc = IP, iy = oldBP
056B   D5                     PUSH   de   
056C   C5                     PUSH   bc   
056D   D9                     EXX      
056E   C1                     POP   bc   
056F   FD E1                  POP   iy   
0571   DD E9                  JP   (ix)   
0573                             ; if
0573                             ; condition then -- value
0573                IF:          
0573   11 00 00               LD   de,0   ; NUL pointer for else
0576   18 01                  JR   ifte1   
0578                             ; ifte
0578                             ; condition then else -- value
0578                IFTE:        
0578   D1                     POP   de   ; de = else
0579                IFTE1:       
0579   E1                     POP   hl   ; hl = then
057A   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
057B   7C                     LD   a,h   
057C   B5                     OR   l   
057D   E1                     POP   hl   ; hl = then
057E   CA E5 07               JP   z,exec0   ; if z de = else
0581   EB                     EX   de,hl   ; condition = false, hl = else
0582   C3 E5 07               JP   exec0   
0585                             ; switch
0585                             ; index array -- value
0585                SWITCH:      
0585   D1                     POP   de   ; de = array
0586   E1                     POP   hl   ; hl = index
0587   29                     ADD   hl,hl   ; if data width = 2 then double
0588   19                     ADD   hl,de   ; add addr
0589   5E                     LD   e,(hl)   
058A   23                     INC   hl   
058B   56                     LD   d,(hl)   
058C   C3 E5 07               JP   exec0   
058F                             ; index of an array, based on vDataWidth
058F                             ; array num -- value    ; also sets vPointer to address
058F                INDEX:       
058F   E1                     POP   hl   ; hl = index
0590   D1                     POP   de   ; de = array
0591   3A B4 19               LD   a,(vDataWidth)   ; a = data width
0594   3D                     DEC   a   
0595   28 01                  JR   z,index1   
0597                INDEX0:      
0597   29                     ADD   hl,hl   ; if data width = 2 then double
0598                INDEX1:      
0598   19                     ADD   hl,de   ; add addr
0599   22 B8 19               LD   (vPointer),hl   ; store address in setter
059C   16 00                  LD   d,0   
059E   5E                     LD   e,(hl)   
059F   B7                     OR   a   ; check data width again
05A0   28 02                  JR   z,index2   
05A2   23                     INC   hl   
05A3   56                     LD   d,(hl)   
05A4                INDEX2:      
05A4   D5                     PUSH   de   
05A5   DD E9                  JP   (ix)   
05A7                             ; newvalue --
05A7                SET:         
05A7   E1                     POP   hl   ; discard last accessed value
05A8   D1                     POP   de   ; new value
05A9   2A B8 19               LD   hl,(vPointer)   
05AC   73                     LD   (hl),e   
05AD   3A B4 19               LD   a,(vDataWidth)   
05B0   3D                     DEC   a   
05B1   28 02                  JR   z,set1   
05B3   23                     INC   hl   
05B4   72                     LD   (hl),d   
05B5                SET1:        
05B5   DD E9                  JP   (ix)   
05B7                             ; c b --
05B7                             ; loops until c = 0
05B7                LOOP:        
05B7   DD E9                  JP   (ix)   
05B9                             ;     pop de                      ; de = block                    c
05B9                             ;     pop hl                      ; hl = condition
05B9                             ;     push de
05B9                             ;     push bc                     ; push IP
05B9                             ;     ld bc,de                    ; bc = block
05B9                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05B9                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05B9                             ;     push de                     ; push ScopeBP
05B9                             ;     push iy                     ; push BP
05B9                             ;     ld iy,0                     ; iy = sp
05B9                             ;     add iy,sp
05B9                             ; loop1:
05B9                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05B9                             ;     or h
05B9                             ;     jr z,loop3
05B9                             ;     ld de,loop2-1               ; IP return address
05B9                             ;     push de
05B9                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05B9                             ;     ld d,(iy+3)
05B9                             ;     push de                     ;
05B9                             ;     push iy                     ; push BP
05B9                             ;     ld iy,0                     ; iy = sp
05B9                             ;     add iy,sp
05B9                             ;     push hl                     ; push condition
05B9                             ;     dec bc
05B9                             ;     jp (ix)
05B9                             ; loop2:
05B9                             ;     db ESC                      ; escape from interpreter
05B9                             ;     ld c,(iy+6)                 ; bc = block
05B9                             ;     ld b,(iy+7)
05B9                             ;     pop hl                      ; hl = condition
05B9                             ;     jr loop1
05B9                             ; loop3:
05B9                             ;     ld d,iyh                    ; de = BP
05B9                             ;     ld e,iyl
05B9                             ;     ex de,hl                    ; hl = BP, de = result
05B9                             ;     ld sp,hl                    ; sp = BP
05B9                             ;     pop hl                      ; hl = old BP
05B9                             ;     pop bc                      ; pop ScopeBP (discard)
05B9                             ;     pop bc                      ; bc = IP
05B9                             ;     ld sp,hl                    ; sp = old BP
05B9                             ;     ld iy,0                     ; iy = sp
05B9                             ;     add iy,sp
05B9                             ;     ld ix,(vNext)                  ; needed?
05B9                             ;     jp (ix)
05B9                WORDS:       
05B9   21 02 00               LD   hl,2   
05BC   18 03                  JR   bytes1   
05BE                BYTES:       
05BE   21 01 00               LD   hl,1   
05C1                BYTES1:      
05C1   22 B4 19               LD   (vDataWidth),hl   
05C4   DD E9                  JP   (ix)   
05C6                ARRAY:       
05C6   11 00 00               LD   de,0   ; create stack frame
05C9   D5                     PUSH   de   ; push null for IP
05CA   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05CD   FD 56 05               LD   d,(iy+5)   ; 
05D0   D5                     PUSH   de   ; 
05D1   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05D4   FD 56 03               LD   d,(iy+3)   ; 
05D7   D5                     PUSH   de   ; 
05D8   FD E5                  PUSH   iy   ; push BP
05DA   FD 21 00 00            LD   iy,0   ; BP = SP
05DE   FD 39                  ADD   iy,sp   
05E0   DD E9                  JP   (ix)   
05E2                ARRAYEND:      
05E2   FD 54                  LD   d,iyh   ; de = BP
05E4   FD 5D                  LD   e,iyl   
05E6   ED 43 C2 19            LD   (vTemp1),bc   ; save IP
05EA   62 6B                  LD   hl,de   ; hl = de = BP
05EC   B7                     OR   a   
05ED   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05EF   CB 3C                  SRL   h   ; 
05F1   CB 1D                  RR   l   
05F3   44 4D                  LD   bc,hl   ; bc = count
05F5   2A C0 19               LD   hl,(vHeapPtr)   ; hl = array[-2]
05F8   71                     LD   (hl),c   ; write num items in length word
05F9   23                     INC   hl   
05FA   70                     LD   (hl),b   
05FB   23                     INC   hl   ; hl = array[0], bc = count
05FC                             ; de = BP, hl = array[0], bc = count
05FC   3A B4 19               LD   a,(vDataWidth)   ; vDataWidth=1?
05FF   FE 01                  CP   1   
0601   20 10                  JR   nz,arrayEnd2   
0603                ARRAYEND1:      ; byte
0603   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0606   77                     LD   (hl),a   ; write a to array item
0607   23                     INC   hl   ; move to next byte in array
0608   FD 2B                  DEC   iy   ; move tho next word on stack
060A   FD 2B                  DEC   iy   
060C   0B                     DEC   bc   ; dec items count
060D   79                     LD   a,c   ; if not zero loop
060E   B0                     OR   b   
060F   20 F2                  JR   nz,arrayEnd1   
0611   18 13                  JR   arrayEnd3   
0613                ARRAYEND2:      ; word
0613   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0616   77                     LD   (hl),a   ; write lsb of array item
0617   23                     INC   hl   ; move to msb of array item
0618   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
061B   77                     LD   (hl),a   ; write msb of array item
061C   23                     INC   hl   ; move to next word in array
061D   FD 2B                  DEC   iy   ; move to next word on stack
061F   FD 2B                  DEC   iy   
0621   0B                     DEC   bc   ; dec items count
0622   79                     LD   a,c   ; if not zero loop
0623   B0                     OR   b   
0624   20 ED                  JR   nz,arrayEnd2   
0626                ARRAYEND3:      
0626   EB                     EX   de,hl   ; de = end of array, hl = BP
0627   F9                     LD   sp,hl   ; sp = BP
0628   E1                     POP   hl   ; de = end of array, hl = old BP
0629   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
062A   FD 62                  LD   iyh,d   
062C   FD 6B                  LD   iyl,e   
062E   D1                     POP   de   ; pop arg_list (discard)
062F   D1                     POP   de   ; pop ScopeBP (discard)
0630   D1                     POP   de   ; pop IP (discard)
0631   ED 5B C0 19            LD   de,(vHeapPtr)   ; de = array[-2]
0635   22 C0 19               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0638   ED 4B C2 19            LD   bc,(vTemp1)   ; restore IP
063C   13                     INC   de   ; de = array[0]
063D   13                     INC   de   
063E   D5                     PUSH   de   ; return array[0]
063F   DD E9                  JP   (ix)   
0641                             ; str -- num
0641                HASH:        
0641                             ; pop hl
0641                             ; push bc
0641                             ; ld bc,hl
0641                             ; call hashStr
0641                             ; pop bc
0641                             ; push hl
0641   DD E9                  JP   (ix)   
0643                             ; symbol func --
0643                DEF:         
0643                             ;     ld ix,def1
0643                             ;     jp func
0643                             ; def1:
0643                             ;     ld ix,(vNext)
0643                             ;     pop de                              ; hl = symbol de = addr (sp) = IP
0643                             ;     ld hl,bc
0643                             ; jr let1
0643                             ; value --                          ; uses address in vPointer
0643                LET:         
0643   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
0645                             ;     ex (sp),hl
0645                             ;     ex de,hl
0645                             ;     ld hl,(vHeapPtr)                    ; hl = heap
0645                             ;     ld (hl),$cd                         ; compile "call dolet"
0645                             ;     inc hl
0645                             ;     ld (hl),lsb(dolet)
0645                             ;     inc hl
0645                             ;     ld (hl),msb(dolet)
0645                             ;     inc hl
0645                             ;     ld (hl),e
0645                             ;     inc hl
0645                             ;     ld (hl),d
0645                             ;     ld de,(vHashStr)
0645                             ;     inc hl
0645                             ;     ld (hl),e
0645                             ;     inc hl
0645                             ;     ld (hl),d
0645                             ;     dec hl
0645                             ;     ld de,(vHeapPtr)            ; de = start of definition
0645                             ;     ld (vHeapPtr),hl            ; update heap ptr to end of definition
0645                             ;     pop hl                      ; de = addr, hl = IP
0645                             ; let1:
0645                             ;     ex (sp),hl                  ; hl = symbol de = addr (sp) = IP
0645                             ;     ld bc,hl                    ; bc = symbol
0645                             ;     call defineEntry
0645                             ;     jr c,let2
0645                             ;     ld hl,2                      ; error 2: Let collision
0645                             ;     jp error
0645                             ; let2:
0645                             ;     pop bc
0645   DD E9                  JP   (ix)   
0647                             ; addr -- value
0647                DOLET:       
0647   E1                     POP   hl   
0648   22 B8 19               LD   (vPointer),hl   ; store address in setter
064B                DOLET2:      
064B   5E                     LD   e,(hl)   
064C   23                     INC   hl   
064D   56                     LD   d,(hl)   
064E   23                     INC   hl   
064F                DOLET3:      
064F   D5                     PUSH   de   
0650   5E                     LD   e,(hl)   
0651   23                     INC   hl   
0652   56                     LD   d,(hl)   
0653   ED 53 BC 19            LD   (vHashStr),de   
0657   DD E9                  JP   (ix)   
0659                             ; symbol -- ptr
0659                ADDR:        
0659                             ;     pop hl                              ; hl = hash
0659                             ;     push bc
0659                             ;     ld bc,hl
0659                             ;     call lookupEntry
0659                             ;     jr c, addr1
0659                             ;     ld hl,0
0659                             ;     ; call printStr		
0659                             ;     ; .cstr "Undefined"
0659                             ;     ; jp interpret
0659                             ; addr1:
0659                             ;     pop bc
0659                             ;     ld de,3                 ; return entry point + 3 to get address of let data
0659                             ;     add hl,de
0659                             ;     ld (vPointer),hl
0659                             ;     push hl
0659   DD E9                  JP   (ix)   
065B                SYMBOL:      
065B                             ;     inc bc
065B                             ;     ld de,PAD
065B                             ;     ld h,msb(opcodesBase)                   ; this table identifies the char type
065B                             ;     jr symbol1
065B                             ; symbol0:                                 ; copy to PAD area
065B                             ;     inc bc                              ; characters that are part of the identifier
065B                             ;     inc de
065B                             ; symbol1:                                 ; 0-9 A-Z a-z _
065B                             ;     ld a,(bc)
065B                             ;     ld (de),a
065B                             ;     cp " "+1
065B                             ;     jr c,symbol2
065B                             ;     ld l,a
065B                             ;     ld a,(hl)
065B                             ;     cp lsb(ident_)
065B                             ;     jr z,symbol0
065B                             ;     cp lsb(num_)
065B                             ;     jr z,symbol0
065B                             ; symbol2:
065B                             ;     dec bc
065B                             ;     xor a
065B                             ;     ld (de),a                           ; terminate string with NUL
065B                             ;     push bc
065B                             ;     ld bc,PAD
065B                             ;     call hashStr                        ; hl = hash
065B                             ;     pop bc
065B                             ;     push hl
065B   DD E9                  JP   (ix)   
065D                IDENTU:      
065D   0A                     LD   a,(bc)   ; a = identifier char
065E   D6 41                  SUB   "A"   ; "A" = 0
0660   18 05                  JR   ident1   
0662                IDENTL:      
0662   0A                     LD   a,(bc)   
0663   D6 61                  SUB   "a"   
0665   C6 1A                  ADD   a,26   
0667                IDENT1:      
0667   26 19                  LD   h,msb(vars)   
0669   6F                     LD   l,a   ; l = a * 3
066A   87                     ADD   a,a   
066B   85                     ADD   a,l   
066C   6F                     LD   l,a   
066D   E9                     JP   (hl)   
066E                FRAC:        
066E   2A B2 19               LD   hl,(vFrac)   
0671   E5                     PUSH   hl   
0672   DD E9                  JP   (ix)   
0674                SQRT1:       
0674   E1                     POP   hl   
0675   C5                     PUSH   bc   
0676   CD FA 06               CALL   squareRoot   
0679   ED 43 B2 19            LD   (vFrac),bc   
067D   C1                     POP   bc   
067E   D5                     PUSH   de   
067F   DD E9                  JP   (ix)   
0681                ABS1:        
0681   E1                     POP   hl   
0682   CB 7C                  BIT   7,h   
0684   C8                     RET   z   
0685   AF                     XOR   a   
0686   95                     SUB   l   
0687   6F                     LD   l,a   
0688   9F                     SBC   a,a   
0689   94                     SUB   h   
068A   67                     LD   h,a   
068B   E5                     PUSH   hl   
068C   DD E9                  JP   (ix)   
068E                MOD:         
068E   D1                     POP   de   ; get first value
068F   E1                     POP   hl   ; get 2nd value
0690   C5                     PUSH   bc   ; preserve the IP
0691   44 4D                  LD   bc,hl   
0693   CD E1 06               CALL   divide   
0696   C1                     POP   bc   
0697   E5                     PUSH   hl   ; push remainder
0698   DD E9                  JP   (ix)   
069A                             ; hl = value1, de = value2
069A                             ; hl = result
069A                EQUALS:      
069A   B7                     OR   a   ; reset the carry flag
069B   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
069D   28 10                  JR   z,true1   
069F   C3 B5 06               JP   false1   
06A2                             ; hl = value1 de = value2
06A2                             ; hl = result
06A2                LESSTHANEQ:      
06A2   B7                     OR   a   
06A3   ED 52                  SBC   hl,de   
06A5   18 05                  JR   lessthan1   
06A7                             ; hl = value1 de = value2
06A7                             ; hl = result
06A7                LESSTHAN:      
06A7   B7                     OR   a   
06A8   ED 52                  SBC   hl,de   
06AA   28 09                  JR   z,false1   
06AC                LESSTHAN1:      
06AC   FA B5 06               JP   m,false1   
06AF                TRUE1:       
06AF   21 FF FF               LD   hl,TRUE   
06B2   E5                     PUSH   hl   
06B3   DD E9                  JP   (ix)   
06B5                NULL1:       
06B5                FALSE1:      
06B5   21 00 00               LD   hl,FALSE   
06B8   E5                     PUSH   hl   
06B9   DD E9                  JP   (ix)   
06BB                             ; Z80 port input
06BB                             ; port -- value
06BB                INPUT:       
06BB   E1                     POP   hl   
06BC   59                     LD   e,c   ; save IP
06BD   4D                     LD   c,l   
06BE   ED 68                  IN   l,(c)   
06C0   26 00                  LD   h,0   
06C2   4B                     LD   c,e   ; restore IP
06C3   E5                     PUSH   hl   
06C4   DD E9                  JP   (ix)   
06C6                             ; Z80 port output
06C6                             ; value port --
06C6                OUTPUT:      
06C6   E1                     POP   hl   
06C7   59                     LD   e,c   ; save IP
06C8   4D                     LD   c,l   
06C9   E1                     POP   hl   
06CA   ED 69                  OUT   (c),l   
06CC   4B                     LD   c,e   ; restore IP
06CD   DD E9                  JP   (ix)   
06CF                KEY:         
06CF   CD 81 00               CALL   getchar   
06D2   26 00                  LD   h,0   
06D4   6F                     LD   l,a   
06D5   E5                     PUSH   hl   
06D6   DD E9                  JP   (ix)   
06D8                NEG:         
06D8   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
06DB   D1                     POP   de   
06DC   C3 94 03               JP   sub2   ; use the SUBtract routine
06DF                FILTER:      
06DF                MAP:         
06DF                SCAN:        
06DF   DD E9                  JP   (ix)   
06E1                             ; -------------------------------------------------------------------------------
06E1                             ; ; hash C-string
06E1                             ; ; BC = str
06E1                             ; ; HL = hash
06E1                             ; hashStr:
06E1                             ;     ld (vHashStr),bc                    ; store source string
06E1                             ;     ld hl,0
06E1                             ; hashStr1:
06E1                             ;     ld a,(bc)                           ; load next char
06E1                             ;     inc bc
06E1                             ;     cp 0                                ; NUL?
06E1                             ;     ret z
06E1                             ; hashStr2:
06E1                             ;     ld d,0
06E1                             ;     ld e,a
06E1                             ;     add hl,de
06E1                             ;     ld de,hl                            ; hl *= 193 (11000001)
06E1                             ;     add hl,hl                           ; shift left
06E1                             ;     add hl,de                           ; add
06E1                             ;     add hl,hl                           ; shift left
06E1                             ;     add hl,hl                           ; shift left
06E1                             ;     add hl,hl                           ; shift left
06E1                             ;     add hl,hl                           ; shift left
06E1                             ;     add hl,hl                           ; shift left
06E1                             ;     add hl,hl                           ; shift left
06E1                             ;     add hl,de                           ; add
06E1                             ;     jr hashStr1
06E1                             ; ; add entry to hash slots and hash pointers
06E1                             ; ; bc = hash (b = hi, c = lo), de = addr
06E1                             ; ; sets carry if successful
06E1                             ; defineEntry:
06E1                             ;     sla c                               ; lo = lo * 2
06E1                             ;     ld l,c                              ; lo1 = lo
06E1                             ;     ld h,msb(hashSlots)                 ; hl = slots[lo*4]
06E1                             ; defineEntry0:
06E1                             ;     ld a,(hl)                           ; a = (lo1)
06E1                             ;     cp UNUSED                           ; is it unused?
06E1                             ;     jr z,defineEntry3                   ; yes, add entry
06E1                             ;     ld a,c                              ; a = lo
06E1                             ;     cp (hl)                             ; compare (lo1) with lo
06E1                             ;     jr nz,defineEntry1                  ; no match loop around
06E1                             ;     inc l
06E1                             ;     ld a,b                              ; a = hi
06E1                             ;     cp (hl)                             ; compare (lo1+1) with hi
06E1                             ;     jr z,defineEntry2                   ; identical hash, collision, exit
06E1                             ;     dec l                               ; restore l
06E1                             ; defineEntry1:
06E1                             ;     inc l                               ; try next entry
06E1                             ;     inc l
06E1                             ;     ld a,c                              ; compare lo and lo1
06E1                             ;     cp l                                ; if equal then there's no space left, reject
06E1                             ;     jr nz,defineEntry0
06E1                             ; defineEntry2:
06E1                             ;     or a                                ; clear carry flag, failure
06E1                             ;     ret
06E1                             ; defineEntry3:                           ; new entry
06E1                             ;     ld (hl),c                           ; (lo1) = hash lo
06E1                             ;     inc hl
06E1                             ;     ld (hl),b                           ; (lo1 + 1) = hash hi
06E1                             ;     ld h,msb(hashWords)                 ; hl = slots[lo*4]
06E1                             ;     ld (hl),d
06E1                             ;     dec hl
06E1                             ;     ld (hl),e                           ; (slot + 2) = address
06E1                             ;     scf                                 ; set carry flag, success
06E1                             ;     ret
06E1                             ; ; looks up hash and returns address
06E1                             ; ; bc = hash
06E1                             ; ; returns addr in hl, sets carry if successful
06E1                             ; lookupEntry:
06E1                             ;     sla c                               ; lo = lo * 2
06E1                             ;     ld l,c                              ; lo1 = lo
06E1                             ;     ld h,msb(hashSlots)                 ; hl = slots[lo*4]
06E1                             ; lookupEntry0:
06E1                             ;     ld a,(hl)                           ; a = (hl), slot
06E1                             ;     cp UNUSED                           ; is it unused?
06E1                             ;     jr z,defineEntry2                   ; yes, does not exist
06E1                             ;     ld a,c                              ; a = lo
06E1                             ;     cp (hl)                             ; compare (lo1) with lo
06E1                             ;     jr nz,lookupEntry1                  ; no match loop around
06E1                             ;     inc l
06E1                             ;     ld a,b                              ; a = hi
06E1                             ;     cp (hl)                             ; compare (lo1+1) with hi
06E1                             ;     jr z,lookupEntry3
06E1                             ;     dec l
06E1                             ; lookupEntry1:
06E1                             ;     inc l
06E1                             ;     inc l
06E1                             ;     ld a,c
06E1                             ;     cp l                                ; no space left, reject
06E1                             ;     jr nz,lookupEntry0
06E1                             ; lookupEntry2:
06E1                             ;     or a                                ; clear carry flag, failure
06E1                             ;     ret
06E1                             ; lookupEntry3:
06E1                             ;     ld h,msb(hashWords)                 ; hl = slots[lo*4]
06E1                             ;     ld d,(hl)
06E1                             ;     dec l                               ; restore l
06E1                             ;     ld e,(hl)                           ; (slot + 2) = address
06E1                             ;     ex de,hl
06E1                             ;     scf
06E1                             ;     ret
06E1                             ; division subroutine.
06E1                             ; bc: divisor, de: dividend, hl: remainder
06E1                DIVIDE:      
06E1   21 00 00               LD   hl,0   ; zero the remainder
06E4   3E 10                  LD   a,16   ; loop counter
06E6                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
06E6   CB 21                  SLA   c   
06E8   CB 10                  RL   b   
06EA   ED 6A                  ADC   hl,hl   
06EC   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
06EE   38 03                  JR   c,divide2   
06F0   0C                     INC   c   
06F1   18 01                  JR   divide3   
06F3                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
06F3   19                     ADD   hl,de   
06F4                DIVIDE3:      
06F4   3D                     DEC   a   
06F5   20 EF                  JR   nz,divide1   
06F7   50 59                  LD   de,bc   ; result from bc to de
06F9   C9                     RET      
06FA                             ; squareroot
06FA                             ; Input: HL = value
06FA                             ; Result: DE = square root BC = remainder
06FA                SQUAREROOT:      
06FA   01 00 08               LD   bc,0800h   
06FD   59                     LD   e,c   
06FE   AF                     XOR   a   
06FF                SQUAREROOT1:      
06FF   29                     ADD   hl,hl   
0700   CB 11                  RL   c   
0702   ED 6A                  ADC   hl,hl   
0704   CB 11                  RL   c   
0706   30 02                  JR   nc,$+4   
0708   CB C5                  SET   0,l   
070A   7B                     LD   a,e   
070B   87                     ADD   a,a   
070C   5F                     LD   e,a   
070D   87                     ADD   a,a   
070E   CB 45                  BIT   0,l   
0710   20 03                  JR   nz,$+5   
0712   91                     SUB   c   
0713   30 05                  JR   nc,squareRoot4   
0715   79                     LD   a,c   
0716   93                     SUB   e   
0717   1C                     INC   e   
0718   93                     SUB   e   
0719   4F                     LD   c,a   
071A                SQUAREROOT4:      
071A   10 E3                  DJNZ   squareRoot1   
071C   CB 45                  BIT   0,l   
071E   28 01                  JR   z,squareRoot5   
0720   04                     INC   b   
0721                SQUAREROOT5:      
0721   16 00                  LD   d,0   
0723   C9                     RET      
0724                             ; print decimal
0724                             ; hl = value
0724                PRTDEC:      
0724   CB 7C                  BIT   7,h   
0726   28 0B                  JR   z,prtdec0   
0728   3E 2D                  LD   a,"-"   
072A   CD 85 00               CALL   putchar   
072D   AF                     XOR   a   
072E   95                     SUB   l   
072F   6F                     LD   l,a   
0730   9F                     SBC   a,a   
0731   94                     SUB   h   
0732   67                     LD   h,a   
0733                PRTDEC0:      
0733   C5                     PUSH   bc   
0734   0E 00                  LD   c,0   ; leading zeros flag = false
0736   11 F0 D8               LD   de,-10000   
0739   CD 55 07               CALL   prtdec1   
073C   11 18 FC               LD   de,-1000   
073F   CD 55 07               CALL   prtdec1   
0742   11 9C FF               LD   de,-100   
0745   CD 55 07               CALL   prtdec1   
0748   1E F6                  LD   e,-10   
074A   CD 55 07               CALL   prtdec1   
074D   0C                     INC   c   ; flag = true for at least digit
074E   1E FF                  LD   e,-1   
0750   CD 55 07               CALL   prtdec1   
0753   C1                     POP   bc   
0754   C9                     RET      
0755                PRTDEC1:      
0755   06 2F                  LD   b,"0"-1   
0757                PRTDEC2:      
0757   04                     INC   b   
0758   19                     ADD   hl,de   
0759   38 FC                  JR   c,prtdec2   
075B   ED 52                  SBC   hl,de   
075D   3E 30                  LD   a,"0"   
075F   B8                     CP   b   
0760   20 05                  JR   nz,prtdec3   
0762   AF                     XOR   a   
0763   B1                     OR   c   
0764   C8                     RET   z   
0765   18 01                  JR   prtdec4   
0767                PRTDEC3:      
0767   0C                     INC   c   
0768                PRTDEC4:      
0768   78                     LD   a,b   
0769   C3 85 00               JP   putchar   
076C                PRTHEX:      ; display hl as a 16-bit number in hex.
076C   C5                     PUSH   bc   ; preserve the IP
076D   7C                     LD   a,h   
076E   CD 77 07               CALL   prthex2   
0771   7D                     LD   a,l   
0772   CD 77 07               CALL   prthex2   
0775   C1                     POP   bc   
0776   C9                     RET      
0777                PRTHEX2:      
0777   4F                     LD   c,a   
0778   1F                     RRA      
0779   1F                     RRA      
077A   1F                     RRA      
077B   1F                     RRA      
077C   CD 80 07               CALL   prthex3   
077F   79                     LD   a,c   
0780                PRTHEX3:      
0780   E6 0F                  AND   0x0F   
0782   C6 90                  ADD   a,0x90   
0784   27                     DAA      
0785   CE 40                  ADC   a,0x40   
0787   27                     DAA      
0788   C3 85 00               JP   putchar   
078B                PRTSTR0:      
078B   CD 85 00               CALL   putchar   
078E   23                     INC   hl   
078F                PRTSTR:      
078F   7E                     LD   a,(hl)   
0790   B7                     OR   a   
0791   20 F8                  JR   nz,prtstr0   
0793   C9                     RET      
0794                             ; **************************************************************************
0794                             ; calculate nesting value
0794                             ; a is char to be tested,
0794                             ; e is the nesting value (initially 0)
0794                             ; e is increased by ( and [
0794                             ; e is decreased by ) and ]
0794                             ; e has its bit 7 toggled by `
0794                             ; limited to 127 levels
0794                             ; **************************************************************************
0794                NESTING:      
0794   FE 22                  CP   $22   ; quote char
0796   20 0A                  JR   nz,nesting1   
0798   CB 7B                  BIT   7,e   
079A   28 03                  JR   z,nesting1a   
079C   CB BB                  RES   7,e   
079E   C9                     RET      
079F                NESTING1A:      
079F   CB FB                  SET   7,e   
07A1   C9                     RET      
07A2                NESTING1:      
07A2   CB 7B                  BIT   7,e   
07A4   C0                     RET   nz   
07A5   FE 7B                  CP   "{"   
07A7   28 08                  JR   z,nesting2   
07A9   FE 5B                  CP   "["   
07AB   28 04                  JR   z,nesting2   
07AD   FE 28                  CP   "("   
07AF   20 02                  JR   nz,nesting3   
07B1                NESTING2:      
07B1   1C                     INC   e   
07B2   C9                     RET      
07B3                NESTING3:      
07B3   FE 7D                  CP   "}"   
07B5   28 07                  JR   z,nesting4   
07B7   FE 5D                  CP   "]"   
07B9   28 03                  JR   z,nesting4   
07BB   FE 29                  CP   ")"   
07BD   C0                     RET   nz   
07BE                NESTING4:      
07BE   1D                     DEC   e   
07BF   C9                     RET      
07C0                PROMPT:      
07C0   CD D0 07               CALL   printStr   
07C3   0D 0A 3E 20 00         .CSTR   "\r\n> "   
07C8   C9                     RET      
07C9                CRLF:        
07C9   CD D0 07               CALL   printStr   
07CC   0D 0A 00               .CSTR   "\r\n"   
07CF   C9                     RET      
07D0                             ; prints a null teminated string
07D0                             ; the string should be immedaitely following the call
07D0                PRINTSTR:      
07D0   E3                     EX   (sp),hl   ; swap			
07D1   CD 8F 07               CALL   prtstr   
07D4   23                     INC   hl   ; inc past NUL
07D5   E3                     EX   (sp),hl   ; put it back	
07D6   C9                     RET      
07D7                             ; branch:                         ; executes the address on the stack
07D7                             ;     pop bc                      ; bc = code*
07D7                             ;     dec bc                      ; dec to prepare for next routine
07D7                             ;     jp (ix)
07D7                             ; executes a null teminated string (null executes exit_)
07D7                             ; the string should be immedaitely following the call
07D7                EXECSTR:      ; create a root stack frame
07D7   C1                     POP   bc   ; bc = code*
07D8   0B                     DEC   bc   ; dec to prepare for next routine
07D9   11 00 00               LD   de,0   
07DC   D5                     PUSH   de   ; push fake IP
07DD   D5                     PUSH   de   ; push null arglist*
07DE   D5                     PUSH   de   ; push null first_arg*
07DF   D5                     PUSH   de   ; push fake BP
07E0   DD E9                  JP   (ix)   
07E2                             ; define:
07E2                             ;     pop hl
07E2                             ;     ld a,(hl)
07E2                             ;     inc hl
07E2                             ;     ld bc,hl
07E2                             ;     ld e,a
07E2                             ;     ld d,0
07E2                             ;     add hl,de
07E2                             ;     ld e,(hl)
07E2                             ;     inc hl
07E2                             ;     ld d,(hl)
07E2                             ;     inc hl
07E2                             ;     push hl                             ; bc = str
07E2                             ;     push de
07E2                             ;     call hashStr                        ; hl = hash
07E2                             ;     pop de
07E2                             ;     ld bc,hl
07E2                             ;     jp defineEntry
07E2                             ; arg1 .. argn func -- ?
07E2                CALL:        
07E2   E1                     POP   hl   
07E3   E9                     JP   (hl)   
07E4                             ; execute a block of code which ends with }
07E4                             ; creates a root scope if BP == stack
07E4                             ; else uses outer scope
07E4                EXEC:        
07E4   D1                     POP   de   ; de = block*
07E5                EXEC0:       
07E5   7B                     LD   a,e   ; if block* == null, exit
07E6   B2                     OR   d   
07E7   20 02                  JR   nz,exec1   
07E9   DD E9                  JP   (ix)   
07EB                EXEC1:       
07EB   C5                     PUSH   bc   ; push IP
07EC   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
07EF   FD 44                  LD   b,iyh   
07F1   FD 4D                  LD   c,iyl   
07F3   B7                     OR   a   ; hl = stack - BP = root_scope
07F4   ED 42                  SBC   hl,bc   
07F6   7D                     LD   a,l   ; if root_scope, skip
07F7   B4                     OR   h   
07F8   28 11                  JR   z,exec2   
07FA   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
07FD   FD 46 05               LD   b,(iy+5)   
0800   C5                     PUSH   bc   
0801   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0804   FD 46 03               LD   b,(iy+3)   
0807   60 69                  LD   hl,bc   
0809   18 34                  JR   doFunc4   
080B                EXEC2:       
080B   E5                     PUSH   hl   ; push arg_list (null)
080C   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
080F   39                     ADD   hl,sp   
0810   18 2D                  JR   doFunc4   ; 
0812                             ; call with args
0812                             ; creates a scope
0812                             ; code* -- ?
0812                DOFUNC:      ; execute code at pointer
0812   E1                     POP   hl   ; hl = code*
0813   7D                     LD   a,l   ; if code* == null, skip
0814   B4                     OR   h   
0815   28 34                  JR   z,doFunc5   
0817   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
0818   23                     INC   hl   
0819   56                     LD   d,(hl)   
081A   23                     INC   hl   
081B   EB                     EX   de,hl   
081C   7D                     LD   a,l   ; if arg_list* != null skip
081D   B4                     OR   h   
081E   20 08                  JR   nz,doFunc1   
0820   C5                     PUSH   bc   ; push IP
0821   E5                     PUSH   hl   ; push arg_list (null)
0822   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
0825   39                     ADD   hl,sp   
0826   18 17                  JR   doFunc4   
0828                DOFUNC1:      
0828   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
0829   7E                     LD   a,(hl)   
082A   23                     INC   hl   
082B   B7                     OR   a   
082C   28 05                  JR   z,doFunc3   
082E                DOFUNC2:      
082E   3B                     DEC   sp   
082F   3B                     DEC   sp   
0830   3D                     DEC   a   
0831   20 FB                  JR   nz,doFunc2   
0833                DOFUNC3:      
0833   C5                     PUSH   bc   ; push IP
0834   E5                     PUSH   hl   ; push arg_list*
0835   2B                     DEC   hl   ; hl = num_args*
0836   2B                     DEC   hl   
0837   7E                     LD   a,(hl)   ; hl = num_args * 2
0838   87                     ADD   a,a   
0839   C6 04                  ADD   a,4   ; offset for IP and arg_list
083B   6F                     LD   l,a   
083C   26 00                  LD   h,$0   
083E   39                     ADD   hl,sp   ; hl = first_arg*
083F                DOFUNC4:      
083F   E5                     PUSH   hl   ; push first_arg
0840   FD E5                  PUSH   iy   ; push BP
0842   FD 21 00 00            LD   iy,0   ; BP = SP
0846   FD 39                  ADD   iy,sp   
0848   42 4B                  LD   bc,de   ; bc = de = block*-1
084A   0B                     DEC   bc   
084B                DOFUNC5:      
084B   DD E9                  JP   (ix)   
084D                             ; arg_list* block* -- ptr
084D                FUNC:        
084D   2A C0 19               LD   hl,(vHeapPtr)   ; hl = heapptr
0850   36 CD                  LD   (hl),$cd   ; compile "call doFunc"
0852   23                     INC   hl   
0853   36 12                  LD   (hl),lsb(doFunc)   
0855   23                     INC   hl   
0856   36 08                  LD   (hl),msb(doFunc)   
0858   23                     INC   hl   
0859   D1                     POP   de   ; hl = heapPtr, de = block
085A   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
085B   E3                     EX   (sp),hl   
085C   EB                     EX   de,hl   
085D   73                     LD   (hl),e   ; compile arg_list*
085E   23                     INC   hl   
085F   72                     LD   (hl),d   
0860   23                     INC   hl   
0861   D1                     POP   de   ; de = block*
0862   C5                     PUSH   bc   ; (sp) = IP
0863   06 01                  LD   b,1   ; b = nesting
0865                FUNC1:       
0865   1A                     LD   a,(de)   
0866   13                     INC   de   
0867   77                     LD   (hl),a   
0868   23                     INC   hl   
0869   FE 29                  CP   ")"   
086B   28 29                  JR   z,func4   
086D   FE 7D                  CP   "}"   
086F   28 25                  JR   z,func4   
0871   FE 5D                  CP   "]"   
0873   28 21                  JR   z,func4   
0875   FE 28                  CP   "("   
0877   28 12                  JR   z,func2   
0879   FE 7B                  CP   "{"   
087B   28 0E                  JR   z,func2   
087D   FE 5B                  CP   "["   
087F   28 0A                  JR   z,func2   
0881   FE 27                  CP   "'"   
0883   28 09                  JR   z,func3   
0885   FE 60                  CP   "`"   
0887   28 05                  JR   z,func3   
0889   18 DA                  JR   func1   
088B                FUNC2:       
088B   04                     INC   b   
088C   18 D7                  JR   func1   
088E                FUNC3:       
088E   3E 80                  LD   a,$80   
0890   A8                     XOR   b   
0891   47                     LD   b,a   
0892   20 D1                  JR   nz,func1   
0894   18 03                  JR   func4a   
0896                FUNC4:       
0896   05                     DEC   b   
0897   20 CC                  JR   nz,func1   ; get the next element
0899                FUNC4A:      
0899   23                     INC   hl   
089A   C1                     POP   bc   ; de = defstart, hl = IP
089B   ED 5B C0 19            LD   de,(vHeapPtr)   ; de = defstart
089F   D5                     PUSH   de   
08A0   22 C0 19               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
08A3   DD E9                  JP   (ix)   
08A5                             ; $a .. $z
08A5                             ; -- value
08A5                             ; returns value of arg
08A5                ARG:         
08A5   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
08A8   FD 56 05               LD   d,(iy+5)   
08AB   EB                     EX   de,hl   
08AC   7D                     LD   a,l   ; arg_list* == null, skip
08AD   B4                     OR   h   
08AE   28 1C                  JR   z,arg0a   
08B0   2B                     DEC   hl   ; a = num_args, hl = arg_list*
08B1   2B                     DEC   hl   
08B2   7E                     LD   a,(hl)   
08B3   23                     INC   hl   
08B4   23                     INC   hl   
08B5   B7                     OR   a   
08B6   28 14                  JR   z,arg0a   ; num_args == 0, skip
08B8   5F                     LD   e,a   ; e = a = num_args
08B9   03                     INC   bc   ; a = next char = arg_name
08BA   0A                     LD   a,(bc)   
08BB   C5                     PUSH   bc   ; save IP
08BC   43                     LD   b,e   ; b = e = num_args
08BD   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
08C0   FD 56 03               LD   d,(iy+3)   
08C3                ARG0:        
08C3   1B                     DEC   de   ; a = arg_name, de = next arg*
08C4   1B                     DEC   de   
08C5   BE                     CP   (hl)   
08C6   28 09                  JR   z,arg1   
08C8   23                     INC   hl   ; hl = next arg_list*
08C9   10 F8                  DJNZ   arg0   
08CB   C1                     POP   bc   ; no match, restore IP
08CC                ARG0A:       
08CC   11 00 00               LD   de,0   ; return 0
08CF   18 08                  JR   arg1a   
08D1                ARG1:        
08D1   C1                     POP   bc   ; restore IP
08D2   EB                     EX   de,hl   ; hl = arg*
08D3   22 B8 19               LD   (vPointer),hl   ; store arg* in setter
08D6   5E                     LD   e,(hl)   
08D7   23                     INC   hl   
08D8   56                     LD   d,(hl)   ; de = arg
08D9                ARG1A:       
08D9   D5                     PUSH   de   ; push arg
08DA   DD E9                  JP   (ix)   
08DC                             ; closure:
08DC                             ; array -- addr
08DC                CLOSURE:      
08DC   2A C0 19               LD   hl,(vHeapPtr)   ; hl = heap_ptr
08DF   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
08E1   23                     INC   hl   
08E2   36 F6                  LD   (hl),lsb(doClosure)   
08E4   23                     INC   hl   
08E5   36 08                  LD   (hl),msb(doClosure)   
08E7   D1                     POP   de   
08E8   23                     INC   hl   
08E9   73                     LD   (hl),e   
08EA   23                     INC   hl   
08EB   72                     LD   (hl),d   
08EC   ED 5B C0 19            LD   de,(vHeapPtr)   ; de = closure start
08F0   D5                     PUSH   de   
08F1   22 C0 19               LD   (vHeapPtr),hl   ; update heap ptr to end of closure
08F4   DD E9                  JP   (ix)   
08F6                             ; code* -- arr1 arr2 .. arrn func
08F6                DOCLOSURE:      
08F6   E1                     POP   hl   ; hl = code*
08F7   5E                     LD   e,(hl)   ; de = array
08F8   23                     INC   hl   
08F9   56                     LD   d,(hl)   
08FA   23                     INC   hl   
08FB   7B                     LD   a,e   ; de == null, skip
08FC   B2                     OR   d   
08FD   28 17                  JR   z,doClosure3   
08FF   EB                     EX   de,hl   ; hl = array
0900   ED 43 C2 19            LD   (vTemp1),bc   ; save IP
0904   2B                     DEC   hl   ; bc = count
0905   46                     LD   b,(hl)   
0906   2B                     DEC   hl   
0907   4E                     LD   c,(hl)   
0908   23                     INC   hl   ; push each item on stack
0909   23                     INC   hl   
090A   18 06                  JR   doClosure2   
090C                DOCLOSURE1:      
090C   5E                     LD   e,(hl)   
090D   23                     INC   hl   
090E   56                     LD   d,(hl)   
090F   23                     INC   hl   
0910   D5                     PUSH   de   
0911   0B                     DEC   bc   
0912                DOCLOSURE2:      
0912   79                     LD   a,c   
0913   B0                     OR   b   
0914   20 F6                  JR   nz,doClosure1   
0916                DOCLOSURE3:      
0916   ED 4B C2 19            LD   bc,(vTemp1)   ; restore IP
091A   DD E9                  JP   (ix)   
091C                             ; ; readIdent
091C                             ; ; reads identifier from input stream into buffer
091C                             ; ; input: bc = IP, de = buffer
091C                             ; readIdent:
091C                             ;     ld h,msb(opcodesBase)               ; this table identifies the char type
091C                             ;     jr readIdent1
091C                             ; readIdent0:                             ; copy to PAD area
091C                             ;     inc bc                              ; characters that are part of the identifier
091C                             ;     inc de
091C                             ; readIdent1:                             ; 0-9 A-Z a-z
091C                             ;     ld a,(bc)
091C                             ;     ld (de),a
091C                             ;     cp " "+1
091C                             ;     jr c,readIdent2
091C                             ;     ld l,a
091C                             ;     ld a,(hl)
091C                             ;     cp lsb(ident_)
091C                             ;     jr z,readIdent0
091C                             ;     cp lsb(num_)
091C                             ;     jr z,readIdent0
091C                             ; readIdent2:
091C                             ;     dec bc
091C                             ;     xor a
091C                             ;     ld (de),a                           ; terminate string with NUL
091C                             ;     ret
091C                INIT:        
091C   CF                     RST   $08   
091D   DD 2A BE 19            LD   ix,(vNext)   
0921   FD 21 80 18            LD   iy,STACK   
0925   21 80 01               LD   hl,isysVars   
0928   11 B2 19               LD   de,sysVars   
092B   01 10 00               LD   bc,8 * 2   
092E   ED B0                  LDIR      
0930   21 47 06               LD   hl,doLet   ; define restart vectors
0933   22 9C 19               LD   (RST08),hl   
0936   21 12 08               LD   hl,doFunc   
0939   22 9E 19               LD   (RST10),hl   
093C   21 00 19               LD   hl,vars   ; clear 52 exec flags and 52 integer vars
093F   06 34                  LD   b,26 * 2   
0941   AF                     XOR   a   
0942                INIT0:       
0942   36 00                  LD   (hl),0   
0944   77                     LD   (hl),a   
0945   23                     INC   hl   
0946   10 FA                  DJNZ   init0   
0948                             ;     ld a,UNUSED
0948                             ;     ld b,0
0948                             ;     ld hl, hashSlots
0948                             ; init1:
0948                             ;     ld (hl),a
0948                             ;     inc hl
0948                             ;     djnz init1
0948                             ; call define
0948                             ; .pstr "abs",0
0948                             ; dw abs1
0948                             ; call define
0948                             ; .pstr "addr",0
0948                             ; dw addr
0948                             ; call define
0948                             ; .pstr "bytes",0
0948                             ; dw bytes
0948                             ; call define
0948                             ; .pstr "call",0
0948                             ; dw call
0948                             ; call define
0948                             ; .pstr "closure",0
0948                             ; dw closure
0948                             ; call define
0948                             ; .pstr "def",0
0948                             ; dw def
0948                             ; call define
0948                             ; .pstr "exec",0
0948                             ; dw exec
0948                             ; call define
0948                             ; .pstr "false",0
0948                             ; dw false1
0948                             ; call define
0948                             ; .pstr "filter",0
0948                             ; dw filter
0948                             ; call define
0948                             ; .pstr "frac",0
0948                             ; dw frac
0948                             ; call define
0948                             ; .pstr "func",0
0948                             ; dw func
0948                             ; call define
0948                             ; .pstr "hash",0
0948                             ; dw hash
0948                             ; call define
0948                             ; .pstr "input",0
0948                             ; dw input
0948                             ; call define
0948                             ; .pstr "if",0
0948                             ; dw if
0948                             ; call define
0948                             ; .pstr "ifte",0
0948                             ; dw ifte
0948                             ; call define
0948                             ; .pstr "key",0
0948                             ; dw key
0948                             ; call define
0948                             ; .pstr "let",0
0948                             ; dw let
0948                             ; call define
0948                             ; .pstr "loop",0
0948                             ; dw loop
0948                             ; call define
0948                             ; .pstr "map",0
0948                             ; dw map
0948                             ; call define
0948                             ; .pstr "mod",0
0948                             ; dw mod
0948                             ; call define
0948                             ; .pstr "neg",0
0948                             ; dw neg
0948                             ; call define
0948                             ; .pstr "nil",0
0948                             ; dw null1
0948                             ; call define
0948                             ; .pstr "output",0
0948                             ; dw output
0948                             ; call define
0948                             ; .pstr "scan",0
0948                             ; dw scan
0948                             ; call define
0948                             ; .pstr "set",0
0948                             ; dw set
0948                             ; call define
0948                             ; .pstr "shiftLeft",0
0948                             ; dw shiftLeft
0948                             ; call define
0948                             ; .pstr "shiftRight",0
0948                             ; dw shiftRight
0948                             ; call define
0948                             ; .pstr "sqrt",0
0948                             ; dw sqrt1
0948                             ; call define
0948                             ; .pstr "switch",0
0948                             ; dw switch
0948                             ; call define
0948                             ; .pstr "true",0
0948                             ; dw true1
0948                             ; call define
0948                             ; .pstr "words",0
0948                             ; dw words
0948   C9                     RET      
0949                START:       
0949   31 80 18               LD   sp,STACK   ; start of monty
094C   CD 1C 09               CALL   init   ; setups
094F   CD D0 07               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0952   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
095F                INTERPRET:      
095F   CD C0 07               CALL   prompt   
0962   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0965   ED 43 B6 19            LD   (vTIBPtr),bc   
0969                INTERPRET2:      ; calc nesting (a macro might have changed it)
0969   1E 00                  LD   e,0   ; initilize nesting value
096B   C5                     PUSH   bc   ; save offset into TIB,
096C                             ; bc is also the count of chars in TIB
096C   21 00 1A               LD   hl,TIB   ; hl is start of TIB
096F   18 06                  JR   interpret4   
0971                INTERPRET3:      
0971   7E                     LD   a,(hl)   ; a = char in TIB
0972   23                     INC   hl   ; inc pointer into TIB
0973   0B                     DEC   bc   ; dec count of chars in TIB
0974   CD 94 07               CALL   nesting   ; update nesting value
0977                INTERPRET4:      
0977   79                     LD   a,c   ; is count zero?
0978   B0                     OR   b   
0979   20 F6                  JR   nz,interpret3   ; if not loop
097B   C1                     POP   bc   ; restore offset into TIB
097C                INTERPRET5:      
097C   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
097F   FE 20                  CP   $20   ; compare to space
0981   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0983   FE 00                  CP   $0   ; is it end of string? NUL end of string
0985                             ; ???? NEEDED?
0985   28 27                  JR   z,interpret8   
0987   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0989   28 10                  JR   z,interpret7   ; if anything else its macro/control
098B                             ; macro
098B                             ;  ld (vTIBPtr),bc
098B                             ;  ld hl,ctrlCodes
098B                             ;  add a,l			            ; look up key of macros
098B                             ;  ld l,a
098B                             ;  ld e,(hl)
098B                             ;  ld a,e
098B                             ;  or a
098B                             ;  jr z,macro1
098B                             ;  ld d,msb(macros)
098B                             ;  push de
098B                             ;  call call		            ; monty exec_ operation and jump to it
098B                             ;  db DC1,0
098B                             ; macro1:
098B                             ;  ld bc,(vTIBPtr)
098B   18 DC                  JR   interpret2   
098D                INTERPRET6:      
098D   21 00 1A               LD   hl,TIB   
0990   09                     ADD   hl,bc   
0991   77                     LD   (hl),a   ; store the character in textbuf
0992   03                     INC   bc   
0993   CD 85 00               CALL   putchar   ; echo character to screen
0996   CD 94 07               CALL   nesting   
0999   18 E1                  JR   interpret5   ; wait for next character
099B                INTERPRET7:      
099B   21 00 1A               LD   hl,TIB   
099E   09                     ADD   hl,bc   
099F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
09A1   23                     INC   hl   
09A2   36 0A                  LD   (hl),"\n"   
09A4   23                     INC   hl   
09A5   03                     INC   bc   
09A6   03                     INC   bc   
09A7   CD C9 07               CALL   crlf   ; echo character to screen
09AA   7B                     LD   a,e   ; if zero nesting append and ETX after \r
09AB   B7                     OR   a   
09AC   20 CE                  JR   nz,interpret5   
09AE                INTERPRET8:      
09AE   ED 43 B6 19            LD   (vTIBPtr),bc   
09B2   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
09B5                             ; we pressed enter
09B5   0B                     DEC   bc   
09B6                NEXT:        
09B6   03                     INC   bc   ; Increment the IP
09B7   0A                     LD   a,(bc)   ; Get the next character and dispatch
09B8   FE 20                  CP   " "   ; whitespace?
09BA   28 FA                  JR   z,next   ; space? ignore
09BC   38 0B                  JR   c,next1   
09BE   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
09C0   30 16                  JR   nc,next2   
09C2   6F                     LD   l,a   ; index into table
09C3   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
09C5   6E                     LD   l,(hl)   ; get low jump address
09C6   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
09C8   E9                     JP   (hl)   ; Jump to routine
09C9                NEXT1:       
09C9                             ; cp ESC                      ; escape from interpreter, needed???
09C9                             ; jr z,escape_
09C9   FE 00                  CP   NUL   ; end of input string?
09CB   28 11                  JR   z,exit_   
09CD   FE 11                  CP   DC1   ; literal number
09CF   28 10                  JR   z,literal_   
09D1   FE 12                  CP   DC2   ; enter routine
09D3   28 15                  JR   z,enter_   
09D5   C3 5F 09               JP   interpret   ; no, other whitespace, macros?
09D8                NEXT2:       
09D8   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
09D9   03                     INC   bc   
09DA   0A                     LD   a,(bc)   
09DB   6F                     LD   l,a   
09DC   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
09DD   E9                     JP   (hl)   
09DE                             ; escape_:
09DE                             ;     inc bc                      ; falls through
09DE                EXIT_:       
09DE   60 69                  LD   hl,bc   
09E0   E9                     JP   (hl)   
09E1                LITERAL_:      
09E1   03                     INC   bc   
09E2   0A                     LD   a,(bc)   
09E3   6F                     LD   l,a   
09E4   03                     INC   bc   
09E5   0A                     LD   a,(bc)   
09E6   67                     LD   h,a   
09E7   E5                     PUSH   hl   
09E8   DD E9                  JP   (ix)   
09EA                ENTER_:      
09EA   03                     INC   bc   
09EB   0A                     LD   a,(bc)   
09EC   6F                     LD   l,a   
09ED   03                     INC   bc   
09EE   0A                     LD   a,(bc)   
09EF   67                     LD   h,a   
09F0   E9                     JP   (hl)   
09F1                ERROR:       
09F1   CD D0 07               CALL   printStr   
09F4   45 72 72 6F 72 00      .CSTR   "Error"   
09FA   CD 24 07               CALL   prtdec   
09FD   C3 5F 09               JP   interpret   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                          ALIGN   $100   
1900                VARS:        
1900                          DS   26 * 2 * 3   ; 52 vars, 3 bytes, RST LO HI
199C                RESTARTS:      
199C                RST08:    DS   2   
199E                RST10:    DS   2   
19A0                RST18:    DS   2   
19A2                RST20:    DS   2   
19A4                RST28:    DS   2   
19A6                RST30:    DS   2   ; 
19A8                BAUD:     DS   2   ; 
19AA                INTVEC:   DS   2   ; 
19AC                NMIVEC:   DS   2   ; 
19AE                GETCVEC:   DS   2   ; 
19B0                PUTCVEC:   DS   2   ; 
19B2                SYSVARS:      
19B2                VFRAC:    DS   2   ; initialised sys variables
19B4                VDATAWIDTH:   DS   2   ; 
19B6                VTIBPTR:   DS   2   ; 
19B8                VPOINTER:   DS   2   ; 
19BA                VLASTDEF:   DS   2   ; 
19BC                VHASHSTR:   DS   2   ; 
19BE                VNEXT:    DS   2   ; 
19C0                VHEAPPTR:   DS   2   ; 
19C2                VTEMP1:   DS   2   ; uninitialised sys variables
19C4                VTEMP2:   DS   2   ; 
19C6                TBPTR:    DS   2   ; reserved for tests
19C8                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 53 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               06DF DEFINED AT LINE 1185 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 25 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1172 IN monty.asm
                    > USED AT LINE 2005 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 248 IN monty.asm
                    > USED AT LINE 255 IN monty.asm
                    > USED AT LINE 1360 IN monty.asm
                    > USED AT LINE 1401 IN monty.asm
                    > USED AT LINE 1425 IN monty.asm
                    > USED AT LINE 1428 IN monty.asm
                    > USED AT LINE 2036 IN monty.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 15 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 41 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 1139 IN monty.asm
FALSE:              0000 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 1144 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 19 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 20 IN monty.asm
NUL:                0000 DEFINED AT LINE 21 IN monty.asm
                    > USED AT LINE 2076 IN monty.asm
DC1:                0011 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 2078 IN monty.asm
DC2:                0012 DEFINED AT LINE 23 IN monty.asm
                    > USED AT LINE 2080 IN monty.asm
DC3:                0013 DEFINED AT LINE 24 IN monty.asm
MACROS:             0180 DEFINED AT LINE 58 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 63 IN monty.asm
                    > USED AT LINE 1822 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 75 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 77 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 111 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 214 IN monty.asm
NUM_:               0300 DEFINED AT LINE 216 IN monty.asm
                    > USED AT LINE 338 IN monty.asm
HEXNUM_:            0303 DEFINED AT LINE 219 IN monty.asm
ARG_:               0306 DEFINED AT LINE 222 IN monty.asm
STRING_:            0309 DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 228 IN monty.asm
DOT_:               030F DEFINED AT LINE 231 IN monty.asm
DOT1:               031B DEFINED AT LINE 239 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
DOT2:               0324 DEFINED AT LINE 244 IN monty.asm
                    > USED AT LINE 241 IN monty.asm
DOT3:               032E DEFINED AT LINE 250 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
                    > USED AT LINE 326 IN monty.asm
DOT4:               0332 DEFINED AT LINE 253 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
                    > USED AT LINE 249 IN monty.asm
INDEX_:             0339 DEFINED AT LINE 259 IN monty.asm
BLOCK_:             033C DEFINED AT LINE 262 IN monty.asm
BLOCKEND_:          033F DEFINED AT LINE 264 IN monty.asm
CHAR_:              0342 DEFINED AT LINE 266 IN monty.asm
ARRAY_:             0345 DEFINED AT LINE 268 IN monty.asm
ARRAYEND_:          0348 DEFINED AT LINE 270 IN monty.asm
IDENTU_:            034B DEFINED AT LINE 272 IN monty.asm
IDENTL_:            034E DEFINED AT LINE 274 IN monty.asm
SYMBOL_:            0351 DEFINED AT LINE 276 IN monty.asm
AND_:               0354 DEFINED AT LINE 278 IN monty.asm
AND1:               035B DEFINED AT LINE 286 IN monty.asm
                    > USED AT LINE 299 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
OR_:                035F DEFINED AT LINE 291 IN monty.asm
XOR_:               0368 DEFINED AT LINE 301 IN monty.asm
XOR1:               0369 DEFINED AT LINE 303 IN monty.asm
                    > USED AT LINE 314 IN monty.asm
INV_:               0371 DEFINED AT LINE 312 IN monty.asm
ADD_:               0376 DEFINED AT LINE 316 IN monty.asm
HDOT_:              037C DEFINED AT LINE 323 IN monty.asm
MUL_:               0383 DEFINED AT LINE 328 IN monty.asm
SUB_:               0386 DEFINED AT LINE 331 IN monty.asm
SUB1:               0392 DEFINED AT LINE 339 IN monty.asm
                    > USED AT LINE 336 IN monty.asm
SUB2:               0394 DEFINED AT LINE 342 IN monty.asm
                    > USED AT LINE 1181 IN monty.asm
NOT_:               039A DEFINED AT LINE 348 IN monty.asm
EQ_:                039F DEFINED AT LINE 352 IN monty.asm
EQ1:                03A7 DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 350 IN monty.asm
GT_:                03AB DEFINED AT LINE 362 IN monty.asm
LT_:                03B6 DEFINED AT LINE 371 IN monty.asm
LT1:                03BF DEFINED AT LINE 378 IN monty.asm
                    > USED AT LINE 369 IN monty.asm
DIV_:               03C8 DEFINED AT LINE 384 IN monty.asm
COMMAND_:           03D7 DEFINED AT LINE 395 IN monty.asm
COMMENT:            03E3 DEFINED AT LINE 403 IN monty.asm
                    > USED AT LINE 399 IN monty.asm
                    > USED AT LINE 407 IN monty.asm
NOP_:               03EC DEFINED AT LINE 411 IN monty.asm
SHIFTLEFT:          03EE DEFINED AT LINE 420 IN monty.asm
                    > USED AT LINE 375 IN monty.asm
SHIFTLEFT1:         03F6 DEFINED AT LINE 427 IN monty.asm
                    > USED AT LINE 430 IN monty.asm
SHIFTLEFT2:         03F7 DEFINED AT LINE 429 IN monty.asm
                    > USED AT LINE 426 IN monty.asm
SHIFTRIGHT:         03FE DEFINED AT LINE 437 IN monty.asm
                    > USED AT LINE 366 IN monty.asm
SHIFTRIGHT1:        0406 DEFINED AT LINE 444 IN monty.asm
                    > USED AT LINE 448 IN monty.asm
SHIFTRIGHT2:        040A DEFINED AT LINE 447 IN monty.asm
                    > USED AT LINE 443 IN monty.asm
MUL:                0411 DEFINED AT LINE 453 IN monty.asm
                    > USED AT LINE 329 IN monty.asm
MUL2:               041B DEFINED AT LINE 462 IN monty.asm
                    > USED AT LINE 471 IN monty.asm
NUM:                042D DEFINED AT LINE 476 IN monty.asm
                    > USED AT LINE 217 IN monty.asm
NUM0:               0436 DEFINED AT LINE 482 IN monty.asm
                    > USED AT LINE 480 IN monty.asm
NUM1:               0437 DEFINED AT LINE 484 IN monty.asm
                    > USED AT LINE 501 IN monty.asm
NUM2:               044F DEFINED AT LINE 502 IN monty.asm
                    > USED AT LINE 487 IN monty.asm
                    > USED AT LINE 489 IN monty.asm
                    > USED AT LINE 524 IN monty.asm
                    > USED AT LINE 526 IN monty.asm
NUM3:               045A DEFINED AT LINE 510 IN monty.asm
                    > USED AT LINE 505 IN monty.asm
HEXNUM:             045D DEFINED AT LINE 514 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
HEXNUM1:            0460 DEFINED AT LINE 516 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
HEXNUM2:            0468 DEFINED AT LINE 522 IN monty.asm
                    > USED AT LINE 520 IN monty.asm
STRING:             047A DEFINED AT LINE 538 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
STRING1:            0483 DEFINED AT LINE 545 IN monty.asm
                    > USED AT LINE 552 IN monty.asm
STRING2:            0486 DEFINED AT LINE 549 IN monty.asm
                    > USED AT LINE 544 IN monty.asm
ARG_LIST:           049E DEFINED AT LINE 573 IN monty.asm
                    > USED AT LINE 229 IN monty.asm
ARG_LIST1:          04A8 DEFINED AT LINE 580 IN monty.asm
                    > USED AT LINE 598 IN monty.asm
ARG_LIST2:          04B4 DEFINED AT LINE 588 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
ARG_LIST3:          04BC DEFINED AT LINE 596 IN monty.asm
                    > USED AT LINE 587 IN monty.asm
                    > USED AT LINE 594 IN monty.asm
ARG_LIST4:          04BF DEFINED AT LINE 599 IN monty.asm
                    > USED AT LINE 583 IN monty.asm
ARG_LIST5:          04C4 DEFINED AT LINE 604 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
CHAR:               04D0 DEFINED AT LINE 615 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
CHAR1:              04D3 DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
CHAR2:              04DF DEFINED AT LINE 626 IN monty.asm
                    > USED AT LINE 623 IN monty.asm
CHAR3:              04E2 DEFINED AT LINE 629 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
BLOCK:              04E5 DEFINED AT LINE 633 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
BLOCK1:             04E9 DEFINED AT LINE 637 IN monty.asm
                    > USED AT LINE 641 IN monty.asm
                    > USED AT LINE 661 IN monty.asm
                    > USED AT LINE 664 IN monty.asm
                    > USED AT LINE 669 IN monty.asm
                    > USED AT LINE 673 IN monty.asm
BLOCK2:             0511 DEFINED AT LINE 662 IN monty.asm
                    > USED AT LINE 651 IN monty.asm
                    > USED AT LINE 653 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
BLOCK3:             0514 DEFINED AT LINE 665 IN monty.asm
                    > USED AT LINE 658 IN monty.asm
                    > USED AT LINE 660 IN monty.asm
BLOCK4:             051C DEFINED AT LINE 671 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
                    > USED AT LINE 648 IN monty.asm
BLOCK5:             051F DEFINED AT LINE 674 IN monty.asm
                    > USED AT LINE 670 IN monty.asm
BLOCKEND:           0522 DEFINED AT LINE 678 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
BLOCKEND1:          054E DEFINED AT LINE 701 IN monty.asm
                    > USED AT LINE 694 IN monty.asm
BLOCKEND2:          055A DEFINED AT LINE 708 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
IF:                 0573 DEFINED AT LINE 731 IN monty.asm
IFTE:               0578 DEFINED AT LINE 737 IN monty.asm
IFTE1:              0579 DEFINED AT LINE 739 IN monty.asm
                    > USED AT LINE 733 IN monty.asm
SWITCH:             0585 DEFINED AT LINE 751 IN monty.asm
INDEX:              058F DEFINED AT LINE 763 IN monty.asm
                    > USED AT LINE 260 IN monty.asm
INDEX0:             0597 DEFINED AT LINE 769 IN monty.asm
INDEX1:             0598 DEFINED AT LINE 771 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
INDEX2:             05A4 DEFINED AT LINE 780 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
SET:                05A7 DEFINED AT LINE 785 IN monty.asm
SET1:               05B5 DEFINED AT LINE 795 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
LOOP:               05B7 DEFINED AT LINE 800 IN monty.asm
WORDS:              05B9 DEFINED AT LINE 850 IN monty.asm
BYTES:              05BE DEFINED AT LINE 853 IN monty.asm
BYTES1:             05C1 DEFINED AT LINE 855 IN monty.asm
                    > USED AT LINE 852 IN monty.asm
ARRAY:              05C6 DEFINED AT LINE 859 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
ARRAYEND:           05E2 DEFINED AT LINE 873 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
ARRAYEND1:          0603 DEFINED AT LINE 893 IN monty.asm
                    > USED AT LINE 902 IN monty.asm
ARRAYEND2:          0613 DEFINED AT LINE 905 IN monty.asm
                    > USED AT LINE 891 IN monty.asm
                    > USED AT LINE 917 IN monty.asm
ARRAYEND3:          0626 DEFINED AT LINE 919 IN monty.asm
                    > USED AT LINE 903 IN monty.asm
HASH:               0641 DEFINED AT LINE 938 IN monty.asm
DEF:                0643 DEFINED AT LINE 948 IN monty.asm
LET:                0643 DEFINED AT LINE 958 IN monty.asm
                    > USED AT LINE 355 IN monty.asm
DOLET:              0647 DEFINED AT LINE 995 IN monty.asm
                    > USED AT LINE 1826 IN monty.asm
DOLET2:             064B DEFINED AT LINE 998 IN monty.asm
DOLET3:             064F DEFINED AT LINE 1003 IN monty.asm
ADDR:               0659 DEFINED AT LINE 1012 IN monty.asm
SYMBOL:             065B DEFINED AT LINE 1030 IN monty.asm
                    > USED AT LINE 277 IN monty.asm
IDENTU:             065D DEFINED AT LINE 1060 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
IDENTL:             0662 DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 275 IN monty.asm
IDENT1:             0667 DEFINED AT LINE 1068 IN monty.asm
                    > USED AT LINE 1063 IN monty.asm
FRAC:               066E DEFINED AT LINE 1076 IN monty.asm
SQRT1:              0674 DEFINED AT LINE 1081 IN monty.asm
ABS1:               0681 DEFINED AT LINE 1090 IN monty.asm
MOD:                068E DEFINED AT LINE 1103 IN monty.asm
EQUALS:             069A DEFINED AT LINE 1115 IN monty.asm
                    > USED AT LINE 360 IN monty.asm
LESSTHANEQ:         06A2 DEFINED AT LINE 1123 IN monty.asm
                    > USED AT LINE 380 IN monty.asm
LESSTHAN:           06A7 DEFINED AT LINE 1130 IN monty.asm
                    > USED AT LINE 382 IN monty.asm
LESSTHAN1:          06AC DEFINED AT LINE 1135 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
TRUE1:              06AF DEFINED AT LINE 1138 IN monty.asm
                    > USED AT LINE 1118 IN monty.asm
NULL1:              06B5 DEFINED AT LINE 1142 IN monty.asm
FALSE1:             06B5 DEFINED AT LINE 1143 IN monty.asm
                    > USED AT LINE 1119 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
                    > USED AT LINE 1136 IN monty.asm
INPUT:              06BB DEFINED AT LINE 1150 IN monty.asm
OUTPUT:             06C6 DEFINED AT LINE 1162 IN monty.asm
KEY:                06CF DEFINED AT LINE 1171 IN monty.asm
NEG:                06D8 DEFINED AT LINE 1178 IN monty.asm
FILTER:             06DF DEFINED AT LINE 1183 IN monty.asm
MAP:                06DF DEFINED AT LINE 1184 IN monty.asm
DIVIDE:             06E1 DEFINED AT LINE 1298 IN monty.asm
                    > USED AT LINE 389 IN monty.asm
                    > USED AT LINE 1108 IN monty.asm
DIVIDE1:            06E6 DEFINED AT LINE 1301 IN monty.asm
                    > USED AT LINE 1313 IN monty.asm
DIVIDE2:            06F3 DEFINED AT LINE 1309 IN monty.asm
                    > USED AT LINE 1306 IN monty.asm
DIVIDE3:            06F4 DEFINED AT LINE 1311 IN monty.asm
                    > USED AT LINE 1308 IN monty.asm
SQUAREROOT:         06FA DEFINED AT LINE 1321 IN monty.asm
                    > USED AT LINE 1084 IN monty.asm
SQUAREROOT1:        06FF DEFINED AT LINE 1325 IN monty.asm
                    > USED AT LINE 1346 IN monty.asm
SQUAREROOT4:        071A DEFINED AT LINE 1345 IN monty.asm
                    > USED AT LINE 1339 IN monty.asm
SQUAREROOT5:        0721 DEFINED AT LINE 1350 IN monty.asm
                    > USED AT LINE 1348 IN monty.asm
PRTDEC:             0724 DEFINED AT LINE 1356 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
                    > USED AT LINE 2119 IN monty.asm
PRTDEC0:            0733 DEFINED AT LINE 1367 IN monty.asm
                    > USED AT LINE 1358 IN monty.asm
PRTDEC1:            0755 DEFINED AT LINE 1383 IN monty.asm
                    > USED AT LINE 1371 IN monty.asm
                    > USED AT LINE 1373 IN monty.asm
                    > USED AT LINE 1375 IN monty.asm
                    > USED AT LINE 1377 IN monty.asm
                    > USED AT LINE 1380 IN monty.asm
PRTDEC2:            0757 DEFINED AT LINE 1385 IN monty.asm
                    > USED AT LINE 1388 IN monty.asm
PRTDEC3:            0767 DEFINED AT LINE 1397 IN monty.asm
                    > USED AT LINE 1392 IN monty.asm
PRTDEC4:            0768 DEFINED AT LINE 1399 IN monty.asm
                    > USED AT LINE 1396 IN monty.asm
PRTHEX:             076C DEFINED AT LINE 1403 IN monty.asm
                    > USED AT LINE 237 IN monty.asm
                    > USED AT LINE 325 IN monty.asm
PRTHEX2:            0777 DEFINED AT LINE 1411 IN monty.asm
                    > USED AT LINE 1406 IN monty.asm
                    > USED AT LINE 1408 IN monty.asm
PRTHEX3:            0780 DEFINED AT LINE 1419 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
PRTSTR0:            078B DEFINED AT LINE 1427 IN monty.asm
                    > USED AT LINE 1433 IN monty.asm
PRTSTR:             078F DEFINED AT LINE 1430 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
                    > USED AT LINE 1493 IN monty.asm
NESTING:            0794 DEFINED AT LINE 1446 IN monty.asm
                    > USED AT LINE 1996 IN monty.asm
                    > USED AT LINE 2037 IN monty.asm
NESTING1A:          079F DEFINED AT LINE 1453 IN monty.asm
                    > USED AT LINE 1450 IN monty.asm
NESTING1:           07A2 DEFINED AT LINE 1456 IN monty.asm
                    > USED AT LINE 1448 IN monty.asm
NESTING2:           07B1 DEFINED AT LINE 1465 IN monty.asm
                    > USED AT LINE 1460 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
NESTING3:           07B3 DEFINED AT LINE 1468 IN monty.asm
                    > USED AT LINE 1464 IN monty.asm
NESTING4:           07BE DEFINED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1470 IN monty.asm
                    > USED AT LINE 1472 IN monty.asm
PROMPT:             07C0 DEFINED AT LINE 1479 IN monty.asm
                    > USED AT LINE 1980 IN monty.asm
CRLF:               07C9 DEFINED AT LINE 1484 IN monty.asm
                    > USED AT LINE 2049 IN monty.asm
PRINTSTR:           07D0 DEFINED AT LINE 1491 IN monty.asm
                    > USED AT LINE 1480 IN monty.asm
                    > USED AT LINE 1485 IN monty.asm
                    > USED AT LINE 1976 IN monty.asm
                    > USED AT LINE 2117 IN monty.asm
EXECSTR:            07D7 DEFINED AT LINE 1505 IN monty.asm
CALL:               07E2 DEFINED AT LINE 1535 IN monty.asm
EXEC:               07E4 DEFINED AT LINE 1542 IN monty.asm
EXEC0:              07E5 DEFINED AT LINE 1544 IN monty.asm
                    > USED AT LINE 745 IN monty.asm
                    > USED AT LINE 747 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
EXEC1:              07EB DEFINED AT LINE 1549 IN monty.asm
                    > USED AT LINE 1547 IN monty.asm
EXEC2:              080B DEFINED AT LINE 1566 IN monty.asm
                    > USED AT LINE 1558 IN monty.asm
DOFUNC:             0812 DEFINED AT LINE 1575 IN monty.asm
                    > USED AT LINE 1828 IN monty.asm
DOFUNC1:            0828 DEFINED AT LINE 1593 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
DOFUNC2:            082E DEFINED AT LINE 1599 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
DOFUNC3:            0833 DEFINED AT LINE 1604 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
DOFUNC4:            083F DEFINED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
DOFUNC5:            084B DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 1579 IN monty.asm
FUNC:               084D DEFINED AT LINE 1626 IN monty.asm
FUNC1:              0865 DEFINED AT LINE 1647 IN monty.asm
                    > USED AT LINE 1671 IN monty.asm
                    > USED AT LINE 1674 IN monty.asm
                    > USED AT LINE 1679 IN monty.asm
                    > USED AT LINE 1683 IN monty.asm
FUNC2:              088B DEFINED AT LINE 1672 IN monty.asm
                    > USED AT LINE 1661 IN monty.asm
                    > USED AT LINE 1663 IN monty.asm
                    > USED AT LINE 1665 IN monty.asm
FUNC3:              088E DEFINED AT LINE 1675 IN monty.asm
                    > USED AT LINE 1668 IN monty.asm
                    > USED AT LINE 1670 IN monty.asm
FUNC4:              0896 DEFINED AT LINE 1681 IN monty.asm
                    > USED AT LINE 1654 IN monty.asm
                    > USED AT LINE 1656 IN monty.asm
                    > USED AT LINE 1658 IN monty.asm
FUNC4A:             0899 DEFINED AT LINE 1684 IN monty.asm
                    > USED AT LINE 1680 IN monty.asm
ARG:                08A5 DEFINED AT LINE 1695 IN monty.asm
                    > USED AT LINE 223 IN monty.asm
ARG0:               08C3 DEFINED AT LINE 1716 IN monty.asm
                    > USED AT LINE 1722 IN monty.asm
ARG0A:              08CC DEFINED AT LINE 1724 IN monty.asm
                    > USED AT LINE 1701 IN monty.asm
                    > USED AT LINE 1708 IN monty.asm
ARG1:               08D1 DEFINED AT LINE 1727 IN monty.asm
                    > USED AT LINE 1720 IN monty.asm
ARG1A:              08D9 DEFINED AT LINE 1734 IN monty.asm
                    > USED AT LINE 1726 IN monty.asm
CLOSURE:            08DC DEFINED AT LINE 1740 IN monty.asm
DOCLOSURE:          08F6 DEFINED AT LINE 1758 IN monty.asm
DOCLOSURE1:         090C DEFINED AT LINE 1776 IN monty.asm
                    > USED AT LINE 1786 IN monty.asm
DOCLOSURE2:         0912 DEFINED AT LINE 1783 IN monty.asm
                    > USED AT LINE 1775 IN monty.asm
DOCLOSURE3:         0916 DEFINED AT LINE 1787 IN monty.asm
                    > USED AT LINE 1766 IN monty.asm
INIT:               091C DEFINED AT LINE 1818 IN monty.asm
                    > USED AT LINE 7
                    > USED AT LINE 1975 IN monty.asm
INIT0:              0942 DEFINED AT LINE 1833 IN monty.asm
                    > USED AT LINE 1837 IN monty.asm
START:              0949 DEFINED AT LINE 1973 IN monty.asm
                    > USED AT LINE 8
INTERPRET:          095F DEFINED AT LINE 1979 IN monty.asm
                    > USED AT LINE 2082 IN monty.asm
                    > USED AT LINE 2120 IN monty.asm
INTERPRET2:         0969 DEFINED AT LINE 1985 IN monty.asm
                    > USED AT LINE 2029 IN monty.asm
INTERPRET3:         0971 DEFINED AT LINE 1992 IN monty.asm
                    > USED AT LINE 2001 IN monty.asm
INTERPRET4:         0977 DEFINED AT LINE 1998 IN monty.asm
                    > USED AT LINE 1990 IN monty.asm
INTERPRET5:         097C DEFINED AT LINE 2004 IN monty.asm
                    > USED AT LINE 2038 IN monty.asm
                    > USED AT LINE 2052 IN monty.asm
INTERPRET6:         098D DEFINED AT LINE 2031 IN monty.asm
                    > USED AT LINE 2007 IN monty.asm
INTERPRET7:         099B DEFINED AT LINE 2040 IN monty.asm
                    > USED AT LINE 2012 IN monty.asm
INTERPRET8:         09AE DEFINED AT LINE 2054 IN monty.asm
                    > USED AT LINE 2010 IN monty.asm
NEXT:               09B6 DEFINED AT LINE 2060 IN monty.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 2064 IN monty.asm
NEXT1:              09C9 DEFINED AT LINE 2073 IN monty.asm
                    > USED AT LINE 2065 IN monty.asm
NEXT2:              09D8 DEFINED AT LINE 2083 IN monty.asm
                    > USED AT LINE 2067 IN monty.asm
EXIT_:              09DE DEFINED AT LINE 2093 IN monty.asm
                    > USED AT LINE 2077 IN monty.asm
LITERAL_:           09E1 DEFINED AT LINE 2097 IN monty.asm
                    > USED AT LINE 2079 IN monty.asm
ENTER_:             09EA DEFINED AT LINE 2107 IN monty.asm
                    > USED AT LINE 2081 IN monty.asm
ERROR:              09F1 DEFINED AT LINE 2116 IN monty.asm
                    > USED AT LINE 401 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1551 IN monty.asm
                    > USED AT LINE 1821 IN monty.asm
                    > USED AT LINE 1974 IN monty.asm
VARS:               1900 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1830 IN monty.asm
RESTARTS:           199C DEFINED AT LINE 10 IN ram.asm
RST08:              199C DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
                    > USED AT LINE 1827 IN monty.asm
RST10:              199E DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
                    > USED AT LINE 1829 IN monty.asm
RST18:              19A0 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              19A2 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              19A4 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              19A6 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               19A8 DEFINED AT LINE 18 IN ram.asm
INTVEC:             19AA DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             19AC DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            19AE DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            19B0 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            19B2 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1823 IN monty.asm
VFRAC:              19B2 DEFINED AT LINE 26 IN ram.asm
                    > USED AT LINE 390 IN monty.asm
                    > USED AT LINE 1077 IN monty.asm
                    > USED AT LINE 1085 IN monty.asm
VDATAWIDTH:         19B4 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 790 IN monty.asm
                    > USED AT LINE 856 IN monty.asm
                    > USED AT LINE 889 IN monty.asm
VTIBPTR:            19B6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 1983 IN monty.asm
                    > USED AT LINE 2055 IN monty.asm
VPOINTER:           19B8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 773 IN monty.asm
                    > USED AT LINE 788 IN monty.asm
                    > USED AT LINE 997 IN monty.asm
                    > USED AT LINE 1730 IN monty.asm
VLASTDEF:           19BA DEFINED AT LINE 30 IN ram.asm
VHASHSTR:           19BC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1008 IN monty.asm
VNEXT:              19BE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1820 IN monty.asm
VHEAPPTR:           19C0 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 539 IN monty.asm
                    > USED AT LINE 556 IN monty.asm
                    > USED AT LINE 575 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
                    > USED AT LINE 883 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
                    > USED AT LINE 930 IN monty.asm
                    > USED AT LINE 1627 IN monty.asm
                    > USED AT LINE 1687 IN monty.asm
                    > USED AT LINE 1689 IN monty.asm
                    > USED AT LINE 1741 IN monty.asm
                    > USED AT LINE 1752 IN monty.asm
                    > USED AT LINE 1754 IN monty.asm
VTEMP1:             19C2 DEFINED AT LINE 35 IN ram.asm
                    > USED AT LINE 876 IN monty.asm
                    > USED AT LINE 931 IN monty.asm
                    > USED AT LINE 1768 IN monty.asm
                    > USED AT LINE 1788 IN monty.asm
VTEMP2:             19C4 DEFINED AT LINE 36 IN ram.asm
TBPTR:              19C6 DEFINED AT LINE 38 IN ram.asm
TIB:                1A00 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 1989 IN monty.asm
                    > USED AT LINE 2032 IN monty.asm
                    > USED AT LINE 2041 IN monty.asm
                    > USED AT LINE 2056 IN monty.asm
PAD:                1B00 DEFINED AT LINE 44 IN ram.asm
HEAP:               1C00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 71 IN monty.asm
