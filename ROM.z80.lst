0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 C3 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   4F 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 23            LD   de,(vPointer)   
0208   21 F8 23               LD   hl,vPointer   
020B   C3 D0 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 51 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 AC 04               JP   percent   
021C                RBRACE_:      
021C   C3 A1 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 92 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 0E 0C               JP   caret   
0228                COMMA_:      
0228   C3 4F 0B               JP   comma   
022B                DQUOTE_:      
022B   C3 92 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 4F 0B               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD E3 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 23               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 23            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 6E 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 23               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 23                  LD   h,msb(vars)   
02BA   22 F8 23               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 23               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 23               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 23               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 23               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 0F 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 0F 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD AD 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 6E 0F               JP   error   
0416                LAMBDA2:      
0416   CD E3 0C               CALL   parseBlock   
0419   CD 4D 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 23            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                GRAVE:       
047C                PRINTSTRING:      
047C   03                     INC   bc   ; move to first char
047D   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0481   18 03                  JR   printString1   
0483                PRINTSTRING0:      
0483   12                     LD   (de),a   ; a -> buffer*
0484   13                     INC   de   ; string*++,
0485   03                     INC   bc   
0486                PRINTSTRING1:      
0486   0A                     LD   a,(bc)   ; a <- string*
0487   FE 60                  CP   "`"   ; if ` exit loop
0489   20 F8                  JR   nz,printString0   
048B                             ; inc bc
048B   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
048F   C3 29 0B               JP   dotNext   
0492                             ; string                        ;38
0492                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0492                QUOTE:       
0492                DQUOTE:      
0492                STRING:      
0492   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0495   E5                     PUSH   hl   ; save start of string
0496   0A                     LD   a,(bc)   
0497   5F                     LD   e,a   ; e = matching terminator
0498   03                     INC   bc   ; point to next char
0499   18 03                  JR   string2   
049B                STRING1:      
049B   77                     LD   (hl),a   
049C   23                     INC   hl   ; increase count
049D   03                     INC   bc   ; point to next char
049E                STRING2:      
049E   0A                     LD   a,(bc)   
049F   BB                     CP   e   ; is it the string terminator
04A0   28 02                  JR   z,string3   
04A2   18 F7                  JR   string1   
04A4                STRING3:      
04A4   AF                     XOR   a   ; write NUL to terminate string
04A5   77                     LD   (hl),a   ; hl = end of string
04A6   23                     INC   hl   
04A7   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04AA   DD E9                  JP   (ix)   
04AC                             ; %a .. %z                      43
04AC                             ; -- value
04AC                             ; returns value of arg
04AC                PERCENT:      
04AC                ARG:         
04AC   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04AF   FD 56 05               LD   d,(iy+5)   
04B2   EB                     EX   de,hl   
04B3   7D                     LD   a,l   ; arg_list* == null, skip
04B4   B4                     OR   h   
04B5   28 1A                  JR   z,arg0a   
04B7   23                     INC   hl   ; a = num_args, hl = arg_list*
04B8   7E                     LD   a,(hl)   
04B9   23                     INC   hl   
04BA   B7                     OR   a   
04BB   28 14                  JR   z,arg0a   ; num_args == 0, skip
04BD   5F                     LD   e,a   ; e = a = num_args
04BE   03                     INC   bc   ; a = next char = dollar_name
04BF   0A                     LD   a,(bc)   
04C0   C5                     PUSH   bc   ; save IP
04C1   43                     LD   b,e   ; b = e = num_args
04C2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04C5   FD 56 03               LD   d,(iy+3)   
04C8                ARG0:        
04C8   1B                     DEC   de   ; a = dollar_name, de = next arg*
04C9   1B                     DEC   de   
04CA   BE                     CP   (hl)   
04CB   28 09                  JR   z,arg1   
04CD   23                     INC   hl   ; hl = next arg_list*
04CE   10 F8                  DJNZ   arg0   
04D0   C1                     POP   bc   ; no match, restore IP
04D1                ARG0A:       
04D1   11 00 00               LD   de,0   ; return 0
04D4   18 08                  JR   arg1a   
04D6                ARG1:        
04D6   C1                     POP   bc   ; restore IP
04D7   EB                     EX   de,hl   ; hl = arg*
04D8   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
04DB   5E                     LD   e,(hl)   
04DC   23                     INC   hl   
04DD   56                     LD   d,(hl)   ; de = arg
04DE                ARG1A:       
04DE   D5                     PUSH   de   ; push arg
04DF   DD E9                  JP   (ix)   
04E1                             ;********************** PAGE 3,4 END *********************************************
04E1                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 05 0E               CALL   xjumpTable   
0503   61                     DB   "a"   ; .a print array
0504   E1 0A                  DW   dotArray   
0506   63                     DB   "c"   ; .c print char
0507   C9 05                  DW   dotChar   
0509   73                     DB   "s"   ; .s print string
050A   B4 05                  DW   dotString_   
050C   00                     DB   NUL   ; .  print number
050D                             ; /bd buffer decimal
050D                             ; value --
050D                DOTNUMBER_:      
050D   3A E8 23               LD   a,(vNumBase)   
0510   FE 10                  CP   16   
0512   CA 7E 05               JP   z,dotHex   ; else falls through
0515   C3 18 05               JP   dotDec   
0518                             ; print decimal                 ; 70
0518                             ; value --
0518                DOTDEC:      
0518   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
051C   D9                     EXX      
051D   E1                     POP   hl   ; hl = value
051E   3A E6 23               LD   a,(vDataWidth)   
0521   3D                     DEC   a   
0522   20 02                  JR   nz,dotDecX   
0524   26 00                  LD   h,0   
0526                DOTDECX:      
0526   CD 35 05               CALL   dotDec0   
0529   D9                     EXX      ; de = buffer*' bc = IP
052A   3E 20                  LD   a," "   ; append space to buffer
052C   12                     LD   (de),a   
052D   13                     INC   de   ; string*++,
052E   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0532   C3 29 0B               JP   dotNext   
0535                             ; hl = value
0535                             ; de' = buffer*
0535                             ; a, bc, de, hl destroyed
0535                DOTDEC0:      
0535   CB 7C                  BIT   7,h   
0537   28 0C                  JR   z,dotDec1   
0539   D9                     EXX      
053A   3E 2D                  LD   a,"-"   
053C   12                     LD   (de),a   
053D   13                     INC   de   
053E   D9                     EXX      
053F   AF                     XOR   a   
0540   95                     SUB   l   
0541   6F                     LD   l,a   
0542   9F                     SBC   a,a   
0543   94                     SUB   h   
0544   67                     LD   h,a   
0545                DOTDEC1:      
0545   0E 00                  LD   c,0   ; leading zeros flag = false
0547   11 F0 D8               LD   de,-10000   
054A   CD 65 05               CALL   dotDec2   
054D   11 18 FC               LD   de,-1000   
0550   CD 65 05               CALL   dotDec2   
0553   11 9C FF               LD   de,-100   
0556   CD 65 05               CALL   dotDec2   
0559   1E F6                  LD   e,-10   
055B   CD 65 05               CALL   dotDec2   
055E   0C                     INC   c   ; flag = true for at least digit
055F   1E FF                  LD   e,-1   
0561   CD 65 05               CALL   dotDec2   
0564   C9                     RET      
0565                DOTDEC2:      
0565   06 2F                  LD   b,"0"-1   
0567                DOTDEC3:      
0567   04                     INC   b   
0568   19                     ADD   hl,de   
0569   38 FC                  JR   c,dotDec3   
056B   ED 52                  SBC   hl,de   
056D   3E 30                  LD   a,"0"   
056F   B8                     CP   b   
0570   20 05                  JR   nz,dotDec4   
0572   AF                     XOR   a   
0573   B1                     OR   c   
0574   C8                     RET   z   
0575   18 01                  JR   dotDec5   
0577                DOTDEC4:      
0577   0C                     INC   c   
0578                DOTDEC5:      
0578   78                     LD   a,b   
0579   D9                     EXX      
057A   12                     LD   (de),a   
057B   13                     INC   de   
057C   D9                     EXX      
057D   C9                     RET      
057E                             ; buffer hex                    37
057E                             ; value --
057E                DOTHEX:      
057E   E1                     POP   hl   ; hl = value
057F   ED 5B EC 23            LD   de,(vBufPtr)   
0583   3E 24                  LD   a,"$"   ; # prefix
0585   12                     LD   (de),a   
0586   13                     INC   de   ; string*++,
0587   3A E6 23               LD   a,(vDataWidth)   
058A   3D                     DEC   a   
058B   28 04                  JR   z,dotHex0   
058D   7C                     LD   a,h   
058E   CD A0 05               CALL   dotHex1   
0591                DOTHEX0:      
0591   7D                     LD   a,l   
0592   CD A0 05               CALL   dotHex1   
0595   3E 20                  LD   a," "   ; append space to buffer
0597   12                     LD   (de),a   
0598   13                     INC   de   ; string*++,
0599   ED 53 EC 23            LD   (vBufPtr),de   
059D   C3 29 0B               JP   dotNext   
05A0                DOTHEX1:      
05A0   F5                     PUSH   af   
05A1   1F                     RRA      
05A2   1F                     RRA      
05A3   1F                     RRA      
05A4   1F                     RRA      
05A5   CD A9 05               CALL   dotHex2   
05A8   F1                     POP   af   
05A9                DOTHEX2:      
05A9   E6 0F                  AND   0x0F   
05AB   C6 90                  ADD   a,0x90   
05AD   27                     DAA      
05AE   CE 40                  ADC   a,0x40   
05B0   27                     DAA      
05B1   12                     LD   (de),a   
05B2   13                     INC   de   ; string*++,
05B3   C9                     RET      
05B4                             ; /bs buffered string
05B4                             ; string* --
05B4                DOTSTRING_:      
05B4   E1                     POP   hl   ; hl = string*
05B5   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
05B9   18 03                  JR   dotString1   
05BB                DOTSTRING0:      
05BB   12                     LD   (de),a   ; a -> buffer*
05BC   13                     INC   de   ; string*++,
05BD   23                     INC   hl   
05BE                DOTSTRING1:      
05BE   7E                     LD   a,(hl)   ; a <- string*
05BF   B7                     OR   a   ; if NUL exit loop
05C0   20 F9                  JR   nz,dotString0   
05C2   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
05C6   C3 29 0B               JP   dotNext   
05C9                             ; .c print char
05C9                             ; char --
05C9                DOTCHAR:      
05C9   E1                     POP   hl   ; a = char
05CA   7D                     LD   a,l   
05CB   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
05CF   12                     LD   (de),a   
05D0   13                     INC   de   
05D1   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
05D5   C3 29 0B               JP   dotNext   
05D8                             ;********************** PAGE 5 END *********************************************
05D8                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 29 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD EF 0D               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   36                     DB   lsb(command_b_)   
060D   CA                     DB   lsb(command_nop_)   
060E   43                     DB   lsb(command_d_)   
060F   CA                     DB   lsb(command_nop_)   
0610   4A                     DB   lsb(command_f_)   
0611   CA                     DB   lsb(command_nop_)   
0612   66                     DB   lsb(command_h_)   
0613   6D                     DB   lsb(command_i_)   
0614   CA                     DB   lsb(command_nop_)   
0615   74                     DB   lsb(key_)   
0616   CA                     DB   lsb(command_nop_)   
0617   78                     DB   lsb(command_m_)   
0618   CA                     DB   lsb(command_nop_)   
0619   7F                     DB   lsb(output_)   
061A   83                     DB   lsb(command_p_)   
061B   87                     DB   lsb(command_q_)   
061C   8E                     DB   lsb(command_r_)   
061D   9B                     DB   lsb(command_s_)   
061E   AB                     DB   lsb(true_)   
061F   CA                     DB   lsb(command_nop_)   
0620   AF                     DB   lsb(command_v_)   
0621   BF                     DB   lsb(command_w_)   
0622   C6                     DB   lsb(xor_)   
0623   CA                     DB   lsb(command_nop_)   
0624   CA                     DB   lsb(command_nop_)   
0625   CD                     DB   lsb(command_default_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   62                     DB   "b"   ; /ab absolute
0627   D1 06                  DW   absolute   
0629   64                     DB   "d"   ; /ad address of
062A   DE 06                  DW   addrOf   
062C   69                     DB   "i"   ; /ad address of
062D   63 08                  DW   arrayIter   
062F   73                     DB   "s"   ; /as array size
0630   FF 06                  DW   arraySize   
0632   00                     DB   NUL   
0633   C3 46 07               JP   error1   
0636                COMMAND_B_:      
0636   62                     DB   "b"   ; /bb bye bye cold boot
0637   BA 0E                  DW   coldStart   
0639   6D                     DB   "m"   ; /bm byte mode
063A   21 07                  DW   byteMode   
063C   72                     DB   "r"   ; /br break from loop
063D   07 07                  DW   break   
063F   00                     DB   NUL   
0640   C3 21 07               JP   byteMode   ; /b byte mode
0643                COMMAND_D_:      
0643   62                     DB   "b"   ; /db decimal base
0644   3E 07                  DW   decBase   
0646   00                     DB   NUL   
0647   C3 3E 07               JP   decBase   ; /d decimal
064A                COMMAND_F_:      
064A   64                     DB   "d"   ; /fd fold
064B   0A 0A                  DW   fold   
064D   65                     DB   "e"   ; /fe forEach
064E   5C 0A                  DW   forEach   
0650   73                     DB   "s"   ; /fs funcSrc
0651   A8 0A                  DW   funcSrc   
0653   74                     DB   "t"   ; /ft filter
0654   AC 09                  DW   filter   
0656   31                     DB   "1"   
0657   B7 0F                  DW   f1   
0659   32                     DB   "2"   
065A   B7 0F                  DW   f2   
065C   33                     DB   "3"   
065D   B7 0F                  DW   f3   
065F   34                     DB   "4"   
0660   B7 0F                  DW   f4   
0662   00                     DB   NUL   
0663   C3 A2 03               JP   false1   
0666                COMMAND_H_:      
0666   62                     DB   "b"   ; /hb hex base
0667   4C 07                  DW   hexBase   
0669   00                     DB   NUL   
066A   C3 4C 07               JP   hexBase   ; /h hex base
066D                             ; 6
066D                COMMAND_I_:      
066D   6E                     DB   "n"   ; /in input
066E   52 07                  DW   input   
0670   00                     DB   NUL   
0671   C3 46 07               JP   error1   
0674                KEY_:        
0674   00                     DB   NUL   
0675   C3 5D 07               JP   key   
0678                COMMAND_M_:      
0678   70                     DB   "p"   ; /mp map
0679   6A 09                  DW   map   
067B   00                     DB   NUL   
067C   C3 46 07               JP   error1   
067F                OUTPUT_:      
067F   00                     DB   NUL   
0680   C3 66 07               JP   output   
0683                             ; 4
0683                COMMAND_P_:      
0683   00                     DB   NUL   
0684   C3 46 07               JP   error1   
0687                             ; 6
0687                COMMAND_Q_:      
0687   74                     DB   "t"   ; /qt quit
0688   6F 07                  DW   quit   
068A   00                     DB   NUL   
068B   C3 46 07               JP   error1   
068E                COMMAND_R_:      
068E   63                     DB   "c"   ; /rc tail call optimisation
068F   79 07                  DW   recur   
0691   65                     DB   "e"   ; /re remainder
0692   7F 07                  DW   remain   
0694   67                     DB   "g"   ; /rg range src
0695   E7 07                  DW   rangeSrc   
0697   00                     DB   NUL   
0698   C3 46 07               JP   error1   
069B                COMMAND_S_:      
069B   62                     DB   "b"   
069C   85 07                  DW   stringBegin   
069E   65                     DB   "e"   
069F   8D 07                  DW   stringEnd   
06A1   69                     DB   "i"   
06A2   E4 08                  DW   stringIter   
06A4   73                     DB   "s"   
06A5   BC 07                  DW   stringSize   
06A7   00                     DB   NUL   
06A8   C3 46 07               JP   error1   
06AB                TRUE_:       
06AB   00                     DB   NUL   
06AC   C3 9C 03               JP   true1   
06AF                COMMAND_V_:      
06AF   68                     DB   "h"   
06B0   BE 07                  DW   varHeapPtr   
06B2   74                     DB   "t"   
06B3   C7 07                  DW   varTIBPtr   
06B5   48                     DB   "H"   
06B6   32 07                  DW   constHeapStart   
06B8   54                     DB   "T"   
06B9   38 07                  DW   constTIBStart   
06BB   00                     DB   NUL   
06BC   C3 46 07               JP   error1   
06BF                COMMAND_W_:      
06BF   6D                     DB   "m"   ; /wm word mode
06C0   D6 07                  DW   wordMode   
06C2   00                     DB   NUL   
06C3   C3 D6 07               JP   wordMode   ; /w word mode
06C6                XOR_:        
06C6   00                     DB   NUL   
06C7   C3 DC 07               JP   xor   
06CA                             ; 2
06CA                COMMAND_NOP_:      
06CA   00                     DB   NUL   
06CB   DD E9                  JP   (ix)   
06CD                             ; 3
06CD                COMMAND_DEFAULT_:      
06CD   00                     DB   NUL   
06CE   C3 22 04               JP   div   
06D1                             ;********************** PAGE 6 END *********************************************
06D1                             ; /ab absolute
06D1                             ; num -- num
06D1                ABSOLUTE:      
06D1   E1                     POP   hl   
06D2   CB 7C                  BIT   7,h   
06D4   C8                     RET   z   
06D5   AF                     XOR   a   
06D6   95                     SUB   l   
06D7   6F                     LD   l,a   
06D8   9F                     SBC   a,a   
06D9   94                     SUB   h   
06DA   67                     LD   h,a   
06DB   E5                     PUSH   hl   
06DC   DD E9                  JP   (ix)   
06DE                             ; /ad addrOf                    24
06DE                             ; char -- addr
06DE                ADDROF:      
06DE   E1                     POP   hl   ; a = char
06DF   7D                     LD   a,l   
06E0   FE 7B                  CP   "z"+1   ; if a > z then exit
06E2   30 19                  JR   nc,addrOf2   
06E4   D6 41                  SUB   "A"   ; a - 65
06E6   38 15                  JR   c,addrOf2   ; if < A then exit
06E8   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
06EA   38 06                  JR   c,addrOf1   
06EC   D6 06                  SUB   "a"-("Z"+1)   
06EE   FE 1A                  CP   "Z"-"A"+1   
06F0   38 0B                  JR   c,addrOf2   ; if < a then exit
06F2                ADDROF1:      
06F2   87                     ADD   a,a   ; double a
06F3   21 00 23               LD   hl,VARS   ; hl = VARS + a
06F6   85                     ADD   a,l   
06F7   6F                     LD   l,a   
06F8   3E 00                  LD   a,0   
06FA   8C                     ADC   a,h   
06FB   67                     LD   h,a   
06FC   E5                     PUSH   hl   
06FD                ADDROF2:      
06FD   DD E9                  JP   (ix)   
06FF                             ; /as size of an array, num elements, ignores vDataWidth :-/
06FF                             ; array* -- num
06FF                ARRAYSIZE:      
06FF   E1                     POP   hl   
0700   2B                     DEC   hl   ; msb size
0701   56                     LD   d,(hl)   
0702   2B                     DEC   hl   ; lsb size
0703   5E                     LD   e,(hl)   
0704   D5                     PUSH   de   
0705   DD E9                  JP   (ix)   
0707                             ; 13
0707                             ; /br break from loop
0707                             ; --
0707                BREAK:       
0707   E1                     POP   hl   ; hl = condition, break if false
0708   7D                     LD   a,l   
0709   B4                     OR   h   
070A   28 02                  JR   z,break1   
070C   DD E9                  JP   (ix)   
070E                BREAK1:      
070E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0710   FD 54                  LD   d,iyh   
0712   21 08 00               LD   hl,8   
0715   19                     ADD   hl,de   
0716   23                     INC   hl   
0717   23                     INC   hl   
0718   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
071B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071E   C3 A1 0B               JP   blockEnd   
0721                             ; /b
0721                BYTEMODE:      
0721   21 01 00               LD   hl,1   
0724                BYTEMODE1:      
0724   22 E6 23               LD   (vDataWidth),hl   
0727   DD E9                  JP   (ix)   
0729                             ; //
0729                COMMENT:      
0729   03                     INC   bc   ; point to next char
072A   0A                     LD   a,(bc)   
072B   FE 20                  CP   " "   ; terminate on any char less than SP
072D   30 FA                  JR   nc,comment   
072F   0B                     DEC   bc   
0730   DD E9                  JP   (ix)   
0732                CONSTHEAPSTART:      
0732   11 22 24               LD   de,HEAP   
0735   C3 D3 07               JP   constant   
0738                CONSTTIBSTART:      
0738   11 00 21               LD   de,TIB   
073B   C3 D3 07               JP   constant   
073E                DECBASE:      
073E   21 0A 00               LD   hl,10   
0741                DECBASE1:      
0741   22 E8 23               LD   (vNumBase),hl   
0744   DD E9                  JP   (ix)   
0746                ERROR1:      
0746   21 01 00               LD   hl,1   ; error 1: unknown command
0749   C3 6E 0F               JP   error   
074C                HEXBASE:      
074C   21 10 00               LD   hl,16   
074F   C3 41 07               JP   decBase1   
0752                             ; Z80 port input
0752                             ; port -- value
0752                INPUT:       
0752   E1                     POP   hl   
0753   59                     LD   e,c   ; save IP
0754   4D                     LD   c,l   
0755   ED 68                  IN   l,(c)   
0757   26 00                  LD   h,0   
0759   4B                     LD   c,e   ; restore IP
075A   E5                     PUSH   hl   
075B   DD E9                  JP   (ix)   
075D                             ; /k                              6
075D                KEY:         
075D   CD 81 00               CALL   getchar   
0760   26 00                  LD   h,0   
0762   6F                     LD   l,a   
0763   E5                     PUSH   hl   
0764   DD E9                  JP   (ix)   
0766                             ; /o Z80 port output
0766                             ; value port --
0766                OUTPUT:      
0766   E1                     POP   hl   
0767   59                     LD   e,c   ; save IP
0768   4D                     LD   c,l   
0769   E1                     POP   hl   
076A   ED 69                  OUT   (c),l   
076C   4B                     LD   c,e   ; restore IP
076D   DD E9                  JP   (ix)   
076F                             ; /qt
076F                             ; bool --
076F                QUIT:        
076F   E1                     POP   hl   ; hl = condition, exit if true
0770   7D                     LD   a,l   
0771   B4                     OR   h   
0772   20 02                  JR   nz,quit1   
0774   DD E9                  JP   (ix)   
0776                QUIT1:       
0776   C3 A1 0B               JP   blockEnd   
0779                RECUR:       
0779   E1                     POP   hl   
077A   22 F2 23               LD   (vRecur),hl   
077D   DD E9                  JP   (ix)   
077F                REMAIN:      
077F   2A FA 23               LD   hl,(vRemain)   
0782   E5                     PUSH   hl   
0783   DD E9                  JP   (ix)   
0785                STRINGBEGIN:      
0785   21 FF FF               LD   hl,TRUE   ; string mode = true
0788   22 F6 23               LD   (vStrMode),hl   
078B   18 27                  JR   stringEnd1   ; save hl in vBufPtr
078D                STRINGEND:      
078D   21 00 00               LD   hl,FALSE   ; string mode = false
0790   22 F6 23               LD   (vStrMode),hl   
0793   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
0796   AF                     XOR   a   
0797   77                     LD   (hl),a   
0798   23                     INC   hl   ; hl = string_end*
0799   ED 43 04 24            LD   (vTemp1),bc   ; save IP
079D   11 00 22               LD   de,BUFFER   ; de = string*
07A0   B7                     OR   a   ; bc = size
07A1   ED 52                  SBC   hl,de   
07A3   44 4D                  LD   bc,hl   
07A5   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
07A8   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
07A9   D5                     PUSH   de   ; return hstring*
07AA   ED B0                  LDIR      ; copy size bytes from string* to hstring*
07AC   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
07B0   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
07B4                STRINGEND1:      
07B4   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
07B7   22 EC 23               LD   (vBufPtr),hl   
07BA   DD E9                  JP   (ix)   
07BC                STRINGSIZE:      
07BC   DD E9                  JP   (ix)   
07BE                VARHEAPPTR:      
07BE   ED 5B F0 23            LD   de,(vHeapPtr)   
07C2   21 F0 23               LD   hl,vHeapPtr   
07C5   18 09                  JR   variable   
07C7                VARTIBPTR:      
07C7   ED 5B EA 23            LD   de,(vTIBPtr)   
07CB   21 EA 23               LD   hl,vTIBPtr   
07CE   18 00                  JR   variable   
07D0                VARIABLE:      
07D0   22 F8 23               LD   (vPointer),hl   
07D3                CONSTANT:      
07D3   D5                     PUSH   de   
07D4   DD E9                  JP   (ix)   
07D6                             ; /w
07D6                WORDMODE:      
07D6   21 02 00               LD   hl,2   
07D9   C3 24 07               JP   byteMode1   
07DC                XOR:         
07DC   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07DD                XOR1:        
07DD   E1                     POP   hl   
07DE   7B                     LD   a,e   
07DF   AD                     XOR   l   
07E0   6F                     LD   l,a   
07E1   7A                     LD   a,d   
07E2   AC                     XOR   h   
07E3   67                     LD   h,a   
07E4   E5                     PUSH   hl   
07E5   DD E9                  JP   (ix)   
07E7                             ;*******************************************************************
07E7                             ; implementations
07E7                             ;*******************************************************************
07E7                             ;*******************************************************************
07E7                             ; Monty implementations
07E7                             ;*******************************************************************
07E7                             ; /rg rangeSrc
07E7                             ; begin end step -- src
07E7                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07E7                RANGESRC:      ; range source: begin, end, step, local: L
07E7   CD 0E 0C               CALL   go   
07EA   00 00                  DW   NUL   
07EC   F6 07                  DW   rangeSrcM_1843S1430   
07EE   F0 07                  DW   $+2   
07F0   01                     DB   1   
07F1   04 62 65 73 4C         .PSTR   "besL"   
07F6                RANGESRCM_1843S1430:      
07F6   7B                     DB   "{"   
07F7   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0802   5C 6B 74 7B            DB   "\\kt{"   
0806   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
080E   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0814   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
081C   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0824   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
082E   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0836   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
083D   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
0851   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0859   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0860   7D                     DB   "}"   
0861   7D                     DB   "}"   
0862   00                     DB   0   
0863                             ; /ai arrayIter
0863                             ; array* -- src
0863                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0863                ARRAYITER:      
0863   CD 0E 0C               CALL   go   
0866   00 00                  DW   NUL   
0868   70 08                  DW   arrayIterM_1862S1450   
086A   6C 08                  DW   $+2   
086C   01                     DB   1   
086D   02 61 4C               .PSTR   "aL"   
0870                ARRAYITERM_1862S1450:      
0870   7B                     DB   "{"   
0871   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
0881   5C 6B 74 7B            DB   "\\kt{"   
0885   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
088D   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0893   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
089B   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
08A3   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
08AA   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08B2   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
08BB   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
08D2   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08DA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E1   7D                     DB   "}"   
08E2   7D                     DB   "}"   
08E3   00                     DB   0   
08E4                             ; /si stringIter
08E4                             ; string* -- src
08E4                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08E4                STRINGITER:      
08E4   CD 0E 0C               CALL   go   
08E7   00 00                  DW   NUL   
08E9   F1 08                  DW   stringIterM_1881S1470   
08EB   ED 08                  DW   $+2   
08ED   01                     DB   1   
08EE   02 73 4C               .PSTR   "sL"   
08F1                STRINGITERM_1881S1470:      
08F1   7B                     DB   "{"   
08F2   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08FC   5C 6B 74 7B            DB   "\\kt{"   
0900   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0908   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
090F   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0917   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
091F   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0926   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
0935   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
093D   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0944   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0958   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0960   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0967   7D                     DB   "}"   
0968   7D                     DB   "}"   
0969   00                     DB   0   
096A                             ; /mp map
096A                             ; src func -- src1
096A                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
096A                MAP:         ; map: source, function
096A   CD 0E 0C               CALL   go   
096D   00 00                  DW   NUL   
096F   77 09                  DW   mapM_1901S1492   
0971   73 09                  DW   $+2   
0973   00                     DB   0   
0974   02 73 66               .PSTR   "sf"   
0977                MAPM_1901S1492:      
0977   7B                     DB   "{"   
0978   5C 6B 74 7B            DB   "\\kt{"   
097C   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0984   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0988   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
098D   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0999   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
09A2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09A9   7D                     DB   "}"   
09AA   7D                     DB   "}"   
09AB   00                     DB   0   
09AC                             ; /ft filter
09AC                             ; src pred -- src1
09AC                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09AC                FILTER:      ; filter: source, predicate, local: T
09AC   CD 0E 0C               CALL   go   
09AF   00 00                  DW   NUL   
09B1   BA 09                  DW   filterM_1915S1507   
09B3   B5 09                  DW   $+2   
09B5   01                     DB   1   
09B6   03 73 70 54            .PSTR   "spT"   
09BA                FILTERM_1915S1507:      
09BA   7B                     DB   "{"   
09BB   5B 30 5D 25 54 3D      DB   "[0]%T="   
09C1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09C5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09C9   5B                     DB   "["   
09CA   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09D7   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09DF   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09E3   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09E8   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09FE   3F 3F                  DB   "??"   
0A00   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A07   7D                     DB   "}"   
0A08   7D                     DB   "}"   
0A09   00                     DB   0   
0A0A                             ; /fd fold
0A0A                             ; reducer is a function like: \\da00bbLi4u
0A0A                             ; src init reducer -- src1
0A0A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A0A                FOLD:        ; src, init, reducer
0A0A   CD 0E 0C               CALL   go   
0A0D   00 00                  DW   NUL   
0A0F   19 0A                  DW   foldM_1934S1527   
0A11   13 0A                  DW   $+2   
0A13   01                     DB   1   
0A14   04 73 69 72 41         .PSTR   "sirA"   
0A19                FOLDM_1934S1527:      
0A19   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A1A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A21   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A25   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A29   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A2E   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A49   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A52   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A59   7D                     DB   "}"   
0A5A   7D                     DB   "}"   
0A5B   00                     DB   0   
0A5C                             ; /fe forEach
0A5C                             ; src proc --
0A5C                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A5C                FOREACH:      ; forEach: source, procedure, local: T
0A5C   CD 0E 0C               CALL   go   
0A5F   00 00                  DW   NUL   
0A61   6A 0A                  DW   forEachM_1948S1542   
0A63   65 0A                  DW   $+2   
0A65   01                     DB   1   
0A66   03 73 70 54            .PSTR   "spT"   
0A6A                FOREACHM_1948S1542:      
0A6A   7B                     DB   "{"   
0A6B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A71   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A75   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A7D   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A82   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A94   3F 3F                  DB   "??"   ; ifte:
0A96   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A9F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AA6   7D                     DB   "}"   
0AA7   00                     DB   0   
0AA8                             ; ; /fs funcSrc
0AA8                             ; ; func -- src
0AA8                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0AA8                FUNCSRC:      ; :f func or block
0AA8   CD 0E 0C               CALL   go   
0AAB   00 00                  DW   NUL   
0AAD   B4 0A                  DW   funcSrcM_1962S1557   
0AAF   B1 0A                  DW   $+2   
0AB1   00                     DB   0   
0AB2   01 66                  .PSTR   "f"   
0AB4                FUNCSRCM_1962S1557:      
0AB4   7B                     DB   "{"   
0AB5   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AB9   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0AC1   5C 64 74 7B            DB   "\\dt{"   
0AC5   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AD7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0ADE   7D                     DB   "}"   
0ADF   7D                     DB   "}"   
0AE0   00                     DB   0   
0AE1                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0AE1                DOTARRAY:      
0AE1   CD 0E 0C               CALL   go   
0AE4   00 00                  DW   NUL   
0AE6   EF 0A                  DW   dotArrayM_1972S1568   
0AE8   EA 0A                  DW   $+2   
0AEA   02                     DB   2   
0AEB   03 61 62 63            .PSTR   "abc"   
0AEF                DOTARRAYM_1972S1568:      
0AEF   7B                     DB   "{"   
0AF0   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0B27   7D                     DB   "}"   
0B28   00                     DB   0   
0B29                DOTNEXT:      
0B29   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0B2C   3C                     INC   a   
0B2D   20 02                  JR   nz,dotNext1   
0B2F   DD E9                  JP   (ix)   
0B31                DOTNEXT1:      
0B31   11 00 22               LD   de,BUFFER   
0B34   2A EC 23               LD   hl,(vBufPtr)   
0B37   B7                     OR   a   ; hl = count, de = vHeapPtr
0B38   ED 52                  SBC   hl,de   
0B3A   C3 43 0B               JP   dotNext3   
0B3D                DOTNEXT2:      
0B3D   1A                     LD   a,(de)   ; print char at char*
0B3E   CD 85 00               CALL   putchar   
0B41   13                     INC   de   ; char*++
0B42   2B                     DEC   hl   ; count--
0B43                DOTNEXT3:      
0B43   7D                     LD   a,l   ; count == 0?
0B44   B4                     OR   h   
0B45   20 F6                  JR   nz,dotNext2   ; if not loop
0B47   21 00 22               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0B4A   22 EC 23               LD   (vBufPtr),hl   
0B4D   DD E9                  JP   (ix)   
0B4F                             ;*******************************************************************
0B4F                             ; unused opcodes (reserved)
0B4F                             ;*******************************************************************
0B4F                UNDERSCORE:      
0B4F                COMMA:       
0B4F   DD E9                  JP   (ix)   
0B51                             ;                               51
0B51                RBRACK:      
0B51                ARRAYEND:      
0B51   FD 54                  LD   d,iyh   ; de = BP
0B53   FD 5D                  LD   e,iyl   
0B55   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0B59   62 6B                  LD   hl,de   ; hl = de = BP
0B5B   B7                     OR   a   
0B5C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B5E   CB 3C                  SRL   h   ; 
0B60   CB 1D                  RR   l   
0B62   44 4D                  LD   bc,hl   ; bc = count
0B64   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B67   71                     LD   (hl),c   ; write num items in length word
0B68   23                     INC   hl   
0B69   70                     LD   (hl),b   
0B6A   23                     INC   hl   ; hl = array[0], bc = count
0B6B                             ; de = BP, hl = array[0], bc = count
0B6B   18 15                  JR   arrayEnd3   
0B6D                ARRAYEND1:      
0B6D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B70   77                     LD   (hl),a   ; write lsb of array item
0B71   23                     INC   hl   ; move to msb of array item
0B72   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0B75   3D                     DEC   a   
0B76   28 05                  JR   z,arrayEnd2   
0B78   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B7B   77                     LD   (hl),a   ; write msb of array item
0B7C   23                     INC   hl   ; move to next word in array
0B7D                ARRAYEND2:      
0B7D   FD 2B                  DEC   iy   ; move to next word on stack
0B7F   FD 2B                  DEC   iy   
0B81   0B                     DEC   bc   ; dec items count
0B82                ARRAYEND3:      
0B82   79                     LD   a,c   ; if not zero loop
0B83   B0                     OR   b   
0B84   20 E7                  JR   nz,arrayEnd1   
0B86   EB                     EX   de,hl   ; de = end of array, hl = BP
0B87   F9                     LD   sp,hl   ; sp = BP
0B88   E1                     POP   hl   ; de = end of array, hl = old BP
0B89   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0B8A   FD 62                  LD   iyh,d   
0B8C   FD 6B                  LD   iyl,e   
0B8E   D1                     POP   de   ; pop arg_list (discard)
0B8F   D1                     POP   de   ; pop first_arg* (discard)
0B90   D1                     POP   de   ; pop IP (discard)
0B91   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0B95   13                     INC   de   
0B96   13                     INC   de   
0B97   D5                     PUSH   de   ; return array[0]
0B98   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0B9B   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0B9F   DD E9                  JP   (ix)   
0BA1                             ;                               58
0BA1                RBRACE:      
0BA1                BLOCKEND:      
0BA1   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BA4   FD 56 01               LD   d,(iy+1)   
0BA7   ED 53 04 24            LD   (vTemp1),de   
0BAB   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BAE   FD 56 07               LD   d,(iy+7)   
0BB1   ED 53 06 24            LD   (vTemp2),de   
0BB5   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BB8   FD 56 03               LD   d,(iy+3)   
0BBB   EB                     EX   de,hl   
0BBC   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BBF   FD 56 01               LD   d,(iy+1)   
0BC2   13                     INC   de   ; for carry flag <=
0BC3   B7                     OR   a   
0BC4   ED 52                  SBC   hl,de   
0BC6   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BC8   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BCA   FD 5D                  LD   e,iyl   
0BCC   21 08 00               LD   hl,8   
0BCF   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BD0   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BD1   18 0C                  JR   blockEnd2   
0BD3                BLOCKEND1:      ; same scope
0BD3   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BD6   FD 56 03               LD   d,(iy+3)   
0BD9   EB                     EX   de,hl   
0BDA   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BDC   FD 5D                  LD   e,iyl   
0BDE   EB                     EX   de,hl   
0BDF                BLOCKEND2:      
0BDF   44 4D                  LD   bc,hl   ; bc = hl = BP
0BE1   B7                     OR   a   ; hl = BP - SP = count
0BE2   ED 72                  SBC   hl,sp   
0BE4   7D                     LD   a,l   
0BE5   B4                     OR   h   
0BE6   28 09                  JR   z,blockEnd3   
0BE8   C5                     PUSH   bc   ; bc = count, hl = BP
0BE9   44 4D                  LD   bc,hl   
0BEB   E1                     POP   hl   
0BEC   2B                     DEC   hl   ; hl = BP-1
0BED   1B                     DEC   de   ; de = args*-1
0BEE   ED B8                  LDDR      
0BF0   13                     INC   de   
0BF1                BLOCKEND3:      
0BF1   EB                     EX   de,hl   ; sp = de = new tos*
0BF2   F9                     LD   sp,hl   
0BF3   ED 4B 06 24            LD   bc,(vTemp2)   
0BF7   FD 2A 04 24            LD   iy,(vTemp1)   
0BFB   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0BFF   7B                     LD   a,e   ; check for NUL
0C00   B2                     OR   d   
0C01   20 02                  JR   nz,blockEnd4   
0C03   DD E9                  JP   (ix)   
0C05                BLOCKEND4:      
0C05   21 00 00               LD   hl,0   ; clear recur vector
0C08   22 F2 23               LD   (vRecur),hl   
0C0B   C3 0F 0C               JP   go1   ; execute de
0C0E                             ; execute a block of code which ends with } 116
0C0E                             ; creates a root scope if BP == stack
0C0E                             ; else uses outer scope
0C0E                CARET:       
0C0E                GO:          
0C0E   D1                     POP   de   ; de = block*
0C0F                GO1:         
0C0F   7B                     LD   a,e   ; if block* == null, exit
0C10   B2                     OR   d   
0C11   20 02                  JR   nz,go2   
0C13   DD E9                  JP   (ix)   
0C15                GO2:         
0C15   1A                     LD   a,(de)   
0C16   FE 7B                  CP   "{"   
0C18   28 06                  JR   z,goBlock   
0C1A   FE 28                  CP   "("   
0C1C   C2 53 0C               JP   nz,goFunc   
0C1F   D5                     PUSH   de   ; push de just before stack frame
0C20                GOBLOCK:      
0C20   ED 53 04 24            LD   (vTemp1),de   ; save de
0C24   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C27   FD 54                  LD   d,iyh   
0C29   FD 5D                  LD   e,iyl   
0C2B   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C2C   ED 52                  SBC   hl,de   
0C2E   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C32   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C33   B4                     OR   h   
0C34   3E 00                  LD   a,0   
0C36   28 6A                  JR   z,goFunc8   
0C38   C5                     PUSH   bc   ; push IP
0C39   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C3C   FD 46 05               LD   b,(iy+5)   
0C3F   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C42   FD 66 03               LD   h,(iy+3)   
0C45                GOBLOCK2:      
0C45   C5                     PUSH   bc   ; arg_list*
0C46   E5                     PUSH   hl   ; first_arg*
0C47   FD E5                  PUSH   iy   ; push BP
0C49   FD 21 00 00            LD   iy,0   ; BP = SP
0C4D   FD 39                  ADD   iy,sp   
0C4F                GOBLOCK3:      
0C4F   42 4B                  LD   bc,de   ; bc = de = block*-1
0C51   DD E9                  JP   (ix)   
0C53                GOFUNC:      ; execute func
0C53   EB                     EX   de,hl   ; hl = func*
0C54   5E                     LD   e,(hl)   ; de = partial_array*
0C55   23                     INC   hl   
0C56   56                     LD   d,(hl)   
0C57   23                     INC   hl   
0C58   7B                     LD   a,e   ; if partial_array* == null skip
0C59   B2                     OR   d   
0C5A   28 21                  JR   z,goFunc3   
0C5C   ED 43 04 24            LD   (vTemp1),bc   
0C60   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C63   EB                     EX   de,hl   ; hl = partial_array*
0C64   2B                     DEC   hl   ; bc = count
0C65   46                     LD   b,(hl)   
0C66   2B                     DEC   hl   
0C67   4E                     LD   c,(hl)   
0C68   23                     INC   hl   ; hl = array data*
0C69   23                     INC   hl   
0C6A   18 06                  JR   goFunc2   ; push each item on stack
0C6C                GOFUNC1:      
0C6C   5E                     LD   e,(hl)   ; de = partial item
0C6D   23                     INC   hl   
0C6E   56                     LD   d,(hl)   
0C6F   23                     INC   hl   
0C70   D5                     PUSH   de   ; push on stack
0C71   0B                     DEC   bc   
0C72                GOFUNC2:      
0C72   79                     LD   a,c   ; if count != 0 then loop
0C73   B0                     OR   b   
0C74   20 F6                  JR   nz,goFunc1   
0C76   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C7A   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C7D                GOFUNC3:      
0C7D   5E                     LD   e,(hl)   ; de = block*
0C7E   23                     INC   hl   
0C7F   56                     LD   d,(hl)   
0C80   23                     INC   hl   
0C81   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C85   5E                     LD   e,(hl)   ; de = arg_list*
0C86   23                     INC   hl   
0C87   56                     LD   d,(hl)   
0C88   23                     INC   hl   
0C89   EB                     EX   de,hl   ; hl = arg_list*
0C8A   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C8E   7D                     LD   a,l   ; if arg_list* == null a = 0
0C8F   B4                     OR   h   
0C90   20 03                  JR   nz,goFunc4   
0C92   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C93   18 0D                  JR   goFunc8   
0C95                GOFUNC4:      ; allocate locals
0C95   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0C96   18 03                  JR   goFunc6   
0C98                GOFUNC5:      ; loop
0C98   3B                     DEC   sp   
0C99   3B                     DEC   sp   
0C9A   3D                     DEC   a   
0C9B                GOFUNC6:      
0C9B   B7                     OR   a   
0C9C   20 FA                  JR   nz,goFunc5   ; end loop
0C9E                GOFUNC7:      
0C9E   23                     INC   hl   ; a = num_args* x 2
0C9F   7E                     LD   a,(hl)   
0CA0   2B                     DEC   hl   
0CA1   87                     ADD   a,a   ; a *= 2
0CA2                GOFUNC8:      
0CA2   C5                     PUSH   bc   ; push IP
0CA3   44 4D                  LD   bc,hl   
0CA5   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CA8   85                     ADD   a,l   
0CA9   6F                     LD   l,a   
0CAA   39                     ADD   hl,sp   
0CAB   18 98                  JR   goBlock2   
0CAD                             ; 
0CAD                             ;*******************************************************************
0CAD                             ; general routines
0CAD                             ;*******************************************************************
0CAD                             ; arg_list - parses arg_list e.g. ab:c
0CAD                             ; -- arg_list*
0CAD                PARSEARGS:      
0CAD   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CB0   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CB3   E5                     PUSH   hl   ; save start of arg_list
0CB4   23                     INC   hl   ; skip length fields to start of string
0CB5   23                     INC   hl   
0CB6   03                     INC   bc   ; point to next char
0CB7                PARSEARGS1:      
0CB7   0A                     LD   a,(bc)   
0CB8   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CBA   20 03                  JR   nz,parseArgs1a   
0CBC   14                     INC   d   ; non zero value local count acts as flag
0CBD   18 10                  JR   parseArgs3   
0CBF                PARSEARGS1A:      
0CBF   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CC1   38 0F                  JR   c,parseArgs4   
0CC3   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CC5   30 0B                  JR   nc,parseArgs4   
0CC7                PARSEARGS2:      
0CC7   77                     LD   (hl),a   
0CC8   23                     INC   hl   
0CC9   1C                     INC   e   ; increase arg count
0CCA   AF                     XOR   a   
0CCB   B2                     OR   d   
0CCC   28 01                  JR   z,parseArgs3   
0CCE   14                     INC   d   ; if d > 0 increase local count
0CCF                PARSEARGS3:      
0CCF   03                     INC   bc   ; point to next char
0CD0   18 E5                  JR   parseArgs1   
0CD2                PARSEARGS4:      
0CD2   0B                     DEC   bc   
0CD3   AF                     XOR   a   
0CD4   B2                     OR   d   
0CD5   28 01                  JR   z,parseArgs5   
0CD7   15                     DEC   d   ; remove initial inc
0CD8                PARSEARGS5:      
0CD8   23                     INC   hl   
0CD9   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CDC   E1                     POP   hl   ; hl = start of arg_list
0CDD   72                     LD   (hl),d   ; write number of locals at start - 1
0CDE   23                     INC   hl   
0CDF   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CE0   2B                     DEC   hl   
0CE1   E3                     EX   (sp),hl   
0CE2   E9                     JP   (hl)   
0CE3                             ; create block: parses block e.g. 00bbIC4uLi4g
0CE3                             ; -- block*
0CE3                PARSEBLOCK:      
0CE3   C5                     PUSH   bc   ; return pointer to first { of block
0CE4   03                     INC   bc   
0CE5   16 01                  LD   d,1   ; nesting: count first parenthesis
0CE7                PARSEBLOCK1:      ; Skip to end of definition
0CE7   0A                     LD   a,(bc)   ; Get the next character
0CE8   03                     INC   bc   ; Point to next character
0CE9   FE 21                  CP   " " + 1   ; ignore whitespace
0CEB   38 FA                  JR   c,parseBlock1   
0CED   FE 29                  CP   ")"   
0CEF   28 2D                  JR   z,parseBlock4   
0CF1   FE 7D                  CP   "}"   
0CF3   28 29                  JR   z,parseBlock4   
0CF5   FE 5D                  CP   "]"   
0CF7   28 25                  JR   z,parseBlock4   
0CF9   FE 28                  CP   "("   
0CFB   28 16                  JR   z,parseBlock2   
0CFD   FE 7B                  CP   "{"   
0CFF   28 12                  JR   z,parseBlock2   
0D01   FE 5B                  CP   "["   
0D03   28 0E                  JR   z,parseBlock2   
0D05   FE 27                  CP   "'"   
0D07   28 0D                  JR   z,parseBlock3   
0D09   FE 60                  CP   "`"   
0D0B   28 09                  JR   z,parseBlock3   
0D0D   FE 22                  CP   DQ   
0D0F   28 05                  JR   z,parseBlock3   
0D11   18 D4                  JR   parseBlock1   
0D13                PARSEBLOCK2:      
0D13   14                     INC   d   
0D14   18 D1                  JR   parseBlock1   
0D16                PARSEBLOCK3:      
0D16   3E 80                  LD   a,$80   
0D18   AA                     XOR   d   
0D19   57                     LD   d,a   
0D1A   20 CB                  JR   nz,parseBlock1   
0D1C   18 03                  JR   parseBlock5   
0D1E                PARSEBLOCK4:      
0D1E   15                     DEC   d   
0D1F   20 C6                  JR   nz,parseBlock1   ; get the next element
0D21                PARSEBLOCK5:      
0D21   60 69                  LD   hl,bc   ; hl = IP
0D23   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D26   B7                     OR   a   ; IP - HEAP
0D27   ED 52                  SBC   hl,de   
0D29   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D2B   28 1C                  JR   z,parseBlock6   
0D2D   60 69                  LD   hl,bc   ; hl = IP
0D2F   D1                     POP   de   ; de = block*
0D30   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D34   B7                     OR   a   ; bc = size
0D35   ED 52                  SBC   hl,de   
0D37   44 4D                  LD   bc,hl   
0D39   EB                     EX   de,hl   ; hl = block* de = heap*
0D3A   ED 5B F0 23            LD   de,(vHeapPtr)   
0D3E   D5                     PUSH   de   ; return hblock*
0D3F   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D41   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D45   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D49                PARSEBLOCK6:      
0D49   0B                     DEC   bc   ; balanced, exit
0D4A   E1                     POP   hl   ; hl = block*
0D4B   E3                     EX   (sp),hl   ; return to caller
0D4C   E9                     JP   (hl)   
0D4D                             ; create function
0D4D                             ; arg_list* block* -- func*
0D4D                CREATEFUNC:      
0D4D   E1                     POP   hl   ; save retrn address
0D4E   22 08 24               LD   (vTemp3),hl   
0D51   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D55   E1                     POP   hl   ; hl = block*
0D56   22 06 24               LD   (vTemp2),hl   ; save block*
0D59   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D5C   FD 56 05               LD   d,(iy+5)   
0D5F   7B                     LD   a,e   ; if arg_list == null then make a func
0D60   B2                     OR   d   
0D61   20 09                  JR   nz,createFunc0   
0D63   21 00 00               LD   hl,0   ; partial_array = null
0D66   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D6A   18 65                  JR   createFunc5   
0D6C                CREATEFUNC0:      
0D6C   E1                     POP   hl   ; hl = inner_arg_list*
0D6D   E5                     PUSH   hl   ; save inner_arg_list
0D6E   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D72   7E                     LD   a,(hl)   ; compile inner_num_locals
0D73   4F                     LD   c,a   ; b = inner_num_locals
0D74   12                     LD   (de),a   
0D75   23                     INC   hl   
0D76   13                     INC   de   
0D77   7E                     LD   a,(hl)   ; compile inner_length
0D78   12                     LD   (de),a   
0D79   91                     SUB   c   ; a = inner_num args
0D7A   23                     INC   hl   
0D7B   13                     INC   de   
0D7C   B7                     OR   a   ; compile args if inner_length > 0
0D7D   28 05                  JR   z,createFunc1   
0D7F   4F                     LD   c,a   ; bc = a
0D80   06 00                  LD   b,0   
0D82   ED B0                  LDIR      
0D84                CREATEFUNC1:      
0D84   EB                     EX   de,hl   ; hl = outer_arg_list
0D85   FD 5E 04               LD   e,(iy+4)   
0D88   FD 56 05               LD   d,(iy+5)   
0D8B   EB                     EX   de,hl   
0D8C   23                     INC   hl   ; a = outer_length
0D8D   7E                     LD   a,(hl)   
0D8E   23                     INC   hl   
0D8F   B7                     OR   a   
0D90   28 05                  JR   z,createFunc2   
0D92   4F                     LD   c,a   
0D93   06 00                  LD   b,0   
0D95   ED B0                  LDIR      ; append outer_args
0D97                CREATEFUNC2:      ; a = outer_length
0D97   47                     LD   b,a   ; b = a = outer_length
0D98   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0D9B   23                     INC   hl   
0D9C   7E                     LD   a,(hl)   ; add outer_length to new length
0D9D   80                     ADD   a,b   
0D9E   77                     LD   (hl),a   
0D9F   2B                     DEC   hl   
0DA0   78                     LD   a,b   ; save outer_length in a'
0DA1   08                     EX   af,af'   
0DA2   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DA3   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DA4   B7                     OR   a   
0DA5   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DA7   4F                     LD   c,a   ; c = inner_num_locals
0DA8   06 00                  LD   b,0   ; bc = inner_num_locals
0DAA   23                     INC   hl   ; a = inner_length
0DAB   7E                     LD   a,(hl)   
0DAC   91                     SUB   c   ; a = inner_num_args
0DAD   23                     INC   hl   ; hl = inner_arg_chars
0DAE   85                     ADD   a,l   ; hl += a
0DAF   6F                     LD   l,a   
0DB0   3E 00                  LD   a,0   
0DB2   84                     ADD   a,h   
0DB3   67                     LD   h,a   
0DB4   ED B0                  LDIR      ; append inner_locals
0DB6                CREATEFUNC2A:      
0DB6   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DB7   12                     LD   (de),a   ; compile partial_array length field
0DB8   13                     INC   de   
0DB9   AF                     XOR   a   
0DBA   12                     LD   (de),a   
0DBB   13                     INC   de   
0DBC   D5                     PUSH   de   ; push partial_array*
0DBD   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DBE   FD 5E 02               LD   e,(iy+2)   
0DC1   FD 56 03               LD   d,(iy+3)   
0DC4   EB                     EX   de,hl   
0DC5                CREATEFUNC3:      
0DC5   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DC6   4E                     LD   c,(hl)   
0DC7   2B                     DEC   hl   
0DC8   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DC9   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DCA   13                     INC   de   
0DCB   79                     LD   a,c   
0DCC   12                     LD   (de),a   
0DCD   13                     INC   de   
0DCE   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DD0                CREATEFUNC4:      
0DD0   E1                     POP   hl   ; hl = partial_array*
0DD1                CREATEFUNC5:      
0DD1   C1                     POP   bc   ; bc = new_arg_list*
0DD2   D5                     PUSH   de   ; return new func*
0DD3   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DD4   73                     LD   (hl),e   ; compile partial_array* to func
0DD5   23                     INC   hl   
0DD6   72                     LD   (hl),d   
0DD7   23                     INC   hl   
0DD8   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0DDC   73                     LD   (hl),e   ; compile block* to func
0DDD   23                     INC   hl   
0DDE   72                     LD   (hl),d   
0DDF   23                     INC   hl   
0DE0   71                     LD   (hl),c   ; compile new_arg_list* to func
0DE1   23                     INC   hl   
0DE2   70                     LD   (hl),b   
0DE3   23                     INC   hl   
0DE4   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0DE7   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DEB   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0DEE   E9                     JP   (hl)   
0DEF                             ; ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0DEF                             ; flushBuffer:
0DEF                             ;     push af
0DEF                             ;     push de
0DEF                             ;     push hl
0DEF                             ;     ld hl,(vBufPtr)
0DEF                             ;     ld de,BUF
0DEF                             ;     ld (vBufPtr),de
0DEF                             ;     or a
0DEF                             ;     sbc hl,de
0DEF                             ;     call printChars2
0DEF                             ;     pop hl
0DEF                             ;     pop de
0DEF                             ;     pop af
0DEF                             ;     ret
0DEF                             ; printChars1:
0DEF                             ;     ld a,(de)                           ; print char at char*
0DEF                             ;     call putchar
0DEF                             ;     inc de                              ; char*++
0DEF                             ;     dec hl                              ; count--
0DEF                             ; printChars2:
0DEF                             ;     ld a,l                              ; count == 0?
0DEF                             ;     or h
0DEF                             ;     ret z
0DEF                             ;     jr printChars1                      ; if not loop
0DEF                             ; ; followed by a table
0DEF                             ; ; db char
0DEF                             ; ; db lsb(addr)
0DEF                             ; ; the final item must have char == NUL
0DEF                             ; jumpTable:
0DEF                             ;     pop hl
0DEF                             ;     inc bc
0DEF                             ; jumpTable0:
0DEF                             ;     xor a
0DEF                             ;     cp (hl)
0DEF                             ;     jr z,jumpTable2
0DEF                             ;     ld a,(bc)
0DEF                             ;     cp (hl)
0DEF                             ;     jr z,jumpTable1
0DEF                             ;     inc hl
0DEF                             ;     inc hl
0DEF                             ;     jr jumpTable0
0DEF                             ; jumpTable1:
0DEF                             ;     inc hl
0DEF                             ;     ld l,(hl)                   ; must have the same msb as the table
0DEF                             ;     jp (hl)
0DEF                             ; jumpTable2:
0DEF                             ;     dec bc
0DEF                             ;     inc hl
0DEF                             ;     jp (hl)
0DEF                             ; followed by a table
0DEF                             ; indexed on the 0-25 lowercase letter
0DEF                             ; db lsb(addr)
0DEF                             ; the final item index 26 matches any other char
0DEF                COMMANDTABLE:      
0DEF   03                     INC   bc   
0DF0   0A                     LD   a,(bc)   
0DF1   FE 7B                  CP   "z"+1   
0DF3   30 0B                  JR   nc,commandTable2   
0DF5   D6 61                  SUB   "a"   
0DF7   38 07                  JR   c,commandTable2   
0DF9                COMMANDTABLE1:      
0DF9   E1                     POP   hl   
0DFA   85                     ADD   a,l   
0DFB   6F                     LD   l,a   
0DFC   6E                     LD   l,(hl)   ; must have the same msb as the table
0DFD   C3 06 0E               JP   xjumpTableX   
0E00                COMMANDTABLE2:      
0E00   3E 1A                  LD   a,26   
0E02   0B                     DEC   bc   
0E03   18 F4                  JR   commandTable1   
0E05                             ; followed by a table
0E05                             ; db char
0E05                             ; db lsb(addr)
0E05                             ; the final item must have char == NUL
0E05                XJUMPTABLE:      
0E05   E1                     POP   hl   
0E06                XJUMPTABLEX:      
0E06   03                     INC   bc   
0E07                XJUMPTABLE0:      
0E07   AF                     XOR   a   
0E08   BE                     CP   (hl)   
0E09   28 0F                  JR   z,xjumpTable2   
0E0B   0A                     LD   a,(bc)   
0E0C   BE                     CP   (hl)   
0E0D   28 05                  JR   z,xjumpTable1   
0E0F   23                     INC   hl   
0E10   23                     INC   hl   
0E11   23                     INC   hl   
0E12   18 F3                  JR   xjumpTable0   
0E14                XJUMPTABLE1:      
0E14   23                     INC   hl   
0E15   5E                     LD   e,(hl)   
0E16   23                     INC   hl   
0E17   56                     LD   d,(hl)   
0E18   EB                     EX   de,hl   
0E19   E9                     JP   (hl)   
0E1A                XJUMPTABLE2:      
0E1A   0B                     DEC   bc   
0E1B   23                     INC   hl   
0E1C   E9                     JP   (hl)   
0E1D                PRTSTR0:      
0E1D   CD 85 00               CALL   putchar   
0E20   23                     INC   hl   
0E21                PRTSTR:      
0E21   7E                     LD   a,(hl)   
0E22   B7                     OR   a   
0E23   20 F8                  JR   nz,prtstr0   
0E25   C9                     RET      
0E26                             ; **************************************************************************
0E26                             ; calculate nesting value
0E26                             ; a is char to be tested,
0E26                             ; e is the nesting value (initially 0)
0E26                             ; e is increased by ( and [
0E26                             ; e is decreased by ) and ]
0E26                             ; e has its bit 7 toggled by `
0E26                             ; limited to 127 levels
0E26                             ; **************************************************************************
0E26                NESTING:      
0E26   FE 22                  CP   DQ   ; quote char
0E28   28 06                  JR   z,nesting0   
0E2A   FE 60                  CP   "`"   ; quote char
0E2C   28 02                  JR   z,nesting0   
0E2E   18 0A                  JR   nesting1   
0E30                NESTING0:      
0E30   CB 7B                  BIT   7,e   
0E32   28 03                  JR   z,nesting1a   
0E34   CB BB                  RES   7,e   
0E36   C9                     RET      
0E37                NESTING1A:      
0E37   CB FB                  SET   7,e   
0E39   C9                     RET      
0E3A                NESTING1:      
0E3A   CB 7B                  BIT   7,e   
0E3C   C0                     RET   nz   
0E3D   FE 7B                  CP   "{"   
0E3F   28 08                  JR   z,nesting2   
0E41   FE 5B                  CP   "["   
0E43   28 04                  JR   z,nesting2   
0E45   FE 28                  CP   "("   
0E47   20 02                  JR   nz,nesting3   
0E49                NESTING2:      
0E49   1C                     INC   e   
0E4A   C9                     RET      
0E4B                NESTING3:      
0E4B   FE 7D                  CP   "}"   
0E4D   28 07                  JR   z,nesting4   
0E4F   FE 5D                  CP   "]"   
0E51   28 03                  JR   z,nesting4   
0E53   FE 29                  CP   ")"   
0E55   C0                     RET   nz   
0E56                NESTING4:      
0E56   1D                     DEC   e   
0E57   C9                     RET      
0E58                PROMPT:      
0E58   CD 68 0E               CALL   printStr   
0E5B   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E60   C9                     RET      
0E61                CRLF:        
0E61   CD 68 0E               CALL   printStr   
0E64   0D 0A 00               .CSTR   "\r\n"   
0E67   C9                     RET      
0E68                             ; prints a null teminated string
0E68                             ; the string should be immediately following the call
0E68                PRINTSTR:      
0E68   E3                     EX   (sp),hl   ; swap			
0E69   CD 21 0E               CALL   prtstr   
0E6C   23                     INC   hl   ; inc past NUL
0E6D   E3                     EX   (sp),hl   ; put it back	
0E6E   C9                     RET      
0E6F                INIT:        
0E6F   21 F0 01               LD   hl,titleStr   
0E72   11 0E 24               LD   de,titleBuf   
0E75   06 14                  LD   b,20   
0E77                INIT1:       
0E77   1A                     LD   a,(de)   
0E78   BE                     CP   (hl)   
0E79   20 17                  JR   nz,coldBoot0   
0E7B   13                     INC   de   
0E7C   23                     INC   hl   
0E7D   10 F8                  DJNZ   init1   
0E7F                WARMINIT:      
0E7F   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0E83   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0E87   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0E8B   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0E8F   C3 C9 0E               JP   start1   
0E92                COLDBOOT0:      
0E92   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0E95   11 0E 24               LD   de,titleBuf   
0E98   06 14                  LD   b,20   
0E9A   ED B0                  LDIR      
0E9C                COLDINIT:      
0E9C   21 DE 01               LD   hl,isysVars   
0E9F   11 E6 23               LD   de,sysVars   
0EA2   01 12 00               LD   bc,9 * 2   
0EA5   ED B0                  LDIR      
0EA7   21 00 23               LD   hl,vars   ; 52 vars LO HI
0EAA   06 34                  LD   b,26*2   
0EAC   AF                     XOR   a   
0EAD                COLDBOOT1:      
0EAD   77                     LD   (hl),a   
0EAE   23                     INC   hl   
0EAF   10 FC                  DJNZ   coldBoot1   
0EB1   DD 2A EE 23            LD   ix,(vNext)   
0EB5   FD 21 00 21            LD   iy,STACK   
0EB9   C9                     RET      
0EBA                COLDSTART:      
0EBA   31 00 21               LD   sp,STACK   
0EBD   CD 92 0E               CALL   coldBoot0   
0EC0   C3 C9 0E               JP   start1   
0EC3                START:       
0EC3   31 00 21               LD   sp,STACK   ; start Monty
0EC6   CD 6F 0E               CALL   init   ; setups
0EC9                START1:      
0EC9   21 0E 24               LD   hl,titleBuf   
0ECC   CD 21 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0ECF                INTERPRET:      
0ECF   CD 58 0E               CALL   prompt   
0ED2   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0ED5   21 00 21               LD   hl,TIB   
0ED8   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EDB                INTERPRET2:      ; calculate nesting
0EDB   1E 00                  LD   e,0   ; initilize nesting value
0EDD   C5                     PUSH   bc   ; save offset into TIB,
0EDE                             ; bc is also the count of chars in TIB
0EDE   21 00 21               LD   hl,TIB   ; hl is start of TIB
0EE1   18 0B                  JR   interpret4   
0EE3                INTERPRET3:      
0EE3   3E 33                  LD   a,"3"   
0EE5   CD 85 00               CALL   putchar   
0EE8   7E                     LD   a,(hl)   ; a = char in TIB
0EE9   23                     INC   hl   ; inc pointer into TIB
0EEA   0B                     DEC   bc   ; dec count of chars in TIB
0EEB   CD 26 0E               CALL   nesting   ; update nesting value
0EEE                INTERPRET4:      
0EEE   79                     LD   a,c   ; is count zero?
0EEF   B0                     OR   b   
0EF0   20 F1                  JR   nz,interpret3   ; if not loop
0EF2   C1                     POP   bc   ; restore offset into TIB
0EF3                INTERPRET5:      
0EF3   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0EF6   FE 20                  CP   $20   ; compare to space
0EF8   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0EFA   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0EFC                             ; ???? NEEDED?
0EFC   28 36                  JR   z,interpret8   
0EFE   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F00   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F02   FE 05                  CP   CTRL_E   
0F04   CA 92 0F               JP   z,edit_   
0F07   FE 08                  CP   CTRL_H   
0F09   CA 82 0F               JP   z,backSpace_   
0F0C   FE 0A                  CP   CTRL_J   
0F0E   CA AA 0F               JP   z,reEdit_   
0F11                             ; cp CTRL_S
0F11                             ; jp z,printStack_
0F11                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F11                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F11                             ; DB     lsb(list_)       ; FF  ^L 12
0F11                             ; DB     lsb(printStack_) ; DLE ^P 16
0F11                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F11                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F11                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F11                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F11                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F11                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F11                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F11                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F11                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F11                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F11                INTERPRET5A:      
0F11                             ; ld (vTIBPtr),bc
0F11                             ; ld bc,(vTIBPtr)
0F11   18 C8                  JR   interpret2   
0F13                INTERPRET6:      
0F13   21 00 21               LD   hl,TIB   
0F16   09                     ADD   hl,bc   
0F17   77                     LD   (hl),a   ; store the character in textbuf
0F18   03                     INC   bc   
0F19   CD 85 00               CALL   putchar   ; echo character to screen
0F1C   CD 26 0E               CALL   nesting   
0F1F   18 D2                  JR   interpret5   ; wait for next character
0F21                INTERPRET7:      
0F21   21 00 21               LD   hl,TIB   
0F24   09                     ADD   hl,bc   
0F25   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F27   23                     INC   hl   
0F28   36 0A                  LD   (hl),"\n"   
0F2A   23                     INC   hl   
0F2B   03                     INC   bc   
0F2C   03                     INC   bc   
0F2D   CD 61 0E               CALL   crlf   ; echo character to screen
0F30   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F31   B7                     OR   a   
0F32   20 BF                  JR   nz,interpret5   
0F34                INTERPRET8:      
0F34   21 00 21               LD   hl,TIB   
0F37   09                     ADD   hl,bc   
0F38   22 EA 23               LD   (vTIBPtr),hl   
0F3B   01 00 21               LD   bc,TIB   
0F3E   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F42   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F46   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F4A   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F4E   0B                     DEC   bc   
0F4F                NEXT:        
0F4F   03                     INC   bc   ; Increment the IP
0F50   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F51   FE 20                  CP   " "   ; whitespace?
0F53   28 FA                  JR   z,next   ; space? ignore
0F55   38 08                  JR   c,next1   
0F57   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F59   6F                     LD   l,a   ; index into table
0F5A   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F5C   6E                     LD   l,(hl)   ; get low jump address
0F5D   24                     INC   h   ; Load h with page after opcodes
0F5E   E9                     JP   (hl)   ; Jump to routine
0F5F                NEXT1:       
0F5F   FE 00                  CP   NUL   ; end of input string?
0F61   28 03                  JR   z,exit   
0F63   C3 CF 0E               JP   interpret   ; no, other whitespace, macros?
0F66                EXIT:        
0F66   03                     INC   bc   
0F67   60 69                  LD   hl,bc   
0F69   E9                     JP   (hl)   
0F6A                RUN:         
0F6A   C1                     POP   bc   
0F6B   0B                     DEC   bc   
0F6C   DD E9                  JP   (ix)   
0F6E                ERROR:       
0F6E   E5                     PUSH   hl   
0F6F   CD 6A 0F               CALL   run   
0F72   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F7F   C3 CF 0E               JP   interpret   
0F82                BACKSPACE_:      
0F82   79                     LD   a,c   
0F83   B0                     OR   b   
0F84   CA DB 0E               JP   z,interpret2   
0F87   0B                     DEC   bc   
0F88   CD 68 0E               CALL   printStr   
0F8B   08 20 08 00            .CSTR   "\b \b"   
0F8F   C3 DB 0E               JP   interpret2   
0F92                             ; edit
0F92                EDIT_:       
0F92   CD 6A 0F               CALL   run   
0F95   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FA7   C3 CF 0E               JP   interpret   
0FAA                REEDIT_:      
0FAA   C3 CF 0E               JP   interpret   
0FAD                PRINTSTACK_:      
0FAD   CD 6A 0F               CALL   run   
0FB0   2F 70 6B 00            .CSTR   "/pk"   
0FB4   C3 CF 0E               JP   interpret   
0FB7                             ; editDef:
0FB7                             ;     pop hl                      ; pop ret address
0FB7                             ;     ex (sp),hl                  ; swap with TOS
0FB7                             ;     push hl                     ; dup TOS
0FB7                             ;     ld a,l                      ; a = ident
0FB7                             ;     ld de,TIB                   ; de = start of TIB
0FB7                             ;     ld (vTIBPtr),de             ; update TIB*
0FB7                             ;     push ix                     ; save NEXT
0FB7                             ;     ld ix,editDef0              ; NEXT = editDef0
0FB7                             ;     jp lookupRef                ; convert letter into address
0FB7                             ; editDef0:
0FB7                             ;     ld e,(hl)                   ; de = (hl++)
0FB7                             ;     inc hl
0FB7                             ;     ld d,(hl)
0FB7                             ;     ld a,d                      ; de == 0 ?
0FB7                             ;     or e
0FB7                             ;     jr z,editDef4
0FB7                             ;     ld ix,editDef3              ; NEXT = editDef3
0FB7                             ;     ex de,hl
0FB7                             ;     ld a,(hl)
0FB7                             ;     cp "{"
0FB7                             ;     jr nz,editDef1
0FB7                             ;     jp editBlock0               ; convert letter into address
0FB7                             ; editDef1:
0FB7                             ;     cp "("
0FB7                             ;     jr nz,editDef2
0FB7                             ;     jp editBlock0               ; convert letter into address
0FB7                             ; editDef2:
0FB7                             ;     jp editFunc
0FB7                             ; editDef3:
0FB7                             ;     ld a," "                    ; write assign
0FB7                             ;     call writeChar
0FB7                             ;     pop hl                      ; a = ident
0FB7                             ;     ld a,l
0FB7                             ;     call writeChar
0FB7                             ;     ld a,"="                    ; write assign
0FB7                             ;     call writeChar
0FB7                             ;     ld ix,editDef4              ; NEXT = editDef4
0FB7                             ;     jp printTIB
0FB7                             ; editDef4:
0FB7                             ;     pop ix                      ; restore NEXT
0FB7                             ;     jp (ix)
0FB7                             ; writeChar:
0FB7                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FB7                             ;     ld (de),a                   ; write ident
0FB7                             ;     inc de
0FB7                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FB7                             ;     ret
0FB7                             ; ; printTIB
0FB7                             ; printTIB:
0FB7                             ;     ld hl,(vTIBPtr)
0FB7                             ;     ld de,TIB
0FB7                             ;     or a
0FB7                             ;     sbc hl,de
0FB7                             ;     jp printTIB2
0FB7                             ; printTIB1:
0FB7                             ;     ld a,(de)
0FB7                             ;     call putchar
0FB7                             ; printTIB2:
0FB7                             ;     ld a,l
0FB7                             ;     or h
0FB7                             ;     jr nz,printTIB1
0FB7                             ;     jp (ix)
0FB7                             ; editBlock:
0FB7                             ;     pop hl                      ; hl = block*
0FB7                             ; editBlock0:
0FB7                             ;     push ix                     ; save next
0FB7                             ;     push hl                     ; push block*
0FB7                             ;     push hl                     ; push block*
0FB7                             ;     ld ix,(editBlock2)
0FB7                             ;     jp blockLength
0FB7                             ; editBlock1:
0FB7                             ;     pop hl                      ; bc = length, (sp) = IP
0FB7                             ;     pop de                      ; de = block*
0FB7                             ;     ld a,l
0FB7                             ;     or h
0FB7                             ;     jr z,editBlock2
0FB7                             ;     push bc
0FB7                             ;     ld bc,hl
0FB7                             ;     ex de,hl                    ; hl = block*
0FB7                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FB7                             ;     ldir                        ; copy block to TIB
0FB7                             ;     ld (vTIBPtr),de              ; save TIB*
0FB7                             ;     pop bc
0FB7                             ; editBlock2:
0FB7                             ;     pop ix                      ; restore next
0FB7                             ;     jp (ix)
0FB7                             ; editFunc:
0FB7                             ;     jp (ix)
0FB7                             ; editArray:
0FB7                             ;     jp (ix)
0FB7                             ; editparseArgs:
0FB7                             ;     jp (ix)
0FB7                             ; ; blockLength
0FB7                             ; ; addr1 -- length
0FB7                             ; blockLength:
0FB7                             ;     pop hl                      ; block*
0FB7                             ;     push hl                     ; save block*
0FB7                             ;     inc hl                      ; skip first char
0FB7                             ;     ld d,1                      ; increase nesting
0FB7                             ; blockLength1:                   ; Skip to end of definition
0FB7                             ;     ld a,(hl)                   ; Get the next character
0FB7                             ;     inc hl                      ; Point to next character
0FB7                             ;     cp " " + 1                  ; ignore whitespace
0FB7                             ;     jr c,blockLength1
0FB7                             ;     cp ")"
0FB7                             ;     jr z,blockLength4
0FB7                             ;     cp "}"
0FB7                             ;     jr z,blockLength4
0FB7                             ;     cp "]"
0FB7                             ;     jr z,blockLength4
0FB7                             ;     cp "("
0FB7                             ;     jr z,blockLength2
0FB7                             ;     cp "{"
0FB7                             ;     jr z,blockLength2
0FB7                             ;     cp "["
0FB7                             ;     jr z,blockLength2
0FB7                             ;     cp "'"
0FB7                             ;     jr z,blockLength3
0FB7                             ;     cp "`"
0FB7                             ;     jr z,blockLength3
0FB7                             ;     cp DQ
0FB7                             ;     jr z,blockLength3
0FB7                             ;     jr blockLength1
0FB7                             ; blockLength2:
0FB7                             ;     inc d
0FB7                             ;     jr blockLength1
0FB7                             ; blockLength4:
0FB7                             ;     dec d
0FB7                             ;     jr nz, blockLength1         ; get the next element
0FB7                             ; blockLength3:
0FB7                             ;     ld a,$80
0FB7                             ;     xor d
0FB7                             ;     ld d,a
0FB7                             ;     jr nz, blockLength1
0FB7                             ;     pop hl                      ; hl = block*
0FB7                             ;     or a
0FB7                             ;     sbc hl,de
0FB7                             ;     push hl
0FB7                             ;     jp (ix)
0FB7                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FB7                             ; \a start of stack \#3 depth \b base \$ prompt
0FB7                             ; DW dStack               ; a vS0 start of datastack			
0FB7                             ; DW FALSE                ; b vBase16
0FB7                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FB7                             ; DW 0                    ; d
0FB7                             ; DW 65                   ; e vLastDef "A" last command u defined
0FB7                             ; DW 0                    ; f
0FB7                             ; DW page6                ; g 256 bytes limits
0FB7                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FB7                F1:          
0FB7                F2:          
0FB7                F3:          
0FB7                F4:          
0FB7                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 2352 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        047C DEFINED AT LINE 750 IN MAIN.asm
PRINTSTRING0:       0483 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTSTRING1:       0486 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
QUOTE:              0492 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0492 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0492 DEFINED AT LINE 770 IN MAIN.asm
STRING1:            049B DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
STRING2:            049E DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
STRING3:            04A4 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
PERCENT:            04AC DEFINED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04AC DEFINED AT LINE 797 IN MAIN.asm
ARG0:               04C8 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ARG0A:              04D1 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ARG1:               04D6 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
ARG1A:              04DE DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050D DEFINED AT LINE 856 IN MAIN.asm
DOTDEC:             0518 DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
DOTDECX:            0526 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
DOTDEC0:            0535 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
DOTDEC1:            0545 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
DOTDEC2:            0565 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
DOTDEC3:            0567 DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
DOTDEC4:            0577 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
DOTDEC5:            0578 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
DOTHEX:             057E DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
DOTHEX0:            0591 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
DOTHEX1:            05A0 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
DOTHEX2:            05A9 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
DOTSTRING_:         05B4 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
DOTSTRING0:         05BB DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
DOTSTRING1:         05BE DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DOTCHAR:            05C9 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1009 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1045 IN MAIN.asm
COMMAND_B_:         0636 DEFINED AT LINE 1057 IN MAIN.asm
COMMAND_D_:         0643 DEFINED AT LINE 1067 IN MAIN.asm
COMMAND_F_:         064A DEFINED AT LINE 1073 IN MAIN.asm
COMMAND_H_:         0666 DEFINED AT LINE 1093 IN MAIN.asm
COMMAND_I_:         066D DEFINED AT LINE 1100 IN MAIN.asm
KEY_:               0674 DEFINED AT LINE 1106 IN MAIN.asm
COMMAND_M_:         0678 DEFINED AT LINE 1110 IN MAIN.asm
OUTPUT_:            067F DEFINED AT LINE 1116 IN MAIN.asm
COMMAND_P_:         0683 DEFINED AT LINE 1120 IN MAIN.asm
COMMAND_Q_:         0687 DEFINED AT LINE 1125 IN MAIN.asm
COMMAND_R_:         068E DEFINED AT LINE 1131 IN MAIN.asm
COMMAND_S_:         069B DEFINED AT LINE 1141 IN MAIN.asm
TRUE_:              06AB DEFINED AT LINE 1153 IN MAIN.asm
COMMAND_V_:         06AF DEFINED AT LINE 1157 IN MAIN.asm
COMMAND_W_:         06BF DEFINED AT LINE 1169 IN MAIN.asm
XOR_:               06C6 DEFINED AT LINE 1175 IN MAIN.asm
COMMAND_NOP_:       06CA DEFINED AT LINE 1180 IN MAIN.asm
COMMAND_DEFAULT_:   06CD DEFINED AT LINE 1185 IN MAIN.asm
ABSOLUTE:           06D1 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
ADDROF:             06DE DEFINED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
ADDROF1:            06F2 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
ADDROF2:            06FD DEFINED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
ARRAYSIZE:          06FF DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
BREAK:              0707 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
BREAK1:             070E DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
BYTEMODE:           0721 DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
BYTEMODE1:          0724 DEFINED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
COMMENT:            0729 DEFINED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
CONSTHEAPSTART:     0732 DEFINED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
CONSTTIBSTART:      0738 DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
DECBASE:            073E DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
DECBASE1:           0741 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
ERROR1:             0746 DEFINED AT LINE 1293 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
HEXBASE:            074C DEFINED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
INPUT:              0752 DEFINED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
KEY:                075D DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
OUTPUT:             0766 DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
QUIT:               076F DEFINED AT LINE 1335 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
QUIT1:              0776 DEFINED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
RECUR:              0779 DEFINED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
REMAIN:             077F DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
STRINGBEGIN:        0785 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
STRINGEND:          078D DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRINGEND1:         07B4 DEFINED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
STRINGSIZE:         07BC DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
VARHEAPPTR:         07BE DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
VARTIBPTR:          07C7 DEFINED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
VARIABLE:           07D0 DEFINED AT LINE 1395 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
CONSTANT:           07D3 DEFINED AT LINE 1397 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
WORDMODE:           07D6 DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
XOR:                07DC DEFINED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
XOR1:               07DD DEFINED AT LINE 1408 IN MAIN.asm
RANGESRC:           07E7 DEFINED AT LINE 32
                    > USED AT LINE 1137 IN MAIN.asm
RANGESRCM_1843S1430: 07F6 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0863 DEFINED AT LINE 32
                    > USED AT LINE 1051 IN MAIN.asm
ARRAYITERM_1862S1450: 0870 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08E4 DEFINED AT LINE 32
                    > USED AT LINE 1147 IN MAIN.asm
STRINGITERM_1881S1470: 08F1 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                096A DEFINED AT LINE 32
                    > USED AT LINE 1112 IN MAIN.asm
MAPM_1901S1492:     0977 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09AC DEFINED AT LINE 32
                    > USED AT LINE 1081 IN MAIN.asm
FILTERM_1915S1507:  09BA DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A0A DEFINED AT LINE 32
                    > USED AT LINE 1075 IN MAIN.asm
FOLDM_1934S1527:    0A19 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A5C DEFINED AT LINE 32
                    > USED AT LINE 1077 IN MAIN.asm
FOREACHM_1948S1542: 0A6A DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0AA8 DEFINED AT LINE 32
                    > USED AT LINE 1079 IN MAIN.asm
FUNCSRCM_1962S1557: 0AB4 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0AE1 DEFINED AT LINE 32
                    > USED AT LINE 847 IN MAIN.asm
DOTARRAYM_1972S1568: 0AEF DEFINED AT LINE 39
                    > USED AT LINE 35
DOTNEXT:            0B29 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DOTNEXT1:           0B31 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
DOTNEXT2:           0B3D DEFINED AT LINE 1585 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
DOTNEXT3:           0B43 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
UNDERSCORE:         0B4F DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0B4F DEFINED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
RBRACK:             0B51 DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B51 DEFINED AT LINE 1608 IN MAIN.asm
ARRAYEND1:          0B6D DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
ARRAYEND2:          0B7D DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
ARRAYEND3:          0B82 DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
RBRACE:             0BA1 DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BA1 DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
BLOCKEND1:          0BD3 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
BLOCKEND2:          0BDF DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1683 IN MAIN.asm
BLOCKEND3:          0BF1 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
BLOCKEND4:          0C05 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
CARET:              0C0E DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C0E DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C0F DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
GO2:                0C15 DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
GOBLOCK:            0C20 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
GOBLOCK2:           0C45 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
GOBLOCK3:           0C4F DEFINED AT LINE 1761 IN MAIN.asm
GOFUNC:             0C53 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
GOFUNC1:            0C6C DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
GOFUNC2:            0C72 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
GOFUNC3:            0C7D DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
GOFUNC4:            0C95 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
GOFUNC5:            0C98 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
GOFUNC6:            0C9B DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
GOFUNC7:            0C9E DEFINED AT LINE 1824 IN MAIN.asm
GOFUNC8:            0CA2 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
PARSEARGS:          0CAD DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CB7 DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
PARSEARGS1A:        0CBF DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
PARSEARGS2:         0CC7 DEFINED AT LINE 1864 IN MAIN.asm
PARSEARGS3:         0CCF DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
PARSEARGS4:         0CD2 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
PARSEARGS5:         0CD8 DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
PARSEBLOCK:         0CE3 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0CE7 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
PARSEBLOCK2:        0D13 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
PARSEBLOCK3:        0D16 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
PARSEBLOCK4:        0D1E DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
PARSEBLOCK5:        0D21 DEFINED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
PARSEBLOCK6:        0D49 DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
CREATEFUNC:         0D4D DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D6C DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
CREATEFUNC1:        0D84 DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
CREATEFUNC2:        0D97 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
CREATEFUNC2A:       0DB6 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
CREATEFUNC3:        0DC5 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
CREATEFUNC4:        0DD0 DEFINED AT LINE 2059 IN MAIN.asm
CREATEFUNC5:        0DD1 DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
COMMANDTABLE:       0DEF DEFINED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
COMMANDTABLE1:      0DF9 DEFINED AT LINE 2147 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
COMMANDTABLE2:      0E00 DEFINED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
XJUMPTABLE:         0E05 DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
XJUMPTABLEX:        0E06 DEFINED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
XJUMPTABLE0:        0E07 DEFINED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
XJUMPTABLE1:        0E14 DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
XJUMPTABLE2:        0E1A DEFINED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
PRTSTR0:            0E1D DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
PRTSTR:             0E21 DEFINED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
NESTING:            0E26 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
NESTING0:           0E30 DEFINED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
NESTING1A:          0E37 DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
NESTING1:           0E3A DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
NESTING2:           0E49 DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
NESTING3:           0E4B DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
NESTING4:           0E56 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
PROMPT:             0E58 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
CRLF:               0E61 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
PRINTSTR:           0E68 DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
INIT:               0E6F DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
INIT1:              0E77 DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
WARMINIT:           0E7F DEFINED AT LINE 2276 IN MAIN.asm
COLDBOOT0:          0E92 DEFINED AT LINE 2283 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
COLDINIT:           0E9C DEFINED AT LINE 2289 IN MAIN.asm
COLDBOOT1:          0EAD DEFINED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
COLDSTART:          0EBA DEFINED AT LINE 2307 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
START:              0EC3 DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EC9 DEFINED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
INTERPRET:          0ECF DEFINED AT LINE 2318 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
INTERPRET2:         0EDB DEFINED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
INTERPRET3:         0EE3 DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
INTERPRET4:         0EEE DEFINED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
INTERPRET5:         0EF3 DEFINED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
INTERPRET5A:        0F11 DEFINED AT LINE 2387 IN MAIN.asm
INTERPRET6:         0F13 DEFINED AT LINE 2392 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
INTERPRET7:         0F21 DEFINED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
INTERPRET8:         0F34 DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
NEXT:               0F4F DEFINED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
NEXT1:              0F5F DEFINED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
EXIT:               0F66 DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
RUN:                0F6A DEFINED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
ERROR:              0F6E DEFINED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
BACKSPACE_:         0F82 DEFINED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
EDIT_:              0F92 DEFINED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
REEDIT_:            0FAA DEFINED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 2366 IN MAIN.asm
PRINTSTACK_:        0FAD DEFINED AT LINE 2482 IN MAIN.asm
F1:                 0FB7 DEFINED AT LINE 10
                    > USED AT LINE 1083 IN MAIN.asm
F2:                 0FB7 DEFINED AT LINE 11
                    > USED AT LINE 1085 IN MAIN.asm
F3:                 0FB7 DEFINED AT LINE 12
                    > USED AT LINE 1087 IN MAIN.asm
F4:                 0FB7 DEFINED AT LINE 13
                    > USED AT LINE 1089 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2291 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1391 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
                    > USED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2303 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1356 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2315 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
