0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 5B 0F               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   1E                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5B                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7B                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   73                     DB   lsb(rparen_)   ; )     1
0189   AD                     DB   lsb(star_)   ; *     1
018A   D1                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   85                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   ED                     DB   lsb(colon_)   ; :     2
019A   F5                     DB   lsb(semicolon_)   ; ;     2
019B   49                     DB   lsb(lt_)   ; <     1
019C   2F                     DB   lsb(eq_)   ; =     1
019D   3E                     DB   lsb(gt_)   ; >     1
019E   1B                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   F0                     DB   lsb(upcase_)   ; A     1
01A1   F0                     DB   lsb(upcase_)   ; B
01A2   F0                     DB   lsb(upcase_)   ; C
01A3   F0                     DB   lsb(upcase_)   ; D
01A4   F0                     DB   lsb(upcase_)   ; E
01A5   F0                     DB   lsb(upcase_)   ; F
01A6   F0                     DB   lsb(upcase_)   ; G
01A7   F0                     DB   lsb(upcase_)   ; h
01A8   F0                     DB   lsb(upcase_)   ; I
01A9   F0                     DB   lsb(upcase_)   ; J
01AA   F0                     DB   lsb(upcase_)   ; K
01AB   F0                     DB   lsb(upcase_)   ; L
01AC   F0                     DB   lsb(upcase_)   ; M
01AD   F0                     DB   lsb(upcase_)   ; N
01AE   F0                     DB   lsb(upcase_)   ; O
01AF   F0                     DB   lsb(upcase_)   ; p
01B0   F0                     DB   lsb(upcase_)   ; Q
01B1   F0                     DB   lsb(upcase_)   ; R
01B2   F0                     DB   lsb(upcase_)   ; S
01B3   F0                     DB   lsb(upcase_)   ; T
01B4   F0                     DB   lsb(upcase_)   ; U
01B5   F0                     DB   lsb(upcase_)   ; V
01B6   F0                     DB   lsb(upcase_)   ; W
01B7   F0                     DB   lsb(upcase_)   ; X
01B8   F0                     DB   lsb(upcase_)   ; Y
01B9   F0                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   DD 0F                  DW   next   ; nNext
01E4   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   00                     DB   0   
01E8   0A                     DB   10   ; vNumBase = 10
01E9   00                     DB   0   
01EA   00                     DB   0   ; vRecur
01EB   00                     DB   0   
01EC   00                     DB   0   ; vDefine
01ED   00                     DB   0   
01EE   00                     DB   0   ; vStrMode
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 DB 0A               JP   dollar   
0209                PERCENT_:      
0209   C3 1F 0B               JP   percent   
020C                QUOTE_:      
020C   C3 05 0B               JP   quote   
020F                LPAREN_:      
020F   C3 CB 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 04               JP   dot   
0215                SLASH_:      
0215   C3 00 05               JP   slash   
0218                NUM_:        
0218   C3 54 0B               JP   num   
021B                QUESTION_:      
021B   C3 F8 0A               JP   question   
021E                BANG_:       
021E                BANG:        ; logical invert, any non zero value
021E   03                     INC   bc   
021F   0A                     LD   a,(bc)   
0220   FE 3D                  CP   "="   
0222   20 05                  JR   nz,not   
0224   E1                     POP   hl   
0225   D1                     POP   de   
0226   C3 93 0C               JP   notequals   
0229                NOT:         
0229   0B                     DEC   bc   
022A   21 00 00               LD   hl,0   ; is considered true
022D   18 0B                  JR   eq1   
022F                EQ_:         
022F                EQ:          
022F   03                     INC   bc   
0230   0A                     LD   a,(bc)   
0231   FE 3D                  CP   "="   
0233   28 04                  JR   z,eq0   
0235   0B                     DEC   bc   
0236   C3 7B 0C               JP   assign   
0239                EQ0:         
0239   E1                     POP   hl   
023A                EQ1:         
023A   D1                     POP   de   
023B   C3 8C 0C               JP   equals   
023E                GT_:         
023E                GT:          
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3E                  CP   ">"   
0242   CA F3 0C               JP   z,shiftRight   
0245   D1                     POP   de   
0246   E1                     POP   hl   
0247   18 09                  JR   lt1   
0249                LT_:         
0249                LT:          
0249   03                     INC   bc   
024A   0A                     LD   a,(bc)   
024B   FE 3C                  CP   "<"   
024D   CA D7 0C               JP   z,shiftLeft   
0250   E1                     POP   hl   
0251   D1                     POP   de   
0252                LT1:         
0252   FE 3D                  CP   "="   
0254   CA 9A 0C               JP   z,lessthaneq   
0257   0B                     DEC   bc   
0258   C3 9F 0C               JP   lessthan   
025B                             ; index of an array, based on vDataWidth 22
025B                             ; array* num -- value    ; also sets vPointer to address
025B                HASH_:       
025B                HASH:        
025B                ARRAYINDEX:      
025B   E1                     POP   hl   ; hl = index
025C   D1                     POP   de   ; de = array
025D   3A EE 23               LD   a,(vDataWidth)   ; a = data width
0260   3D                     DEC   a   
0261   28 01                  JR   z,arrayIndex1   
0263                ARRAYINDEX0:      
0263   29                     ADD   hl,hl   ; if data width = 2 then double
0264                ARRAYINDEX1:      
0264   19                     ADD   hl,de   ; add addr
0265   22 F8 23               LD   (vPointer),hl   ; store address in setter
0268   16 00                  LD   d,0   
026A   5E                     LD   e,(hl)   
026B   B7                     OR   a   ; check data width again
026C   28 02                  JR   z,arrayIndex2   
026E   23                     INC   hl   
026F   56                     LD   d,(hl)   
0270                ARRAYINDEX2:      
0270   D5                     PUSH   de   
0271   DD E9                  JP   (ix)   
0273                             ;                               4
0273                RPAREN_:      
0273                             ; jp rparen
0273                RPAREN:      
0273   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0276   FD 46 09               LD   b,(iy+9)   
0279   DD E9                  JP   (ix)   
027B                             ; & and                          14
027B                             ; a b -- c
027B                AMPER_:      
027B                AMPER:       
027B                AND:         
027B   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027C   E1                     POP   hl   
027D   7B                     LD   a,e   
027E   A5                     AND   l   
027F   6F                     LD   l,a   
0280   7A                     LD   a,d   
0281   A4                     AND   h   
0282   67                     LD   h,a   
0283   18 5B                  JR   add3   
0285                             ; - sub
0285                             ; a b -- c
0285                             ; -- sub
0285                             ; b1 -- b2
0285                             ; -= sub
0285                             ; a b1 -- b2
0285                MINUS_:      
0285                MINUS:       
0285   03                     INC   bc   ; check if sign of a number
0286   0A                     LD   a,(bc)   
0287   0B                     DEC   bc   
0288   FE 30                  CP   "0"   
028A   38 05                  JR   c,sub   
028C   FE 3A                  CP   "9"+1   
028E   DA 54 0B               JP   c,num   
0291                SUB:         ; Subtract the value 2nd on stack from top of stack
0291   E1                     POP   hl   ; hl = arg_b
0292   03                     INC   bc   
0293   FE 2D                  CP   "-"   
0295   20 04                  JR   nz,sub1   
0297   2B                     DEC   hl   ; --
0298   C3 7D 0C               JP   assign0   
029B                SUB1:        
029B   D1                     POP   de   ; de = arg_a
029C   FE 3D                  CP   "="   
029E   28 02                  JR   z,sub2   
02A0   0B                     DEC   bc   ; -
02A1   EB                     EX   de,hl   
02A2                SUB2:        
02A2   B7                     OR   a   ; -=
02A3   ED 52                  SBC   hl,de   
02A5                SUB3:        
02A5   FE 3D                  CP   "="   
02A7   CA 7D 0C               JP   z,assign0   
02AA   E5                     PUSH   hl   
02AB   DD E9                  JP   (ix)   
02AD                STAR_:       ; 21
02AD                STAR:        
02AD   03                     INC   bc   ; check for ** spread
02AE   0A                     LD   a,(bc)   
02AF   FE 2A                  CP   "*"   
02B1   CA B3 0C               JP   z,spread   
02B4   0B                     DEC   bc   
02B5                MUL:         
02B5   D1                     POP   de   ; get first value
02B6   E1                     POP   hl   
02B7                MUL2:        
02B7   C5                     PUSH   bc   ; Preserve the IP
02B8   44 4D                  LD   bc,hl   ; bc = 2nd value
02BA   21 00 00               LD   hl,0   
02BD   3E 10                  LD   a,16   
02BF                MUL3:        
02BF   29                     ADD   hl,hl   
02C0   CB 13                  RL   e   
02C2   CB 12                  RL   d   
02C4   30 04                  JR   nc,$+6   
02C6   09                     ADD   hl,bc   
02C7   30 01                  JR   nc,$+3   
02C9   13                     INC   de   
02CA   3D                     DEC   a   
02CB   20 F2                  JR   nz,mul3   
02CD   C1                     POP   bc   ; Restore the IP
02CE   C3 E0 02               JP   add3   
02D1                             ; + add                         25
02D1                             ; a b -- c
02D1                PLUS_:       
02D1                PLUS:        
02D1                ADD:         
02D1   03                     INC   bc   
02D2   0A                     LD   a,(bc)   
02D3   FE 2B                  CP   "+"   ; ++ increment variable
02D5   20 05                  JR   nz,add1   
02D7   E1                     POP   hl   
02D8   23                     INC   hl   
02D9   C3 7D 0C               JP   assign0   
02DC                ADD1:        
02DC   0B                     DEC   bc   
02DD   D1                     POP   de   ; second term
02DE   E1                     POP   hl   ; first term
02DF   19                     ADD   hl,de   
02E0                ADD3:        
02E0   03                     INC   bc   
02E1   0A                     LD   a,(bc)   
02E2   FE 3D                  CP   "="   
02E4   28 04                  JR   z,add4   
02E6   0B                     DEC   bc   
02E7   E5                     PUSH   hl   
02E8   DD E9                  JP   (ix)   
02EA                ADD4:        
02EA   C3 7D 0C               JP   assign0   
02ED                COLON_:      
02ED   C3 A7 0A               JP   colon   
02F0                             ;                               18
02F0                UPCASE_:      
02F0                UPCASE:      
02F0   0A                     LD   a,(bc)   ; a = identifier char
02F1   D6 41                  SUB   "A"   ; "A" = 0
02F3   18 10                  JR   ident1   
02F5                             ; ;
02F5                SEMICOLON_:      
02F5   C3 BD 0A               JP   semicolon   
02F8                             ;********************** PAGE 2 END *********************************************
02F8                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(vars)   
0309   22 F8 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 45 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 01 10               JP   error   
0343                LAMBDA2:      
0343   CD 7B 0D               CALL   parseBlock   
0346   CD E5 0D               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EC 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EC 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA EE 0B               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 21 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA EE 0B               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 2B 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 7B 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 E0 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 84 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 D1 0A               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 23            LD   de,(vPointer)   
03ED   21 F8 23               LD   hl,vPointer   
03F0   C3 3D 07               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 9D 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   5F 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   12 04                  DW   printChar   
0409   68                     DB   "h"   ; .h print hex without $ prefix
040A   A7 04                  DW   printHex0   
040C   73                     DB   "s"   ; .s print string
040D   21 04                  DW   printString   
040F   00                     DB   NUL   ; .  print number, fall through
0410   36 04                  DW   printNumber   
0412                             ; .c print char
0412                             ; char --
0412                PRINTCHAR:      
0412   E1                     POP   hl   ; a = char
0413   7D                     LD   a,l   
0414   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0418   12                     LD   (de),a   
0419   13                     INC   de   
041A   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*'
041E   C3 2B 0D               JP   dotNext   
0421                             ; .s print string
0421                             ; string* --
0421                PRINTSTRING:      
0421   E1                     POP   hl   ; hl = string*
0422   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0426   18 03                  JR   printString1   
0428                PRINTSTRING0:      
0428   12                     LD   (de),a   ; a -> buffer*
0429   13                     INC   de   ; string*++,
042A   23                     INC   hl   
042B                PRINTSTRING1:      
042B   7E                     LD   a,(hl)   ; a <- string*
042C   B7                     OR   a   ; if NUL exit loop
042D   20 F9                  JR   nz,printString0   
042F   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0433   C3 2B 0D               JP   dotNext   
0436                             ; . print decimal
0436                             ; value --
0436                PRINTNUMBER:      
0436   3A F0 23               LD   a,(vNumBase)   
0439   FE 10                  CP   16   
043B   CA AD 04               JP   z,printHex   ; else falls through
043E   C3 41 04               JP   printDec   
0441                             ; print decimal                 ; 70
0441                             ; value --
0441                PRINTDEC:      
0441   ED 5B E8 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0445   D9                     EXX      
0446   E1                     POP   hl   ; hl = value
0447   3A EE 23               LD   a,(vDataWidth)   
044A   3D                     DEC   a   
044B   20 02                  JR   nz,printDec1   
044D   26 00                  LD   h,0   
044F                PRINTDEC1:      
044F   CD 5E 04               CALL   printDec2   
0452   D9                     EXX      ; de = buffer*' bc = IP
0453   3E 20                  LD   a," "   ; append space to buffer
0455   12                     LD   (de),a   
0456   13                     INC   de   ; string*++,
0457   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
045B   C3 2B 0D               JP   dotNext   
045E                             ; hl = value
045E                             ; de' = buffer*
045E                             ; a, bc, de, hl destroyed
045E                PRINTDEC2:      
045E   CB 7C                  BIT   7,h   
0460   28 0C                  JR   z,printDec3   
0462   D9                     EXX      
0463   3E 2D                  LD   a,"-"   
0465   12                     LD   (de),a   
0466   13                     INC   de   
0467   D9                     EXX      
0468   AF                     XOR   a   
0469   95                     SUB   l   
046A   6F                     LD   l,a   
046B   9F                     SBC   a,a   
046C   94                     SUB   h   
046D   67                     LD   h,a   
046E                PRINTDEC3:      
046E   0E 00                  LD   c,0   ; leading zeros flag = false
0470   11 F0 D8               LD   de,-10000   
0473   CD 8E 04               CALL   printDec4   
0476   11 18 FC               LD   de,-1000   
0479   CD 8E 04               CALL   printDec4   
047C   11 9C FF               LD   de,-100   
047F   CD 8E 04               CALL   printDec4   
0482   1E F6                  LD   e,-10   
0484   CD 8E 04               CALL   printDec4   
0487   0C                     INC   c   ; flag = true for at least digit
0488   1E FF                  LD   e,-1   
048A   CD 8E 04               CALL   printDec4   
048D   C9                     RET      
048E                PRINTDEC4:      
048E   06 2F                  LD   b,"0"-1   
0490                PRINTDEC5:      
0490   04                     INC   b   
0491   19                     ADD   hl,de   
0492   38 FC                  JR   c,printDec5   
0494   ED 52                  SBC   hl,de   
0496   3E 30                  LD   a,"0"   
0498   B8                     CP   b   
0499   20 05                  JR   nz,printDec6   
049B   AF                     XOR   a   
049C   B1                     OR   c   
049D   C8                     RET   z   
049E   18 01                  JR   printDec7   
04A0                PRINTDEC6:      
04A0   0C                     INC   c   
04A1                PRINTDEC7:      
04A1   78                     LD   a,b   
04A2   D9                     EXX      
04A3   12                     LD   (de),a   
04A4   13                     INC   de   
04A5   D9                     EXX      
04A6   C9                     RET      
04A7                             ; buffer hex                    37
04A7                             ; value --
04A7                PRINTHEX0:      
04A7   ED 5B E8 23            LD   de,(vBufPtr)   
04AB   18 08                  JR   printHex1   
04AD                PRINTHEX:      
04AD   ED 5B E8 23            LD   de,(vBufPtr)   
04B1   3E 24                  LD   a,"$"   ; # prefix
04B3   12                     LD   (de),a   
04B4   13                     INC   de   ; string*++,
04B5                PRINTHEX1:      
04B5   E1                     POP   hl   ; hl = value
04B6   3A EE 23               LD   a,(vDataWidth)   
04B9   3D                     DEC   a   
04BA   28 04                  JR   z,printHex2   
04BC   7C                     LD   a,h   
04BD   CD CF 04               CALL   printHex3   
04C0                PRINTHEX2:      
04C0   7D                     LD   a,l   
04C1   CD CF 04               CALL   printHex3   
04C4   3E 20                  LD   a," "   ; append space to buffer
04C6   12                     LD   (de),a   
04C7   13                     INC   de   ; string*++,
04C8   ED 53 E8 23            LD   (vBufPtr),de   
04CC   C3 2B 0D               JP   dotNext   
04CF                PRINTHEX3:      
04CF   F5                     PUSH   af   
04D0   1F                     RRA      
04D1   1F                     RRA      
04D2   1F                     RRA      
04D3   1F                     RRA      
04D4   CD D8 04               CALL   printHex4   
04D7   F1                     POP   af   
04D8                PRINTHEX4:      
04D8   E6 0F                  AND   0x0F   
04DA   C6 90                  ADD   a,0x90   
04DC   27                     DAA      
04DD   CE 40                  ADC   a,0x40   
04DF   27                     DAA      
04E0   12                     LD   (de),a   
04E1   13                     INC   de   ; string*++,
04E2   C9                     RET      
04E3                             ; unused
04E3                DQUOTE:      
04E3                UNDERSCORE:      
04E3                COMMA:       
04E3   DD E9                  JP   (ix)   
04E5                             ;********************** PAGE 4 END *********************************************
04E5                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 58 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 87 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   C8                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   C8                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   C8                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   C8                     DB   lsb(command_nop_)   
0515   71                     DB   lsb(key_)   
0516   C8                     DB   lsb(command_nop_)   
0517   74                     DB   lsb(command_m_)   
0518   C8                     DB   lsb(command_nop_)   
0519   7A                     DB   lsb(output_)   
051A   7D                     DB   lsb(command_p_)   
051B   80                     DB   lsb(command_q_)   
051C   86                     DB   lsb(command_r_)   
051D   92                     DB   lsb(command_s_)   
051E   A7                     DB   lsb(true_)   
051F   C8                     DB   lsb(command_nop_)   
0520   AA                     DB   lsb(command_v_)   
0521   BF                     DB   lsb(command_w_)   
0522   C5                     DB   lsb(xor_)   
0523   C8                     DB   lsb(command_nop_)   
0524   C8                     DB   lsb(command_nop_)   
0525   CB                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EB 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   F9 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ad address of
052D   E5 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   1A 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   23 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   7A 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   52 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   51 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   37 06                  DW   break   
0541   00                     DB   NUL   
0542   7A 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   73 06                  DW   decBase   
0547   00                     DB   NUL   
0548   73 06                  DW   decBase   ; /d decimal
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   8A 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   DB 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   26 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   2D 09                  DW   filter   
0556   31                     DB   "1"   
0557   43 10                  DW   f1   
0559   32                     DB   "2"   
055A   43 10                  DW   f2   
055C   33                     DB   "3"   
055D   43 10                  DW   f3   
055F   34                     DB   "4"   
0560   43 10                  DW   f4   
0562   00                     DB   NUL   
0563   AD 0C                  DW   false1   
0565                COMMAND_H_:      
0565   78                     DB   "x"   ; /hx hex
0566   80 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   7A 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   86 06                  DW   input   
056E   00                     DB   NUL   
056F   7A 06                  DW   error1   
0571                KEY_:        
0571   00                     DB   NUL   
0572   91 06                  DW   key   
0574                COMMAND_M_:      
0574   70                     DB   "p"   ; /mp map
0575   EC 08                  DW   map   
0577   00                     DB   NUL   
0578   7A 06                  DW   error1   
057A                OUTPUT_:      
057A   00                     DB   NUL   
057B   9A 06                  DW   output   
057D                             ; 4
057D                COMMAND_P_:      
057D   00                     DB   NUL   
057E   7A 06                  DW   error1   
0580                             ; 6
0580                COMMAND_Q_:      
0580   74                     DB   "t"   ; /qt quit
0581   A3 06                  DW   quit   
0583   00                     DB   NUL   
0584   7A 06                  DW   error1   
0586                COMMAND_R_:      
0586   63                     DB   "c"   ; /rc tail call optimisation
0587   AD 06                  DW   recur   
0589   65                     DB   "e"   ; /re remainder
058A   B4 06                  DW   remain   
058C   67                     DB   "g"   ; /rg range src
058D   53 07                  DW   rangeSrc   
058F   00                     DB   NUL   
0590   7A 06                  DW   error1   
0592                COMMAND_S_:      
0592   62                     DB   "b"   
0593   BA 06                  DW   stringBegin   
0595   63                     DB   "c"   
0596   0A 07                  DW   stringCompare   
0598   65                     DB   "e"   
0599   C1 06                  DW   stringEnd   
059B   69                     DB   "i"   
059C   65 08                  DW   stringIter   
059E   6C                     DB   "l"   
059F   EF 06                  DW   stringLength   
05A1   73                     DB   "s"   
05A2   FE 06                  DW   stringSize   
05A4   00                     DB   NUL   
05A5   7A 06                  DW   error1   
05A7                TRUE_:       
05A7   00                     DB   NUL   
05A8   A7 0C                  DW   true1   
05AA                COMMAND_V_:      
05AA   62                     DB   "b"   
05AB   22 07                  DW   varBufPtr   
05AD   68                     DB   "h"   
05AE   2B 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   34 07                  DW   varTIBPtr   
05B3   42                     DB   "B"   
05B4   6D 06                  DW   constBufStart   
05B6   48                     DB   "H"   
05B7   61 06                  DW   constHeapStart   
05B9   54                     DB   "T"   
05BA   67 06                  DW   constTIBStart   
05BC   00                     DB   NUL   
05BD   7A 06                  DW   error1   
05BF                COMMAND_W_:      
05BF   6D                     DB   "m"   ; /wm word mode
05C0   43 07                  DW   wordMode   
05C2   00                     DB   NUL   
05C3   7A 06                  DW   error1   
05C5                XOR_:        
05C5   00                     DB   NUL   
05C6   48 07                  DW   xor   
05C8                             ; 2
05C8                COMMAND_NOP_:      
05C8   00                     DB   NUL   
05C9   CE 05                  DW   nop   
05CB                             ; 3
05CB                COMMAND_DEFAULT_:      
05CB   00                     DB   NUL   
05CC   D0 05                  DW   div   
05CE                             ;********************** PAGE 5 END *********************************************
05CE                NOP:         
05CE   DD E9                  JP   (ix)   
05D0                             ;                               32
05D0                DIV:         
05D0   E1                     POP   hl   ; hl = arg_b
05D1   D1                     POP   de   ; de = arg_a
05D2   03                     INC   bc   
05D3   0A                     LD   a,(bc)   
05D4   FE 3D                  CP   "="   
05D6   28 02                  JR   z,div2   
05D8   0B                     DEC   bc   ; /
05D9   EB                     EX   de,hl   
05DA                DIV2:        
05DA   F5                     PUSH   af   ; preserve af, bc
05DB   C5                     PUSH   bc   
05DC   44 4D                  LD   bc,hl   
05DE   CD 12 0D               CALL   divide   
05E1   EB                     EX   de,hl   
05E2   ED 53 FA 23            LD   (vRemain),de   
05E6   C1                     POP   bc   ; restore
05E7   F1                     POP   af   
05E8   C3 A5 02               JP   sub3   
05EB                             ; /ab absolute
05EB                             ; num -- num
05EB                ABSOLUTE:      
05EB   E1                     POP   hl   
05EC   CB 7C                  BIT   7,h   
05EE   28 06                  JR   z,absolute1   
05F0   AF                     XOR   a   
05F1   95                     SUB   l   
05F2   6F                     LD   l,a   
05F3   9F                     SBC   a,a   
05F4   94                     SUB   h   
05F5   67                     LD   h,a   
05F6                ABSOLUTE1:      
05F6   E5                     PUSH   hl   
05F7   DD E9                  JP   (ix)   
05F9                             ; /ad addrOf                    24
05F9                             ; char -- addr
05F9                ADDROF:      
05F9   E1                     POP   hl   ; a = char
05FA   7D                     LD   a,l   
05FB   FE 7B                  CP   "z"+1   ; if a > z then exit
05FD   30 19                  JR   nc,addrOf2   
05FF   D6 41                  SUB   "A"   ; a - 65
0601   38 15                  JR   c,addrOf2   ; if < A then exit
0603   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0605   38 06                  JR   c,addrOf1   
0607   D6 06                  SUB   "a"-("Z"+1)   
0609   FE 1A                  CP   "Z"-"A"+1   
060B   38 0B                  JR   c,addrOf2   ; if < a then exit
060D                ADDROF1:      
060D   87                     ADD   a,a   ; double a
060E   21 00 23               LD   hl,VARS   ; hl = VARS + a
0611   85                     ADD   a,l   
0612   6F                     LD   l,a   
0613   3E 00                  LD   a,0   
0615   8C                     ADC   a,h   
0616   67                     LD   h,a   
0617   E5                     PUSH   hl   
0618                ADDROF2:      
0618   DD E9                  JP   (ix)   
061A                             ; /al length of an array, num elements
061A                             ; array* -- num
061A                ARRAYLENGTH:      
061A   E1                     POP   hl   
061B   2B                     DEC   hl   ; msb size
061C   56                     LD   d,(hl)   
061D   2B                     DEC   hl   ; lsb size
061E   5E                     LD   e,(hl)   
061F   EB                     EX   de,hl   
0620                ARRAYLENGTH1:      
0620   E5                     PUSH   hl   
0621   DD E9                  JP   (ix)   
0623                             ; /as size in bytes of an array, based on current data width
0623                             ; array* -- num
0623                ARRAYSIZE:      
0623                          ;*Macro unroll:  PERFORM arrayLength
0623   DD 21 2A 06            LD   ix,performM_1514S1070   
0627   C3 1A 06               JP   arrayLength   
062A                PERFORMM_1514S1070:      
062A   E1                     POP   hl   
062B   3A EE 23               LD   a,(vDataWidth)   
062E   3D                     DEC   a   
062F   28 EF                  JR   z,arrayLength1   
0631   CB 3C                  SRL   h   
0633   CB 1D                  RR   l   
0635   18 E9                  JR   arrayLength1   
0637                             ; 13
0637                             ; /br break from loop
0637                             ; --
0637                BREAK:       
0637   E1                     POP   hl   ; hl = condition, break if false
0638   7D                     LD   a,l   
0639   B4                     OR   h   
063A   28 02                  JR   z,break1   
063C   DD E9                  JP   (ix)   
063E                BREAK1:      
063E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0640   FD 54                  LD   d,iyh   
0642   21 08 00               LD   hl,8   
0645   19                     ADD   hl,de   
0646   23                     INC   hl   
0647   23                     INC   hl   
0648   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
064B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
064E   C3 84 0B               JP   blockEnd   
0651                             ; /b
0651                BYTEMODE:      
0651   3E 01                  LD   a,1   
0653                BYTEMODE1:      
0653   32 EE 23               LD   (vDataWidth),a   
0656   DD E9                  JP   (ix)   
0658                             ; //
0658                COMMENT:      
0658   03                     INC   bc   ; point to next char
0659   0A                     LD   a,(bc)   
065A   FE 20                  CP   " "   ; terminate on any char less than SP
065C   30 FA                  JR   nc,comment   
065E   0B                     DEC   bc   
065F   DD E9                  JP   (ix)   
0661                CONSTHEAPSTART:      
0661   11 22 24               LD   de,HEAP   
0664   C3 40 07               JP   constant   
0667                CONSTTIBSTART:      
0667   11 00 21               LD   de,TIB   
066A   C3 40 07               JP   constant   
066D                CONSTBUFSTART:      
066D   11 00 22               LD   de,BUFFER   
0670   C3 40 07               JP   constant   
0673                DECBASE:      
0673   3E 0A                  LD   a,10   
0675                DECBASE1:      
0675   32 F0 23               LD   (vNumBase),a   
0678   DD E9                  JP   (ix)   
067A                ERROR1:      
067A   21 01 00               LD   hl,1   ; error 1: unknown command
067D   C3 01 10               JP   error   
0680                HEXBASE:      
0680   21 10 00               LD   hl,16   
0683   C3 75 06               JP   decBase1   
0686                             ; Z80 port input
0686                             ; port -- value
0686                INPUT:       
0686   E1                     POP   hl   
0687   59                     LD   e,c   ; save IP
0688   4D                     LD   c,l   
0689   ED 68                  IN   l,(c)   
068B   26 00                  LD   h,0   
068D   4B                     LD   c,e   ; restore IP
068E   E5                     PUSH   hl   
068F   DD E9                  JP   (ix)   
0691                             ; /k                              6
0691                KEY:         
0691   CD 81 00               CALL   getchar   
0694   26 00                  LD   h,0   
0696   6F                     LD   l,a   
0697   E5                     PUSH   hl   
0698   DD E9                  JP   (ix)   
069A                             ; /o Z80 port output
069A                             ; value port --
069A                OUTPUT:      
069A   E1                     POP   hl   
069B   59                     LD   e,c   ; save IP
069C   4D                     LD   c,l   
069D   E1                     POP   hl   
069E   ED 69                  OUT   (c),l   
06A0   4B                     LD   c,e   ; restore IP
06A1   DD E9                  JP   (ix)   
06A3                             ; /qt
06A3                             ; bool --
06A3                QUIT:        
06A3   E1                     POP   hl   ; hl = condition, exit if true
06A4   7D                     LD   a,l   
06A5   B4                     OR   h   
06A6   20 02                  JR   nz,quit1   
06A8   DD E9                  JP   (ix)   
06AA                QUIT1:       
06AA   C3 84 0B               JP   blockEnd   
06AD                RECUR:       
06AD   E1                     POP   hl   
06AE   7D                     LD   a,l   
06AF   32 F2 23               LD   (vRecur),a   
06B2   DD E9                  JP   (ix)   
06B4                REMAIN:      
06B4   2A FA 23               LD   hl,(vRemain)   
06B7   E5                     PUSH   hl   
06B8   DD E9                  JP   (ix)   
06BA                STRINGBEGIN:      
06BA   3E FF                  LD   a,TRUE   ; string mode = true
06BC   32 F6 23               LD   (vStrMode),a   
06BF   18 26                  JR   stringEnd1   ; save hl in vBufPtr
06C1                STRINGEND:      
06C1   3E 00                  LD   a,FALSE   ; string mode = false
06C3   32 F6 23               LD   (vStrMode),a   
06C6   2A E8 23               LD   hl,(vBufPtr)   ; append NUL to string
06C9   AF                     XOR   a   
06CA   77                     LD   (hl),a   
06CB   23                     INC   hl   ; hl = string_end*
06CC   ED 43 04 24            LD   (vTemp1),bc   ; save IP
06D0   11 00 22               LD   de,BUFFER   ; de = string*
06D3   B7                     OR   a   ; bc = size
06D4   ED 52                  SBC   hl,de   
06D6   44 4D                  LD   bc,hl   
06D8   2A EC 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06DB   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06DC   D5                     PUSH   de   ; return hstring*
06DD   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06DF   ED 53 EC 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06E3   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
06E7                STRINGEND1:      
06E7   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06EA   22 E8 23               LD   (vBufPtr),hl   
06ED   DD E9                  JP   (ix)   
06EF                STRINGLENGTH:      
06EF   D1                     POP   de   
06F0   21 00 00               LD   hl,0   
06F3   18 02                  JR   stringLength2   
06F5                STRINGLENGTH1:      
06F5   13                     INC   de   
06F6   23                     INC   hl   
06F7                STRINGLENGTH2:      
06F7   1A                     LD   a,(de)   
06F8   B7                     OR   a   
06F9   20 FA                  JR   nz,stringLength1   
06FB                STRINGLENGTH3:      
06FB   E5                     PUSH   hl   
06FC   DD E9                  JP   (ix)   
06FE                STRINGSIZE:      
06FE                          ;*Macro unroll:  PERFORM stringLength
06FE   DD 21 05 07            LD   ix,performM_1663S1239   
0702   C3 EF 06               JP   stringLength   
0705                PERFORMM_1663S1239:      
0705   E1                     POP   hl   
0706   23                     INC   hl   
0707   C3 FB 06               JP   stringLength3   
070A                             ; /sc string compare
070A                             ; string1* string2* -- bool
070A                             ; Compares two null terminated strings.
070A                STRINGCOMPARE:      
070A   D1                     POP   de   
070B   E1                     POP   hl   
070C                STRINGCOMPARE1:      
070C   1A                     LD   a,(de)   
070D   BE                     CP   (hl)   
070E   20 07                  JR   nz,stringCompare2   
0710   B7                     OR   a   
0711   28 09                  JR   z,stringCompare3   
0713   13                     INC   de   
0714   23                     INC   hl   
0715   18 F5                  JR   stringCompare1   
0717                STRINGCOMPARE2:      
0717   21 00 00               LD   hl,FALSE   
071A   18 03                  JR   stringCompare4   
071C                STRINGCOMPARE3:      
071C   21 FF FF               LD   hl,TRUE   
071F                STRINGCOMPARE4:      
071F   E5                     PUSH   hl   
0720   DD E9                  JP   (ix)   
0722                VARBUFPTR:      
0722   ED 5B E8 23            LD   de,(vBufPtr)   
0726   21 E8 23               LD   hl,vBufPtr   
0729   18 12                  JR   variable   
072B                VARHEAPPTR:      
072B   ED 5B EC 23            LD   de,(vHeapPtr)   
072F   21 EC 23               LD   hl,vHeapPtr   
0732   18 09                  JR   variable   
0734                VARTIBPTR:      
0734   ED 5B E6 23            LD   de,(vTIBPtr)   
0738   21 E6 23               LD   hl,vTIBPtr   
073B   18 00                  JR   variable   
073D                VARIABLE:      
073D   22 F8 23               LD   (vPointer),hl   
0740                CONSTANT:      
0740   D5                     PUSH   de   
0741   DD E9                  JP   (ix)   
0743                             ; /wm
0743                WORDMODE:      
0743   3E 01                  LD   a,1   
0745   C3 53 06               JP   byteMode1   
0748                             ; /x
0748                XOR:         
0748   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0749                XOR1:        
0749   E1                     POP   hl   
074A   7B                     LD   a,e   
074B   AD                     XOR   l   
074C   6F                     LD   l,a   
074D   7A                     LD   a,d   
074E   AC                     XOR   h   
074F   67                     LD   h,a   
0750   C3 E0 02               JP   add3   
0753                             ;*******************************************************************
0753                             ; Monty implementations
0753                             ;*******************************************************************
0753                             ; /rg rangeSrc
0753                             ; begin end step -- src
0753                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0753                RANGESRC:      ; range source: begin, end, step, local: L
0753   CD 9F 03               CALL   go   
0756   00 00                  DW   NUL   
0758   62 07                  DW   rangeSrcM_1728S1313   
075A   5C 07                  DW   $+2   
075C   01                     DB   1   
075D   04 62 65 73 4C         .PSTR   "besL"   
0762                RANGESRCM_1728S1313:      
0762   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0763   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0787   5C 6B 74 7B            DB   "\\kt{"   
078B   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0793   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0799   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07A1   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07A9   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07B3   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07BB   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
07C0   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
07D4   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
07DB   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07E2   7D                     DB   "}"   
07E3   7D                     DB   "}"   
07E4   00                     DB   0   
07E5                             ; /ai arrayIter
07E5                             ; array* -- src
07E5                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07E5                ARRAYITER:      
07E5   CD 9F 03               CALL   go   
07E8   00 00                  DW   NUL   
07EA   F2 07                  DW   arrayIterM_1747S1333   
07EC   EE 07                  DW   $+2   
07EE   01                     DB   1   
07EF   02 61 4C               .PSTR   "aL"   
07F2                ARRAYITERM_1747S1333:      
07F2   7B                     DB   "{"   
07F3   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0803   5C 6B 74 7B            DB   "\\kt{"   
0807   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
080F   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0815   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
081D   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0825   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
082C   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0834   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
083D   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0854   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
085B   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0862   7D                     DB   "}"   
0863   7D                     DB   "}"   
0864   00                     DB   0   
0865                             ; /si stringIter
0865                             ; string* -- src
0865                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0865                STRINGITER:      
0865   CD 9F 03               CALL   go   
0868   00 00                  DW   NUL   
086A   72 08                  DW   stringIterM_1766S1353   
086C   6E 08                  DW   $+2   
086E   01                     DB   1   
086F   02 73 4C               .PSTR   "sL"   
0872                STRINGITERM_1766S1353:      
0872   7B                     DB   "{"   
0873   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
087D   5C 6B 74 7B            DB   "\\kt{"   
0881   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0889   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
0890   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0898   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08A0   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08A7   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
08B8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08C0   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08C7   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08DB   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
08E2   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E9   7D                     DB   "}"   
08EA   7D                     DB   "}"   
08EB   00                     DB   0   
08EC                             ; /mp map
08EC                             ; src func -- src1
08EC                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08EC                MAP:         ; map: source, function
08EC   CD 9F 03               CALL   go   
08EF   00 00                  DW   NUL   
08F1   F9 08                  DW   mapM_1786S1375   
08F3   F5 08                  DW   $+2   
08F5   00                     DB   0   
08F6   02 73 66               .PSTR   "sf"   
08F9                MAPM_1786S1375:      
08F9   7B                     DB   "{"   
08FA   5C 6B 74 7B            DB   "\\kt{"   
08FE   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0906   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
090A   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
090F   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
091B   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0923   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
092A   7D                     DB   "}"   
092B   7D                     DB   "}"   
092C   00                     DB   0   
092D                             ; /ft filter
092D                             ; src pred -- src1
092D                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
092D                FILTER:      ; filter: source, predicate, local: T
092D   CD 9F 03               CALL   go   
0930   00 00                  DW   NUL   
0932   3B 09                  DW   filterM_1800S1390   
0934   36 09                  DW   $+2   
0936   01                     DB   1   
0937   03 73 70 54            .PSTR   "spT"   
093B                FILTERM_1800S1390:      
093B   7B                     DB   "{"   
093C   5B 30 5D 25 54 3D      DB   "[0]%T="   
0942   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0946   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
094A   5B                     DB   "["   
094B   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0958   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0960   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0964   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0969   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
097F   3F                     DB   "?"   
0980   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0987   7D                     DB   "}"   
0988   7D                     DB   "}"   
0989   00                     DB   0   
098A                             ; /fd fold
098A                             ; reducer is a function like: \\da00bbLi4u
098A                             ; src init reducer -- src1
098A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
098A                FOLD:        ; src, init, reducer
098A   CD 9F 03               CALL   go   
098D   00 00                  DW   NUL   
098F   99 09                  DW   foldM_1819S1410   
0991   93 09                  DW   $+2   
0993   01                     DB   1   
0994   04 73 69 72 41         .PSTR   "sirA"   
0999                FOLDM_1819S1410:      
0999   7B                     DB   "{"   ; reducer: \\da00bbLi4u
099A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09A1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09A5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09A9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09AE   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
09C9   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09D1   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D8   7D                     DB   "}"   
09D9   7D                     DB   "}"   
09DA   00                     DB   0   
09DB                             ; /fe forEach
09DB                             ; src proc --
09DB                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09DB                FOREACH:      ; forEach: source, procedure, local: T
09DB   CD 9F 03               CALL   go   
09DE   00 00                  DW   NUL   
09E0   E9 09                  DW   forEachM_1833S1425   
09E2   E4 09                  DW   $+2   
09E4   01                     DB   1   
09E5   03 73 70 54            .PSTR   "spT"   
09E9                FOREACHM_1833S1425:      
09E9   7B                     DB   "{"   
09EA   5B 30 5D 25 54 3D      DB   "[0]%T="   
09F0   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09F4   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09FC   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A01   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A13   3F                     DB   "?"   ; ifte:
0A14   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A1D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A24   7D                     DB   "}"   
0A25   00                     DB   0   
0A26                             ; ; /fs funcSrc
0A26                             ; ; func -- src
0A26                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A26                FUNCSRC:      ; :f func or block
0A26   CD 9F 03               CALL   go   
0A29   00 00                  DW   NUL   
0A2B   32 0A                  DW   funcSrcM_1847S1440   
0A2D   2F 0A                  DW   $+2   
0A2F   00                     DB   0   
0A30   01 66                  .PSTR   "f"   
0A32                FUNCSRCM_1847S1440:      
0A32   7B                     DB   "{"   
0A33   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A37   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A3F   5C 64 74 7B            DB   "\\dt{"   
0A43   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A55   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A5C   7D                     DB   "}"   
0A5D   7D                     DB   "}"   
0A5E   00                     DB   0   
0A5F                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A5F                PRINTARRAY:      
0A5F   CD 9F 03               CALL   go   
0A62   00 00                  DW   NUL   
0A64   6D 0A                  DW   printArrayM_1857S1451   
0A66   68 0A                  DW   $+2   
0A68   02                     DB   2   
0A69   03 61 62 63            .PSTR   "abc"   
0A6D                PRINTARRAYM_1857S1451:      
0A6D   7B                     DB   "{"   
0A6E   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AA5   7D                     DB   "}"   
0AA6   00                     DB   0   
0AA7                             ;*******************************************************************
0AA7                             ; implementations continued
0AA7                             ;*******************************************************************
0AA7                COLON:       
0AA7   03                     INC   bc   ; arg_list must ve immediately followed by {
0AA8   0A                     LD   a,(bc)   
0AA9   FE 3D                  CP   "="   ; := definition
0AAB   28 07                  JR   z,defineStart   
0AAD   0B                     DEC   bc   
0AAE   21 01 00               LD   hl,1   
0AB1   C3 01 10               JP   error   
0AB4                DEFINESTART:      
0AB4   E1                     POP   hl   ; discard variable value
0AB5   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
0AB8   22 F4 23               LD   (vDefine),hl   
0ABB   DD E9                  JP   (ix)   
0ABD                SEMICOLON:      
0ABD                DEFINEEND:      
0ABD   2A F4 23               LD   hl,(vDefine)   ; hl = define*
0AC0   7D                     LD   a,l   
0AC1   B4                     OR   h   
0AC2   28 0B                  JR   z,defineEnd1   
0AC4   11 00 00               LD   de,NUL   ; set vDefine=NUL
0AC7   ED 53 F4 23            LD   (vDefine),de   
0ACB   D1                     POP   de   ; de = value
0ACC   C3 81 0C               JP   assign1   
0ACF                DEFINEEND1:      
0ACF   DD E9                  JP   (ix)   
0AD1                             ; ~ bitwise invert
0AD1                TILDE:       
0AD1                INVERT:      
0AD1   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0AD2   7D                     LD   a,l   
0AD3   2F                     CPL      
0AD4   6F                     LD   l,a   
0AD5   7C                     LD   a,h   
0AD6   2F                     CPL      
0AD7   67                     LD   h,a   
0AD8   C3 E0 02               JP   add3   
0ADB                             ; $ hex                         ; 22
0ADB                DOLLAR:      
0ADB                HEXNUM:      
0ADB   21 00 00               LD   hl,0   ; Clear hl to accept the number
0ADE                HEXNUM1:      
0ADE   03                     INC   bc   
0ADF   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AE0   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AE2   28 02                  JR   z,hexnum2   ; no a decimal
0AE4   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AE6                HEXNUM2:      
0AE6   D6 30                  SUB   $30   ; form decimal digit
0AE8   DA 76 0B               JP   c,num2   
0AEB   FE 10                  CP   $0F+1   
0AED   D2 76 0B               JP   nc,num2   
0AF0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0AF1   29                     ADD   hl,hl   ; 4X
0AF2   29                     ADD   hl,hl   ; 8X
0AF3   29                     ADD   hl,hl   ; 16X
0AF4   85                     ADD   a,l   ; add into bottom of hl
0AF5   6F                     LD   l,a   
0AF6   18 E6                  JR   hexnum1   
0AF8                             ; ? if                            23
0AF8                             ; condition then else -- value
0AF8                QUESTION:      
0AF8                IF:          
0AF8   D1                     POP   de   ; de = else
0AF9   E1                     POP   hl   ; hl = then
0AFA   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AFB   7C                     LD   a,h   
0AFC   B5                     OR   l   
0AFD   E1                     POP   hl   ; hl = then
0AFE   CA A0 03               JP   z,go1   ; if z de = else
0B01   EB                     EX   de,hl   ; condition = false, de = then
0B02   C3 A0 03               JP   go1   
0B05                             ; string                        ;38
0B05                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B05                QUOTE:       
0B05                STRING:      
0B05   2A EC 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B08   E5                     PUSH   hl   ; save start of string
0B09   0A                     LD   a,(bc)   
0B0A   5F                     LD   e,a   ; e = matching terminator
0B0B   03                     INC   bc   ; point to next char
0B0C   18 03                  JR   string2   
0B0E                STRING1:      
0B0E   77                     LD   (hl),a   
0B0F   23                     INC   hl   ; increase count
0B10   03                     INC   bc   ; point to next char
0B11                STRING2:      
0B11   0A                     LD   a,(bc)   
0B12   BB                     CP   e   ; is it the string terminator
0B13   28 02                  JR   z,string3   
0B15   18 F7                  JR   string1   
0B17                STRING3:      
0B17   AF                     XOR   a   ; write NUL to terminate string
0B18   77                     LD   (hl),a   ; hl = end of string
0B19   23                     INC   hl   
0B1A   22 EC 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B1D   DD E9                  JP   (ix)   
0B1F                             ; %a .. %z                      43
0B1F                             ; -- value
0B1F                             ; returns value of arg
0B1F                PERCENT:      
0B1F                ARG:         
0B1F   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B22   FD 56 05               LD   d,(iy+5)   
0B25   EB                     EX   de,hl   
0B26   7D                     LD   a,l   ; arg_list* == null, skip
0B27   B4                     OR   h   
0B28   28 1A                  JR   z,arg0a   
0B2A   23                     INC   hl   ; a = num_args, hl = arg_list*
0B2B   7E                     LD   a,(hl)   
0B2C   23                     INC   hl   
0B2D   B7                     OR   a   
0B2E   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B30   5F                     LD   e,a   ; e = a = num_args
0B31   03                     INC   bc   ; a = next char = dollar_name
0B32   0A                     LD   a,(bc)   
0B33   C5                     PUSH   bc   ; save IP
0B34   43                     LD   b,e   ; b = e = num_args
0B35   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B38   FD 56 03               LD   d,(iy+3)   
0B3B                ARG0:        
0B3B   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B3C   1B                     DEC   de   
0B3D   BE                     CP   (hl)   
0B3E   28 09                  JR   z,arg1   
0B40   23                     INC   hl   ; hl = next arg_list*
0B41   10 F8                  DJNZ   arg0   
0B43   C1                     POP   bc   ; no match, restore IP
0B44                ARG0A:       
0B44   11 00 00               LD   de,0   ; return 0
0B47   18 08                  JR   arg1a   
0B49                ARG1:        
0B49   C1                     POP   bc   ; restore IP
0B4A   EB                     EX   de,hl   ; hl = arg*
0B4B   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0B4E   5E                     LD   e,(hl)   
0B4F   23                     INC   hl   
0B50   56                     LD   d,(hl)   ; de = arg
0B51                ARG1A:       
0B51   D5                     PUSH   de   ; push arg
0B52   DD E9                  JP   (ix)   
0B54                             ; 0..9 number                   37
0B54                NUM:         
0B54   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B57   0A                     LD   a,(bc)   ; Get numeral or -
0B58   FE 2D                  CP   "-"   
0B5A   20 01                  JR   nz,num0   
0B5C   03                     INC   bc   ; move to next char, no flags affected
0B5D                NUM0:        
0B5D   08                     EX   af,af'   ; save zero flag = 0 for later
0B5E                NUM1:        
0B5E   0A                     LD   a,(bc)   ; read digit
0B5F   D6 30                  SUB   "0"   ; less than 0?
0B61   38 13                  JR   c,num2   ; not a digit, exit loop
0B63   FE 0A                  CP   10   ; greater that 9?
0B65   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B67   03                     INC   bc   ; inc IP
0B68   54 5D                  LD   de,hl   ; multiply hl * 10
0B6A   29                     ADD   hl,hl   
0B6B   29                     ADD   hl,hl   
0B6C   19                     ADD   hl,de   
0B6D   29                     ADD   hl,hl   
0B6E   85                     ADD   a,l   ; add digit in a to hl
0B6F   6F                     LD   l,a   
0B70   3E 00                  LD   a,0   
0B72   8C                     ADC   a,h   
0B73   67                     LD   h,a   
0B74   18 E8                  JR   num1   
0B76                NUM2:        
0B76   0B                     DEC   bc   
0B77   08                     EX   af,af'   ; restore zero flag
0B78   20 07                  JR   nz,num3   
0B7A   EB                     EX   de,hl   ; negate the value of hl
0B7B   21 00 00               LD   hl,0   
0B7E   B7                     OR   a   ; jump to sub2
0B7F   ED 52                  SBC   hl,de   
0B81                NUM3:        
0B81   E5                     PUSH   hl   ; Put the number on the stack
0B82   DD E9                  JP   (ix)   ; and process the next character
0B84                             ; }                               58
0B84                RBRACE:      
0B84                BLOCKEND:      
0B84   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B87   FD 56 01               LD   d,(iy+1)   
0B8A   ED 53 04 24            LD   (vTemp1),de   
0B8E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B91   FD 56 07               LD   d,(iy+7)   
0B94   ED 53 06 24            LD   (vTemp2),de   
0B98   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0B9B   FD 56 03               LD   d,(iy+3)   
0B9E   EB                     EX   de,hl   
0B9F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BA2   FD 56 01               LD   d,(iy+1)   
0BA5   13                     INC   de   ; for carry flag <=
0BA6   B7                     OR   a   
0BA7   ED 52                  SBC   hl,de   
0BA9   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BAB   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BAD   FD 5D                  LD   e,iyl   
0BAF   21 08 00               LD   hl,8   
0BB2   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BB3   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BB4   18 0C                  JR   blockEnd2   
0BB6                BLOCKEND1:      ; same scope
0BB6   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BB9   FD 56 03               LD   d,(iy+3)   
0BBC   EB                     EX   de,hl   
0BBD   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BBF   FD 5D                  LD   e,iyl   
0BC1   EB                     EX   de,hl   
0BC2                BLOCKEND2:      
0BC2   44 4D                  LD   bc,hl   ; bc = hl = BP
0BC4   B7                     OR   a   ; hl = BP - SP = count
0BC5   ED 72                  SBC   hl,sp   
0BC7   7D                     LD   a,l   
0BC8   B4                     OR   h   
0BC9   28 09                  JR   z,blockEnd3   
0BCB   C5                     PUSH   bc   ; bc = count, hl = BP
0BCC   44 4D                  LD   bc,hl   
0BCE   E1                     POP   hl   
0BCF   2B                     DEC   hl   ; hl = BP-1
0BD0   1B                     DEC   de   ; de = args*-1
0BD1   ED B8                  LDDR      
0BD3   13                     INC   de   
0BD4                BLOCKEND3:      
0BD4   EB                     EX   de,hl   ; sp = de = new tos*
0BD5   F9                     LD   sp,hl   
0BD6   ED 4B 06 24            LD   bc,(vTemp2)   
0BDA   FD 2A 04 24            LD   iy,(vTemp1)   
0BDE   3A F2 23               LD   a,(vRecur)   ; a = recur vector
0BE1   B7                     OR   a   
0BE2   20 02                  JR   nz,blockEnd4   
0BE4   DD E9                  JP   (ix)   
0BE6                BLOCKEND4:      
0BE6   3E 00                  LD   a,0   ; clear recur vector
0BE8   32 F2 23               LD   (vRecur),a   
0BEB   C3 A0 03               JP   go1   ; execute de
0BEE                GOBLOCK:      
0BEE   ED 53 04 24            LD   (vTemp1),de   ; save de
0BF2   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0BF5   FD 54                  LD   d,iyh   
0BF7   FD 5D                  LD   e,iyl   
0BF9   B7                     OR   a   ; if stack* == BP then this is the root_scope
0BFA   ED 52                  SBC   hl,de   
0BFC   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C00   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C01   B4                     OR   h   
0C02   3E 00                  LD   a,0   
0C04   28 6A                  JR   z,goFunc8   
0C06   C5                     PUSH   bc   ; push IP
0C07   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C0A   FD 46 05               LD   b,(iy+5)   
0C0D   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C10   FD 66 03               LD   h,(iy+3)   
0C13                GOBLOCK2:      
0C13   C5                     PUSH   bc   ; arg_list*
0C14   E5                     PUSH   hl   ; first_arg*
0C15   FD E5                  PUSH   iy   ; push BP
0C17   FD 21 00 00            LD   iy,0   ; BP = SP
0C1B   FD 39                  ADD   iy,sp   
0C1D                GOBLOCK3:      
0C1D   42 4B                  LD   bc,de   ; bc = de = block*-1
0C1F   DD E9                  JP   (ix)   
0C21                GOFUNC:      ; execute func
0C21   EB                     EX   de,hl   ; hl = func*
0C22   5E                     LD   e,(hl)   ; de = partial_array*
0C23   23                     INC   hl   
0C24   56                     LD   d,(hl)   
0C25   23                     INC   hl   
0C26   7B                     LD   a,e   ; if partial_array* == null skip
0C27   B2                     OR   d   
0C28   28 21                  JR   z,goFunc3   
0C2A   ED 43 04 24            LD   (vTemp1),bc   
0C2E   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C31   EB                     EX   de,hl   ; hl = partial_array*
0C32   2B                     DEC   hl   ; bc = count
0C33   46                     LD   b,(hl)   
0C34   2B                     DEC   hl   
0C35   4E                     LD   c,(hl)   
0C36   23                     INC   hl   ; hl = array data*
0C37   23                     INC   hl   
0C38   18 06                  JR   goFunc2   ; push each item on stack
0C3A                GOFUNC1:      
0C3A   5E                     LD   e,(hl)   ; de = partial item
0C3B   23                     INC   hl   
0C3C   56                     LD   d,(hl)   
0C3D   23                     INC   hl   
0C3E   D5                     PUSH   de   ; push on stack
0C3F   0B                     DEC   bc   
0C40                GOFUNC2:      
0C40   79                     LD   a,c   ; if count != 0 then loop
0C41   B0                     OR   b   
0C42   20 F6                  JR   nz,goFunc1   
0C44   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C48   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C4B                GOFUNC3:      
0C4B   5E                     LD   e,(hl)   ; de = block*
0C4C   23                     INC   hl   
0C4D   56                     LD   d,(hl)   
0C4E   23                     INC   hl   
0C4F   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C53   5E                     LD   e,(hl)   ; de = arg_list*
0C54   23                     INC   hl   
0C55   56                     LD   d,(hl)   
0C56   23                     INC   hl   
0C57   EB                     EX   de,hl   ; hl = arg_list*
0C58   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C5C   7D                     LD   a,l   ; if arg_list* == null a = 0
0C5D   B4                     OR   h   
0C5E   20 03                  JR   nz,goFunc4   
0C60   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C61   18 0D                  JR   goFunc8   
0C63                GOFUNC4:      ; allocate locals
0C63   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C64   18 03                  JR   goFunc6   
0C66                GOFUNC5:      ; loop
0C66   3B                     DEC   sp   
0C67   3B                     DEC   sp   
0C68   3D                     DEC   a   
0C69                GOFUNC6:      
0C69   B7                     OR   a   
0C6A   20 FA                  JR   nz,goFunc5   ; end loop
0C6C                GOFUNC7:      
0C6C   23                     INC   hl   ; a = num_args* x 2
0C6D   7E                     LD   a,(hl)   
0C6E   2B                     DEC   hl   
0C6F   87                     ADD   a,a   ; a *= 2
0C70                GOFUNC8:      
0C70   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0C71   44 4D                  LD   bc,hl   
0C73   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C76   85                     ADD   a,l   
0C77   6F                     LD   l,a   
0C78   39                     ADD   hl,sp   
0C79   18 98                  JR   goBlock2   
0C7B                             ; =                              21
0C7B                             ; value _oldValue --            ; uses address in vPointer 15
0C7B                ASSIGN:      
0C7B   E1                     POP   hl   ; discard last accessed value
0C7C   E1                     POP   hl   ; hl = new value
0C7D                ASSIGN0:      
0C7D   EB                     EX   de,hl   ; de = new value
0C7E   2A F8 23               LD   hl,(vPointer)   
0C81                ASSIGN1:      ; entry point from defineEnd
0C81   73                     LD   (hl),e   
0C82   3A EE 23               LD   a,(vDataWidth)   
0C85   3D                     DEC   a   ; is it byte?
0C86   28 02                  JR   z,assign2   
0C88   23                     INC   hl   
0C89   72                     LD   (hl),d   
0C8A                ASSIGN2:      
0C8A   DD E9                  JP   (ix)   
0C8C                             ; hl = value1, de = value2
0C8C                             ; hl = result
0C8C                EQUALS:      
0C8C   B7                     OR   a   ; reset the carry flag
0C8D   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0C8F   28 16                  JR   z,true1   
0C91   18 1A                  JR   false1   
0C93                NOTEQUALS:      
0C93   B7                     OR   a   ; reset the carry flag
0C94   ED 52                  SBC   hl,de   
0C96   20 0F                  JR   nz,true1   
0C98   18 13                  JR   false1   
0C9A                             ; hl = value1 de = value2
0C9A                             ; hl = result
0C9A                LESSTHANEQ:      
0C9A   B7                     OR   a   
0C9B   ED 52                  SBC   hl,de   
0C9D   18 05                  JR   lessthan1   
0C9F                             ; hl = value1 de = value2
0C9F                             ; hl = result
0C9F                LESSTHAN:      
0C9F   B7                     OR   a   
0CA0   ED 52                  SBC   hl,de   
0CA2   28 09                  JR   z,false1   
0CA4                LESSTHAN1:      
0CA4   FA AD 0C               JP   m,false1   
0CA7                TRUE1:       
0CA7   21 FF FF               LD   hl,TRUE   
0CAA   E5                     PUSH   hl   
0CAB   DD E9                  JP   (ix)   
0CAD                NULL1:       
0CAD                FALSE1:      
0CAD   21 00 00               LD   hl,FALSE   
0CB0   E5                     PUSH   hl   
0CB1   DD E9                  JP   (ix)   
0CB3                SPREAD:      
0CB3   E1                     POP   hl   ; hl = array*
0CB4   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0CB8   2B                     DEC   hl   ; bc = length
0CB9   46                     LD   b,(hl)   
0CBA   2B                     DEC   hl   
0CBB   4E                     LD   c,(hl)   
0CBC   23                     INC   hl   ; move back to array 0
0CBD   23                     INC   hl   
0CBE   18 0D                  JR   spread3   
0CC0                SPREAD1:      
0CC0   5E                     LD   e,(hl)   ; e = lsb data at hl
0CC1   23                     INC   hl   
0CC2   3A EE 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CC5   57                     LD   d,a   
0CC6   15                     DEC   d   
0CC7   28 02                  JR   z,spread2   
0CC9   56                     LD   d,(hl)   ; d = msb data at hl
0CCA   23                     INC   hl   
0CCB                SPREAD2:      
0CCB   D5                     PUSH   de   ; return de
0CCC   0B                     DEC   bc   ; count--
0CCD                SPREAD3:      
0CCD   79                     LD   a,c   ; exit loop if bc == 0
0CCE   B0                     OR   b   
0CCF   20 EF                  JR   nz,spread1   
0CD1   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0CD5   DD E9                  JP   (ix)   
0CD7                             ; shiftLeft
0CD7                             ; value count <<
0CD7                             ; count variable <<=
0CD7                SHIFTLEFT:      
0CD7   E1                     POP   hl   ; de = arg_a, hl = arg_b
0CD8   D1                     POP   de   
0CD9   03                     INC   bc   
0CDA   0A                     LD   a,(bc)   
0CDB   FE 3D                  CP   "="   
0CDD   28 02                  JR   z,shiftLeft2   
0CDF   0B                     DEC   bc   
0CE0   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0CE1                SHIFTLEFT2:      
0CE1   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0CE5   43                     LD   b,e   ; b = loop counter
0CE6   04                     INC   b   ; test for counter=0 case
0CE7   18 01                  JR   shiftLeft4   
0CE9                SHIFTLEFT3:      
0CE9   29                     ADD   hl,hl   ; left shift hl
0CEA                SHIFTLEFT4:      
0CEA   10 FD                  DJNZ   shiftLeft3   
0CEC   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0CF0   C3 A5 02               JP   sub3   
0CF3                             ; shiftRight
0CF3                             ; value count >>
0CF3                             ; count variable >>=
0CF3                SHIFTRIGHT:      
0CF3   E1                     POP   hl   ; de = arg_a, hl = arg_b
0CF4   D1                     POP   de   
0CF5   03                     INC   bc   
0CF6   0A                     LD   a,(bc)   
0CF7   FE 3D                  CP   "="   
0CF9   28 02                  JR   z,shiftRight2   
0CFB   0B                     DEC   bc   
0CFC   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0CFD                SHIFTRIGHT2:      
0CFD   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D01   43                     LD   b,e   ; b = loop counter
0D02   04                     INC   b   ; test for counter=0 case
0D03   18 04                  JR   shiftRight4   
0D05                SHIFTRIGHT3:      
0D05   CB 3C                  SRL   h   ; right shift hl
0D07   CB 1D                  RR   l   
0D09                SHIFTRIGHT4:      
0D09   10 FA                  DJNZ   shiftRight3   
0D0B   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D0F   C3 A5 02               JP   sub3   
0D12                             ; division subroutine.
0D12                             ; bc: divisor, de: dividend, hl: remainder
0D12                DIVIDE:      
0D12   21 00 00               LD   hl,0   ; zero the remainder
0D15   3E 10                  LD   a,16   ; loop counter
0D17                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D17   CB 21                  SLA   c   
0D19   CB 10                  RL   b   
0D1B   ED 6A                  ADC   hl,hl   
0D1D   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D1F   38 03                  JR   c,divide2   
0D21   0C                     INC   c   
0D22   18 01                  JR   divide3   
0D24                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D24   19                     ADD   hl,de   
0D25                DIVIDE3:      
0D25   3D                     DEC   a   
0D26   20 EF                  JR   nz,divide1   
0D28   50 59                  LD   de,bc   ; result from bc to de
0D2A   C9                     RET      
0D2B                DOTNEXT:      
0D2B   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0D2E   3C                     INC   a   
0D2F   20 02                  JR   nz,dotNext1   
0D31   DD E9                  JP   (ix)   
0D33                DOTNEXT1:      
0D33   11 00 22               LD   de,BUFFER   
0D36   2A E8 23               LD   hl,(vBufPtr)   
0D39   36 00                  LD   (hl),0   ; store NUL at end of string
0D3B   ED 53 E8 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D3F   EB                     EX   de,hl   ; hl = BUFFER
0D40   CD B9 0E               CALL   putstr   
0D43   DD E9                  JP   (ix)   
0D45                             ; arg_list - parses arg_list e.g. ab:c
0D45                             ; -- arg_list*
0D45                PARSEARGS:      
0D45   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D48   2A EC 23               LD   hl,(vHeapPtr)   ; hl = heap*
0D4B   E5                     PUSH   hl   ; save start of arg_list
0D4C   23                     INC   hl   ; skip length fields to start of string
0D4D   23                     INC   hl   
0D4E   03                     INC   bc   ; point to next char
0D4F                PARSEARGS1:      
0D4F   0A                     LD   a,(bc)   
0D50   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D52   20 03                  JR   nz,parseArgs1a   
0D54   14                     INC   d   ; non zero value local count acts as flag
0D55   18 10                  JR   parseArgs3   
0D57                PARSEARGS1A:      
0D57   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D59   38 0F                  JR   c,parseArgs4   
0D5B   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D5D   30 0B                  JR   nc,parseArgs4   
0D5F                PARSEARGS2:      
0D5F   77                     LD   (hl),a   
0D60   23                     INC   hl   
0D61   1C                     INC   e   ; increase arg count
0D62   AF                     XOR   a   
0D63   B2                     OR   d   
0D64   28 01                  JR   z,parseArgs3   
0D66   14                     INC   d   ; if d > 0 increase local count
0D67                PARSEARGS3:      
0D67   03                     INC   bc   ; point to next char
0D68   18 E5                  JR   parseArgs1   
0D6A                PARSEARGS4:      
0D6A   0B                     DEC   bc   
0D6B   AF                     XOR   a   
0D6C   B2                     OR   d   
0D6D   28 01                  JR   z,parseArgs5   
0D6F   15                     DEC   d   ; remove initial inc
0D70                PARSEARGS5:      
0D70   23                     INC   hl   
0D71   22 EC 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D74   E1                     POP   hl   ; hl = start of arg_list
0D75   72                     LD   (hl),d   ; write number of locals at start - 1
0D76   23                     INC   hl   
0D77   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D78   2B                     DEC   hl   
0D79   E3                     EX   (sp),hl   
0D7A   E9                     JP   (hl)   
0D7B                             ; create block: parses block e.g. 00bbIC4uLi4g
0D7B                             ; -- block*
0D7B                PARSEBLOCK:      
0D7B   C5                     PUSH   bc   ; return pointer to first { of block
0D7C   03                     INC   bc   
0D7D   16 01                  LD   d,1   ; nesting: count first parenthesis
0D7F                PARSEBLOCK1:      ; Skip to end of definition
0D7F   0A                     LD   a,(bc)   ; Get the next character
0D80   03                     INC   bc   ; Point to next character
0D81   FE 21                  CP   " " + 1   ; ignore whitespace
0D83   38 FA                  JR   c,parseBlock1   
0D85   FE 29                  CP   ")"   
0D87   28 2D                  JR   z,parseBlock4   
0D89   FE 7D                  CP   "}"   
0D8B   28 29                  JR   z,parseBlock4   
0D8D   FE 5D                  CP   "]"   
0D8F   28 25                  JR   z,parseBlock4   
0D91   FE 28                  CP   "("   
0D93   28 16                  JR   z,parseBlock2   
0D95   FE 7B                  CP   "{"   
0D97   28 12                  JR   z,parseBlock2   
0D99   FE 5B                  CP   "["   
0D9B   28 0E                  JR   z,parseBlock2   
0D9D   FE 27                  CP   "'"   
0D9F   28 0D                  JR   z,parseBlock3   
0DA1   FE 60                  CP   "`"   
0DA3   28 09                  JR   z,parseBlock3   
0DA5   FE 22                  CP   DQ   
0DA7   28 05                  JR   z,parseBlock3   
0DA9   18 D4                  JR   parseBlock1   
0DAB                PARSEBLOCK2:      
0DAB   14                     INC   d   
0DAC   18 D1                  JR   parseBlock1   
0DAE                PARSEBLOCK3:      
0DAE   3E 80                  LD   a,$80   
0DB0   AA                     XOR   d   
0DB1   57                     LD   d,a   
0DB2   20 CB                  JR   nz,parseBlock1   
0DB4   18 03                  JR   parseBlock5   
0DB6                PARSEBLOCK4:      
0DB6   15                     DEC   d   
0DB7   20 C6                  JR   nz,parseBlock1   ; get the next element
0DB9                PARSEBLOCK5:      
0DB9   60 69                  LD   hl,bc   ; hl = IP
0DBB   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0DBE   B7                     OR   a   ; IP - HEAP
0DBF   ED 52                  SBC   hl,de   
0DC1   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0DC3   28 1C                  JR   z,parseBlock6   
0DC5   60 69                  LD   hl,bc   ; hl = IP
0DC7   D1                     POP   de   ; de = block*
0DC8   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DCC   B7                     OR   a   ; bc = size
0DCD   ED 52                  SBC   hl,de   
0DCF   44 4D                  LD   bc,hl   
0DD1   EB                     EX   de,hl   ; hl = block* de = heap*
0DD2   ED 5B EC 23            LD   de,(vHeapPtr)   
0DD6   D5                     PUSH   de   ; return hblock*
0DD7   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0DD9   ED 53 EC 23            LD   (vHeapPtr),de   ; heap* += size
0DDD   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DE1                PARSEBLOCK6:      
0DE1   0B                     DEC   bc   ; balanced, exit
0DE2   E1                     POP   hl   ; hl = block*
0DE3   E3                     EX   (sp),hl   ; return to caller
0DE4   E9                     JP   (hl)   
0DE5                             ; create function
0DE5                             ; arg_list* block* -- func*
0DE5                CREATEFUNC:      
0DE5   E1                     POP   hl   ; save retrn address
0DE6   22 08 24               LD   (vTemp3),hl   
0DE9   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DED   E1                     POP   hl   ; hl = block*
0DEE   22 06 24               LD   (vTemp2),hl   ; save block*
0DF1   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0DF4   FD 56 05               LD   d,(iy+5)   
0DF7   7B                     LD   a,e   ; if arg_list == null then make a func
0DF8   B2                     OR   d   
0DF9   20 09                  JR   nz,createFunc0   
0DFB   21 00 00               LD   hl,0   ; partial_array = null
0DFE   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = compile*
0E02   18 65                  JR   createFunc5   
0E04                CREATEFUNC0:      
0E04   E1                     POP   hl   ; hl = inner_arg_list*
0E05   E5                     PUSH   hl   ; save inner_arg_list
0E06   ED 5B EC 23            LD   de,(vHeapPtr)   ; de = compile*
0E0A   7E                     LD   a,(hl)   ; compile inner_num_locals
0E0B   4F                     LD   c,a   ; b = inner_num_locals
0E0C   12                     LD   (de),a   
0E0D   23                     INC   hl   
0E0E   13                     INC   de   
0E0F   7E                     LD   a,(hl)   ; compile inner_length
0E10   12                     LD   (de),a   
0E11   91                     SUB   c   ; a = inner_num args
0E12   23                     INC   hl   
0E13   13                     INC   de   
0E14   B7                     OR   a   ; compile args if inner_length > 0
0E15   28 05                  JR   z,createFunc1   
0E17   4F                     LD   c,a   ; bc = a
0E18   06 00                  LD   b,0   
0E1A   ED B0                  LDIR      
0E1C                CREATEFUNC1:      
0E1C   EB                     EX   de,hl   ; hl = outer_arg_list
0E1D   FD 5E 04               LD   e,(iy+4)   
0E20   FD 56 05               LD   d,(iy+5)   
0E23   EB                     EX   de,hl   
0E24   23                     INC   hl   ; a = outer_length
0E25   7E                     LD   a,(hl)   
0E26   23                     INC   hl   
0E27   B7                     OR   a   
0E28   28 05                  JR   z,createFunc2   
0E2A   4F                     LD   c,a   
0E2B   06 00                  LD   b,0   
0E2D   ED B0                  LDIR      ; append outer_args
0E2F                CREATEFUNC2:      ; a = outer_length
0E2F   47                     LD   b,a   ; b = a = outer_length
0E30   2A EC 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E33   23                     INC   hl   
0E34   7E                     LD   a,(hl)   ; add outer_length to new length
0E35   80                     ADD   a,b   
0E36   77                     LD   (hl),a   
0E37   2B                     DEC   hl   
0E38   78                     LD   a,b   ; save outer_length in a'
0E39   08                     EX   af,af'   
0E3A   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E3B   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E3C   B7                     OR   a   
0E3D   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E3F   4F                     LD   c,a   ; c = inner_num_locals
0E40   06 00                  LD   b,0   ; bc = inner_num_locals
0E42   23                     INC   hl   ; a = inner_length
0E43   7E                     LD   a,(hl)   
0E44   91                     SUB   c   ; a = inner_num_args
0E45   23                     INC   hl   ; hl = inner_arg_chars
0E46   85                     ADD   a,l   ; hl += a
0E47   6F                     LD   l,a   
0E48   3E 00                  LD   a,0   
0E4A   84                     ADD   a,h   
0E4B   67                     LD   h,a   
0E4C   ED B0                  LDIR      ; append inner_locals
0E4E                CREATEFUNC2A:      
0E4E   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E4F   12                     LD   (de),a   ; compile partial_array length field
0E50   13                     INC   de   
0E51   AF                     XOR   a   
0E52   12                     LD   (de),a   
0E53   13                     INC   de   
0E54   D5                     PUSH   de   ; push partial_array*
0E55   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E56   FD 5E 02               LD   e,(iy+2)   
0E59   FD 56 03               LD   d,(iy+3)   
0E5C   EB                     EX   de,hl   
0E5D                CREATEFUNC3:      
0E5D   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E5E   4E                     LD   c,(hl)   
0E5F   2B                     DEC   hl   
0E60   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E61   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E62   13                     INC   de   
0E63   79                     LD   a,c   
0E64   12                     LD   (de),a   
0E65   13                     INC   de   
0E66   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E68                CREATEFUNC4:      
0E68   E1                     POP   hl   ; hl = partial_array*
0E69                CREATEFUNC5:      
0E69   C1                     POP   bc   ; bc = new_arg_list*
0E6A   D5                     PUSH   de   ; return new func*
0E6B   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0E6C   73                     LD   (hl),e   ; compile partial_array* to func
0E6D   23                     INC   hl   
0E6E   72                     LD   (hl),d   
0E6F   23                     INC   hl   
0E70   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0E74   73                     LD   (hl),e   ; compile block* to func
0E75   23                     INC   hl   
0E76   72                     LD   (hl),d   
0E77   23                     INC   hl   
0E78   71                     LD   (hl),c   ; compile new_arg_list* to func
0E79   23                     INC   hl   
0E7A   70                     LD   (hl),b   
0E7B   23                     INC   hl   
0E7C   22 EC 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E7F   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E83   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E86   E9                     JP   (hl)   
0E87                             ;*******************************************************************
0E87                             ; general routines
0E87                             ;*******************************************************************
0E87                             ; followed by a table
0E87                             ; indexed on the 0-25 lowercase letter
0E87                             ; db lsb(addr)
0E87                             ; the final item index 26 matches any other char
0E87                LOWERCASETABLE:      
0E87   03                     INC   bc   
0E88   0A                     LD   a,(bc)   
0E89   FE 7B                  CP   "z"+1   
0E8B   30 0B                  JR   nc,lowerCaseTable2   
0E8D   D6 61                  SUB   "a"   
0E8F   38 07                  JR   c,lowerCaseTable2   
0E91                LOWERCASETABLE1:      
0E91   E1                     POP   hl   
0E92   85                     ADD   a,l   
0E93   6F                     LD   l,a   
0E94   6E                     LD   l,(hl)   ; must have the same msb as the table
0E95   C3 9E 0E               JP   commandTable1   
0E98                LOWERCASETABLE2:      
0E98   3E 1A                  LD   a,26   
0E9A   0B                     DEC   bc   
0E9B   18 F4                  JR   lowerCaseTable1   
0E9D                             ; followed by a table
0E9D                             ; db char
0E9D                             ; dw addr
0E9D                             ; the final item must have char == NUL
0E9D                COMMANDTABLE:      
0E9D   E1                     POP   hl   
0E9E                COMMANDTABLE1:      
0E9E   03                     INC   bc   
0E9F                COMMANDTABLE2:      
0E9F   AF                     XOR   a   
0EA0   BE                     CP   (hl)   
0EA1   20 03                  JR   nz,commandTable3   
0EA3   0B                     DEC   bc   
0EA4   18 09                  JR   commandTable4   
0EA6                COMMANDTABLE3:      
0EA6   0A                     LD   a,(bc)   
0EA7   BE                     CP   (hl)   
0EA8   28 05                  JR   z,commandTable4   
0EAA   23                     INC   hl   
0EAB   23                     INC   hl   
0EAC   23                     INC   hl   
0EAD   18 F0                  JR   commandTable2   
0EAF                COMMANDTABLE4:      
0EAF   23                     INC   hl   
0EB0   5E                     LD   e,(hl)   
0EB1   23                     INC   hl   
0EB2   56                     LD   d,(hl)   
0EB3   EB                     EX   de,hl   
0EB4   E9                     JP   (hl)   
0EB5                PUTSTR0:      
0EB5   CD 85 00               CALL   putchar   
0EB8   23                     INC   hl   
0EB9                PUTSTR:      
0EB9   7E                     LD   a,(hl)   
0EBA   B7                     OR   a   
0EBB   20 F8                  JR   nz,putstr0   
0EBD   C9                     RET      
0EBE                             ; **************************************************************************
0EBE                             ; calculate nesting value
0EBE                             ; a is char to be tested,
0EBE                             ; e is the nesting value (initially 0)
0EBE                             ; e is increased by ( and [
0EBE                             ; e is decreased by ) and ]
0EBE                             ; e has its bit 7 toggled by `
0EBE                             ; limited to 127 levels
0EBE                             ; **************************************************************************
0EBE                NESTING:      
0EBE   FE 22                  CP   DQ   ; quote char
0EC0   28 06                  JR   z,nesting0   
0EC2   FE 60                  CP   "`"   ; quote char
0EC4   28 02                  JR   z,nesting0   
0EC6   18 0A                  JR   nesting1   
0EC8                NESTING0:      
0EC8   CB 7B                  BIT   7,e   
0ECA   28 03                  JR   z,nesting1a   
0ECC   CB BB                  RES   7,e   
0ECE   C9                     RET      
0ECF                NESTING1A:      
0ECF   CB FB                  SET   7,e   
0ED1   C9                     RET      
0ED2                NESTING1:      
0ED2   CB 7B                  BIT   7,e   
0ED4   C0                     RET   nz   
0ED5   FE 7B                  CP   "{"   
0ED7   28 08                  JR   z,nesting2   
0ED9   FE 5B                  CP   "["   
0EDB   28 04                  JR   z,nesting2   
0EDD   FE 28                  CP   "("   
0EDF   20 02                  JR   nz,nesting3   
0EE1                NESTING2:      
0EE1   1C                     INC   e   
0EE2   C9                     RET      
0EE3                NESTING3:      
0EE3   FE 7D                  CP   "}"   
0EE5   28 07                  JR   z,nesting4   
0EE7   FE 5D                  CP   "]"   
0EE9   28 03                  JR   z,nesting4   
0EEB   FE 29                  CP   ")"   
0EED   C0                     RET   nz   
0EEE                NESTING4:      
0EEE   1D                     DEC   e   
0EEF   C9                     RET      
0EF0                PROMPT:      
0EF0   CD 00 0F               CALL   printStr   
0EF3   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0EF8   C9                     RET      
0EF9                CRLF:        
0EF9   CD 00 0F               CALL   printStr   
0EFC   0D 0A 00               .CSTR   "\r\n"   
0EFF   C9                     RET      
0F00                             ; prints a null teminated string
0F00                             ; the string should be immediately following the call
0F00                PRINTSTR:      
0F00   E3                     EX   (sp),hl   ; swap			
0F01   CD B9 0E               CALL   putstr   
0F04   23                     INC   hl   ; inc past NUL
0F05   E3                     EX   (sp),hl   ; put it back	
0F06   C9                     RET      
0F07                INIT:        
0F07   21 F0 01               LD   hl,titleStr   
0F0A   11 0E 24               LD   de,titleBuf   
0F0D   06 14                  LD   b,20   
0F0F                INIT1:       
0F0F   1A                     LD   a,(de)   
0F10   BE                     CP   (hl)   
0F11   20 17                  JR   nz,coldBoot0   
0F13   13                     INC   de   
0F14   23                     INC   hl   
0F15   10 F8                  DJNZ   init1   
0F17                WARMINIT:      
0F17   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0F1B   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0F1F   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0F23   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0F27   C3 61 0F               JP   start1   
0F2A                COLDBOOT0:      
0F2A   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0F2D   11 0E 24               LD   de,titleBuf   
0F30   06 14                  LD   b,20   
0F32   ED B0                  LDIR      
0F34                COLDINIT:      
0F34   21 DE 01               LD   hl,isysVars   
0F37   11 E6 23               LD   de,sysVars   
0F3A   01 12 00               LD   bc,9 * 2   
0F3D   ED B0                  LDIR      
0F3F   21 00 23               LD   hl,vars   ; 52 vars LO HI
0F42   06 34                  LD   b,26*2   
0F44   AF                     XOR   a   
0F45                COLDBOOT1:      
0F45   77                     LD   (hl),a   
0F46   23                     INC   hl   
0F47   10 FC                  DJNZ   coldBoot1   
0F49   DD 2A EA 23            LD   ix,(vNext)   
0F4D   FD 21 00 21            LD   iy,STACK   
0F51   C9                     RET      
0F52                COLDSTART:      
0F52   31 00 21               LD   sp,STACK   
0F55   CD 2A 0F               CALL   coldBoot0   
0F58   C3 61 0F               JP   start1   
0F5B                START:       
0F5B   31 00 21               LD   sp,STACK   ; start Monty
0F5E   CD 07 0F               CALL   init   ; setups
0F61                START1:      
0F61   21 0E 24               LD   hl,titleBuf   
0F64   CD B9 0E               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0F67                INTERPRET:      
0F67   CD F0 0E               CALL   prompt   
0F6A   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F6D   21 00 21               LD   hl,TIB   
0F70   22 E6 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F73                INTERPRET2:      ; calculate nesting
0F73   1E 00                  LD   e,0   ; initilize nesting value
0F75   C5                     PUSH   bc   ; save offset into TIB,
0F76                             ; bc is also the count of chars in TIB
0F76   21 00 21               LD   hl,TIB   ; hl is start of TIB
0F79   18 06                  JR   interpret4   
0F7B                INTERPRET3:      
0F7B   7E                     LD   a,(hl)   ; a = char in TIB
0F7C   23                     INC   hl   ; inc pointer into TIB
0F7D   0B                     DEC   bc   ; dec count of chars in TIB
0F7E   CD BE 0E               CALL   nesting   ; update nesting value
0F81                INTERPRET4:      
0F81   79                     LD   a,c   ; is count zero?
0F82   B0                     OR   b   
0F83   20 F6                  JR   nz,interpret3   ; if not loop
0F85   C1                     POP   bc   ; restore offset into TIB
0F86                INTERPRET5:      
0F86   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F89   FE 20                  CP   $20   ; compare to space
0F8B   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F8D   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F8F   28 31                  JR   z,interpret8   
0F91   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F93   28 1A                  JR   z,interpret7   ; if anything else its macro/control
0F95   FE 08                  CP   CTRL_H   
0F97   CA 13 10               JP   z,backSpace_   
0F9A   FE 0A                  CP   CTRL_J   
0F9C   CA 23 10               JP   z,reEdit_   
0F9F                INTERPRET5A:      
0F9F   18 D2                  JR   interpret2   
0FA1                INTERPRET6:      
0FA1   21 00 21               LD   hl,TIB   
0FA4   09                     ADD   hl,bc   
0FA5   77                     LD   (hl),a   ; store the character in textbuf
0FA6   03                     INC   bc   
0FA7   CD 85 00               CALL   putchar   ; echo character to screen
0FAA   CD BE 0E               CALL   nesting   
0FAD   18 D7                  JR   interpret5   ; wait for next character
0FAF                INTERPRET7:      
0FAF   21 00 21               LD   hl,TIB   
0FB2   09                     ADD   hl,bc   
0FB3   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0FB5   23                     INC   hl   
0FB6   36 0A                  LD   (hl),"\n"   
0FB8   23                     INC   hl   
0FB9   03                     INC   bc   
0FBA   03                     INC   bc   
0FBB   CD F9 0E               CALL   crlf   ; echo character to screen
0FBE   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0FBF   B7                     OR   a   
0FC0   20 C4                  JR   nz,interpret5   
0FC2                INTERPRET8:      
0FC2   21 00 21               LD   hl,TIB   
0FC5   09                     ADD   hl,bc   
0FC6   22 E6 23               LD   (vTIBPtr),hl   
0FC9   01 00 21               LD   bc,TIB   
0FCC   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0FD0   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0FD4   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0FD8   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0FDC   0B                     DEC   bc   
0FDD                NEXT:        
0FDD   03                     INC   bc   ; Increment the IP
0FDE   0A                     LD   a,(bc)   ; Get the next character and dispatch
0FDF   FE 20                  CP   " "   ; whitespace?
0FE1   28 FA                  JR   z,next   ; space? ignore
0FE3   38 0D                  JR   c,next1   
0FE5   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0FE7   6F                     LD   l,a   ; index into table
0FE8   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0FEA   6E                     LD   l,(hl)   ; get low jump address
0FEB   24                     INC   h   ; page 2
0FEC   FE BA                  CP   "Z" - "!" + 1 + $80   
0FEE   38 01                  JR   c,next0   
0FF0   24                     INC   h   ; page 3
0FF1                NEXT0:       
0FF1   E9                     JP   (hl)   ; Jump to routine
0FF2                NEXT1:       
0FF2   FE 00                  CP   NUL   ; end of input string?
0FF4   28 03                  JR   z,exit   
0FF6   C3 67 0F               JP   interpret   ; no, other whitespace, macros?
0FF9                EXIT:        
0FF9   03                     INC   bc   
0FFA   60 69                  LD   hl,bc   
0FFC   E9                     JP   (hl)   
0FFD                RUN:         
0FFD   C1                     POP   bc   
0FFE   0B                     DEC   bc   
0FFF   DD E9                  JP   (ix)   
1001                ERROR:       
1001   E5                     PUSH   hl   
1002   CD FD 0F               CALL   run   
1005   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1010   C3 67 0F               JP   interpret   
1013                BACKSPACE_:      
1013   79                     LD   a,c   
1014   B0                     OR   b   
1015   CA 73 0F               JP   z,interpret2   
1018   0B                     DEC   bc   
1019   CD 00 0F               CALL   printStr   
101C   08 20 08 00            .CSTR   "\b \b"   
1020   C3 73 0F               JP   interpret2   
1023                REEDIT_:      
1023   CD 00 0F               CALL   printStr   
1026   0D 3E 20 00            .CSTR   "\r> "   
102A   21 00 21               LD   hl,TIB   
102D   18 04                  JR   reEdit1   
102F                REEDIT0:      
102F   CD 85 00               CALL   putchar   
1032   23                     INC   hl   
1033                REEDIT1:      
1033   7E                     LD   a,(hl)   
1034   FE 0D                  CP   "\r"   
1036   20 F7                  JR   nz,reEdit0   
1038   11 00 21               LD   de,TIB   
103B   B7                     OR   a   
103C   ED 52                  SBC   hl,de   
103E   44 4D                  LD   bc,hl   
1040   C3 73 0F               JP   interpret2   
1043                F1:          
1043                F2:          
1043                F3:          
1043                F4:          
1043                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VTIBPTR:   DS   2   ; 
23E8                VBUFPTR:   DS   2   ; 
23EA                VNEXT:    DS   2   ; 
23EC                VHEAPPTR:   DS   2   ; 
23EE                VDATAWIDTH:   DS   1   ; 
23EF                          DS   1   
23F0                VNUMBASE:   DS   1   ; 
23F1                          DS   1   
23F2                VRECUR:   DS   1   ; 
23F3                          DS   1   
23F4                VDEFINE:   DS   1   ; 
23F5                          DS   1   
23F6                VSTRMODE:   DS   1   ; 
23F7                          DS   1   
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 173 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2276 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2541 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 172 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 177 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 184 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 190 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 193 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 196 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 199 IN MAIN.asm
QUESTION_:          021B DEFINED AT LINE 202 IN MAIN.asm
BANG_:              021E DEFINED AT LINE 205 IN MAIN.asm
BANG:               021E DEFINED AT LINE 206 IN MAIN.asm
NOT:                0229 DEFINED AT LINE 214 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
EQ_:                022F DEFINED AT LINE 218 IN MAIN.asm
EQ:                 022F DEFINED AT LINE 219 IN MAIN.asm
EQ0:                0239 DEFINED AT LINE 226 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
EQ1:                023A DEFINED AT LINE 228 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
GT_:                023E DEFINED AT LINE 232 IN MAIN.asm
GT:                 023E DEFINED AT LINE 233 IN MAIN.asm
LT_:                0249 DEFINED AT LINE 241 IN MAIN.asm
LT:                 0249 DEFINED AT LINE 242 IN MAIN.asm
LT1:                0252 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
HASH_:              025B DEFINED AT LINE 257 IN MAIN.asm
HASH:               025B DEFINED AT LINE 258 IN MAIN.asm
ARRAYINDEX:         025B DEFINED AT LINE 259 IN MAIN.asm
ARRAYINDEX0:        0263 DEFINED AT LINE 265 IN MAIN.asm
ARRAYINDEX1:        0264 DEFINED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
ARRAYINDEX2:        0270 DEFINED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
RPAREN_:            0273 DEFINED AT LINE 281 IN MAIN.asm
RPAREN:             0273 DEFINED AT LINE 283 IN MAIN.asm
AMPER_:             027B DEFINED AT LINE 291 IN MAIN.asm
AMPER:              027B DEFINED AT LINE 292 IN MAIN.asm
AND:                027B DEFINED AT LINE 293 IN MAIN.asm
MINUS_:             0285 DEFINED AT LINE 311 IN MAIN.asm
MINUS:              0285 DEFINED AT LINE 312 IN MAIN.asm
SUB:                0291 DEFINED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
SUB1:               029B DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 324 IN MAIN.asm
SUB2:               02A2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 330 IN MAIN.asm
SUB3:               02A5 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
STAR_:              02AD DEFINED AT LINE 342 IN MAIN.asm
STAR:               02AD DEFINED AT LINE 343 IN MAIN.asm
MUL:                02B5 DEFINED AT LINE 349 IN MAIN.asm
MUL2:               02B7 DEFINED AT LINE 352 IN MAIN.asm
MUL3:               02BF DEFINED AT LINE 357 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
PLUS_:              02D1 DEFINED AT LINE 372 IN MAIN.asm
PLUS:               02D1 DEFINED AT LINE 373 IN MAIN.asm
ADD:                02D1 DEFINED AT LINE 374 IN MAIN.asm
ADD1:               02DC DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
ADD3:               02E0 DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
ADD4:               02EA DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
COLON_:             02ED DEFINED AT LINE 398 IN MAIN.asm
UPCASE_:            02F0 DEFINED AT LINE 402 IN MAIN.asm
UPCASE:             02F0 DEFINED AT LINE 403 IN MAIN.asm
SEMICOLON_:         02F5 DEFINED AT LINE 409 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 417 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 418 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 406 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 434 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 435 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 436 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 451 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 452 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 453 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 473 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 474 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 475 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 527 IN MAIN.asm
CARET:              039F DEFINED AT LINE 531 IN MAIN.asm
GO:                 039F DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 548 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 549 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 550 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 565 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 572 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 573 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 574 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 585 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 589 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 592 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 593 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 601 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 602 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 603 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 615 IN MAIN.asm
PRINTCHAR:          0412 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
PRINTSTRING:        0421 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
PRINTSTRING0:       0428 DEFINED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 652 IN MAIN.asm
PRINTSTRING1:       042B DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
PRINTNUMBER:        0436 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
PRINTDEC:           0441 DEFINED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
PRINTDEC1:          044F DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 672 IN MAIN.asm
PRINTDEC2:          045E DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
PRINTDEC3:          046E DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
PRINTDEC4:          048E DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
PRINTDEC5:          0490 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
PRINTDEC6:          04A0 DEFINED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PRINTDEC7:          04A1 DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
PRINTHEX0:          04A7 DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
PRINTHEX:           04AD DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTHEX1:          04B5 DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX2:          04C0 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
PRINTHEX3:          04CF DEFINED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
PRINTHEX4:          04D8 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
DQUOTE:             04E3 DEFINED AT LINE 785 IN MAIN.asm
UNDERSCORE:         04E3 DEFINED AT LINE 786 IN MAIN.asm
COMMA:              04E3 DEFINED AT LINE 787 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 796 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 832 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 846 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 856 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 862 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 882 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 889 IN MAIN.asm
KEY_:               0571 DEFINED AT LINE 895 IN MAIN.asm
COMMAND_M_:         0574 DEFINED AT LINE 899 IN MAIN.asm
OUTPUT_:            057A DEFINED AT LINE 905 IN MAIN.asm
COMMAND_P_:         057D DEFINED AT LINE 909 IN MAIN.asm
COMMAND_Q_:         0580 DEFINED AT LINE 914 IN MAIN.asm
COMMAND_R_:         0586 DEFINED AT LINE 920 IN MAIN.asm
COMMAND_S_:         0592 DEFINED AT LINE 930 IN MAIN.asm
TRUE_:              05A7 DEFINED AT LINE 946 IN MAIN.asm
COMMAND_V_:         05AA DEFINED AT LINE 950 IN MAIN.asm
COMMAND_W_:         05BF DEFINED AT LINE 966 IN MAIN.asm
XOR_:               05C5 DEFINED AT LINE 972 IN MAIN.asm
COMMAND_NOP_:       05C8 DEFINED AT LINE 977 IN MAIN.asm
COMMAND_DEFAULT_:   05CB DEFINED AT LINE 982 IN MAIN.asm
NOP:                05CE DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
DIV:                05D0 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
DIV2:               05DA DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
ABSOLUTE:           05EB DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
ABSOLUTE1:          05F6 DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
ADDROF:             05F9 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
ADDROF1:            060D DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
ADDROF2:            0618 DEFINED AT LINE 1051 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
ARRAYLENGTH:        061A DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0620 DEFINED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
ARRAYSIZE:          0623 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
PERFORMM_1514S1070: 062A DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0637 DEFINED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
BREAK1:             063E DEFINED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
BYTEMODE:           0651 DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
BYTEMODE1:          0653 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
COMMENT:            0658 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
CONSTHEAPSTART:     0661 DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
CONSTTIBSTART:      0667 DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
CONSTBUFSTART:      066D DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
DECBASE:            0673 DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
DECBASE1:           0675 DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
ERROR1:             067A DEFINED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 964 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
HEXBASE:            0680 DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
INPUT:              0686 DEFINED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
KEY:                0691 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
OUTPUT:             069A DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
QUIT:               06A3 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
QUIT1:              06AA DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
RECUR:              06AD DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
REMAIN:             06B4 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
STRINGBEGIN:        06BA DEFINED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
STRINGEND:          06C1 DEFINED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
STRINGEND1:         06E7 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
STRINGLENGTH:       06EF DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06F5 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
STRINGLENGTH2:      06F7 DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
STRINGLENGTH3:      06FB DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
STRINGSIZE:         06FE DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
PERFORMM_1663S1239: 0705 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      070A DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
STRINGCOMPARE1:     070C DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
STRINGCOMPARE2:     0717 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1253 IN MAIN.asm
STRINGCOMPARE3:     071C DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
STRINGCOMPARE4:     071F DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
VARBUFPTR:          0722 DEFINED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
VARHEAPPTR:         072B DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
VARTIBPTR:          0734 DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
VARIABLE:           073D DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
CONSTANT:           0740 DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
WORDMODE:           0743 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 968 IN MAIN.asm
XOR:                0748 DEFINED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
XOR1:               0749 DEFINED AT LINE 1297 IN MAIN.asm
RANGESRC:           0753 DEFINED AT LINE 32
                    > USED AT LINE 926 IN MAIN.asm
RANGESRCM_1728S1313: 0762 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07E5 DEFINED AT LINE 32
                    > USED AT LINE 838 IN MAIN.asm
ARRAYITERM_1747S1333: 07F2 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0865 DEFINED AT LINE 32
                    > USED AT LINE 938 IN MAIN.asm
STRINGITERM_1766S1353: 0872 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08EC DEFINED AT LINE 32
                    > USED AT LINE 901 IN MAIN.asm
MAPM_1786S1375:     08F9 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             092D DEFINED AT LINE 32
                    > USED AT LINE 870 IN MAIN.asm
FILTERM_1800S1390:  093B DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               098A DEFINED AT LINE 32
                    > USED AT LINE 864 IN MAIN.asm
FOLDM_1819S1410:    0999 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09DB DEFINED AT LINE 32
                    > USED AT LINE 866 IN MAIN.asm
FOREACHM_1833S1425: 09E9 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A26 DEFINED AT LINE 32
                    > USED AT LINE 868 IN MAIN.asm
FUNCSRCM_1847S1440: 0A32 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A5F DEFINED AT LINE 32
                    > USED AT LINE 618 IN MAIN.asm
PRINTARRAYM_1857S1451: 0A6D DEFINED AT LINE 39
                    > USED AT LINE 35
COLON:              0AA7 DEFINED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
DEFINESTART:        0AB4 DEFINED AT LINE 1469 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
SEMICOLON:          0ABD DEFINED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 410 IN MAIN.asm
DEFINEEND:          0ABD DEFINED AT LINE 1476 IN MAIN.asm
DEFINEEND1:         0ACF DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
TILDE:              0AD1 DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
INVERT:             0AD1 DEFINED AT LINE 1490 IN MAIN.asm
DOLLAR:             0ADB DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
HEXNUM:             0ADB DEFINED AT LINE 1502 IN MAIN.asm
HEXNUM1:            0ADE DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
HEXNUM2:            0AE6 DEFINED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1508 IN MAIN.asm
QUESTION:           0AF8 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
IF:                 0AF8 DEFINED AT LINE 1526 IN MAIN.asm
QUOTE:              0B05 DEFINED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
STRING:             0B05 DEFINED AT LINE 1540 IN MAIN.asm
STRING1:            0B0E DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
STRING2:            0B11 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
STRING3:            0B17 DEFINED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
PERCENT:            0B1F DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARG:                0B1F DEFINED AT LINE 1567 IN MAIN.asm
ARG0:               0B3B DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
ARG0A:              0B44 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
ARG1:               0B49 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
ARG1A:              0B51 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
NUM:                0B54 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
NUM0:               0B5D DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
NUM1:               0B5E DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
NUM2:               0B76 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
NUM3:               0B81 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1638 IN MAIN.asm
RBRACE:             0B84 DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
BLOCKEND:           0B84 DEFINED AT LINE 1649 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
BLOCKEND1:          0BB6 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
BLOCKEND2:          0BC2 DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
BLOCKEND3:          0BD4 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
BLOCKEND4:          0BE6 DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1699 IN MAIN.asm
GOBLOCK:            0BEE DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 546 IN MAIN.asm
GOBLOCK2:           0C13 DEFINED AT LINE 1723 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
GOBLOCK3:           0C1D DEFINED AT LINE 1729 IN MAIN.asm
GOFUNC:             0C21 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
GOFUNC1:            0C3A DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOFUNC2:            0C40 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
GOFUNC3:            0C4B DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
GOFUNC4:            0C63 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
GOFUNC5:            0C66 DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
GOFUNC6:            0C69 DEFINED AT LINE 1789 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
GOFUNC7:            0C6C DEFINED AT LINE 1792 IN MAIN.asm
GOFUNC8:            0C70 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
ASSIGN:             0C7B DEFINED AT LINE 1808 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
ASSIGN0:            0C7D DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 381 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
ASSIGN1:            0C81 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
ASSIGN2:            0C8A DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
EQUALS:             0C8C DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
NOTEQUALS:          0C93 DEFINED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
LESSTHANEQ:         0C9A DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
LESSTHAN:           0C9F DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
LESSTHAN1:          0CA4 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
TRUE1:              0CA7 DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
NULL1:              0CAD DEFINED AT LINE 1859 IN MAIN.asm
FALSE1:             0CAD DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
SPREAD:             0CB3 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
SPREAD1:            0CC0 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
SPREAD2:            0CCB DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
SPREAD3:            0CCD DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
SHIFTLEFT:          0CD7 DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
SHIFTLEFT2:         0CE1 DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
SHIFTLEFT3:         0CE9 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
SHIFTLEFT4:         0CEA DEFINED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
SHIFTRIGHT:         0CF3 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
SHIFTRIGHT2:        0CFD DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
SHIFTRIGHT3:        0D05 DEFINED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
SHIFTRIGHT4:        0D09 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
DIVIDE:             0D12 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
DIVIDE1:            0D17 DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
DIVIDE2:            0D24 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
DIVIDE3:            0D25 DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
DOTNEXT:            0D2B DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DOTNEXT1:           0D33 DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
PARSEARGS:          0D45 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
PARSEARGS1:         0D4F DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
PARSEARGS1A:        0D57 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
PARSEARGS2:         0D5F DEFINED AT LINE 2000 IN MAIN.asm
PARSEARGS3:         0D67 DEFINED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
PARSEARGS4:         0D6A DEFINED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
PARSEARGS5:         0D70 DEFINED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
PARSEBLOCK:         0D7B DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
PARSEBLOCK1:        0D7F DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
PARSEBLOCK2:        0DAB DEFINED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
PARSEBLOCK3:        0DAE DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
PARSEBLOCK4:        0DB6 DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
PARSEBLOCK5:        0DB9 DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
PARSEBLOCK6:        0DE1 DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
CREATEFUNC:         0DE5 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
CREATEFUNC0:        0E04 DEFINED AT LINE 2114 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
CREATEFUNC1:        0E1C DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
CREATEFUNC2:        0E2F DEFINED AT LINE 2146 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
CREATEFUNC2A:       0E4E DEFINED AT LINE 2172 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
CREATEFUNC3:        0E5D DEFINED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
CREATEFUNC4:        0E68 DEFINED AT LINE 2195 IN MAIN.asm
CREATEFUNC5:        0E69 DEFINED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
LOWERCASETABLE:     0E87 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
LOWERCASETABLE1:    0E91 DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
LOWERCASETABLE2:    0E98 DEFINED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
COMMANDTABLE:       0E9D DEFINED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
COMMANDTABLE1:      0E9E DEFINED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
COMMANDTABLE2:      0E9F DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
COMMANDTABLE3:      0EA6 DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
COMMANDTABLE4:      0EAF DEFINED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
PUTSTR0:            0EB5 DEFINED AT LINE 2275 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
PUTSTR:             0EB9 DEFINED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
NESTING:            0EBE DEFINED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
NESTING0:           0EC8 DEFINED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
NESTING1A:          0ECF DEFINED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
NESTING1:           0ED2 DEFINED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2299 IN MAIN.asm
NESTING2:           0EE1 DEFINED AT LINE 2317 IN MAIN.asm
                    > USED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
NESTING3:           0EE3 DEFINED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
NESTING4:           0EEE DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
PROMPT:             0EF0 DEFINED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
CRLF:               0EF9 DEFINED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2471 IN MAIN.asm
PRINTSTR:           0F00 DEFINED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
INIT:               0F07 DEFINED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2399 IN MAIN.asm
INIT1:              0F0F DEFINED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
WARMINIT:           0F17 DEFINED AT LINE 2362 IN MAIN.asm
COLDBOOT0:          0F2A DEFINED AT LINE 2369 IN MAIN.asm
                    > USED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2395 IN MAIN.asm
COLDINIT:           0F34 DEFINED AT LINE 2375 IN MAIN.asm
COLDBOOT1:          0F45 DEFINED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
COLDSTART:          0F52 DEFINED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
START:              0F5B DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 7
START1:             0F61 DEFINED AT LINE 2400 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
INTERPRET:          0F67 DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
INTERPRET2:         0F73 DEFINED AT LINE 2412 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
INTERPRET3:         0F7B DEFINED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2430 IN MAIN.asm
INTERPRET4:         0F81 DEFINED AT LINE 2426 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
INTERPRET5:         0F86 DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
INTERPRET5A:        0F9F DEFINED AT LINE 2448 IN MAIN.asm
INTERPRET6:         0FA1 DEFINED AT LINE 2451 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
INTERPRET7:         0FAF DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2441 IN MAIN.asm
INTERPRET8:         0FC2 DEFINED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
NEXT:               0FDD DEFINED AT LINE 2489 IN MAIN.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 2493 IN MAIN.asm
NEXT0:              0FF1 DEFINED AT LINE 2503 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
NEXT1:              0FF2 DEFINED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
EXIT:               0FF9 DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
RUN:                0FFD DEFINED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
ERROR:              1001 DEFINED AT LINE 2520 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
BACKSPACE_:         1013 DEFINED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
REEDIT_:            1023 DEFINED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2446 IN MAIN.asm
REEDIT0:            102F DEFINED AT LINE 2540 IN MAIN.asm
                    > USED AT LINE 2546 IN MAIN.asm
REEDIT1:            1033 DEFINED AT LINE 2543 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
F1:                 1043 DEFINED AT LINE 10
                    > USED AT LINE 872 IN MAIN.asm
F2:                 1043 DEFINED AT LINE 11
                    > USED AT LINE 874 IN MAIN.asm
F3:                 1043 DEFINED AT LINE 12
                    > USED AT LINE 876 IN MAIN.asm
F4:                 1043 DEFINED AT LINE 13
                    > USED AT LINE 878 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1124 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 2381 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2377 IN MAIN.asm
VTIBPTR:            23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
VBUFPTR:            23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
VNEXT:              23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 2389 IN MAIN.asm
VHEAPPTR:           23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
                    > USED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
VDATAWIDTH:         23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
VNUMBASE:           23F0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2205 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 66 IN ram.asm
TBPTR:              240C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2352 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
