0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 82 18               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ; 
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 84 18               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ; 
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 86 18               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ; 
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 88 18               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ; 
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 8A 18               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ; 
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 8C 18               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ; 
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 90 18               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A 92 18               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A 94 18               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A 96 18               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 18               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 82 18               LD   (RST08),HL   
0094   22 84 18               LD   (RST10),HL   
0097   22 86 18               LD   (RST18),HL   
009A   22 88 18               LD   (RST20),HL   
009D   22 8A 18               LD   (RST28),HL   
00A0   22 8C 18               LD   (RST30),HL   
00A3   22 90 18               LD   (INTVEC),HL   
00A6   22 92 18               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 94 18               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 96 18               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 18               LD   SP,STACK   
00C6   CD DC 09               CALL   init   
00C9   C3 61 0B               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; literal number
00CC                DC2:      EQU   18   ; enter code
00CC                DC3:      EQU   19   ; enter code (anonymous)
00CC                ESC:      EQU   27   ; escape code
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_args
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   00 00                  DW   0   ; a vFrac fractional part of calculation			
0182   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0184   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0186   00 00                  DW   0   ; d vPointer
0188   00 00                  DW   0   ; e vLastDef
018A   00 00                  DW   0   ; f vHashStr
018C   CE 0B                  DW   next   ; g nNext
018E   00 1E                  DW   heap   ; h vHeapPtr \h start of the free mem
0190                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available @ " % , ; DEL
0220   D9                     DB   lsb(nop_)   ; SP
0221   9A                     DB   lsb(not_)   ; !
0222   D9                     DB   lsb(nop_)   ; "
0223   03                     DB   lsb(hexnum_)   ; #
0224   06                     DB   lsb(arg_)   ; $
0225   D9                     DB   lsb(nop_)   ; %
0226   54                     DB   lsb(and_)   ; &
0227   09                     DB   lsb(string_)   ; '
0228   0C                     DB   lsb(arg_list_)   ; (
0229   D9                     DB   lsb(nop_)   ; )
022A   83                     DB   lsb(mul_)   ; *
022B   76                     DB   lsb(add_)   ; +
022C   D9                     DB   lsb(nop_)   ; ,
022D   86                     DB   lsb(sub_)   ; -
022E   0F                     DB   lsb(dot_)   ; .
022F   B5                     DB   lsb(div_)   ; /	
0230   00                     DB   lsb(num_)   ; 0
0231   00                     DB   lsb(num_)   ; 1
0232   00                     DB   lsb(num_)   ; 2
0233   00                     DB   lsb(num_)   ; 3
0234   00                     DB   lsb(num_)   ; 4
0235   00                     DB   lsb(num_)   ; 5
0236   00                     DB   lsb(num_)   ; 6
0237   00                     DB   lsb(num_)   ; 7
0238   00                     DB   lsb(num_)   ; 8
0239   00                     DB   lsb(num_)   ; 9
023A   51                     DB   lsb(symbol_)   ; :
023B   D9                     DB   lsb(nop_)   ; ;
023C   A8                     DB   lsb(lt_)   ; <
023D   9F                     DB   lsb(eq_)   ; =
023E   A4                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(index_)   ; ?
0240   D9                     DB   lsb(nop_)   ; @
0241   4B                     DB   lsb(identU_)   ; A
0242   4B                     DB   lsb(identU_)   ; B
0243   4B                     DB   lsb(identU_)   ; C
0244   4B                     DB   lsb(identU_)   ; D
0245   4B                     DB   lsb(identU_)   ; E
0246   4B                     DB   lsb(identU_)   ; F
0247   4B                     DB   lsb(identU_)   ; G
0248   4B                     DB   lsb(identU_)   ; h
0249   4B                     DB   lsb(identU_)   ; I
024A   4B                     DB   lsb(identU_)   ; J
024B   4B                     DB   lsb(identU_)   ; K
024C   4B                     DB   lsb(identU_)   ; L
024D   4B                     DB   lsb(identU_)   ; M
024E   4B                     DB   lsb(identU_)   ; N
024F   4B                     DB   lsb(identU_)   ; O
0250   4B                     DB   lsb(identU_)   ; p
0251   4B                     DB   lsb(identU_)   ; Q
0252   4B                     DB   lsb(identU_)   ; R
0253   4B                     DB   lsb(identU_)   ; S
0254   4B                     DB   lsb(identU_)   ; T
0255   4B                     DB   lsb(identU_)   ; U
0256   4B                     DB   lsb(identU_)   ; V
0257   4B                     DB   lsb(identU_)   ; W
0258   4B                     DB   lsb(identU_)   ; X
0259   4B                     DB   lsb(identU_)   ; Y
025A   4B                     DB   lsb(identU_)   ; Z
025B   45                     DB   lsb(array_)   ; [
025C   C4                     DB   lsb(command_)   ; \
025D   48                     DB   lsb(arrayEnd_)   ; ]
025E   68                     DB   lsb(xor_)   ; ^
025F   D9                     DB   lsb(nop_)   ; _
0260   42                     DB   lsb(char_)   ; `    	
0261   4E                     DB   lsb(identL_)   ; a
0262   4E                     DB   lsb(identL_)   ; b
0263   4E                     DB   lsb(identL_)   ; c
0264   4E                     DB   lsb(identL_)   ; d
0265   4E                     DB   lsb(identL_)   ; e
0266   4E                     DB   lsb(identL_)   ; f
0267   4E                     DB   lsb(identL_)   ; g
0268   4E                     DB   lsb(identL_)   ; h
0269   4E                     DB   lsb(identL_)   ; i
026A   4E                     DB   lsb(identL_)   ; j
026B   4E                     DB   lsb(identL_)   ; k
026C   4E                     DB   lsb(identL_)   ; l
026D   4E                     DB   lsb(identL_)   ; m
026E   4E                     DB   lsb(identL_)   ; n
026F   4E                     DB   lsb(identL_)   ; o
0270   4E                     DB   lsb(identL_)   ; p
0271   4E                     DB   lsb(identL_)   ; q
0272   4E                     DB   lsb(identL_)   ; r
0273   4E                     DB   lsb(identL_)   ; s
0274   4E                     DB   lsb(identL_)   ; t
0275   4E                     DB   lsb(identL_)   ; u
0276   4E                     DB   lsb(identL_)   ; v
0277   4E                     DB   lsb(identL_)   ; w
0278   4E                     DB   lsb(identL_)   ; x
0279   4E                     DB   lsb(identL_)   ; y
027A   4E                     DB   lsb(identL_)   ; z
027B   3C                     DB   lsb(block_)   ; {
027C   5F                     DB   lsb(or_)   ; |
027D   3F                     DB   lsb(blockEnd_)   ; }
027E   71                     DB   lsb(inv_)   ; ~
027F   D9                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                NUM_:        
0300   C3 1A 04               JP   num   
0303                HEXNUM_:      
0303   C3 4A 04               JP   hexnum   
0306                ARG_:        
0306   C3 65 09               JP   arg   
0309                STRING_:      
0309   C3 67 04               JP   string   
030C                ARG_LIST_:      
030C   C3 8B 04               JP   arg_list   
030F                DOT_:        
030F   E1                     POP   hl   
0310   03                     INC   bc   
0311   0A                     LD   a,(bc)   
0312   FE 68                  CP   "h"   
0314   20 05                  JR   nz,dot1   
0316   CD 1B 08               CALL   prthex   
0319   18 17                  JR   dot4   
031B                DOT1:        
031B   FE 73                  CP   "s"   
031D   20 05                  JR   nz,dot2   
031F   CD 3E 08               CALL   prtstr   
0322   18 0E                  JR   dot4   
0324                DOT2:        
0324   FE 63                  CP   "c"   
0326   20 06                  JR   nz,dot3   
0328   7D                     LD   a,l   
0329   CD 85 00               CALL   putchar   
032C   18 04                  JR   dot4   
032E                DOT3:        
032E   0B                     DEC   bc   
032F   CD D3 07               CALL   prtdec   
0332                DOT4:        
0332   3E 20                  LD   a," "   
0334   CD 85 00               CALL   putchar   
0337   DD E9                  JP   (ix)   
0339                             ; addr index -- addr2
0339                INDEX_:      
0339   C3 7C 05               JP   index   
033C                BLOCK_:      
033C   C3 D2 04               JP   block   
033F                BLOCKEND_:      
033F   C3 0F 05               JP   blockend   
0342                CHAR_:       
0342   C3 BD 04               JP   char   
0345                ARRAY_:      
0345   C3 B3 05               JP   array   
0348                ARRAYEND_:      
0348   C3 CF 05               JP   arrayEnd   
034B                IDENTU_:      
034B   C3 A9 06               JP   identU   
034E                IDENTL_:      
034E   C3 AE 06               JP   identL   
0351                SYMBOL_:      
0351   C3 A7 06               JP   symbol   
0354                AND_:        
0354   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0355   E1                     POP   hl   
0356   7B                     LD   a,e   
0357   A5                     AND   l   
0358   6F                     LD   l,a   
0359   7A                     LD   a,d   
035A   A4                     AND   h   
035B                AND1:        
035B   67                     LD   h,a   
035C   E5                     PUSH   hl   
035D   DD E9                  JP   (ix)   
035F                OR_:         
035F   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0360   E1                     POP   hl   
0361   7B                     LD   a,e   
0362   B5                     OR   l   
0363   6F                     LD   l,a   
0364   7A                     LD   a,d   
0365   B4                     OR   h   
0366   18 F3                  JR   and1   
0368                XOR_:        
0368   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0369                XOR1:        
0369   E1                     POP   hl   
036A   7B                     LD   a,e   
036B   AD                     XOR   l   
036C   6F                     LD   l,a   
036D   7A                     LD   a,d   
036E   AC                     XOR   h   
036F   18 EA                  JR   and1   
0371                INV_:        ; Bitwise INVert the top member of the stack
0371   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
0374   18 F3                  JR   xor1   
0376                ADD_:        ; add the top 2 members of the stack
0376   D1                     POP   de   
0377   E1                     POP   hl   
0378   19                     ADD   hl,de   
0379   E5                     PUSH   hl   
037A   DD E9                  JP   (ix)   
037C                HDOT_:       ; print hexadecimal
037C   E1                     POP   hl   
037D   CD 1B 08               CALL   prthex   
0380   C3 2E 03               JP   dot3   
0383                MUL_:        
0383   C3 FE 03               JP   mul   
0386                SUB_:        ; negative sign or subtract
0386   03                     INC   bc   ; check if sign of a number
0387   0A                     LD   a,(bc)   
0388   0B                     DEC   bc   
0389   FE 30                  CP   "0"   
038B   38 05                  JR   c,sub1   
038D   FE 3A                  CP   "9"+1   
038F   DA 00 03               JP   c,num_   
0392                SUB1:        ; Subtract the value 2nd on stack from top of stack
0392   D1                     POP   de   
0393   E1                     POP   hl   ; Entry point for INVert
0394                SUB2:        
0394   B7                     OR   a   ; Entry point for NEGate
0395   ED 52                  SBC   hl,de   
0397   E5                     PUSH   hl   
0398   DD E9                  JP   (ix)   
039A                NOT_:        ; logical invert, any non zero value
039A   21 00 00               LD   hl,0   ; is considered true
039D   18 01                  JR   eq1   
039F                EQ_:         
039F   E1                     POP   hl   
03A0                EQ1:         
03A0   D1                     POP   de   
03A1   C3 E2 06               JP   equals   
03A4                GT_:         
03A4   D1                     POP   de   
03A5   E1                     POP   hl   
03A6   18 02                  JR   lt1   
03A8                LT_:         
03A8   E1                     POP   hl   
03A9   D1                     POP   de   
03AA                LT1:         
03AA   03                     INC   bc   
03AB   0A                     LD   a,(bc)   
03AC   FE 3D                  CP   "="   
03AE   CA EA 06               JP   z,lessthaneq   
03B1   0B                     DEC   bc   
03B2   C3 EF 06               JP   lessthan   
03B5                DIV_:        
03B5   D1                     POP   de   ; get first value
03B6   E1                     POP   hl   ; get 2nd value
03B7   C5                     PUSH   bc   ; preserve the IP
03B8   44 4D                  LD   bc,hl   
03BA   CD 90 07               CALL   divide   
03BD   22 98 18               LD   (vFrac),hl   
03C0   C1                     POP   bc   
03C1   D5                     PUSH   de   ; push result
03C2   DD E9                  JP   (ix)   
03C4                COMMAND_:      
03C4   03                     INC   bc   
03C5   0A                     LD   a,(bc)   
03C6   FE 5C                  CP   $5C   ; \\ comment
03C8   28 06                  JR   z,comment   
03CA   21 01 00               LD   hl,1   ; error 1: unknown command
03CD   C3 09 0C               JP   error   
03D0                COMMENT:      
03D0   03                     INC   bc   ; point to next char
03D1   0A                     LD   a,(bc)   
03D2   FE 20                  CP   " "   ; terminate on any char less than SP
03D4   30 FA                  JR   nc,comment   
03D6   0B                     DEC   bc   
03D7   DD E9                  JP   (ix)   
03D9                NOP_:        
03D9   DD E9                  JP   (ix)   
03DB                             ;*******************************************************************
03DB                             ; word operators
03DB                             ;*******************************************************************
03DB                             ; shl
03DB                             ; value count -- value2          shift left count places
03DB                SHL:         
03DB   50 59                  LD   de,bc   ; save IP
03DD   C1                     POP   bc   ; bc = count
03DE   41                     LD   b,c   ; b = loop counter
03DF   E1                     POP   hl   
03E0   04                     INC   b   ; test for counter=0 case
03E1   18 01                  JR   shl2   
03E3                SHL1:        
03E3   29                     ADD   hl,hl   ; left shift hl
03E4                SHL2:        
03E4   10 FD                  DJNZ   shl1   
03E6   E5                     PUSH   hl   
03E7   42 4B                  LD   bc,de   ; restore IP
03E9   DD E9                  JP   (ix)   
03EB                             ; shr
03EB                             ; value count -- value2          shift left count places
03EB                SHR:         
03EB   50 59                  LD   de,bc   ; save IP
03ED   C1                     POP   bc   ; bc = count
03EE   41                     LD   b,c   ; b = loop counter
03EF   E1                     POP   hl   
03F0   04                     INC   b   ; test for counter=0 case
03F1   18 04                  JR   shr2   
03F3                SHR1:        
03F3   CB 3C                  SRL   h   ; right shift hl
03F5   CB 1D                  RR   l   
03F7                SHR2:        
03F7   10 FA                  DJNZ   shr1   
03F9   E5                     PUSH   hl   
03FA   42 4B                  LD   bc,de   ; restore IP
03FC   DD E9                  JP   (ix)   
03FE                MUL:         ;=19
03FE   D1                     POP   de   ; get first value
03FF   E1                     POP   hl   
0400   C5                     PUSH   bc   ; Preserve the IP
0401   44                     LD   b,h   ; bc = 2nd value
0402   4D                     LD   c,l   
0403   21 00 00               LD   hl,0   
0406   3E 10                  LD   a,16   
0408                MUL2:        
0408   29                     ADD   hl,hl   
0409   CB 13                  RL   e   
040B   CB 12                  RL   d   
040D   30 04                  JR   nc,$+6   
040F   09                     ADD   hl,bc   
0410   30 01                  JR   nc,$+3   
0412   13                     INC   de   
0413   3D                     DEC   a   
0414   20 F2                  JR   nz,mul2   
0416   C1                     POP   bc   ; Restore the IP
0417   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
0418   DD E9                  JP   (ix)   
041A                NUM:         
041A   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
041D   0A                     LD   a,(bc)   ; Get numeral or -
041E   FE 2D                  CP   "-"   
0420   20 01                  JR   nz,num0   
0422   03                     INC   bc   ; move to next char, no flags affected
0423                NUM0:        
0423   08                     EX   af,af'   ; save zero flag = 0 for later
0424                NUM1:        
0424   0A                     LD   a,(bc)   ; read digit
0425   D6 30                  SUB   "0"   ; less than 0?
0427   38 13                  JR   c,num2   ; not a digit, exit loop
0429   FE 0A                  CP   10   ; greater that 9?
042B   30 0F                  JR   nc,num2   ; not a digit, exit loop
042D   03                     INC   bc   ; inc IP
042E   54 5D                  LD   de,hl   ; multiply hl * 10
0430   29                     ADD   hl,hl   
0431   29                     ADD   hl,hl   
0432   19                     ADD   hl,de   
0433   29                     ADD   hl,hl   
0434   85                     ADD   a,l   ; add digit in a to hl
0435   6F                     LD   l,a   
0436   3E 00                  LD   a,0   
0438   8C                     ADC   a,h   
0439   67                     LD   h,a   
043A   18 E8                  JR   num1   
043C                NUM2:        
043C   0B                     DEC   bc   
043D   08                     EX   af,af'   ; restore zero flag
043E   20 07                  JR   nz,num3   
0440   EB                     EX   de,hl   ; negate the value of hl
0441   21 00 00               LD   hl,0   
0444   B7                     OR   a   ; jump to sub2
0445   ED 52                  SBC   hl,de   
0447                NUM3:        
0447   E5                     PUSH   hl   ; Put the number on the stack
0448   DD E9                  JP   (ix)   ; and process the next character
044A                HEXNUM:      
044A   21 00 00               LD   hl,0   ; Clear hl to accept the number
044D                HEXNUM1:      
044D   03                     INC   bc   
044E   0A                     LD   a,(bc)   ; Get the character which is a numeral
044F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0451   28 02                  JR   z,hexnum2   ; no a decimal
0453   D6 07                  SUB   7   ; sub 7  to make $a - $F
0455                HEXNUM2:      
0455   D6 30                  SUB   $30   ; Form decimal digit
0457   DA 3C 04               JP   c,num2   
045A   FE 10                  CP   $0F+1   
045C   D2 3C 04               JP   nc,num2   
045F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0460   29                     ADD   hl,hl   ; 4X
0461   29                     ADD   hl,hl   ; 8X
0462   29                     ADD   hl,hl   ; 16X
0463   85                     ADD   a,l   ; add into bottom of hl
0464   6F                     LD   l,a   ; 
0465   18 E6                  JR   hexnum1   
0467                             ; string
0467                             ; -- ptr                        ; points to start of string chars,
0467                             ; length is stored at start - 2 bytes
0467                STRING:      
0467   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
046A   23                     INC   hl   ; skip length field to start
046B   23                     INC   hl   
046C   E5                     PUSH   hl   ; save start of string
046D   03                     INC   bc   ; point to next char
046E   18 03                  JR   string2   
0470                STRING1:      
0470   77                     LD   (hl),a   
0471   23                     INC   hl   ; increase count
0472   03                     INC   bc   ; point to next char
0473                STRING2:      
0473   0A                     LD   a,(bc)   
0474   FE 27                  CP   "'"   ; ' is the string terminator
0476   20 F8                  JR   nz,string1   
0478   AF                     XOR   a   ; write NUL to terminate string
0479   77                     LD   (hl),a   ; hl = end of string
047A   23                     INC   hl   
047B   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
047E   2B                     DEC   hl   ; hl = end of string without terminator
047F   D1                     POP   de   ; de = start of string
0480   D5                     PUSH   de   ; return start of string
0481   B7                     OR   a   ; hl = length bytes, de = start of string
0482   ED 52                  SBC   hl,de   
0484   EB                     EX   de,hl   
0485   2B                     DEC   hl   ; write length bytes to length field at start - 2
0486   72                     LD   (hl),d   
0487   2B                     DEC   hl   
0488   73                     LD   (hl),e   
0489   DD E9                  JP   (ix)   
048B                             ; arg_list - parses input (ab:c)
048B                             ; names after the : represent uninitialised locals
048B                             ; return values are the state of the stack after the block ends
048B                ARG_LIST:      
048B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
048E   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap ptr
0491   23                     INC   hl   ; skip length field to start
0492   23                     INC   hl   
0493   E5                     PUSH   hl   ; save start of arg_list
0494   03                     INC   bc   ; point to next char
0495                ARG_LIST1:      
0495   0A                     LD   a,(bc)   
0496   FE 29                  CP   ")"   ; ) is the arg_list terminator
0498   28 12                  JR   z,arg_list4   
049A   FE 3A                  CP   ":"   
049C   20 03                  JR   nz,arg_list2   
049E   14                     INC   d   ; non zero value local count acts as flag
049F   20 08                  JR   nz,arg_list3   
04A1                ARG_LIST2:      
04A1   77                     LD   (hl),a   
04A2   23                     INC   hl   
04A3   1C                     INC   e   ; increase arg count
04A4   AF                     XOR   a   
04A5   B2                     OR   d   
04A6   28 01                  JR   z,arg_list3   
04A8   14                     INC   d   ; if d > 0 increase local count
04A9                ARG_LIST3:      
04A9   03                     INC   bc   ; point to next char
04AA   18 E9                  JR   arg_list1   
04AC                ARG_LIST4:      
04AC   AF                     XOR   a   
04AD   B2                     OR   d   
04AE   28 01                  JR   z,arg_list5   
04B0   15                     DEC   d   ; remove initial inc
04B1                ARG_LIST5:      
04B1   23                     INC   hl   
04B2   22 A6 18               LD   (vHeapPtr),hl   ; bump heap ptr to after end of string
04B5   E1                     POP   hl   ; hl = start of arg_list
04B6   E5                     PUSH   hl   ; return start of string
04B7   2B                     DEC   hl   ; write length bytes to length field at start - 2
04B8   72                     LD   (hl),d   
04B9   2B                     DEC   hl   
04BA   73                     LD   (hl),e   
04BB   DD E9                  JP   (ix)   
04BD                CHAR:        
04BD   21 00 00               LD   hl,0   ; if `` is empty
04C0                CHAR1:       
04C0   03                     INC   bc   ; point to next char
04C1   0A                     LD   a,(bc)   
04C2   FE 60                  CP   "`"   ; ` is the string terminator
04C4   28 09                  JR   z,char3   
04C6   FE 5C                  CP   $5c   ; \ is the escape
04C8   20 02                  JR   nz,char2   
04CA   03                     INC   bc   
04CB   0A                     LD   a,(bc)   
04CC                CHAR2:       
04CC   6F                     LD   l,a   
04CD   18 F1                  JR   char1   
04CF                CHAR3:       
04CF   E5                     PUSH   hl   
04D0   DD E9                  JP   (ix)   
04D2                BLOCK:       
04D2   03                     INC   bc   
04D3   C5                     PUSH   bc   ; return first opcode of block
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCK1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,block1   
04DC   FE 29                  CP   ")"   
04DE   28 29                  JR   z,block4   
04E0   FE 7D                  CP   "}"   
04E2   28 25                  JR   z,block4   
04E4   FE 5D                  CP   "]"   
04E6   28 21                  JR   z,block4   
04E8   FE 28                  CP   "("   
04EA   28 12                  JR   z,block2   
04EC   FE 7B                  CP   "{"   
04EE   28 0E                  JR   z,block2   
04F0   FE 5B                  CP   "["   
04F2   28 0A                  JR   z,block2   
04F4   FE 27                  CP   "'"   
04F6   28 09                  JR   z,block3   
04F8   FE 60                  CP   "`"   
04FA   28 05                  JR   z,block3   
04FC   18 D8                  JR   block1   
04FE                BLOCK2:      
04FE   14                     INC   d   
04FF   18 D5                  JR   block1   
0501                BLOCK3:      
0501   3E 80                  LD   a,$80   
0503   AA                     XOR   d   
0504   47                     LD   b,a   
0505   20 CF                  JR   nz,block1   
0507   18 03                  JR   block5   
0509                BLOCK4:      
0509   15                     DEC   d   
050A   20 CA                  JR   nz,block1   ; get the next element
050C                BLOCK5:      
050C   0B                     DEC   bc   ; balanced, exit
050D   DD E9                  JP   (ix)   
050F                BLOCKEND:      
050F   D9                     EXX      
0510   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0513   FD 56 01               LD   d,(iy+1)   
0516   FD 4E 06               LD   c,(iy+6)   ; bc = IP
0519   FD 46 07               LD   b,(iy+7)   
051C   D9                     EXX      
051D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0520   FD 56 03               LD   d,(iy+3)   
0523   EB                     EX   de,hl   
0524   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0527   FD 56 01               LD   d,(iy+1)   
052A                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
052A   13                     INC   de   ; for carry flag <=
052B   B7                     OR   a   
052C   ED 52                  SBC   hl,de   
052E   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0530   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0532   FD 5D                  LD   e,iyl   
0534   21 08 00               LD   hl,8   
0537   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0538   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0539   18 0C                  JR   blockend2   
053B                BLOCKEND1:      ; same scope
053B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
053E   FD 56 03               LD   d,(iy+3)   
0541   EB                     EX   de,hl   
0542   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0544   FD 5D                  LD   e,iyl   
0546   EB                     EX   de,hl   
0547                BLOCKEND2:      
0547   44 4D                  LD   bc,hl   ; bc = hl = BP
0549   B7                     OR   a   ; hl = BP - SP = count
054A   ED 72                  SBC   hl,sp   
054C   C5                     PUSH   bc   ; bc = count, hl = BP
054D   44 4D                  LD   bc,hl   
054F   E1                     POP   hl   
0550   2B                     DEC   hl   ; hl = BP-1
0551   1B                     DEC   de   ; de = args*-1
0552   ED B8                  LDDR      
0554   13                     INC   de   ; hl = new tos
0555   EB                     EX   de,hl   
0556   F9                     LD   sp,hl   ; sp = new tos
0557   D9                     EXX      ; bc = IP, iy = oldBP
0558   D5                     PUSH   de   
0559   C5                     PUSH   bc   
055A   D9                     EXX      
055B   C1                     POP   bc   
055C   FD E1                  POP   iy   
055E   DD E9                  JP   (ix)   
0560                             ; if
0560                             ; condition then -- value
0560                IF:          
0560   11 00 00               LD   de,0   ; NUL pointer for else
0563   18 01                  JR   ifte1   
0565                             ; ifte
0565                             ; condition then else -- value
0565                IFTE:        
0565   D1                     POP   de   ; de = else
0566                IFTE1:       
0566   E1                     POP   hl   ; hl = then
0567   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0568   7C                     LD   a,h   
0569   B5                     OR   l   
056A   E1                     POP   hl   ; hl = then
056B   CA A5 08               JP   z,exec0   ; if z de = else
056E   EB                     EX   de,hl   ; condition = false, hl = else
056F   C3 A5 08               JP   exec0   
0572                             ; switch
0572                             ; index array -- value
0572                SWITCH:      
0572   D1                     POP   de   ; de = array
0573   E1                     POP   hl   ; hl = index
0574   29                     ADD   hl,hl   ; if data width = 2 then double
0575   19                     ADD   hl,de   ; add addr
0576   5E                     LD   e,(hl)   
0577   23                     INC   hl   
0578   56                     LD   d,(hl)   
0579   C3 A5 08               JP   exec0   
057C                             ; index of an array, based on vDataWidth
057C                             ; array num -- value    ; also sets vPointer to address
057C                INDEX:       
057C   E1                     POP   hl   ; hl = index
057D   D1                     POP   de   ; de = array
057E   3A 9A 18               LD   a,(vDataWidth)   ; a = data width
0581   3D                     DEC   a   
0582   28 01                  JR   z,index1   
0584                INDEX0:      
0584   29                     ADD   hl,hl   ; if data width = 2 then double
0585                INDEX1:      
0585   19                     ADD   hl,de   ; add addr
0586   22 9E 18               LD   (vPointer),hl   ; store address in setter
0589   16 00                  LD   d,0   
058B   5E                     LD   e,(hl)   
058C   B7                     OR   a   ; check data width again
058D   28 02                  JR   z,index2   
058F   23                     INC   hl   
0590   56                     LD   d,(hl)   
0591                INDEX2:      
0591   D5                     PUSH   de   
0592   DD E9                  JP   (ix)   
0594                             ; newvalue --
0594                SET:         
0594   E1                     POP   hl   ; discard last accessed value
0595   D1                     POP   de   ; new value
0596   2A 9E 18               LD   hl,(vPointer)   
0599   73                     LD   (hl),e   
059A   3A 9A 18               LD   a,(vDataWidth)   
059D   3D                     DEC   a   
059E   28 02                  JR   z,set1   
05A0   23                     INC   hl   
05A1   72                     LD   (hl),d   
05A2                SET1:        
05A2   DD E9                  JP   (ix)   
05A4                             ; c b --
05A4                             ; loops until c = 0
05A4                LOOP:        
05A4   DD E9                  JP   (ix)   
05A6                             ;     pop de                      ; de = block                    c
05A6                             ;     pop hl                      ; hl = condition
05A6                             ;     push de
05A6                             ;     push bc                     ; push IP
05A6                             ;     ld bc,de                    ; bc = block
05A6                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
05A6                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
05A6                             ;     push de                     ; push ScopeBP
05A6                             ;     push iy                     ; push BP
05A6                             ;     ld iy,0                     ; iy = sp
05A6                             ;     add iy,sp
05A6                             ; loop1:
05A6                             ;     ld a,l                      ; bc = block, hl = condition = zero?
05A6                             ;     or h
05A6                             ;     jr z,loop3
05A6                             ;     ld de,loop2-1               ; IP return address
05A6                             ;     push de
05A6                             ;     ld e,(iy+2)                 ; push parent ScopeBP
05A6                             ;     ld d,(iy+3)
05A6                             ;     push de                     ;
05A6                             ;     push iy                     ; push BP
05A6                             ;     ld iy,0                     ; iy = sp
05A6                             ;     add iy,sp
05A6                             ;     push hl                     ; push condition
05A6                             ;     dec bc
05A6                             ;     jp (ix)
05A6                             ; loop2:
05A6                             ;     db ESC                      ; escape from interpreter
05A6                             ;     ld c,(iy+6)                 ; bc = block
05A6                             ;     ld b,(iy+7)
05A6                             ;     pop hl                      ; hl = condition
05A6                             ;     jr loop1
05A6                             ; loop3:
05A6                             ;     ld d,iyh                    ; de = BP
05A6                             ;     ld e,iyl
05A6                             ;     ex de,hl                    ; hl = BP, de = result
05A6                             ;     ld sp,hl                    ; sp = BP
05A6                             ;     pop hl                      ; hl = old BP
05A6                             ;     pop bc                      ; pop ScopeBP (discard)
05A6                             ;     pop bc                      ; bc = IP
05A6                             ;     ld sp,hl                    ; sp = old BP
05A6                             ;     ld iy,0                     ; iy = sp
05A6                             ;     add iy,sp
05A6                             ;     ld ix,(vNext)                  ; needed?
05A6                             ;     jp (ix)
05A6                WORDS:       
05A6   21 02 00               LD   hl,2   
05A9   18 03                  JR   bytes1   
05AB                BYTES:       
05AB   21 01 00               LD   hl,1   
05AE                BYTES1:      
05AE   22 9A 18               LD   (vDataWidth),hl   
05B1   DD E9                  JP   (ix)   
05B3                ARRAY:       
05B3   11 00 00               LD   de,0   ; create stack frame
05B6   D5                     PUSH   de   ; push null for IP
05B7   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
05BA   FD 56 05               LD   d,(iy+5)   ; 
05BD   D5                     PUSH   de   ; 
05BE   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
05C1   FD 56 03               LD   d,(iy+3)   ; 
05C4   D5                     PUSH   de   ; 
05C5   FD E5                  PUSH   iy   ; push BP
05C7   FD 21 00 00            LD   iy,0   ; BP = SP
05CB   FD 39                  ADD   iy,sp   
05CD   DD E9                  JP   (ix)   
05CF                ARRAYEND:      
05CF   FD 54                  LD   d,iyh   ; de = BP
05D1   FD 5D                  LD   e,iyl   
05D3   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
05D7   62 6B                  LD   hl,de   ; hl = de = BP
05D9   B7                     OR   a   
05DA   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
05DC   CB 3C                  SRL   h   ; 
05DE   CB 1D                  RR   l   
05E0   44 4D                  LD   bc,hl   ; bc = count
05E2   2A A6 18               LD   hl,(vHeapPtr)   ; hl = array[-2]
05E5   71                     LD   (hl),c   ; write num items in length word
05E6   23                     INC   hl   
05E7   70                     LD   (hl),b   
05E8   23                     INC   hl   ; hl = array[0], bc = count
05E9                             ; de = BP, hl = array[0], bc = count
05E9   3A 9A 18               LD   a,(vDataWidth)   ; vDataWidth=1?
05EC   FE 01                  CP   1   
05EE   20 10                  JR   nz,arrayEnd2   
05F0                ARRAYEND1:      ; byte
05F0   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
05F3   77                     LD   (hl),a   ; write a to array item
05F4   23                     INC   hl   ; move to next byte in array
05F5   FD 2B                  DEC   iy   ; move tho next word on stack
05F7   FD 2B                  DEC   iy   
05F9   0B                     DEC   bc   ; dec items count
05FA   79                     LD   a,c   ; if not zero loop
05FB   B0                     OR   b   
05FC   20 F2                  JR   nz,arrayEnd1   
05FE   18 13                  JR   arrayEnd3   
0600                ARRAYEND2:      ; word
0600   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0603   77                     LD   (hl),a   ; write lsb of array item
0604   23                     INC   hl   ; move to msb of array item
0605   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0608   77                     LD   (hl),a   ; write msb of array item
0609   23                     INC   hl   ; move to next word in array
060A   FD 2B                  DEC   iy   ; move to next word on stack
060C   FD 2B                  DEC   iy   
060E   0B                     DEC   bc   ; dec items count
060F   79                     LD   a,c   ; if not zero loop
0610   B0                     OR   b   
0611   20 ED                  JR   nz,arrayEnd2   
0613                ARRAYEND3:      
0613   EB                     EX   de,hl   ; de = end of array, hl = BP
0614   F9                     LD   sp,hl   ; sp = BP
0615   E1                     POP   hl   ; de = end of array, hl = old BP
0616   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0617   FD 62                  LD   iyh,d   
0619   FD 6B                  LD   iyl,e   
061B   D1                     POP   de   ; pop arg_list (discard)
061C   D1                     POP   de   ; pop ScopeBP (discard)
061D   D1                     POP   de   ; pop IP (discard)
061E   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = array[-2]
0622   22 A6 18               LD   (vHeapPtr),hl   ; move heapPtr to end of array
0625   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
0629   13                     INC   de   ; de = array[0]
062A   13                     INC   de   
062B   D5                     PUSH   de   ; return array[0]
062C   DD E9                  JP   (ix)   
062E                             ; str -- num
062E                HASH:        
062E   E1                     POP   hl   
062F   C5                     PUSH   bc   
0630   44 4D                  LD   bc,hl   
0632   CD 29 07               CALL   hashStr   
0635   C1                     POP   bc   
0636   E5                     PUSH   hl   
0637   DD E9                  JP   (ix)   
0639                             ; symbol func --
0639                DEF:         
0639   DD 21 40 06            LD   ix,def1   
063D   C3 0D 09               JP   func   
0640                DEF1:        
0640   DD 2A A4 18            LD   ix,(vNext)   
0644   D1                     POP   de   ; hl = symbol de = addr (sp) = IP
0645   60 69                  LD   hl,bc   
0647   18 24                  JR   let1   
0649                             ; symbol value --
0649                LET:         
0649   60 69                  LD   hl,bc   ; de = addr (sp) = IP (sp+2) = symbol
064B   E3                     EX   (sp),hl   
064C   EB                     EX   de,hl   
064D   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap
0650   36 CD                  LD   (hl),$cd   ; compile "call dolet"
0652   23                     INC   hl   
0653   36 7E                  LD   (hl),lsb(dolet)   
0655   23                     INC   hl   
0656   36 06                  LD   (hl),msb(dolet)   
0658   23                     INC   hl   
0659   73                     LD   (hl),e   
065A   23                     INC   hl   
065B   72                     LD   (hl),d   
065C   ED 5B A2 18            LD   de,(vHashStr)   
0660   23                     INC   hl   
0661   73                     LD   (hl),e   
0662   23                     INC   hl   
0663   72                     LD   (hl),d   
0664   2B                     DEC   hl   
0665   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = start of definition
0669   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
066C   E1                     POP   hl   ; de = addr, hl = IP
066D                LET1:        
066D   E3                     EX   (sp),hl   ; hl = symbol de = addr (sp) = IP
066E   44 4D                  LD   bc,hl   ; bc = symbol
0670   CD 46 07               CALL   defineEntry   
0673   38 06                  JR   c,let2   
0675   21 02 00               LD   hl,2   ; error 2: Let collision
0678   C3 09 0C               JP   error   
067B                LET2:        
067B   C1                     POP   bc   
067C   DD E9                  JP   (ix)   
067E                             ; addr -- value
067E                DOLET:       
067E   E1                     POP   hl   
067F   22 9E 18               LD   (vPointer),hl   ; store address in setter
0682                DOLET2:      
0682   5E                     LD   e,(hl)   
0683   23                     INC   hl   
0684   56                     LD   d,(hl)   
0685   23                     INC   hl   
0686                DOLET3:      
0686   D5                     PUSH   de   
0687   5E                     LD   e,(hl)   
0688   23                     INC   hl   
0689   56                     LD   d,(hl)   
068A   ED 53 A2 18            LD   (vHashStr),de   
068E   DD E9                  JP   (ix)   
0690                             ; symbol -- ptr
0690                ADDR:        
0690   E1                     POP   hl   ; hl = hash
0691   C5                     PUSH   bc   
0692   44 4D                  LD   bc,hl   
0694   CD 6C 07               CALL   lookupEntry   
0697   38 03                  JR   c,addr1   
0699   21 00 00               LD   hl,0   
069C                             ; call printStr		
069C                             ; .cstr "Undefined"
069C                             ; jp interpret
069C                ADDR1:       
069C   C1                     POP   bc   
069D   11 03 00               LD   de,3   ; return entry point + 3 to get address of let data
06A0   19                     ADD   hl,de   
06A1   22 9E 18               LD   (vPointer),hl   
06A4   E5                     PUSH   hl   
06A5   DD E9                  JP   (ix)   
06A7                SYMBOL:      
06A7                             ;     inc bc
06A7                             ;     ld de,PAD
06A7                             ;     ld h,msb(opcodesBase)                   ; this table identifies the char type
06A7                             ;     jr symbol1
06A7                             ; symbol0:                                 ; copy to PAD area
06A7                             ;     inc bc                              ; characters that are part of the identifier
06A7                             ;     inc de
06A7                             ; symbol1:                                 ; 0-9 A-Z a-z _
06A7                             ;     ld a,(bc)
06A7                             ;     ld (de),a
06A7                             ;     cp " "+1
06A7                             ;     jr c,symbol2
06A7                             ;     ld l,a
06A7                             ;     ld a,(hl)
06A7                             ;     cp lsb(ident_)
06A7                             ;     jr z,symbol0
06A7                             ;     cp lsb(num_)
06A7                             ;     jr z,symbol0
06A7                             ; symbol2:
06A7                             ;     dec bc
06A7                             ;     xor a
06A7                             ;     ld (de),a                           ; terminate string with NUL
06A7                             ;     push bc
06A7                             ;     ld bc,PAD
06A7                             ;     call hashStr                        ; hl = hash
06A7                             ;     pop bc
06A7                             ;     push hl
06A7   DD E9                  JP   (ix)   
06A9                IDENTU:      
06A9   0A                     LD   a,(bc)   ; a = identifier char
06AA   D6 41                  SUB   "A"   ; "A" = 0
06AC   18 03                  JR   ident1   
06AE                IDENTL:      
06AE   0A                     LD   a,(bc)   
06AF   D6 7B                  SUB   "a" + 26   
06B1                IDENT1:      
06B1   87                     ADD   a,a   
06B2   6F                     LD   l,a   
06B3   26 18                  LD   h,msb(vars)   
06B5   E9                     JP   (hl)   
06B6                FRAC:        
06B6   2A 98 18               LD   hl,(vFrac)   
06B9   E5                     PUSH   hl   
06BA   DD E9                  JP   (ix)   
06BC                          ALIGN   2   
06BC                SQRT1:       
06BC   E1                     POP   hl   
06BD   C5                     PUSH   bc   
06BE   CD A9 07               CALL   squareRoot   
06C1   ED 43 98 18            LD   (vFrac),bc   
06C5   C1                     POP   bc   
06C6   D5                     PUSH   de   
06C7   DD E9                  JP   (ix)   
06C9                ABS1:        
06C9   E1                     POP   hl   
06CA   CB 7C                  BIT   7,h   
06CC   C8                     RET   z   
06CD   AF                     XOR   a   
06CE   95                     SUB   l   
06CF   6F                     LD   l,a   
06D0   9F                     SBC   a,a   
06D1   94                     SUB   h   
06D2   67                     LD   h,a   
06D3   E5                     PUSH   hl   
06D4   DD E9                  JP   (ix)   
06D6                MOD:         
06D6   D1                     POP   de   ; get first value
06D7   E1                     POP   hl   ; get 2nd value
06D8   C5                     PUSH   bc   ; preserve the IP
06D9   44 4D                  LD   bc,hl   
06DB   CD 90 07               CALL   divide   
06DE   C1                     POP   bc   
06DF   E5                     PUSH   hl   ; push remainder
06E0   DD E9                  JP   (ix)   
06E2                             ; hl = value1, de = value2
06E2                             ; hl = result
06E2                EQUALS:      
06E2   B7                     OR   a   ; reset the carry flag
06E3   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
06E5   28 10                  JR   z,true1   
06E7   C3 FD 06               JP   false1   
06EA                             ; hl = value1 de = value2
06EA                             ; hl = result
06EA                LESSTHANEQ:      
06EA   B7                     OR   a   
06EB   ED 52                  SBC   hl,de   
06ED   18 05                  JR   lessthan1   
06EF                             ; hl = value1 de = value2
06EF                             ; hl = result
06EF                LESSTHAN:      
06EF   B7                     OR   a   
06F0   ED 52                  SBC   hl,de   
06F2   28 09                  JR   z,false1   
06F4                LESSTHAN1:      
06F4   FA FD 06               JP   m,false1   
06F7                TRUE1:       
06F7   21 FF FF               LD   hl,TRUE   
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                NULL1:       
06FD                FALSE1:      
06FD   21 00 00               LD   hl,FALSE   
0700   E5                     PUSH   hl   
0701   DD E9                  JP   (ix)   
0703                             ; Z80 port input
0703                             ; port -- value
0703                INPUT:       
0703   E1                     POP   hl   
0704   59                     LD   e,c   ; save IP
0705   4D                     LD   c,l   
0706   ED 68                  IN   l,(c)   
0708   26 00                  LD   h,0   
070A   4B                     LD   c,e   ; restore IP
070B   E5                     PUSH   hl   
070C   DD E9                  JP   (ix)   
070E                             ; Z80 port output
070E                             ; value port --
070E                OUTPUT:      
070E   E1                     POP   hl   
070F   59                     LD   e,c   ; save IP
0710   4D                     LD   c,l   
0711   E1                     POP   hl   
0712   ED 69                  OUT   (c),l   
0714   4B                     LD   c,e   ; restore IP
0715   DD E9                  JP   (ix)   
0717                KEY:         
0717   CD 81 00               CALL   getchar   
071A   26 00                  LD   h,0   
071C   6F                     LD   l,a   
071D   E5                     PUSH   hl   
071E   DD E9                  JP   (ix)   
0720                NEG:         
0720   21 00 00               LD   hl,0   ; NEGate the value on top of stack (2's complement)
0723   D1                     POP   de   
0724   C3 94 03               JP   sub2   ; use the SUBtract routine
0727                FILTER:      
0727                MAP:         
0727                SCAN:        
0727   DD E9                  JP   (ix)   
0729                             ; -------------------------------------------------------------------------------
0729                             ; hash C-string
0729                             ; BC = str
0729                             ; HL = hash
0729                HASHSTR:      
0729   ED 43 A2 18            LD   (vHashStr),bc   ; store source string
072D   21 00 00               LD   hl,0   
0730                HASHSTR1:      
0730   0A                     LD   a,(bc)   ; load next char
0731   03                     INC   bc   
0732   FE 00                  CP   0   ; NUL?
0734   C8                     RET   z   
0735                HASHSTR2:      
0735   16 00                  LD   d,0   
0737   5F                     LD   e,a   
0738   19                     ADD   hl,de   
0739   54 5D                  LD   de,hl   ; hl *= 193 (11000001)
073B   29                     ADD   hl,hl   ; shift left
073C   19                     ADD   hl,de   ; add
073D   29                     ADD   hl,hl   ; shift left
073E   29                     ADD   hl,hl   ; shift left
073F   29                     ADD   hl,hl   ; shift left
0740   29                     ADD   hl,hl   ; shift left
0741   29                     ADD   hl,hl   ; shift left
0742   29                     ADD   hl,hl   ; shift left
0743   19                     ADD   hl,de   ; add
0744   18 EA                  JR   hashStr1   
0746                             ; add entry to hash slots and hash pointers
0746                             ; bc = hash (b = hi, c = lo), de = addr
0746                             ; sets carry if successful
0746                DEFINEENTRY:      
0746   CB 21                  SLA   c   ; lo = lo * 2
0748   69                     LD   l,c   ; lo1 = lo
0749   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
074B                DEFINEENTRY0:      
074B   7E                     LD   a,(hl)   ; a = (lo1)
074C   FE FF                  CP   UNUSED   ; is it unused?
074E   28 12                  JR   z,defineEntry3   ; yes, add entry
0750   79                     LD   a,c   ; a = lo
0751   BE                     CP   (hl)   ; compare (lo1) with lo
0752   20 06                  JR   nz,defineEntry1   ; no match loop around
0754   2C                     INC   l   
0755   78                     LD   a,b   ; a = hi
0756   BE                     CP   (hl)   ; compare (lo1+1) with hi
0757   28 07                  JR   z,defineEntry2   ; identical hash, collision, exit
0759   2D                     DEC   l   ; restore l
075A                DEFINEENTRY1:      
075A   2C                     INC   l   ; try next entry
075B   2C                     INC   l   
075C   79                     LD   a,c   ; compare lo and lo1
075D   BD                     CP   l   ; if equal then there's no space left, reject
075E   20 EB                  JR   nz,defineEntry0   
0760                DEFINEENTRY2:      
0760   B7                     OR   a   ; clear carry flag, failure
0761   C9                     RET      
0762                DEFINEENTRY3:      ; new entry
0762   71                     LD   (hl),c   ; (lo1) = hash lo
0763   23                     INC   hl   
0764   70                     LD   (hl),b   ; (lo1 + 1) = hash hi
0765   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
0767   72                     LD   (hl),d   
0768   2B                     DEC   hl   
0769   73                     LD   (hl),e   ; (slot + 2) = address
076A   37                     SCF      ; set carry flag, success
076B   C9                     RET      
076C                             ; looks up hash and returns address
076C                             ; bc = hash
076C                             ; returns addr in hl, sets carry if successful
076C                LOOKUPENTRY:      
076C   CB 21                  SLA   c   ; lo = lo * 2
076E   69                     LD   l,c   ; lo1 = lo
076F   26 1C                  LD   h,msb(hashSlots)   ; hl = slots[lo*4]
0771                LOOKUPENTRY0:      
0771   7E                     LD   a,(hl)   ; a = (hl), slot
0772   FE FF                  CP   UNUSED   ; is it unused?
0774   28 EA                  JR   z,defineEntry2   ; yes, does not exist
0776   79                     LD   a,c   ; a = lo
0777   BE                     CP   (hl)   ; compare (lo1) with lo
0778   20 06                  JR   nz,lookupEntry1   ; no match loop around
077A   2C                     INC   l   
077B   78                     LD   a,b   ; a = hi
077C   BE                     CP   (hl)   ; compare (lo1+1) with hi
077D   28 09                  JR   z,lookupEntry3   
077F   2D                     DEC   l   
0780                LOOKUPENTRY1:      
0780   2C                     INC   l   
0781   2C                     INC   l   
0782   79                     LD   a,c   
0783   BD                     CP   l   ; no space left, reject
0784   20 EB                  JR   nz,lookupEntry0   
0786                LOOKUPENTRY2:      
0786   B7                     OR   a   ; clear carry flag, failure
0787   C9                     RET      
0788                LOOKUPENTRY3:      
0788   26 1D                  LD   h,msb(hashWords)   ; hl = slots[lo*4]
078A   56                     LD   d,(hl)   
078B   2D                     DEC   l   ; restore l
078C   5E                     LD   e,(hl)   ; (slot + 2) = address
078D   EB                     EX   de,hl   
078E   37                     SCF      
078F   C9                     RET      
0790                             ; division subroutine.
0790                             ; bc: divisor, de: dividend, hl: remainder
0790                DIVIDE:      
0790   21 00 00               LD   hl,0   ; zero the remainder
0793   3E 10                  LD   a,16   ; loop counter
0795                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0795   CB 21                  SLA   c   
0797   CB 10                  RL   b   
0799   ED 6A                  ADC   hl,hl   
079B   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
079D   38 03                  JR   c,divide2   
079F   0C                     INC   c   
07A0   18 01                  JR   divide3   
07A2                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
07A2   19                     ADD   hl,de   
07A3                DIVIDE3:      
07A3   3D                     DEC   a   
07A4   20 EF                  JR   nz,divide1   
07A6   50 59                  LD   de,bc   ; result from bc to de
07A8   C9                     RET      
07A9                             ; squareroot
07A9                             ; Input: HL = value
07A9                             ; Result: DE = square root BC = remainder
07A9                SQUAREROOT:      
07A9   01 00 08               LD   bc,0800h   
07AC   59                     LD   e,c   
07AD   AF                     XOR   a   
07AE                SQUAREROOT1:      
07AE   29                     ADD   hl,hl   
07AF   CB 11                  RL   c   
07B1   ED 6A                  ADC   hl,hl   
07B3   CB 11                  RL   c   
07B5   30 02                  JR   nc,$+4   
07B7   CB C5                  SET   0,l   
07B9   7B                     LD   a,e   
07BA   87                     ADD   a,a   
07BB   5F                     LD   e,a   
07BC   87                     ADD   a,a   
07BD   CB 45                  BIT   0,l   
07BF   20 03                  JR   nz,$+5   
07C1   91                     SUB   c   
07C2   30 05                  JR   nc,squareRoot4   
07C4   79                     LD   a,c   
07C5   93                     SUB   e   
07C6   1C                     INC   e   
07C7   93                     SUB   e   
07C8   4F                     LD   c,a   
07C9                SQUAREROOT4:      
07C9   10 E3                  DJNZ   squareRoot1   
07CB   CB 45                  BIT   0,l   
07CD   28 01                  JR   z,squareRoot5   
07CF   04                     INC   b   
07D0                SQUAREROOT5:      
07D0   16 00                  LD   d,0   
07D2   C9                     RET      
07D3                             ; print decimal
07D3                             ; hl = value
07D3                PRTDEC:      
07D3   CB 7C                  BIT   7,h   
07D5   28 0B                  JR   z,prtdec0   
07D7   3E 2D                  LD   a,"-"   
07D9   CD 85 00               CALL   putchar   
07DC   AF                     XOR   a   
07DD   95                     SUB   l   
07DE   6F                     LD   l,a   
07DF   9F                     SBC   a,a   
07E0   94                     SUB   h   
07E1   67                     LD   h,a   
07E2                PRTDEC0:      
07E2   C5                     PUSH   bc   
07E3   0E 00                  LD   c,0   ; leading zeros flag = false
07E5   11 F0 D8               LD   de,-10000   
07E8   CD 04 08               CALL   prtdec1   
07EB   11 18 FC               LD   de,-1000   
07EE   CD 04 08               CALL   prtdec1   
07F1   11 9C FF               LD   de,-100   
07F4   CD 04 08               CALL   prtdec1   
07F7   1E F6                  LD   e,-10   
07F9   CD 04 08               CALL   prtdec1   
07FC   0C                     INC   c   ; flag = true for at least digit
07FD   1E FF                  LD   e,-1   
07FF   CD 04 08               CALL   prtdec1   
0802   C1                     POP   bc   
0803   C9                     RET      
0804                PRTDEC1:      
0804   06 2F                  LD   b,"0"-1   
0806                PRTDEC2:      
0806   04                     INC   b   
0807   19                     ADD   hl,de   
0808   38 FC                  JR   c,prtdec2   
080A   ED 52                  SBC   hl,de   
080C   3E 30                  LD   a,"0"   
080E   B8                     CP   b   
080F   20 05                  JR   nz,prtdec3   
0811   AF                     XOR   a   
0812   B1                     OR   c   
0813   C8                     RET   z   
0814   18 01                  JR   prtdec4   
0816                PRTDEC3:      
0816   0C                     INC   c   
0817                PRTDEC4:      
0817   78                     LD   a,b   
0818   C3 85 00               JP   putchar   
081B                PRTHEX:      ; display hl as a 16-bit number in hex.
081B   C5                     PUSH   bc   ; preserve the IP
081C   7C                     LD   a,h   
081D   CD 26 08               CALL   prthex2   
0820   7D                     LD   a,l   
0821   CD 26 08               CALL   prthex2   
0824   C1                     POP   bc   
0825   C9                     RET      
0826                PRTHEX2:      
0826   4F                     LD   c,a   
0827   1F                     RRA      
0828   1F                     RRA      
0829   1F                     RRA      
082A   1F                     RRA      
082B   CD 2F 08               CALL   prthex3   
082E   79                     LD   a,c   
082F                PRTHEX3:      
082F   E6 0F                  AND   0x0F   
0831   C6 90                  ADD   a,0x90   
0833   27                     DAA      
0834   CE 40                  ADC   a,0x40   
0836   27                     DAA      
0837   C3 85 00               JP   putchar   
083A                PRTSTR0:      
083A   CD 85 00               CALL   putchar   
083D   23                     INC   hl   
083E                PRTSTR:      
083E   7E                     LD   a,(hl)   
083F   B7                     OR   a   
0840   20 F8                  JR   nz,prtstr0   
0842   C9                     RET      
0843                             ; **************************************************************************
0843                             ; calculate nesting value
0843                             ; a is char to be tested,
0843                             ; e is the nesting value (initially 0)
0843                             ; e is increased by ( and [
0843                             ; e is decreased by ) and ]
0843                             ; e has its bit 7 toggled by `
0843                             ; limited to 127 levels
0843                             ; **************************************************************************
0843                NESTING:      
0843   FE 22                  CP   $22   ; quote char
0845   20 0A                  JR   nz,nesting1   
0847   CB 7B                  BIT   7,e   
0849   28 03                  JR   z,nesting1a   
084B   CB BB                  RES   7,e   
084D   C9                     RET      
084E                NESTING1A:      
084E   CB FB                  SET   7,e   
0850   C9                     RET      
0851                NESTING1:      
0851   CB 7B                  BIT   7,e   
0853   C0                     RET   nz   
0854   FE 7B                  CP   "{"   
0856   28 08                  JR   z,nesting2   
0858   FE 5B                  CP   "["   
085A   28 04                  JR   z,nesting2   
085C   FE 28                  CP   "("   
085E   20 02                  JR   nz,nesting3   
0860                NESTING2:      
0860   1C                     INC   e   
0861   C9                     RET      
0862                NESTING3:      
0862   FE 7D                  CP   "}"   
0864   28 07                  JR   z,nesting4   
0866   FE 5D                  CP   "]"   
0868   28 03                  JR   z,nesting4   
086A   FE 29                  CP   ")"   
086C   C0                     RET   nz   
086D                NESTING4:      
086D   1D                     DEC   e   
086E   C9                     RET      
086F                PROMPT:      
086F   CD 7F 08               CALL   printStr   
0872   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0877   C9                     RET      
0878                CRLF:        
0878   CD 7F 08               CALL   printStr   
087B   0D 0A 00               .CSTR   "\r\n"   
087E   C9                     RET      
087F                             ; prints a null teminated string
087F                             ; the string should be immedaitely following the call
087F                PRINTSTR:      
087F   E3                     EX   (sp),hl   ; swap			
0880   CD 3E 08               CALL   prtstr   
0883   23                     INC   hl   ; inc past NUL
0884   E3                     EX   (sp),hl   ; put it back	
0885   C9                     RET      
0886                             ; executes a null teminated string (null executes exit_)
0886                             ; the string should be immedaitely following the call
0886                EXECSTR:      ; create a root stack frame
0886                             ; pop bc                      ; bc = code*
0886                             ; dec bc                      ; dec to prepare for next routine
0886                             ; ld de,0
0886                             ; push de                     ; push fake IP
0886                             ; push de                     ; push null arglist*
0886                             ; push de                     ; push null first_arg*
0886                             ; push de                     ; push fake BP
0886                             ; jp (ix)
0886                BRANCH:      ; executes the address on the stack
0886   C1                     POP   bc   ; bc = code*
0887   0B                     DEC   bc   ; dec to prepare for next routine
0888   DD E9                  JP   (ix)   
088A                DEFINE:      
088A   E1                     POP   hl   
088B   7E                     LD   a,(hl)   
088C   23                     INC   hl   
088D   44 4D                  LD   bc,hl   
088F   5F                     LD   e,a   
0890   16 00                  LD   d,0   
0892   19                     ADD   hl,de   
0893   5E                     LD   e,(hl)   
0894   23                     INC   hl   
0895   56                     LD   d,(hl)   
0896   23                     INC   hl   
0897   E5                     PUSH   hl   ; bc = str
0898   D5                     PUSH   de   
0899   CD 29 07               CALL   hashStr   ; hl = hash
089C   D1                     POP   de   
089D   44 4D                  LD   bc,hl   
089F   C3 46 07               JP   defineEntry   
08A2                             ; arg1 .. argn func -- ?
08A2                CALL:        
08A2   E1                     POP   hl   
08A3   E9                     JP   (hl)   
08A4                             ; execute a block of code which ends with }
08A4                             ; creates a root scope if BP == stack
08A4                             ; else uses outer scope
08A4                EXEC:        
08A4   D1                     POP   de   ; de = block*
08A5                EXEC0:       
08A5   7B                     LD   a,e   ; if block* == null, exit
08A6   B2                     OR   d   
08A7   20 02                  JR   nz,exec1   
08A9   DD E9                  JP   (ix)   
08AB                EXEC1:       
08AB   C5                     PUSH   bc   ; push IP
08AC   21 80 18               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
08AF   FD 44                  LD   b,iyh   
08B1   FD 4D                  LD   c,iyl   
08B3   B7                     OR   a   ; hl = stack - BP = root_scope
08B4   ED 42                  SBC   hl,bc   
08B6   7D                     LD   a,l   ; if root_scope, skip
08B7   B4                     OR   h   
08B8   28 11                  JR   z,exec2   
08BA   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
08BD   FD 46 05               LD   b,(iy+5)   
08C0   C5                     PUSH   bc   
08C1   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
08C4   FD 46 03               LD   b,(iy+3)   
08C7   60 69                  LD   hl,bc   
08C9   18 34                  JR   doCall4   
08CB                EXEC2:       
08CB   E5                     PUSH   hl   ; push arg_list (null)
08CC   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
08CF   39                     ADD   hl,sp   
08D0   18 2D                  JR   doCall4   ; 
08D2                             ; call with args
08D2                             ; creates a scope
08D2                             ; code* -- ?
08D2                DOCALL:      ; execute code at pointer
08D2   E1                     POP   hl   ; hl = code*
08D3   7D                     LD   a,l   ; if code* == null, skip
08D4   B4                     OR   h   
08D5   28 34                  JR   z,doCall5   
08D7   5E                     LD   e,(hl)   ; de = block*, hl = arg_list*
08D8   23                     INC   hl   
08D9   56                     LD   d,(hl)   
08DA   23                     INC   hl   
08DB   EB                     EX   de,hl   
08DC   7D                     LD   a,l   ; if arg_list* != null skip
08DD   B4                     OR   h   
08DE   20 08                  JR   nz,doCall1   
08E0   C5                     PUSH   bc   ; push IP
08E1   E5                     PUSH   hl   ; push arg_list (null)
08E2   21 04 00               LD   hl,4   ; hl = first_arg (BP + 8)
08E5   39                     ADD   hl,sp   
08E6   18 17                  JR   doCall4   
08E8                DOCALL1:      
08E8   2B                     DEC   hl   ; a = num_locals*, de = block* hl = arg_list*
08E9   7E                     LD   a,(hl)   
08EA   23                     INC   hl   
08EB   B7                     OR   a   
08EC   28 05                  JR   z,doCall3   
08EE                DOCALL2:      
08EE   3B                     DEC   sp   
08EF   3B                     DEC   sp   
08F0   3D                     DEC   a   
08F1   20 FB                  JR   nz,doCall2   
08F3                DOCALL3:      
08F3   C5                     PUSH   bc   ; push IP
08F4   E5                     PUSH   hl   ; push arg_list*
08F5   2B                     DEC   hl   ; hl = num_args*
08F6   2B                     DEC   hl   
08F7   7E                     LD   a,(hl)   ; hl = num_args * 2
08F8   87                     ADD   a,a   
08F9   C6 04                  ADD   a,4   ; offset for IP and arg_list
08FB   6F                     LD   l,a   
08FC   26 00                  LD   h,$0   
08FE   39                     ADD   hl,sp   ; hl = first_arg*
08FF                DOCALL4:      
08FF   E5                     PUSH   hl   ; push first_arg
0900   FD E5                  PUSH   iy   ; push BP
0902   FD 21 00 00            LD   iy,0   ; BP = SP
0906   FD 39                  ADD   iy,sp   
0908   42 4B                  LD   bc,de   ; bc = de = block*-1
090A   0B                     DEC   bc   
090B                DOCALL5:      
090B   DD E9                  JP   (ix)   
090D                             ; arg_list* block* -- ptr
090D                FUNC:        
090D   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heapptr
0910   36 CD                  LD   (hl),$cd   ; compile "call doCall"
0912   23                     INC   hl   
0913   36 D2                  LD   (hl),lsb(doCall)   
0915   23                     INC   hl   
0916   36 08                  LD   (hl),msb(doCall)   
0918   23                     INC   hl   
0919   D1                     POP   de   ; hl = heapPtr, de = block
091A   EB                     EX   de,hl   ; hl = heapPtr, de = arg_list*, (sp) = block*
091B   E3                     EX   (sp),hl   
091C   EB                     EX   de,hl   
091D   73                     LD   (hl),e   ; compile arg_list*
091E   23                     INC   hl   
091F   72                     LD   (hl),d   
0920   23                     INC   hl   
0921   D1                     POP   de   ; de = block*
0922   C5                     PUSH   bc   ; (sp) = IP
0923   06 01                  LD   b,1   ; b = nesting
0925                FUNC1:       
0925   1A                     LD   a,(de)   
0926   13                     INC   de   
0927   77                     LD   (hl),a   
0928   23                     INC   hl   
0929   FE 29                  CP   ")"   
092B   28 29                  JR   z,func4   
092D   FE 7D                  CP   "}"   
092F   28 25                  JR   z,func4   
0931   FE 5D                  CP   "]"   
0933   28 21                  JR   z,func4   
0935   FE 28                  CP   "("   
0937   28 12                  JR   z,func2   
0939   FE 7B                  CP   "{"   
093B   28 0E                  JR   z,func2   
093D   FE 5B                  CP   "["   
093F   28 0A                  JR   z,func2   
0941   FE 27                  CP   "'"   
0943   28 09                  JR   z,func3   
0945   FE 60                  CP   "`"   
0947   28 05                  JR   z,func3   
0949   18 DA                  JR   func1   
094B                FUNC2:       
094B   04                     INC   b   
094C   18 D7                  JR   func1   
094E                FUNC3:       
094E   3E 80                  LD   a,$80   
0950   A8                     XOR   b   
0951   47                     LD   b,a   
0952   20 D1                  JR   nz,func1   
0954   18 03                  JR   func4a   
0956                FUNC4:       
0956   05                     DEC   b   
0957   20 CC                  JR   nz,func1   ; get the next element
0959                FUNC4A:      
0959   23                     INC   hl   
095A   C1                     POP   bc   ; de = defstart, hl = IP
095B   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = defstart
095F   D5                     PUSH   de   
0960   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of definition
0963   DD E9                  JP   (ix)   
0965                             ; $a .. $z
0965                             ; -- value
0965                             ; returns value of arg
0965                ARG:         
0965   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0968   FD 56 05               LD   d,(iy+5)   
096B   EB                     EX   de,hl   
096C   7D                     LD   a,l   ; arg_list* == null, skip
096D   B4                     OR   h   
096E   28 1C                  JR   z,arg0a   
0970   2B                     DEC   hl   ; a = num_args, hl = arg_list*
0971   2B                     DEC   hl   
0972   7E                     LD   a,(hl)   
0973   23                     INC   hl   
0974   23                     INC   hl   
0975   B7                     OR   a   
0976   28 14                  JR   z,arg0a   ; num_args == 0, skip
0978   5F                     LD   e,a   ; e = a = num_args
0979   03                     INC   bc   ; a = next char = arg_name
097A   0A                     LD   a,(bc)   
097B   C5                     PUSH   bc   ; save IP
097C   43                     LD   b,e   ; b = e = num_args
097D   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0980   FD 56 03               LD   d,(iy+3)   
0983                ARG0:        
0983   1B                     DEC   de   ; a = arg_name, de = next arg*
0984   1B                     DEC   de   
0985   BE                     CP   (hl)   
0986   28 09                  JR   z,arg1   
0988   23                     INC   hl   ; hl = next arg_list*
0989   10 F8                  DJNZ   arg0   
098B   C1                     POP   bc   ; no match, restore IP
098C                ARG0A:       
098C   11 00 00               LD   de,0   ; return 0
098F   18 08                  JR   arg1a   
0991                ARG1:        
0991   C1                     POP   bc   ; restore IP
0992   EB                     EX   de,hl   ; hl = arg*
0993   22 9E 18               LD   (vPointer),hl   ; store arg* in setter
0996   5E                     LD   e,(hl)   
0997   23                     INC   hl   
0998   56                     LD   d,(hl)   ; de = arg
0999                ARG1A:       
0999   D5                     PUSH   de   ; push arg
099A   DD E9                  JP   (ix)   
099C                             ; closure:
099C                             ; array -- addr
099C                CLOSURE:      
099C   2A A6 18               LD   hl,(vHeapPtr)   ; hl = heap_ptr
099F   36 CD                  LD   (hl),$cd   ; compile "call doclosure"
09A1   23                     INC   hl   
09A2   36 B6                  LD   (hl),lsb(doClosure)   
09A4   23                     INC   hl   
09A5   36 09                  LD   (hl),msb(doClosure)   
09A7   D1                     POP   de   
09A8   23                     INC   hl   
09A9   73                     LD   (hl),e   
09AA   23                     INC   hl   
09AB   72                     LD   (hl),d   
09AC   ED 5B A6 18            LD   de,(vHeapPtr)   ; de = closure start
09B0   D5                     PUSH   de   
09B1   22 A6 18               LD   (vHeapPtr),hl   ; update heap ptr to end of closure
09B4   DD E9                  JP   (ix)   
09B6                             ; code* -- arr1 arr2 .. arrn func
09B6                DOCLOSURE:      
09B6   E1                     POP   hl   ; hl = code*
09B7   5E                     LD   e,(hl)   ; de = array
09B8   23                     INC   hl   
09B9   56                     LD   d,(hl)   
09BA   23                     INC   hl   
09BB   7B                     LD   a,e   ; de == null, skip
09BC   B2                     OR   d   
09BD   28 17                  JR   z,doClosure3   
09BF   EB                     EX   de,hl   ; hl = array
09C0   ED 43 A8 18            LD   (vTemp1),bc   ; save IP
09C4   2B                     DEC   hl   ; bc = count
09C5   46                     LD   b,(hl)   
09C6   2B                     DEC   hl   
09C7   4E                     LD   c,(hl)   
09C8   23                     INC   hl   ; push each item on stack
09C9   23                     INC   hl   
09CA   18 06                  JR   doClosure2   
09CC                DOCLOSURE1:      
09CC   5E                     LD   e,(hl)   
09CD   23                     INC   hl   
09CE   56                     LD   d,(hl)   
09CF   23                     INC   hl   
09D0   D5                     PUSH   de   
09D1   0B                     DEC   bc   
09D2                DOCLOSURE2:      
09D2   79                     LD   a,c   
09D3   B0                     OR   b   
09D4   20 F6                  JR   nz,doClosure1   
09D6                DOCLOSURE3:      
09D6   ED 4B A8 18            LD   bc,(vTemp1)   ; restore IP
09DA   DD E9                  JP   (ix)   
09DC                             ; ; readIdent
09DC                             ; ; reads identifier from input stream into buffer
09DC                             ; ; input: bc = IP, de = buffer
09DC                             ; readIdent:
09DC                             ;     ld h,msb(opcodesBase)               ; this table identifies the char type
09DC                             ;     jr readIdent1
09DC                             ; readIdent0:                             ; copy to PAD area
09DC                             ;     inc bc                              ; characters that are part of the identifier
09DC                             ;     inc de
09DC                             ; readIdent1:                             ; 0-9 A-Z a-z
09DC                             ;     ld a,(bc)
09DC                             ;     ld (de),a
09DC                             ;     cp " "+1
09DC                             ;     jr c,readIdent2
09DC                             ;     ld l,a
09DC                             ;     ld a,(hl)
09DC                             ;     cp lsb(ident_)
09DC                             ;     jr z,readIdent0
09DC                             ;     cp lsb(num_)
09DC                             ;     jr z,readIdent0
09DC                             ; readIdent2:
09DC                             ;     dec bc
09DC                             ;     xor a
09DC                             ;     ld (de),a                           ; terminate string with NUL
09DC                             ;     ret
09DC                INIT:        
09DC   DD 2A A4 18            LD   ix,(vNext)   
09E0   FD 21 80 18            LD   iy,STACK   
09E4   21 80 01               LD   hl,isysVars   
09E7   11 98 18               LD   de,sysVars   
09EA   01 10 00               LD   bc,8 * 2   
09ED   ED B0                  LDIR      
09EF   21 AA 18               LD   hl,vars   
09F2   06 34                  LD   b,26 + 26   
09F4                INIT0:       
09F4   36 00                  LD   (hl),0   
09F6   CF                     RST   $08   
09F7   23                     INC   hl   
09F8   36 00                  LD   (hl),0   
09FA   23                     INC   hl   
09FB   36 00                  LD   (hl),0   
09FD   23                     INC   hl   
09FE   10 F4                  DJNZ   init0   
0A00   3E FF                  LD   a,UNUSED   
0A02   06 00                  LD   b,0   
0A04   21 00 1C               LD   hl,hashSlots   
0A07                INIT1:       
0A07   77                     LD   (hl),a   
0A08   23                     INC   hl   
0A09   10 FC                  DJNZ   init1   
0A0B   CD 8A 08               CALL   define   
0A0E   04 61 62 73 00         .PSTR   "abs",0   
0A13   C9 06                  DW   abs1   
0A15   CD 8A 08               CALL   define   
0A18   05 61 64 64 72 00      .PSTR   "addr",0   
0A1E   90 06                  DW   addr   
0A20   CD 8A 08               CALL   define   
0A23   06 62 79 74 65 73 00   .PSTR   "bytes",0   
0A2A   AB 05                  DW   bytes   
0A2C   CD 8A 08               CALL   define   
0A2F   05 63 61 6C 6C 00      .PSTR   "call",0   
0A35   A2 08                  DW   call   
0A37   CD 8A 08               CALL   define   
0A3A   08 63 6C 6F 73 75 72 65 00 .PSTR   "closure",0   
0A43   9C 09                  DW   closure   
0A45   CD 8A 08               CALL   define   
0A48   04 64 65 66 00         .PSTR   "def",0   
0A4D   39 06                  DW   def   
0A4F   CD 8A 08               CALL   define   
0A52   05 65 78 65 63 00      .PSTR   "exec",0   
0A58   A4 08                  DW   exec   
0A5A   CD 8A 08               CALL   define   
0A5D   06 66 61 6C 73 65 00   .PSTR   "false",0   
0A64   FD 06                  DW   false1   
0A66   CD 8A 08               CALL   define   
0A69   07 66 69 6C 74 65 72 00 .PSTR   "filter",0   
0A71   27 07                  DW   filter   
0A73   CD 8A 08               CALL   define   
0A76   05 66 72 61 63 00      .PSTR   "frac",0   
0A7C   B6 06                  DW   frac   
0A7E   CD 8A 08               CALL   define   
0A81   05 66 75 6E 63 00      .PSTR   "func",0   
0A87   0D 09                  DW   func   
0A89   CD 8A 08               CALL   define   
0A8C   05 68 61 73 68 00      .PSTR   "hash",0   
0A92   2E 06                  DW   hash   
0A94   CD 8A 08               CALL   define   
0A97   06 69 6E 70 75 74 00   .PSTR   "input",0   
0A9E   03 07                  DW   input   
0AA0   CD 8A 08               CALL   define   
0AA3   03 69 66 00            .PSTR   "if",0   
0AA7   60 05                  DW   if   
0AA9   CD 8A 08               CALL   define   
0AAC   05 69 66 74 65 00      .PSTR   "ifte",0   
0AB2   65 05                  DW   ifte   
0AB4   CD 8A 08               CALL   define   
0AB7   04 6B 65 79 00         .PSTR   "key",0   
0ABC   17 07                  DW   key   
0ABE   CD 8A 08               CALL   define   
0AC1   04 6C 65 74 00         .PSTR   "let",0   
0AC6   49 06                  DW   let   
0AC8   CD 8A 08               CALL   define   
0ACB   05 6C 6F 6F 70 00      .PSTR   "loop",0   
0AD1   A4 05                  DW   loop   
0AD3   CD 8A 08               CALL   define   
0AD6   04 6D 61 70 00         .PSTR   "map",0   
0ADB   27 07                  DW   map   
0ADD   CD 8A 08               CALL   define   
0AE0   04 6D 6F 64 00         .PSTR   "mod",0   
0AE5   D6 06                  DW   mod   
0AE7   CD 8A 08               CALL   define   
0AEA   04 6E 65 67 00         .PSTR   "neg",0   
0AEF   20 07                  DW   neg   
0AF1   CD 8A 08               CALL   define   
0AF4   04 6E 69 6C 00         .PSTR   "nil",0   
0AF9   FD 06                  DW   null1   
0AFB   CD 8A 08               CALL   define   
0AFE   07 6F 75 74 70 75 74 00 .PSTR   "output",0   
0B06   0E 07                  DW   output   
0B08   CD 8A 08               CALL   define   
0B0B   05 73 63 61 6E 00      .PSTR   "scan",0   
0B11   01 00                  DW   scan   
0B13   CD 8A 08               CALL   define   
0B16   04 73 65 74 00         .PSTR   "set",0   
0B1B   94 05                  DW   set   
0B1D   CD 8A 08               CALL   define   
0B20   04 73 68 6C 00         .PSTR   "shl",0   
0B25   DB 03                  DW   shl   
0B27   CD 8A 08               CALL   define   
0B2A   04 73 68 72 00         .PSTR   "shr",0   
0B2F   EB 03                  DW   shr   
0B31   CD 8A 08               CALL   define   
0B34   05 73 71 72 74 00      .PSTR   "sqrt",0   
0B3A   BC 06                  DW   sqrt1   
0B3C   CD 8A 08               CALL   define   
0B3F   07 73 77 69 74 63 68 00 .PSTR   "switch",0   
0B47   72 05                  DW   switch   
0B49   CD 8A 08               CALL   define   
0B4C   05 74 72 75 65 00      .PSTR   "true",0   
0B52   F7 06                  DW   true1   
0B54   CD 8A 08               CALL   define   
0B57   06 77 6F 72 64 73 00   .PSTR   "words",0   
0B5E   A6 05                  DW   words   
0B60   C9                     RET      
0B61                START:       
0B61   31 80 18               LD   sp,STACK   ; start of monty
0B64   CD DC 09               CALL   init   ; setups
0B67   CD 7F 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B6A   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0B77                INTERPRET:      
0B77   CD 6F 08               CALL   prompt   
0B7A   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0B7D   ED 43 9C 18            LD   (vTIBPtr),bc   
0B81                INTERPRET2:      ; calc nesting (a macro might have changed it)
0B81   1E 00                  LD   e,0   ; initilize nesting value
0B83   C5                     PUSH   bc   ; save offset into TIB,
0B84                             ; bc is also the count of chars in TIB
0B84   21 00 1A               LD   hl,TIB   ; hl is start of TIB
0B87   18 06                  JR   interpret4   
0B89                INTERPRET3:      
0B89   7E                     LD   a,(hl)   ; a = char in TIB
0B8A   23                     INC   hl   ; inc pointer into TIB
0B8B   0B                     DEC   bc   ; dec count of chars in TIB
0B8C   CD 43 08               CALL   nesting   ; update nesting value
0B8F                INTERPRET4:      
0B8F   79                     LD   a,c   ; is count zero?
0B90   B0                     OR   b   
0B91   20 F6                  JR   nz,interpret3   ; if not loop
0B93   C1                     POP   bc   ; restore offset into TIB
0B94                INTERPRET5:      
0B94   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B97   FE 20                  CP   $20   ; compare to space
0B99   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0B9B   FE 00                  CP   $0   ; is it end of string? NUL end of string
0B9D                             ; ???? NEEDED?
0B9D   28 27                  JR   z,interpret8   
0B9F   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BA1   28 10                  JR   z,interpret7   ; if anything else its macro/control
0BA3                             ; macro
0BA3                             ;  ld (vTIBPtr),bc
0BA3                             ;  ld hl,ctrlCodes
0BA3                             ;  add a,l			            ; look up key of macros
0BA3                             ;  ld l,a
0BA3                             ;  ld e,(hl)
0BA3                             ;  ld a,e
0BA3                             ;  or a
0BA3                             ;  jr z,macro1
0BA3                             ;  ld d,msb(macros)
0BA3                             ;  push de
0BA3                             ;  call call		            ; monty exec_ operation and jump to it
0BA3                             ;  db DC1,0
0BA3                             ; macro1:
0BA3                             ;  ld bc,(vTIBPtr)
0BA3   18 DC                  JR   interpret2   
0BA5                INTERPRET6:      
0BA5   21 00 1A               LD   hl,TIB   
0BA8   09                     ADD   hl,bc   
0BA9   77                     LD   (hl),a   ; store the character in textbuf
0BAA   03                     INC   bc   
0BAB   CD 85 00               CALL   putchar   ; echo character to screen
0BAE   CD 43 08               CALL   nesting   
0BB1   18 E1                  JR   interpret5   ; wait for next character
0BB3                INTERPRET7:      
0BB3   21 00 1A               LD   hl,TIB   
0BB6   09                     ADD   hl,bc   
0BB7   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0BB9   23                     INC   hl   
0BBA   36 0A                  LD   (hl),"\n"   
0BBC   23                     INC   hl   
0BBD   03                     INC   bc   
0BBE   03                     INC   bc   
0BBF   CD 78 08               CALL   crlf   ; echo character to screen
0BC2   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0BC3   B7                     OR   a   
0BC4   20 CE                  JR   nz,interpret5   
0BC6                INTERPRET8:      
0BC6   ED 43 9C 18            LD   (vTIBPtr),bc   
0BCA   01 00 1A               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0BCD                             ; we pressed enter
0BCD   0B                     DEC   bc   
0BCE                NEXT:        
0BCE   03                     INC   bc   ; Increment the IP
0BCF   0A                     LD   a,(bc)   ; Get the next character and dispatch
0BD0   FE 20                  CP   " "   ; whitespace?
0BD2   28 FA                  JR   z,next   ; space? ignore
0BD4   38 0B                  JR   c,next1   
0BD6   FE 80                  CP   $80   ; if bit 7 = 1, treat as a big endian 15 bit address
0BD8   30 16                  JR   nc,next2   
0BDA   6F                     LD   l,a   ; index into table
0BDB   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0BDD   6E                     LD   l,(hl)   ; get low jump address
0BDE   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0BE0   E9                     JP   (hl)   ; Jump to routine
0BE1                NEXT1:       
0BE1                             ; cp ESC                      ; escape from interpreter, needed???
0BE1                             ; jr z,escape_
0BE1   FE 00                  CP   NUL   ; end of input string?
0BE3   28 11                  JR   z,exit_   
0BE5   FE 11                  CP   DC1   ; literal number
0BE7   28 10                  JR   z,literal_   
0BE9   FE 12                  CP   DC2   ; enter routine
0BEB   28 15                  JR   z,enter_   
0BED   C3 77 0B               JP   interpret   ; no, other whitespace, macros?
0BF0                NEXT2:       
0BF0   67                     LD   h,a   ; hl = big endian 15 bit address, ignore high bit
0BF1   03                     INC   bc   
0BF2   0A                     LD   a,(bc)   
0BF3   6F                     LD   l,a   
0BF4   29                     ADD   hl,hl   ; hl = word aligned 16 bit address
0BF5   E9                     JP   (hl)   
0BF6                             ; escape_:
0BF6                             ;     inc bc                      ; falls through
0BF6                EXIT_:       
0BF6   60 69                  LD   hl,bc   
0BF8   E9                     JP   (hl)   
0BF9                LITERAL_:      
0BF9   03                     INC   bc   
0BFA   0A                     LD   a,(bc)   
0BFB   6F                     LD   l,a   
0BFC   03                     INC   bc   
0BFD   0A                     LD   a,(bc)   
0BFE   67                     LD   h,a   
0BFF   E5                     PUSH   hl   
0C00   DD E9                  JP   (ix)   
0C02                ENTER_:      
0C02   03                     INC   bc   
0C03   0A                     LD   a,(bc)   
0C04   6F                     LD   l,a   
0C05   03                     INC   bc   
0C06   0A                     LD   a,(bc)   
0C07   67                     LD   h,a   
0C08   E9                     JP   (hl)   
0C09                ERROR:       
0C09   CD 7F 08               CALL   printStr   
0C0C   45 72 72 6F 72 00      .CSTR   "Error"   
0C12   CD D3 07               CALL   prtdec   
0C15   C3 77 0B               JP   interpret   
1800                          .ORG   RAMSTART   
1800                          DS   DSIZE   
1880                STACK:       
1880                TBPTR:    DS   2   ; reserved for tests
1882                RST08:    DS   2   
1884                RST10:    DS   2   
1886                RST18:    DS   2   
1888                RST20:    DS   2   
188A                RST28:    DS   2   
188C                RST30:    DS   2   ; 
188E                BAUD:     DS   2   ; 
1890                INTVEC:   DS   2   ; 
1892                NMIVEC:   DS   2   ; 
1894                GETCVEC:   DS   2   ; 
1896                PUTCVEC:   DS   2   ; 
1898                SYSVARS:      
1898                VFRAC:    DS   2   ; initialised sys variables
189A                VDATAWIDTH:   DS   2   ; 
189C                VTIBPTR:   DS   2   ; 
189E                VPOINTER:   DS   2   ; 
18A0                VLASTDEF:   DS   2   ; 
18A2                VHASHSTR:   DS   2   ; 
18A4                VNEXT:    DS   2   ; 
18A6                VHEAPPTR:   DS   2   ; 
18A8                VTEMP1:   DS   2   ; uninitialised sys variables
18AA                VARS:        
18AA                          DS   26 * 2 * 3   ; 52 vars x 3 bytes (RST LO HI)
1946                          ALIGN   $100   
1A00                TIB:      DS   TIBSIZE   
1B00                          ALIGN   $100   
1B00                PAD:      DS   $100   
1C00                          ALIGN   $100   
1C00                HASHSLOTS:   DS   $100   
1D00                          ALIGN   $100   
1D00                HASHWORDS:   DS   $100   
1E00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 111 IN IOSerial.asm
                    > USED AT LINE 117 IN IOSerial.asm
                    > USED AT LINE 123 IN IOSerial.asm
                    > USED AT LINE 129 IN IOSerial.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 141 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 189 IN IOSerial.asm
                    > USED AT LINE 54 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 1 IN ram.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
                    > USED AT LINE 487 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 298 IN IOSerial.asm
                    > USED AT LINE 311 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 303 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 315 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 486 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0727 DEFINED AT LINE 1174 IN monty.asm
                    > USED AT LINE 1928 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 152 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 174 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 176 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 182 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 185 IN IOSerial.asm
                    > USED AT LINE 446 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 293 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 294 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 297 IN IOSerial.asm
                    > USED AT LINE 301 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 309 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 310 IN IOSerial.asm
                    > USED AT LINE 314 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 434 IN IOSerial.asm
                    > USED AT LINE 1161 IN monty.asm
                    > USED AT LINE 1992 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 438 IN IOSerial.asm
                    > USED AT LINE 249 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
                    > USED AT LINE 1349 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
                    > USED AT LINE 1414 IN monty.asm
                    > USED AT LINE 1417 IN monty.asm
                    > USED AT LINE 2023 IN monty.asm
RESET:              008B DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 37 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 1128 IN monty.asm
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 1133 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
                    > USED AT LINE 1217 IN monty.asm
                    > USED AT LINE 1256 IN monty.asm
                    > USED AT LINE 1826 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 2063 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
                    > USED AT LINE 2065 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
                    > USED AT LINE 2067 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
MACROS:             0180 DEFINED AT LINE 59 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 64 IN monty.asm
                    > USED AT LINE 1810 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 112 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 215 IN monty.asm
NUM_:               0300 DEFINED AT LINE 217 IN monty.asm
                    > USED AT LINE 339 IN monty.asm
HEXNUM_:            0303 DEFINED AT LINE 220 IN monty.asm
ARG_:               0306 DEFINED AT LINE 223 IN monty.asm
STRING_:            0309 DEFINED AT LINE 226 IN monty.asm
ARG_LIST_:          030C DEFINED AT LINE 229 IN monty.asm
DOT_:               030F DEFINED AT LINE 232 IN monty.asm
DOT1:               031B DEFINED AT LINE 240 IN monty.asm
                    > USED AT LINE 237 IN monty.asm
DOT2:               0324 DEFINED AT LINE 245 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
DOT3:               032E DEFINED AT LINE 251 IN monty.asm
                    > USED AT LINE 247 IN monty.asm
                    > USED AT LINE 327 IN monty.asm
DOT4:               0332 DEFINED AT LINE 254 IN monty.asm
                    > USED AT LINE 239 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
INDEX_:             0339 DEFINED AT LINE 260 IN monty.asm
BLOCK_:             033C DEFINED AT LINE 263 IN monty.asm
BLOCKEND_:          033F DEFINED AT LINE 265 IN monty.asm
CHAR_:              0342 DEFINED AT LINE 267 IN monty.asm
ARRAY_:             0345 DEFINED AT LINE 269 IN monty.asm
ARRAYEND_:          0348 DEFINED AT LINE 271 IN monty.asm
IDENTU_:            034B DEFINED AT LINE 273 IN monty.asm
IDENTL_:            034E DEFINED AT LINE 275 IN monty.asm
SYMBOL_:            0351 DEFINED AT LINE 277 IN monty.asm
AND_:               0354 DEFINED AT LINE 279 IN monty.asm
AND1:               035B DEFINED AT LINE 287 IN monty.asm
                    > USED AT LINE 300 IN monty.asm
                    > USED AT LINE 311 IN monty.asm
OR_:                035F DEFINED AT LINE 292 IN monty.asm
XOR_:               0368 DEFINED AT LINE 302 IN monty.asm
XOR1:               0369 DEFINED AT LINE 304 IN monty.asm
                    > USED AT LINE 315 IN monty.asm
INV_:               0371 DEFINED AT LINE 313 IN monty.asm
ADD_:               0376 DEFINED AT LINE 317 IN monty.asm
HDOT_:              037C DEFINED AT LINE 324 IN monty.asm
MUL_:               0383 DEFINED AT LINE 329 IN monty.asm
SUB_:               0386 DEFINED AT LINE 332 IN monty.asm
SUB1:               0392 DEFINED AT LINE 340 IN monty.asm
                    > USED AT LINE 337 IN monty.asm
SUB2:               0394 DEFINED AT LINE 343 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
NOT_:               039A DEFINED AT LINE 349 IN monty.asm
EQ_:                039F DEFINED AT LINE 353 IN monty.asm
EQ1:                03A0 DEFINED AT LINE 355 IN monty.asm
                    > USED AT LINE 351 IN monty.asm
GT_:                03A4 DEFINED AT LINE 359 IN monty.asm
LT_:                03A8 DEFINED AT LINE 364 IN monty.asm
LT1:                03AA DEFINED AT LINE 367 IN monty.asm
                    > USED AT LINE 362 IN monty.asm
DIV_:               03B5 DEFINED AT LINE 375 IN monty.asm
COMMAND_:           03C4 DEFINED AT LINE 386 IN monty.asm
COMMENT:            03D0 DEFINED AT LINE 394 IN monty.asm
                    > USED AT LINE 390 IN monty.asm
                    > USED AT LINE 398 IN monty.asm
NOP_:               03D9 DEFINED AT LINE 402 IN monty.asm
SHL:                03DB DEFINED AT LINE 411 IN monty.asm
                    > USED AT LINE 1936 IN monty.asm
SHL1:               03E3 DEFINED AT LINE 418 IN monty.asm
                    > USED AT LINE 421 IN monty.asm
SHL2:               03E4 DEFINED AT LINE 420 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
SHR:                03EB DEFINED AT LINE 428 IN monty.asm
                    > USED AT LINE 1940 IN monty.asm
SHR1:               03F3 DEFINED AT LINE 435 IN monty.asm
                    > USED AT LINE 439 IN monty.asm
SHR2:               03F7 DEFINED AT LINE 438 IN monty.asm
                    > USED AT LINE 434 IN monty.asm
MUL:                03FE DEFINED AT LINE 444 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
MUL2:               0408 DEFINED AT LINE 453 IN monty.asm
                    > USED AT LINE 462 IN monty.asm
NUM:                041A DEFINED AT LINE 467 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
NUM0:               0423 DEFINED AT LINE 473 IN monty.asm
                    > USED AT LINE 471 IN monty.asm
NUM1:               0424 DEFINED AT LINE 475 IN monty.asm
                    > USED AT LINE 492 IN monty.asm
NUM2:               043C DEFINED AT LINE 493 IN monty.asm
                    > USED AT LINE 478 IN monty.asm
                    > USED AT LINE 480 IN monty.asm
                    > USED AT LINE 515 IN monty.asm
                    > USED AT LINE 517 IN monty.asm
NUM3:               0447 DEFINED AT LINE 501 IN monty.asm
                    > USED AT LINE 496 IN monty.asm
HEXNUM:             044A DEFINED AT LINE 505 IN monty.asm
                    > USED AT LINE 221 IN monty.asm
HEXNUM1:            044D DEFINED AT LINE 507 IN monty.asm
                    > USED AT LINE 524 IN monty.asm
HEXNUM2:            0455 DEFINED AT LINE 513 IN monty.asm
                    > USED AT LINE 511 IN monty.asm
STRING:             0467 DEFINED AT LINE 529 IN monty.asm
                    > USED AT LINE 227 IN monty.asm
STRING1:            0470 DEFINED AT LINE 536 IN monty.asm
                    > USED AT LINE 543 IN monty.asm
STRING2:            0473 DEFINED AT LINE 540 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
ARG_LIST:           048B DEFINED AT LINE 564 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARG_LIST1:          0495 DEFINED AT LINE 571 IN monty.asm
                    > USED AT LINE 589 IN monty.asm
ARG_LIST2:          04A1 DEFINED AT LINE 579 IN monty.asm
                    > USED AT LINE 576 IN monty.asm
ARG_LIST3:          04A9 DEFINED AT LINE 587 IN monty.asm
                    > USED AT LINE 578 IN monty.asm
                    > USED AT LINE 585 IN monty.asm
ARG_LIST4:          04AC DEFINED AT LINE 590 IN monty.asm
                    > USED AT LINE 574 IN monty.asm
ARG_LIST5:          04B1 DEFINED AT LINE 595 IN monty.asm
                    > USED AT LINE 593 IN monty.asm
CHAR:               04BD DEFINED AT LINE 606 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
CHAR1:              04C0 DEFINED AT LINE 608 IN monty.asm
                    > USED AT LINE 619 IN monty.asm
CHAR2:              04CC DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 614 IN monty.asm
CHAR3:              04CF DEFINED AT LINE 620 IN monty.asm
                    > USED AT LINE 612 IN monty.asm
BLOCK:              04D2 DEFINED AT LINE 624 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
BLOCK1:             04D6 DEFINED AT LINE 628 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
                    > USED AT LINE 652 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
                    > USED AT LINE 660 IN monty.asm
                    > USED AT LINE 664 IN monty.asm
BLOCK2:             04FE DEFINED AT LINE 653 IN monty.asm
                    > USED AT LINE 642 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
BLOCK3:             0501 DEFINED AT LINE 656 IN monty.asm
                    > USED AT LINE 649 IN monty.asm
                    > USED AT LINE 651 IN monty.asm
BLOCK4:             0509 DEFINED AT LINE 662 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
BLOCK5:             050C DEFINED AT LINE 665 IN monty.asm
                    > USED AT LINE 661 IN monty.asm
BLOCKEND:           050F DEFINED AT LINE 669 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
BLOCKEND1:          053B DEFINED AT LINE 692 IN monty.asm
                    > USED AT LINE 685 IN monty.asm
BLOCKEND2:          0547 DEFINED AT LINE 699 IN monty.asm
                    > USED AT LINE 691 IN monty.asm
IF:                 0560 DEFINED AT LINE 722 IN monty.asm
                    > USED AT LINE 1888 IN monty.asm
IFTE:               0565 DEFINED AT LINE 728 IN monty.asm
                    > USED AT LINE 1892 IN monty.asm
IFTE1:              0566 DEFINED AT LINE 730 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
SWITCH:             0572 DEFINED AT LINE 742 IN monty.asm
                    > USED AT LINE 1948 IN monty.asm
INDEX:              057C DEFINED AT LINE 754 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
INDEX0:             0584 DEFINED AT LINE 760 IN monty.asm
INDEX1:             0585 DEFINED AT LINE 762 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
INDEX2:             0591 DEFINED AT LINE 771 IN monty.asm
                    > USED AT LINE 768 IN monty.asm
SET:                0594 DEFINED AT LINE 776 IN monty.asm
                    > USED AT LINE 1932 IN monty.asm
SET1:               05A2 DEFINED AT LINE 786 IN monty.asm
                    > USED AT LINE 783 IN monty.asm
LOOP:               05A4 DEFINED AT LINE 791 IN monty.asm
                    > USED AT LINE 1904 IN monty.asm
WORDS:              05A6 DEFINED AT LINE 841 IN monty.asm
                    > USED AT LINE 1956 IN monty.asm
BYTES:              05AB DEFINED AT LINE 844 IN monty.asm
                    > USED AT LINE 1844 IN monty.asm
BYTES1:             05AE DEFINED AT LINE 846 IN monty.asm
                    > USED AT LINE 843 IN monty.asm
ARRAY:              05B3 DEFINED AT LINE 850 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
ARRAYEND:           05CF DEFINED AT LINE 864 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
ARRAYEND1:          05F0 DEFINED AT LINE 884 IN monty.asm
                    > USED AT LINE 893 IN monty.asm
ARRAYEND2:          0600 DEFINED AT LINE 896 IN monty.asm
                    > USED AT LINE 882 IN monty.asm
                    > USED AT LINE 908 IN monty.asm
ARRAYEND3:          0613 DEFINED AT LINE 910 IN monty.asm
                    > USED AT LINE 894 IN monty.asm
HASH:               062E DEFINED AT LINE 929 IN monty.asm
                    > USED AT LINE 1880 IN monty.asm
DEF:                0639 DEFINED AT LINE 939 IN monty.asm
                    > USED AT LINE 1856 IN monty.asm
DEF1:               0640 DEFINED AT LINE 942 IN monty.asm
                    > USED AT LINE 940 IN monty.asm
LET:                0649 DEFINED AT LINE 949 IN monty.asm
                    > USED AT LINE 1900 IN monty.asm
LET1:               066D DEFINED AT LINE 974 IN monty.asm
                    > USED AT LINE 946 IN monty.asm
LET2:               067B DEFINED AT LINE 981 IN monty.asm
                    > USED AT LINE 978 IN monty.asm
DOLET:              067E DEFINED AT LINE 986 IN monty.asm
DOLET2:             0682 DEFINED AT LINE 989 IN monty.asm
DOLET3:             0686 DEFINED AT LINE 994 IN monty.asm
ADDR:               0690 DEFINED AT LINE 1003 IN monty.asm
                    > USED AT LINE 1840 IN monty.asm
ADDR1:              069C DEFINED AT LINE 1013 IN monty.asm
                    > USED AT LINE 1008 IN monty.asm
SYMBOL:             06A7 DEFINED AT LINE 1021 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
IDENTU:             06A9 DEFINED AT LINE 1051 IN monty.asm
                    > USED AT LINE 274 IN monty.asm
IDENTL:             06AE DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 276 IN monty.asm
IDENT1:             06B1 DEFINED AT LINE 1058 IN monty.asm
                    > USED AT LINE 1054 IN monty.asm
FRAC:               06B6 DEFINED AT LINE 1064 IN monty.asm
                    > USED AT LINE 1872 IN monty.asm
SQRT1:              06BC DEFINED AT LINE 1070 IN monty.asm
                    > USED AT LINE 1944 IN monty.asm
ABS1:               06C9 DEFINED AT LINE 1079 IN monty.asm
                    > USED AT LINE 1836 IN monty.asm
MOD:                06D6 DEFINED AT LINE 1092 IN monty.asm
                    > USED AT LINE 1912 IN monty.asm
EQUALS:             06E2 DEFINED AT LINE 1104 IN monty.asm
                    > USED AT LINE 357 IN monty.asm
LESSTHANEQ:         06EA DEFINED AT LINE 1112 IN monty.asm
                    > USED AT LINE 371 IN monty.asm
LESSTHAN:           06EF DEFINED AT LINE 1119 IN monty.asm
                    > USED AT LINE 373 IN monty.asm
LESSTHAN1:          06F4 DEFINED AT LINE 1124 IN monty.asm
                    > USED AT LINE 1115 IN monty.asm
TRUE1:              06F7 DEFINED AT LINE 1127 IN monty.asm
                    > USED AT LINE 1107 IN monty.asm
                    > USED AT LINE 1952 IN monty.asm
NULL1:              06FD DEFINED AT LINE 1131 IN monty.asm
                    > USED AT LINE 1920 IN monty.asm
FALSE1:             06FD DEFINED AT LINE 1132 IN monty.asm
                    > USED AT LINE 1108 IN monty.asm
                    > USED AT LINE 1122 IN monty.asm
                    > USED AT LINE 1125 IN monty.asm
                    > USED AT LINE 1864 IN monty.asm
INPUT:              0703 DEFINED AT LINE 1139 IN monty.asm
                    > USED AT LINE 1884 IN monty.asm
OUTPUT:             070E DEFINED AT LINE 1151 IN monty.asm
                    > USED AT LINE 1924 IN monty.asm
KEY:                0717 DEFINED AT LINE 1160 IN monty.asm
                    > USED AT LINE 1896 IN monty.asm
NEG:                0720 DEFINED AT LINE 1167 IN monty.asm
                    > USED AT LINE 1916 IN monty.asm
FILTER:             0727 DEFINED AT LINE 1172 IN monty.asm
                    > USED AT LINE 1868 IN monty.asm
MAP:                0727 DEFINED AT LINE 1173 IN monty.asm
                    > USED AT LINE 1908 IN monty.asm
HASHSTR:            0729 DEFINED AT LINE 1184 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
                    > USED AT LINE 1518 IN monty.asm
HASHSTR1:           0730 DEFINED AT LINE 1187 IN monty.asm
                    > USED AT LINE 1206 IN monty.asm
HASHSTR2:           0735 DEFINED AT LINE 1192 IN monty.asm
DEFINEENTRY:        0746 DEFINED AT LINE 1211 IN monty.asm
                    > USED AT LINE 977 IN monty.asm
                    > USED AT LINE 1521 IN monty.asm
DEFINEENTRY0:       074B DEFINED AT LINE 1215 IN monty.asm
                    > USED AT LINE 1232 IN monty.asm
DEFINEENTRY1:       075A DEFINED AT LINE 1227 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
DEFINEENTRY2:       0760 DEFINED AT LINE 1233 IN monty.asm
                    > USED AT LINE 1225 IN monty.asm
                    > USED AT LINE 1257 IN monty.asm
DEFINEENTRY3:       0762 DEFINED AT LINE 1236 IN monty.asm
                    > USED AT LINE 1218 IN monty.asm
LOOKUPENTRY:        076C DEFINED AT LINE 1250 IN monty.asm
                    > USED AT LINE 1007 IN monty.asm
LOOKUPENTRY0:       0771 DEFINED AT LINE 1254 IN monty.asm
                    > USED AT LINE 1271 IN monty.asm
LOOKUPENTRY1:       0780 DEFINED AT LINE 1266 IN monty.asm
                    > USED AT LINE 1260 IN monty.asm
LOOKUPENTRY2:       0786 DEFINED AT LINE 1272 IN monty.asm
LOOKUPENTRY3:       0788 DEFINED AT LINE 1275 IN monty.asm
                    > USED AT LINE 1264 IN monty.asm
DIVIDE:             0790 DEFINED AT LINE 1287 IN monty.asm
                    > USED AT LINE 380 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
DIVIDE1:            0795 DEFINED AT LINE 1290 IN monty.asm
                    > USED AT LINE 1302 IN monty.asm
DIVIDE2:            07A2 DEFINED AT LINE 1298 IN monty.asm
                    > USED AT LINE 1295 IN monty.asm
DIVIDE3:            07A3 DEFINED AT LINE 1300 IN monty.asm
                    > USED AT LINE 1297 IN monty.asm
SQUAREROOT:         07A9 DEFINED AT LINE 1310 IN monty.asm
                    > USED AT LINE 1073 IN monty.asm
SQUAREROOT1:        07AE DEFINED AT LINE 1314 IN monty.asm
                    > USED AT LINE 1335 IN monty.asm
SQUAREROOT4:        07C9 DEFINED AT LINE 1334 IN monty.asm
                    > USED AT LINE 1328 IN monty.asm
SQUAREROOT5:        07D0 DEFINED AT LINE 1339 IN monty.asm
                    > USED AT LINE 1337 IN monty.asm
PRTDEC:             07D3 DEFINED AT LINE 1345 IN monty.asm
                    > USED AT LINE 253 IN monty.asm
                    > USED AT LINE 2106 IN monty.asm
PRTDEC0:            07E2 DEFINED AT LINE 1356 IN monty.asm
                    > USED AT LINE 1347 IN monty.asm
PRTDEC1:            0804 DEFINED AT LINE 1372 IN monty.asm
                    > USED AT LINE 1360 IN monty.asm
                    > USED AT LINE 1362 IN monty.asm
                    > USED AT LINE 1364 IN monty.asm
                    > USED AT LINE 1366 IN monty.asm
                    > USED AT LINE 1369 IN monty.asm
PRTDEC2:            0806 DEFINED AT LINE 1374 IN monty.asm
                    > USED AT LINE 1377 IN monty.asm
PRTDEC3:            0816 DEFINED AT LINE 1386 IN monty.asm
                    > USED AT LINE 1381 IN monty.asm
PRTDEC4:            0817 DEFINED AT LINE 1388 IN monty.asm
                    > USED AT LINE 1385 IN monty.asm
PRTHEX:             081B DEFINED AT LINE 1392 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
                    > USED AT LINE 326 IN monty.asm
PRTHEX2:            0826 DEFINED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
                    > USED AT LINE 1397 IN monty.asm
PRTHEX3:            082F DEFINED AT LINE 1408 IN monty.asm
                    > USED AT LINE 1406 IN monty.asm
PRTSTR0:            083A DEFINED AT LINE 1416 IN monty.asm
                    > USED AT LINE 1422 IN monty.asm
PRTSTR:             083E DEFINED AT LINE 1419 IN monty.asm
                    > USED AT LINE 243 IN monty.asm
                    > USED AT LINE 1482 IN monty.asm
NESTING:            0843 DEFINED AT LINE 1435 IN monty.asm
                    > USED AT LINE 1983 IN monty.asm
                    > USED AT LINE 2024 IN monty.asm
NESTING1A:          084E DEFINED AT LINE 1442 IN monty.asm
                    > USED AT LINE 1439 IN monty.asm
NESTING1:           0851 DEFINED AT LINE 1445 IN monty.asm
                    > USED AT LINE 1437 IN monty.asm
NESTING2:           0860 DEFINED AT LINE 1454 IN monty.asm
                    > USED AT LINE 1449 IN monty.asm
                    > USED AT LINE 1451 IN monty.asm
NESTING3:           0862 DEFINED AT LINE 1457 IN monty.asm
                    > USED AT LINE 1453 IN monty.asm
NESTING4:           086D DEFINED AT LINE 1464 IN monty.asm
                    > USED AT LINE 1459 IN monty.asm
                    > USED AT LINE 1461 IN monty.asm
PROMPT:             086F DEFINED AT LINE 1468 IN monty.asm
                    > USED AT LINE 1967 IN monty.asm
CRLF:               0878 DEFINED AT LINE 1473 IN monty.asm
                    > USED AT LINE 2036 IN monty.asm
PRINTSTR:           087F DEFINED AT LINE 1480 IN monty.asm
                    > USED AT LINE 1469 IN monty.asm
                    > USED AT LINE 1474 IN monty.asm
                    > USED AT LINE 1963 IN monty.asm
                    > USED AT LINE 2104 IN monty.asm
EXECSTR:            0886 DEFINED AT LINE 1489 IN monty.asm
BRANCH:             0886 DEFINED AT LINE 1499 IN monty.asm
DEFINE:             088A DEFINED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1834 IN monty.asm
                    > USED AT LINE 1838 IN monty.asm
                    > USED AT LINE 1842 IN monty.asm
                    > USED AT LINE 1846 IN monty.asm
                    > USED AT LINE 1850 IN monty.asm
                    > USED AT LINE 1854 IN monty.asm
                    > USED AT LINE 1858 IN monty.asm
                    > USED AT LINE 1862 IN monty.asm
                    > USED AT LINE 1866 IN monty.asm
                    > USED AT LINE 1870 IN monty.asm
                    > USED AT LINE 1874 IN monty.asm
                    > USED AT LINE 1878 IN monty.asm
                    > USED AT LINE 1882 IN monty.asm
                    > USED AT LINE 1886 IN monty.asm
                    > USED AT LINE 1890 IN monty.asm
                    > USED AT LINE 1894 IN monty.asm
                    > USED AT LINE 1898 IN monty.asm
                    > USED AT LINE 1902 IN monty.asm
                    > USED AT LINE 1906 IN monty.asm
                    > USED AT LINE 1910 IN monty.asm
                    > USED AT LINE 1914 IN monty.asm
                    > USED AT LINE 1918 IN monty.asm
                    > USED AT LINE 1922 IN monty.asm
                    > USED AT LINE 1926 IN monty.asm
                    > USED AT LINE 1930 IN monty.asm
                    > USED AT LINE 1934 IN monty.asm
                    > USED AT LINE 1938 IN monty.asm
                    > USED AT LINE 1942 IN monty.asm
                    > USED AT LINE 1946 IN monty.asm
                    > USED AT LINE 1950 IN monty.asm
                    > USED AT LINE 1954 IN monty.asm
CALL:               08A2 DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1848 IN monty.asm
EXEC:               08A4 DEFINED AT LINE 1531 IN monty.asm
                    > USED AT LINE 1860 IN monty.asm
EXEC0:              08A5 DEFINED AT LINE 1533 IN monty.asm
                    > USED AT LINE 736 IN monty.asm
                    > USED AT LINE 738 IN monty.asm
                    > USED AT LINE 750 IN monty.asm
EXEC1:              08AB DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1536 IN monty.asm
EXEC2:              08CB DEFINED AT LINE 1555 IN monty.asm
                    > USED AT LINE 1547 IN monty.asm
DOCALL:             08D2 DEFINED AT LINE 1564 IN monty.asm
DOCALL1:            08E8 DEFINED AT LINE 1582 IN monty.asm
                    > USED AT LINE 1576 IN monty.asm
DOCALL2:            08EE DEFINED AT LINE 1588 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
DOCALL3:            08F3 DEFINED AT LINE 1593 IN monty.asm
                    > USED AT LINE 1587 IN monty.asm
DOCALL4:            08FF DEFINED AT LINE 1604 IN monty.asm
                    > USED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1559 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
DOCALL5:            090B DEFINED AT LINE 1611 IN monty.asm
                    > USED AT LINE 1568 IN monty.asm
FUNC:               090D DEFINED AT LINE 1615 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
                    > USED AT LINE 1876 IN monty.asm
FUNC1:              0925 DEFINED AT LINE 1636 IN monty.asm
                    > USED AT LINE 1660 IN monty.asm
                    > USED AT LINE 1663 IN monty.asm
                    > USED AT LINE 1668 IN monty.asm
                    > USED AT LINE 1672 IN monty.asm
FUNC2:              094B DEFINED AT LINE 1661 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
                    > USED AT LINE 1652 IN monty.asm
                    > USED AT LINE 1654 IN monty.asm
FUNC3:              094E DEFINED AT LINE 1664 IN monty.asm
                    > USED AT LINE 1657 IN monty.asm
                    > USED AT LINE 1659 IN monty.asm
FUNC4:              0956 DEFINED AT LINE 1670 IN monty.asm
                    > USED AT LINE 1643 IN monty.asm
                    > USED AT LINE 1645 IN monty.asm
                    > USED AT LINE 1647 IN monty.asm
FUNC4A:             0959 DEFINED AT LINE 1673 IN monty.asm
                    > USED AT LINE 1669 IN monty.asm
ARG:                0965 DEFINED AT LINE 1684 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARG0:               0983 DEFINED AT LINE 1705 IN monty.asm
                    > USED AT LINE 1711 IN monty.asm
ARG0A:              098C DEFINED AT LINE 1713 IN monty.asm
                    > USED AT LINE 1690 IN monty.asm
                    > USED AT LINE 1697 IN monty.asm
ARG1:               0991 DEFINED AT LINE 1716 IN monty.asm
                    > USED AT LINE 1709 IN monty.asm
ARG1A:              0999 DEFINED AT LINE 1723 IN monty.asm
                    > USED AT LINE 1715 IN monty.asm
CLOSURE:            099C DEFINED AT LINE 1729 IN monty.asm
                    > USED AT LINE 1852 IN monty.asm
DOCLOSURE:          09B6 DEFINED AT LINE 1747 IN monty.asm
DOCLOSURE1:         09CC DEFINED AT LINE 1765 IN monty.asm
                    > USED AT LINE 1775 IN monty.asm
DOCLOSURE2:         09D2 DEFINED AT LINE 1772 IN monty.asm
                    > USED AT LINE 1764 IN monty.asm
DOCLOSURE3:         09D6 DEFINED AT LINE 1776 IN monty.asm
                    > USED AT LINE 1755 IN monty.asm
INIT:               09DC DEFINED AT LINE 1807 IN monty.asm
                    > USED AT LINE 7
                    > USED AT LINE 1962 IN monty.asm
INIT0:              09F4 DEFINED AT LINE 1816 IN monty.asm
                    > USED AT LINE 1824 IN monty.asm
INIT1:              0A07 DEFINED AT LINE 1829 IN monty.asm
                    > USED AT LINE 1832 IN monty.asm
START:              0B61 DEFINED AT LINE 1960 IN monty.asm
                    > USED AT LINE 8
INTERPRET:          0B77 DEFINED AT LINE 1966 IN monty.asm
                    > USED AT LINE 2069 IN monty.asm
                    > USED AT LINE 2107 IN monty.asm
INTERPRET2:         0B81 DEFINED AT LINE 1972 IN monty.asm
                    > USED AT LINE 2016 IN monty.asm
INTERPRET3:         0B89 DEFINED AT LINE 1979 IN monty.asm
                    > USED AT LINE 1988 IN monty.asm
INTERPRET4:         0B8F DEFINED AT LINE 1985 IN monty.asm
                    > USED AT LINE 1977 IN monty.asm
INTERPRET5:         0B94 DEFINED AT LINE 1991 IN monty.asm
                    > USED AT LINE 2025 IN monty.asm
                    > USED AT LINE 2039 IN monty.asm
INTERPRET6:         0BA5 DEFINED AT LINE 2018 IN monty.asm
                    > USED AT LINE 1994 IN monty.asm
INTERPRET7:         0BB3 DEFINED AT LINE 2027 IN monty.asm
                    > USED AT LINE 1999 IN monty.asm
INTERPRET8:         0BC6 DEFINED AT LINE 2041 IN monty.asm
                    > USED AT LINE 1997 IN monty.asm
NEXT:               0BCE DEFINED AT LINE 2047 IN monty.asm
                    > USED AT LINE 71 IN monty.asm
                    > USED AT LINE 2051 IN monty.asm
NEXT1:              0BE1 DEFINED AT LINE 2060 IN monty.asm
                    > USED AT LINE 2052 IN monty.asm
NEXT2:              0BF0 DEFINED AT LINE 2070 IN monty.asm
                    > USED AT LINE 2054 IN monty.asm
EXIT_:              0BF6 DEFINED AT LINE 2080 IN monty.asm
                    > USED AT LINE 2064 IN monty.asm
LITERAL_:           0BF9 DEFINED AT LINE 2084 IN monty.asm
                    > USED AT LINE 2066 IN monty.asm
ENTER_:             0C02 DEFINED AT LINE 2094 IN monty.asm
                    > USED AT LINE 2068 IN monty.asm
ERROR:              0C09 DEFINED AT LINE 2103 IN monty.asm
                    > USED AT LINE 392 IN monty.asm
                    > USED AT LINE 980 IN monty.asm
STACK:              1880 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 445 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1540 IN monty.asm
                    > USED AT LINE 1809 IN monty.asm
                    > USED AT LINE 1961 IN monty.asm
TBPTR:              1880 DEFINED AT LINE 6 IN ram.asm
RST08:              1882 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 447 IN IOSerial.asm
RST10:              1884 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 113 IN IOSerial.asm
                    > USED AT LINE 448 IN IOSerial.asm
RST18:              1886 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 449 IN IOSerial.asm
RST20:              1888 DEFINED AT LINE 11 IN ram.asm
                    > USED AT LINE 125 IN IOSerial.asm
                    > USED AT LINE 450 IN IOSerial.asm
RST28:              188A DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 131 IN IOSerial.asm
                    > USED AT LINE 451 IN IOSerial.asm
RST30:              188C DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 137 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
BAUD:               188E DEFINED AT LINE 14 IN ram.asm
INTVEC:             1890 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 143 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
NMIVEC:             1892 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
GETCVEC:            1894 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 435 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
PUTCVEC:            1896 DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
SYSVARS:            1898 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 1811 IN monty.asm
VFRAC:              1898 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 381 IN monty.asm
                    > USED AT LINE 1065 IN monty.asm
                    > USED AT LINE 1074 IN monty.asm
VDATAWIDTH:         189A DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 757 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
                    > USED AT LINE 847 IN monty.asm
                    > USED AT LINE 880 IN monty.asm
VTIBPTR:            189C DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1970 IN monty.asm
                    > USED AT LINE 2042 IN monty.asm
VPOINTER:           189E DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 764 IN monty.asm
                    > USED AT LINE 779 IN monty.asm
                    > USED AT LINE 988 IN monty.asm
                    > USED AT LINE 1017 IN monty.asm
                    > USED AT LINE 1719 IN monty.asm
VLASTDEF:           18A0 DEFINED AT LINE 26 IN ram.asm
VHASHSTR:           18A2 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 964 IN monty.asm
                    > USED AT LINE 999 IN monty.asm
                    > USED AT LINE 1185 IN monty.asm
VNEXT:              18A4 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 943 IN monty.asm
                    > USED AT LINE 1808 IN monty.asm
VHEAPPTR:           18A6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 530 IN monty.asm
                    > USED AT LINE 547 IN monty.asm
                    > USED AT LINE 566 IN monty.asm
                    > USED AT LINE 597 IN monty.asm
                    > USED AT LINE 874 IN monty.asm
                    > USED AT LINE 920 IN monty.asm
                    > USED AT LINE 921 IN monty.asm
                    > USED AT LINE 953 IN monty.asm
                    > USED AT LINE 971 IN monty.asm
                    > USED AT LINE 972 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1676 IN monty.asm
                    > USED AT LINE 1678 IN monty.asm
                    > USED AT LINE 1730 IN monty.asm
                    > USED AT LINE 1741 IN monty.asm
                    > USED AT LINE 1743 IN monty.asm
VTEMP1:             18A8 DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 867 IN monty.asm
                    > USED AT LINE 922 IN monty.asm
                    > USED AT LINE 1757 IN monty.asm
                    > USED AT LINE 1777 IN monty.asm
VARS:               18AA DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 1814 IN monty.asm
TIB:                1A00 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1976 IN monty.asm
                    > USED AT LINE 2019 IN monty.asm
                    > USED AT LINE 2028 IN monty.asm
                    > USED AT LINE 2043 IN monty.asm
PAD:                1B00 DEFINED AT LINE 40 IN ram.asm
HASHSLOTS:          1C00 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1828 IN monty.asm
HASHWORDS:          1D00 DEFINED AT LINE 46 IN ram.asm
HEAP:               1E00 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 72 IN monty.asm
