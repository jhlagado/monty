0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 B1 0B               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQUOTE:   EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                TMAGIC:   EQU   $AA   ; magic number
00C9                TRESERV:   EQU   $A0   ; reserved
00C9                TNUMBER:   EQU   $A1   ; number
00C9                TSTRING:   EQU   $A2   ; string
00C9                TPOINTER:   EQU   $A3   ; pointer
00C9                TARRAY:   EQU   $A4   ; array
00C9                TBLOCK:   EQU   $A5   ; block
00C9                TLAMBDA:   EQU   $A6   ; lambda
00C9                TARGLST:   EQU   $A7   ; arglist
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   45 0C                  DW   next   ; nNext
018A   1E 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dblquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 F2 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 A8 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 CE 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 37 05               JP   rbrace   
031E                TICK_:       
031E   C3 93 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 93 07               JP   semicolon   
0324                DOT_:        
0324   C3 03 06               JP   dot   
0327                COLON_:      
0327   C3 98 04               JP   colon   
032A                UPCASE_:      
032A   C3 0F 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 14 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 26 07               JP   question   
0333                STAR_:       
0333   C3 3F 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 5B 07               JP   num   
033E                HASH_:       
033E   C3 6F 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 4F 06               JP   caret   
0347                COMMA_:      
0347   C3 AA 05               JP   comma   
034A                DBLQUOTE_:      
034A   C3 D2 07               JP   dblquote   
034D                MINUS_:      
034D   C3 FA 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 87 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 2E 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA BF 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA AF 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 36 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 3B 06               JP   lessthan   
037C                SLASH_:      
037C   C3 B9 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 8B 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 89 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 23            LD   de,(vPointer)   
039A   21 F2 23               LD   hl,vPointer   
039D   C3 79 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 23               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 24            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   3E A4                  LD   a,TARRAY   ; write type tag
0431   77                     LD   (hl),a   
0432   23                     INC   hl   
0433   3E AA                  LD   a,TMAGIC   ; write magic byte
0435   77                     LD   (hl),a   
0436   23                     INC   hl   
0437   18 15                  JR   arrayEnd3   
0439                ARRAYEND1:      
0439   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043C   77                     LD   (hl),a   ; write lsb of array item
043D   23                     INC   hl   ; move to msb of array item
043E   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0441   3D                     DEC   a   
0442   28 05                  JR   z,arrayEnd2   
0444   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0447   77                     LD   (hl),a   ; write msb of array item
0448   23                     INC   hl   ; move to next word in array
0449                ARRAYEND2:      
0449   FD 2B                  DEC   iy   ; move to next word on stack
044B   FD 2B                  DEC   iy   
044D   0B                     DEC   bc   ; dec items count
044E                ARRAYEND3:      
044E   79                     LD   a,c   ; if not zero loop
044F   B0                     OR   b   
0450   20 E7                  JR   nz,arrayEnd1   
0452   EB                     EX   de,hl   ; de = end of array, hl = BP
0453   F9                     LD   sp,hl   ; sp = BP
0454   E1                     POP   hl   ; de = end of array, hl = old BP
0455   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0456   FD 62                  LD   iyh,d   
0458   FD 6B                  LD   iyl,e   
045A   D1                     POP   de   ; pop arg_list (discard)
045B   D1                     POP   de   ; pop first_arg* (discard)
045C   D1                     POP   de   ; pop IP (discard)
045D   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-4]
0461   13                     INC   de   ; de = array[0]
0462   13                     INC   de   
0463   13                     INC   de   
0464   13                     INC   de   
0465   D5                     PUSH   de   ; return array[0]
0466   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0469   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
046D   DD E9                  JP   (ix)   
046F                             ; index of an array, based on vDataWidth
046F                             ; array num -- value    ; also sets vPointer to address
046F                HASH:        
046F                ARRAYINDEX:      
046F   E1                     POP   hl   ; hl = index
0470   D1                     POP   de   ; de = array
0471   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0474   3D                     DEC   a   
0475   28 01                  JR   z,arrayIndex1   
0477                ARRAYINDEX0:      
0477   29                     ADD   hl,hl   ; if data width = 2 then double
0478                ARRAYINDEX1:      
0478   19                     ADD   hl,de   ; add addr
0479   22 F2 23               LD   (vPointer),hl   ; store address in setter
047C   16 00                  LD   d,0   
047E   5E                     LD   e,(hl)   
047F   B7                     OR   a   ; check data width again
0480   28 02                  JR   z,arrayIndex2   
0482   23                     INC   hl   
0483   56                     LD   d,(hl)   
0484                ARRAYINDEX2:      
0484   D5                     PUSH   de   
0485   DD E9                  JP   (ix)   
0487                             ; value _oldValue --            ; uses address in vPointer
0487                ASSIGN:      
0487   E1                     POP   hl   ; discard last accessed value
0488   E1                     POP   hl   ; hl = new value
0489                ASSIGN0:      
0489   EB                     EX   de,hl   ; de = new value
048A                ASSIGNX:      
048A   2A F2 23               LD   hl,(vPointer)   
048D   73                     LD   (hl),e   
048E   3A E6 23               LD   a,(vDataWidth)   
0491   3D                     DEC   a   ; is it byte?
0492   28 02                  JR   z,assign1   
0494   23                     INC   hl   
0495   72                     LD   (hl),d   
0496                ASSIGN1:      
0496   DD E9                  JP   (ix)   
0498                             ; arg_list - parses input (ab:c)
0498                             ; names after the : represent uninitialised locals
0498                             ; return values are the state of the stack after the block ends
0498                             ; format: numLocals totNumArgs argChars...
0498                COLON:       
0498                ARGLIST:      
0498   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049B   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
049E   E5                     PUSH   hl   ; save start of arg_list
049F   23                     INC   hl   ; skip length fields to start of string
04A0   23                     INC   hl   
04A1   03                     INC   bc   ; point to next char
04A2                ARGLIST1:      
04A2   0A                     LD   a,(bc)   
04A3   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A5   20 03                  JR   nz,arglist1a   
04A7   14                     INC   d   ; non zero value local count acts as flag
04A8   18 10                  JR   arglist3   
04AA                ARGLIST1A:      
04AA   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AC   38 0F                  JR   c,arglist4   
04AE   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B0   30 0B                  JR   nc,arglist4   
04B2                ARGLIST2:      
04B2   77                     LD   (hl),a   
04B3   23                     INC   hl   
04B4   1C                     INC   e   ; increase arg count
04B5   AF                     XOR   a   
04B6   B2                     OR   d   
04B7   28 01                  JR   z,arglist3   
04B9   14                     INC   d   ; if d > 0 increase local count
04BA                ARGLIST3:      
04BA   03                     INC   bc   ; point to next char
04BB   18 E5                  JR   arglist1   
04BD                ARGLIST4:      
04BD   0B                     DEC   bc   
04BE   AF                     XOR   a   
04BF   B2                     OR   d   
04C0   28 01                  JR   z,arglist5   
04C2   15                     DEC   d   ; remove initial inc
04C3                ARGLIST5:      
04C3   23                     INC   hl   
04C4   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C7   E1                     POP   hl   ; hl = start of arg_list
04C8   E5                     PUSH   hl   ; return start of arg_list
04C9   72                     LD   (hl),d   ; write number of locals at start - 1
04CA   23                     INC   hl   
04CB   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CC   DD E9                  JP   (ix)   
04CE                LBRACE:      
04CE                BLOCKSTART:      
04CE   C5                     PUSH   bc   ; return pointer to first { of block
04CF   03                     INC   bc   
04D0   16 01                  LD   d,1   ; nesting: count first parenthesis
04D2                BLOCKSTART1:      ; Skip to end of definition
04D2   0A                     LD   a,(bc)   ; Get the next character
04D3   03                     INC   bc   ; Point to next character
04D4   FE 21                  CP   " " + 1   ; ignore whitespace
04D6   38 FA                  JR   c,blockStart1   
04D8   FE 29                  CP   ")"   
04DA   28 2D                  JR   z,blockStart4   
04DC   FE 7D                  CP   "}"   
04DE   28 29                  JR   z,blockStart4   
04E0   FE 5D                  CP   "]"   
04E2   28 25                  JR   z,blockStart4   
04E4   FE 28                  CP   "("   
04E6   28 16                  JR   z,blockStart2   
04E8   FE 7B                  CP   "{"   
04EA   28 12                  JR   z,blockStart2   
04EC   FE 5B                  CP   "["   
04EE   28 0E                  JR   z,blockStart2   
04F0   FE 27                  CP   "'"   
04F2   28 0D                  JR   z,blockStart3   
04F4   FE 60                  CP   "`"   
04F6   28 09                  JR   z,blockStart3   
04F8   FE 22                  CP   DQUOTE   
04FA   28 05                  JR   z,blockStart3   
04FC   18 D4                  JR   blockStart1   
04FE                BLOCKSTART2:      
04FE   14                     INC   d   
04FF   18 D1                  JR   blockStart1   
0501                BLOCKSTART3:      
0501   3E 80                  LD   a,$80   
0503   AA                     XOR   d   
0504   57                     LD   d,a   
0505   20 CB                  JR   nz,blockStart1   
0507   18 03                  JR   blockStart5   
0509                BLOCKSTART4:      
0509   15                     DEC   d   
050A   20 C6                  JR   nz,blockStart1   ; get the next element
050C                BLOCKSTART5:      
050C   60 69                  LD   hl,bc   ; hl = IP
050E   11 1E 24               LD   de,HEAP   ; is IP pointing to object in heap
0511   B7                     OR   a   ; IP - HEAP
0512   ED 52                  SBC   hl,de   
0514   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0516   28 1C                  JR   z,blockStart6   
0518   60 69                  LD   hl,bc   ; hl = IP
051A   D1                     POP   de   ; de = block*
051B   ED 43 00 24            LD   (vTemp1),bc   ; save IP
051F   B7                     OR   a   ; bc = size
0520   ED 52                  SBC   hl,de   
0522   44 4D                  LD   bc,hl   
0524   EB                     EX   de,hl   ; hl = block* de = heap*
0525   ED 5B F0 23            LD   de,(vHeapPtr)   
0529   D5                     PUSH   de   ; return hblock*
052A   ED B0                  LDIR      ; copy size bytes from block* to hblock*
052C   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0530   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0534                BLOCKSTART6:      
0534   0B                     DEC   bc   ; balanced, exit
0535   DD E9                  JP   (ix)   
0537                RBRACE:      
0537                BLOCKEND:      
0537   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053A   FD 56 01               LD   d,(iy+1)   
053D   ED 53 00 24            LD   (vTemp1),de   
0541   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0544   FD 56 07               LD   d,(iy+7)   
0547   ED 53 02 24            LD   (vTemp2),de   
054B   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054E   FD 56 03               LD   d,(iy+3)   
0551   EB                     EX   de,hl   
0552   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0555   FD 56 01               LD   d,(iy+1)   
0558   13                     INC   de   ; for carry flag <=
0559   B7                     OR   a   
055A   ED 52                  SBC   hl,de   
055C   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055E   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0560   FD 5D                  LD   e,iyl   
0562   21 08 00               LD   hl,8   
0565   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0566   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0567   18 0C                  JR   blockEnd2   
0569                BLOCKEND1:      ; same scope
0569   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
056C   FD 56 03               LD   d,(iy+3)   
056F   EB                     EX   de,hl   
0570   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0572   FD 5D                  LD   e,iyl   
0574   EB                     EX   de,hl   
0575                BLOCKEND2:      
0575   44 4D                  LD   bc,hl   ; bc = hl = BP
0577   B7                     OR   a   ; hl = BP - SP = count
0578   ED 72                  SBC   hl,sp   
057A   7D                     LD   a,l   
057B   B4                     OR   h   
057C   28 09                  JR   z,blockEnd3   
057E   C5                     PUSH   bc   ; bc = count, hl = BP
057F   44 4D                  LD   bc,hl   
0581   E1                     POP   hl   
0582   2B                     DEC   hl   ; hl = BP-1
0583   1B                     DEC   de   ; de = args*-1
0584   ED B8                  LDDR      
0586   13                     INC   de   
0587                BLOCKEND3:      
0587   EB                     EX   de,hl   ; sp = de = new tos*
0588   F9                     LD   sp,hl   
0589   ED 4B 02 24            LD   bc,(vTemp2)   
058D   FD 2A 00 24            LD   iy,(vTemp1)   
0591   DD E9                  JP   (ix)   
0593                TICK:        
0593                CHAR:        
0593   21 00 00               LD   hl,0   ; if "" is empty or null
0596                CHAR1:       
0596   03                     INC   bc   ; point to next char
0597   0A                     LD   a,(bc)   
0598   FE 27                  CP   "'"   ; ' is the terminator
059A   28 09                  JR   z,char3   
059C   FE 5C                  CP   $5c   ; \ is the escape
059E   20 02                  JR   nz,char2   
05A0   03                     INC   bc   
05A1   0A                     LD   a,(bc)   
05A2                CHAR2:       
05A2   6F                     LD   l,a   
05A3   18 F1                  JR   char1   
05A5                CHAR3:       
05A5   E5                     PUSH   hl   
05A6   DD E9                  JP   (ix)   
05A8                BACKSLASH:      
05A8   DD E9                  JP   (ix)   
05AA                             ; , discard stack item
05AA                             ; x y -- x
05AA                COMMA:       
05AA                DISCARD:      
05AA   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF   B7                     OR   a   
05B0   ED 72                  SBC   hl,sp   
05B2   CB 7C                  BIT   7,h   
05B4   20 01                  JR   nz,discard1   
05B6   E1                     POP   hl   
05B7                DISCARD1:      
05B7   DD E9                  JP   (ix)   
05B9                SLASH:       
05B9                COMMAND:      
05B9   CD E1 0A               CALL   jumpTable   
05BC   2F                     DB   "/"   
05BD   20 08                  DW   comment   
05BF   61                     DB   "a"   
05C0   29 08                  DW   command_a   
05C2   62                     DB   "b"   
05C3   63 08                  DW   command_b   
05C5   63                     DB   "c"   
05C6   7F 0A                  DW   chars   
05C8   64                     DB   "d"   
05C9   87 0A                  DW   decimal   
05CB   66                     DB   "f"   
05CC   49 06                  DW   false1   
05CE   68                     DB   "h"   
05CF   8F 0A                  DW   hexadecimal   
05D1   69                     DB   "i"   
05D2   AC 09                  DW   command_i   
05D4   6B                     DB   "k"   
05D5   A0 0A                  DW   key   
05D7   6E                     DB   "n"   
05D8   B2 0A                  DW   numbers   
05DA   6F                     DB   "o"   
05DB   A9 0A                  DW   output   
05DD   70                     DB   "p"   
05DE   B8 09                  DW   command_p   
05E0   72                     DB   "r"   
05E1   21 0A                  DW   command_r   
05E3   73                     DB   "s"   
05E4   30 0A                  DW   size   
05E6   74                     DB   "t"   
05E7   43 06                  DW   true1   
05E9   76                     DB   "v"   
05EA   3A 0A                  DW   command_v   
05EC   78                     DB   "x"   
05ED   B4 03                  DW   xor   
05EF   00                     DB   NUL   
05F0   F2 05                  DW   div   
05F2                DIV:         
05F2   D1                     POP   de   
05F3   E1                     POP   hl   
05F4   C5                     PUSH   bc   ; preserve the IP
05F5   44 4D                  LD   bc,hl   
05F7   CD 15 06               CALL   divide   
05FA   EB                     EX   de,hl   
05FB   ED 53 F4 23            LD   (vRemain),de   
05FF   C1                     POP   bc   
0600   C3 93 03               JP   add3   
0603                DOT:         
0603   CD E1 0A               CALL   jumpTable   
0606   61                     DB   "a"   
0607   7E 08                  DW   bufferArray   
0609   63                     DB   "c"   
060A   8B 09                  DW   bufferChar   
060C   73                     DB   "s"   
060D   71 09                  DW   bufferString   
060F   78                     DB   "x"   
0610   90 09                  DW   bufferXChars   
0612   00                     DB   NUL   
0613   B2 08                  DW   bufferNumber   
0615                             ; division subroutine.
0615                             ; bc: divisor, de: dividend, hl: remainder
0615                DIVIDE:      
0615   21 00 00               LD   hl,0   ; zero the remainder
0618   3E 10                  LD   a,16   ; loop counter
061A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
061A   CB 21                  SLA   c   
061C   CB 10                  RL   b   
061E   ED 6A                  ADC   hl,hl   
0620   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0622   38 03                  JR   c,divide2   
0624   0C                     INC   c   
0625   18 01                  JR   divide3   
0627                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0627   19                     ADD   hl,de   
0628                DIVIDE3:      
0628   3D                     DEC   a   
0629   20 EF                  JR   nz,divide1   
062B   50 59                  LD   de,bc   ; result from bc to de
062D   C9                     RET      
062E                             ; hl = value1, de = value2
062E                             ; hl = result
062E                EQUALS:      
062E   B7                     OR   a   ; reset the carry flag
062F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0631   28 10                  JR   z,true1   
0633   C3 49 06               JP   false1   
0636                             ; hl = value1 de = value2
0636                             ; hl = result
0636                LESSTHANEQ:      
0636   B7                     OR   a   
0637   ED 52                  SBC   hl,de   
0639   18 05                  JR   lessthan1   
063B                             ; hl = value1 de = value2
063B                             ; hl = result
063B                LESSTHAN:      
063B   B7                     OR   a   
063C   ED 52                  SBC   hl,de   
063E   28 09                  JR   z,false1   
0640                LESSTHAN1:      
0640   FA 49 06               JP   m,false1   
0643                TRUE1:       
0643   21 FF FF               LD   hl,TRUE   
0646   E5                     PUSH   hl   
0647   DD E9                  JP   (ix)   
0649                NULL1:       
0649                FALSE1:      
0649   21 00 00               LD   hl,FALSE   
064C   E5                     PUSH   hl   
064D   DD E9                  JP   (ix)   
064F                             ; execute a block of code which ends with }
064F                             ; creates a root scope if BP == stack
064F                             ; else uses outer scope
064F                CARET:       
064F                GO:          
064F   D1                     POP   de   ; de = block*
0650                GO1:         
0650   7B                     LD   a,e   ; if block* == null, exit
0651   B2                     OR   d   
0652   20 02                  JR   nz,go2   
0654   DD E9                  JP   (ix)   
0656                GO2:         
0656   1A                     LD   a,(de)   
0657   FE 7B                  CP   "{"   
0659   28 06                  JR   z,goBlock1   
065B   FE 28                  CP   "("   
065D   C2 94 06               JP   nz,goLambda   
0660                             ; inc de                      ; de is the address to jump back to
0660   D5                     PUSH   de   ; push de just before stack frame
0661                GOBLOCK:      
0661                GOBLOCK1:      
0661   ED 53 00 24            LD   (vTemp1),de   ; save de
0665   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0668   FD 54                  LD   d,iyh   
066A   FD 5D                  LD   e,iyl   
066C   B7                     OR   a   ; if stack* == BP then this is the root_scope
066D   ED 52                  SBC   hl,de   
066F   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
0673   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0674   B4                     OR   h   
0675   3E 00                  LD   a,0   
0677   28 6E                  JR   z,goLambda8   
0679   C5                     PUSH   bc   ; push IP
067A   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
067D   FD 46 05               LD   b,(iy+5)   
0680   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0683   FD 66 03               LD   h,(iy+3)   
0686                GOBLOCK2:      
0686   C5                     PUSH   bc   ; arg_list*
0687   E5                     PUSH   hl   ; first_arg*
0688   FD E5                  PUSH   iy   ; push BP
068A   FD 21 00 00            LD   iy,0   ; BP = SP
068E   FD 39                  ADD   iy,sp   
0690   42 4B                  LD   bc,de   ; bc = de = block*-1
0692   DD E9                  JP   (ix)   
0694                GOLAMBDA:      ; execute lambda
0694   EB                     EX   de,hl   ; hl = lambda*
0695   5E                     LD   e,(hl)   ; de = partial_array*
0696   23                     INC   hl   
0697   56                     LD   d,(hl)   
0698   23                     INC   hl   
0699   7B                     LD   a,e   ; if partial_array* == null skip
069A   B2                     OR   d   
069B   28 25                  JR   z,goLambda3   
069D   ED 43 00 24            LD   (vTemp1),bc   
06A1   22 02 24               LD   (vTemp2),hl   ; save bc,hl
06A4   EB                     EX   de,hl   ; hl = partial_array*
06A5   2B                     DEC   hl   ; skip type byte
06A6   2B                     DEC   hl   ; skip magic byte
06A7   2B                     DEC   hl   ; bc = count
06A8   46                     LD   b,(hl)   
06A9   2B                     DEC   hl   
06AA   4E                     LD   c,(hl)   
06AB   23                     INC   hl   ; hl = array data*
06AC   23                     INC   hl   
06AD   23                     INC   hl   
06AE   23                     INC   hl   
06AF   18 06                  JR   goLambda2   ; push each item on stack
06B1                GOLAMBDA1:      
06B1   5E                     LD   e,(hl)   ; de = partial item
06B2   23                     INC   hl   
06B3   56                     LD   d,(hl)   
06B4   23                     INC   hl   
06B5   D5                     PUSH   de   ; push on stack
06B6   0B                     DEC   bc   
06B7                GOLAMBDA2:      
06B7   79                     LD   a,c   ; if count != 0 then loop
06B8   B0                     OR   b   
06B9   20 F6                  JR   nz,goLambda1   
06BB   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
06BF   2A 02 24               LD   hl,(vTemp2)   ; restore hl
06C2                GOLAMBDA3:      
06C2   5E                     LD   e,(hl)   ; de = block*
06C3   23                     INC   hl   
06C4   56                     LD   d,(hl)   
06C5   23                     INC   hl   
06C6   ED 53 00 24            LD   (vTemp1),de   ; save block*
06CA   5E                     LD   e,(hl)   ; de = arg_list*
06CB   23                     INC   hl   
06CC   56                     LD   d,(hl)   
06CD   23                     INC   hl   
06CE   EB                     EX   de,hl   ; hl = arg_list*
06CF   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
06D3   7D                     LD   a,l   ; if arg_list* == null a = 0
06D4   B4                     OR   h   
06D5   20 03                  JR   nz,goLambda4   
06D7   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06D8   18 0D                  JR   goLambda8   
06DA                GOLAMBDA4:      ; allocate locals
06DA   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06DB   18 03                  JR   goLambda6   
06DD                GOLAMBDA5:      ; loop
06DD   3B                     DEC   sp   
06DE   3B                     DEC   sp   
06DF   3D                     DEC   a   
06E0                GOLAMBDA6:      
06E0   B7                     OR   a   
06E1   20 FA                  JR   nz,goLambda5   ; end loop
06E3                GOLAMBDA7:      
06E3   23                     INC   hl   ; a = num_args* x 2
06E4   7E                     LD   a,(hl)   
06E5   2B                     DEC   hl   
06E6   87                     ADD   a,a   ; a *= 2
06E7                GOLAMBDA8:      
06E7   C5                     PUSH   bc   ; push IP
06E8   44 4D                  LD   bc,hl   
06EA   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06ED   85                     ADD   a,l   
06EE   6F                     LD   l,a   
06EF   39                     ADD   hl,sp   
06F0   18 94                  JR   goBlock2   
06F2                DOLLAR:      
06F2                HEXNUM:      
06F2   21 00 00               LD   hl,0   ; Clear hl to accept the number
06F5                HEXNUM1:      
06F5   03                     INC   bc   
06F6   0A                     LD   a,(bc)   ; Get the character which is a numeral
06F7   CB 77                  BIT   6,a   ; is it uppercase alpha?
06F9   28 02                  JR   z,hexnum2   ; no a decimal
06FB   D6 07                  SUB   7   ; sub 7  to make $a - $F
06FD                HEXNUM2:      
06FD   D6 30                  SUB   $30   ; form decimal digit
06FF   DA 7D 07               JP   c,num2   
0702   FE 10                  CP   $0F+1   
0704   D2 7D 07               JP   nc,num2   
0707   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0708   29                     ADD   hl,hl   ; 4X
0709   29                     ADD   hl,hl   ; 8X
070A   29                     ADD   hl,hl   ; 16X
070B   85                     ADD   a,l   ; add into bottom of hl
070C   6F                     LD   l,a   
070D   18 E6                  JR   hexnum1   
070F                UPCASE:      
070F   0A                     LD   a,(bc)   ; a = identifier char
0710   D6 41                  SUB   "A"   ; "A" = 0
0712   18 05                  JR   ident1   
0714                LOWCASE:      
0714   0A                     LD   a,(bc)   
0715   D6 61                  SUB   "a"   
0717   C6 1A                  ADD   a,26   
0719                IDENT1:      
0719   87                     ADD   a,a   ; l = a * 2
071A   6F                     LD   l,a   
071B   26 23                  LD   h,msb(vars)   
071D   22 F2 23               LD   (vPointer),hl   ; store address in setter
0720   5E                     LD   e,(hl)   
0721   23                     INC   hl   
0722   56                     LD   d,(hl)   
0723   D5                     PUSH   de   
0724   DD E9                  JP   (ix)   
0726                             ; if
0726                             ; condition then -- value
0726                QUESTION:      
0726                IF:          
0726   03                     INC   bc   
0727   0A                     LD   a,(bc)   
0728   FE 3F                  CP   "?"   
072A   28 06                  JR   z,ifte   
072C   0B                     DEC   bc   
072D   11 00 00               LD   de,NUL   ; NUL pointer for else
0730   18 01                  JR   ifte1   
0732                             ; ifte
0732                             ; condition then else -- value
0732                IFTE:        
0732   D1                     POP   de   ; de = else
0733                IFTE1:       
0733   E1                     POP   hl   ; hl = then
0734   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0735   7C                     LD   a,h   
0736   B5                     OR   l   
0737   E1                     POP   hl   ; hl = then
0738   CA 50 06               JP   z,go1   ; if z de = else
073B   EB                     EX   de,hl   ; condition = false, de = then
073C   C3 50 06               JP   go1   
073F                STAR:        
073F                MUL:         
073F   D1                     POP   de   ; get first value
0740   E1                     POP   hl   
0741                MUL2:        
0741   C5                     PUSH   bc   ; Preserve the IP
0742   44 4D                  LD   bc,hl   ; bc = 2nd value
0744   21 00 00               LD   hl,0   
0747   3E 10                  LD   a,16   
0749                MUL3:        
0749   29                     ADD   hl,hl   
074A   CB 13                  RL   e   
074C   CB 12                  RL   d   
074E   30 04                  JR   nc,$+6   
0750   09                     ADD   hl,bc   
0751   30 01                  JR   nc,$+3   
0753   13                     INC   de   
0754   3D                     DEC   a   
0755   20 F2                  JR   nz,mul3   
0757   C1                     POP   bc   ; Restore the IP
0758   C3 93 03               JP   add3   
075B                NUM:         
075B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
075E   0A                     LD   a,(bc)   ; Get numeral or -
075F   FE 2D                  CP   "-"   
0761   20 01                  JR   nz,num0   
0763   03                     INC   bc   ; move to next char, no flags affected
0764                NUM0:        
0764   08                     EX   af,af'   ; save zero flag = 0 for later
0765                NUM1:        
0765   0A                     LD   a,(bc)   ; read digit
0766   D6 30                  SUB   "0"   ; less than 0?
0768   38 13                  JR   c,num2   ; not a digit, exit loop
076A   FE 0A                  CP   10   ; greater that 9?
076C   30 0F                  JR   nc,num2   ; not a digit, exit loop
076E   03                     INC   bc   ; inc IP
076F   54 5D                  LD   de,hl   ; multiply hl * 10
0771   29                     ADD   hl,hl   
0772   29                     ADD   hl,hl   
0773   19                     ADD   hl,de   
0774   29                     ADD   hl,hl   
0775   85                     ADD   a,l   ; add digit in a to hl
0776   6F                     LD   l,a   
0777   3E 00                  LD   a,0   
0779   8C                     ADC   a,h   
077A   67                     LD   h,a   
077B   18 E8                  JR   num1   
077D                NUM2:        
077D   0B                     DEC   bc   
077E   08                     EX   af,af'   ; restore zero flag
077F   20 07                  JR   nz,num3   
0781   EB                     EX   de,hl   ; negate the value of hl
0782   21 00 00               LD   hl,0   
0785   B7                     OR   a   ; jump to sub2
0786   ED 52                  SBC   hl,de   
0788                NUM3:        
0788   E5                     PUSH   hl   ; Put the number on the stack
0789   DD E9                  JP   (ix)   ; and process the next character
078B                RPAREN:      
078B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
078E   FD 46 09               LD   b,(iy+9)   
0791   DD E9                  JP   (ix)   
0793                             ; arg_list* block* -- ptr
0793                SEMICOLON:      
0793   D1                     POP   de   ; de = block* hl = heap*
0794   2A F0 23               LD   hl,(vHeapPtr)   
0797   AF                     XOR   a   
0798   77                     LD   (hl),a   ; compile null partial_array*
0799   23                     INC   hl   
079A   77                     LD   (hl),a   
079B   23                     INC   hl   
079C   73                     LD   (hl),e   ; compile block*
079D   23                     INC   hl   
079E   72                     LD   (hl),d   
079F   23                     INC   hl   
07A0   D1                     POP   de   ; de = block*
07A1   73                     LD   (hl),e   ; compile arg_list*
07A2   23                     INC   hl   
07A3   72                     LD   (hl),d   
07A4   23                     INC   hl   
07A5   ED 5B F0 23            LD   de,(vHeapPtr)   ; return lambda*
07A9   D5                     PUSH   de   
07AA   22 F0 23               LD   (vHeapPtr),hl   ; heap* += 4
07AD   DD E9                  JP   (ix)   
07AF                             ; shiftLeft
07AF                             ; value count -- value2          shift left count places
07AF                SHIFTLEFT:      
07AF   50 59                  LD   de,bc   ; save IP
07B1   C1                     POP   bc   ; bc = count
07B2   41                     LD   b,c   ; b = loop counter
07B3   E1                     POP   hl   
07B4   04                     INC   b   ; test for counter=0 case
07B5   18 01                  JR   shiftLeft2   
07B7                SHIFTLEFT1:      
07B7   29                     ADD   hl,hl   ; left shift hl
07B8                SHIFTLEFT2:      
07B8   10 FD                  DJNZ   shiftLeft1   
07BA   E5                     PUSH   hl   
07BB   42 4B                  LD   bc,de   ; restore IP
07BD   DD E9                  JP   (ix)   
07BF                             ; shiftRight
07BF                             ; value count -- value2          shift left count places
07BF                SHIFTRIGHT:      
07BF   50 59                  LD   de,bc   ; save IP
07C1   C1                     POP   bc   ; bc = count
07C2   41                     LD   b,c   ; b = loop counter
07C3   E1                     POP   hl   
07C4   04                     INC   b   ; test for counter=0 case
07C5   18 04                  JR   shiftRight2   
07C7                SHIFTRIGHT1:      
07C7   CB 3C                  SRL   h   ; right shift hl
07C9   CB 1D                  RR   l   
07CB                SHIFTRIGHT2:      
07CB   10 FA                  DJNZ   shiftRight1   
07CD   E5                     PUSH   hl   
07CE   42 4B                  LD   bc,de   ; restore IP
07D0   DD E9                  JP   (ix)   
07D2                             ; string
07D2                             ; -- ptr                        ; points to start of string chars,
07D2                             ; length is stored at start - 2 bytes
07D2                DBLQUOTE:      
07D2                STRING:      
07D2   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
07D5   23                     INC   hl   ; skip length field to start
07D6   23                     INC   hl   
07D7   E5                     PUSH   hl   ; save start of string
07D8   03                     INC   bc   ; point to next char
07D9   18 03                  JR   string2   
07DB                STRING1:      
07DB   77                     LD   (hl),a   
07DC   23                     INC   hl   ; increase count
07DD   03                     INC   bc   ; point to next char
07DE                STRING2:      
07DE   0A                     LD   a,(bc)   
07DF   FE 22                  CP   DQUOTE   ; " is the string terminator
07E1   28 04                  JR   z,string3   
07E3   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07E5   20 F4                  JR   nz,string1   
07E7                STRING3:      
07E7   AF                     XOR   a   ; write NUL to terminate string
07E8   77                     LD   (hl),a   ; hl = end of string
07E9   23                     INC   hl   
07EA   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07ED   2B                     DEC   hl   ; hl = end of string without terminator
07EE   D1                     POP   de   ; de = start of string
07EF   D5                     PUSH   de   ; return start of string
07F0   B7                     OR   a   ; hl = length bytes, de = start of string
07F1   ED 52                  SBC   hl,de   
07F3   EB                     EX   de,hl   
07F4   2B                     DEC   hl   ; write length bytes to length field at start - 2
07F5   72                     LD   (hl),d   
07F6   2B                     DEC   hl   
07F7   73                     LD   (hl),e   
07F8   DD E9                  JP   (ix)   
07FA                MINUS:       ; negative sign or subtract
07FA   03                     INC   bc   ; check if sign of a number
07FB   0A                     LD   a,(bc)   
07FC   0B                     DEC   bc   
07FD   FE 30                  CP   "0"   
07FF   38 05                  JR   c,sub   
0801   FE 3A                  CP   "9"+1   
0803   DA 3B 03               JP   c,num_   
0806                SUB:         ; Subtract the value 2nd on stack from top of stack
0806   03                     INC   bc   
0807   FE 2D                  CP   "-"   
0809   20 05                  JR   nz,sub1   
080B   E1                     POP   hl   
080C   2B                     DEC   hl   
080D   C3 89 04               JP   assign0   
0810                SUB1:        
0810   0B                     DEC   bc   
0811   D1                     POP   de   
0812   E1                     POP   hl   
0813   B7                     OR   a   
0814   ED 52                  SBC   hl,de   
0816   C3 93 03               JP   add3   
0819                ERROR1:      
0819   21 01 00               LD   hl,1   ; error 1: unknown command
081C   E5                     PUSH   hl   
081D   C3 65 0C               JP   error   
0820                COMMENT:      
0820   03                     INC   bc   ; point to next char
0821   0A                     LD   a,(bc)   
0822   FE 20                  CP   " "   ; terminate on any char less than SP
0824   30 FA                  JR   nc,comment   
0826   0B                     DEC   bc   
0827   DD E9                  JP   (ix)   
0829                COMMAND_A:      
0829   CD E1 0A               CALL   jumpTable   
082C   62                     DB   "b"   
082D   35 08                  DW   absolute   
082F   64                     DB   "d"   
0830   42 08                  DW   addrOf   
0832   00                     DB   NUL   
0833   19 08                  DW   error1   
0835                             ; /ab absolute
0835                             ; num -- num
0835                ABSOLUTE:      
0835   E1                     POP   hl   
0836   CB 7C                  BIT   7,h   
0838   C8                     RET   z   
0839   AF                     XOR   a   
083A   95                     SUB   l   
083B   6F                     LD   l,a   
083C   9F                     SBC   a,a   
083D   94                     SUB   h   
083E   67                     LD   h,a   
083F   E5                     PUSH   hl   
0840   DD E9                  JP   (ix)   
0842                             ; /ad addrOf
0842                             ; char -- addr
0842                ADDROF:      
0842   E1                     POP   hl   ; a = char
0843   7D                     LD   a,l   
0844   FE 7B                  CP   "z"+1   ; if a > z then exit
0846   30 19                  JR   nc,addrOf2   
0848   D6 41                  SUB   "A"   ; a - 65
084A   38 15                  JR   c,addrOf2   ; if < A then exit
084C   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
084E   38 06                  JR   c,addrOf1   
0850   D6 06                  SUB   "a"-("Z"+1)   
0852   FE 1A                  CP   "Z"-"A"+1   
0854   38 0B                  JR   c,addrOf2   ; if < a then exit
0856                ADDROF1:      
0856   87                     ADD   a,a   ; double a
0857   21 00 23               LD   hl,VARS   ; hl = VARS + a
085A   85                     ADD   a,l   
085B   6F                     LD   l,a   
085C   3E 00                  LD   a,0   
085E   8C                     ADC   a,h   
085F   67                     LD   h,a   
0860   E5                     PUSH   hl   
0861                ADDROF2:      
0861   DD E9                  JP   (ix)   
0863                COMMAND_B:      
0863   CD E1 0A               CALL   jumpTable   
0866   61                     DB   "a"   
0867   7E 08                  DW   bufferArray   
0869   63                     DB   "c"   
086A   8B 09                  DW   bufferChar   
086C   6E                     DB   "n"   
086D   B2 08                  DW   bufferNumber   
086F   72                     DB   "r"   
0870   57 09                  DW   break   
0872   73                     DB   "s"   
0873   71 09                  DW   bufferString   
0875   78                     DB   "x"   
0876   90 09                  DW   bufferXChars   
0878   79                     DB   "y"   
0879   A8 0B                  DW   coldStart   
087B   00                     DB   NUL   
087C   19 08                  DW   error1   
087E                             ; /ba buffer array
087E                             ; array* --
087E                BUFFERARRAY:      
087E   CD 4F 06               CALL   go   
0881   00 00                  DW   NUL   ; NUL closure
0883   87 08                  DW   $+4   
0885   C5 0A                  DW   args1A2L   
0887   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
08B2                             ; /bd buffer decimal
08B2                             ; value --
08B2                BUFFERNUMBER:      
08B2   3A E8 23               LD   a,(vNumBase)   
08B5   FE 10                  CP   16   
08B7   28 66                  JR   z,bufferHex   ; else falls through
08B9                             ; /bd buffer decimal
08B9                             ; value --
08B9                BUFFERDEC:      
08B9   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08BD   D9                     EXX      
08BE   E1                     POP   hl   ; hl = value
08BF   CD D3 08               CALL   bufferDec0   
08C2   D9                     EXX      ; de = buffer*' bc = IP
08C3   3E 20                  LD   a," "   ; append space to buffer
08C5   12                     LD   (de),a   
08C6   1C                     INC   e   ; buffer*++, wraparound
08C7   CC CA 0A               CALL   z,flushBuffer   
08CA   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
08CD   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
08D1   DD E9                  JP   (ix)   
08D3                             ; hl = value
08D3                             ; de' = buffer*
08D3                             ; a, bc, de, hl destroyed
08D3                BUFFERDEC0:      
08D3   CB 7C                  BIT   7,h   
08D5   28 0C                  JR   z,bufferDec1   
08D7   D9                     EXX      
08D8   3E 2D                  LD   a,"-"   
08DA   12                     LD   (de),a   
08DB   13                     INC   de   
08DC   D9                     EXX      
08DD   AF                     XOR   a   
08DE   95                     SUB   l   
08DF   6F                     LD   l,a   
08E0   9F                     SBC   a,a   
08E1   94                     SUB   h   
08E2   67                     LD   h,a   
08E3                BUFFERDEC1:      
08E3   0E 00                  LD   c,0   ; leading zeros flag = false
08E5   11 F0 D8               LD   de,-10000   
08E8   CD 03 09               CALL   bufferDec2   
08EB   11 18 FC               LD   de,-1000   
08EE   CD 03 09               CALL   bufferDec2   
08F1   11 9C FF               LD   de,-100   
08F4   CD 03 09               CALL   bufferDec2   
08F7   1E F6                  LD   e,-10   
08F9   CD 03 09               CALL   bufferDec2   
08FC   0C                     INC   c   ; flag = true for at least digit
08FD   1E FF                  LD   e,-1   
08FF   CD 03 09               CALL   bufferDec2   
0902   C9                     RET      
0903                BUFFERDEC2:      
0903   06 2F                  LD   b,"0"-1   
0905                BUFFERDEC3:      
0905   04                     INC   b   
0906   19                     ADD   hl,de   
0907   38 FC                  JR   c,bufferDec3   
0909   ED 52                  SBC   hl,de   
090B   3E 30                  LD   a,"0"   
090D   B8                     CP   b   
090E   20 05                  JR   nz,bufferDec4   
0910   AF                     XOR   a   
0911   B1                     OR   c   
0912   C8                     RET   z   
0913   18 01                  JR   bufferDec5   
0915                BUFFERDEC4:      
0915   0C                     INC   c   
0916                BUFFERDEC5:      
0916   78                     LD   a,b   
0917   D9                     EXX      
0918   12                     LD   (de),a   
0919   1C                     INC   e   
091A   CC CA 0A               CALL   z,flushBuffer   
091D   D9                     EXX      
091E   C9                     RET      
091F                             ; /bh buffer hex
091F                             ; value --
091F                BUFFERHEX:      
091F   E1                     POP   hl   ; hl = value
0920   ED 5B EC 23            LD   de,(vBufPtr)   
0924   3E 24                  LD   a,"$"   ; # prefix
0926   12                     LD   (de),a   
0927   1C                     INC   e   ; buffer*++, wraparound
0928   CC CA 0A               CALL   z,flushBuffer   
092B   7C                     LD   a,h   
092C   CD 40 09               CALL   bufferHex1   
092F   7D                     LD   a,l   
0930   CD 40 09               CALL   bufferHex1   
0933   3E 20                  LD   a," "   ; append space to buffer
0935   12                     LD   (de),a   
0936   1C                     INC   e   ; buffer*++, wraparound
0937   CC CA 0A               CALL   z,flushBuffer   
093A   ED 53 EC 23            LD   (vBufPtr),de   
093E   DD E9                  JP   (ix)   
0940                BUFFERHEX1:      
0940   F5                     PUSH   af   
0941   1F                     RRA      
0942   1F                     RRA      
0943   1F                     RRA      
0944   1F                     RRA      
0945   CD 49 09               CALL   bufferHex2   
0948   F1                     POP   af   
0949                BUFFERHEX2:      
0949   E6 0F                  AND   0x0F   
094B   C6 90                  ADD   a,0x90   
094D   27                     DAA      
094E   CE 40                  ADC   a,0x40   
0950   27                     DAA      
0951   12                     LD   (de),a   
0952   1C                     INC   e   ; buffer*++, wraparound
0953   CC CA 0A               CALL   z,flushBuffer   
0956   C9                     RET      
0957                             ; /br break from loop
0957                             ; --
0957                BREAK:       
0957   E1                     POP   hl   
0958   7D                     LD   a,l   
0959   B4                     OR   h   
095A   28 02                  JR   z,break1   
095C   DD E9                  JP   (ix)   
095E                BREAK1:      
095E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0960   FD 54                  LD   d,iyh   
0962   21 08 00               LD   hl,8   
0965   19                     ADD   hl,de   
0966   23                     INC   hl   
0967   23                     INC   hl   
0968   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
096B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
096E   C3 37 05               JP   blockEnd   
0971                             ; /bs buffered string
0971                             ; string* --
0971                BUFFERSTRING:      
0971   E1                     POP   hl   ; hl = string*
0972   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0976   18 06                  JR   bufferString1   
0978                BUFFERSTRING0:      
0978   12                     LD   (de),a   ; a -> buffer*
0979   1C                     INC   e   ; buffer*++, wraparound
097A   CC CA 0A               CALL   z,flushBuffer   
097D   23                     INC   hl   
097E                BUFFERSTRING1:      
097E   7E                     LD   a,(hl)   ; a <- string*
097F   B7                     OR   a   ; if NUL exit loop
0980   20 F6                  JR   nz,bufferString0   
0982   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0985   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0989   DD E9                  JP   (ix)   
098B                             ; /bc buffer char
098B                             ; char --
098B                BUFFERCHAR:      
098B   21 01 00               LD   hl,1   
098E   18 01                  JR   bufferXChars0   
0990                             ; /bx buffered x chars
0990                             ; char length --
0990                BUFFERXCHARS:      
0990   E1                     POP   hl   ; hl = length
0991                BUFFERXCHARS0:      
0991   D1                     POP   de   ; a' = char
0992   7B                     LD   a,e   
0993   08                     EX   af,af'   
0994   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0998   18 08                  JR   bufferXChars2   
099A                BUFFERXCHARS1:      
099A   08                     EX   af,af'   
099B   12                     LD   (de),a   
099C   08                     EX   af,af'   
099D   1C                     INC   e   ; buffer*++, wraparound
099E   CC CA 0A               CALL   z,flushBuffer   
09A1   2B                     DEC   hl   
09A2                BUFFERXCHARS2:      
09A2   7D                     LD   a,l   
09A3   B4                     OR   h   
09A4   20 F4                  JR   nz,bufferXChars1   
09A6   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
09AA   DD E9                  JP   (ix)   
09AC                COMMAND_I:      
09AC   CD E1 0A               CALL   jumpTable   
09AF   6E                     DB   "n"   
09B0   95 0A                  DW   input   
09B2   76                     DB   "v"   
09B3   BF 03                  DW   invert   
09B5   00                     DB   NUL   
09B6   19 08                  DW   error1   
09B8                COMMAND_P:      
09B8   CD E1 0A               CALL   jumpTable   
09BB   61                     DB   "a"   
09BC   CA 09                  DW   partial   
09BE   62                     DB   "b"   
09BF   EA 09                  DW   printBuffer   
09C1   63                     DB   "c"   
09C2   0D 0A                  DW   printChars   
09C4   6B                     DB   "k"   
09C5   1F 0A                  DW   printStack   
09C7   00                     DB   NUL   
09C8   19 08                  DW   error1   
09CA                             ; partial
09CA                             ; array* lambda* -- lambda1*
09CA                PARTIAL:      
09CA   E1                     POP   hl   ; h1 = lambda*
09CB   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09CF   ED 43 00 24            LD   (vTemp1),bc   ; save IP
09D3   01 06 00               LD   bc,6   ; bc = count
09D6   ED B0                  LDIR      ; clone lambda
09D8   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
09DC   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09DF   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += 6
09E3   D1                     POP   de   ; de = array*
09E4   E5                     PUSH   hl   ; return partial_array*
09E5   73                     LD   (hl),e   ; compile array*
09E6   23                     INC   hl   
09E7   72                     LD   (hl),d   
09E8   DD E9                  JP   (ix)   
09EA                             ; /pb printBuffer
09EA                             ; --
09EA                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
09EA                PRINTBUFFER:      
09EA   CD 4F 06               CALL   go   
09ED   00 00                  DW   NUL   ; NUL closure
09EF   F3 09                  DW   $+4   
09F1   C2 0A                  DW   args1A0L   
09F3   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A0D                             ; printChars
0A0D                             ; char* len --
0A0D                PRINTCHARS:      
0A0D   E1                     POP   hl   ; hl = count
0A0E   D1                     POP   de   ; de = char*
0A0F   CD 1A 0A               CALL   printChars2   
0A12   DD E9                  JP   (ix)   
0A14                PRINTCHARS1:      
0A14   1A                     LD   a,(de)   ; print char at char*
0A15   CD 85 00               CALL   putchar   
0A18   13                     INC   de   ; char*++
0A19   2B                     DEC   hl   ; count--
0A1A                PRINTCHARS2:      
0A1A   7D                     LD   a,l   ; count == 0?
0A1B   B4                     OR   h   
0A1C   C8                     RET   z   
0A1D   18 F5                  JR   printChars1   ; if not loop
0A1F                             ; /pk print stack
0A1F                             ; --
0A1F                PRINTSTACK:      
0A1F                             ;     ld (vTemp1),bc
0A1F                             ;     call printStr
0A1F                             ;     .cstr "=> "
0A1F                             ;     ld hl,STACK
0A1F                             ;     sbc hl,sp
0A1F                             ;     srl h
0A1F                             ;     rr l
0A1F                             ;     ld bc,hl
0A1F                             ;     ld hl,STACK
0A1F                             ;     jr printStack2
0A1F                             ; printStack1:
0A1F                             ;     dec bc
0A1F                             ;     dec hl
0A1F                             ;     ld d,(hl)
0A1F                             ;     dec hl
0A1F                             ;     ld e,(hl)
0A1F                             ;     ex de,hl
0A1F                             ;     call prthex
0A1F                             ;     ex de,hl
0A1F                             ;     ld a," "
0A1F                             ;     call putchar
0A1F                             ; printStack2:
0A1F                             ;     ld a,c
0A1F                             ;     or b
0A1F                             ;     jr nz,printStack1
0A1F                             ;     call prompt
0A1F                             ;     ld bc,(vTemp1)
0A1F   DD E9                  JP   (ix)   
0A21                COMMAND_R:      
0A21   CD E1 0A               CALL   jumpTable   
0A24   65                     DB   "e"   
0A25   2A 0A                  DW   remain   
0A27   00                     DB   NUL   
0A28   19 08                  DW   error1   
0A2A                REMAIN:      
0A2A   2A F4 23               LD   hl,(vRemain)   
0A2D   E5                     PUSH   hl   
0A2E   DD E9                  JP   (ix)   
0A30                SIZE:        
0A30   E1                     POP   hl   
0A31   2B                     DEC   hl   ; skip magic byte
0A32   2B                     DEC   hl   ; skip type tag
0A33   2B                     DEC   hl   ; msb size
0A34   56                     LD   d,(hl)   
0A35   2B                     DEC   hl   ; lsb size
0A36   5E                     LD   e,(hl)   
0A37   D5                     PUSH   de   
0A38   DD E9                  JP   (ix)   
0A3A                COMMAND_V:      
0A3A   CD E1 0A               CALL   jumpTable   
0A3D   62                     DB   "b"   
0A3E   5E 0A                  DW   varBufPtr   
0A40   68                     DB   "h"   
0A41   67 0A                  DW   varHeapPtr   
0A43   74                     DB   "t"   
0A44   70 0A                  DW   varTIBPtr   
0A46   42                     DB   "B"   
0A47   4F 0A                  DW   constBufStart   
0A49   54                     DB   "T"   
0A4A   59 0A                  DW   constTIBStart   
0A4C   00                     DB   NUL   
0A4D   19 08                  DW   error1   
0A4F                CONSTBUFSTART:      
0A4F   11 00 22               LD   de,BUF   
0A52   18 28                  JR   constant   
0A54                CONSTHEAPSTART:      
0A54   11 1E 24               LD   de,HEAP   
0A57   18 23                  JR   constant   
0A59                CONSTTIBSTART:      
0A59   11 00 21               LD   de,TIB   
0A5C   18 1E                  JR   constant   
0A5E                VARBUFPTR:      
0A5E   ED 5B EC 23            LD   de,(vBufPtr)   
0A62   21 EC 23               LD   hl,vBufPtr   
0A65   18 12                  JR   variable   
0A67                VARHEAPPTR:      
0A67   ED 5B F0 23            LD   de,(vHeapPtr)   
0A6B   21 F0 23               LD   hl,vHeapPtr   
0A6E   18 09                  JR   variable   
0A70                VARTIBPTR:      
0A70   ED 5B EA 23            LD   de,(vTIBPtr)   
0A74   21 EA 23               LD   hl,vTIBPtr   
0A77   18 00                  JR   variable   
0A79                VARIABLE:      
0A79   22 F2 23               LD   (vPointer),hl   
0A7C                CONSTANT:      
0A7C   D5                     PUSH   de   
0A7D   DD E9                  JP   (ix)   
0A7F                CHARS:       
0A7F   21 01 00               LD   hl,1   
0A82                CHARS1:      
0A82   22 E6 23               LD   (vDataWidth),hl   
0A85   DD E9                  JP   (ix)   
0A87                DECIMAL:      
0A87   21 0A 00               LD   hl,10   
0A8A                DECIMAL1:      
0A8A   22 E8 23               LD   (vNumBase),hl   
0A8D   DD E9                  JP   (ix)   
0A8F                HEXADECIMAL:      
0A8F   21 10 00               LD   hl,16   
0A92   C3 8A 0A               JP   decimal1   
0A95                             ; Z80 port input
0A95                             ; port -- value
0A95                INPUT:       
0A95   E1                     POP   hl   
0A96   59                     LD   e,c   ; save IP
0A97   4D                     LD   c,l   
0A98   ED 68                  IN   l,(c)   
0A9A   26 00                  LD   h,0   
0A9C   4B                     LD   c,e   ; restore IP
0A9D   E5                     PUSH   hl   
0A9E   DD E9                  JP   (ix)   
0AA0                KEY:         
0AA0   CD 81 00               CALL   getchar   
0AA3   26 00                  LD   h,0   
0AA5   6F                     LD   l,a   
0AA6   E5                     PUSH   hl   
0AA7   DD E9                  JP   (ix)   
0AA9                             ; Z80 port output
0AA9                             ; value port --
0AA9                OUTPUT:      
0AA9   E1                     POP   hl   
0AAA   59                     LD   e,c   ; save IP
0AAB   4D                     LD   c,l   
0AAC   E1                     POP   hl   
0AAD   ED 69                  OUT   (c),l   
0AAF   4B                     LD   c,e   ; restore IP
0AB0   DD E9                  JP   (ix)   
0AB2                NUMBERS:      
0AB2   21 02 00               LD   hl,2   
0AB5   C3 82 0A               JP   chars1   
0AB8                             ; 
0AB8                             ; keyIter:
0AB8                             ;     call go
0AB8                             ;     .cstr "{/k /t}"             ; block
0AB8                             ; fromIter:
0AB8                             ;     call go
0AB8                             ;     dw NUL                      ; NUL closure
0AB8                             ;     dw $+4
0AB8                             ;     dw args1A0L
0AB8                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB8                             ; fromIter1:
0AB8                             ;     call go
0AB8                             ;     dw NUL                      ; NUL closure
0AB8                             ;     dw $+4
0AB8                             ;     dw args2A0L
0AB8                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0AB8                FILTER:      
0AB8                MAP:         
0AB8                SCAN:        
0AB8   DD E9                  JP   (ix)   
0ABA                             ;*******************************************************************
0ABA                             ; reusable arglists
0ABA                             ;*******************************************************************
0ABA                             ; new ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0ABA                ARGSX1A0L_:      
0ABA   00                     DB   0   
0ABB   01 61                  .PSTR   "a"   
0ABD                ARGSX0A2L_:      
0ABD   02                     DB   2   
0ABE   03 61 62 63            .PSTR   "abc"   
0AC2                             ; 
0AC2                ARGS1A0L:      ; one arg zero locals
0AC2   00                     DB   0   ; num locals
0AC3   01                     DB   1   ; num args + locals
0AC4   61                     DB   "a"   
0AC5                ARGS1A2L:      ; one arg two locals
0AC5   02                     DB   2   ; num locals
0AC6   03                     DB   3   ; num args + locals
0AC7   61 62 63               DB   "abc"   
0ACA                             ;*******************************************************************
0ACA                             ; general routines
0ACA                             ;*******************************************************************
0ACA                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0ACA                FLUSHBUFFER:      
0ACA   F5                     PUSH   af   
0ACB   D5                     PUSH   de   
0ACC   E5                     PUSH   hl   
0ACD   2A EC 23               LD   hl,(vBufPtr)   
0AD0   11 00 22               LD   de,BUF   
0AD3   ED 53 EC 23            LD   (vBufPtr),de   
0AD7   B7                     OR   a   
0AD8   ED 52                  SBC   hl,de   
0ADA   CD 1A 0A               CALL   printChars2   
0ADD   E1                     POP   hl   
0ADE   D1                     POP   de   
0ADF   F1                     POP   af   
0AE0   C9                     RET      
0AE1                             ; followed by a table
0AE1                             ; db char
0AE1                             ; dw addr
0AE1                             ; the final item must have char == NUL
0AE1                JUMPTABLE:      
0AE1   03                     INC   bc   
0AE2   E1                     POP   hl   
0AE3                JUMPTABLE0:      
0AE3   AF                     XOR   a   
0AE4   BE                     CP   (hl)   
0AE5   28 09                  JR   z,jumpTable1   
0AE7   0A                     LD   a,(bc)   
0AE8   BE                     CP   (hl)   
0AE9   28 06                  JR   z,jumpTable2   
0AEB   23                     INC   hl   
0AEC   23                     INC   hl   
0AED   23                     INC   hl   
0AEE   18 F3                  JR   jumpTable0   
0AF0                JUMPTABLE1:      
0AF0   0B                     DEC   bc   
0AF1                JUMPTABLE2:      
0AF1   23                     INC   hl   
0AF2   5E                     LD   e,(hl)   
0AF3   23                     INC   hl   
0AF4   56                     LD   d,(hl)   
0AF5   EB                     EX   de,hl   
0AF6   E9                     JP   (hl)   
0AF7                PRTSTR0:      
0AF7   CD 85 00               CALL   putchar   
0AFA   23                     INC   hl   
0AFB                PRTSTR:      
0AFB   7E                     LD   a,(hl)   
0AFC   B7                     OR   a   
0AFD   20 F8                  JR   nz,prtstr0   
0AFF   C9                     RET      
0B00                             ; **************************************************************************
0B00                             ; calculate nesting value
0B00                             ; a is char to be tested,
0B00                             ; e is the nesting value (initially 0)
0B00                             ; e is increased by ( and [
0B00                             ; e is decreased by ) and ]
0B00                             ; e has its bit 7 toggled by `
0B00                             ; limited to 127 levels
0B00                             ; **************************************************************************
0B00                NESTING:      
0B00   FE 22                  CP   DQUOTE   ; quote char
0B02   28 06                  JR   z,nesting0   
0B04   FE 60                  CP   "`"   ; quote char
0B06   28 02                  JR   z,nesting0   
0B08   18 0A                  JR   nesting1   
0B0A                NESTING0:      
0B0A   CB 7B                  BIT   7,e   
0B0C   28 03                  JR   z,nesting1a   
0B0E   CB BB                  RES   7,e   
0B10   C9                     RET      
0B11                NESTING1A:      
0B11   CB FB                  SET   7,e   
0B13   C9                     RET      
0B14                NESTING1:      
0B14   CB 7B                  BIT   7,e   
0B16   C0                     RET   nz   
0B17   FE 7B                  CP   "{"   
0B19   28 08                  JR   z,nesting2   
0B1B   FE 5B                  CP   "["   
0B1D   28 04                  JR   z,nesting2   
0B1F   FE 28                  CP   "("   
0B21   20 02                  JR   nz,nesting3   
0B23                NESTING2:      
0B23   1C                     INC   e   
0B24   C9                     RET      
0B25                NESTING3:      
0B25   FE 7D                  CP   "}"   
0B27   28 07                  JR   z,nesting4   
0B29   FE 5D                  CP   "]"   
0B2B   28 03                  JR   z,nesting4   
0B2D   FE 29                  CP   ")"   
0B2F   C0                     RET   nz   
0B30                NESTING4:      
0B30   1D                     DEC   e   
0B31   C9                     RET      
0B32                PROMPT:      
0B32   CD 42 0B               CALL   printStr   
0B35   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B3A   C9                     RET      
0B3B                CRLF:        
0B3B   CD 42 0B               CALL   printStr   
0B3E   0D 0A 00               .CSTR   "\r\n"   
0B41   C9                     RET      
0B42                             ; prints a null teminated string
0B42                             ; the string should be immediately following the call
0B42                PRINTSTR:      
0B42   E3                     EX   (sp),hl   ; swap			
0B43   CD FB 0A               CALL   prtstr   
0B46   23                     INC   hl   ; inc past NUL
0B47   E3                     EX   (sp),hl   ; put it back	
0B48   C9                     RET      
0B49                TITLESTR:      
0B49   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0B5D                INIT:        
0B5D   21 49 0B               LD   hl,titleStr   
0B60   11 0A 24               LD   de,titleBuf   
0B63   06 14                  LD   b,20   
0B65                INIT1:       
0B65   1A                     LD   a,(de)   
0B66   BE                     CP   (hl)   
0B67   20 17                  JR   nz,coldBoot0   
0B69   13                     INC   de   
0B6A   23                     INC   hl   
0B6B   10 F8                  DJNZ   init1   
0B6D                WARMINIT:      
0B6D   ED 4B F6 23            LD   bc,(vSavedIP)   ; restore IP
0B71   ED 7B F8 23            LD   sp,(vSavedSP)   ; restore SP
0B75   DD 2A FA 23            LD   ix,(vSavedNext)   ; restore Next
0B79   FD 2A FC 23            LD   iy,(vSavedBP)   ; restore BP
0B7D   C3 B7 0B               JP   start1   
0B80                COLDBOOT0:      
0B80   21 49 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0B83   11 0A 24               LD   de,titleBuf   
0B86   06 14                  LD   b,20   
0B88   ED B0                  LDIR      
0B8A                COLDINIT:      
0B8A   21 80 01               LD   hl,isysVars   
0B8D   11 E6 23               LD   de,sysVars   
0B90   01 10 00               LD   bc,8 * 2   
0B93   ED B0                  LDIR      
0B95   21 00 23               LD   hl,vars   ; 52 vars LO HI
0B98   06 34                  LD   b,26*2   
0B9A   AF                     XOR   a   
0B9B                COLDBOOT1:      
0B9B   77                     LD   (hl),a   
0B9C   23                     INC   hl   
0B9D   10 FC                  DJNZ   coldBoot1   
0B9F   DD 2A EE 23            LD   ix,(vNext)   
0BA3   FD 21 00 21            LD   iy,STACK   
0BA7   C9                     RET      
0BA8                COLDSTART:      
0BA8   31 00 21               LD   sp,STACK   
0BAB   CD 80 0B               CALL   coldBoot0   
0BAE   C3 B7 0B               JP   start1   
0BB1                START:       
0BB1   31 00 21               LD   sp,STACK   ; start Monty
0BB4   CD 5D 0B               CALL   init   ; setups
0BB7                START1:      
0BB7   21 0A 24               LD   hl,titleBuf   
0BBA   CD FB 0A               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0BBD                INTERPRET:      
0BBD   CD CA 0A               CALL   flushBuffer   
0BC0   CD 32 0B               CALL   prompt   
0BC3   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BC6   21 00 21               LD   hl,TIB   
0BC9   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BCC                INTERPRET2:      ; calculate nesting
0BCC   1E 00                  LD   e,0   ; initilize nesting value
0BCE   C5                     PUSH   bc   ; save offset into TIB,
0BCF                             ; bc is also the count of chars in TIB
0BCF   21 00 21               LD   hl,TIB   ; hl is start of TIB
0BD2   18 0B                  JR   interpret4   
0BD4                INTERPRET3:      
0BD4   3E 33                  LD   a,"3"   
0BD6   CD 85 00               CALL   putchar   
0BD9   7E                     LD   a,(hl)   ; a = char in TIB
0BDA   23                     INC   hl   ; inc pointer into TIB
0BDB   0B                     DEC   bc   ; dec count of chars in TIB
0BDC   CD 00 0B               CALL   nesting   ; update nesting value
0BDF                INTERPRET4:      
0BDF   79                     LD   a,c   ; is count zero?
0BE0   B0                     OR   b   
0BE1   20 F1                  JR   nz,interpret3   ; if not loop
0BE3   C1                     POP   bc   ; restore offset into TIB
0BE4                INTERPRET5:      
0BE4   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE7   FE 20                  CP   $20   ; compare to space
0BE9   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BEB   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BED                             ; ???? NEEDED?
0BED   28 3B                  JR   z,interpret8   
0BEF   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BF1   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF3   FE 05                  CP   CTRL_E   
0BF5   CA 88 0C               JP   z,edit_   
0BF8   FE 08                  CP   CTRL_H   
0BFA   CA 78 0C               JP   z,backSpace_   
0BFD   FE 0A                  CP   CTRL_J   
0BFF   CA A0 0C               JP   z,reEdit_   
0C02   FE 13                  CP   CTRL_S   
0C04   CA A3 0C               JP   z,printStack_   
0C07                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C07                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C07                             ; DB     lsb(list_)       ; FF  ^L 12
0C07                             ; DB     lsb(printStack_) ; DLE ^P 16
0C07                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C07                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C07                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C07                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C07                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C07                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C07                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C07                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C07                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C07                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C07                INTERPRET5A:      
0C07                             ; ld (vTIBPtr),bc
0C07                             ; ld bc,(vTIBPtr)
0C07   18 C3                  JR   interpret2   
0C09                INTERPRET6:      
0C09   21 00 21               LD   hl,TIB   
0C0C   09                     ADD   hl,bc   
0C0D   77                     LD   (hl),a   ; store the character in textbuf
0C0E   03                     INC   bc   
0C0F   CD 85 00               CALL   putchar   ; echo character to screen
0C12   CD 00 0B               CALL   nesting   
0C15   18 CD                  JR   interpret5   ; wait for next character
0C17                INTERPRET7:      
0C17   21 00 21               LD   hl,TIB   
0C1A   09                     ADD   hl,bc   
0C1B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1D   23                     INC   hl   
0C1E   36 0A                  LD   (hl),"\n"   
0C20   23                     INC   hl   
0C21   03                     INC   bc   
0C22   03                     INC   bc   
0C23   CD 3B 0B               CALL   crlf   ; echo character to screen
0C26   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C27   B7                     OR   a   
0C28   20 BA                  JR   nz,interpret5   
0C2A                INTERPRET8:      
0C2A   21 00 21               LD   hl,TIB   
0C2D   09                     ADD   hl,bc   
0C2E   22 EA 23               LD   (vTIBPtr),hl   
0C31   01 00 21               LD   bc,TIB   
0C34   ED 43 F6 23            LD   (vSavedIP),bc   ; save IP
0C38   ED 73 F8 23            LD   (vSavedSP),sp   ; save SP
0C3C   DD 22 FA 23            LD   (vSavedNext),ix   ; save Next
0C40   FD 22 FC 23            LD   (vSavedBP),iy   ; save BP
0C44   0B                     DEC   bc   
0C45                NEXT:        
0C45   03                     INC   bc   ; Increment the IP
0C46   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C47   FE 20                  CP   " "   ; whitespace?
0C49   28 FA                  JR   z,next   ; space? ignore
0C4B   38 09                  JR   c,next1   
0C4D   D6 20                  SUB   " "   
0C4F   6F                     LD   l,a   ; index into table
0C50   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C52   6E                     LD   l,(hl)   ; get low jump address
0C53   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C55   E9                     JP   (hl)   ; Jump to routine
0C56                NEXT1:       
0C56   FE 00                  CP   NUL   ; end of input string?
0C58   28 03                  JR   z,exit   
0C5A   C3 BD 0B               JP   interpret   ; no, other whitespace, macros?
0C5D                EXIT:        
0C5D   03                     INC   bc   
0C5E   60 69                  LD   hl,bc   
0C60   E9                     JP   (hl)   
0C61                RUN:         
0C61   C1                     POP   bc   
0C62   0B                     DEC   bc   
0C63   DD E9                  JP   (ix)   
0C65                ERROR:       
0C65   CD 61 0C               CALL   run   
0C68   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C75   C3 BD 0B               JP   interpret   
0C78                BACKSPACE_:      
0C78   79                     LD   a,c   
0C79   B0                     OR   b   
0C7A   CA CC 0B               JP   z,interpret2   
0C7D   0B                     DEC   bc   
0C7E   CD 42 0B               CALL   printStr   
0C81   08 20 08 00            .CSTR   "\b \b"   
0C85   C3 CC 0B               JP   interpret2   
0C88                             ; edit
0C88                EDIT_:       
0C88   CD 61 0C               CALL   run   
0C8B   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C9D   C3 BD 0B               JP   interpret   
0CA0                REEDIT_:      
0CA0   C3 BD 0B               JP   interpret   
0CA3                PRINTSTACK_:      
0CA3   CD 61 0C               CALL   run   
0CA6   2F 70 6B 00            .CSTR   "/pk"   
0CAA   C3 BD 0B               JP   interpret   
0CAD                             ; editDef:
0CAD                             ;     pop hl                      ; pop ret address
0CAD                             ;     ex (sp),hl                  ; swap with TOS
0CAD                             ;     push hl                     ; dup TOS
0CAD                             ;     ld a,l                      ; a = ident
0CAD                             ;     ld de,TIB                   ; de = start of TIB
0CAD                             ;     ld (vTIBPtr),de             ; update TIB*
0CAD                             ;     push ix                     ; save NEXT
0CAD                             ;     ld ix,editDef0              ; NEXT = editDef0
0CAD                             ;     jp lookupRef                ; convert letter into address
0CAD                             ; editDef0:
0CAD                             ;     ld e,(hl)                   ; de = (hl++)
0CAD                             ;     inc hl
0CAD                             ;     ld d,(hl)
0CAD                             ;     ld a,d                      ; de == 0 ?
0CAD                             ;     or e
0CAD                             ;     jr z,editDef4
0CAD                             ;     ld ix,editDef3              ; NEXT = editDef3
0CAD                             ;     ex de,hl
0CAD                             ;     ld a,(hl)
0CAD                             ;     cp "{"
0CAD                             ;     jr nz,editDef1
0CAD                             ;     jp editBlock0               ; convert letter into address
0CAD                             ; editDef1:
0CAD                             ;     cp "("
0CAD                             ;     jr nz,editDef2
0CAD                             ;     jp editBlock0               ; convert letter into address
0CAD                             ; editDef2:
0CAD                             ;     jp editLambda
0CAD                             ; editDef3:
0CAD                             ;     ld a," "                    ; write assign
0CAD                             ;     call writeChar
0CAD                             ;     pop hl                      ; a = ident
0CAD                             ;     ld a,l
0CAD                             ;     call writeChar
0CAD                             ;     ld a,"="                    ; write assign
0CAD                             ;     call writeChar
0CAD                             ;     ld ix,editDef4              ; NEXT = editDef4
0CAD                             ;     jp printTIB
0CAD                             ; editDef4:
0CAD                             ;     pop ix                      ; restore NEXT
0CAD                             ;     jp (ix)
0CAD                             ; writeChar:
0CAD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CAD                             ;     ld (de),a                   ; write ident
0CAD                             ;     inc de
0CAD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CAD                             ;     ret
0CAD                             ; ; printTIB
0CAD                             ; printTIB:
0CAD                             ;     ld hl,(vTIBPtr)
0CAD                             ;     ld de,TIB
0CAD                             ;     or a
0CAD                             ;     sbc hl,de
0CAD                             ;     jp printTIB2
0CAD                             ; printTIB1:
0CAD                             ;     ld a,(de)
0CAD                             ;     call putchar
0CAD                             ; printTIB2:
0CAD                             ;     ld a,l
0CAD                             ;     or h
0CAD                             ;     jr nz,printTIB1
0CAD                             ;     jp (ix)
0CAD                             ; editBlock:
0CAD                             ;     pop hl                      ; hl = block*
0CAD                             ; editBlock0:
0CAD                             ;     push ix                     ; save next
0CAD                             ;     push hl                     ; push block*
0CAD                             ;     push hl                     ; push block*
0CAD                             ;     ld ix,(editBlock2)
0CAD                             ;     jp blockLength
0CAD                             ; editBlock1:
0CAD                             ;     pop hl                      ; bc = length, (sp) = IP
0CAD                             ;     pop de                      ; de = block*
0CAD                             ;     ld a,l
0CAD                             ;     or h
0CAD                             ;     jr z,editBlock2
0CAD                             ;     push bc
0CAD                             ;     ld bc,hl
0CAD                             ;     ex de,hl                    ; hl = block*
0CAD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CAD                             ;     ldir                        ; copy block to TIB
0CAD                             ;     ld (vTIBPtr),de              ; save TIB*
0CAD                             ;     pop bc
0CAD                             ; editBlock2:
0CAD                             ;     pop ix                      ; restore next
0CAD                             ;     jp (ix)
0CAD                             ; editLambda:
0CAD                             ;     jp (ix)
0CAD                             ; editArray:
0CAD                             ;     jp (ix)
0CAD                             ; editArglist:
0CAD                             ;     jp (ix)
0CAD                             ; ; blockLength
0CAD                             ; ; addr1 -- length
0CAD                             ; blockLength:
0CAD                             ;     pop hl                      ; block*
0CAD                             ;     push hl                     ; save block*
0CAD                             ;     inc hl                      ; skip first char
0CAD                             ;     ld d,1                      ; increase nesting
0CAD                             ; blockLength1:                   ; Skip to end of definition
0CAD                             ;     ld a,(hl)                   ; Get the next character
0CAD                             ;     inc hl                      ; Point to next character
0CAD                             ;     cp " " + 1                  ; ignore whitespace
0CAD                             ;     jr c,blockLength1
0CAD                             ;     cp ")"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "}"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "]"
0CAD                             ;     jr z,blockLength4
0CAD                             ;     cp "("
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "{"
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "["
0CAD                             ;     jr z,blockLength2
0CAD                             ;     cp "'"
0CAD                             ;     jr z,blockLength3
0CAD                             ;     cp "`"
0CAD                             ;     jr z,blockLength3
0CAD                             ;     cp DQUOTE
0CAD                             ;     jr z,blockLength3
0CAD                             ;     jr blockLength1
0CAD                             ; blockLength2:
0CAD                             ;     inc d
0CAD                             ;     jr blockLength1
0CAD                             ; blockLength4:
0CAD                             ;     dec d
0CAD                             ;     jr nz, blockLength1         ; get the next element
0CAD                             ; blockLength3:
0CAD                             ;     ld a,$80
0CAD                             ;     xor d
0CAD                             ;     ld d,a
0CAD                             ;     jr nz, blockLength1
0CAD                             ;     pop hl                      ; hl = block*
0CAD                             ;     or a
0CAD                             ;     sbc hl,de
0CAD                             ;     push hl
0CAD                             ;     jp (ix)
0CAD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CAD                             ; \a start of stack \#3 depth \b base \$ prompt
0CAD                             ; DW dStack               ; a vS0 start of datastack			
0CAD                             ; DW FALSE                ; b vBase16
0CAD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CAD                             ; DW 0                    ; d
0CAD                             ; DW 65                   ; e vLastDef "A" last command u defined
0CAD                             ; DW 0                    ; f
0CAD                             ; DW page6                ; g 256 bytes limits
0CAD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CAD                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                             ; uninitialised sys variables (preserved)
23F2                VPOINTER:   DS   2   ; 
23F4                VREMAIN:   DS   2   ; 
23F6                VSAVEDIP:   DS   2   ; 
23F8                VSAVEDSP:   DS   2   ; 
23FA                VSAVEDNEXT:   DS   2   ; 
23FC                VSAVEDBP:   DS   2   ; 
23FE                VCHECKSUM:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                VHASHSTR:   DS   2   ; 
2408                TBPTR:    DS   2   ; reserved for tests
240A                TITLEBUF:   DS   20   
241E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 11
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AB8 DEFINED AT LINE 1718 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 415 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 412 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 198 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 200 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 202 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 204 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 208 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 211 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 213 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 215 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 217 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 219 IN MAIN.asm
DBLQUOTE_:          034A DEFINED AT LINE 221 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 223 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 225 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
GT_:                035F DEFINED AT LINE 238 IN MAIN.asm
LT_:                036A DEFINED AT LINE 246 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 258 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 260 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 262 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 269 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 277 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 288 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 289 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 295 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 303 IN MAIN.asm
                    > USED AT LINE 317 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 309 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 333 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 331 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 339 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 358 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 381 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 396 IN MAIN.asm
ARRAYEND1:          0439 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
ARRAYEND2:          0449 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 425 IN MAIN.asm
ARRAYEND3:          044E DEFINED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 418 IN MAIN.asm
HASH:               046F DEFINED AT LINE 459 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
ARRAYINDEX:         046F DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX0:        0477 DEFINED AT LINE 466 IN MAIN.asm
ARRAYINDEX1:        0478 DEFINED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 465 IN MAIN.asm
ARRAYINDEX2:        0484 DEFINED AT LINE 477 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
ASSIGN:             0487 DEFINED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
ASSIGN0:            0489 DEFINED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
ASSIGNX:            048A DEFINED AT LINE 487 IN MAIN.asm
ASSIGN1:            0496 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
COLON:              0498 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
ARGLIST:            0498 DEFINED AT LINE 503 IN MAIN.asm
ARGLIST1:           04A2 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST1A:          04AA DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
ARGLIST2:           04B2 DEFINED AT LINE 521 IN MAIN.asm
ARGLIST3:           04BA DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
ARGLIST4:           04BD DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
ARGLIST5:           04C3 DEFINED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
LBRACE:             04CE DEFINED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04CE DEFINED AT LINE 549 IN MAIN.asm
BLOCKSTART1:        04D2 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
BLOCKSTART2:        04FE DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
BLOCKSTART3:        0501 DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
BLOCKSTART4:        0509 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
BLOCKSTART5:        050C DEFINED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
BLOCKSTART6:        0534 DEFINED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 598 IN MAIN.asm
RBRACE:             0537 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           0537 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
BLOCKEND1:          0569 DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND2:          0575 DEFINED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
BLOCKEND3:          0587 DEFINED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
TICK:               0593 DEFINED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0593 DEFINED AT LINE 667 IN MAIN.asm
CHAR1:              0596 DEFINED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR2:              05A2 DEFINED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
CHAR3:              05A5 DEFINED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 673 IN MAIN.asm
BACKSLASH:          05A8 DEFINED AT LINE 685 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AA DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
DISCARD:            05AA DEFINED AT LINE 691 IN MAIN.asm
DISCARD1:           05B7 DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
SLASH:              05B9 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
COMMAND:            05B9 DEFINED AT LINE 704 IN MAIN.asm
DIV:                05F2 DEFINED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
DOT:                0603 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DIVIDE:             0615 DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DIVIDE1:            061A DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DIVIDE2:            0627 DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
DIVIDE3:            0628 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
EQUALS:             062E DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
LESSTHANEQ:         0636 DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           063B DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0640 DEFINED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
TRUE1:              0643 DEFINED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
NULL1:              0649 DEFINED AT LINE 818 IN MAIN.asm
FALSE1:             0649 DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
CARET:              064F DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
GO:                 064F DEFINED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
GO1:                0650 DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
GO2:                0656 DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 833 IN MAIN.asm
GOBLOCK:            0661 DEFINED AT LINE 843 IN MAIN.asm
GOBLOCK1:           0661 DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
GOBLOCK2:           0686 DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
GOLAMBDA:           0694 DEFINED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
GOLAMBDA1:          06B1 DEFINED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
GOLAMBDA2:          06B7 DEFINED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
GOLAMBDA3:          06C2 DEFINED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
GOLAMBDA4:          06DA DEFINED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
GOLAMBDA5:          06DD DEFINED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
GOLAMBDA6:          06E0 DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
GOLAMBDA7:          06E3 DEFINED AT LINE 933 IN MAIN.asm
GOLAMBDA8:          06E7 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
DOLLAR:             06F2 DEFINED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             06F2 DEFINED AT LINE 948 IN MAIN.asm
HEXNUM1:            06F5 DEFINED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
HEXNUM2:            06FD DEFINED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
UPCASE:             070F DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
LOWCASE:            0714 DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
IDENT1:             0719 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
QUESTION:           0726 DEFINED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IF:                 0726 DEFINED AT LINE 990 IN MAIN.asm
IFTE:               0732 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
IFTE1:              0733 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
STAR:               073F DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
MUL:                073F DEFINED AT LINE 1013 IN MAIN.asm
MUL2:               0741 DEFINED AT LINE 1016 IN MAIN.asm
MUL3:               0749 DEFINED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
NUM:                075B DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
NUM0:               0764 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
NUM1:               0765 DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
NUM2:               077D DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1047 IN MAIN.asm
NUM3:               0788 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
RPAREN:             078B DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
SEMICOLON:          0793 DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          07AF DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT1:         07B7 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
SHIFTLEFT2:         07B8 DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
SHIFTRIGHT:         07BF DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTRIGHT1:        07C7 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
SHIFTRIGHT2:        07CB DEFINED AT LINE 1129 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
DBLQUOTE:           07D2 DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
STRING:             07D2 DEFINED AT LINE 1139 IN MAIN.asm
STRING1:            07DB DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
STRING2:            07DE DEFINED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRING3:            07E7 DEFINED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
MINUS:              07FA DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
SUB:                0806 DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
SUB1:               0810 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
ERROR1:             0819 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
COMMENT:            0820 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
COMMAND_A:          0829 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
ABSOLUTE:           0835 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
ADDROF:             0842 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
ADDROF1:            0856 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
ADDROF2:            0861 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
COMMAND_B:          0863 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
BUFFERARRAY:        087E DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BUFFERNUMBER:       08B2 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
BUFFERDEC:          08B9 DEFINED AT LINE 1296 IN MAIN.asm
BUFFERDEC0:         08D3 DEFINED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
BUFFERDEC1:         08E3 DEFINED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
BUFFERDEC2:         0903 DEFINED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
BUFFERDEC3:         0905 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
BUFFERDEC4:         0915 DEFINED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
BUFFERDEC5:         0916 DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
BUFFERHEX:          091F DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
BUFFERHEX1:         0940 DEFINED AT LINE 1386 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
BUFFERHEX2:         0949 DEFINED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
BREAK:              0957 DEFINED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
BREAK1:             095E DEFINED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1411 IN MAIN.asm
BUFFERSTRING:       0971 DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
BUFFERSTRING0:      0978 DEFINED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
BUFFERSTRING1:      097E DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BUFFERCHAR:         098B DEFINED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
BUFFERXCHARS:       0990 DEFINED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
BUFFERXCHARS0:      0991 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
BUFFERXCHARS1:      099A DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
BUFFERXCHARS2:      09A2 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
COMMAND_I:          09AC DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
COMMAND_P:          09B8 DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
PARTIAL:            09CA DEFINED AT LINE 1497 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
PRINTBUFFER:        09EA DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
PRINTCHARS:         0A0D DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
PRINTCHARS1:        0A14 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
PRINTCHARS2:        0A1A DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
PRINTSTACK:         0A1F DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
COMMAND_R:          0A21 DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
REMAIN:             0A2A DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
SIZE:               0A30 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
COMMAND_V:          0A3A DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
CONSTBUFSTART:      0A4F DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
CONSTHEAPSTART:     0A54 DEFINED AT LINE 1616 IN MAIN.asm
CONSTTIBSTART:      0A59 DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
VARBUFPTR:          0A5E DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
VARHEAPPTR:         0A67 DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
VARTIBPTR:          0A70 DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
VARIABLE:           0A79 DEFINED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
CONSTANT:           0A7C DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
CHARS:              0A7F DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
CHARS1:             0A82 DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
DECIMAL:            0A87 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
DECIMAL1:           0A8A DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
HEXADECIMAL:        0A8F DEFINED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
INPUT:              0A95 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
KEY:                0AA0 DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
OUTPUT:             0AA9 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
NUMBERS:            0AB2 DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
FILTER:             0AB8 DEFINED AT LINE 1716 IN MAIN.asm
MAP:                0AB8 DEFINED AT LINE 1717 IN MAIN.asm
ARGSX1A0L_:         0ABA DEFINED AT LINE 1727 IN MAIN.asm
ARGSX0A2L_:         0ABD DEFINED AT LINE 1731 IN MAIN.asm
ARGS1A0L:           0AC2 DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
ARGS1A2L:           0AC5 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
FLUSHBUFFER:        0ACA DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
JUMPTABLE:          0AE1 DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1598 IN MAIN.asm
JUMPTABLE0:         0AE3 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
JUMPTABLE1:         0AF0 DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
JUMPTABLE2:         0AF1 DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
PRTSTR0:            0AF7 DEFINED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
PRTSTR:             0AFB DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
NESTING:            0B00 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
NESTING0:           0B0A DEFINED AT LINE 1820 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
NESTING1A:          0B11 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
NESTING1:           0B14 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
NESTING2:           0B23 DEFINED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
NESTING3:           0B25 DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
NESTING4:           0B30 DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
PROMPT:             0B32 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
CRLF:               0B3B DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
PRINTSTR:           0B42 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
TITLESTR:           0B49 DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
INIT:               0B5D DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
INIT1:              0B65 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
WARMINIT:           0B6D DEFINED AT LINE 1885 IN MAIN.asm
COLDBOOT0:          0B80 DEFINED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
COLDINIT:           0B8A DEFINED AT LINE 1898 IN MAIN.asm
COLDBOOT1:          0B9B DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1910 IN MAIN.asm
COLDSTART:          0BA8 DEFINED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
START:              0BB1 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 7
START1:             0BB7 DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
INTERPRET:          0BBD DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
INTERPRET2:         0BCC DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
INTERPRET3:         0BD4 DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
INTERPRET4:         0BDF DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
INTERPRET5:         0BE4 DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
INTERPRET5A:        0C07 DEFINED AT LINE 1997 IN MAIN.asm
INTERPRET6:         0C09 DEFINED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
INTERPRET7:         0C17 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
INTERPRET8:         0C2A DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
NEXT:               0C45 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
NEXT1:              0C56 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
EXIT:               0C5D DEFINED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
RUN:                0C61 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
ERROR:              0C65 DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
BACKSPACE_:         0C78 DEFINED AT LINE 2070 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
EDIT_:              0C88 DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
REEDIT_:            0CA0 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
PRINTSTACK_:        0CA3 DEFINED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1900 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1297 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1912 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
VPOINTER:           23F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
VREMAIN:            23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
VSAVEDIP:           23F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
VSAVEDSP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
VSAVEDNEXT:         23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
VSAVEDBP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
VCHECKSUM:          23FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           2406 DEFINED AT LINE 59 IN ram.asm
TBPTR:              2408 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           240A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
HEAP:               241E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
