0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 B6 0D               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   45 0E                  DW   next   ; nNext
018A   1C 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 88 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 0F 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 2B 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 DA 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 10 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 79 05               JP   rbrace   
031B                TICK_:       
031B   C3 0A 06               JP   tick   
031E                SEMICOLON_:      
031E   C3 01 07               JP   semicolon   
0321                DOT_:        
0321   C3 CB 07               JP   dot   
0324                COLON_:      
0324   C3 9B 04               JP   colon   
0327                UPCASE_:      
0327   C3 A5 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 AA 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 BC 0A               JP   question   
0330                STAR_:       
0330   C3 3F 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 26 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 5B 0B               JP   num   
0347                HASH_:       
0347   C3 7B 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 E9 09               JP   caret   
0350                COMMA_:      
0350   C3 9D 07               JP   comma   
0353                DQUOTE_:      
0353   C3 38 0C               JP   dquote   
0356                MINUS_:      
0356   C3 60 0C               JP   minus   
0359                EQ_:         
0359   CD E6 0C               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   D1 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 1E 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA 25 0C               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA 15 0C               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 2F 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 34 09               JP   lessthan   
0384                SLASH_:      
0384   C3 1F 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 0D 0C               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 D3 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 D3 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 23            LD   de,(vPointer)   
03AD   21 F4 23               LD   hl,vPointer   
03B0   C3 C7 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   C3 C1 03               JP   or   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F0                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   67                     LD   h,a   
03D2   E5                     PUSH   hl   
03D3   DD E9                  JP   (ix)   
03D5                INVERT:      ; Bitwise INVert the top member of the stack
03D5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D8   18 F1                  JR   xor1   
03DA                             ; %a .. %z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                PERCENT:      
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1A                  JR   z,arg0a   
03E5   23                     INC   hl   ; a = num_args, hl = arg_list*
03E6   7E                     LD   a,(hl)   
03E7   23                     INC   hl   
03E8   B7                     OR   a   
03E9   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EB   5F                     LD   e,a   ; e = a = num_args
03EC   03                     INC   bc   ; a = next char = dollar_name
03ED   0A                     LD   a,(bc)   
03EE   C5                     PUSH   bc   ; save IP
03EF   43                     LD   b,e   ; b = e = num_args
03F0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F3   FD 56 03               LD   d,(iy+3)   
03F6                ARG0:        
03F6   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F7   1B                     DEC   de   
03F8   BE                     CP   (hl)   
03F9   28 09                  JR   z,arg1   
03FB   23                     INC   hl   ; hl = next arg_list*
03FC   10 F8                  DJNZ   arg0   
03FE   C1                     POP   bc   ; no match, restore IP
03FF                ARG0A:       
03FF   11 00 00               LD   de,0   ; return 0
0402   18 08                  JR   arg1a   
0404                ARG1:        
0404   C1                     POP   bc   ; restore IP
0405   EB                     EX   de,hl   ; hl = arg*
0406   22 F4 23               LD   (vPointer),hl   ; store arg* in setter
0409   5E                     LD   e,(hl)   
040A   23                     INC   hl   
040B   56                     LD   d,(hl)   ; de = arg
040C                ARG1A:       
040C   D5                     PUSH   de   ; push arg
040D   DD E9                  JP   (ix)   
040F                LBRACK:      
040F                ARRAYSTART:      
040F   11 00 00               LD   de,0   ; create stack frame
0412   D5                     PUSH   de   ; push null for IP
0413   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0416   FD 56 05               LD   d,(iy+5)   ; 
0419   D5                     PUSH   de   ; 
041A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
041D   FD 56 03               LD   d,(iy+3)   ; 
0420   D5                     PUSH   de   ; 
0421   FD E5                  PUSH   iy   ; push BP
0423   FD 21 00 00            LD   iy,0   ; BP = SP
0427   FD 39                  ADD   iy,sp   
0429   DD E9                  JP   (ix)   
042B                RBRACK:      
042B                ARRAYEND:      
042B   FD 54                  LD   d,iyh   ; de = BP
042D   FD 5D                  LD   e,iyl   
042F   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0433   62 6B                  LD   hl,de   ; hl = de = BP
0435   B7                     OR   a   
0436   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0438   CB 3C                  SRL   h   ; 
043A   CB 1D                  RR   l   
043C   44 4D                  LD   bc,hl   ; bc = count
043E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0441   71                     LD   (hl),c   ; write num items in length word
0442   23                     INC   hl   
0443   70                     LD   (hl),b   
0444   23                     INC   hl   ; hl = array[0], bc = count
0445                             ; de = BP, hl = array[0], bc = count
0445   18 15                  JR   arrayEnd3   
0447                ARRAYEND1:      
0447   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
044A   77                     LD   (hl),a   ; write lsb of array item
044B   23                     INC   hl   ; move to msb of array item
044C   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
044F   3D                     DEC   a   
0450   28 05                  JR   z,arrayEnd2   
0452   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0455   77                     LD   (hl),a   ; write msb of array item
0456   23                     INC   hl   ; move to next word in array
0457                ARRAYEND2:      
0457   FD 2B                  DEC   iy   ; move to next word on stack
0459   FD 2B                  DEC   iy   
045B   0B                     DEC   bc   ; dec items count
045C                ARRAYEND3:      
045C   79                     LD   a,c   ; if not zero loop
045D   B0                     OR   b   
045E   20 E7                  JR   nz,arrayEnd1   
0460   EB                     EX   de,hl   ; de = end of array, hl = BP
0461   F9                     LD   sp,hl   ; sp = BP
0462   E1                     POP   hl   ; de = end of array, hl = old BP
0463   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0464   FD 62                  LD   iyh,d   
0466   FD 6B                  LD   iyl,e   
0468   D1                     POP   de   ; pop arg_list (discard)
0469   D1                     POP   de   ; pop first_arg* (discard)
046A   D1                     POP   de   ; pop IP (discard)
046B   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
046F   13                     INC   de   
0470   13                     INC   de   
0471   D5                     PUSH   de   ; return array[0]
0472   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0475   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0479   DD E9                  JP   (ix)   
047B                             ; index of an array, based on vDataWidth
047B                             ; array* num -- value    ; also sets vPointer to address
047B                HASH:        
047B                ARRAYINDEX:      
047B   E1                     POP   hl   ; hl = index
047C   D1                     POP   de   ; de = array
047D   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0480   3D                     DEC   a   
0481   28 01                  JR   z,arrayIndex1   
0483                ARRAYINDEX0:      
0483   29                     ADD   hl,hl   ; if data width = 2 then double
0484                ARRAYINDEX1:      
0484   19                     ADD   hl,de   ; add addr
0485   22 F4 23               LD   (vPointer),hl   ; store address in setter
0488   16 00                  LD   d,0   
048A   5E                     LD   e,(hl)   
048B   B7                     OR   a   ; check data width again
048C   28 02                  JR   z,arrayIndex2   
048E   23                     INC   hl   
048F   56                     LD   d,(hl)   
0490                ARRAYINDEX2:      
0490   D5                     PUSH   de   
0491   DD E9                  JP   (ix)   
0493                             ; /as size of an array, num elements, ignores vDataWidth :-/
0493                             ; array* -- num
0493                ARRAYSIZE:      
0493   E1                     POP   hl   
0494   2B                     DEC   hl   ; msb size
0495   56                     LD   d,(hl)   
0496   2B                     DEC   hl   ; lsb size
0497   5E                     LD   e,(hl)   
0498   D5                     PUSH   de   
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                             ; format: numLocals totNumArgs argChars...
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   E5                     PUSH   hl   ; save start of arg_list
04A2   23                     INC   hl   ; skip length fields to start of string
04A3   23                     INC   hl   
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 61                  CP   "a"   ; < "a" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   72                     LD   (hl),d   ; write number of locals at start - 1
04CD   23                     INC   hl   
04CE   73                     LD   (hl),e   ; write number of args + locals at start - 2
04CF   DD E9                  JP   (ix)   
04D1                             ; value _oldValue --            ; uses address in vPointer
04D1                ASSIGN:      
04D1   E1                     POP   hl   ; discard last accessed value
04D2   E1                     POP   hl   ; hl = new value
04D3                ASSIGN0:      
04D3   EB                     EX   de,hl   ; de = new value
04D4                ASSIGNX:      
04D4   2A F4 23               LD   hl,(vPointer)   
04D7   73                     LD   (hl),e   
04D8   3A E6 23               LD   a,(vDataWidth)   
04DB   3D                     DEC   a   ; is it byte?
04DC   28 02                  JR   z,assign1   
04DE   23                     INC   hl   
04DF   72                     LD   (hl),d   
04E0                ASSIGN1:      
04E0   DD E9                  JP   (ix)   
04E2                             ; /ab absolute
04E2                             ; num -- num
04E2                ABSOLUTE:      
04E2   E1                     POP   hl   
04E3   CB 7C                  BIT   7,h   
04E5   C8                     RET   z   
04E6   AF                     XOR   a   
04E7   95                     SUB   l   
04E8   6F                     LD   l,a   
04E9   9F                     SBC   a,a   
04EA   94                     SUB   h   
04EB   67                     LD   h,a   
04EC   E5                     PUSH   hl   
04ED   DD E9                  JP   (ix)   
04EF                             ; /ad addrOf
04EF                             ; char -- addr
04EF                ADDROF:      
04EF   E1                     POP   hl   ; a = char
04F0   7D                     LD   a,l   
04F1   FE 7B                  CP   "z"+1   ; if a > z then exit
04F3   30 19                  JR   nc,addrOf2   
04F5   D6 41                  SUB   "A"   ; a - 65
04F7   38 15                  JR   c,addrOf2   ; if < A then exit
04F9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04FB   38 06                  JR   c,addrOf1   
04FD   D6 06                  SUB   "a"-("Z"+1)   
04FF   FE 1A                  CP   "Z"-"A"+1   
0501   38 0B                  JR   c,addrOf2   ; if < a then exit
0503                ADDROF1:      
0503   87                     ADD   a,a   ; double a
0504   21 00 23               LD   hl,VARS   ; hl = VARS + a
0507   85                     ADD   a,l   
0508   6F                     LD   l,a   
0509   3E 00                  LD   a,0   
050B   8C                     ADC   a,h   
050C   67                     LD   h,a   
050D   E5                     PUSH   hl   
050E                ADDROF2:      
050E   DD E9                  JP   (ix)   
0510                LBRACE:      
0510                BLOCKSTART:      
0510   C5                     PUSH   bc   ; return pointer to first { of block
0511   03                     INC   bc   
0512   16 01                  LD   d,1   ; nesting: count first parenthesis
0514                BLOCKSTART1:      ; Skip to end of definition
0514   0A                     LD   a,(bc)   ; Get the next character
0515   03                     INC   bc   ; Point to next character
0516   FE 21                  CP   " " + 1   ; ignore whitespace
0518   38 FA                  JR   c,blockStart1   
051A   FE 29                  CP   ")"   
051C   28 2D                  JR   z,blockStart4   
051E   FE 7D                  CP   "}"   
0520   28 29                  JR   z,blockStart4   
0522   FE 5D                  CP   "]"   
0524   28 25                  JR   z,blockStart4   
0526   FE 28                  CP   "("   
0528   28 16                  JR   z,blockStart2   
052A   FE 7B                  CP   "{"   
052C   28 12                  JR   z,blockStart2   
052E   FE 5B                  CP   "["   
0530   28 0E                  JR   z,blockStart2   
0532   FE 27                  CP   "'"   
0534   28 0D                  JR   z,blockStart3   
0536   FE 60                  CP   "`"   
0538   28 09                  JR   z,blockStart3   
053A   FE 22                  CP   DQ   
053C   28 05                  JR   z,blockStart3   
053E   18 D4                  JR   blockStart1   
0540                BLOCKSTART2:      
0540   14                     INC   d   
0541   18 D1                  JR   blockStart1   
0543                BLOCKSTART3:      
0543   3E 80                  LD   a,$80   
0545   AA                     XOR   d   
0546   57                     LD   d,a   
0547   20 CB                  JR   nz,blockStart1   
0549   18 03                  JR   blockStart5   
054B                BLOCKSTART4:      
054B   15                     DEC   d   
054C   20 C6                  JR   nz,blockStart1   ; get the next element
054E                BLOCKSTART5:      
054E   60 69                  LD   hl,bc   ; hl = IP
0550   11 1C 24               LD   de,HEAP   ; is IP pointing to object in heap
0553   B7                     OR   a   ; IP - HEAP
0554   ED 52                  SBC   hl,de   
0556   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0558   28 1C                  JR   z,blockStart6   
055A   60 69                  LD   hl,bc   ; hl = IP
055C   D1                     POP   de   ; de = block*
055D   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0561   B7                     OR   a   ; bc = size
0562   ED 52                  SBC   hl,de   
0564   44 4D                  LD   bc,hl   
0566   EB                     EX   de,hl   ; hl = block* de = heap*
0567   ED 5B F0 23            LD   de,(vHeapPtr)   
056B   D5                     PUSH   de   ; return hblock*
056C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
056E   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0572   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0576                BLOCKSTART6:      
0576   0B                     DEC   bc   ; balanced, exit
0577   DD E9                  JP   (ix)   
0579                RBRACE:      
0579                BLOCKEND:      
0579   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
057C   FD 56 01               LD   d,(iy+1)   
057F   ED 53 00 24            LD   (vTemp1),de   
0583   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0586   FD 56 07               LD   d,(iy+7)   
0589   ED 53 02 24            LD   (vTemp2),de   
058D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0590   FD 56 03               LD   d,(iy+3)   
0593   EB                     EX   de,hl   
0594   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0597   FD 56 01               LD   d,(iy+1)   
059A   13                     INC   de   ; for carry flag <=
059B   B7                     OR   a   
059C   ED 52                  SBC   hl,de   
059E   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
05A0   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
05A2   FD 5D                  LD   e,iyl   
05A4   21 08 00               LD   hl,8   
05A7   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A8   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A9   18 0C                  JR   blockEnd2   
05AB                BLOCKEND1:      ; same scope
05AB   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05AE   FD 56 03               LD   d,(iy+3)   
05B1   EB                     EX   de,hl   
05B2   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05B4   FD 5D                  LD   e,iyl   
05B6   EB                     EX   de,hl   
05B7                BLOCKEND2:      
05B7   44 4D                  LD   bc,hl   ; bc = hl = BP
05B9   B7                     OR   a   ; hl = BP - SP = count
05BA   ED 72                  SBC   hl,sp   
05BC   7D                     LD   a,l   
05BD   B4                     OR   h   
05BE   28 09                  JR   z,blockEnd3   
05C0   C5                     PUSH   bc   ; bc = count, hl = BP
05C1   44 4D                  LD   bc,hl   
05C3   E1                     POP   hl   
05C4   2B                     DEC   hl   ; hl = BP-1
05C5   1B                     DEC   de   ; de = args*-1
05C6   ED B8                  LDDR      
05C8   13                     INC   de   
05C9                BLOCKEND3:      
05C9   EB                     EX   de,hl   ; sp = de = new tos*
05CA   F9                     LD   sp,hl   
05CB   ED 4B 02 24            LD   bc,(vTemp2)   
05CF   FD 2A 00 24            LD   iy,(vTemp1)   
05D3   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
05D7   7B                     LD   a,e   ; check for NUL
05D8   B2                     OR   d   
05D9   20 02                  JR   nz,blockEnd4   
05DB   DD E9                  JP   (ix)   
05DD                BLOCKEND4:      
05DD   21 00 00               LD   hl,0   ; clear recur vector
05E0   22 F2 23               LD   (vRecur),hl   
05E3   C3 EA 09               JP   go1   ; execute de
05E6                             ; /br break from loop
05E6                             ; --
05E6                BREAK:       
05E6   E1                     POP   hl   ; hl = condition, break if false
05E7   7D                     LD   a,l   
05E8   B4                     OR   h   
05E9   28 02                  JR   z,break1   
05EB   DD E9                  JP   (ix)   
05ED                BREAK1:      
05ED   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05EF   FD 54                  LD   d,iyh   
05F1   21 08 00               LD   hl,8   
05F4   19                     ADD   hl,de   
05F5   23                     INC   hl   
05F6   23                     INC   hl   
05F7   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05FA   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05FD   C3 79 05               JP   blockEnd   
0600                QUIT:        
0600   E1                     POP   hl   ; hl = condition, exit if true
0601   7D                     LD   a,l   
0602   B4                     OR   h   
0603   20 02                  JR   nz,quit1   
0605   DD E9                  JP   (ix)   
0607                QUIT1:       
0607   C3 79 05               JP   blockEnd   
060A                TICK:        
060A                CHAR:        
060A   21 00 00               LD   hl,0   ; if "" is empty or null
060D                CHAR1:       
060D   03                     INC   bc   ; point to next char
060E   0A                     LD   a,(bc)   
060F   FE 27                  CP   "'"   ; ' is the terminator
0611   28 09                  JR   z,char3   
0613   FE 5C                  CP   $5c   ; \ is the escape
0615   20 02                  JR   nz,char2   
0617   03                     INC   bc   
0618   0A                     LD   a,(bc)   
0619                CHAR2:       
0619   6F                     LD   l,a   
061A   18 F1                  JR   char1   
061C                CHAR3:       
061C   E5                     PUSH   hl   
061D   DD E9                  JP   (ix)   
061F                SLASH:       
061F                COMMAND:      
061F   CD E6 0C               CALL   jumpTable   
0622   2F                     DB   "/"   ; // comment
0623   F8 06                  DW   comment   
0625   61                     DB   "a"   
0626   5E 06                  DW   command_a   
0628   62                     DB   "b"   
0629   6D 06                  DW   command_b   
062B   63                     DB   "c"   ; /c chars
062C   F0 06                  DW   chars   
062E   64                     DB   "d"   ; /d decimal
062F   BD 07                  DW   decimal   
0631   66                     DB   "f"   
0632   79 06                  DW   command_f   
0634   68                     DB   "h"   ; /h hexadecimal
0635   C5 07                  DW   hexadecimal   
0637   69                     DB   "i"   
0638   97 06                  DW   command_i   
063A   6B                     DB   "k"   ; /k key
063B   E0 0A                  DW   key   
063D   6C                     DB   "l"   
063E   A3 06                  DW   command_l   
0640   6D                     DB   "m"   
0641   AC 06                  DW   command_m   
0643   6E                     DB   "n"   ; /n numbers
0644   EB 06                  DW   numbers   
0646   6F                     DB   "o"   ; /o output
0647   F2 0A                  DW   output   
0649   70                     DB   "p"   
064A   B5 06                  DW   command_p   
064C   72                     DB   "r"   
064D   C7 06                  DW   command_r   
064F   74                     DB   "t"   ; /t true
0650   3C 09                  DW   true1   
0652   76                     DB   "v"   
0653   D6 06                  DW   command_v   
0655   77                     DB   "w"   ; /w words
0656   EB 06                  DW   words   
0658   78                     DB   "x"   ; /x xor
0659   CA 03                  DW   xor   
065B   00                     DB   NUL   
065C   AC 07                  DW   div   
065E                COMMAND_A:      
065E   CD E6 0C               CALL   jumpTable   
0661   62                     DB   "b"   ; /ab absolute
0662   E2 04                  DW   absolute   
0664   64                     DB   "d"   ; /ad address of
0665   EF 04                  DW   addrOf   
0667   73                     DB   "s"   ; /as array size
0668   EF 04                  DW   addrOf   
066A   00                     DB   NUL   
066B   48 09                  DW   error1   
066D                COMMAND_B:      
066D   CD E6 0C               CALL   jumpTable   
0670   72                     DB   "r"   ; /br break
0671   E6 05                  DW   break   
0673   79                     DB   "y"   ; /by cold boot
0674   AD 0D                  DW   coldStart   
0676   00                     DB   NUL   
0677   F0 06                  DW   bytes   ; /b bytes
0679                COMMAND_F:      
0679   CD E6 0C               CALL   jumpTable   
067C   65                     DB   "e"   ; /fe forEach
067D   54 09                  DW   forEach   
067F   6C                     DB   "l"   ; /fl flush output buffer
0680   4F 09                  DW   flush   
0682   73                     DB   "s"   ; /fs funcSrc
0683   A1 09                  DW   funcSrc   
0685   31                     DB   "1"   
0686   AD 0E                  DW   f1   
0688   32                     DB   "2"   
0689   AD 0E                  DW   f2   
068B   33                     DB   "3"   
068C   AD 0E                  DW   f3   
068E   34                     DB   "4"   
068F   AD 0E                  DW   f4   
0691   7A                     DB   "z"   
0692   DC 09                  DW   fz   
0694   00                     DB   NUL   
0695   42 09                  DW   false1   
0697                COMMAND_I:      
0697   CD E6 0C               CALL   jumpTable   
069A   6E                     DB   "n"   ; /in input
069B   D5 0A                  DW   input   
069D   76                     DB   "v"   ; /iv invert
069E   D5 03                  DW   invert   
06A0   00                     DB   NUL   
06A1   48 09                  DW   error1   
06A3                COMMAND_L:      
06A3   CD E6 0C               CALL   jumpTable   
06A6   69                     DB   "i"   ; /li literal
06A7   E9 0A                  DW   literal   
06A9   00                     DB   NUL   
06AA   48 09                  DW   error1   
06AC                COMMAND_M:      
06AC   CD E6 0C               CALL   jumpTable   
06AF   70                     DB   "p"   ; /mp map
06B0   FB 0A                  DW   map   
06B2   00                     DB   NUL   
06B3   48 09                  DW   error1   
06B5                COMMAND_P:      
06B5   CD E6 0C               CALL   jumpTable   
06B8   63                     DB   "c"   ; /pc print chars
06B9   7F 0C                  DW   printChars   
06BB   00                     DB   NUL   
06BC   48 09                  DW   error1   
06BE                COMMAND_Q:      
06BE   CD E6 0C               CALL   jumpTable   
06C1   74                     DB   "t"   ; /qt quit
06C2   00 06                  DW   quit   
06C4   00                     DB   NUL   
06C5   48 09                  DW   error1   
06C7                COMMAND_R:      
06C7   CD E6 0C               CALL   jumpTable   
06CA   63                     DB   "c"   ; /rc tail call optimisation
06CB   91 0C                  DW   recur   
06CD   65                     DB   "e"   ; /re remainder
06CE   97 0C                  DW   remain   
06D0   67                     DB   "g"   ; /rg range src
06D1   8B 0B                  DW   rangeSrc   
06D3   00                     DB   NUL   
06D4   48 09                  DW   error1   
06D6                COMMAND_V:      
06D6   CD E6 0C               CALL   jumpTable   
06D9   62                     DB   "b"   
06DA   AC 0C                  DW   varBufPtr   
06DC   68                     DB   "h"   
06DD   B5 0C                  DW   varHeapPtr   
06DF   74                     DB   "t"   
06E0   BE 0C                  DW   varTIBPtr   
06E2   42                     DB   "B"   
06E3   9D 0C                  DW   constBufStart   
06E5   54                     DB   "T"   
06E6   A7 0C                  DW   constTIBStart   
06E8   00                     DB   NUL   
06E9   48 09                  DW   error1   
06EB                WORDS:       
06EB                NUMBERS:      
06EB   21 02 00               LD   hl,2   
06EE   18 03                  JR   bytes1   
06F0                BYTES:       
06F0                CHARS:       
06F0   21 01 00               LD   hl,1   
06F3                BYTES1:      
06F3   22 E6 23               LD   (vDataWidth),hl   
06F6   DD E9                  JP   (ix)   
06F8                COMMENT:      
06F8   03                     INC   bc   ; point to next char
06F9   0A                     LD   a,(bc)   
06FA   FE 20                  CP   " "   ; terminate on any char less than SP
06FC   30 FA                  JR   nc,comment   
06FE   0B                     DEC   bc   
06FF   DD E9                  JP   (ix)   
0701                             ; ";" createFunc
0701                             ; arg_list* block* -- func*
0701                SEMICOLON:      
0701                CREATEFUNC:      
0701   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0705   E1                     POP   hl   ; hl = block*
0706   22 02 24               LD   (vTemp2),hl   ; save block*
0709   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
070C   FD 56 05               LD   d,(iy+5)   
070F   7B                     LD   a,e   ; if arg_list == null then make a func
0710   B2                     OR   d   
0711   20 09                  JR   nz,createFunc0   
0713   21 00 00               LD   hl,0   ; partial_array = null
0716   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
071A   18 65                  JR   createFunc5   
071C                CREATEFUNC0:      
071C   E1                     POP   hl   ; hl = inner_arg_list*
071D   E5                     PUSH   hl   ; save inner_arg_list
071E   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0722   7E                     LD   a,(hl)   ; compile inner_num_locals
0723   4F                     LD   c,a   ; b = inner_num_locals
0724   12                     LD   (de),a   
0725   23                     INC   hl   
0726   13                     INC   de   
0727   7E                     LD   a,(hl)   ; compile inner_length
0728   12                     LD   (de),a   
0729   91                     SUB   c   ; a = inner_num args
072A   23                     INC   hl   
072B   13                     INC   de   
072C   B7                     OR   a   ; compile args if inner_length > 0
072D   28 05                  JR   z,createFunc1   
072F   4F                     LD   c,a   ; bc = a
0730   06 00                  LD   b,0   
0732   ED B0                  LDIR      
0734                CREATEFUNC1:      
0734   EB                     EX   de,hl   ; hl = outer_arg_list
0735   FD 5E 04               LD   e,(iy+4)   
0738   FD 56 05               LD   d,(iy+5)   
073B   EB                     EX   de,hl   
073C   23                     INC   hl   ; a = outer_length
073D   7E                     LD   a,(hl)   
073E   23                     INC   hl   
073F   B7                     OR   a   
0740   28 05                  JR   z,createFunc2   
0742   4F                     LD   c,a   
0743   06 00                  LD   b,0   
0745   ED B0                  LDIR      ; append outer_args
0747                CREATEFUNC2:      ; a = outer_length
0747   47                     LD   b,a   ; b = a = outer_length
0748   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
074B   23                     INC   hl   
074C   7E                     LD   a,(hl)   ; add outer_length to new length
074D   80                     ADD   a,b   
074E   77                     LD   (hl),a   
074F   2B                     DEC   hl   
0750   78                     LD   a,b   ; save outer_length in a'
0751   08                     EX   af,af'   
0752   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0753   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0754   B7                     OR   a   
0755   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0757   4F                     LD   c,a   ; c = inner_num_locals
0758   06 00                  LD   b,0   ; bc = inner_num_locals
075A   23                     INC   hl   ; a = inner_length
075B   7E                     LD   a,(hl)   
075C   91                     SUB   c   ; a = inner_num_args
075D   23                     INC   hl   ; hl = inner_arg_chars
075E   85                     ADD   a,l   ; hl += a
075F   6F                     LD   l,a   
0760   3E 00                  LD   a,0   
0762   84                     ADD   a,h   
0763   67                     LD   h,a   
0764   ED B0                  LDIR      ; append inner_locals
0766                CREATEFUNC2A:      
0766   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0767   12                     LD   (de),a   ; compile partial_array length field
0768   13                     INC   de   
0769   AF                     XOR   a   
076A   12                     LD   (de),a   
076B   13                     INC   de   
076C   D5                     PUSH   de   ; push partial_array*
076D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
076E   FD 5E 02               LD   e,(iy+2)   
0771   FD 56 03               LD   d,(iy+3)   
0774   EB                     EX   de,hl   
0775                CREATEFUNC3:      
0775   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0776   4E                     LD   c,(hl)   
0777   2B                     DEC   hl   
0778   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0779   12                     LD   (de),a   ; write LSB and MSB to partial_array*
077A   13                     INC   de   
077B   79                     LD   a,c   
077C   12                     LD   (de),a   
077D   13                     INC   de   
077E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0780                CREATEFUNC4:      
0780   E1                     POP   hl   ; hl = partial_array*
0781                CREATEFUNC5:      
0781   C1                     POP   bc   ; bc = new_arg_list*
0782   D5                     PUSH   de   ; return new func*
0783   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0784   73                     LD   (hl),e   ; compile partial_array* to func
0785   23                     INC   hl   
0786   72                     LD   (hl),d   
0787   23                     INC   hl   
0788   ED 5B 02 24            LD   de,(vTemp2)   ; de = block*
078C   73                     LD   (hl),e   ; compile block* to func
078D   23                     INC   hl   
078E   72                     LD   (hl),d   
078F   23                     INC   hl   
0790   71                     LD   (hl),c   ; compile new_arg_list* to func
0791   23                     INC   hl   
0792   70                     LD   (hl),b   
0793   23                     INC   hl   
0794   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0797   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
079B   DD E9                  JP   (ix)   
079D                             ; , discard stack item
079D                             ; x y -- x
079D                COMMA:       
079D                DISCARD:      
079D   FD 54                  LD   d,iyh   ; limit this to SP <= BP
079F   FD 5D                  LD   e,iyl   
07A1   EB                     EX   de,hl   
07A2   B7                     OR   a   
07A3   ED 72                  SBC   hl,sp   
07A5   CB 7C                  BIT   7,h   
07A7   20 01                  JR   nz,discard1   
07A9   E1                     POP   hl   
07AA                DISCARD1:      
07AA   DD E9                  JP   (ix)   
07AC                DIV:         
07AC   D1                     POP   de   
07AD   E1                     POP   hl   
07AE   C5                     PUSH   bc   ; preserve the IP
07AF   44 4D                  LD   bc,hl   
07B1   CD 05 09               CALL   divide   
07B4   EB                     EX   de,hl   
07B5   ED 53 F6 23            LD   (vRemain),de   
07B9   C1                     POP   bc   
07BA   C3 9B 03               JP   add3   
07BD                DECIMAL:      
07BD   21 0A 00               LD   hl,10   
07C0                DECIMAL1:      
07C0   22 E8 23               LD   (vNumBase),hl   
07C3   DD E9                  JP   (ix)   
07C5                HEXADECIMAL:      
07C5   21 10 00               LD   hl,16   
07C8   C3 C0 07               JP   decimal1   
07CB                DOT:         
07CB   CD E6 0C               CALL   jumpTable   
07CE   61                     DB   "a"   ; .a print array
07CF   DD 07                  DW   dotArray   
07D1   63                     DB   "c"   ; .c print char
07D2   E4 08                  DW   dotChar   
07D4   73                     DB   "s"   ; .s print string
07D5   CA 08                  DW   dotString   
07D7   78                     DB   "x"   ; .x print x chars
07D8   E9 08                  DW   dotXChars   
07DA   00                     DB   NUL   ; .  print number
07DB   25 08                  DW   dotNumber   
07DD                          ;*Macro unroll: FUNC dotArray, 2, "abc"
07DD                DOTARRAY:      
07DD   CD E9 09               CALL   go   
07E0   00 00                  DW   NUL   
07E2   EB 07                  DW   dotArrayM_1597S1123   
07E4   E6 07                  DW   $+2   
07E6   02                     DB   2   
07E7   03 61 62 63            .PSTR   "abc"   
07EB                DOTARRAYM_1597S1123:      
07EB   7B                     DB   "{"   
07EC   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
0823   7D                     DB   "}"   
0824   00                     DB   0   
0825                             ; /bd buffer decimal
0825                             ; value --
0825                DOTNUMBER:      
0825   3A E8 23               LD   a,(vNumBase)   
0828   FE 10                  CP   16   
082A   28 66                  JR   z,bufferHex   ; else falls through
082C                             ; /bd buffer decimal
082C                             ; value --
082C                BUFFERDEC:      
082C   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0830   D9                     EXX      
0831   E1                     POP   hl   ; hl = value
0832   CD 46 08               CALL   bufferDec0   
0835   D9                     EXX      ; de = buffer*' bc = IP
0836   3E 20                  LD   a," "   ; append space to buffer
0838   12                     LD   (de),a   
0839   1C                     INC   e   ; buffer*++, wraparound
083A   CC CF 0C               CALL   z,flushBuffer   
083D   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
0840   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0844   DD E9                  JP   (ix)   
0846                             ; hl = value
0846                             ; de' = buffer*
0846                             ; a, bc, de, hl destroyed
0846                BUFFERDEC0:      
0846   CB 7C                  BIT   7,h   
0848   28 0C                  JR   z,bufferDec1   
084A   D9                     EXX      
084B   3E 2D                  LD   a,"-"   
084D   12                     LD   (de),a   
084E   13                     INC   de   
084F   D9                     EXX      
0850   AF                     XOR   a   
0851   95                     SUB   l   
0852   6F                     LD   l,a   
0853   9F                     SBC   a,a   
0854   94                     SUB   h   
0855   67                     LD   h,a   
0856                BUFFERDEC1:      
0856   0E 00                  LD   c,0   ; leading zeros flag = false
0858   11 F0 D8               LD   de,-10000   
085B   CD 76 08               CALL   bufferDec2   
085E   11 18 FC               LD   de,-1000   
0861   CD 76 08               CALL   bufferDec2   
0864   11 9C FF               LD   de,-100   
0867   CD 76 08               CALL   bufferDec2   
086A   1E F6                  LD   e,-10   
086C   CD 76 08               CALL   bufferDec2   
086F   0C                     INC   c   ; flag = true for at least digit
0870   1E FF                  LD   e,-1   
0872   CD 76 08               CALL   bufferDec2   
0875   C9                     RET      
0876                BUFFERDEC2:      
0876   06 2F                  LD   b,"0"-1   
0878                BUFFERDEC3:      
0878   04                     INC   b   
0879   19                     ADD   hl,de   
087A   38 FC                  JR   c,bufferDec3   
087C   ED 52                  SBC   hl,de   
087E   3E 30                  LD   a,"0"   
0880   B8                     CP   b   
0881   20 05                  JR   nz,bufferDec4   
0883   AF                     XOR   a   
0884   B1                     OR   c   
0885   C8                     RET   z   
0886   18 01                  JR   bufferDec5   
0888                BUFFERDEC4:      
0888   0C                     INC   c   
0889                BUFFERDEC5:      
0889   78                     LD   a,b   
088A   D9                     EXX      
088B   12                     LD   (de),a   
088C   1C                     INC   e   
088D   CC CF 0C               CALL   z,flushBuffer   
0890   D9                     EXX      
0891   C9                     RET      
0892                             ; /bh buffer hex
0892                             ; value --
0892                BUFFERHEX:      
0892   E1                     POP   hl   ; hl = value
0893   ED 5B EC 23            LD   de,(vBufPtr)   
0897   3E 24                  LD   a,"$"   ; # prefix
0899   12                     LD   (de),a   
089A   1C                     INC   e   ; buffer*++, wraparound
089B   CC CF 0C               CALL   z,flushBuffer   
089E   7C                     LD   a,h   
089F   CD B3 08               CALL   bufferHex1   
08A2   7D                     LD   a,l   
08A3   CD B3 08               CALL   bufferHex1   
08A6   3E 20                  LD   a," "   ; append space to buffer
08A8   12                     LD   (de),a   
08A9   1C                     INC   e   ; buffer*++, wraparound
08AA   CC CF 0C               CALL   z,flushBuffer   
08AD   ED 53 EC 23            LD   (vBufPtr),de   
08B1   DD E9                  JP   (ix)   
08B3                BUFFERHEX1:      
08B3   F5                     PUSH   af   
08B4   1F                     RRA      
08B5   1F                     RRA      
08B6   1F                     RRA      
08B7   1F                     RRA      
08B8   CD BC 08               CALL   bufferHex2   
08BB   F1                     POP   af   
08BC                BUFFERHEX2:      
08BC   E6 0F                  AND   0x0F   
08BE   C6 90                  ADD   a,0x90   
08C0   27                     DAA      
08C1   CE 40                  ADC   a,0x40   
08C3   27                     DAA      
08C4   12                     LD   (de),a   
08C5   1C                     INC   e   ; buffer*++, wraparound
08C6   CC CF 0C               CALL   z,flushBuffer   
08C9   C9                     RET      
08CA                             ; /bs buffered string
08CA                             ; string* --
08CA                DOTSTRING:      
08CA   E1                     POP   hl   ; hl = string*
08CB   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
08CF   18 06                  JR   dotString1   
08D1                DOTSTRING0:      
08D1   12                     LD   (de),a   ; a -> buffer*
08D2   1C                     INC   e   ; buffer*++, wraparound
08D3   CC CF 0C               CALL   z,flushBuffer   
08D6   23                     INC   hl   
08D7                DOTSTRING1:      
08D7   7E                     LD   a,(hl)   ; a <- string*
08D8   B7                     OR   a   ; if NUL exit loop
08D9   20 F6                  JR   nz,dotString0   
08DB   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08DE   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
08E2   DD E9                  JP   (ix)   
08E4                             ; /bc buffer char
08E4                             ; char --
08E4                DOTCHAR:      
08E4   21 01 00               LD   hl,1   
08E7   18 01                  JR   dotXChars0   
08E9                             ; /bx buffered x chars
08E9                             ; char length --
08E9                DOTXCHARS:      
08E9   E1                     POP   hl   ; hl = length
08EA                DOTXCHARS0:      
08EA   D1                     POP   de   ; a' = char
08EB   7B                     LD   a,e   
08EC   08                     EX   af,af'   
08ED   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
08F1   18 08                  JR   dotXChars2   
08F3                DOTXCHARS1:      
08F3   08                     EX   af,af'   
08F4   12                     LD   (de),a   
08F5   08                     EX   af,af'   
08F6   1C                     INC   e   ; buffer*++, wraparound
08F7   CC CF 0C               CALL   z,flushBuffer   
08FA   2B                     DEC   hl   
08FB                DOTXCHARS2:      
08FB   7D                     LD   a,l   
08FC   B4                     OR   h   
08FD   20 F4                  JR   nz,dotXChars1   
08FF   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
0903   DD E9                  JP   (ix)   
0905                             ; division subroutine.
0905                             ; bc: divisor, de: dividend, hl: remainder
0905                DIVIDE:      
0905   21 00 00               LD   hl,0   ; zero the remainder
0908   3E 10                  LD   a,16   ; loop counter
090A                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
090A   CB 21                  SLA   c   
090C   CB 10                  RL   b   
090E   ED 6A                  ADC   hl,hl   
0910   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0912   38 03                  JR   c,divide2   
0914   0C                     INC   c   
0915   18 01                  JR   divide3   
0917                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0917   19                     ADD   hl,de   
0918                DIVIDE3:      
0918   3D                     DEC   a   
0919   20 EF                  JR   nz,divide1   
091B   50 59                  LD   de,bc   ; result from bc to de
091D   C9                     RET      
091E                             ; hl = value1, de = value2
091E                             ; hl = result
091E                EQUALS:      
091E   B7                     OR   a   ; reset the carry flag
091F   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0921   28 19                  JR   z,true1   
0923   C3 42 09               JP   false1   
0926                NOTEQUALS:      
0926   B7                     OR   a   ; reset the carry flag
0927   ED 52                  SBC   hl,de   
0929   C2 3C 09               JP   nz,true1   
092C   C3 42 09               JP   false1   
092F                             ; hl = value1 de = value2
092F                             ; hl = result
092F                LESSTHANEQ:      
092F   B7                     OR   a   
0930   ED 52                  SBC   hl,de   
0932   18 05                  JR   lessthan1   
0934                             ; hl = value1 de = value2
0934                             ; hl = result
0934                LESSTHAN:      
0934   B7                     OR   a   
0935   ED 52                  SBC   hl,de   
0937   28 09                  JR   z,false1   
0939                LESSTHAN1:      
0939   FA 42 09               JP   m,false1   
093C                TRUE1:       
093C   21 FF FF               LD   hl,TRUE   
093F   E5                     PUSH   hl   
0940   DD E9                  JP   (ix)   
0942                NULL1:       
0942                FALSE1:      
0942   21 00 00               LD   hl,FALSE   
0945   E5                     PUSH   hl   
0946   DD E9                  JP   (ix)   
0948                ERROR1:      
0948   21 01 00               LD   hl,1   ; error 1: unknown command
094B   E5                     PUSH   hl   
094C   C3 65 0E               JP   error   
094F                             ; /fl flush
094F                             ; --
094F                FLUSH:       
094F   CD CF 0C               CALL   flushBuffer   
0952   DD E9                  JP   (ix)   
0954                             ; /fe forEach
0954                             ; src proc --
0954                          ;*Macro unroll: FUNC forEach, 1, "spT"
0954                FOREACH:      
0954   CD E9 09               CALL   go   
0957   00 00                  DW   NUL   
0959   62 09                  DW   forEachM_1827S1371   
095B   5D 09                  DW   $+2   
095D   01                     DB   1   
095E   03 73 70 54            .PSTR   "spT"   
0962                FOREACHM_1827S1371:      
0962   7B                     DB   "{"   
0963   5B 30 5D 25 54 3D      DB   "[0]%T="   
0969   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
096D   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0973   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0978   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
098A   3F 3F                  DB   "??"   ; ifte:
098C   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0995   7D 3F                  DB   "}?"   
0997   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
099F   7D                     DB   "}"   
09A0   00                     DB   0   
09A1                             ; ; /fs funcSrc
09A1                             ; ; func -- src
09A1                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
09A1                FUNCSRC:      ; :f func or block
09A1   CD E9 09               CALL   go   
09A4   00 00                  DW   NUL   
09A6   AD 09                  DW   funcSrcM_1842S1387   
09A8   AA 09                  DW   $+2   
09AA   00                     DB   0   
09AB   01 66                  .PSTR   "f"   
09AD                FUNCSRCM_1842S1387:      
09AD   7B                     DB   "{"   
09AE   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
09B2   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
09BA   3A 64 74 7B            DB   ":dt{"   
09BE   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09D0   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09D8   7D 3B                  DB   "};"   
09DA   7D                     DB   "}"   
09DB   00                     DB   0   
09DC                FZ:          
09DC   21 00 21               LD   hl,STACK   
09DF   ED 72                  SBC   hl,sp   
09E1   CB 3C                  SRL   h   
09E3   CB 1D                  RR   l   
09E5   E5                     PUSH   hl   
09E6   C3 25 08               JP   dotNumber   
09E9                             ; execute a block of code which ends with }
09E9                             ; creates a root scope if BP == stack
09E9                             ; else uses outer scope
09E9                CARET:       
09E9                GO:          
09E9   D1                     POP   de   ; de = block*
09EA                GO1:         
09EA   7B                     LD   a,e   ; if block* == null, exit
09EB   B2                     OR   d   
09EC   20 02                  JR   nz,go2   
09EE   DD E9                  JP   (ix)   
09F0                GO2:         
09F0   1A                     LD   a,(de)   
09F1   FE 7B                  CP   "{"   
09F3   28 06                  JR   z,goBlock   
09F5   FE 28                  CP   "("   
09F7   C2 2E 0A               JP   nz,goFunc   
09FA   D5                     PUSH   de   ; push de just before stack frame
09FB                GOBLOCK:      
09FB   ED 53 00 24            LD   (vTemp1),de   ; save de
09FF   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A02   FD 54                  LD   d,iyh   
0A04   FD 5D                  LD   e,iyl   
0A06   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A07   ED 52                  SBC   hl,de   
0A09   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
0A0D   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A0E   B4                     OR   h   
0A0F   3E 00                  LD   a,0   
0A11   28 6A                  JR   z,goFunc8   
0A13   C5                     PUSH   bc   ; push IP
0A14   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A17   FD 46 05               LD   b,(iy+5)   
0A1A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A1D   FD 66 03               LD   h,(iy+3)   
0A20                GOBLOCK2:      
0A20   C5                     PUSH   bc   ; arg_list*
0A21   E5                     PUSH   hl   ; first_arg*
0A22   FD E5                  PUSH   iy   ; push BP
0A24   FD 21 00 00            LD   iy,0   ; BP = SP
0A28   FD 39                  ADD   iy,sp   
0A2A                GOBLOCK3:      
0A2A   42 4B                  LD   bc,de   ; bc = de = block*-1
0A2C   DD E9                  JP   (ix)   
0A2E                GOFUNC:      ; execute func
0A2E   EB                     EX   de,hl   ; hl = func*
0A2F   5E                     LD   e,(hl)   ; de = partial_array*
0A30   23                     INC   hl   
0A31   56                     LD   d,(hl)   
0A32   23                     INC   hl   
0A33   7B                     LD   a,e   ; if partial_array* == null skip
0A34   B2                     OR   d   
0A35   28 21                  JR   z,goFunc3   
0A37   ED 43 00 24            LD   (vTemp1),bc   
0A3B   22 02 24               LD   (vTemp2),hl   ; save bc,hl
0A3E   EB                     EX   de,hl   ; hl = partial_array*
0A3F   2B                     DEC   hl   ; bc = count
0A40   46                     LD   b,(hl)   
0A41   2B                     DEC   hl   
0A42   4E                     LD   c,(hl)   
0A43   23                     INC   hl   ; hl = array data*
0A44   23                     INC   hl   
0A45   18 06                  JR   goFunc2   ; push each item on stack
0A47                GOFUNC1:      
0A47   5E                     LD   e,(hl)   ; de = partial item
0A48   23                     INC   hl   
0A49   56                     LD   d,(hl)   
0A4A   23                     INC   hl   
0A4B   D5                     PUSH   de   ; push on stack
0A4C   0B                     DEC   bc   
0A4D                GOFUNC2:      
0A4D   79                     LD   a,c   ; if count != 0 then loop
0A4E   B0                     OR   b   
0A4F   20 F6                  JR   nz,goFunc1   
0A51   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
0A55   2A 02 24               LD   hl,(vTemp2)   ; restore hl
0A58                GOFUNC3:      
0A58   5E                     LD   e,(hl)   ; de = block*
0A59   23                     INC   hl   
0A5A   56                     LD   d,(hl)   
0A5B   23                     INC   hl   
0A5C   ED 53 00 24            LD   (vTemp1),de   ; save block*
0A60   5E                     LD   e,(hl)   ; de = arg_list*
0A61   23                     INC   hl   
0A62   56                     LD   d,(hl)   
0A63   23                     INC   hl   
0A64   EB                     EX   de,hl   ; hl = arg_list*
0A65   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
0A69   7D                     LD   a,l   ; if arg_list* == null a = 0
0A6A   B4                     OR   h   
0A6B   20 03                  JR   nz,goFunc4   
0A6D   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A6E   18 0D                  JR   goFunc8   
0A70                GOFUNC4:      ; allocate locals
0A70   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A71   18 03                  JR   goFunc6   
0A73                GOFUNC5:      ; loop
0A73   3B                     DEC   sp   
0A74   3B                     DEC   sp   
0A75   3D                     DEC   a   
0A76                GOFUNC6:      
0A76   B7                     OR   a   
0A77   20 FA                  JR   nz,goFunc5   ; end loop
0A79                GOFUNC7:      
0A79   23                     INC   hl   ; a = num_args* x 2
0A7A   7E                     LD   a,(hl)   
0A7B   2B                     DEC   hl   
0A7C   87                     ADD   a,a   ; a *= 2
0A7D                GOFUNC8:      
0A7D   C5                     PUSH   bc   ; push IP
0A7E   44 4D                  LD   bc,hl   
0A80   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A83   85                     ADD   a,l   
0A84   6F                     LD   l,a   
0A85   39                     ADD   hl,sp   
0A86   18 98                  JR   goBlock2   
0A88                DOLLAR:      
0A88                HEXNUM:      
0A88   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A8B                HEXNUM1:      
0A8B   03                     INC   bc   
0A8C   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A8D   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A8F   28 02                  JR   z,hexnum2   ; no a decimal
0A91   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A93                HEXNUM2:      
0A93   D6 30                  SUB   $30   ; form decimal digit
0A95   DA 7D 0B               JP   c,num2   
0A98   FE 10                  CP   $0F+1   
0A9A   D2 7D 0B               JP   nc,num2   
0A9D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A9E   29                     ADD   hl,hl   ; 4X
0A9F   29                     ADD   hl,hl   ; 8X
0AA0   29                     ADD   hl,hl   ; 16X
0AA1   85                     ADD   a,l   ; add into bottom of hl
0AA2   6F                     LD   l,a   
0AA3   18 E6                  JR   hexnum1   
0AA5                UPCASE:      
0AA5   0A                     LD   a,(bc)   ; a = identifier char
0AA6   D6 41                  SUB   "A"   ; "A" = 0
0AA8   18 05                  JR   ident1   
0AAA                LOWCASE:      
0AAA   0A                     LD   a,(bc)   
0AAB   D6 61                  SUB   "a"   
0AAD   C6 1A                  ADD   a,26   
0AAF                IDENT1:      
0AAF   87                     ADD   a,a   ; l = a * 2
0AB0   6F                     LD   l,a   
0AB1   26 23                  LD   h,msb(vars)   
0AB3   22 F4 23               LD   (vPointer),hl   ; store address in setter
0AB6   5E                     LD   e,(hl)   
0AB7   23                     INC   hl   
0AB8   56                     LD   d,(hl)   
0AB9   D5                     PUSH   de   
0ABA   DD E9                  JP   (ix)   
0ABC                             ; if
0ABC                             ; condition then -- value
0ABC                QUESTION:      
0ABC                IF:          
0ABC   03                     INC   bc   
0ABD   0A                     LD   a,(bc)   
0ABE   FE 3F                  CP   "?"   
0AC0   28 06                  JR   z,ifte   
0AC2   0B                     DEC   bc   
0AC3   11 00 00               LD   de,NUL   ; NUL pointer for else
0AC6   18 01                  JR   ifte1   
0AC8                             ; ifte
0AC8                             ; condition then else -- value
0AC8                IFTE:        
0AC8   D1                     POP   de   ; de = else
0AC9                IFTE1:       
0AC9   E1                     POP   hl   ; hl = then
0ACA   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0ACB   7C                     LD   a,h   
0ACC   B5                     OR   l   
0ACD   E1                     POP   hl   ; hl = then
0ACE   CA EA 09               JP   z,go1   ; if z de = else
0AD1   EB                     EX   de,hl   ; condition = false, de = then
0AD2   C3 EA 09               JP   go1   
0AD5                             ; Z80 port input
0AD5                             ; port -- value
0AD5                INPUT:       
0AD5   E1                     POP   hl   
0AD6   59                     LD   e,c   ; save IP
0AD7   4D                     LD   c,l   
0AD8   ED 68                  IN   l,(c)   
0ADA   26 00                  LD   h,0   
0ADC   4B                     LD   c,e   ; restore IP
0ADD   E5                     PUSH   hl   
0ADE   DD E9                  JP   (ix)   
0AE0                KEY:         
0AE0   CD 81 00               CALL   getchar   
0AE3   26 00                  LD   h,0   
0AE5   6F                     LD   l,a   
0AE6   E5                     PUSH   hl   
0AE7   DD E9                  JP   (ix)   
0AE9                             ; /li literal
0AE9                             ; low level operation
0AE9                             ; reads the next two bytes and
0AE9                             ; pushes a word on the stack
0AE9                             ; -- value
0AE9                LITERAL:      
0AE9   03                     INC   bc   
0AEA   0A                     LD   a,(bc)   
0AEB   6F                     LD   l,a   
0AEC   03                     INC   bc   
0AED   0A                     LD   a,(bc)   
0AEE   67                     LD   h,a   
0AEF   E5                     PUSH   hl   
0AF0   DD E9                  JP   (ix)   
0AF2                             ; Z80 port output
0AF2                             ; value port --
0AF2                OUTPUT:      
0AF2   E1                     POP   hl   
0AF3   59                     LD   e,c   ; save IP
0AF4   4D                     LD   c,l   
0AF5   E1                     POP   hl   
0AF6   ED 69                  OUT   (c),l   
0AF8   4B                     LD   c,e   ; restore IP
0AF9   DD E9                  JP   (ix)   
0AFB                             ; /mp map
0AFB                             ; src func -- src1
0AFB                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
0AFB                MAP:         ; map
0AFB   CD E9 09               CALL   go   
0AFE   00 00                  DW   NUL   
0B00   08 0B                  DW   mapM_2081S1638   
0B02   04 0B                  DW   $+2   
0B04   00                     DB   0   
0B05   02 73 66               .PSTR   "sf"   
0B08                MAPM_2081S1638:      
0B08   7B                     DB   "{"   
0B09   3A 6B 74 7B            DB   ":kt{"   
0B0D   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0B15   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0B19   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0B1E   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0B2A   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0B33   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0B3B   7D 3B                  DB   "};"   
0B3D   7D                     DB   "}"   
0B3E   00                     DB   0   
0B3F                STAR:        
0B3F                MUL:         
0B3F   D1                     POP   de   ; get first value
0B40   E1                     POP   hl   
0B41                MUL2:        
0B41   C5                     PUSH   bc   ; Preserve the IP
0B42   44 4D                  LD   bc,hl   ; bc = 2nd value
0B44   21 00 00               LD   hl,0   
0B47   3E 10                  LD   a,16   
0B49                MUL3:        
0B49   29                     ADD   hl,hl   
0B4A   CB 13                  RL   e   
0B4C   CB 12                  RL   d   
0B4E   30 04                  JR   nc,$+6   
0B50   09                     ADD   hl,bc   
0B51   30 01                  JR   nc,$+3   
0B53   13                     INC   de   
0B54   3D                     DEC   a   
0B55   20 F2                  JR   nz,mul3   
0B57   C1                     POP   bc   ; Restore the IP
0B58   C3 9B 03               JP   add3   
0B5B                NUM:         
0B5B   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B5E   0A                     LD   a,(bc)   ; Get numeral or -
0B5F   FE 2D                  CP   "-"   
0B61   20 01                  JR   nz,num0   
0B63   03                     INC   bc   ; move to next char, no flags affected
0B64                NUM0:        
0B64   08                     EX   af,af'   ; save zero flag = 0 for later
0B65                NUM1:        
0B65   0A                     LD   a,(bc)   ; read digit
0B66   D6 30                  SUB   "0"   ; less than 0?
0B68   38 13                  JR   c,num2   ; not a digit, exit loop
0B6A   FE 0A                  CP   10   ; greater that 9?
0B6C   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B6E   03                     INC   bc   ; inc IP
0B6F   54 5D                  LD   de,hl   ; multiply hl * 10
0B71   29                     ADD   hl,hl   
0B72   29                     ADD   hl,hl   
0B73   19                     ADD   hl,de   
0B74   29                     ADD   hl,hl   
0B75   85                     ADD   a,l   ; add digit in a to hl
0B76   6F                     LD   l,a   
0B77   3E 00                  LD   a,0   
0B79   8C                     ADC   a,h   
0B7A   67                     LD   h,a   
0B7B   18 E8                  JR   num1   
0B7D                NUM2:        
0B7D   0B                     DEC   bc   
0B7E   08                     EX   af,af'   ; restore zero flag
0B7F   20 07                  JR   nz,num3   
0B81   EB                     EX   de,hl   ; negate the value of hl
0B82   21 00 00               LD   hl,0   
0B85   B7                     OR   a   ; jump to sub2
0B86   ED 52                  SBC   hl,de   
0B88                NUM3:        
0B88   E5                     PUSH   hl   ; Put the number on the stack
0B89   DD E9                  JP   (ix)   ; and process the next character
0B8B                             ; /rg rangeSrc
0B8B                             ; begin end step -- src
0B8B                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0B8B                RANGESRC:      ; range source (begin end step)
0B8B   CD E9 09               CALL   go   
0B8E   00 00                  DW   NUL   
0B90   9A 0B                  DW   rangeSrcM_2153S1713   
0B92   94 0B                  DW   $+2   
0B94   01                     DB   1   
0B95   04 62 65 73 4C         .PSTR   "besL"   
0B9A                RANGESRCM_2153S1713:      
0B9A   7B                     DB   "{"   
0B9B   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0BA6   3A 6B 74 7B            DB   ":kt{"   
0BAA   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0BB2   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0BB8   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
0BBF   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0BC7   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0BD6   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0BDE   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0BE5   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0BF9   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0C01   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0C09   7D 3B                  DB   "};"   
0C0B   7D                     DB   "}"   
0C0C   00                     DB   0   
0C0D                RPAREN:      
0C0D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0C10   FD 46 09               LD   b,(iy+9)   
0C13   DD E9                  JP   (ix)   
0C15                             ; shiftLeft
0C15                             ; value count -- value2          shift left count places
0C15                SHIFTLEFT:      
0C15   50 59                  LD   de,bc   ; save IP
0C17   C1                     POP   bc   ; bc = count
0C18   41                     LD   b,c   ; b = loop counter
0C19   E1                     POP   hl   
0C1A   04                     INC   b   ; test for counter=0 case
0C1B   18 01                  JR   shiftLeft2   
0C1D                SHIFTLEFT1:      
0C1D   29                     ADD   hl,hl   ; left shift hl
0C1E                SHIFTLEFT2:      
0C1E   10 FD                  DJNZ   shiftLeft1   
0C20   E5                     PUSH   hl   
0C21   42 4B                  LD   bc,de   ; restore IP
0C23   DD E9                  JP   (ix)   
0C25                             ; shiftRight
0C25                             ; value count -- value2          shift left count places
0C25                SHIFTRIGHT:      
0C25   50 59                  LD   de,bc   ; save IP
0C27   C1                     POP   bc   ; bc = count
0C28   41                     LD   b,c   ; b = loop counter
0C29   E1                     POP   hl   
0C2A   04                     INC   b   ; test for counter=0 case
0C2B   18 04                  JR   shiftRight2   
0C2D                SHIFTRIGHT1:      
0C2D   CB 3C                  SRL   h   ; right shift hl
0C2F   CB 1D                  RR   l   
0C31                SHIFTRIGHT2:      
0C31   10 FA                  DJNZ   shiftRight1   
0C33   E5                     PUSH   hl   
0C34   42 4B                  LD   bc,de   ; restore IP
0C36   DD E9                  JP   (ix)   
0C38                             ; string
0C38                             ; -- ptr                        ; points to start of string chars,
0C38                             ; length is stored at start - 2 bytes
0C38                DQUOTE:      
0C38                STRING:      
0C38   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0C3B   23                     INC   hl   ; skip length field to start
0C3C   23                     INC   hl   
0C3D   E5                     PUSH   hl   ; save start of string
0C3E   03                     INC   bc   ; point to next char
0C3F   18 03                  JR   string2   
0C41                STRING1:      
0C41   77                     LD   (hl),a   
0C42   23                     INC   hl   ; increase count
0C43   03                     INC   bc   ; point to next char
0C44                STRING2:      
0C44   0A                     LD   a,(bc)   
0C45   FE 22                  CP   DQ   ; " is the string terminator
0C47   28 04                  JR   z,string3   
0C49   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0C4B   20 F4                  JR   nz,string1   
0C4D                STRING3:      
0C4D   AF                     XOR   a   ; write NUL to terminate string
0C4E   77                     LD   (hl),a   ; hl = end of string
0C4F   23                     INC   hl   
0C50   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C53   2B                     DEC   hl   ; hl = end of string without terminator
0C54   D1                     POP   de   ; de = start of string
0C55   D5                     PUSH   de   ; return start of string
0C56   B7                     OR   a   ; hl = length bytes, de = start of string
0C57   ED 52                  SBC   hl,de   
0C59   EB                     EX   de,hl   
0C5A   2B                     DEC   hl   ; write length bytes to length field at start - 2
0C5B   72                     LD   (hl),d   
0C5C   2B                     DEC   hl   
0C5D   73                     LD   (hl),e   
0C5E   DD E9                  JP   (ix)   
0C60                MINUS:       ; negative sign or subtract
0C60   03                     INC   bc   ; check if sign of a number
0C61   0A                     LD   a,(bc)   
0C62   0B                     DEC   bc   
0C63   FE 30                  CP   "0"   
0C65   38 05                  JR   c,sub   
0C67   FE 3A                  CP   "9"+1   
0C69   DA 44 03               JP   c,num_   
0C6C                SUB:         ; Subtract the value 2nd on stack from top of stack
0C6C   03                     INC   bc   
0C6D   FE 2D                  CP   "-"   
0C6F   20 05                  JR   nz,sub1   
0C71   E1                     POP   hl   
0C72   2B                     DEC   hl   
0C73   C3 D3 04               JP   assign0   
0C76                SUB1:        
0C76   0B                     DEC   bc   
0C77   D1                     POP   de   
0C78   E1                     POP   hl   
0C79   B7                     OR   a   
0C7A   ED 52                  SBC   hl,de   
0C7C   C3 9B 03               JP   add3   
0C7F                             ; /pc printChars
0C7F                             ; char* len --
0C7F                PRINTCHARS:      
0C7F   E1                     POP   hl   ; hl = count
0C80   D1                     POP   de   ; de = char*
0C81   CD 8C 0C               CALL   printChars2   
0C84   DD E9                  JP   (ix)   
0C86                PRINTCHARS1:      
0C86   1A                     LD   a,(de)   ; print char at char*
0C87   CD 85 00               CALL   putchar   
0C8A   13                     INC   de   ; char*++
0C8B   2B                     DEC   hl   ; count--
0C8C                PRINTCHARS2:      
0C8C   7D                     LD   a,l   ; count == 0?
0C8D   B4                     OR   h   
0C8E   C8                     RET   z   
0C8F   18 F5                  JR   printChars1   ; if not loop
0C91                RECUR:       
0C91   E1                     POP   hl   
0C92   22 F2 23               LD   (vRecur),hl   
0C95   DD E9                  JP   (ix)   
0C97                REMAIN:      
0C97   2A F6 23               LD   hl,(vRemain)   
0C9A   E5                     PUSH   hl   
0C9B   DD E9                  JP   (ix)   
0C9D                CONSTBUFSTART:      
0C9D   11 00 22               LD   de,BUF   
0CA0   18 28                  JR   constant   
0CA2                CONSTHEAPSTART:      
0CA2   11 1C 24               LD   de,HEAP   
0CA5   18 23                  JR   constant   
0CA7                CONSTTIBSTART:      
0CA7   11 00 21               LD   de,TIB   
0CAA   18 1E                  JR   constant   
0CAC                VARBUFPTR:      
0CAC   ED 5B EC 23            LD   de,(vBufPtr)   
0CB0   21 EC 23               LD   hl,vBufPtr   
0CB3   18 12                  JR   variable   
0CB5                VARHEAPPTR:      
0CB5   ED 5B F0 23            LD   de,(vHeapPtr)   
0CB9   21 F0 23               LD   hl,vHeapPtr   
0CBC   18 09                  JR   variable   
0CBE                VARTIBPTR:      
0CBE   ED 5B EA 23            LD   de,(vTIBPtr)   
0CC2   21 EA 23               LD   hl,vTIBPtr   
0CC5   18 00                  JR   variable   
0CC7                VARIABLE:      
0CC7   22 F4 23               LD   (vPointer),hl   
0CCA                CONSTANT:      
0CCA   D5                     PUSH   de   
0CCB   DD E9                  JP   (ix)   
0CCD                             ; 
0CCD                FILTER:      
0CCD                SCAN:        
0CCD   DD E9                  JP   (ix)   
0CCF                             ;*******************************************************************
0CCF                             ; general routines
0CCF                             ;*******************************************************************
0CCF                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0CCF                FLUSHBUFFER:      
0CCF   F5                     PUSH   af   
0CD0   D5                     PUSH   de   
0CD1   E5                     PUSH   hl   
0CD2   2A EC 23               LD   hl,(vBufPtr)   
0CD5   11 00 22               LD   de,BUF   
0CD8   ED 53 EC 23            LD   (vBufPtr),de   
0CDC   B7                     OR   a   
0CDD   ED 52                  SBC   hl,de   
0CDF   CD 8C 0C               CALL   printChars2   
0CE2   E1                     POP   hl   
0CE3   D1                     POP   de   
0CE4   F1                     POP   af   
0CE5   C9                     RET      
0CE6                             ; followed by a table
0CE6                             ; db char
0CE6                             ; dw addr
0CE6                             ; the final item must have char == NUL
0CE6                JUMPTABLE:      
0CE6   03                     INC   bc   
0CE7   E1                     POP   hl   
0CE8                JUMPTABLE0:      
0CE8   AF                     XOR   a   
0CE9   BE                     CP   (hl)   
0CEA   28 09                  JR   z,jumpTable1   
0CEC   0A                     LD   a,(bc)   
0CED   BE                     CP   (hl)   
0CEE   28 06                  JR   z,jumpTable2   
0CF0   23                     INC   hl   
0CF1   23                     INC   hl   
0CF2   23                     INC   hl   
0CF3   18 F3                  JR   jumpTable0   
0CF5                JUMPTABLE1:      
0CF5   0B                     DEC   bc   
0CF6                JUMPTABLE2:      
0CF6   23                     INC   hl   
0CF7   5E                     LD   e,(hl)   
0CF8   23                     INC   hl   
0CF9   56                     LD   d,(hl)   
0CFA   EB                     EX   de,hl   
0CFB   E9                     JP   (hl)   
0CFC                PRTSTR0:      
0CFC   CD 85 00               CALL   putchar   
0CFF   23                     INC   hl   
0D00                PRTSTR:      
0D00   7E                     LD   a,(hl)   
0D01   B7                     OR   a   
0D02   20 F8                  JR   nz,prtstr0   
0D04   C9                     RET      
0D05                             ; **************************************************************************
0D05                             ; calculate nesting value
0D05                             ; a is char to be tested,
0D05                             ; e is the nesting value (initially 0)
0D05                             ; e is increased by ( and [
0D05                             ; e is decreased by ) and ]
0D05                             ; e has its bit 7 toggled by `
0D05                             ; limited to 127 levels
0D05                             ; **************************************************************************
0D05                NESTING:      
0D05   FE 22                  CP   DQ   ; quote char
0D07   28 06                  JR   z,nesting0   
0D09   FE 60                  CP   "`"   ; quote char
0D0B   28 02                  JR   z,nesting0   
0D0D   18 0A                  JR   nesting1   
0D0F                NESTING0:      
0D0F   CB 7B                  BIT   7,e   
0D11   28 03                  JR   z,nesting1a   
0D13   CB BB                  RES   7,e   
0D15   C9                     RET      
0D16                NESTING1A:      
0D16   CB FB                  SET   7,e   
0D18   C9                     RET      
0D19                NESTING1:      
0D19   CB 7B                  BIT   7,e   
0D1B   C0                     RET   nz   
0D1C   FE 7B                  CP   "{"   
0D1E   28 08                  JR   z,nesting2   
0D20   FE 5B                  CP   "["   
0D22   28 04                  JR   z,nesting2   
0D24   FE 28                  CP   "("   
0D26   20 02                  JR   nz,nesting3   
0D28                NESTING2:      
0D28   1C                     INC   e   
0D29   C9                     RET      
0D2A                NESTING3:      
0D2A   FE 7D                  CP   "}"   
0D2C   28 07                  JR   z,nesting4   
0D2E   FE 5D                  CP   "]"   
0D30   28 03                  JR   z,nesting4   
0D32   FE 29                  CP   ")"   
0D34   C0                     RET   nz   
0D35                NESTING4:      
0D35   1D                     DEC   e   
0D36   C9                     RET      
0D37                PROMPT:      
0D37   CD 47 0D               CALL   printStr   
0D3A   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0D3F   C9                     RET      
0D40                CRLF:        
0D40   CD 47 0D               CALL   printStr   
0D43   0D 0A 00               .CSTR   "\r\n"   
0D46   C9                     RET      
0D47                             ; prints a null teminated string
0D47                             ; the string should be immediately following the call
0D47                PRINTSTR:      
0D47   E3                     EX   (sp),hl   ; swap			
0D48   CD 00 0D               CALL   prtstr   
0D4B   23                     INC   hl   ; inc past NUL
0D4C   E3                     EX   (sp),hl   ; put it back	
0D4D   C9                     RET      
0D4E                TITLESTR:      
0D4E   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D62                INIT:        
0D62   21 4E 0D               LD   hl,titleStr   
0D65   11 08 24               LD   de,titleBuf   
0D68   06 14                  LD   b,20   
0D6A                INIT1:       
0D6A   1A                     LD   a,(de)   
0D6B   BE                     CP   (hl)   
0D6C   20 17                  JR   nz,coldBoot0   
0D6E   13                     INC   de   
0D6F   23                     INC   hl   
0D70   10 F8                  DJNZ   init1   
0D72                WARMINIT:      
0D72   ED 4B F8 23            LD   bc,(vSavedIP)   ; restore IP
0D76   ED 7B FA 23            LD   sp,(vSavedSP)   ; restore SP
0D7A   DD 2A FC 23            LD   ix,(vSavedNext)   ; restore Next
0D7E   FD 2A FE 23            LD   iy,(vSavedBP)   ; restore BP
0D82   C3 BC 0D               JP   start1   
0D85                COLDBOOT0:      
0D85   21 4E 0D               LD   hl,titleStr   ; copy titleStr to titleBuf
0D88   11 08 24               LD   de,titleBuf   
0D8B   06 14                  LD   b,20   
0D8D   ED B0                  LDIR      
0D8F                COLDINIT:      
0D8F   21 80 01               LD   hl,isysVars   
0D92   11 E6 23               LD   de,sysVars   
0D95   01 10 00               LD   bc,8 * 2   
0D98   ED B0                  LDIR      
0D9A   21 00 23               LD   hl,vars   ; 52 vars LO HI
0D9D   06 34                  LD   b,26*2   
0D9F   AF                     XOR   a   
0DA0                COLDBOOT1:      
0DA0   77                     LD   (hl),a   
0DA1   23                     INC   hl   
0DA2   10 FC                  DJNZ   coldBoot1   
0DA4   DD 2A EE 23            LD   ix,(vNext)   
0DA8   FD 21 00 21            LD   iy,STACK   
0DAC   C9                     RET      
0DAD                COLDSTART:      
0DAD   31 00 21               LD   sp,STACK   
0DB0   CD 85 0D               CALL   coldBoot0   
0DB3   C3 BC 0D               JP   start1   
0DB6                START:       
0DB6   31 00 21               LD   sp,STACK   ; start Monty
0DB9   CD 62 0D               CALL   init   ; setups
0DBC                START1:      
0DBC   21 08 24               LD   hl,titleBuf   
0DBF   CD 00 0D               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0DC2                INTERPRET:      
0DC2   CD CF 0C               CALL   flushBuffer   
0DC5   CD 37 0D               CALL   prompt   
0DC8   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DCB   21 00 21               LD   hl,TIB   
0DCE   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DD1                INTERPRET2:      ; calculate nesting
0DD1   1E 00                  LD   e,0   ; initilize nesting value
0DD3   C5                     PUSH   bc   ; save offset into TIB,
0DD4                             ; bc is also the count of chars in TIB
0DD4   21 00 21               LD   hl,TIB   ; hl is start of TIB
0DD7   18 0B                  JR   interpret4   
0DD9                INTERPRET3:      
0DD9   3E 33                  LD   a,"3"   
0DDB   CD 85 00               CALL   putchar   
0DDE   7E                     LD   a,(hl)   ; a = char in TIB
0DDF   23                     INC   hl   ; inc pointer into TIB
0DE0   0B                     DEC   bc   ; dec count of chars in TIB
0DE1   CD 05 0D               CALL   nesting   ; update nesting value
0DE4                INTERPRET4:      
0DE4   79                     LD   a,c   ; is count zero?
0DE5   B0                     OR   b   
0DE6   20 F1                  JR   nz,interpret3   ; if not loop
0DE8   C1                     POP   bc   ; restore offset into TIB
0DE9                INTERPRET5:      
0DE9   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0DEC   FE 20                  CP   $20   ; compare to space
0DEE   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0DF0   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0DF2                             ; ???? NEEDED?
0DF2   28 36                  JR   z,interpret8   
0DF4   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0DF6   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0DF8   FE 05                  CP   CTRL_E   
0DFA   CA 88 0E               JP   z,edit_   
0DFD   FE 08                  CP   CTRL_H   
0DFF   CA 78 0E               JP   z,backSpace_   
0E02   FE 0A                  CP   CTRL_J   
0E04   CA A0 0E               JP   z,reEdit_   
0E07                             ; cp CTRL_S
0E07                             ; jp z,printStack_
0E07                             ; DB     lsb(edit_)       ; ENQ ^E  5
0E07                             ; DB     lsb(reedit_)     ; LF  ^J 10
0E07                             ; DB     lsb(list_)       ; FF  ^L 12
0E07                             ; DB     lsb(printStack_) ; DLE ^P 16
0E07                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0E07                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0E07                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0E07                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0E07                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0E07                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0E07                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0E07                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0E07                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0E07                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0E07                INTERPRET5A:      
0E07                             ; ld (vTIBPtr),bc
0E07                             ; ld bc,(vTIBPtr)
0E07   18 C8                  JR   interpret2   
0E09                INTERPRET6:      
0E09   21 00 21               LD   hl,TIB   
0E0C   09                     ADD   hl,bc   
0E0D   77                     LD   (hl),a   ; store the character in textbuf
0E0E   03                     INC   bc   
0E0F   CD 85 00               CALL   putchar   ; echo character to screen
0E12   CD 05 0D               CALL   nesting   
0E15   18 D2                  JR   interpret5   ; wait for next character
0E17                INTERPRET7:      
0E17   21 00 21               LD   hl,TIB   
0E1A   09                     ADD   hl,bc   
0E1B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E1D   23                     INC   hl   
0E1E   36 0A                  LD   (hl),"\n"   
0E20   23                     INC   hl   
0E21   03                     INC   bc   
0E22   03                     INC   bc   
0E23   CD 40 0D               CALL   crlf   ; echo character to screen
0E26   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0E27   B7                     OR   a   
0E28   20 BF                  JR   nz,interpret5   
0E2A                INTERPRET8:      
0E2A   21 00 21               LD   hl,TIB   
0E2D   09                     ADD   hl,bc   
0E2E   22 EA 23               LD   (vTIBPtr),hl   
0E31   01 00 21               LD   bc,TIB   
0E34   ED 43 F8 23            LD   (vSavedIP),bc   ; save IP
0E38   ED 73 FA 23            LD   (vSavedSP),sp   ; save SP
0E3C   DD 22 FC 23            LD   (vSavedNext),ix   ; save Next
0E40   FD 22 FE 23            LD   (vSavedBP),iy   ; save BP
0E44   0B                     DEC   bc   
0E45                NEXT:        
0E45   03                     INC   bc   ; Increment the IP
0E46   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E47   FE 20                  CP   " "   ; whitespace?
0E49   28 FA                  JR   z,next   ; space? ignore
0E4B   38 09                  JR   c,next1   
0E4D   D6 20                  SUB   " "   
0E4F   6F                     LD   l,a   ; index into table
0E50   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E52   6E                     LD   l,(hl)   ; get low jump address
0E53   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E55   E9                     JP   (hl)   ; Jump to routine
0E56                NEXT1:       
0E56   FE 00                  CP   NUL   ; end of input string?
0E58   28 03                  JR   z,exit   
0E5A   C3 C2 0D               JP   interpret   ; no, other whitespace, macros?
0E5D                EXIT:        
0E5D   03                     INC   bc   
0E5E   60 69                  LD   hl,bc   
0E60   E9                     JP   (hl)   
0E61                RUN:         
0E61   C1                     POP   bc   
0E62   0B                     DEC   bc   
0E63   DD E9                  JP   (ix)   
0E65                ERROR:       
0E65   CD 61 0E               CALL   run   
0E68   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0E75   C3 C2 0D               JP   interpret   
0E78                BACKSPACE_:      
0E78   79                     LD   a,c   
0E79   B0                     OR   b   
0E7A   CA D1 0D               JP   z,interpret2   
0E7D   0B                     DEC   bc   
0E7E   CD 47 0D               CALL   printStr   
0E81   08 20 08 00            .CSTR   "\b \b"   
0E85   C3 D1 0D               JP   interpret2   
0E88                             ; edit
0E88                EDIT_:       
0E88   CD 61 0E               CALL   run   
0E8B   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0E9D   C3 C2 0D               JP   interpret   
0EA0                REEDIT_:      
0EA0   C3 C2 0D               JP   interpret   
0EA3                PRINTSTACK_:      
0EA3   CD 61 0E               CALL   run   
0EA6   2F 70 6B 00            .CSTR   "/pk"   
0EAA   C3 C2 0D               JP   interpret   
0EAD                             ; editDef:
0EAD                             ;     pop hl                      ; pop ret address
0EAD                             ;     ex (sp),hl                  ; swap with TOS
0EAD                             ;     push hl                     ; dup TOS
0EAD                             ;     ld a,l                      ; a = ident
0EAD                             ;     ld de,TIB                   ; de = start of TIB
0EAD                             ;     ld (vTIBPtr),de             ; update TIB*
0EAD                             ;     push ix                     ; save NEXT
0EAD                             ;     ld ix,editDef0              ; NEXT = editDef0
0EAD                             ;     jp lookupRef                ; convert letter into address
0EAD                             ; editDef0:
0EAD                             ;     ld e,(hl)                   ; de = (hl++)
0EAD                             ;     inc hl
0EAD                             ;     ld d,(hl)
0EAD                             ;     ld a,d                      ; de == 0 ?
0EAD                             ;     or e
0EAD                             ;     jr z,editDef4
0EAD                             ;     ld ix,editDef3              ; NEXT = editDef3
0EAD                             ;     ex de,hl
0EAD                             ;     ld a,(hl)
0EAD                             ;     cp "{"
0EAD                             ;     jr nz,editDef1
0EAD                             ;     jp editBlock0               ; convert letter into address
0EAD                             ; editDef1:
0EAD                             ;     cp "("
0EAD                             ;     jr nz,editDef2
0EAD                             ;     jp editBlock0               ; convert letter into address
0EAD                             ; editDef2:
0EAD                             ;     jp editFunc
0EAD                             ; editDef3:
0EAD                             ;     ld a," "                    ; write assign
0EAD                             ;     call writeChar
0EAD                             ;     pop hl                      ; a = ident
0EAD                             ;     ld a,l
0EAD                             ;     call writeChar
0EAD                             ;     ld a,"="                    ; write assign
0EAD                             ;     call writeChar
0EAD                             ;     ld ix,editDef4              ; NEXT = editDef4
0EAD                             ;     jp printTIB
0EAD                             ; editDef4:
0EAD                             ;     pop ix                      ; restore NEXT
0EAD                             ;     jp (ix)
0EAD                             ; writeChar:
0EAD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0EAD                             ;     ld (de),a                   ; write ident
0EAD                             ;     inc de
0EAD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0EAD                             ;     ret
0EAD                             ; ; printTIB
0EAD                             ; printTIB:
0EAD                             ;     ld hl,(vTIBPtr)
0EAD                             ;     ld de,TIB
0EAD                             ;     or a
0EAD                             ;     sbc hl,de
0EAD                             ;     jp printTIB2
0EAD                             ; printTIB1:
0EAD                             ;     ld a,(de)
0EAD                             ;     call putchar
0EAD                             ; printTIB2:
0EAD                             ;     ld a,l
0EAD                             ;     or h
0EAD                             ;     jr nz,printTIB1
0EAD                             ;     jp (ix)
0EAD                             ; editBlock:
0EAD                             ;     pop hl                      ; hl = block*
0EAD                             ; editBlock0:
0EAD                             ;     push ix                     ; save next
0EAD                             ;     push hl                     ; push block*
0EAD                             ;     push hl                     ; push block*
0EAD                             ;     ld ix,(editBlock2)
0EAD                             ;     jp blockLength
0EAD                             ; editBlock1:
0EAD                             ;     pop hl                      ; bc = length, (sp) = IP
0EAD                             ;     pop de                      ; de = block*
0EAD                             ;     ld a,l
0EAD                             ;     or h
0EAD                             ;     jr z,editBlock2
0EAD                             ;     push bc
0EAD                             ;     ld bc,hl
0EAD                             ;     ex de,hl                    ; hl = block*
0EAD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0EAD                             ;     ldir                        ; copy block to TIB
0EAD                             ;     ld (vTIBPtr),de              ; save TIB*
0EAD                             ;     pop bc
0EAD                             ; editBlock2:
0EAD                             ;     pop ix                      ; restore next
0EAD                             ;     jp (ix)
0EAD                             ; editFunc:
0EAD                             ;     jp (ix)
0EAD                             ; editArray:
0EAD                             ;     jp (ix)
0EAD                             ; editArglist:
0EAD                             ;     jp (ix)
0EAD                             ; ; blockLength
0EAD                             ; ; addr1 -- length
0EAD                             ; blockLength:
0EAD                             ;     pop hl                      ; block*
0EAD                             ;     push hl                     ; save block*
0EAD                             ;     inc hl                      ; skip first char
0EAD                             ;     ld d,1                      ; increase nesting
0EAD                             ; blockLength1:                   ; Skip to end of definition
0EAD                             ;     ld a,(hl)                   ; Get the next character
0EAD                             ;     inc hl                      ; Point to next character
0EAD                             ;     cp " " + 1                  ; ignore whitespace
0EAD                             ;     jr c,blockLength1
0EAD                             ;     cp ")"
0EAD                             ;     jr z,blockLength4
0EAD                             ;     cp "}"
0EAD                             ;     jr z,blockLength4
0EAD                             ;     cp "]"
0EAD                             ;     jr z,blockLength4
0EAD                             ;     cp "("
0EAD                             ;     jr z,blockLength2
0EAD                             ;     cp "{"
0EAD                             ;     jr z,blockLength2
0EAD                             ;     cp "["
0EAD                             ;     jr z,blockLength2
0EAD                             ;     cp "'"
0EAD                             ;     jr z,blockLength3
0EAD                             ;     cp "`"
0EAD                             ;     jr z,blockLength3
0EAD                             ;     cp DQ
0EAD                             ;     jr z,blockLength3
0EAD                             ;     jr blockLength1
0EAD                             ; blockLength2:
0EAD                             ;     inc d
0EAD                             ;     jr blockLength1
0EAD                             ; blockLength4:
0EAD                             ;     dec d
0EAD                             ;     jr nz, blockLength1         ; get the next element
0EAD                             ; blockLength3:
0EAD                             ;     ld a,$80
0EAD                             ;     xor d
0EAD                             ;     ld d,a
0EAD                             ;     jr nz, blockLength1
0EAD                             ;     pop hl                      ; hl = block*
0EAD                             ;     or a
0EAD                             ;     sbc hl,de
0EAD                             ;     push hl
0EAD                             ;     jp (ix)
0EAD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0EAD                             ; \a start of stack \#3 depth \b base \$ prompt
0EAD                             ; DW dStack               ; a vS0 start of datastack			
0EAD                             ; DW FALSE                ; b vBase16
0EAD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0EAD                             ; DW 0                    ; d
0EAD                             ; DW 65                   ; e vLastDef "A" last command u defined
0EAD                             ; DW 0                    ; f
0EAD                             ; DW page6                ; g 256 bytes limits
0EAD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0EAD                F1:          
0EAD                F2:          
0EAD                F3:          
0EAD                F4:          
0EAD                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                             ; uninitialised sys variables (preserved)
23F4                VPOINTER:   DS   2   ; 
23F6                VREMAIN:   DS   2   ; 
23F8                VSAVEDIP:   DS   2   ; 
23FA                VSAVEDSP:   DS   2   ; 
23FC                VSAVEDNEXT:   DS   2   ; 
23FE                VSAVEDBP:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                TBPTR:    DS   2   ; reserved for tests
2408                TITLEBUF:   DS   20   
241C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0CCD DEFINED AT LINE 1900 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2209 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C1 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
XOR:                03CA DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
XOR1:               03CB DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
INVERT:             03D5 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
PERCENT:            03DA DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03DA DEFINED AT LINE 363 IN MAIN.asm
ARG0:               03F6 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
ARG0A:              03FF DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ARG1:               0404 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
ARG1A:              040C DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
LBRACK:             040F DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         040F DEFINED AT LINE 405 IN MAIN.asm
RBRACK:             042B DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           042B DEFINED AT LINE 420 IN MAIN.asm
ARRAYEND1:          0447 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ARRAYEND2:          0457 DEFINED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
ARRAYEND3:          045C DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
HASH:               047B DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         047B DEFINED AT LINE 475 IN MAIN.asm
ARRAYINDEX0:        0483 DEFINED AT LINE 481 IN MAIN.asm
ARRAYINDEX1:        0484 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
ARRAYINDEX2:        0490 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
ARRAYSIZE:          0493 DEFINED AT LINE 498 IN MAIN.asm
COLON:              049B DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 512 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 530 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 545 IN MAIN.asm
ASSIGN:             04D1 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04D3 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
ASSIGNX:            04D4 DEFINED AT LINE 563 IN MAIN.asm
ASSIGN1:            04E0 DEFINED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
ABSOLUTE:           04E2 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
ADDROF:             04EF DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 840 IN MAIN.asm
ADDROF1:            0503 DEFINED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
ADDROF2:            050E DEFINED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 602 IN MAIN.asm
LBRACE:             0510 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         0510 DEFINED AT LINE 617 IN MAIN.asm
BLOCKSTART1:        0514 DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
BLOCKSTART2:        0540 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKSTART3:        0543 DEFINED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
BLOCKSTART4:        054B DEFINED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
BLOCKSTART5:        054E DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
BLOCKSTART6:        0576 DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
RBRACE:             0579 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0579 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
BLOCKEND1:          05AB DEFINED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
BLOCKEND2:          05B7 DEFINED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BLOCKEND3:          05C9 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
BLOCKEND4:          05DD DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
BREAK:              05E6 DEFINED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
BREAK1:             05ED DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
QUIT:               0600 DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
QUIT1:              0607 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
TICK:               060A DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               060A DEFINED AT LINE 771 IN MAIN.asm
CHAR1:              060D DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
CHAR2:              0619 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
CHAR3:              061C DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
SLASH:              061F DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            061F DEFINED AT LINE 790 IN MAIN.asm
COMMAND_A:          065E DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMAND_B:          066D DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
COMMAND_F:          0679 DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
COMMAND_I:          0697 DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
COMMAND_L:          06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
COMMAND_M:          06AC DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
COMMAND_P:          06B5 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
COMMAND_Q:          06BE DEFINED AT LINE 904 IN MAIN.asm
COMMAND_R:          06C7 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
COMMAND_V:          06D6 DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
WORDS:              06EB DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
NUMBERS:            06EB DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
BYTES:              06F0 DEFINED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
CHARS:              06F0 DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
BYTES1:             06F3 DEFINED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
COMMENT:            06F8 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
SEMICOLON:          0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         0701 DEFINED AT LINE 959 IN MAIN.asm
CREATEFUNC0:        071C DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
CREATEFUNC1:        0734 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
CREATEFUNC2:        0747 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 999 IN MAIN.asm
CREATEFUNC2A:       0766 DEFINED AT LINE 1029 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
CREATEFUNC3:        0775 DEFINED AT LINE 1041 IN MAIN.asm
                    > USED AT LINE 1051 IN MAIN.asm
CREATEFUNC4:        0780 DEFINED AT LINE 1052 IN MAIN.asm
CREATEFUNC5:        0781 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
COMMA:              079D DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            079D DEFINED AT LINE 1078 IN MAIN.asm
DISCARD1:           07AA DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
DIV:                07AC DEFINED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
DECIMAL:            07BD DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
DECIMAL1:           07C0 DEFINED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
HEXADECIMAL:        07C5 DEFINED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
DOT:                07CB DEFINED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
DOTARRAY:           07DD DEFINED AT LINE 32
                    > USED AT LINE 1113 IN MAIN.asm
DOTARRAYM_1597S1123: 07EB DEFINED AT LINE 39
                    > USED AT LINE 35
DOTNUMBER:          0825 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERDEC:          082C DEFINED AT LINE 1137 IN MAIN.asm
BUFFERDEC0:         0846 DEFINED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1141 IN MAIN.asm
BUFFERDEC1:         0856 DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
BUFFERDEC2:         0876 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
BUFFERDEC3:         0878 DEFINED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
BUFFERDEC4:         0888 DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
BUFFERDEC5:         0889 DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
BUFFERHEX:          0892 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
BUFFERHEX1:         08B3 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
BUFFERHEX2:         08BC DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
DOTSTRING:          08CA DEFINED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
DOTSTRING0:         08D1 DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
DOTSTRING1:         08D7 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
DOTCHAR:            08E4 DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
DOTXCHARS:          08E9 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
DOTXCHARS0:         08EA DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
DOTXCHARS1:         08F3 DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
DOTXCHARS2:         08FB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
DIVIDE:             0905 DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
DIVIDE1:            090A DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
DIVIDE2:            0917 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
DIVIDE3:            0918 DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
EQUALS:             091E DEFINED AT LINE 1319 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          0926 DEFINED AT LINE 1325 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         092F DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           0934 DEFINED AT LINE 1340 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0939 DEFINED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
TRUE1:              093C DEFINED AT LINE 1348 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
NULL1:              0942 DEFINED AT LINE 1352 IN MAIN.asm
FALSE1:             0942 DEFINED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
ERROR1:             0948 DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
FLUSH:              094F DEFINED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
FOREACH:            0954 DEFINED AT LINE 32
                    > USED AT LINE 856 IN MAIN.asm
FOREACHM_1827S1371: 0962 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            09A1 DEFINED AT LINE 32
                    > USED AT LINE 860 IN MAIN.asm
FUNCSRCM_1842S1387: 09AD DEFINED AT LINE 39
                    > USED AT LINE 35
FZ:                 09DC DEFINED AT LINE 1398 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
CARET:              09E9 DEFINED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09E9 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09EA DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
GO2:                09F0 DEFINED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
GOBLOCK:            09FB DEFINED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
GOBLOCK2:           0A20 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
GOBLOCK3:           0A2A DEFINED AT LINE 1448 IN MAIN.asm
GOFUNC:             0A2E DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
GOFUNC1:            0A47 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1481 IN MAIN.asm
GOFUNC2:            0A4D DEFINED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
GOFUNC3:            0A58 DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
GOFUNC4:            0A70 DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
GOFUNC5:            0A73 DEFINED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
GOFUNC6:            0A76 DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
GOFUNC7:            0A79 DEFINED AT LINE 1511 IN MAIN.asm
GOFUNC8:            0A7D DEFINED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
DOLLAR:             0A88 DEFINED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A88 DEFINED AT LINE 1526 IN MAIN.asm
HEXNUM1:            0A8B DEFINED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
HEXNUM2:            0A93 DEFINED AT LINE 1534 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
UPCASE:             0AA5 DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0AAA DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0AAF DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
QUESTION:           0ABC DEFINED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0ABC DEFINED AT LINE 1569 IN MAIN.asm
IFTE:               0AC8 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
IFTE1:              0AC9 DEFINED AT LINE 1581 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
INPUT:              0AD5 DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
KEY:                0AE0 DEFINED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
LITERAL:            0AE9 DEFINED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
OUTPUT:             0AF2 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
MAP:                0AFB DEFINED AT LINE 32
                    > USED AT LINE 893 IN MAIN.asm
MAPM_2081S1638:     0B08 DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B3F DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B3F DEFINED AT LINE 1652 IN MAIN.asm
MUL2:               0B41 DEFINED AT LINE 1655 IN MAIN.asm
MUL3:               0B49 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
NUM:                0B5B DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B64 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
NUM1:               0B65 DEFINED AT LINE 1681 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
NUM2:               0B7D DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
NUM3:               0B88 DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
RANGESRC:           0B8B DEFINED AT LINE 32
                    > USED AT LINE 918 IN MAIN.asm
RANGESRCM_2153S1713: 0B9A DEFINED AT LINE 39
                    > USED AT LINE 35
RPAREN:             0C0D DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0C15 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0C1D DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1748 IN MAIN.asm
SHIFTLEFT2:         0C1E DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
SHIFTRIGHT:         0C25 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0C2D DEFINED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
SHIFTRIGHT2:        0C31 DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
DQUOTE:             0C38 DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0C38 DEFINED AT LINE 1775 IN MAIN.asm
STRING1:            0C41 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
STRING2:            0C44 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1781 IN MAIN.asm
STRING3:            0C4D DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1789 IN MAIN.asm
MINUS:              0C60 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0C6C DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
SUB1:               0C76 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
PRINTCHARS:         0C7F DEFINED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
PRINTCHARS1:        0C86 DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
PRINTCHARS2:        0C8C DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
RECUR:              0C91 DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
REMAIN:             0C97 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
CONSTBUFSTART:      0C9D DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
CONSTHEAPSTART:     0CA2 DEFINED AT LINE 1865 IN MAIN.asm
CONSTTIBSTART:      0CA7 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
VARBUFPTR:          0CAC DEFINED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
VARHEAPPTR:         0CB5 DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
VARTIBPTR:          0CBE DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
VARIABLE:           0CC7 DEFINED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
CONSTANT:           0CCA DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
FILTER:             0CCD DEFINED AT LINE 1899 IN MAIN.asm
FLUSHBUFFER:        0CCF DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
JUMPTABLE:          0CE6 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
                    > USED AT LINE 1111 IN MAIN.asm
JUMPTABLE0:         0CE8 DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
JUMPTABLE1:         0CF5 DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
JUMPTABLE2:         0CF6 DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
PRTSTR0:            0CFC DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
PRTSTR:             0D00 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
NESTING:            0D05 DEFINED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
NESTING0:           0D0F DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
NESTING1A:          0D16 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
NESTING1:           0D19 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1975 IN MAIN.asm
NESTING2:           0D28 DEFINED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
NESTING3:           0D2A DEFINED AT LINE 1996 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
NESTING4:           0D35 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2000 IN MAIN.asm
PROMPT:             0D37 DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
CRLF:               0D40 DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
PRINTSTR:           0D47 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
TITLESTR:           0D4E DEFINED AT LINE 2026 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
INIT:               0D62 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
INIT1:              0D6A DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
WARMINIT:           0D72 DEFINED AT LINE 2041 IN MAIN.asm
COLDBOOT0:          0D85 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
COLDINIT:           0D8F DEFINED AT LINE 2054 IN MAIN.asm
COLDBOOT1:          0DA0 DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
COLDSTART:          0DAD DEFINED AT LINE 2072 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
START:              0DB6 DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 7
START1:             0DBC DEFINED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
INTERPRET:          0DC2 DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2248 IN MAIN.asm
INTERPRET2:         0DD1 DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
INTERPRET3:         0DD9 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
INTERPRET4:         0DE4 DEFINED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
INTERPRET5:         0DE9 DEFINED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
INTERPRET5A:        0E07 DEFINED AT LINE 2153 IN MAIN.asm
INTERPRET6:         0E09 DEFINED AT LINE 2158 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
INTERPRET7:         0E17 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
INTERPRET8:         0E2A DEFINED AT LINE 2183 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
NEXT:               0E45 DEFINED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
NEXT1:              0E56 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
EXIT:               0E5D DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
RUN:                0E61 DEFINED AT LINE 2217 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
ERROR:              0E65 DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
BACKSPACE_:         0E78 DEFINED AT LINE 2227 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
EDIT_:              0E88 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
REEDIT_:            0EA0 DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
PRINTSTACK_:        0EA3 DEFINED AT LINE 2245 IN MAIN.asm
F1:                 0EAD DEFINED AT LINE 10
                    > USED AT LINE 862 IN MAIN.asm
F2:                 0EAD DEFINED AT LINE 11
                    > USED AT LINE 864 IN MAIN.asm
F3:                 0EAD DEFINED AT LINE 12
                    > USED AT LINE 866 IN MAIN.asm
F4:                 0EAD DEFINED AT LINE 13
                    > USED AT LINE 868 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2160 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
                    > USED AT LINE 2185 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2056 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2187 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2068 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 732 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
VPOINTER:           23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
VREMAIN:            23F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1857 IN MAIN.asm
VSAVEDIP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2190 IN MAIN.asm
VSAVEDSP:           23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
VSAVEDNEXT:         23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
VSAVEDBP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1461 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
TBPTR:              2406 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           2408 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
HEAP:               241C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
