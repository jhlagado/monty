0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 F9 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   85 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 23            LD   de,(vPointer)   
0208   21 F8 23               LD   hl,vPointer   
020B   C3 AB 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 75 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 AC 04               JP   percent   
021C                RBRACE_:      
021C   C3 C5 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 92 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 32 0C               JP   caret   
0228                COMMA_:      
0228   C3 F3 0A               JP   comma   
022B                DQUOTE_:      
022B   C3 92 04               JP   dquote   
022E                GRAVE_:      
022E   C3 7C 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 F3 0A               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD 07 0D               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 23               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 23            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 A4 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 23               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 23                  LD   h,msb(vars)   
02BA   22 F8 23               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 23               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 23               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 23               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 23               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 33 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 33 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD D1 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 A4 0F               JP   error   
0416                LAMBDA2:      
0416   CD 07 0D               CALL   parseBlock   
0419   CD 71 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 23            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                GRAVE:       
047C                PRINTSTRING:      
047C   03                     INC   bc   ; move to first char
047D   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0481   18 03                  JR   printString1   
0483                PRINTSTRING0:      
0483   12                     LD   (de),a   ; a -> buffer*
0484   13                     INC   de   ; string*++,
0485   03                     INC   bc   
0486                PRINTSTRING1:      
0486   0A                     LD   a,(bc)   ; a <- string*
0487   FE 60                  CP   "`"   ; if ` exit loop
0489   20 F8                  JR   nz,printString0   
048B                             ; inc bc
048B   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
048F   C3 2E 0B               JP   dotNext   
0492                             ; string                        ;38
0492                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0492                QUOTE:       
0492                DQUOTE:      
0492                STRING:      
0492   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0495   E5                     PUSH   hl   ; save start of string
0496   0A                     LD   a,(bc)   
0497   5F                     LD   e,a   ; e = matching terminator
0498   03                     INC   bc   ; point to next char
0499   18 03                  JR   string2   
049B                STRING1:      
049B   77                     LD   (hl),a   
049C   23                     INC   hl   ; increase count
049D   03                     INC   bc   ; point to next char
049E                STRING2:      
049E   0A                     LD   a,(bc)   
049F   BB                     CP   e   ; is it the string terminator
04A0   28 02                  JR   z,string3   
04A2   18 F7                  JR   string1   
04A4                STRING3:      
04A4   AF                     XOR   a   ; write NUL to terminate string
04A5   77                     LD   (hl),a   ; hl = end of string
04A6   23                     INC   hl   
04A7   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04AA   DD E9                  JP   (ix)   
04AC                             ; %a .. %z                      43
04AC                             ; -- value
04AC                             ; returns value of arg
04AC                PERCENT:      
04AC                ARG:         
04AC   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04AF   FD 56 05               LD   d,(iy+5)   
04B2   EB                     EX   de,hl   
04B3   7D                     LD   a,l   ; arg_list* == null, skip
04B4   B4                     OR   h   
04B5   28 1A                  JR   z,arg0a   
04B7   23                     INC   hl   ; a = num_args, hl = arg_list*
04B8   7E                     LD   a,(hl)   
04B9   23                     INC   hl   
04BA   B7                     OR   a   
04BB   28 14                  JR   z,arg0a   ; num_args == 0, skip
04BD   5F                     LD   e,a   ; e = a = num_args
04BE   03                     INC   bc   ; a = next char = dollar_name
04BF   0A                     LD   a,(bc)   
04C0   C5                     PUSH   bc   ; save IP
04C1   43                     LD   b,e   ; b = e = num_args
04C2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04C5   FD 56 03               LD   d,(iy+3)   
04C8                ARG0:        
04C8   1B                     DEC   de   ; a = dollar_name, de = next arg*
04C9   1B                     DEC   de   
04CA   BE                     CP   (hl)   
04CB   28 09                  JR   z,arg1   
04CD   23                     INC   hl   ; hl = next arg_list*
04CE   10 F8                  DJNZ   arg0   
04D0   C1                     POP   bc   ; no match, restore IP
04D1                ARG0A:       
04D1   11 00 00               LD   de,0   ; return 0
04D4   18 08                  JR   arg1a   
04D6                ARG1:        
04D6   C1                     POP   bc   ; restore IP
04D7   EB                     EX   de,hl   ; hl = arg*
04D8   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
04DB   5E                     LD   e,(hl)   
04DC   23                     INC   hl   
04DD   56                     LD   d,(hl)   ; de = arg
04DE                ARG1A:       
04DE   D5                     PUSH   de   ; push arg
04DF   DD E9                  JP   (ix)   
04E1                             ;********************** PAGE 3,4 END *********************************************
04E1                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 3B 0E               CALL   xjumpTable   
0503   61                     DB   "a"   ; .a print array
0504   AB 0A                  DW   dotArray   
0506   63                     DB   "c"   ; .c print char
0507   C9 05                  DW   dotChar   
0509   73                     DB   "s"   ; .s print string
050A   B4 05                  DW   dotString_   
050C   00                     DB   NUL   ; .  print number
050D                             ; /bd buffer decimal
050D                             ; value --
050D                DOTNUMBER_:      
050D   3A E8 23               LD   a,(vNumBase)   
0510   FE 10                  CP   16   
0512   CA 7E 05               JP   z,dotHex   ; else falls through
0515   C3 18 05               JP   dotDec   
0518                             ; print decimal                 ; 70
0518                             ; value --
0518                DOTDEC:      
0518   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
051C   D9                     EXX      
051D   E1                     POP   hl   ; hl = value
051E   3A E6 23               LD   a,(vDataWidth)   
0521   3D                     DEC   a   
0522   20 02                  JR   nz,dotDecX   
0524   26 00                  LD   h,0   
0526                DOTDECX:      
0526   CD 35 05               CALL   dotDec0   
0529   D9                     EXX      ; de = buffer*' bc = IP
052A   3E 20                  LD   a," "   ; append space to buffer
052C   12                     LD   (de),a   
052D   13                     INC   de   ; string*++,
052E   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0532   C3 2E 0B               JP   dotNext   
0535                             ; hl = value
0535                             ; de' = buffer*
0535                             ; a, bc, de, hl destroyed
0535                DOTDEC0:      
0535   CB 7C                  BIT   7,h   
0537   28 0C                  JR   z,dotDec1   
0539   D9                     EXX      
053A   3E 2D                  LD   a,"-"   
053C   12                     LD   (de),a   
053D   13                     INC   de   
053E   D9                     EXX      
053F   AF                     XOR   a   
0540   95                     SUB   l   
0541   6F                     LD   l,a   
0542   9F                     SBC   a,a   
0543   94                     SUB   h   
0544   67                     LD   h,a   
0545                DOTDEC1:      
0545   0E 00                  LD   c,0   ; leading zeros flag = false
0547   11 F0 D8               LD   de,-10000   
054A   CD 65 05               CALL   dotDec2   
054D   11 18 FC               LD   de,-1000   
0550   CD 65 05               CALL   dotDec2   
0553   11 9C FF               LD   de,-100   
0556   CD 65 05               CALL   dotDec2   
0559   1E F6                  LD   e,-10   
055B   CD 65 05               CALL   dotDec2   
055E   0C                     INC   c   ; flag = true for at least digit
055F   1E FF                  LD   e,-1   
0561   CD 65 05               CALL   dotDec2   
0564   C9                     RET      
0565                DOTDEC2:      
0565   06 2F                  LD   b,"0"-1   
0567                DOTDEC3:      
0567   04                     INC   b   
0568   19                     ADD   hl,de   
0569   38 FC                  JR   c,dotDec3   
056B   ED 52                  SBC   hl,de   
056D   3E 30                  LD   a,"0"   
056F   B8                     CP   b   
0570   20 05                  JR   nz,dotDec4   
0572   AF                     XOR   a   
0573   B1                     OR   c   
0574   C8                     RET   z   
0575   18 01                  JR   dotDec5   
0577                DOTDEC4:      
0577   0C                     INC   c   
0578                DOTDEC5:      
0578   78                     LD   a,b   
0579   D9                     EXX      
057A   12                     LD   (de),a   
057B   13                     INC   de   
057C   D9                     EXX      
057D   C9                     RET      
057E                             ; buffer hex                    37
057E                             ; value --
057E                DOTHEX:      
057E   E1                     POP   hl   ; hl = value
057F   ED 5B EC 23            LD   de,(vBufPtr)   
0583   3E 24                  LD   a,"$"   ; # prefix
0585   12                     LD   (de),a   
0586   13                     INC   de   ; string*++,
0587   3A E6 23               LD   a,(vDataWidth)   
058A   3D                     DEC   a   
058B   28 04                  JR   z,dotHex0   
058D   7C                     LD   a,h   
058E   CD A0 05               CALL   dotHex1   
0591                DOTHEX0:      
0591   7D                     LD   a,l   
0592   CD A0 05               CALL   dotHex1   
0595   3E 20                  LD   a," "   ; append space to buffer
0597   12                     LD   (de),a   
0598   13                     INC   de   ; string*++,
0599   ED 53 EC 23            LD   (vBufPtr),de   
059D   C3 2E 0B               JP   dotNext   
05A0                DOTHEX1:      
05A0   F5                     PUSH   af   
05A1   1F                     RRA      
05A2   1F                     RRA      
05A3   1F                     RRA      
05A4   1F                     RRA      
05A5   CD A9 05               CALL   dotHex2   
05A8   F1                     POP   af   
05A9                DOTHEX2:      
05A9   E6 0F                  AND   0x0F   
05AB   C6 90                  ADD   a,0x90   
05AD   27                     DAA      
05AE   CE 40                  ADC   a,0x40   
05B0   27                     DAA      
05B1   12                     LD   (de),a   
05B2   13                     INC   de   ; string*++,
05B3   C9                     RET      
05B4                             ; /bs buffered string
05B4                             ; string* --
05B4                DOTSTRING_:      
05B4   E1                     POP   hl   ; hl = string*
05B5   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
05B9   18 03                  JR   dotString1   
05BB                DOTSTRING0:      
05BB   12                     LD   (de),a   ; a -> buffer*
05BC   13                     INC   de   ; string*++,
05BD   23                     INC   hl   
05BE                DOTSTRING1:      
05BE   7E                     LD   a,(hl)   ; a <- string*
05BF   B7                     OR   a   ; if NUL exit loop
05C0   20 F9                  JR   nz,dotString0   
05C2   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
05C6   C3 2E 0B               JP   dotNext   
05C9                             ; .c print char
05C9                             ; char --
05C9                DOTCHAR:      
05C9   E1                     POP   hl   ; a = char
05CA   7D                     LD   a,l   
05CB   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
05CF   12                     LD   (de),a   
05D0   13                     INC   de   
05D1   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
05D5   C3 2E 0B               JP   dotNext   
05D8                             ;********************** PAGE 5 END *********************************************
05D8                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 43 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 13 0E               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   39                     DB   lsb(command_b_)   
060D   E1                     DB   lsb(command_nop_)   
060E   49                     DB   lsb(command_d_)   
060F   E1                     DB   lsb(command_nop_)   
0610   53                     DB   lsb(command_f_)   
0611   E1                     DB   lsb(command_nop_)   
0612   72                     DB   lsb(command_h_)   
0613   7C                     DB   lsb(command_i_)   
0614   E1                     DB   lsb(command_nop_)   
0615   E7                     DB   lsb(key_)   
0616   E1                     DB   lsb(command_nop_)   
0617   86                     DB   lsb(command_m_)   
0618   E1                     DB   lsb(command_nop_)   
0619   EB                     DB   lsb(output_)   
061A   90                     DB   lsb(command_p_)   
061B   97                     DB   lsb(command_q_)   
061C   A1                     DB   lsb(command_r_)   
061D   B1                     DB   lsb(command_s_)   
061E   EF                     DB   lsb(true_)   
061F   E1                     DB   lsb(command_nop_)   
0620   C4                     DB   lsb(command_v_)   
0621   D7                     DB   lsb(command_w_)   
0622   F3                     DB   lsb(xor_)   
0623   E1                     DB   lsb(command_nop_)   
0624   E1                     DB   lsb(command_nop_)   
0625   E3                     DB   lsb(div_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   CD 3B 0E               CALL   xjumpTable   
0629   62                     DB   "b"   ; /ab absolute
062A   F7 06                  DW   absolute   
062C   64                     DB   "d"   ; /ad address of
062D   54 0B                  DW   addrOf   
062F   69                     DB   "i"   ; /ad address of
0630   2D 08                  DW   arrayIter   
0632   73                     DB   "s"   ; /as array size
0633   5E 07                  DW   arraySize   
0635   00                     DB   NUL   
0636   C3 31 07               JP   error1   
0639                COMMAND_B_:      
0639   CD 3B 0E               CALL   xjumpTable   
063C   62                     DB   "b"   ; /bb bye bye cold boot
063D   F0 0E                  DW   coldStart   
063F   6D                     DB   "m"   ; /bm byte mode
0640   4C 07                  DW   byteMode   
0642   72                     DB   "r"   ; /br break from loop
0643   04 07                  DW   break   
0645   00                     DB   NUL   
0646   C3 4C 07               JP   byteMode   ; /b byte mode
0649                COMMAND_D_:      
0649   CD 3B 0E               CALL   xjumpTable   
064C   62                     DB   "b"   ; /db decimal base
064D   29 07                  DW   decBase   
064F   00                     DB   NUL   
0650   C3 29 07               JP   decBase   ; /d decimal
0653                COMMAND_F_:      
0653   CD 3B 0E               CALL   xjumpTable   
0656   64                     DB   "d"   ; /fd fold
0657   D4 09                  DW   fold   
0659   65                     DB   "e"   ; /fe forEach
065A   26 0A                  DW   forEach   
065C   73                     DB   "s"   ; /fs funcSrc
065D   72 0A                  DW   funcSrc   
065F   74                     DB   "t"   ; /ft filter
0660   76 09                  DW   filter   
0662   31                     DB   "1"   
0663   ED 0F                  DW   f1   
0665   32                     DB   "2"   
0666   ED 0F                  DW   f2   
0668   33                     DB   "3"   
0669   ED 0F                  DW   f3   
066B   34                     DB   "4"   
066C   ED 0F                  DW   f4   
066E   00                     DB   NUL   
066F   C3 A2 03               JP   false1   
0672                COMMAND_H_:      
0672   CD 3B 0E               CALL   xjumpTable   
0675   62                     DB   "b"   ; /hb hex base
0676   37 07                  DW   hexBase   
0678   00                     DB   NUL   
0679   C3 37 07               JP   hexBase   ; /h hex base
067C                             ; 6
067C                COMMAND_I_:      
067C   CD 3B 0E               CALL   xjumpTable   
067F   6E                     DB   "n"   ; /in input
0680   1E 07                  DW   input   
0682   00                     DB   NUL   
0683   C3 31 07               JP   error1   
0686                COMMAND_M_:      
0686   CD 3B 0E               CALL   xjumpTable   
0689   70                     DB   "p"   ; /mp map
068A   34 09                  DW   map   
068C   00                     DB   NUL   
068D   C3 31 07               JP   error1   
0690                             ; 4
0690                COMMAND_P_:      
0690   CD 3B 0E               CALL   xjumpTable   
0693   00                     DB   NUL   
0694   C3 31 07               JP   error1   
0697                             ; 6
0697                COMMAND_Q_:      
0697   CD 3B 0E               CALL   xjumpTable   
069A   74                     DB   "t"   ; /qt quit
069B   54 07                  DW   quit   
069D   00                     DB   NUL   
069E   C3 31 07               JP   error1   
06A1                COMMAND_R_:      
06A1   CD 3B 0E               CALL   xjumpTable   
06A4   63                     DB   "c"   ; /rc tail call optimisation
06A5   83 07                  DW   recur   
06A7   65                     DB   "e"   ; /re remainder
06A8   89 07                  DW   remain   
06AA   67                     DB   "g"   ; /rg range src
06AB   B1 07                  DW   rangeSrc   
06AD   00                     DB   NUL   
06AE   C3 31 07               JP   error1   
06B1                COMMAND_S_:      
06B1   CD 3B 0E               CALL   xjumpTable   
06B4   62                     DB   "b"   
06B5   F5 0A                  DW   stringBegin   
06B7   65                     DB   "e"   
06B8   FD 0A                  DW   stringEnd   
06BA   69                     DB   "i"   
06BB   AE 08                  DW   stringIter   
06BD   73                     DB   "s"   
06BE   2C 0B                  DW   stringSize   
06C0   00                     DB   NUL   
06C1   C3 31 07               JP   error1   
06C4                COMMAND_V_:      
06C4   CD 3B 0E               CALL   xjumpTable   
06C7   68                     DB   "h"   
06C8   99 07                  DW   varHeapPtr   
06CA   74                     DB   "t"   
06CB   A2 07                  DW   varTIBPtr   
06CD   48                     DB   "H"   
06CE   8F 07                  DW   constHeapStart   
06D0   54                     DB   "T"   
06D1   94 07                  DW   constTIBStart   
06D3   00                     DB   NUL   
06D4   C3 31 07               JP   error1   
06D7                COMMAND_W_:      
06D7   CD 3B 0E               CALL   xjumpTable   
06DA   6D                     DB   "m"   ; /wm word mode
06DB   3D 07                  DW   wordMode   
06DD   00                     DB   NUL   
06DE   C3 3D 07               JP   wordMode   ; /w word mode
06E1                             ; 2
06E1                COMMAND_NOP_:      
06E1   DD E9                  JP   (ix)   
06E3                             ; 3
06E3                DIV_:        
06E3   00                     DB   NUL   
06E4   C3 22 04               JP   div   
06E7                KEY_:        
06E7   00                     DB   NUL   
06E8   C3 71 07               JP   key   
06EB                OUTPUT_:      
06EB   00                     DB   NUL   
06EC   C3 7A 07               JP   output   
06EF                TRUE_:       
06EF   00                     DB   NUL   
06F0   C3 9C 03               JP   true1   
06F3                XOR_:        
06F3   00                     DB   NUL   
06F4   C3 66 07               JP   xor   
06F7                             ; 14
06F7                             ; /ab absolute
06F7                             ; num -- num
06F7                ABSOLUTE:      
06F7   E1                     POP   hl   
06F8   CB 7C                  BIT   7,h   
06FA   C8                     RET   z   
06FB   AF                     XOR   a   
06FC   95                     SUB   l   
06FD   6F                     LD   l,a   
06FE   9F                     SBC   a,a   
06FF   94                     SUB   h   
0700   67                     LD   h,a   
0701   E5                     PUSH   hl   
0702   DD E9                  JP   (ix)   
0704                             ; 8
0704                             ; 13
0704                             ; /br break from loop
0704                             ; --
0704                BREAK:       
0704   E1                     POP   hl   ; hl = condition, break if false
0705   7D                     LD   a,l   
0706   B4                     OR   h   
0707   28 02                  JR   z,break1   
0709   DD E9                  JP   (ix)   
070B                BREAK1:      
070B   FD 5D                  LD   e,iyl   ; get block* just under stack frame
070D   FD 54                  LD   d,iyh   
070F   21 08 00               LD   hl,8   
0712   19                     ADD   hl,de   
0713   23                     INC   hl   
0714   23                     INC   hl   
0715   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0718   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
071B   C3 C5 0B               JP   blockEnd   
071E                             ; 11
071E                             ; Z80 port input
071E                             ; port -- value
071E                INPUT:       
071E   E1                     POP   hl   
071F   59                     LD   e,c   ; save IP
0720   4D                     LD   c,l   
0721   ED 68                  IN   l,(c)   
0723   26 00                  LD   h,0   
0725   4B                     LD   c,e   ; restore IP
0726   E5                     PUSH   hl   
0727   DD E9                  JP   (ix)   
0729                             ; 5
0729                DECBASE:      
0729   21 0A 00               LD   hl,10   
072C                DECBASE1:      
072C   22 E8 23               LD   (vNumBase),hl   
072F   DD E9                  JP   (ix)   
0731                             ; 3
0731                ERROR1:      
0731   21 01 00               LD   hl,1   ; error 1: unknown command
0734   C3 A4 0F               JP   error   
0737                             ; 3
0737                HEXBASE:      
0737   21 10 00               LD   hl,16   
073A   C3 2C 07               JP   decBase1   
073D                             ; 4
073D                             ; /w
073D                WORDMODE:      
073D   21 02 00               LD   hl,2   
0740   C3 4F 07               JP   byteMode1   
0743                             ; 8
0743                             ; //
0743                COMMENT:      
0743   03                     INC   bc   ; point to next char
0744   0A                     LD   a,(bc)   
0745   FE 20                  CP   " "   ; terminate on any char less than SP
0747   30 FA                  JR   nc,comment   
0749   0B                     DEC   bc   
074A   DD E9                  JP   (ix)   
074C                             ; 6
074C                             ; /b
074C                BYTEMODE:      
074C   21 01 00               LD   hl,1   
074F                BYTEMODE1:      
074F   22 E6 23               LD   (vDataWidth),hl   
0752   DD E9                  JP   (ix)   
0754                             ; 10
0754                             ; /qt
0754                             ; bool --
0754                QUIT:        
0754   E1                     POP   hl   ; hl = condition, exit if true
0755   7D                     LD   a,l   
0756   B4                     OR   h   
0757   20 02                  JR   nz,quit1   
0759   DD E9                  JP   (ix)   
075B                QUIT1:       
075B   C3 C5 0B               JP   blockEnd   
075E                             ; 10
075E                             ; /as size of an array, num elements, ignores vDataWidth :-/
075E                             ; array* -- num
075E                ARRAYSIZE:      
075E   E1                     POP   hl   
075F   2B                     DEC   hl   ; msb size
0760   56                     LD   d,(hl)   
0761   2B                     DEC   hl   ; lsb size
0762   5E                     LD   e,(hl)   
0763   D5                     PUSH   de   
0764   DD E9                  JP   (ix)   
0766                             ; 12
0766                XOR:         
0766   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0767                XOR1:        
0767   E1                     POP   hl   
0768   7B                     LD   a,e   
0769   AD                     XOR   l   
076A   6F                     LD   l,a   
076B   7A                     LD   a,d   
076C   AC                     XOR   h   
076D   67                     LD   h,a   
076E   E5                     PUSH   hl   
076F   DD E9                  JP   (ix)   
0771                             ; 2
0771                             ; key:
0771                             ;     jr key
0771                             ; /k                              6
0771                KEY:         
0771   CD 81 00               CALL   getchar   
0774   26 00                  LD   h,0   
0776   6F                     LD   l,a   
0777   E5                     PUSH   hl   
0778   DD E9                  JP   (ix)   
077A                             ;********************** PAGE 6 END *********************************************
077A                             ;********************** PAGE 7 BEGIN *********************************************
077A                             ; /o Z80 port output               9
077A                             ; value port --
077A                OUTPUT:      
077A   E1                     POP   hl   
077B   59                     LD   e,c   ; save IP
077C   4D                     LD   c,l   
077D   E1                     POP   hl   
077E   ED 69                  OUT   (c),l   
0780   4B                     LD   c,e   ; restore IP
0781   DD E9                  JP   (ix)   
0783                RECUR:       
0783   E1                     POP   hl   
0784   22 F2 23               LD   (vRecur),hl   
0787   DD E9                  JP   (ix)   
0789                REMAIN:      
0789   2A FA 23               LD   hl,(vRemain)   
078C   E5                     PUSH   hl   
078D   DD E9                  JP   (ix)   
078F                CONSTHEAPSTART:      
078F   11 22 24               LD   de,HEAP   
0792   18 1A                  JR   constant   
0794                CONSTTIBSTART:      
0794   11 00 21               LD   de,TIB   
0797   18 15                  JR   constant   
0799                VARHEAPPTR:      
0799   ED 5B F0 23            LD   de,(vHeapPtr)   
079D   21 F0 23               LD   hl,vHeapPtr   
07A0   18 09                  JR   variable   
07A2                VARTIBPTR:      
07A2   ED 5B EA 23            LD   de,(vTIBPtr)   
07A6   21 EA 23               LD   hl,vTIBPtr   
07A9   18 00                  JR   variable   
07AB                VARIABLE:      
07AB   22 F8 23               LD   (vPointer),hl   
07AE                CONSTANT:      
07AE   D5                     PUSH   de   
07AF   DD E9                  JP   (ix)   
07B1                             ;********************** PAGE 7 END *********************************************
07B1                             ;*******************************************************************
07B1                             ; Monty implementations
07B1                             ;*******************************************************************
07B1                             ; /rg rangeSrc
07B1                             ; begin end step -- src
07B1                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07B1                RANGESRC:      ; range source: begin, end, step, local: L
07B1   CD 32 0C               CALL   go   
07B4   00 00                  DW   NUL   
07B6   C0 07                  DW   rangeSrcM_1816S1396   
07B8   BA 07                  DW   $+2   
07BA   01                     DB   1   
07BB   04 62 65 73 4C         .PSTR   "besL"   
07C0                RANGESRCM_1816S1396:      
07C0   7B                     DB   "{"   
07C1   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07CC   5C 6B 74 7B            DB   "\\kt{"   
07D0   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07D8   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07DE   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07E6   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07EE   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07F8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0800   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0807   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
081B   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0823   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
082A   7D                     DB   "}"   
082B   7D                     DB   "}"   
082C   00                     DB   0   
082D                             ; /ai arrayIter
082D                             ; array* -- src
082D                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
082D                ARRAYITER:      
082D   CD 32 0C               CALL   go   
0830   00 00                  DW   NUL   
0832   3A 08                  DW   arrayIterM_1835S1416   
0834   36 08                  DW   $+2   
0836   01                     DB   1   
0837   02 61 4C               .PSTR   "aL"   
083A                ARRAYITERM_1835S1416:      
083A   7B                     DB   "{"   
083B   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
084B   5C 6B 74 7B            DB   "\\kt{"   
084F   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0857   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
085D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0865   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
086D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0874   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
087C   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0885   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
089C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08A4   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08AB   7D                     DB   "}"   
08AC   7D                     DB   "}"   
08AD   00                     DB   0   
08AE                             ; /si stringIter
08AE                             ; string* -- src
08AE                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08AE                STRINGITER:      
08AE   CD 32 0C               CALL   go   
08B1   00 00                  DW   NUL   
08B3   BB 08                  DW   stringIterM_1854S1436   
08B5   B7 08                  DW   $+2   
08B7   01                     DB   1   
08B8   02 73 4C               .PSTR   "sL"   
08BB                STRINGITERM_1854S1436:      
08BB   7B                     DB   "{"   
08BC   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08C6   5C 6B 74 7B            DB   "\\kt{"   
08CA   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08D2   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08D9   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08E1   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08E9   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08F0   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
08FF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0907   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
090E   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0922   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
092A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0931   7D                     DB   "}"   
0932   7D                     DB   "}"   
0933   00                     DB   0   
0934                             ; /mp map
0934                             ; src func -- src1
0934                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0934                MAP:         ; map: source, function
0934   CD 32 0C               CALL   go   
0937   00 00                  DW   NUL   
0939   41 09                  DW   mapM_1874S1458   
093B   3D 09                  DW   $+2   
093D   00                     DB   0   
093E   02 73 66               .PSTR   "sf"   
0941                MAPM_1874S1458:      
0941   7B                     DB   "{"   
0942   5C 6B 74 7B            DB   "\\kt{"   
0946   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
094E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0952   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0957   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0963   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
096C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0973   7D                     DB   "}"   
0974   7D                     DB   "}"   
0975   00                     DB   0   
0976                             ; /ft filter
0976                             ; src pred -- src1
0976                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0976                FILTER:      ; filter: source, predicate, local: T
0976   CD 32 0C               CALL   go   
0979   00 00                  DW   NUL   
097B   84 09                  DW   filterM_1888S1473   
097D   7F 09                  DW   $+2   
097F   01                     DB   1   
0980   03 73 70 54            .PSTR   "spT"   
0984                FILTERM_1888S1473:      
0984   7B                     DB   "{"   
0985   5B 30 5D 25 54 3D      DB   "[0]%T="   
098B   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
098F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0993   5B                     DB   "["   
0994   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09A1   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09A9   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09AD   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09B2   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09C8   3F 3F                  DB   "??"   
09CA   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09D1   7D                     DB   "}"   
09D2   7D                     DB   "}"   
09D3   00                     DB   0   
09D4                             ; /fd fold
09D4                             ; reducer is a function like: \\da00bbLi4u
09D4                             ; src init reducer -- src1
09D4                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09D4                FOLD:        ; src, init, reducer
09D4   CD 32 0C               CALL   go   
09D7   00 00                  DW   NUL   
09D9   E3 09                  DW   foldM_1907S1493   
09DB   DD 09                  DW   $+2   
09DD   01                     DB   1   
09DE   04 73 69 72 41         .PSTR   "sirA"   
09E3                FOLDM_1907S1493:      
09E3   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09E4   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09EB   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09EF   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09F3   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09F8   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A13   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A1C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A23   7D                     DB   "}"   
0A24   7D                     DB   "}"   
0A25   00                     DB   0   
0A26                             ; /fe forEach
0A26                             ; src proc --
0A26                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A26                FOREACH:      ; forEach: source, procedure, local: T
0A26   CD 32 0C               CALL   go   
0A29   00 00                  DW   NUL   
0A2B   34 0A                  DW   forEachM_1921S1508   
0A2D   2F 0A                  DW   $+2   
0A2F   01                     DB   1   
0A30   03 73 70 54            .PSTR   "spT"   
0A34                FOREACHM_1921S1508:      
0A34   7B                     DB   "{"   
0A35   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A3B   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A3F   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A47   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A4C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A5E   3F 3F                  DB   "??"   ; ifte:
0A60   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A69   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A70   7D                     DB   "}"   
0A71   00                     DB   0   
0A72                             ; ; /fs funcSrc
0A72                             ; ; func -- src
0A72                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A72                FUNCSRC:      ; :f func or block
0A72   CD 32 0C               CALL   go   
0A75   00 00                  DW   NUL   
0A77   7E 0A                  DW   funcSrcM_1935S1523   
0A79   7B 0A                  DW   $+2   
0A7B   00                     DB   0   
0A7C   01 66                  .PSTR   "f"   
0A7E                FUNCSRCM_1935S1523:      
0A7E   7B                     DB   "{"   
0A7F   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A83   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A8B   5C 64 74 7B            DB   "\\dt{"   
0A8F   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AA1   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0AA8   7D                     DB   "}"   
0AA9   7D                     DB   "}"   
0AAA   00                     DB   0   
0AAB                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0AAB                DOTARRAY:      
0AAB   CD 32 0C               CALL   go   
0AAE   00 00                  DW   NUL   
0AB0   B9 0A                  DW   dotArrayM_1945S1534   
0AB2   B4 0A                  DW   $+2   
0AB4   02                     DB   2   
0AB5   03 61 62 63            .PSTR   "abc"   
0AB9                DOTARRAYM_1945S1534:      
0AB9   7B                     DB   "{"   
0ABA   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AF1   7D                     DB   "}"   
0AF2   00                     DB   0   
0AF3                             ;*******************************************************************
0AF3                             ; unused opcodes (reserved)
0AF3                             ;*******************************************************************
0AF3                UNDERSCORE:      
0AF3                COMMA:       
0AF3   DD E9                  JP   (ix)   
0AF5                             ;*******************************************************************
0AF5                             ; implementations
0AF5                             ;*******************************************************************
0AF5                STRINGBEGIN:      
0AF5   21 FF FF               LD   hl,TRUE   ; string mode = true
0AF8   22 F6 23               LD   (vStrMode),hl   
0AFB   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0AFD                STRINGEND:      
0AFD   21 00 00               LD   hl,FALSE   ; string mode = false
0B00   22 F6 23               LD   (vStrMode),hl   
0B03   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
0B06   AF                     XOR   a   
0B07   77                     LD   (hl),a   
0B08   23                     INC   hl   ; hl = string_end*
0B09   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0B0D   11 00 22               LD   de,BUFFER   ; de = string*
0B10   B7                     OR   a   ; bc = size
0B11   ED 52                  SBC   hl,de   
0B13   44 4D                  LD   bc,hl   
0B15   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
0B18   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
0B19   D5                     PUSH   de   ; return hstring*
0B1A   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0B1C   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0B20   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0B24                STRINGEND1:      
0B24   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
0B27   22 EC 23               LD   (vBufPtr),hl   
0B2A   DD E9                  JP   (ix)   
0B2C                STRINGSIZE:      
0B2C   DD E9                  JP   (ix)   
0B2E                DOTNEXT:      
0B2E   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0B31   3C                     INC   a   
0B32   20 02                  JR   nz,dotNext1   
0B34   DD E9                  JP   (ix)   
0B36                DOTNEXT1:      
0B36   11 00 22               LD   de,BUFFER   
0B39   2A EC 23               LD   hl,(vBufPtr)   
0B3C   B7                     OR   a   ; hl = count, de = vHeapPtr
0B3D   ED 52                  SBC   hl,de   
0B3F   C3 48 0B               JP   dotNext3   
0B42                DOTNEXT2:      
0B42   1A                     LD   a,(de)   ; print char at char*
0B43   CD 85 00               CALL   putchar   
0B46   13                     INC   de   ; char*++
0B47   2B                     DEC   hl   ; count--
0B48                DOTNEXT3:      
0B48   7D                     LD   a,l   ; count == 0?
0B49   B4                     OR   h   
0B4A   20 F6                  JR   nz,dotNext2   ; if not loop
0B4C   21 00 22               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0B4F   22 EC 23               LD   (vBufPtr),hl   
0B52   DD E9                  JP   (ix)   
0B54                             ; /ad addrOf                    24
0B54                             ; char -- addr
0B54                ADDROF:      
0B54   E1                     POP   hl   ; a = char
0B55   7D                     LD   a,l   
0B56   FE 7B                  CP   "z"+1   ; if a > z then exit
0B58   30 19                  JR   nc,addrOf2   
0B5A   D6 41                  SUB   "A"   ; a - 65
0B5C   38 15                  JR   c,addrOf2   ; if < A then exit
0B5E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B60   38 06                  JR   c,addrOf1   
0B62   D6 06                  SUB   "a"-("Z"+1)   
0B64   FE 1A                  CP   "Z"-"A"+1   
0B66   38 0B                  JR   c,addrOf2   ; if < a then exit
0B68                ADDROF1:      
0B68   87                     ADD   a,a   ; double a
0B69   21 00 23               LD   hl,VARS   ; hl = VARS + a
0B6C   85                     ADD   a,l   
0B6D   6F                     LD   l,a   
0B6E   3E 00                  LD   a,0   
0B70   8C                     ADC   a,h   
0B71   67                     LD   h,a   
0B72   E5                     PUSH   hl   
0B73                ADDROF2:      
0B73   DD E9                  JP   (ix)   
0B75                             ;                               51
0B75                RBRACK:      
0B75                ARRAYEND:      
0B75   FD 54                  LD   d,iyh   ; de = BP
0B77   FD 5D                  LD   e,iyl   
0B79   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0B7D   62 6B                  LD   hl,de   ; hl = de = BP
0B7F   B7                     OR   a   
0B80   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B82   CB 3C                  SRL   h   ; 
0B84   CB 1D                  RR   l   
0B86   44 4D                  LD   bc,hl   ; bc = count
0B88   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B8B   71                     LD   (hl),c   ; write num items in length word
0B8C   23                     INC   hl   
0B8D   70                     LD   (hl),b   
0B8E   23                     INC   hl   ; hl = array[0], bc = count
0B8F                             ; de = BP, hl = array[0], bc = count
0B8F   18 15                  JR   arrayEnd3   
0B91                ARRAYEND1:      
0B91   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B94   77                     LD   (hl),a   ; write lsb of array item
0B95   23                     INC   hl   ; move to msb of array item
0B96   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0B99   3D                     DEC   a   
0B9A   28 05                  JR   z,arrayEnd2   
0B9C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B9F   77                     LD   (hl),a   ; write msb of array item
0BA0   23                     INC   hl   ; move to next word in array
0BA1                ARRAYEND2:      
0BA1   FD 2B                  DEC   iy   ; move to next word on stack
0BA3   FD 2B                  DEC   iy   
0BA5   0B                     DEC   bc   ; dec items count
0BA6                ARRAYEND3:      
0BA6   79                     LD   a,c   ; if not zero loop
0BA7   B0                     OR   b   
0BA8   20 E7                  JR   nz,arrayEnd1   
0BAA   EB                     EX   de,hl   ; de = end of array, hl = BP
0BAB   F9                     LD   sp,hl   ; sp = BP
0BAC   E1                     POP   hl   ; de = end of array, hl = old BP
0BAD   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0BAE   FD 62                  LD   iyh,d   
0BB0   FD 6B                  LD   iyl,e   
0BB2   D1                     POP   de   ; pop arg_list (discard)
0BB3   D1                     POP   de   ; pop first_arg* (discard)
0BB4   D1                     POP   de   ; pop IP (discard)
0BB5   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0BB9   13                     INC   de   
0BBA   13                     INC   de   
0BBB   D5                     PUSH   de   ; return array[0]
0BBC   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0BBF   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0BC3   DD E9                  JP   (ix)   
0BC5                             ;                               58
0BC5                RBRACE:      
0BC5                BLOCKEND:      
0BC5   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BC8   FD 56 01               LD   d,(iy+1)   
0BCB   ED 53 04 24            LD   (vTemp1),de   
0BCF   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BD2   FD 56 07               LD   d,(iy+7)   
0BD5   ED 53 06 24            LD   (vTemp2),de   
0BD9   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BDC   FD 56 03               LD   d,(iy+3)   
0BDF   EB                     EX   de,hl   
0BE0   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BE3   FD 56 01               LD   d,(iy+1)   
0BE6   13                     INC   de   ; for carry flag <=
0BE7   B7                     OR   a   
0BE8   ED 52                  SBC   hl,de   
0BEA   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BEC   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BEE   FD 5D                  LD   e,iyl   
0BF0   21 08 00               LD   hl,8   
0BF3   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BF4   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BF5   18 0C                  JR   blockEnd2   
0BF7                BLOCKEND1:      ; same scope
0BF7   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BFA   FD 56 03               LD   d,(iy+3)   
0BFD   EB                     EX   de,hl   
0BFE   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C00   FD 5D                  LD   e,iyl   
0C02   EB                     EX   de,hl   
0C03                BLOCKEND2:      
0C03   44 4D                  LD   bc,hl   ; bc = hl = BP
0C05   B7                     OR   a   ; hl = BP - SP = count
0C06   ED 72                  SBC   hl,sp   
0C08   7D                     LD   a,l   
0C09   B4                     OR   h   
0C0A   28 09                  JR   z,blockEnd3   
0C0C   C5                     PUSH   bc   ; bc = count, hl = BP
0C0D   44 4D                  LD   bc,hl   
0C0F   E1                     POP   hl   
0C10   2B                     DEC   hl   ; hl = BP-1
0C11   1B                     DEC   de   ; de = args*-1
0C12   ED B8                  LDDR      
0C14   13                     INC   de   
0C15                BLOCKEND3:      
0C15   EB                     EX   de,hl   ; sp = de = new tos*
0C16   F9                     LD   sp,hl   
0C17   ED 4B 06 24            LD   bc,(vTemp2)   
0C1B   FD 2A 04 24            LD   iy,(vTemp1)   
0C1F   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0C23   7B                     LD   a,e   ; check for NUL
0C24   B2                     OR   d   
0C25   20 02                  JR   nz,blockEnd4   
0C27   DD E9                  JP   (ix)   
0C29                BLOCKEND4:      
0C29   21 00 00               LD   hl,0   ; clear recur vector
0C2C   22 F2 23               LD   (vRecur),hl   
0C2F   C3 33 0C               JP   go1   ; execute de
0C32                             ; execute a block of code which ends with } 116
0C32                             ; creates a root scope if BP == stack
0C32                             ; else uses outer scope
0C32                CARET:       
0C32                GO:          
0C32   D1                     POP   de   ; de = block*
0C33                GO1:         
0C33   7B                     LD   a,e   ; if block* == null, exit
0C34   B2                     OR   d   
0C35   20 02                  JR   nz,go2   
0C37   DD E9                  JP   (ix)   
0C39                GO2:         
0C39   1A                     LD   a,(de)   
0C3A   FE 7B                  CP   "{"   
0C3C   28 06                  JR   z,goBlock   
0C3E   FE 28                  CP   "("   
0C40   C2 77 0C               JP   nz,goFunc   
0C43   D5                     PUSH   de   ; push de just before stack frame
0C44                GOBLOCK:      
0C44   ED 53 04 24            LD   (vTemp1),de   ; save de
0C48   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C4B   FD 54                  LD   d,iyh   
0C4D   FD 5D                  LD   e,iyl   
0C4F   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C50   ED 52                  SBC   hl,de   
0C52   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C56   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C57   B4                     OR   h   
0C58   3E 00                  LD   a,0   
0C5A   28 6A                  JR   z,goFunc8   
0C5C   C5                     PUSH   bc   ; push IP
0C5D   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C60   FD 46 05               LD   b,(iy+5)   
0C63   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C66   FD 66 03               LD   h,(iy+3)   
0C69                GOBLOCK2:      
0C69   C5                     PUSH   bc   ; arg_list*
0C6A   E5                     PUSH   hl   ; first_arg*
0C6B   FD E5                  PUSH   iy   ; push BP
0C6D   FD 21 00 00            LD   iy,0   ; BP = SP
0C71   FD 39                  ADD   iy,sp   
0C73                GOBLOCK3:      
0C73   42 4B                  LD   bc,de   ; bc = de = block*-1
0C75   DD E9                  JP   (ix)   
0C77                GOFUNC:      ; execute func
0C77   EB                     EX   de,hl   ; hl = func*
0C78   5E                     LD   e,(hl)   ; de = partial_array*
0C79   23                     INC   hl   
0C7A   56                     LD   d,(hl)   
0C7B   23                     INC   hl   
0C7C   7B                     LD   a,e   ; if partial_array* == null skip
0C7D   B2                     OR   d   
0C7E   28 21                  JR   z,goFunc3   
0C80   ED 43 04 24            LD   (vTemp1),bc   
0C84   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C87   EB                     EX   de,hl   ; hl = partial_array*
0C88   2B                     DEC   hl   ; bc = count
0C89   46                     LD   b,(hl)   
0C8A   2B                     DEC   hl   
0C8B   4E                     LD   c,(hl)   
0C8C   23                     INC   hl   ; hl = array data*
0C8D   23                     INC   hl   
0C8E   18 06                  JR   goFunc2   ; push each item on stack
0C90                GOFUNC1:      
0C90   5E                     LD   e,(hl)   ; de = partial item
0C91   23                     INC   hl   
0C92   56                     LD   d,(hl)   
0C93   23                     INC   hl   
0C94   D5                     PUSH   de   ; push on stack
0C95   0B                     DEC   bc   
0C96                GOFUNC2:      
0C96   79                     LD   a,c   ; if count != 0 then loop
0C97   B0                     OR   b   
0C98   20 F6                  JR   nz,goFunc1   
0C9A   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C9E   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0CA1                GOFUNC3:      
0CA1   5E                     LD   e,(hl)   ; de = block*
0CA2   23                     INC   hl   
0CA3   56                     LD   d,(hl)   
0CA4   23                     INC   hl   
0CA5   ED 53 04 24            LD   (vTemp1),de   ; save block*
0CA9   5E                     LD   e,(hl)   ; de = arg_list*
0CAA   23                     INC   hl   
0CAB   56                     LD   d,(hl)   
0CAC   23                     INC   hl   
0CAD   EB                     EX   de,hl   ; hl = arg_list*
0CAE   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0CB2   7D                     LD   a,l   ; if arg_list* == null a = 0
0CB3   B4                     OR   h   
0CB4   20 03                  JR   nz,goFunc4   
0CB6   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CB7   18 0D                  JR   goFunc8   
0CB9                GOFUNC4:      ; allocate locals
0CB9   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0CBA   18 03                  JR   goFunc6   
0CBC                GOFUNC5:      ; loop
0CBC   3B                     DEC   sp   
0CBD   3B                     DEC   sp   
0CBE   3D                     DEC   a   
0CBF                GOFUNC6:      
0CBF   B7                     OR   a   
0CC0   20 FA                  JR   nz,goFunc5   ; end loop
0CC2                GOFUNC7:      
0CC2   23                     INC   hl   ; a = num_args* x 2
0CC3   7E                     LD   a,(hl)   
0CC4   2B                     DEC   hl   
0CC5   87                     ADD   a,a   ; a *= 2
0CC6                GOFUNC8:      
0CC6   C5                     PUSH   bc   ; push IP
0CC7   44 4D                  LD   bc,hl   
0CC9   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CCC   85                     ADD   a,l   
0CCD   6F                     LD   l,a   
0CCE   39                     ADD   hl,sp   
0CCF   18 98                  JR   goBlock2   
0CD1                             ; 
0CD1                             ;*******************************************************************
0CD1                             ; general routines
0CD1                             ;*******************************************************************
0CD1                             ; arg_list - parses arg_list e.g. ab:c
0CD1                             ; -- arg_list*
0CD1                PARSEARGS:      
0CD1   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CD4   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CD7   E5                     PUSH   hl   ; save start of arg_list
0CD8   23                     INC   hl   ; skip length fields to start of string
0CD9   23                     INC   hl   
0CDA   03                     INC   bc   ; point to next char
0CDB                PARSEARGS1:      
0CDB   0A                     LD   a,(bc)   
0CDC   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CDE   20 03                  JR   nz,parseArgs1a   
0CE0   14                     INC   d   ; non zero value local count acts as flag
0CE1   18 10                  JR   parseArgs3   
0CE3                PARSEARGS1A:      
0CE3   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CE5   38 0F                  JR   c,parseArgs4   
0CE7   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CE9   30 0B                  JR   nc,parseArgs4   
0CEB                PARSEARGS2:      
0CEB   77                     LD   (hl),a   
0CEC   23                     INC   hl   
0CED   1C                     INC   e   ; increase arg count
0CEE   AF                     XOR   a   
0CEF   B2                     OR   d   
0CF0   28 01                  JR   z,parseArgs3   
0CF2   14                     INC   d   ; if d > 0 increase local count
0CF3                PARSEARGS3:      
0CF3   03                     INC   bc   ; point to next char
0CF4   18 E5                  JR   parseArgs1   
0CF6                PARSEARGS4:      
0CF6   0B                     DEC   bc   
0CF7   AF                     XOR   a   
0CF8   B2                     OR   d   
0CF9   28 01                  JR   z,parseArgs5   
0CFB   15                     DEC   d   ; remove initial inc
0CFC                PARSEARGS5:      
0CFC   23                     INC   hl   
0CFD   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0D00   E1                     POP   hl   ; hl = start of arg_list
0D01   72                     LD   (hl),d   ; write number of locals at start - 1
0D02   23                     INC   hl   
0D03   73                     LD   (hl),e   ; write number of args + locals at start - 2
0D04   2B                     DEC   hl   
0D05   E3                     EX   (sp),hl   
0D06   E9                     JP   (hl)   
0D07                             ; create block: parses block e.g. 00bbIC4uLi4g
0D07                             ; -- block*
0D07                PARSEBLOCK:      
0D07   C5                     PUSH   bc   ; return pointer to first { of block
0D08   03                     INC   bc   
0D09   16 01                  LD   d,1   ; nesting: count first parenthesis
0D0B                PARSEBLOCK1:      ; Skip to end of definition
0D0B   0A                     LD   a,(bc)   ; Get the next character
0D0C   03                     INC   bc   ; Point to next character
0D0D   FE 21                  CP   " " + 1   ; ignore whitespace
0D0F   38 FA                  JR   c,parseBlock1   
0D11   FE 29                  CP   ")"   
0D13   28 2D                  JR   z,parseBlock4   
0D15   FE 7D                  CP   "}"   
0D17   28 29                  JR   z,parseBlock4   
0D19   FE 5D                  CP   "]"   
0D1B   28 25                  JR   z,parseBlock4   
0D1D   FE 28                  CP   "("   
0D1F   28 16                  JR   z,parseBlock2   
0D21   FE 7B                  CP   "{"   
0D23   28 12                  JR   z,parseBlock2   
0D25   FE 5B                  CP   "["   
0D27   28 0E                  JR   z,parseBlock2   
0D29   FE 27                  CP   "'"   
0D2B   28 0D                  JR   z,parseBlock3   
0D2D   FE 60                  CP   "`"   
0D2F   28 09                  JR   z,parseBlock3   
0D31   FE 22                  CP   DQ   
0D33   28 05                  JR   z,parseBlock3   
0D35   18 D4                  JR   parseBlock1   
0D37                PARSEBLOCK2:      
0D37   14                     INC   d   
0D38   18 D1                  JR   parseBlock1   
0D3A                PARSEBLOCK3:      
0D3A   3E 80                  LD   a,$80   
0D3C   AA                     XOR   d   
0D3D   57                     LD   d,a   
0D3E   20 CB                  JR   nz,parseBlock1   
0D40   18 03                  JR   parseBlock5   
0D42                PARSEBLOCK4:      
0D42   15                     DEC   d   
0D43   20 C6                  JR   nz,parseBlock1   ; get the next element
0D45                PARSEBLOCK5:      
0D45   60 69                  LD   hl,bc   ; hl = IP
0D47   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D4A   B7                     OR   a   ; IP - HEAP
0D4B   ED 52                  SBC   hl,de   
0D4D   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D4F   28 1C                  JR   z,parseBlock6   
0D51   60 69                  LD   hl,bc   ; hl = IP
0D53   D1                     POP   de   ; de = block*
0D54   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D58   B7                     OR   a   ; bc = size
0D59   ED 52                  SBC   hl,de   
0D5B   44 4D                  LD   bc,hl   
0D5D   EB                     EX   de,hl   ; hl = block* de = heap*
0D5E   ED 5B F0 23            LD   de,(vHeapPtr)   
0D62   D5                     PUSH   de   ; return hblock*
0D63   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D65   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D69   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D6D                PARSEBLOCK6:      
0D6D   0B                     DEC   bc   ; balanced, exit
0D6E   E1                     POP   hl   ; hl = block*
0D6F   E3                     EX   (sp),hl   ; return to caller
0D70   E9                     JP   (hl)   
0D71                             ; create function
0D71                             ; arg_list* block* -- func*
0D71                CREATEFUNC:      
0D71   E1                     POP   hl   ; save retrn address
0D72   22 08 24               LD   (vTemp3),hl   
0D75   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D79   E1                     POP   hl   ; hl = block*
0D7A   22 06 24               LD   (vTemp2),hl   ; save block*
0D7D   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D80   FD 56 05               LD   d,(iy+5)   
0D83   7B                     LD   a,e   ; if arg_list == null then make a func
0D84   B2                     OR   d   
0D85   20 09                  JR   nz,createFunc0   
0D87   21 00 00               LD   hl,0   ; partial_array = null
0D8A   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D8E   18 65                  JR   createFunc5   
0D90                CREATEFUNC0:      
0D90   E1                     POP   hl   ; hl = inner_arg_list*
0D91   E5                     PUSH   hl   ; save inner_arg_list
0D92   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D96   7E                     LD   a,(hl)   ; compile inner_num_locals
0D97   4F                     LD   c,a   ; b = inner_num_locals
0D98   12                     LD   (de),a   
0D99   23                     INC   hl   
0D9A   13                     INC   de   
0D9B   7E                     LD   a,(hl)   ; compile inner_length
0D9C   12                     LD   (de),a   
0D9D   91                     SUB   c   ; a = inner_num args
0D9E   23                     INC   hl   
0D9F   13                     INC   de   
0DA0   B7                     OR   a   ; compile args if inner_length > 0
0DA1   28 05                  JR   z,createFunc1   
0DA3   4F                     LD   c,a   ; bc = a
0DA4   06 00                  LD   b,0   
0DA6   ED B0                  LDIR      
0DA8                CREATEFUNC1:      
0DA8   EB                     EX   de,hl   ; hl = outer_arg_list
0DA9   FD 5E 04               LD   e,(iy+4)   
0DAC   FD 56 05               LD   d,(iy+5)   
0DAF   EB                     EX   de,hl   
0DB0   23                     INC   hl   ; a = outer_length
0DB1   7E                     LD   a,(hl)   
0DB2   23                     INC   hl   
0DB3   B7                     OR   a   
0DB4   28 05                  JR   z,createFunc2   
0DB6   4F                     LD   c,a   
0DB7   06 00                  LD   b,0   
0DB9   ED B0                  LDIR      ; append outer_args
0DBB                CREATEFUNC2:      ; a = outer_length
0DBB   47                     LD   b,a   ; b = a = outer_length
0DBC   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DBF   23                     INC   hl   
0DC0   7E                     LD   a,(hl)   ; add outer_length to new length
0DC1   80                     ADD   a,b   
0DC2   77                     LD   (hl),a   
0DC3   2B                     DEC   hl   
0DC4   78                     LD   a,b   ; save outer_length in a'
0DC5   08                     EX   af,af'   
0DC6   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DC7   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DC8   B7                     OR   a   
0DC9   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DCB   4F                     LD   c,a   ; c = inner_num_locals
0DCC   06 00                  LD   b,0   ; bc = inner_num_locals
0DCE   23                     INC   hl   ; a = inner_length
0DCF   7E                     LD   a,(hl)   
0DD0   91                     SUB   c   ; a = inner_num_args
0DD1   23                     INC   hl   ; hl = inner_arg_chars
0DD2   85                     ADD   a,l   ; hl += a
0DD3   6F                     LD   l,a   
0DD4   3E 00                  LD   a,0   
0DD6   84                     ADD   a,h   
0DD7   67                     LD   h,a   
0DD8   ED B0                  LDIR      ; append inner_locals
0DDA                CREATEFUNC2A:      
0DDA   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DDB   12                     LD   (de),a   ; compile partial_array length field
0DDC   13                     INC   de   
0DDD   AF                     XOR   a   
0DDE   12                     LD   (de),a   
0DDF   13                     INC   de   
0DE0   D5                     PUSH   de   ; push partial_array*
0DE1   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DE2   FD 5E 02               LD   e,(iy+2)   
0DE5   FD 56 03               LD   d,(iy+3)   
0DE8   EB                     EX   de,hl   
0DE9                CREATEFUNC3:      
0DE9   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DEA   4E                     LD   c,(hl)   
0DEB   2B                     DEC   hl   
0DEC   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DED   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DEE   13                     INC   de   
0DEF   79                     LD   a,c   
0DF0   12                     LD   (de),a   
0DF1   13                     INC   de   
0DF2   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DF4                CREATEFUNC4:      
0DF4   E1                     POP   hl   ; hl = partial_array*
0DF5                CREATEFUNC5:      
0DF5   C1                     POP   bc   ; bc = new_arg_list*
0DF6   D5                     PUSH   de   ; return new func*
0DF7   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DF8   73                     LD   (hl),e   ; compile partial_array* to func
0DF9   23                     INC   hl   
0DFA   72                     LD   (hl),d   
0DFB   23                     INC   hl   
0DFC   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0E00   73                     LD   (hl),e   ; compile block* to func
0E01   23                     INC   hl   
0E02   72                     LD   (hl),d   
0E03   23                     INC   hl   
0E04   71                     LD   (hl),c   ; compile new_arg_list* to func
0E05   23                     INC   hl   
0E06   70                     LD   (hl),b   
0E07   23                     INC   hl   
0E08   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E0B   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E0F   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E12   E9                     JP   (hl)   
0E13                             ; ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0E13                             ; flushBuffer:
0E13                             ;     push af
0E13                             ;     push de
0E13                             ;     push hl
0E13                             ;     ld hl,(vBufPtr)
0E13                             ;     ld de,BUF
0E13                             ;     ld (vBufPtr),de
0E13                             ;     or a
0E13                             ;     sbc hl,de
0E13                             ;     call printChars2
0E13                             ;     pop hl
0E13                             ;     pop de
0E13                             ;     pop af
0E13                             ;     ret
0E13                             ; printChars1:
0E13                             ;     ld a,(de)                           ; print char at char*
0E13                             ;     call putchar
0E13                             ;     inc de                              ; char*++
0E13                             ;     dec hl                              ; count--
0E13                             ; printChars2:
0E13                             ;     ld a,l                              ; count == 0?
0E13                             ;     or h
0E13                             ;     ret z
0E13                             ;     jr printChars1                      ; if not loop
0E13                COMMANDTABLE:      
0E13   03                     INC   bc   
0E14   0A                     LD   a,(bc)   
0E15   FE 7B                  CP   "z"+1   
0E17   30 09                  JR   nc,commandTable2   
0E19   D6 61                  SUB   "a"   
0E1B   38 05                  JR   c,commandTable2   
0E1D                COMMANDTABLE1:      
0E1D   E1                     POP   hl   
0E1E   85                     ADD   a,l   
0E1F   6F                     LD   l,a   
0E20   6E                     LD   l,(hl)   ; must have the same msb as the table
0E21   E9                     JP   (hl)   
0E22                COMMANDTABLE2:      
0E22   3E 1A                  LD   a,26   
0E24   0B                     DEC   bc   
0E25   18 F6                  JR   commandTable1   
0E27                             ; followed by a table
0E27                             ; db char
0E27                             ; db lsb(addr)
0E27                             ; the final item must have char == NUL
0E27                JUMPTABLE:      
0E27   E1                     POP   hl   
0E28   03                     INC   bc   
0E29                JUMPTABLE0:      
0E29   AF                     XOR   a   
0E2A   BE                     CP   (hl)   
0E2B   28 0B                  JR   z,jumpTable2   
0E2D   0A                     LD   a,(bc)   
0E2E   BE                     CP   (hl)   
0E2F   28 04                  JR   z,jumpTable1   
0E31   23                     INC   hl   
0E32   23                     INC   hl   
0E33   18 F4                  JR   jumpTable0   
0E35                JUMPTABLE1:      
0E35   23                     INC   hl   
0E36   6E                     LD   l,(hl)   ; must have the same msb as the table
0E37   E9                     JP   (hl)   
0E38                JUMPTABLE2:      
0E38   0B                     DEC   bc   
0E39   23                     INC   hl   
0E3A   E9                     JP   (hl)   
0E3B                             ; followed by a table
0E3B                             ; db char
0E3B                             ; db lsb(addr)
0E3B                             ; the final item must have char == NUL
0E3B                XJUMPTABLE:      
0E3B   E1                     POP   hl   
0E3C   03                     INC   bc   
0E3D                XJUMPTABLE0:      
0E3D   AF                     XOR   a   
0E3E   BE                     CP   (hl)   
0E3F   28 0F                  JR   z,xjumpTable2   
0E41   0A                     LD   a,(bc)   
0E42   BE                     CP   (hl)   
0E43   28 05                  JR   z,xjumpTable1   
0E45   23                     INC   hl   
0E46   23                     INC   hl   
0E47   23                     INC   hl   
0E48   18 F3                  JR   xjumpTable0   
0E4A                XJUMPTABLE1:      
0E4A   23                     INC   hl   
0E4B   5E                     LD   e,(hl)   
0E4C   23                     INC   hl   
0E4D   56                     LD   d,(hl)   
0E4E   EB                     EX   de,hl   
0E4F   E9                     JP   (hl)   
0E50                XJUMPTABLE2:      
0E50   0B                     DEC   bc   
0E51   23                     INC   hl   
0E52   E9                     JP   (hl)   
0E53                PRTSTR0:      
0E53   CD 85 00               CALL   putchar   
0E56   23                     INC   hl   
0E57                PRTSTR:      
0E57   7E                     LD   a,(hl)   
0E58   B7                     OR   a   
0E59   20 F8                  JR   nz,prtstr0   
0E5B   C9                     RET      
0E5C                             ; **************************************************************************
0E5C                             ; calculate nesting value
0E5C                             ; a is char to be tested,
0E5C                             ; e is the nesting value (initially 0)
0E5C                             ; e is increased by ( and [
0E5C                             ; e is decreased by ) and ]
0E5C                             ; e has its bit 7 toggled by `
0E5C                             ; limited to 127 levels
0E5C                             ; **************************************************************************
0E5C                NESTING:      
0E5C   FE 22                  CP   DQ   ; quote char
0E5E   28 06                  JR   z,nesting0   
0E60   FE 60                  CP   "`"   ; quote char
0E62   28 02                  JR   z,nesting0   
0E64   18 0A                  JR   nesting1   
0E66                NESTING0:      
0E66   CB 7B                  BIT   7,e   
0E68   28 03                  JR   z,nesting1a   
0E6A   CB BB                  RES   7,e   
0E6C   C9                     RET      
0E6D                NESTING1A:      
0E6D   CB FB                  SET   7,e   
0E6F   C9                     RET      
0E70                NESTING1:      
0E70   CB 7B                  BIT   7,e   
0E72   C0                     RET   nz   
0E73   FE 7B                  CP   "{"   
0E75   28 08                  JR   z,nesting2   
0E77   FE 5B                  CP   "["   
0E79   28 04                  JR   z,nesting2   
0E7B   FE 28                  CP   "("   
0E7D   20 02                  JR   nz,nesting3   
0E7F                NESTING2:      
0E7F   1C                     INC   e   
0E80   C9                     RET      
0E81                NESTING3:      
0E81   FE 7D                  CP   "}"   
0E83   28 07                  JR   z,nesting4   
0E85   FE 5D                  CP   "]"   
0E87   28 03                  JR   z,nesting4   
0E89   FE 29                  CP   ")"   
0E8B   C0                     RET   nz   
0E8C                NESTING4:      
0E8C   1D                     DEC   e   
0E8D   C9                     RET      
0E8E                PROMPT:      
0E8E   CD 9E 0E               CALL   printStr   
0E91   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E96   C9                     RET      
0E97                CRLF:        
0E97   CD 9E 0E               CALL   printStr   
0E9A   0D 0A 00               .CSTR   "\r\n"   
0E9D   C9                     RET      
0E9E                             ; prints a null teminated string
0E9E                             ; the string should be immediately following the call
0E9E                PRINTSTR:      
0E9E   E3                     EX   (sp),hl   ; swap			
0E9F   CD 57 0E               CALL   prtstr   
0EA2   23                     INC   hl   ; inc past NUL
0EA3   E3                     EX   (sp),hl   ; put it back	
0EA4   C9                     RET      
0EA5                INIT:        
0EA5   21 F0 01               LD   hl,titleStr   
0EA8   11 0E 24               LD   de,titleBuf   
0EAB   06 14                  LD   b,20   
0EAD                INIT1:       
0EAD   1A                     LD   a,(de)   
0EAE   BE                     CP   (hl)   
0EAF   20 17                  JR   nz,coldBoot0   
0EB1   13                     INC   de   
0EB2   23                     INC   hl   
0EB3   10 F8                  DJNZ   init1   
0EB5                WARMINIT:      
0EB5   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0EB9   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EBD   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EC1   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EC5   C3 FF 0E               JP   start1   
0EC8                COLDBOOT0:      
0EC8   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0ECB   11 0E 24               LD   de,titleBuf   
0ECE   06 14                  LD   b,20   
0ED0   ED B0                  LDIR      
0ED2                COLDINIT:      
0ED2   21 DE 01               LD   hl,isysVars   
0ED5   11 E6 23               LD   de,sysVars   
0ED8   01 12 00               LD   bc,9 * 2   
0EDB   ED B0                  LDIR      
0EDD   21 00 23               LD   hl,vars   ; 52 vars LO HI
0EE0   06 34                  LD   b,26*2   
0EE2   AF                     XOR   a   
0EE3                COLDBOOT1:      
0EE3   77                     LD   (hl),a   
0EE4   23                     INC   hl   
0EE5   10 FC                  DJNZ   coldBoot1   
0EE7   DD 2A EE 23            LD   ix,(vNext)   
0EEB   FD 21 00 21            LD   iy,STACK   
0EEF   C9                     RET      
0EF0                COLDSTART:      
0EF0   31 00 21               LD   sp,STACK   
0EF3   CD C8 0E               CALL   coldBoot0   
0EF6   C3 FF 0E               JP   start1   
0EF9                START:       
0EF9   31 00 21               LD   sp,STACK   ; start Monty
0EFC   CD A5 0E               CALL   init   ; setups
0EFF                START1:      
0EFF   21 0E 24               LD   hl,titleBuf   
0F02   CD 57 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0F05                INTERPRET:      
0F05   CD 8E 0E               CALL   prompt   
0F08   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0F0B   21 00 21               LD   hl,TIB   
0F0E   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0F11                INTERPRET2:      ; calculate nesting
0F11   1E 00                  LD   e,0   ; initilize nesting value
0F13   C5                     PUSH   bc   ; save offset into TIB,
0F14                             ; bc is also the count of chars in TIB
0F14   21 00 21               LD   hl,TIB   ; hl is start of TIB
0F17   18 0B                  JR   interpret4   
0F19                INTERPRET3:      
0F19   3E 33                  LD   a,"3"   
0F1B   CD 85 00               CALL   putchar   
0F1E   7E                     LD   a,(hl)   ; a = char in TIB
0F1F   23                     INC   hl   ; inc pointer into TIB
0F20   0B                     DEC   bc   ; dec count of chars in TIB
0F21   CD 5C 0E               CALL   nesting   ; update nesting value
0F24                INTERPRET4:      
0F24   79                     LD   a,c   ; is count zero?
0F25   B0                     OR   b   
0F26   20 F1                  JR   nz,interpret3   ; if not loop
0F28   C1                     POP   bc   ; restore offset into TIB
0F29                INTERPRET5:      
0F29   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F2C   FE 20                  CP   $20   ; compare to space
0F2E   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F30   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F32                             ; ???? NEEDED?
0F32   28 36                  JR   z,interpret8   
0F34   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F36   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F38   FE 05                  CP   CTRL_E   
0F3A   CA C8 0F               JP   z,edit_   
0F3D   FE 08                  CP   CTRL_H   
0F3F   CA B8 0F               JP   z,backSpace_   
0F42   FE 0A                  CP   CTRL_J   
0F44   CA E0 0F               JP   z,reEdit_   
0F47                             ; cp CTRL_S
0F47                             ; jp z,printStack_
0F47                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F47                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F47                             ; DB     lsb(list_)       ; FF  ^L 12
0F47                             ; DB     lsb(printStack_) ; DLE ^P 16
0F47                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F47                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F47                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F47                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F47                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F47                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F47                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F47                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F47                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F47                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F47                INTERPRET5A:      
0F47                             ; ld (vTIBPtr),bc
0F47                             ; ld bc,(vTIBPtr)
0F47   18 C8                  JR   interpret2   
0F49                INTERPRET6:      
0F49   21 00 21               LD   hl,TIB   
0F4C   09                     ADD   hl,bc   
0F4D   77                     LD   (hl),a   ; store the character in textbuf
0F4E   03                     INC   bc   
0F4F   CD 85 00               CALL   putchar   ; echo character to screen
0F52   CD 5C 0E               CALL   nesting   
0F55   18 D2                  JR   interpret5   ; wait for next character
0F57                INTERPRET7:      
0F57   21 00 21               LD   hl,TIB   
0F5A   09                     ADD   hl,bc   
0F5B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F5D   23                     INC   hl   
0F5E   36 0A                  LD   (hl),"\n"   
0F60   23                     INC   hl   
0F61   03                     INC   bc   
0F62   03                     INC   bc   
0F63   CD 97 0E               CALL   crlf   ; echo character to screen
0F66   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F67   B7                     OR   a   
0F68   20 BF                  JR   nz,interpret5   
0F6A                INTERPRET8:      
0F6A   21 00 21               LD   hl,TIB   
0F6D   09                     ADD   hl,bc   
0F6E   22 EA 23               LD   (vTIBPtr),hl   
0F71   01 00 21               LD   bc,TIB   
0F74   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F78   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F7C   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F80   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F84   0B                     DEC   bc   
0F85                NEXT:        
0F85   03                     INC   bc   ; Increment the IP
0F86   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F87   FE 20                  CP   " "   ; whitespace?
0F89   28 FA                  JR   z,next   ; space? ignore
0F8B   38 08                  JR   c,next1   
0F8D   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F8F   6F                     LD   l,a   ; index into table
0F90   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F92   6E                     LD   l,(hl)   ; get low jump address
0F93   24                     INC   h   ; Load h with page after opcodes
0F94   E9                     JP   (hl)   ; Jump to routine
0F95                NEXT1:       
0F95   FE 00                  CP   NUL   ; end of input string?
0F97   28 03                  JR   z,exit   
0F99   C3 05 0F               JP   interpret   ; no, other whitespace, macros?
0F9C                EXIT:        
0F9C   03                     INC   bc   
0F9D   60 69                  LD   hl,bc   
0F9F   E9                     JP   (hl)   
0FA0                RUN:         
0FA0   C1                     POP   bc   
0FA1   0B                     DEC   bc   
0FA2   DD E9                  JP   (ix)   
0FA4                ERROR:       
0FA4   E5                     PUSH   hl   
0FA5   CD A0 0F               CALL   run   
0FA8   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0FB5   C3 05 0F               JP   interpret   
0FB8                BACKSPACE_:      
0FB8   79                     LD   a,c   
0FB9   B0                     OR   b   
0FBA   CA 11 0F               JP   z,interpret2   
0FBD   0B                     DEC   bc   
0FBE   CD 9E 0E               CALL   printStr   
0FC1   08 20 08 00            .CSTR   "\b \b"   
0FC5   C3 11 0F               JP   interpret2   
0FC8                             ; edit
0FC8                EDIT_:       
0FC8   CD A0 0F               CALL   run   
0FCB   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FDD   C3 05 0F               JP   interpret   
0FE0                REEDIT_:      
0FE0   C3 05 0F               JP   interpret   
0FE3                PRINTSTACK_:      
0FE3   CD A0 0F               CALL   run   
0FE6   2F 70 6B 00            .CSTR   "/pk"   
0FEA   C3 05 0F               JP   interpret   
0FED                             ; editDef:
0FED                             ;     pop hl                      ; pop ret address
0FED                             ;     ex (sp),hl                  ; swap with TOS
0FED                             ;     push hl                     ; dup TOS
0FED                             ;     ld a,l                      ; a = ident
0FED                             ;     ld de,TIB                   ; de = start of TIB
0FED                             ;     ld (vTIBPtr),de             ; update TIB*
0FED                             ;     push ix                     ; save NEXT
0FED                             ;     ld ix,editDef0              ; NEXT = editDef0
0FED                             ;     jp lookupRef                ; convert letter into address
0FED                             ; editDef0:
0FED                             ;     ld e,(hl)                   ; de = (hl++)
0FED                             ;     inc hl
0FED                             ;     ld d,(hl)
0FED                             ;     ld a,d                      ; de == 0 ?
0FED                             ;     or e
0FED                             ;     jr z,editDef4
0FED                             ;     ld ix,editDef3              ; NEXT = editDef3
0FED                             ;     ex de,hl
0FED                             ;     ld a,(hl)
0FED                             ;     cp "{"
0FED                             ;     jr nz,editDef1
0FED                             ;     jp editBlock0               ; convert letter into address
0FED                             ; editDef1:
0FED                             ;     cp "("
0FED                             ;     jr nz,editDef2
0FED                             ;     jp editBlock0               ; convert letter into address
0FED                             ; editDef2:
0FED                             ;     jp editFunc
0FED                             ; editDef3:
0FED                             ;     ld a," "                    ; write assign
0FED                             ;     call writeChar
0FED                             ;     pop hl                      ; a = ident
0FED                             ;     ld a,l
0FED                             ;     call writeChar
0FED                             ;     ld a,"="                    ; write assign
0FED                             ;     call writeChar
0FED                             ;     ld ix,editDef4              ; NEXT = editDef4
0FED                             ;     jp printTIB
0FED                             ; editDef4:
0FED                             ;     pop ix                      ; restore NEXT
0FED                             ;     jp (ix)
0FED                             ; writeChar:
0FED                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FED                             ;     ld (de),a                   ; write ident
0FED                             ;     inc de
0FED                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FED                             ;     ret
0FED                             ; ; printTIB
0FED                             ; printTIB:
0FED                             ;     ld hl,(vTIBPtr)
0FED                             ;     ld de,TIB
0FED                             ;     or a
0FED                             ;     sbc hl,de
0FED                             ;     jp printTIB2
0FED                             ; printTIB1:
0FED                             ;     ld a,(de)
0FED                             ;     call putchar
0FED                             ; printTIB2:
0FED                             ;     ld a,l
0FED                             ;     or h
0FED                             ;     jr nz,printTIB1
0FED                             ;     jp (ix)
0FED                             ; editBlock:
0FED                             ;     pop hl                      ; hl = block*
0FED                             ; editBlock0:
0FED                             ;     push ix                     ; save next
0FED                             ;     push hl                     ; push block*
0FED                             ;     push hl                     ; push block*
0FED                             ;     ld ix,(editBlock2)
0FED                             ;     jp blockLength
0FED                             ; editBlock1:
0FED                             ;     pop hl                      ; bc = length, (sp) = IP
0FED                             ;     pop de                      ; de = block*
0FED                             ;     ld a,l
0FED                             ;     or h
0FED                             ;     jr z,editBlock2
0FED                             ;     push bc
0FED                             ;     ld bc,hl
0FED                             ;     ex de,hl                    ; hl = block*
0FED                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FED                             ;     ldir                        ; copy block to TIB
0FED                             ;     ld (vTIBPtr),de              ; save TIB*
0FED                             ;     pop bc
0FED                             ; editBlock2:
0FED                             ;     pop ix                      ; restore next
0FED                             ;     jp (ix)
0FED                             ; editFunc:
0FED                             ;     jp (ix)
0FED                             ; editArray:
0FED                             ;     jp (ix)
0FED                             ; editparseArgs:
0FED                             ;     jp (ix)
0FED                             ; ; blockLength
0FED                             ; ; addr1 -- length
0FED                             ; blockLength:
0FED                             ;     pop hl                      ; block*
0FED                             ;     push hl                     ; save block*
0FED                             ;     inc hl                      ; skip first char
0FED                             ;     ld d,1                      ; increase nesting
0FED                             ; blockLength1:                   ; Skip to end of definition
0FED                             ;     ld a,(hl)                   ; Get the next character
0FED                             ;     inc hl                      ; Point to next character
0FED                             ;     cp " " + 1                  ; ignore whitespace
0FED                             ;     jr c,blockLength1
0FED                             ;     cp ")"
0FED                             ;     jr z,blockLength4
0FED                             ;     cp "}"
0FED                             ;     jr z,blockLength4
0FED                             ;     cp "]"
0FED                             ;     jr z,blockLength4
0FED                             ;     cp "("
0FED                             ;     jr z,blockLength2
0FED                             ;     cp "{"
0FED                             ;     jr z,blockLength2
0FED                             ;     cp "["
0FED                             ;     jr z,blockLength2
0FED                             ;     cp "'"
0FED                             ;     jr z,blockLength3
0FED                             ;     cp "`"
0FED                             ;     jr z,blockLength3
0FED                             ;     cp DQ
0FED                             ;     jr z,blockLength3
0FED                             ;     jr blockLength1
0FED                             ; blockLength2:
0FED                             ;     inc d
0FED                             ;     jr blockLength1
0FED                             ; blockLength4:
0FED                             ;     dec d
0FED                             ;     jr nz, blockLength1         ; get the next element
0FED                             ; blockLength3:
0FED                             ;     ld a,$80
0FED                             ;     xor d
0FED                             ;     ld d,a
0FED                             ;     jr nz, blockLength1
0FED                             ;     pop hl                      ; hl = block*
0FED                             ;     or a
0FED                             ;     sbc hl,de
0FED                             ;     push hl
0FED                             ;     jp (ix)
0FED                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FED                             ; \a start of stack \#3 depth \b base \$ prompt
0FED                             ; DW dStack               ; a vS0 start of datastack			
0FED                             ; DW FALSE                ; b vBase16
0FED                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FED                             ; DW 0                    ; d
0FED                             ; DW 65                   ; e vLastDef "A" last command u defined
0FED                             ; DW 0                    ; f
0FED                             ; DW page6                ; g 256 bytes limits
0FED                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FED                F1:          
0FED                F2:          
0FED                F3:          
0FED                F4:          
0FED                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2466 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 2232 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2313 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2288 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
GRAVE:              047C DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        047C DEFINED AT LINE 750 IN MAIN.asm
PRINTSTRING0:       0483 DEFINED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
PRINTSTRING1:       0486 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
QUOTE:              0492 DEFINED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0492 DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0492 DEFINED AT LINE 770 IN MAIN.asm
STRING1:            049B DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
STRING2:            049E DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
STRING3:            04A4 DEFINED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
PERCENT:            04AC DEFINED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04AC DEFINED AT LINE 797 IN MAIN.asm
ARG0:               04C8 DEFINED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
ARG0A:              04D1 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
ARG1:               04D6 DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
ARG1A:              04DE DEFINED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 844 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050D DEFINED AT LINE 856 IN MAIN.asm
DOTDEC:             0518 DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
DOTDECX:            0526 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
DOTDEC0:            0535 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
DOTDEC1:            0545 DEFINED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
DOTDEC2:            0565 DEFINED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
DOTDEC3:            0567 DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
DOTDEC4:            0577 DEFINED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
DOTDEC5:            0578 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
DOTHEX:             057E DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
DOTHEX0:            0591 DEFINED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
DOTHEX1:            05A0 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
DOTHEX2:            05A9 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
DOTSTRING_:         05B4 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
DOTSTRING0:         05BB DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
DOTSTRING1:         05BE DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
DOTCHAR:            05C9 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1009 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1045 IN MAIN.asm
COMMAND_B_:         0639 DEFINED AT LINE 1058 IN MAIN.asm
COMMAND_D_:         0649 DEFINED AT LINE 1069 IN MAIN.asm
COMMAND_F_:         0653 DEFINED AT LINE 1076 IN MAIN.asm
COMMAND_H_:         0672 DEFINED AT LINE 1097 IN MAIN.asm
COMMAND_I_:         067C DEFINED AT LINE 1105 IN MAIN.asm
COMMAND_M_:         0686 DEFINED AT LINE 1112 IN MAIN.asm
COMMAND_P_:         0690 DEFINED AT LINE 1120 IN MAIN.asm
COMMAND_Q_:         0697 DEFINED AT LINE 1126 IN MAIN.asm
COMMAND_R_:         06A1 DEFINED AT LINE 1133 IN MAIN.asm
COMMAND_S_:         06B1 DEFINED AT LINE 1144 IN MAIN.asm
COMMAND_V_:         06C4 DEFINED AT LINE 1157 IN MAIN.asm
COMMAND_W_:         06D7 DEFINED AT LINE 1170 IN MAIN.asm
COMMAND_NOP_:       06E1 DEFINED AT LINE 1178 IN MAIN.asm
DIV_:               06E3 DEFINED AT LINE 1182 IN MAIN.asm
KEY_:               06E7 DEFINED AT LINE 1185 IN MAIN.asm
OUTPUT_:            06EB DEFINED AT LINE 1188 IN MAIN.asm
TRUE_:              06EF DEFINED AT LINE 1191 IN MAIN.asm
XOR_:               06F3 DEFINED AT LINE 1194 IN MAIN.asm
ABSOLUTE:           06F7 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
BREAK:              0704 DEFINED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
BREAK1:             070B DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
INPUT:              071E DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1108 IN MAIN.asm
DECBASE:            0729 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
DECBASE1:           072C DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
ERROR1:             0731 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
HEXBASE:            0737 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
WORDMODE:           073D DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
COMMENT:            0743 DEFINED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1013 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
BYTEMODE:           074C DEFINED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
BYTEMODE1:          074F DEFINED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
QUIT:               0754 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1129 IN MAIN.asm
QUIT1:              075B DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
ARRAYSIZE:          075E DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
XOR:                0766 DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
XOR1:               0767 DEFINED AT LINE 1316 IN MAIN.asm
KEY:                0771 DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
OUTPUT:             077A DEFINED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
RECUR:              0783 DEFINED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
REMAIN:             0789 DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
CONSTHEAPSTART:     078F DEFINED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
CONSTTIBSTART:      0794 DEFINED AT LINE 1367 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
VARHEAPPTR:         0799 DEFINED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
VARTIBPTR:          07A2 DEFINED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1162 IN MAIN.asm
VARIABLE:           07AB DEFINED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1379 IN MAIN.asm
CONSTANT:           07AE DEFINED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1365 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
RANGESRC:           07B1 DEFINED AT LINE 32
                    > USED AT LINE 1140 IN MAIN.asm
RANGESRCM_1816S1396: 07C0 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          082D DEFINED AT LINE 32
                    > USED AT LINE 1052 IN MAIN.asm
ARRAYITERM_1835S1416: 083A DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08AE DEFINED AT LINE 32
                    > USED AT LINE 1151 IN MAIN.asm
STRINGITERM_1854S1436: 08BB DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0934 DEFINED AT LINE 32
                    > USED AT LINE 1115 IN MAIN.asm
MAPM_1874S1458:     0941 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0976 DEFINED AT LINE 32
                    > USED AT LINE 1085 IN MAIN.asm
FILTERM_1888S1473:  0984 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09D4 DEFINED AT LINE 32
                    > USED AT LINE 1079 IN MAIN.asm
FOLDM_1907S1493:    09E3 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A26 DEFINED AT LINE 32
                    > USED AT LINE 1081 IN MAIN.asm
FOREACHM_1921S1508: 0A34 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A72 DEFINED AT LINE 32
                    > USED AT LINE 1083 IN MAIN.asm
FUNCSRCM_1935S1523: 0A7E DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0AAB DEFINED AT LINE 32
                    > USED AT LINE 847 IN MAIN.asm
DOTARRAYM_1945S1534: 0AB9 DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0AF3 DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0AF3 DEFINED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
STRINGBEGIN:        0AF5 DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1147 IN MAIN.asm
STRINGEND:          0AFD DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
STRINGEND1:         0B24 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
STRINGSIZE:         0B2C DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
DOTNEXT:            0B2E DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
DOTNEXT1:           0B36 DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 1586 IN MAIN.asm
DOTNEXT2:           0B42 DEFINED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
DOTNEXT3:           0B48 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
ADDROF:             0B54 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
ADDROF1:            0B68 DEFINED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
ADDROF2:            0B73 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
RBRACK:             0B75 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B75 DEFINED AT LINE 1636 IN MAIN.asm
ARRAYEND1:          0B91 DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
ARRAYEND2:          0BA1 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
ARRAYEND3:          0BA6 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
RBRACE:             0BC5 DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BC5 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
BLOCKEND1:          0BF7 DEFINED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
BLOCKEND2:          0C03 DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 1711 IN MAIN.asm
BLOCKEND3:          0C15 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
BLOCKEND4:          0C29 DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
CARET:              0C32 DEFINED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C32 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C33 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
GO2:                0C39 DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
GOBLOCK:            0C44 DEFINED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOBLOCK2:           0C69 DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1864 IN MAIN.asm
GOBLOCK3:           0C73 DEFINED AT LINE 1789 IN MAIN.asm
GOFUNC:             0C77 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
GOFUNC1:            0C90 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
GOFUNC2:            0C96 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
GOFUNC3:            0CA1 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
GOFUNC4:            0CB9 DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
GOFUNC5:            0CBC DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
GOFUNC6:            0CBF DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
GOFUNC7:            0CC2 DEFINED AT LINE 1852 IN MAIN.asm
GOFUNC8:            0CC6 DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
PARSEARGS:          0CD1 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CDB DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
PARSEARGS1A:        0CE3 DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
PARSEARGS2:         0CEB DEFINED AT LINE 1892 IN MAIN.asm
PARSEARGS3:         0CF3 DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
PARSEARGS4:         0CF6 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
PARSEARGS5:         0CFC DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
PARSEBLOCK:         0D07 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0D0B DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
PARSEBLOCK2:        0D37 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
PARSEBLOCK3:        0D3A DEFINED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
PARSEBLOCK4:        0D42 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
PARSEBLOCK5:        0D45 DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
PARSEBLOCK6:        0D6D DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 1971 IN MAIN.asm
CREATEFUNC:         0D71 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D90 DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
CREATEFUNC1:        0DA8 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
CREATEFUNC2:        0DBB DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
CREATEFUNC2A:       0DDA DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
CREATEFUNC3:        0DE9 DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
CREATEFUNC4:        0DF4 DEFINED AT LINE 2087 IN MAIN.asm
CREATEFUNC5:        0DF5 DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
COMMANDTABLE:       0E13 DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
COMMANDTABLE1:      0E1D DEFINED AT LINE 2145 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
COMMANDTABLE2:      0E22 DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
JUMPTABLE:          0E27 DEFINED AT LINE 2160 IN MAIN.asm
JUMPTABLE0:         0E29 DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
JUMPTABLE1:         0E35 DEFINED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
JUMPTABLE2:         0E38 DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
XJUMPTABLE:         0E3B DEFINED AT LINE 2186 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
XJUMPTABLE0:        0E3D DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
XJUMPTABLE1:        0E4A DEFINED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2195 IN MAIN.asm
XJUMPTABLE2:        0E50 DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
PRTSTR0:            0E53 DEFINED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
PRTSTR:             0E57 DEFINED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
NESTING:            0E5C DEFINED AT LINE 2231 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
NESTING0:           0E66 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
NESTING1A:          0E6D DEFINED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
NESTING1:           0E70 DEFINED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
NESTING2:           0E7F DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
NESTING3:           0E81 DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
NESTING4:           0E8C DEFINED AT LINE 2264 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
PROMPT:             0E8E DEFINED AT LINE 2268 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
CRLF:               0E97 DEFINED AT LINE 2273 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
PRINTSTR:           0E9E DEFINED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2492 IN MAIN.asm
INIT:               0EA5 DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
INIT1:              0EAD DEFINED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
WARMINIT:           0EB5 DEFINED AT LINE 2299 IN MAIN.asm
COLDBOOT0:          0EC8 DEFINED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2294 IN MAIN.asm
                    > USED AT LINE 2332 IN MAIN.asm
COLDINIT:           0ED2 DEFINED AT LINE 2312 IN MAIN.asm
COLDBOOT1:          0EE3 DEFINED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2324 IN MAIN.asm
COLDSTART:          0EF0 DEFINED AT LINE 2330 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
START:              0EF9 DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EFF DEFINED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
INTERPRET:          0F05 DEFINED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
INTERPRET2:         0F11 DEFINED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
INTERPRET3:         0F19 DEFINED AT LINE 2357 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
INTERPRET4:         0F24 DEFINED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
INTERPRET5:         0F29 DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2438 IN MAIN.asm
INTERPRET5A:        0F47 DEFINED AT LINE 2410 IN MAIN.asm
INTERPRET6:         0F49 DEFINED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
INTERPRET7:         0F57 DEFINED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
INTERPRET8:         0F6A DEFINED AT LINE 2440 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
NEXT:               0F85 DEFINED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
NEXT1:              0F95 DEFINED AT LINE 2465 IN MAIN.asm
                    > USED AT LINE 2458 IN MAIN.asm
EXIT:               0F9C DEFINED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
RUN:                0FA0 DEFINED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2506 IN MAIN.asm
ERROR:              0FA4 DEFINED AT LINE 2479 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
BACKSPACE_:         0FB8 DEFINED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
EDIT_:              0FC8 DEFINED AT LINE 2497 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
REEDIT_:            0FE0 DEFINED AT LINE 2502 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
PRINTSTACK_:        0FE3 DEFINED AT LINE 2505 IN MAIN.asm
F1:                 0FED DEFINED AT LINE 10
                    > USED AT LINE 1087 IN MAIN.asm
F2:                 0FED DEFINED AT LINE 11
                    > USED AT LINE 1089 IN MAIN.asm
F3:                 0FED DEFINED AT LINE 12
                    > USED AT LINE 1091 IN MAIN.asm
F4:                 0FED DEFINED AT LINE 13
                    > USED AT LINE 1093 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 2346 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1623 IN MAIN.asm
                    > USED AT LINE 2318 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2314 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2444 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2326 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 1372 IN MAIN.asm
                    > USED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 1382 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2447 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2448 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2302 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2303 IN MAIN.asm
                    > USED AT LINE 2450 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
                    > USED AT LINE 1685 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1802 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
                    > USED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
