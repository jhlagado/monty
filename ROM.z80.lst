0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 21               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 21               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 21               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 21               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 21               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 21               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 21               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 21               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 21               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 21               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 20               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 21               LD   (RST08),HL   
0094   22 D2 21               LD   (RST10),HL   
0097   22 D4 21               LD   (RST18),HL   
009A   22 D6 21               LD   (RST20),HL   
009D   22 D8 21               LD   (RST28),HL   
00A0   22 DA 21               LD   (RST30),HL   
00A3   22 DE 21               LD   (INTVEC),HL   
00A6   22 E0 21               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 21               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 21               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 20               LD   sp,STACK   
00C6   CD 68 0C               CALL   init   
00C9   C3 86 0C               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                STKSIZE:   EQU   $80   ; Stack size
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TMAGIC:   EQU   $AA   ; magic number
00CC                TRESERV:   EQU   $A0   ; reserved
00CC                TNUMBER:   EQU   $A1   ; number
00CC                TSTRING:   EQU   $A2   ; string
00CC                TPOINTER:   EQU   $A3   ; pointer
00CC                TARRAY:   EQU   $A4   ; array
00CC                TBLOCK:   EQU   $A5   ; block
00CC                TLAMBDA:   EQU   $A6   ; lambda
00CC                TARGLST:   EQU   $A7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 23                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 24                  DW   BUF   ; vBUFPtr pointer into BUF
0188   0C 0D                  DW   next   ; nNext
018A   00 26                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 EC 07               JP   semicolon   
0324                DOT_:        
0324   C3 DB 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 DE 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 62 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 67 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 79 07               JP   question   
0336                STAR_:       
0336   C3 92 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 AE 07               JP   num   
0341                HASH_:       
0341   C3 45 07               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 A1 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 2B 08               JP   dblquote   
0350                MINUS_:      
0350   C3 53 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 80 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA 18 08               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA 08 08               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 88 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 8D 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 E4 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 21            LD   de,(vPointer)   
039D   21 F2 21               LD   hl,vPointer   
03A0   C3 7F 0B               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 21               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 21               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 21               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 21            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 21               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 21               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 21               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 21               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 21               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   47                     LD   b,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 00 26               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 21            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 21            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 FE 21            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 00 22            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 00 22            LD   bc,(vTemp2)   
0591   FD 2A FE 21            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   03                     INC   bc   
05BE   0A                     LD   a,(bc)   
05BF   FE 5C                  CP   $5C   
05C1   CA CD 08               JP   z,comment   
05C4   FE 41                  CP   "A"   
05C6   D2 72 08               JP   nc,command   
05C9   0B                     DEC   bc   
05CA   D1                     POP   de   
05CB   E1                     POP   hl   
05CC   C5                     PUSH   bc   ; preserve the IP
05CD   44 4D                  LD   bc,hl   
05CF   CD 67 06               CALL   divide   
05D2   EB                     EX   de,hl   
05D3   ED 53 F4 21            LD   (vRemain),de   
05D7   C1                     POP   bc   
05D8   C3 96 03               JP   add3   
05DB                DOT:         
05DB   CD ED 05               CALL   jumpTable   
05DE   61                     DB   "a"   
05DF   03 06                  DW   dotArray   
05E1   68                     DB   "h"   
05E2   17 06                  DW   dotHex   
05E4   73                     DB   "s"   
05E5   2B 06                  DW   dotStr   
05E7   63                     DB   "c"   
05E8   3F 06                  DW   dotChar   
05EA   00                     DB   NUL   
05EB   53 06                  DW   dotDec   
05ED                JUMPTABLE:      
05ED   03                     INC   bc   
05EE   E1                     POP   hl   
05EF                JUMPTABLE0:      
05EF   AF                     XOR   a   
05F0   BE                     CP   (hl)   
05F1   28 09                  JR   z,jumpTable1   
05F3   0A                     LD   a,(bc)   
05F4   BE                     CP   (hl)   
05F5   28 06                  JR   z,jumpTable2   
05F7   23                     INC   hl   
05F8   23                     INC   hl   
05F9   23                     INC   hl   
05FA   18 F3                  JR   jumpTable0   
05FC                JUMPTABLE1:      
05FC   0B                     DEC   bc   
05FD                JUMPTABLE2:      
05FD   23                     INC   hl   
05FE   5E                     LD   e,(hl)   
05FF   23                     INC   hl   
0600   56                     LD   d,(hl)   
0601   EB                     EX   de,hl   
0602   E9                     JP   (hl)   
0603                             ; cp "a"
0603                             ; jp z,dotArray
0603                             ; cp "h"
0603                             ; jp z,dotHex
0603                             ; cp "s"
0603                             ; jp z,dotStr
0603                             ; cp "c"
0603                             ; jp z,dotChar
0603                             ; dec bc
0603                             ; jp dotDec
0603                DOTARRAY:      
0603   CD A1 06               CALL   go   
0606   00 00                  DW   NUL   ; null closure
0608   0C 06                  DW   dotArray_block   
060A   08 0C                  DW   args1A0L   
060C                DOTARRAY_BLOCK:      
060C   7B 24 61 2F 62 61 2F 70 78 7D 00 .CSTR   "{$a/ba/px}"   ; block
0617                DOTHEX:      
0617   CD A1 06               CALL   go   
061A   00 00                  DW   NUL   ; null closure
061C   20 06                  DW   dotHex_block   
061E   08 0C                  DW   args1A0L   
0620                DOTHEX_BLOCK:      
0620   7B 24 61 2F 62 68 2F 70 78 7D 00 .CSTR   "{$a/bh/px}"   ; block
062B                DOTSTR:      
062B   CD A1 06               CALL   go   
062E   00 00                  DW   NUL   ; null closure
0630   34 06                  DW   dotStr_block   
0632   08 0C                  DW   args1A0L   
0634                DOTSTR_BLOCK:      
0634   7B 24 61 2F 62 73 2F 70 78 7D 00 .CSTR   "{$a/bs/px}"   ; block
063F                DOTCHAR:      
063F   CD A1 06               CALL   go   
0642   00 00                  DW   NUL   ; null closure
0644   48 06                  DW   dotChar_block   
0646   08 0C                  DW   args1A0L   
0648                DOTCHAR_BLOCK:      
0648   7B 24 61 2F 62 63 2F 70 78 7D 00 .CSTR   "{$a/bc/px}"   ; block
0653                DOTDEC:      
0653   CD A1 06               CALL   go   
0656   00 00                  DW   NUL   ; closure
0658   5C 06                  DW   dotDec_block   
065A   08 0C                  DW   args1A0L   
065C                DOTDEC_BLOCK:      
065C   7B 24 61 2F 62 64 2F 70 78 7D 00 .CSTR   "{$a/bd/px}"   ; block
0667                             ; division subroutine.
0667                             ; bc: divisor, de: dividend, hl: remainder
0667                DIVIDE:      
0667   21 00 00               LD   hl,0   ; zero the remainder
066A   3E 10                  LD   a,16   ; loop counter
066C                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
066C   CB 21                  SLA   c   
066E   CB 10                  RL   b   
0670   ED 6A                  ADC   hl,hl   
0672   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0674   38 03                  JR   c,divide2   
0676   0C                     INC   c   
0677   18 01                  JR   divide3   
0679                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0679   19                     ADD   hl,de   
067A                DIVIDE3:      
067A   3D                     DEC   a   
067B   20 EF                  JR   nz,divide1   
067D   50 59                  LD   de,bc   ; result from bc to de
067F   C9                     RET      
0680                             ; hl = value1, de = value2
0680                             ; hl = result
0680                EQUALS:      
0680   B7                     OR   a   ; reset the carry flag
0681   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0683   28 10                  JR   z,true1   
0685   C3 9B 06               JP   false1   
0688                             ; hl = value1 de = value2
0688                             ; hl = result
0688                LESSTHANEQ:      
0688   B7                     OR   a   
0689   ED 52                  SBC   hl,de   
068B   18 05                  JR   lessthan1   
068D                             ; hl = value1 de = value2
068D                             ; hl = result
068D                LESSTHAN:      
068D   B7                     OR   a   
068E   ED 52                  SBC   hl,de   
0690   28 09                  JR   z,false1   
0692                LESSTHAN1:      
0692   FA 9B 06               JP   m,false1   
0695                TRUE1:       
0695   21 FF FF               LD   hl,TRUE   
0698   E5                     PUSH   hl   
0699   DD E9                  JP   (ix)   
069B                NULL1:       
069B                FALSE1:      
069B   21 00 00               LD   hl,FALSE   
069E   E5                     PUSH   hl   
069F   DD E9                  JP   (ix)   
06A1                             ; execute a block of code which ends with }
06A1                             ; creates a root scope if BP == stack
06A1                             ; else uses outer scope
06A1                CARET:       
06A1                GO:          
06A1   D1                     POP   de   ; de = block*
06A2                GO1:         
06A2   7B                     LD   a,e   ; if block* == null, exit
06A3   B2                     OR   d   
06A4   20 02                  JR   nz,go2   
06A6   DD E9                  JP   (ix)   
06A8                GO2:         
06A8   1A                     LD   a,(de)   
06A9   FE 7B                  CP   "{"   
06AB   28 07                  JR   z,goBlock1   
06AD   FE 28                  CP   "("   
06AF   C2 E7 06               JP   nz,goLambda   
06B2   13                     INC   de   ; de is the address to jump back to
06B3   D5                     PUSH   de   ; push de just before stack frame
06B4                GOBLOCK:      
06B4                GOBLOCK1:      
06B4   ED 53 FE 21            LD   (vTemp1),de   ; save de
06B8   21 80 20               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
06BB   FD 54                  LD   d,iyh   
06BD   FD 5D                  LD   e,iyl   
06BF   B7                     OR   a   ; if stack* == BP then this is the root_scope
06C0   ED 52                  SBC   hl,de   
06C2   ED 5B FE 21            LD   de,(vTemp1)   ; restore de
06C6   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06C7   B4                     OR   h   
06C8   3E 00                  LD   a,0   
06CA   28 6E                  JR   z,goLambda8   
06CC   C5                     PUSH   bc   ; push IP
06CD   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06D0   FD 46 05               LD   b,(iy+5)   
06D3   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06D6   FD 66 03               LD   h,(iy+3)   
06D9                GOBLOCK2:      
06D9   C5                     PUSH   bc   ; arg_list*
06DA   E5                     PUSH   hl   ; first_arg*
06DB   FD E5                  PUSH   iy   ; push BP
06DD   FD 21 00 00            LD   iy,0   ; BP = SP
06E1   FD 39                  ADD   iy,sp   
06E3   42 4B                  LD   bc,de   ; bc = de = block*-1
06E5   DD E9                  JP   (ix)   
06E7                GOLAMBDA:      ; execute lambda
06E7   EB                     EX   de,hl   ; hl = lambda*
06E8   5E                     LD   e,(hl)   ; de = partial_array*
06E9   23                     INC   hl   
06EA   56                     LD   d,(hl)   
06EB   23                     INC   hl   
06EC   7B                     LD   a,e   ; if partial_array* == null skip
06ED   B2                     OR   d   
06EE   28 23                  JR   z,goLambda3   
06F0   ED 43 FE 21            LD   (vTemp1),bc   
06F4   22 00 22               LD   (vTemp2),hl   ; save bc,hl
06F7   EB                     EX   de,hl   ; hl = partial_array*
06F8   2B                     DEC   hl   ; skip type byte
06F9   2B                     DEC   hl   ; bc = count
06FA   46                     LD   b,(hl)   
06FB   2B                     DEC   hl   
06FC   4E                     LD   c,(hl)   
06FD   23                     INC   hl   ; hl = array data*
06FE   23                     INC   hl   
06FF   23                     INC   hl   
0700   18 06                  JR   goLambda2   ; push each item on stack
0702                GOLAMBDA1:      
0702   5E                     LD   e,(hl)   ; de = partial item
0703   23                     INC   hl   
0704   56                     LD   d,(hl)   
0705   23                     INC   hl   
0706   D5                     PUSH   de   ; push on stack
0707   0B                     DEC   bc   
0708                GOLAMBDA2:      
0708   79                     LD   a,c   ; if count != 0 then loop
0709   B0                     OR   b   
070A   20 F6                  JR   nz,goLambda1   
070C   ED 4B FE 21            LD   bc,(vTemp1)   ; restore bc
0710   2A 00 22               LD   hl,(vTemp2)   ; restore hl
0713                GOLAMBDA3:      
0713   5E                     LD   e,(hl)   ; de = block*
0714   23                     INC   hl   
0715   56                     LD   d,(hl)   
0716   23                     INC   hl   
0717   ED 53 FE 21            LD   (vTemp1),de   ; save block*
071B   5E                     LD   e,(hl)   ; de = arg_list*
071C   23                     INC   hl   
071D   56                     LD   d,(hl)   
071E   23                     INC   hl   
071F   EB                     EX   de,hl   ; hl = arg_list*
0720   ED 5B FE 21            LD   de,(vTemp1)   ; restore de = block*
0724   7D                     LD   a,l   ; if arg_list* == null a = 0
0725   B4                     OR   h   
0726   20 03                  JR   nz,goLambda4   
0728   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
0729   18 0F                  JR   goLambda8   
072B                GOLAMBDA4:      ; allocate locals
072B   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
072C   7E                     LD   a,(hl)   
072D   18 03                  JR   goLambda6   
072F                GOLAMBDA5:      ; loop
072F   3B                     DEC   sp   
0730   3B                     DEC   sp   
0731   3D                     DEC   a   
0732                GOLAMBDA6:      
0732   B7                     OR   a   
0733   20 FA                  JR   nz,goLambda5   ; end loop
0735                GOLAMBDA7:      
0735   2B                     DEC   hl   ; a = num_args* x 2
0736   7E                     LD   a,(hl)   
0737   23                     INC   hl   
0738   23                     INC   hl   
0739   87                     ADD   a,a   ; a *= 2
073A                GOLAMBDA8:      
073A   C5                     PUSH   bc   ; push IP
073B   44 4D                  LD   bc,hl   
073D   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0740   85                     ADD   a,l   
0741   6F                     LD   l,a   
0742   39                     ADD   hl,sp   
0743   18 94                  JR   goBlock2   
0745                HASH:        
0745                HEXNUM:      
0745   21 00 00               LD   hl,0   ; Clear hl to accept the number
0748                HEXNUM1:      
0748   03                     INC   bc   
0749   0A                     LD   a,(bc)   ; Get the character which is a numeral
074A   CB 77                  BIT   6,a   ; is it uppercase alpha?
074C   28 02                  JR   z,hexnum2   ; no a decimal
074E   D6 07                  SUB   7   ; sub 7  to make $a - $F
0750                HEXNUM2:      
0750   D6 30                  SUB   $30   ; form decimal digit
0752   DA D0 07               JP   c,num2   
0755   FE 10                  CP   $0F+1   
0757   D2 D0 07               JP   nc,num2   
075A   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
075B   29                     ADD   hl,hl   ; 4X
075C   29                     ADD   hl,hl   ; 8X
075D   29                     ADD   hl,hl   ; 16X
075E   85                     ADD   a,l   ; add into bottom of hl
075F   6F                     LD   l,a   
0760   18 E6                  JR   hexnum1   
0762                UPCASE:      
0762   0A                     LD   a,(bc)   ; a = identifier char
0763   D6 41                  SUB   "A"   ; "A" = 0
0765   18 05                  JR   ident1   
0767                LOWCASE:      
0767   0A                     LD   a,(bc)   
0768   D6 61                  SUB   "a"   
076A   C6 1A                  ADD   a,26   
076C                IDENT1:      
076C   87                     ADD   a,a   ; l = a * 2
076D   6F                     LD   l,a   
076E   26 21                  LD   h,msb(vars)   
0770   22 F2 21               LD   (vPointer),hl   ; store address in setter
0773   5E                     LD   e,(hl)   
0774   23                     INC   hl   
0775   56                     LD   d,(hl)   
0776   D5                     PUSH   de   
0777   DD E9                  JP   (ix)   
0779                             ; if
0779                             ; condition then -- value
0779                QUESTION:      
0779                IF:          
0779   03                     INC   bc   
077A   0A                     LD   a,(bc)   
077B   FE 3F                  CP   "?"   
077D   28 06                  JR   z,ifte   
077F   0B                     DEC   bc   
0780   11 00 00               LD   de,NUL   ; NUL pointer for else
0783   18 01                  JR   ifte1   
0785                             ; ifte
0785                             ; condition then else -- value
0785                IFTE:        
0785   D1                     POP   de   ; de = else
0786                IFTE1:       
0786   E1                     POP   hl   ; hl = then
0787   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0788   7C                     LD   a,h   
0789   B5                     OR   l   
078A   E1                     POP   hl   ; hl = then
078B   CA A2 06               JP   z,go1   ; if z de = else
078E   EB                     EX   de,hl   ; condition = false, de = then
078F   C3 A2 06               JP   go1   
0792                STAR:        
0792                MUL:         
0792   D1                     POP   de   ; get first value
0793   E1                     POP   hl   
0794                MUL2:        
0794   C5                     PUSH   bc   ; Preserve the IP
0795   44 4D                  LD   bc,hl   ; bc = 2nd value
0797   21 00 00               LD   hl,0   
079A   3E 10                  LD   a,16   
079C                MUL3:        
079C   29                     ADD   hl,hl   
079D   CB 13                  RL   e   
079F   CB 12                  RL   d   
07A1   30 04                  JR   nc,$+6   
07A3   09                     ADD   hl,bc   
07A4   30 01                  JR   nc,$+3   
07A6   13                     INC   de   
07A7   3D                     DEC   a   
07A8   20 F2                  JR   nz,mul3   
07AA   C1                     POP   bc   ; Restore the IP
07AB   C3 96 03               JP   add3   
07AE                NUM:         
07AE   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07B1   0A                     LD   a,(bc)   ; Get numeral or -
07B2   FE 2D                  CP   "-"   
07B4   20 01                  JR   nz,num0   
07B6   03                     INC   bc   ; move to next char, no flags affected
07B7                NUM0:        
07B7   08                     EX   af,af'   ; save zero flag = 0 for later
07B8                NUM1:        
07B8   0A                     LD   a,(bc)   ; read digit
07B9   D6 30                  SUB   "0"   ; less than 0?
07BB   38 13                  JR   c,num2   ; not a digit, exit loop
07BD   FE 0A                  CP   10   ; greater that 9?
07BF   30 0F                  JR   nc,num2   ; not a digit, exit loop
07C1   03                     INC   bc   ; inc IP
07C2   54 5D                  LD   de,hl   ; multiply hl * 10
07C4   29                     ADD   hl,hl   
07C5   29                     ADD   hl,hl   
07C6   19                     ADD   hl,de   
07C7   29                     ADD   hl,hl   
07C8   85                     ADD   a,l   ; add digit in a to hl
07C9   6F                     LD   l,a   
07CA   3E 00                  LD   a,0   
07CC   8C                     ADC   a,h   
07CD   67                     LD   h,a   
07CE   18 E8                  JR   num1   
07D0                NUM2:        
07D0   0B                     DEC   bc   
07D1   08                     EX   af,af'   ; restore zero flag
07D2   20 07                  JR   nz,num3   
07D4   EB                     EX   de,hl   ; negate the value of hl
07D5   21 00 00               LD   hl,0   
07D8   B7                     OR   a   ; jump to sub2
07D9   ED 52                  SBC   hl,de   
07DB                NUM3:        
07DB   E5                     PUSH   hl   ; Put the number on the stack
07DC   DD E9                  JP   (ix)   ; and process the next character
07DE                UNDERSCORE:      
07DE                REMAIN:      
07DE   2A F4 21               LD   hl,(vRemain)   
07E1   E5                     PUSH   hl   
07E2   DD E9                  JP   (ix)   
07E4                RPAREN:      
07E4   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07E7   FD 46 09               LD   b,(iy+9)   
07EA   DD E9                  JP   (ix)   
07EC                             ; arg_list* block* -- ptr
07EC                SEMICOLON:      
07EC   D1                     POP   de   ; de = block* hl = heap*
07ED   2A F0 21               LD   hl,(vHeapPtr)   
07F0   AF                     XOR   a   
07F1   77                     LD   (hl),a   ; compile null partial_array*
07F2   23                     INC   hl   
07F3   77                     LD   (hl),a   
07F4   23                     INC   hl   
07F5   73                     LD   (hl),e   ; compile block*
07F6   23                     INC   hl   
07F7   72                     LD   (hl),d   
07F8   23                     INC   hl   
07F9   D1                     POP   de   ; de = block*
07FA   73                     LD   (hl),e   ; compile arg_list*
07FB   23                     INC   hl   
07FC   72                     LD   (hl),d   
07FD   23                     INC   hl   
07FE   ED 5B F0 21            LD   de,(vHeapPtr)   ; return lambda*
0802   D5                     PUSH   de   
0803   22 F0 21               LD   (vHeapPtr),hl   ; heap* += 4
0806   DD E9                  JP   (ix)   
0808                             ; shiftLeft
0808                             ; value count -- value2          shift left count places
0808                SHIFTLEFT:      
0808   50 59                  LD   de,bc   ; save IP
080A   C1                     POP   bc   ; bc = count
080B   41                     LD   b,c   ; b = loop counter
080C   E1                     POP   hl   
080D   04                     INC   b   ; test for counter=0 case
080E   18 01                  JR   shiftLeft2   
0810                SHIFTLEFT1:      
0810   29                     ADD   hl,hl   ; left shift hl
0811                SHIFTLEFT2:      
0811   10 FD                  DJNZ   shiftLeft1   
0813   E5                     PUSH   hl   
0814   42 4B                  LD   bc,de   ; restore IP
0816   DD E9                  JP   (ix)   
0818                             ; shiftRight
0818                             ; value count -- value2          shift left count places
0818                SHIFTRIGHT:      
0818   50 59                  LD   de,bc   ; save IP
081A   C1                     POP   bc   ; bc = count
081B   41                     LD   b,c   ; b = loop counter
081C   E1                     POP   hl   
081D   04                     INC   b   ; test for counter=0 case
081E   18 04                  JR   shiftRight2   
0820                SHIFTRIGHT1:      
0820   CB 3C                  SRL   h   ; right shift hl
0822   CB 1D                  RR   l   
0824                SHIFTRIGHT2:      
0824   10 FA                  DJNZ   shiftRight1   
0826   E5                     PUSH   hl   
0827   42 4B                  LD   bc,de   ; restore IP
0829   DD E9                  JP   (ix)   
082B                             ; string
082B                             ; -- ptr                        ; points to start of string chars,
082B                             ; length is stored at start - 2 bytes
082B                DBLQUOTE:      
082B                STRING:      
082B   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap*
082E   23                     INC   hl   ; skip length field to start
082F   23                     INC   hl   
0830   E5                     PUSH   hl   ; save start of string
0831   03                     INC   bc   ; point to next char
0832   18 03                  JR   string2   
0834                STRING1:      
0834   77                     LD   (hl),a   
0835   23                     INC   hl   ; increase count
0836   03                     INC   bc   ; point to next char
0837                STRING2:      
0837   0A                     LD   a,(bc)   
0838   FE 22                  CP   DQUOTE   ; " is the string terminator
083A   28 04                  JR   z,string3   
083C   FE 60                  CP   "`"   ; ` is the string terminator used in testing
083E   20 F4                  JR   nz,string1   
0840                STRING3:      
0840   AF                     XOR   a   ; write NUL to terminate string
0841   77                     LD   (hl),a   ; hl = end of string
0842   23                     INC   hl   
0843   22 F0 21               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0846   2B                     DEC   hl   ; hl = end of string without terminator
0847   D1                     POP   de   ; de = start of string
0848   D5                     PUSH   de   ; return start of string
0849   B7                     OR   a   ; hl = length bytes, de = start of string
084A   ED 52                  SBC   hl,de   
084C   EB                     EX   de,hl   
084D   2B                     DEC   hl   ; write length bytes to length field at start - 2
084E   72                     LD   (hl),d   
084F   2B                     DEC   hl   
0850   73                     LD   (hl),e   
0851   DD E9                  JP   (ix)   
0853                MINUS:       ; negative sign or subtract
0853   03                     INC   bc   ; check if sign of a number
0854   0A                     LD   a,(bc)   
0855   0B                     DEC   bc   
0856   FE 30                  CP   "0"   
0858   38 05                  JR   c,sub   
085A   FE 3A                  CP   "9"+1   
085C   DA 3E 03               JP   c,num_   
085F                SUB:         ; Subtract the value 2nd on stack from top of stack
085F   03                     INC   bc   
0860   FE 2D                  CP   "-"   
0862   20 05                  JR   nz,sub1   
0864   E1                     POP   hl   
0865   2B                     DEC   hl   
0866   C3 8C 04               JP   assign0   
0869                SUB1:        
0869   0B                     DEC   bc   
086A   D1                     POP   de   
086B   E1                     POP   hl   
086C   B7                     OR   a   
086D   ED 52                  SBC   hl,de   
086F   C3 96 03               JP   add3   
0872                             ;*******************************************************************
0872                             ; commands
0872                             ; a contains command letter
0872                             ; bc points to command letter
0872                             ;*******************************************************************
0872                COMMAND:      
0872   FE 2F                  CP   "/"   ; // comment
0874   CA CD 08               JP   z,comment   
0877   FE 61                  CP   "a"   ; /ab absolute /ad address of
0879   28 5B                  JR   z,command_a   
087B   FE 62                  CP   "b"   ; /ba buf array /bb buf block
087D                             ; /bd buf decimal /bp buf params
087D                             ; /bs buf string /br break
087D   CA 13 09               JP   z,command_b   
0880   FE 63                  CP   "c"   ; /c chars
0882   CA 94 0B               JP   z,chars   
0885   FE 64                  CP   "d"   ; /d decimal
0887   CA 9C 0B               JP   z,decimal   
088A   FE 66                  CP   "f"   ; /f false
088C   CA 9B 06               JP   z,false1   
088F   FE 68                  CP   "h"   ; /h hexadecimal
0891   CA A4 0B               JP   z,hexadecimal   
0894   FE 69                  CP   "i"   ; /in input iv invert
0896   CA 85 0B               JP   z,command_i   
0899   FE 6B                  CP   "k"   ; /k key
089B   CA B5 0B               JP   z,key   
089E   FE 6E                  CP   "n"   ; /n numbers
08A0   CA C7 0B               JP   z,numbers   
08A3   FE 6F                  CP   "o"   ; /o output
08A5   CA BE 0B               JP   z,output   
08A8   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
08AA   CA B0 0A               JP   z,command_p   
08AD   FE 73                  CP   "s"   ; /s size
08AF   CA FD 0A               JP   z,size   
08B2   FE 74                  CP   "t"   ; /t true
08B4   CA 95 06               JP   z,true1   
08B7   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
08B9   CA 32 0B               JP   z,command_v   
08BC   FE 78                  CP   "x"   ; /x xor
08BE   CA B7 03               JP   z,xor   
08C1   FE 7A                  CP   "z"   ; /z
08C3   CA CF 0B               JP   z,zprt   
08C6                ERROR1:      
08C6   21 01 00               LD   hl,1   ; error 1: unknown command
08C9   E5                     PUSH   hl   
08CA   C3 2C 0D               JP   error   
08CD                COMMENT:      
08CD   03                     INC   bc   ; point to next char
08CE   0A                     LD   a,(bc)   
08CF   FE 20                  CP   " "   ; terminate on any char less than SP
08D1   30 FA                  JR   nc,comment   
08D3   0B                     DEC   bc   
08D4   DD E9                  JP   (ix)   
08D6                COMMAND_A:      
08D6   03                     INC   bc   
08D7   0A                     LD   a,(bc)   
08D8   FE 62                  CP   "b"   
08DA   CA E5 08               JP   z,absolute   
08DD   FE 64                  CP   "d"   
08DF   CA F2 08               JP   z,addrOf   
08E2   C3 C6 08               JP   error1   
08E5                             ; /ab absolute
08E5                             ; num -- num
08E5                ABSOLUTE:      
08E5   E1                     POP   hl   
08E6   CB 7C                  BIT   7,h   
08E8   C8                     RET   z   
08E9   AF                     XOR   a   
08EA   95                     SUB   l   
08EB   6F                     LD   l,a   
08EC   9F                     SBC   a,a   
08ED   94                     SUB   h   
08EE   67                     LD   h,a   
08EF   E5                     PUSH   hl   
08F0   DD E9                  JP   (ix)   
08F2                             ; /ad addrOf
08F2                             ; char -- addr
08F2                ADDROF:      
08F2   E1                     POP   hl   ; a = char
08F3   7D                     LD   a,l   
08F4   FE 7B                  CP   "z"+1   ; if a > z then exit
08F6   30 19                  JR   nc,addrOf2   
08F8   D6 41                  SUB   "A"   ; a - 65
08FA   38 15                  JR   c,addrOf2   ; if < A then exit
08FC   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08FE   38 06                  JR   c,addrOf1   
0900   D6 06                  SUB   "a"-("Z"+1)   
0902   FE 1A                  CP   "Z"-"A"+1   
0904   38 0B                  JR   c,addrOf2   ; if < a then exit
0906                ADDROF1:      
0906   87                     ADD   a,a   ; double a
0907   21 00 21               LD   hl,VARS   ; hl = VARS + a
090A   85                     ADD   a,l   
090B   6F                     LD   l,a   
090C   3E 00                  LD   a,0   
090E   8C                     ADC   a,h   
090F   67                     LD   h,a   
0910   E5                     PUSH   hl   
0911                ADDROF2:      
0911   DD E9                  JP   (ix)   
0913                COMMAND_B:      
0913   03                     INC   bc   
0914   0A                     LD   a,(bc)   
0915   FE 61                  CP   "a"   ; /bc buffer array
0917   CA 3B 09               JP   z,bufferArray   
091A   FE 63                  CP   "c"   ; /bc buffer char
091C   CA C7 09               JP   z,bufferChar   
091F   FE 64                  CP   "d"   ; /bd buffer decimal
0921   CA D6 09               JP   z,bufferDec   
0924   FE 68                  CP   "h"   ; /bd buffer hexadecimal
0926   CA 37 0A               JP   z,bufferHex   
0929   FE 72                  CP   "r"   ; /br break
092B   CA 66 0A               JP   z,break   
092E   FE 73                  CP   "s"   ; /bs buffer string
0930   CA 80 0A               JP   z,bufferString   
0933   FE 78                  CP   "x"   ; /bx buffer x spaces
0935   CA 9C 0A               JP   z,bufferXSpaces   
0938   C3 C6 08               JP   error1   
093B                BUFFERARRAY:      
093B   CD A1 06               CALL   go   
093E   00 00                  DW   NUL   ; closure
0940   44 09                  DW   bufferArray_block   
0942   13 0C                  DW   args1A2L   
0944                BUFFERARRAY_BLOCK:      
0944   7B 24 61 2F 73 24 63 3D 20 60 5B 20 60 2E 73 20 30 24 62 3D 28 24 61 24 62 25 2E 20 24 62 2B 2B 20 24 63 24 62 3D 3D 2F 62 29 5E 60 20 5D 60 7D 00 .CSTR   "{$a/s$c= `[ `.s 0$b=($a$b%. $b++ $c$b==/b)^` ]`}"   ; block
0975   ED 43 FE 21            LD   (vTemp1),bc   
0979   DD 22 00 22            LD   (vTemp2),ix   
097D   ED 5B EC 21            LD   de,(vBufPtr)   
0981   3E 5B                  LD   a,"["   
0983   12                     LD   (de),a   
0984   13                     INC   de   
0985   3E 20                  LD   a," "   
0987   12                     LD   (de),a   
0988   13                     INC   de   
0989   ED 53 EC 21            LD   (vBufPtr),de   
098D   E1                     POP   hl   
098E   2B                     DEC   hl   
098F   2B                     DEC   hl   
0990   2B                     DEC   hl   
0991   46                     LD   b,(hl)   
0992   2B                     DEC   hl   
0993   4E                     LD   c,(hl)   
0994   23                     INC   hl   
0995   23                     INC   hl   
0996   23                     INC   hl   
0997   E5                     PUSH   hl   
0998   DD 21 A8 09            LD   ix,bufferArray3   
099C   DD E9                  JP   (ix)   
099E                BUFFERARRAY2:      
099E   0B                     DEC   bc   
099F   5E                     LD   e,(hl)   
09A0   23                     INC   hl   
09A1   56                     LD   d,(hl)   
09A2   23                     INC   hl   
09A3   E5                     PUSH   hl   
09A4   D5                     PUSH   de   
09A5   C3 D6 09               JP   bufferDec   
09A8                BUFFERARRAY3:      
09A8   E1                     POP   hl   
09A9   79                     LD   a,c   
09AA   B0                     OR   b   
09AB   20 F1                  JR   nz,bufferArray2   
09AD   ED 5B EC 21            LD   de,(vBufPtr)   
09B1   3E 20                  LD   a," "   
09B3   12                     LD   (de),a   
09B4   13                     INC   de   
09B5   3E 5D                  LD   a,"]"   
09B7   12                     LD   (de),a   
09B8   13                     INC   de   
09B9   ED 53 EC 21            LD   (vBufPtr),de   
09BD   ED 4B FE 21            LD   bc,(vTemp1)   
09C1   DD 2A 00 22            LD   ix,(vTemp2)   
09C5   DD E9                  JP   (ix)   
09C7                             ; /bc buffer char
09C7                             ; char -- length
09C7                BUFFERCHAR:      
09C7   D1                     POP   de   ; e = char
09C8   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
09CB   73                     LD   (hl),e   ; e -> buffer*
09CC   23                     INC   hl   ; buffer*++
09CD   22 EC 21               LD   (vBufPtr),hl   ; save buffer*' in pointer
09D0   11 01 00               LD   de,1   ; return 1 byte
09D3   D5                     PUSH   de   
09D4   DD E9                  JP   (ix)   
09D6                             ; /bd buffer decimal
09D6                             ; value -- length               ; length can be used to rewind buffer*
09D6                BUFFERDEC:      
09D6   ED 5B EC 21            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
09DA   D9                     EXX      
09DB   E1                     POP   hl   ; hl = value
09DC   CD EE 09               CALL   bufferDec0   
09DF   D9                     EXX      ; de = buffer*' bc = IP
09E0   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
09E3   ED 53 EC 21            LD   (vBufPtr),de   ; update buffer* with buffer*'
09E7   EB                     EX   de,hl   ; hl = length
09E8   B7                     OR   a   
09E9   ED 52                  SBC   hl,de   
09EB   E5                     PUSH   hl   ; return length
09EC   DD E9                  JP   (ix)   
09EE                             ; hl = value
09EE                             ; de' = buffer*
09EE                             ; a, bc, de, hl destroyed
09EE                BUFFERDEC0:      
09EE   CB 7C                  BIT   7,h   
09F0   28 0C                  JR   z,bufferDec1   
09F2   D9                     EXX      
09F3   3E 2D                  LD   a,"-"   
09F5   12                     LD   (de),a   
09F6   13                     INC   de   
09F7   D9                     EXX      
09F8   AF                     XOR   a   
09F9   95                     SUB   l   
09FA   6F                     LD   l,a   
09FB   9F                     SBC   a,a   
09FC   94                     SUB   h   
09FD   67                     LD   h,a   
09FE                BUFFERDEC1:      
09FE   0E 00                  LD   c,0   ; leading zeros flag = false
0A00   11 F0 D8               LD   de,-10000   
0A03   CD 1E 0A               CALL   bufferDec2   
0A06   11 18 FC               LD   de,-1000   
0A09   CD 1E 0A               CALL   bufferDec2   
0A0C   11 9C FF               LD   de,-100   
0A0F   CD 1E 0A               CALL   bufferDec2   
0A12   1E F6                  LD   e,-10   
0A14   CD 1E 0A               CALL   bufferDec2   
0A17   0C                     INC   c   ; flag = true for at least digit
0A18   1E FF                  LD   e,-1   
0A1A   CD 1E 0A               CALL   bufferDec2   
0A1D   C9                     RET      
0A1E                BUFFERDEC2:      
0A1E   06 2F                  LD   b,"0"-1   
0A20                BUFFERDEC3:      
0A20   04                     INC   b   
0A21   19                     ADD   hl,de   
0A22   38 FC                  JR   c,bufferDec3   
0A24   ED 52                  SBC   hl,de   
0A26   3E 30                  LD   a,"0"   
0A28   B8                     CP   b   
0A29   20 05                  JR   nz,bufferDec4   
0A2B   AF                     XOR   a   
0A2C   B1                     OR   c   
0A2D   C8                     RET   z   
0A2E   18 01                  JR   bufferDec5   
0A30                BUFFERDEC4:      
0A30   0C                     INC   c   
0A31                BUFFERDEC5:      
0A31   78                     LD   a,b   
0A32   D9                     EXX      
0A33   12                     LD   (de),a   
0A34   13                     INC   de   
0A35   D9                     EXX      
0A36   C9                     RET      
0A37                             ; /bh buffer hex
0A37                             ; value -- length               ; length can be used to rewind buffer*
0A37                BUFFERHEX:      
0A37   E1                     POP   hl   ; hl = value
0A38   ED 5B EC 21            LD   de,(vBufPtr)   
0A3C   7C                     LD   a,h   
0A3D   CD 52 0A               CALL   bufferHex1   
0A40   7D                     LD   a,l   
0A41   CD 52 0A               CALL   bufferHex1   
0A44   EB                     EX   de,hl   
0A45   ED 5B EC 21            LD   de,(vBufPtr)   
0A49   22 EC 21               LD   (vBufPtr),hl   
0A4C   B7                     OR   a   
0A4D   ED 52                  SBC   hl,de   
0A4F   E5                     PUSH   hl   
0A50   DD E9                  JP   (ix)   
0A52                BUFFERHEX1:      
0A52   F5                     PUSH   af   
0A53   1F                     RRA      
0A54   1F                     RRA      
0A55   1F                     RRA      
0A56   1F                     RRA      
0A57   CD 5B 0A               CALL   bufferHex2   
0A5A   F1                     POP   af   
0A5B                BUFFERHEX2:      
0A5B   E6 0F                  AND   0x0F   
0A5D   C6 90                  ADD   a,0x90   
0A5F   27                     DAA      
0A60   CE 40                  ADC   a,0x40   
0A62   27                     DAA      
0A63   12                     LD   (de),a   
0A64   13                     INC   de   
0A65   C9                     RET      
0A66                             ; /br break from loop
0A66                             ; --
0A66                BREAK:       
0A66   E1                     POP   hl   
0A67   7D                     LD   a,l   
0A68   B4                     OR   h   
0A69   28 02                  JR   z,break1   
0A6B   DD E9                  JP   (ix)   
0A6D                BREAK1:      
0A6D   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0A6F   FD 54                  LD   d,iyh   
0A71   21 08 00               LD   hl,8   
0A74   19                     ADD   hl,de   
0A75   23                     INC   hl   
0A76   23                     INC   hl   
0A77   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0A7A   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0A7D   C3 3B 05               JP   blockEnd   
0A80                             ; /bs buffered string
0A80                             ; string* -- length
0A80                BUFFERSTRING:      
0A80   E1                     POP   hl   ; hl = string*
0A81   ED 5B EC 21            LD   de,(vBufPtr)   ; de = buffer*
0A85   18 03                  JR   bufferString1   
0A87                BUFFERSTRING0:      
0A87   12                     LD   (de),a   ; a -> buffer*
0A88   13                     INC   de   ; string*++ buffer++
0A89   23                     INC   hl   
0A8A                BUFFERSTRING1:      
0A8A   7E                     LD   a,(hl)   ; a <- string*
0A8B   B7                     OR   a   ; if NUL exit loop
0A8C   20 F9                  JR   nz,bufferString0   
0A8E   2A EC 21               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
0A91   ED 53 EC 21            LD   (vBufPtr),de   ; save buffer*' in pointer
0A95   EB                     EX   de,hl   ; hl = length
0A96   B7                     OR   a   
0A97   ED 52                  SBC   hl,de   
0A99   E5                     PUSH   hl   ; return length
0A9A   DD E9                  JP   (ix)   
0A9C                             ; /bx buffered x spaces
0A9C                             ; length -- length
0A9C                BUFFERXSPACES:      
0A9C   D1                     POP   de   ; bc = length
0A9D   D5                     PUSH   de   ; return length
0A9E   2A EC 21               LD   hl,(vBufPtr)   ; hl = buffer*
0AA1   18 04                  JR   bufferXSpaces2   
0AA3                BUFFERXSPACES1:      
0AA3   36 20                  LD   (hl)," "   
0AA5   23                     INC   hl   
0AA6   1B                     DEC   de   
0AA7                BUFFERXSPACES2:      
0AA7   7B                     LD   a,e   
0AA8   B2                     OR   d   
0AA9   20 F8                  JR   nz,bufferXSpaces1   
0AAB   22 EC 21               LD   (vBufPtr),hl   ; save buffer*'
0AAE   DD E9                  JP   (ix)   
0AB0                COMMAND_P:      
0AB0   03                     INC   bc   
0AB1   0A                     LD   a,(bc)   
0AB2   FE 61                  CP   "a"   
0AB4   CA C9 0A               JP   z,partial   
0AB7   FE 63                  CP   "c"   
0AB9   CA E9 0A               JP   z,printChars   
0ABC   FE 6B                  CP   "k"   
0ABE   CA FB 0A               JP   z,printStack   
0AC1   FE 78                  CP   "x"   
0AC3   CA 07 0B               JP   z,printX   
0AC6   C3 C6 08               JP   error1   
0AC9                             ; partial
0AC9                             ; array* lambda* -- lambda1*
0AC9                PARTIAL:      
0AC9   E1                     POP   hl   ; h1 = lambda*
0ACA   ED 5B F0 21            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0ACE   ED 43 FE 21            LD   (vTemp1),bc   ; save IP
0AD2   01 06 00               LD   bc,6   ; bc = count
0AD5   ED B0                  LDIR      ; clone lambda
0AD7   ED 4B FE 21            LD   bc,(vTemp1)   ; restore IP
0ADB   2A F0 21               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0ADE   ED 53 F0 21            LD   (vHeapPtr),de   ; heap* += 6
0AE2   D1                     POP   de   ; de = array*
0AE3   E5                     PUSH   hl   ; return partial_array*
0AE4   73                     LD   (hl),e   ; compile array*
0AE5   23                     INC   hl   
0AE6   72                     LD   (hl),d   
0AE7   DD E9                  JP   (ix)   
0AE9                             ; printChars
0AE9                             ; char* len --
0AE9                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0AE9                PRINTCHARS:      
0AE9   E1                     POP   hl   
0AEA   2B                     DEC   hl   
0AEB   D1                     POP   de   
0AEC   C3 F1 0A               JP   printChars2   
0AEF                PRINTCHARS1:      
0AEF   13                     INC   de   
0AF0   2B                     DEC   hl   
0AF1                PRINTCHARS2:      
0AF1   1A                     LD   a,(de)   
0AF2   CD 85 00               CALL   putchar   
0AF5   7D                     LD   a,l   
0AF6   B4                     OR   h   
0AF7   20 F6                  JR   nz,printChars1   
0AF9   DD E9                  JP   (ix)   
0AFB                             ; /pk print stack
0AFB                             ; --
0AFB                PRINTSTACK:      
0AFB                             ;     ld (vTemp1),bc
0AFB                             ;     call printStr
0AFB                             ;     .cstr "=> "
0AFB                             ;     ld hl,STACK
0AFB                             ;     sbc hl,sp
0AFB                             ;     srl h
0AFB                             ;     rr l
0AFB                             ;     ld bc,hl
0AFB                             ;     ld hl,STACK
0AFB                             ;     jr printStack2
0AFB                             ; printStack1:
0AFB                             ;     dec bc
0AFB                             ;     dec hl
0AFB                             ;     ld d,(hl)
0AFB                             ;     dec hl
0AFB                             ;     ld e,(hl)
0AFB                             ;     ex de,hl
0AFB                             ;     call prthex
0AFB                             ;     ex de,hl
0AFB                             ;     ld a," "
0AFB                             ;     call putchar
0AFB                             ; printStack2:
0AFB                             ;     ld a,c
0AFB                             ;     or b
0AFB                             ;     jr nz,printStack1
0AFB                             ;     call prompt
0AFB                             ;     ld bc,(vTemp1)
0AFB   DD E9                  JP   (ix)   
0AFD                SIZE:        
0AFD   E1                     POP   hl   
0AFE   2B                     DEC   hl   ; skip magic byte
0AFF   2B                     DEC   hl   ; skip type tag
0B00   2B                     DEC   hl   ; msb size
0B01   56                     LD   d,(hl)   
0B02   2B                     DEC   hl   ; lsb size
0B03   5E                     LD   e,(hl)   
0B04   D5                     PUSH   de   
0B05   DD E9                  JP   (ix)   
0B07                PRINTX:      
0B07   CD A1 06               CALL   go   
0B0A   00 00                  DW   NUL   ; closure
0B0C   10 0B                  DW   printX_block   
0B0E   08 0C                  DW   args1A0L   
0B10                PRINTX_BLOCK:      
0B10   7B 24 61 20 31 2F 62 78 2B 24 61 3D 20 2F 76 62 24 61 2D 2F 76 62 3D 20 2F 76 62 24 61 2F 70 63 7D 00 .CSTR   "{$a 1/bx+$a= /vb$a-/vb= /vb$a/pc}"   ; block
0B32                COMMAND_V:      
0B32   03                     INC   bc   
0B33   0A                     LD   a,(bc)   
0B34   FE 62                  CP   "b"   
0B36   CA 64 0B               JP   z,varBufPtr   
0B39   FE 68                  CP   "h"   
0B3B   CA 6D 0B               JP   z,varHeapPtr   
0B3E   FE 74                  CP   "t"   
0B40   CA 76 0B               JP   z,varTIBPtr   
0B43   FE 42                  CP   "B"   
0B45   CA 55 0B               JP   z,constBufStart   
0B48   FE 48                  CP   "H"   
0B4A   CA 5A 0B               JP   z,constHeapStart   
0B4D   FE 54                  CP   "T"   
0B4F   CA 5F 0B               JP   z,constTIBStart   
0B52   C3 C6 08               JP   error1   
0B55                CONSTBUFSTART:      
0B55   11 00 24               LD   de,BUF   
0B58   18 28                  JR   constant   
0B5A                CONSTHEAPSTART:      
0B5A   11 00 26               LD   de,HEAP   
0B5D   18 23                  JR   constant   
0B5F                CONSTTIBSTART:      
0B5F   11 00 23               LD   de,TIB   
0B62   18 1E                  JR   constant   
0B64                VARBUFPTR:      
0B64   ED 5B EC 21            LD   de,(vBufPtr)   
0B68   21 EC 21               LD   hl,vBufPtr   
0B6B   18 12                  JR   variable   
0B6D                VARHEAPPTR:      
0B6D   ED 5B F0 21            LD   de,(vHeapPtr)   
0B71   21 F0 21               LD   hl,vHeapPtr   
0B74   18 09                  JR   variable   
0B76                VARTIBPTR:      
0B76   ED 5B EA 21            LD   de,(vTIBPtr)   
0B7A   21 EA 21               LD   hl,vTIBPtr   
0B7D   18 00                  JR   variable   
0B7F                VARIABLE:      
0B7F   22 F2 21               LD   (vPointer),hl   
0B82                CONSTANT:      
0B82   D5                     PUSH   de   
0B83   DD E9                  JP   (ix)   
0B85                COMMAND_I:      
0B85   03                     INC   bc   
0B86   0A                     LD   a,(bc)   
0B87   FE 6E                  CP   "n"   ; /in input
0B89   CA AA 0B               JP   z,input   
0B8C   FE 76                  CP   "v"   ; /iv invert
0B8E   CA C2 03               JP   z,invert   
0B91   C3 C6 08               JP   error1   
0B94                CHARS:       
0B94   21 01 00               LD   hl,1   
0B97                CHARS1:      
0B97   22 E6 21               LD   (vDataWidth),hl   
0B9A   DD E9                  JP   (ix)   
0B9C                DECIMAL:      
0B9C   21 0A 00               LD   hl,10   
0B9F                DECIMAL1:      
0B9F   22 E8 21               LD   (vNumBase),hl   
0BA2   DD E9                  JP   (ix)   
0BA4                HEXADECIMAL:      
0BA4   21 10 00               LD   hl,16   
0BA7   C3 9F 0B               JP   decimal1   
0BAA                             ; Z80 port input
0BAA                             ; port -- value
0BAA                INPUT:       
0BAA   E1                     POP   hl   
0BAB   59                     LD   e,c   ; save IP
0BAC   4D                     LD   c,l   
0BAD   ED 68                  IN   l,(c)   
0BAF   26 00                  LD   h,0   
0BB1   4B                     LD   c,e   ; restore IP
0BB2   E5                     PUSH   hl   
0BB3   DD E9                  JP   (ix)   
0BB5                KEY:         
0BB5   CD 81 00               CALL   getchar   
0BB8   26 00                  LD   h,0   
0BBA   6F                     LD   l,a   
0BBB   E5                     PUSH   hl   
0BBC   DD E9                  JP   (ix)   
0BBE                             ; Z80 port output
0BBE                             ; value port --
0BBE                OUTPUT:      
0BBE   E1                     POP   hl   
0BBF   59                     LD   e,c   ; save IP
0BC0   4D                     LD   c,l   
0BC1   E1                     POP   hl   
0BC2   ED 69                  OUT   (c),l   
0BC4   4B                     LD   c,e   ; restore IP
0BC5   DD E9                  JP   (ix)   
0BC7                NUMBERS:      
0BC7   21 02 00               LD   hl,2   
0BCA   C3 97 0B               JP   chars1   
0BCD                             ; 
0BCD                             ; 
0BCD                             ; 
0BCD                             ; 
0BCD                FILTER:      
0BCD                MAP:         
0BCD                SCAN:        
0BCD   DD E9                  JP   (ix)   
0BCF                ZPRT:        
0BCF   CD A1 06               CALL   go   
0BD2   00 00                  DW   NUL   ; closure
0BD4   DC 0B                  DW   zprt_block   
0BD6   DA 0B                  DW   zprt_args   
0BD8   02                     DB   2   ; num args + locals
0BD9   01                     DB   1   ; num locals
0BDA                ZPRT_ARGS:      
0BDA   6E 73                  DB   "ns"   
0BDC                ZPRT_BLOCK:      
0BDC   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0C03                             ;*******************************************************************
0C03                             ; reusable arglists
0C03                             ;*******************************************************************
0C03                ARGS0A1L_:      ; zero args one local
0C03   01                     DB   1   ; num args + locals
0C04   01                     DB   1   ; num locals
0C05                ARGS0A1L:      
0C05   61                     DB   "a"   
0C06                ARGS1A0L_:      ; one arg zero locals
0C06   01                     DB   1   ; num args + locals
0C07   00                     DB   0   ; num locals
0C08                ARGS1A0L:      
0C08   61                     DB   "a"   
0C09                ARGS1A1L_:      ; one arg one local
0C09   02                     DB   2   ; num args + locals
0C0A   01                     DB   1   ; num locals
0C0B                ARGS1A1L:      
0C0B   61 62                  DB   "ab"   
0C0D                ARGS2A0L_:      ; two args zero locals
0C0D   02                     DB   2   ; num args + locals
0C0E   00                     DB   0   ; num locals
0C0F                ARGS2A0L:      
0C0F   61 62                  DB   "ab"   
0C11                ARGS1A2L_:      ; one arg two locals
0C11   03                     DB   3   ; num args + locals
0C12   02                     DB   2   ; num locals
0C13                ARGS1A2L:      
0C13   61 62 63               DB   "abc"   
0C16                             ;*******************************************************************
0C16                             ; general routines
0C16                             ;*******************************************************************
0C16                PRTSTR0:      
0C16   CD 85 00               CALL   putchar   
0C19   23                     INC   hl   
0C1A                PRTSTR:      
0C1A   7E                     LD   a,(hl)   
0C1B   B7                     OR   a   
0C1C   20 F8                  JR   nz,prtstr0   
0C1E   C9                     RET      
0C1F                             ; **************************************************************************
0C1F                             ; calculate nesting value
0C1F                             ; a is char to be tested,
0C1F                             ; e is the nesting value (initially 0)
0C1F                             ; e is increased by ( and [
0C1F                             ; e is decreased by ) and ]
0C1F                             ; e has its bit 7 toggled by `
0C1F                             ; limited to 127 levels
0C1F                             ; **************************************************************************
0C1F                NESTING:      
0C1F   FE 22                  CP   DQUOTE   ; quote char
0C21   28 06                  JR   z,nesting0   
0C23   FE 60                  CP   "`"   ; quote char
0C25   28 02                  JR   z,nesting0   
0C27   18 0A                  JR   nesting1   
0C29                NESTING0:      
0C29   CB 7B                  BIT   7,e   
0C2B   28 03                  JR   z,nesting1a   
0C2D   CB BB                  RES   7,e   
0C2F   C9                     RET      
0C30                NESTING1A:      
0C30   CB FB                  SET   7,e   
0C32   C9                     RET      
0C33                NESTING1:      
0C33   CB 7B                  BIT   7,e   
0C35   C0                     RET   nz   
0C36   FE 7B                  CP   "{"   
0C38   28 08                  JR   z,nesting2   
0C3A   FE 5B                  CP   "["   
0C3C   28 04                  JR   z,nesting2   
0C3E   FE 28                  CP   "("   
0C40   20 02                  JR   nz,nesting3   
0C42                NESTING2:      
0C42   1C                     INC   e   
0C43   C9                     RET      
0C44                NESTING3:      
0C44   FE 7D                  CP   "}"   
0C46   28 07                  JR   z,nesting4   
0C48   FE 5D                  CP   "]"   
0C4A   28 03                  JR   z,nesting4   
0C4C   FE 29                  CP   ")"   
0C4E   C0                     RET   nz   
0C4F                NESTING4:      
0C4F   1D                     DEC   e   
0C50   C9                     RET      
0C51                PROMPT:      
0C51   CD 61 0C               CALL   printStr   
0C54   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C59   C9                     RET      
0C5A                CRLF:        
0C5A   CD 61 0C               CALL   printStr   
0C5D   0D 0A 00               .CSTR   "\r\n"   
0C60   C9                     RET      
0C61                             ; prints a null teminated string
0C61                             ; the string should be immediately following the call
0C61                PRINTSTR:      
0C61   E3                     EX   (sp),hl   ; swap			
0C62   CD 1A 0C               CALL   prtstr   
0C65   23                     INC   hl   ; inc past NUL
0C66   E3                     EX   (sp),hl   ; put it back	
0C67   C9                     RET      
0C68                INIT:        
0C68   DD 2A EE 21            LD   ix,(vNext)   
0C6C   FD 21 80 20            LD   iy,STACK   
0C70   21 80 01               LD   hl,isysVars   
0C73   11 E6 21               LD   de,sysVars   
0C76   01 10 00               LD   bc,8 * 2   
0C79   ED B0                  LDIR      
0C7B   21 00 21               LD   hl,vars   ; 52 vars LO HI
0C7E   06 34                  LD   b,26*2   
0C80   AF                     XOR   a   
0C81                INIT0:       
0C81   77                     LD   (hl),a   
0C82   23                     INC   hl   
0C83   10 FC                  DJNZ   init0   
0C85   C9                     RET      
0C86                START:       
0C86   31 80 20               LD   sp,STACK   ; start Monty
0C89   CD 68 0C               CALL   init   ; setups
0C8C   CD 61 0C               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0C8F   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0C9C                INTERPRET:      
0C9C   CD 51 0C               CALL   prompt   
0C9F   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CA2   21 00 23               LD   hl,TIB   
0CA5   22 EA 21               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CA8                INTERPRET2:      ; calculate nesting
0CA8   1E 00                  LD   e,0   ; initilize nesting value
0CAA   C5                     PUSH   bc   ; save offset into TIB,
0CAB                             ; bc is also the count of chars in TIB
0CAB   21 00 23               LD   hl,TIB   ; hl is start of TIB
0CAE   18 06                  JR   interpret4   
0CB0                INTERPRET3:      
0CB0   7E                     LD   a,(hl)   ; a = char in TIB
0CB1   23                     INC   hl   ; inc pointer into TIB
0CB2   0B                     DEC   bc   ; dec count of chars in TIB
0CB3   CD 1F 0C               CALL   nesting   ; update nesting value
0CB6                INTERPRET4:      
0CB6   79                     LD   a,c   ; is count zero?
0CB7   B0                     OR   b   
0CB8   20 F6                  JR   nz,interpret3   ; if not loop
0CBA   C1                     POP   bc   ; restore offset into TIB
0CBB                INTERPRET5:      
0CBB   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CBE   FE 20                  CP   $20   ; compare to space
0CC0   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CC2   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CC4                             ; ???? NEEDED?
0CC4   28 3B                  JR   z,interpret8   
0CC6   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CC8   28 24                  JR   z,interpret7   ; if anything else its macro/control
0CCA   FE 05                  CP   CTRL_E   
0CCC   CA 4F 0D               JP   z,edit_   
0CCF   FE 08                  CP   CTRL_H   
0CD1   CA 3F 0D               JP   z,backSpace_   
0CD4   FE 0A                  CP   CTRL_J   
0CD6   CA 67 0D               JP   z,reEdit_   
0CD9   FE 13                  CP   CTRL_S   
0CDB   CA 6A 0D               JP   z,printStack_   
0CDE                             ; DB     lsb(edit_)       ; ENQ ^E  5
0CDE                             ; DB     lsb(reedit_)     ; LF  ^J 10
0CDE                             ; DB     lsb(list_)       ; FF  ^L 12
0CDE                             ; DB     lsb(printStack_) ; DLE ^P 16
0CDE                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0CDE                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0CDE                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0CDE                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0CDE                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0CDE                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0CDE                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0CDE                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0CDE                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0CDE                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0CDE                INTERPRET5A:      
0CDE                             ; ld (vTIBPtr),bc
0CDE                             ; ld bc,(vTIBPtr)
0CDE   18 C8                  JR   interpret2   
0CE0                INTERPRET6:      
0CE0   21 00 23               LD   hl,TIB   
0CE3   09                     ADD   hl,bc   
0CE4   77                     LD   (hl),a   ; store the character in textbuf
0CE5   03                     INC   bc   
0CE6   CD 85 00               CALL   putchar   ; echo character to screen
0CE9   CD 1F 0C               CALL   nesting   
0CEC   18 CD                  JR   interpret5   ; wait for next character
0CEE                INTERPRET7:      
0CEE   21 00 23               LD   hl,TIB   
0CF1   09                     ADD   hl,bc   
0CF2   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0CF4   23                     INC   hl   
0CF5   36 0A                  LD   (hl),"\n"   
0CF7   23                     INC   hl   
0CF8   03                     INC   bc   
0CF9   03                     INC   bc   
0CFA   CD 5A 0C               CALL   crlf   ; echo character to screen
0CFD   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0CFE   B7                     OR   a   
0CFF   20 BA                  JR   nz,interpret5   
0D01                INTERPRET8:      
0D01   21 00 23               LD   hl,TIB   
0D04   09                     ADD   hl,bc   
0D05   22 EA 21               LD   (vTIBPtr),hl   
0D08   01 00 23               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0D0B                             ; we pressed enter
0D0B   0B                     DEC   bc   
0D0C                NEXT:        
0D0C   03                     INC   bc   ; Increment the IP
0D0D   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D0E   FE 20                  CP   " "   ; whitespace?
0D10   28 FA                  JR   z,next   ; space? ignore
0D12   38 09                  JR   c,next1   
0D14   D6 20                  SUB   " "   
0D16   6F                     LD   l,a   ; index into table
0D17   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0D19   6E                     LD   l,(hl)   ; get low jump address
0D1A   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0D1C   E9                     JP   (hl)   ; Jump to routine
0D1D                NEXT1:       
0D1D   FE 00                  CP   NUL   ; end of input string?
0D1F   28 03                  JR   z,exit   
0D21   C3 9C 0C               JP   interpret   ; no, other whitespace, macros?
0D24                EXIT:        
0D24   03                     INC   bc   
0D25   60 69                  LD   hl,bc   
0D27   E9                     JP   (hl)   
0D28                RUN:         
0D28   C1                     POP   bc   
0D29   0B                     DEC   bc   
0D2A   DD E9                  JP   (ix)   
0D2C                ERROR:       
0D2C   CD 28 0D               CALL   run   
0D2F   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0D3C   C3 9C 0C               JP   interpret   
0D3F                BACKSPACE_:      
0D3F   79                     LD   a,c   
0D40   B0                     OR   b   
0D41   CA A8 0C               JP   z,interpret2   
0D44   0B                     DEC   bc   
0D45   CD 61 0C               CALL   printStr   
0D48   08 20 08 00            .CSTR   "\b \b"   
0D4C   C3 A8 0C               JP   interpret2   
0D4F                             ; edit
0D4F                EDIT_:       
0D4F   CD 28 0D               CALL   run   
0D52   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0D64   C3 9C 0C               JP   interpret   
0D67                REEDIT_:      
0D67   C3 9C 0C               JP   interpret   
0D6A                PRINTSTACK_:      
0D6A   CD 28 0D               CALL   run   
0D6D   2F 70 6B 00            .CSTR   "/pk"   
0D71   C3 9C 0C               JP   interpret   
0D74                             ; editDef:
0D74                             ;     pop hl                      ; pop ret address
0D74                             ;     ex (sp),hl                  ; swap with TOS
0D74                             ;     push hl                     ; dup TOS
0D74                             ;     ld a,l                      ; a = ident
0D74                             ;     ld de,TIB                   ; de = start of TIB
0D74                             ;     ld (vTIBPtr),de             ; update TIB*
0D74                             ;     push ix                     ; save NEXT
0D74                             ;     ld ix,editDef0              ; NEXT = editDef0
0D74                             ;     jp lookupRef                ; convert letter into address
0D74                             ; editDef0:
0D74                             ;     ld e,(hl)                   ; de = (hl++)
0D74                             ;     inc hl
0D74                             ;     ld d,(hl)
0D74                             ;     ld a,d                      ; de == 0 ?
0D74                             ;     or e
0D74                             ;     jr z,editDef4
0D74                             ;     ld ix,editDef3              ; NEXT = editDef3
0D74                             ;     ex de,hl
0D74                             ;     ld a,(hl)
0D74                             ;     cp "{"
0D74                             ;     jr nz,editDef1
0D74                             ;     jp editBlock0               ; convert letter into address
0D74                             ; editDef1:
0D74                             ;     cp "("
0D74                             ;     jr nz,editDef2
0D74                             ;     jp editBlock0               ; convert letter into address
0D74                             ; editDef2:
0D74                             ;     jp editLambda
0D74                             ; editDef3:
0D74                             ;     ld a," "                    ; write assign
0D74                             ;     call writeChar
0D74                             ;     pop hl                      ; a = ident
0D74                             ;     ld a,l
0D74                             ;     call writeChar
0D74                             ;     ld a,"="                    ; write assign
0D74                             ;     call writeChar
0D74                             ;     ld ix,editDef4              ; NEXT = editDef4
0D74                             ;     jp printTIB
0D74                             ; editDef4:
0D74                             ;     pop ix                      ; restore NEXT
0D74                             ;     jp (ix)
0D74                             ; writeChar:
0D74                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D74                             ;     ld (de),a                   ; write ident
0D74                             ;     inc de
0D74                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D74                             ;     ret
0D74                             ; ; printTIB
0D74                             ; printTIB:
0D74                             ;     ld hl,(vTIBPtr)
0D74                             ;     ld de,TIB
0D74                             ;     or a
0D74                             ;     sbc hl,de
0D74                             ;     jp printTIB2
0D74                             ; printTIB1:
0D74                             ;     ld a,(de)
0D74                             ;     call putchar
0D74                             ; printTIB2:
0D74                             ;     ld a,l
0D74                             ;     or h
0D74                             ;     jr nz,printTIB1
0D74                             ;     jp (ix)
0D74                             ; editBlock:
0D74                             ;     pop hl                      ; hl = block*
0D74                             ; editBlock0:
0D74                             ;     push ix                     ; save next
0D74                             ;     push hl                     ; push block*
0D74                             ;     push hl                     ; push block*
0D74                             ;     ld ix,(editBlock2)
0D74                             ;     jp blockLength
0D74                             ; editBlock1:
0D74                             ;     pop hl                      ; bc = length, (sp) = IP
0D74                             ;     pop de                      ; de = block*
0D74                             ;     ld a,l
0D74                             ;     or h
0D74                             ;     jr z,editBlock2
0D74                             ;     push bc
0D74                             ;     ld bc,hl
0D74                             ;     ex de,hl                    ; hl = block*
0D74                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D74                             ;     ldir                        ; copy block to TIB
0D74                             ;     ld (vTIBPtr),de              ; save TIB*
0D74                             ;     pop bc
0D74                             ; editBlock2:
0D74                             ;     pop ix                      ; restore next
0D74                             ;     jp (ix)
0D74                             ; editLambda:
0D74                             ;     jp (ix)
0D74                             ; editArray:
0D74                             ;     jp (ix)
0D74                             ; editArglist:
0D74                             ;     jp (ix)
0D74                             ; ; blockLength
0D74                             ; ; addr1 -- length
0D74                             ; blockLength:
0D74                             ;     pop hl                      ; block*
0D74                             ;     push hl                     ; save block*
0D74                             ;     inc hl                      ; skip first char
0D74                             ;     ld d,1                      ; increase nesting
0D74                             ; blockLength1:                   ; Skip to end of definition
0D74                             ;     ld a,(hl)                   ; Get the next character
0D74                             ;     inc hl                      ; Point to next character
0D74                             ;     cp " " + 1                  ; ignore whitespace
0D74                             ;     jr c,blockLength1
0D74                             ;     cp ")"
0D74                             ;     jr z,blockLength4
0D74                             ;     cp "}"
0D74                             ;     jr z,blockLength4
0D74                             ;     cp "]"
0D74                             ;     jr z,blockLength4
0D74                             ;     cp "("
0D74                             ;     jr z,blockLength2
0D74                             ;     cp "{"
0D74                             ;     jr z,blockLength2
0D74                             ;     cp "["
0D74                             ;     jr z,blockLength2
0D74                             ;     cp "'"
0D74                             ;     jr z,blockLength3
0D74                             ;     cp "`"
0D74                             ;     jr z,blockLength3
0D74                             ;     cp DQUOTE
0D74                             ;     jr z,blockLength3
0D74                             ;     jr blockLength1
0D74                             ; blockLength2:
0D74                             ;     inc d
0D74                             ;     jr blockLength1
0D74                             ; blockLength4:
0D74                             ;     dec d
0D74                             ;     jr nz, blockLength1         ; get the next element
0D74                             ; blockLength3:
0D74                             ;     ld a,$80
0D74                             ;     xor d
0D74                             ;     ld d,a
0D74                             ;     jr nz, blockLength1
0D74                             ;     pop hl                      ; hl = block*
0D74                             ;     or a
0D74                             ;     sbc hl,de
0D74                             ;     push hl
0D74                             ;     jp (ix)
0D74                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D74                             ; \a start of stack \#3 depth \b base \$ prompt
0D74                             ; DW dStack               ; a vS0 start of datastack			
0D74                             ; DW FALSE                ; b vBase16
0D74                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D74                             ; DW 0                    ; d
0D74                             ; DW 65                   ; e vLastDef "A" last command u defined
0D74                             ; DW 0                    ; f
0D74                             ; DW page6                ; g 256 bytes limits
0D74                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D74                             ; 
2000                          .ORG   RAMSTART   
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2080                STACK:       
2080                          ALIGN   $100   
2100                VARS:        
2100                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
21D0                RESTARTS:      
21D0                RST08:    DS   2   
21D2                RST10:    DS   2   
21D4                RST18:    DS   2   
21D6                RST20:    DS   2   
21D8                RST28:    DS   2   
21DA                RST30:    DS   2   ; 
21DC                BAUD:     DS   2   ; 
21DE                INTVEC:   DS   2   ; 
21E0                NMIVEC:   DS   2   ; 
21E2                GETCVEC:   DS   2   ; 
21E4                PUTCVEC:   DS   2   ; 
21E6                SYSVARS:      
21E6                             ; initialised sys variables (preserved)
21E6                VDATAWIDTH:   DS   2   ; 
21E8                VNUMBASE:   DS   2   ; 
21EA                VTIBPTR:   DS   2   ; 
21EC                VBUFPTR:   DS   2   ; 
21EE                VNEXT:    DS   2   ; 
21F0                VHEAPPTR:   DS   2   ; 
21F2                             ; uninitialised sys variables (preserved)
21F2                VPOINTER:   DS   2   ; 
21F4                VREMAIN:   DS   2   ; 
21F6                VSAVEDIP:   DS   2   ; 
21F8                VSAVEDSP:   DS   2   ; 
21FA                VSAVEDBP:   DS   2   ; 
21FC                VCHECKSUM:   DS   2   ; 
21FE                             ; uninitialised sys variables (unpreserved)
21FE                VTEMP1:   DS   2   ; 
2200                VTEMP2:   DS   2   ; 
2202                VLASTDEF:   DS   2   ; 
2204                VHASHSTR:   DS   2   ; 
2206                TBPTR:    DS   2   ; reserved for tests
2208                          ALIGN   $100   
2300                TIB:      DS   TIBSIZE   
2400                BUF:      DS   BUFSIZE   
2500                          ALIGN   $100   
2500                PAD:      DS   $100   
2600                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 49 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 12
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0BCD DEFINED AT LINE 1826 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
STKSIZE:            0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 3 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 32 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 33 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 34 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 35 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 36 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 37 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 38 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 39 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 40 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 54 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 188 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 190 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 193 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 197 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 199 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 201 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 203 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 205 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 207 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 209 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 211 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 213 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 216 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 218 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 220 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 222 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 224 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 226 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 228 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 230 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 237 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 243 IN MAIN.asm
LT_:                036D DEFINED AT LINE 251 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 263 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 265 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 267 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 274 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 282 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 294 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 300 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 308 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 314 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 324 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 338 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 344 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 371 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 350 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 375 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 388 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 403 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 470 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 1240 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 491 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
COLON:              049B DEFINED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 507 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 525 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 524 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 554 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 620 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 672 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 678 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 225 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 696 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 264 IN MAIN.asm
DOT:                05DB DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
JUMPTABLE:          05ED DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
JUMPTABLE0:         05EF DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
JUMPTABLE1:         05FC DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 745 IN MAIN.asm
JUMPTABLE2:         05FD DEFINED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTARRAY:           0603 DEFINED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
DOTARRAY_BLOCK:     060C DEFINED AT LINE 779 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
DOTHEX:             0617 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
DOTHEX_BLOCK:       0620 DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DOTSTR:             062B DEFINED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
DOTSTR_BLOCK:       0634 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
DOTCHAR:            063F DEFINED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOTCHAR_BLOCK:      0648 DEFINED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
DOTDEC:             0653 DEFINED AT LINE 806 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
DOTDEC_BLOCK:       065C DEFINED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
DIVIDE:             0667 DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
DIVIDE1:            066C DEFINED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
DIVIDE2:            0679 DEFINED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
DIVIDE3:            067A DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
EQUALS:             0680 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
LESSTHANEQ:         0688 DEFINED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
LESSTHAN:           068D DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 262 IN MAIN.asm
LESSTHAN1:          0692 DEFINED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
TRUE1:              0695 DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
NULL1:              069B DEFINED AT LINE 865 IN MAIN.asm
FALSE1:             069B DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
CARET:              06A1 DEFINED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
GO:                 06A1 DEFINED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
GO1:                06A2 DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
GO2:                06A8 DEFINED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
GOBLOCK:            06B4 DEFINED AT LINE 890 IN MAIN.asm
GOBLOCK1:           06B4 DEFINED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
GOBLOCK2:           06D9 DEFINED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 992 IN MAIN.asm
GOLAMBDA:           06E7 DEFINED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
GOLAMBDA1:          0702 DEFINED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOLAMBDA2:          0708 DEFINED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
GOLAMBDA3:          0713 DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
GOLAMBDA4:          072B DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
GOLAMBDA5:          072F DEFINED AT LINE 972 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
GOLAMBDA6:          0732 DEFINED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
GOLAMBDA7:          0735 DEFINED AT LINE 979 IN MAIN.asm
GOLAMBDA8:          073A DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
HASH:               0745 DEFINED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
HEXNUM:             0745 DEFINED AT LINE 995 IN MAIN.asm
HEXNUM1:            0748 DEFINED AT LINE 997 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
HEXNUM2:            0750 DEFINED AT LINE 1003 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
UPCASE:             0762 DEFINED AT LINE 1015 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
LOWCASE:            0767 DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
IDENT1:             076C DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
QUESTION:           0779 DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
IF:                 0779 DEFINED AT LINE 1037 IN MAIN.asm
IFTE:               0785 DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 1041 IN MAIN.asm
IFTE1:              0786 DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
STAR:               0792 DEFINED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
MUL:                0792 DEFINED AT LINE 1060 IN MAIN.asm
MUL2:               0794 DEFINED AT LINE 1063 IN MAIN.asm
MUL3:               079C DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
NUM:                07AE DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
NUM0:               07B7 DEFINED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
NUM1:               07B8 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
NUM2:               07D0 DEFINED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
NUM3:               07DB DEFINED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
UNDERSCORE:         07DE DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
REMAIN:             07DE DEFINED AT LINE 1120 IN MAIN.asm
RPAREN:             07E4 DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
SEMICOLON:          07EC DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
SHIFTLEFT:          0808 DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
SHIFTLEFT1:         0810 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
SHIFTLEFT2:         0811 DEFINED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
SHIFTRIGHT:         0818 DEFINED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SHIFTRIGHT1:        0820 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
SHIFTRIGHT2:        0824 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
DBLQUOTE:           082B DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
STRING:             082B DEFINED AT LINE 1192 IN MAIN.asm
STRING1:            0834 DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1208 IN MAIN.asm
STRING2:            0837 DEFINED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
STRING3:            0840 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
MINUS:              0853 DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
SUB:                085F DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
SUB1:               0869 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
COMMAND:            0872 DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
ERROR1:             08C6 DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
COMMENT:            08CD DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
COMMAND_A:          08D6 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
ABSOLUTE:           08E5 DEFINED AT LINE 1315 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
ADDROF:             08F2 DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
ADDROF1:            0906 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
ADDROF2:            0911 DEFINED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
COMMAND_B:          0913 DEFINED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BUFFERARRAY:        093B DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
BUFFERARRAY_BLOCK:  0944 DEFINED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
BUFFERARRAY2:       099E DEFINED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
BUFFERARRAY3:       09A8 DEFINED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERCHAR:         09C7 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
BUFFERDEC:          09D6 DEFINED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
BUFFERDEC0:         09EE DEFINED AT LINE 1463 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
BUFFERDEC1:         09FE DEFINED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
BUFFERDEC2:         0A1E DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
BUFFERDEC3:         0A20 DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
BUFFERDEC4:         0A30 DEFINED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
BUFFERDEC5:         0A31 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
BUFFERHEX:          0A37 DEFINED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1364 IN MAIN.asm
BUFFERHEX1:         0A52 DEFINED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
BUFFERHEX2:         0A5B DEFINED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
BREAK:              0A66 DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
BREAK1:             0A6D DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
BUFFERSTRING:       0A80 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
BUFFERSTRING0:      0A87 DEFINED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
BUFFERSTRING1:      0A8A DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
BUFFERXSPACES:      0A9C DEFINED AT LINE 1593 IN MAIN.asm
                    > USED AT LINE 1370 IN MAIN.asm
BUFFERXSPACES1:     0AA3 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
BUFFERXSPACES2:     0AA7 DEFINED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
COMMAND_P:          0AB0 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
PARTIAL:            0AC9 DEFINED AT LINE 1624 IN MAIN.asm
                    > USED AT LINE 1613 IN MAIN.asm
PRINTCHARS:         0AE9 DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
PRINTCHARS1:        0AEF DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
PRINTCHARS2:        0AF1 DEFINED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
PRINTSTACK:         0AFB DEFINED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
SIZE:               0AFD DEFINED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
PRINTX:             0B07 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1619 IN MAIN.asm
PRINTX_BLOCK:       0B10 DEFINED AT LINE 1707 IN MAIN.asm
                    > USED AT LINE 1705 IN MAIN.asm
COMMAND_V:          0B32 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
CONSTBUFSTART:      0B55 DEFINED AT LINE 1727 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
CONSTHEAPSTART:     0B5A DEFINED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1722 IN MAIN.asm
CONSTTIBSTART:      0B5F DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
VARBUFPTR:          0B64 DEFINED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
VARHEAPPTR:         0B6D DEFINED AT LINE 1744 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
VARTIBPTR:          0B76 DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1718 IN MAIN.asm
VARIABLE:           0B7F DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
CONSTANT:           0B82 DEFINED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
COMMAND_I:          0B85 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
CHARS:              0B94 DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
CHARS1:             0B97 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
DECIMAL:            0B9C DEFINED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
DECIMAL1:           0B9F DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
HEXADECIMAL:        0BA4 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1270 IN MAIN.asm
INPUT:              0BAA DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
KEY:                0BB5 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1274 IN MAIN.asm
OUTPUT:             0BBE DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
NUMBERS:            0BC7 DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
FILTER:             0BCD DEFINED AT LINE 1824 IN MAIN.asm
MAP:                0BCD DEFINED AT LINE 1825 IN MAIN.asm
ZPRT:               0BCF DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
ZPRT_ARGS:          0BDA DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
ZPRT_BLOCK:         0BDC DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
ARGS0A1L_:          0C03 DEFINED AT LINE 1844 IN MAIN.asm
ARGS0A1L:           0C05 DEFINED AT LINE 1847 IN MAIN.asm
ARGS1A0L_:          0C06 DEFINED AT LINE 1850 IN MAIN.asm
ARGS1A0L:           0C08 DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
ARGS1A1L_:          0C09 DEFINED AT LINE 1856 IN MAIN.asm
ARGS1A1L:           0C0B DEFINED AT LINE 1859 IN MAIN.asm
ARGS2A0L_:          0C0D DEFINED AT LINE 1862 IN MAIN.asm
ARGS2A0L:           0C0F DEFINED AT LINE 1865 IN MAIN.asm
ARGS1A2L_:          0C11 DEFINED AT LINE 1868 IN MAIN.asm
ARGS1A2L:           0C13 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
PRTSTR0:            0C16 DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
PRTSTR:             0C1A DEFINED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
NESTING:            0C1F DEFINED AT LINE 1897 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
NESTING0:           0C29 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
NESTING1A:          0C30 DEFINED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
NESTING1:           0C33 DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
NESTING2:           0C42 DEFINED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
NESTING3:           0C44 DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
NESTING4:           0C4F DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
PROMPT:             0C51 DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
CRLF:               0C5A DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
PRINTSTR:           0C61 DEFINED AT LINE 1946 IN MAIN.asm
                    > USED AT LINE 1935 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 1972 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
INIT:               0C68 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 1971 IN MAIN.asm
INIT0:              0C81 DEFINED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
START:              0C86 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0C9C DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
INTERPRET2:         0CA8 DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
INTERPRET3:         0CB0 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 1998 IN MAIN.asm
INTERPRET4:         0CB6 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
INTERPRET5:         0CBB DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
INTERPRET5A:        0CDE DEFINED AT LINE 2037 IN MAIN.asm
INTERPRET6:         0CE0 DEFINED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
INTERPRET7:         0CEE DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
INTERPRET8:         0D01 DEFINED AT LINE 2065 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
NEXT:               0D0C DEFINED AT LINE 2073 IN MAIN.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
NEXT1:              0D1D DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
EXIT:               0D24 DEFINED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
RUN:                0D28 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 2099 IN MAIN.asm
                    > USED AT LINE 2114 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
ERROR:              0D2C DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 1294 IN MAIN.asm
BACKSPACE_:         0D3F DEFINED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
EDIT_:              0D4F DEFINED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
REEDIT_:            0D67 DEFINED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
PRINTSTACK_:        0D6A DEFINED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
STACK:              2080 DEFINED AT LINE 4 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
VARS:               2100 DEFINED AT LINE 8 IN ram.asm
                    > USED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
RESTARTS:           21D0 DEFINED AT LINE 10 IN ram.asm
RST08:              21D0 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              21D2 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              21D4 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              21D6 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              21D8 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              21DA DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               21DC DEFINED AT LINE 18 IN ram.asm
INTVEC:             21DE DEFINED AT LINE 19 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             21E0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            21E2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            21E4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            21E6 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 1957 IN MAIN.asm
VDATAWIDTH:         21E6 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
VNUMBASE:           21E8 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 1779 IN MAIN.asm
VTIBPTR:            21EA DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1980 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
VBUFPTR:            21EC DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
VNEXT:              21EE DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1954 IN MAIN.asm
VHEAPPTR:           21F0 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 413 IN MAIN.asm
                    > USED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
VPOINTER:           21F2 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 295 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 379 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
VREMAIN:            21F4 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
VSAVEDIP:           21F6 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           21F8 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           21FA DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          21FC DEFINED AT LINE 43 IN ram.asm
VTEMP1:             21FE DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
VTEMP2:             2200 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
VLASTDEF:           2202 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           2204 DEFINED AT LINE 50 IN ram.asm
TBPTR:              2206 DEFINED AT LINE 51 IN ram.asm
TIB:                2300 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
BUF:                2400 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 1728 IN MAIN.asm
PAD:                2500 DEFINED AT LINE 58 IN ram.asm
HEAP:               2600 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 65 IN MAIN.asm
                    > USED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
