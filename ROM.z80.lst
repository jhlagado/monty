0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 43 10               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   04                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   06                     DB   lsb(dollar_)   ; $     1
0184   09                     DB   lsb(percent_)   ; %     1
0185   7E                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   0F                     DB   lsb(lparen_)   ; (     1
0188   76                     DB   lsb(rparen_)   ; )     1
0189   A6                     DB   lsb(star_)   ; *     1
018A   CA                     DB   lsb(plus_)   ; +     1
018B   04                     DB   lsb(comma_)   ; ,     2
018C   88                     DB   lsb(minus_)   ; -     1
018D   12                     DB   lsb(dot_)   ; .     2
018E   15                     DB   lsb(slash_)   ; /	    1
018F   18                     DB   lsb(num_)   ; 0     1
0190   18                     DB   lsb(num_)   ; 1
0191   18                     DB   lsb(num_)   ; 2
0192   18                     DB   lsb(num_)   ; 3
0193   18                     DB   lsb(num_)   ; 4
0194   18                     DB   lsb(num_)   ; 5
0195   18                     DB   lsb(num_)   ; 6
0196   18                     DB   lsb(num_)   ; 7
0197   18                     DB   lsb(num_)   ; 8
0198   18                     DB   lsb(num_)   ; 9
0199   E6                     DB   lsb(colon_)   ; :     2
019A   1B                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   1E                     DB   lsb(question_)   ; ?     1
019F   FE                     DB   lsb(at_)   ; @     2
01A0   FC                     DB   lsb(upcase_)   ; A     1
01A1   FC                     DB   lsb(upcase_)   ; B
01A2   FC                     DB   lsb(upcase_)   ; C
01A3   FC                     DB   lsb(upcase_)   ; D
01A4   FC                     DB   lsb(upcase_)   ; E
01A5   FC                     DB   lsb(upcase_)   ; F
01A6   FC                     DB   lsb(upcase_)   ; G
01A7   FC                     DB   lsb(upcase_)   ; h
01A8   FC                     DB   lsb(upcase_)   ; I
01A9   FC                     DB   lsb(upcase_)   ; J
01AA   FC                     DB   lsb(upcase_)   ; K
01AB   FC                     DB   lsb(upcase_)   ; L
01AC   FC                     DB   lsb(upcase_)   ; M
01AD   FC                     DB   lsb(upcase_)   ; N
01AE   FC                     DB   lsb(upcase_)   ; O
01AF   FC                     DB   lsb(upcase_)   ; p
01B0   FC                     DB   lsb(upcase_)   ; Q
01B1   FC                     DB   lsb(upcase_)   ; R
01B2   FC                     DB   lsb(upcase_)   ; S
01B3   FC                     DB   lsb(upcase_)   ; T
01B4   FC                     DB   lsb(upcase_)   ; U
01B5   FC                     DB   lsb(upcase_)   ; V
01B6   FC                     DB   lsb(upcase_)   ; W
01B7   FC                     DB   lsb(upcase_)   ; X
01B8   FC                     DB   lsb(upcase_)   ; Y
01B9   FC                     DB   lsb(upcase_)   ; Z
01BA   27                     DB   lsb(lbrack_)   ; [     2
01BB   43                     DB   lsb(backslash_)   ; \     2
01BC   64                     DB   lsb(rbrack_)   ; ]     2
01BD   B4                     DB   lsb(caret_)   ; ^     1
01BE   F6                     DB   lsb(underscore_)   ; _     2
01BF   CA                     DB   lsb(grave_)   ; `     2   	
01C0   15                     DB   lsb(lowcase_)   ; a     1
01C1   15                     DB   lsb(lowcase_)   ; b
01C2   15                     DB   lsb(lowcase_)   ; c
01C3   15                     DB   lsb(lowcase_)   ; d
01C4   15                     DB   lsb(lowcase_)   ; e
01C5   15                     DB   lsb(lowcase_)   ; f
01C6   15                     DB   lsb(lowcase_)   ; g
01C7   15                     DB   lsb(lowcase_)   ; h
01C8   15                     DB   lsb(lowcase_)   ; i
01C9   15                     DB   lsb(lowcase_)   ; j
01CA   15                     DB   lsb(lowcase_)   ; k
01CB   15                     DB   lsb(lowcase_)   ; l
01CC   15                     DB   lsb(lowcase_)   ; m
01CD   15                     DB   lsb(lowcase_)   ; n
01CE   15                     DB   lsb(lowcase_)   ; o
01CF   15                     DB   lsb(lowcase_)   ; p
01D0   15                     DB   lsb(lowcase_)   ; q
01D1   15                     DB   lsb(lowcase_)   ; r
01D2   15                     DB   lsb(lowcase_)   ; s
01D3   15                     DB   lsb(lowcase_)   ; t
01D4   15                     DB   lsb(lowcase_)   ; u
01D5   15                     DB   lsb(lowcase_)   ; v
01D6   15                     DB   lsb(lowcase_)   ; w
01D7   15                     DB   lsb(lowcase_)   ; x
01D8   15                     DB   lsb(lowcase_)   ; y
01D9   15                     DB   lsb(lowcase_)   ; z
01DA   E0                     DB   lsb(lbrace_)   ; {     1
01DB   E5                     DB   lsb(pipe_)   ; |     1
01DC   F0                     DB   lsb(rbrace_)   ; }     1
01DD   F3                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   CF 10                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                DQUOTE_:      
0204                COMMA_:      
0204   DD E9                  JP   (ix)   
0206                DOLLAR_:      
0206   C3 B3 0B               JP   dollar   
0209                PERCENT_:      
0209   C3 03 0C               JP   percent   
020C                QUOTE_:      
020C   C3 E9 0B               JP   quote   
020F                LPAREN_:      
020F   C3 E0 03               JP   lbrace   
0212                DOT_:        
0212   C3 00 05               JP   dot   
0215                SLASH_:      
0215   C3 00 06               JP   slash   
0218                NUM_:        
0218   C3 38 0C               JP   num   
021B                SEMICOLON_:      
021B   C3 01 03               JP   semicolon   
021E                QUESTION_:      
021E   C3 D0 0B               JP   question   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 7A 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 62 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 73 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA E7 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA D7 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 81 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 86 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                HASH:        
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   22 F8 23               LD   (vPointer),hl   ; store address in setter
026B   16 00                  LD   d,0   
026D   5E                     LD   e,(hl)   
026E   B7                     OR   a   ; check data width again
026F   28 02                  JR   z,arrayIndex2   
0271   23                     INC   hl   
0272   56                     LD   d,(hl)   
0273                ARRAYINDEX2:      
0273   D5                     PUSH   de   
0274   DD E9                  JP   (ix)   
0276                             ;                               4
0276                RPAREN_:      
0276                RPAREN:      
0276   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0279   FD 46 09               LD   b,(iy+9)   
027C   DD E9                  JP   (ix)   
027E                             ; & and                          14
027E                             ; a b -- c
027E                AMPER_:      
027E                AMPER:       
027E                AND:         
027E   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
027F   E1                     POP   hl   
0280   7B                     LD   a,e   
0281   A5                     AND   l   
0282   6F                     LD   l,a   
0283   7A                     LD   a,d   
0284   A4                     AND   h   
0285   67                     LD   h,a   
0286   18 51                  JR   add3   
0288                             ; - sub                          23
0288                             ; a b -- c
0288                MINUS_:      
0288                MINUS:       
0288   03                     INC   bc   ; check if sign of a number
0289   0A                     LD   a,(bc)   
028A   0B                     DEC   bc   
028B   FE 30                  CP   "0"   
028D   38 05                  JR   c,sub   
028F   FE 3A                  CP   "9"+1   
0291   DA 38 0C               JP   c,num   
0294                SUB:         ; Subtract the value 2nd on stack from top of stack
0294   03                     INC   bc   
0295   FE 2D                  CP   "-"   
0297   20 05                  JR   nz,sub1   
0299   E1                     POP   hl   
029A   2B                     DEC   hl   
029B   C3 64 0D               JP   assign0   
029E                SUB1:        
029E   0B                     DEC   bc   
029F   D1                     POP   de   
02A0   E1                     POP   hl   
02A1   B7                     OR   a   
02A2   ED 52                  SBC   hl,de   
02A4   18 33                  JR   add3   
02A6                STAR_:       ; 21
02A6                STAR:        
02A6   03                     INC   bc   ; check for ** spread
02A7   0A                     LD   a,(bc)   
02A8   FE 2A                  CP   "*"   
02AA   CA BA 0D               JP   z,spread   
02AD   0B                     DEC   bc   
02AE                MUL:         
02AE   D1                     POP   de   ; get first value
02AF   E1                     POP   hl   
02B0                MUL2:        
02B0   C5                     PUSH   bc   ; Preserve the IP
02B1   44 4D                  LD   bc,hl   ; bc = 2nd value
02B3   21 00 00               LD   hl,0   
02B6   3E 10                  LD   a,16   
02B8                MUL3:        
02B8   29                     ADD   hl,hl   
02B9   CB 13                  RL   e   
02BB   CB 12                  RL   d   
02BD   30 04                  JR   nc,$+6   
02BF   09                     ADD   hl,bc   
02C0   30 01                  JR   nc,$+3   
02C2   13                     INC   de   
02C3   3D                     DEC   a   
02C4   20 F2                  JR   nz,mul3   
02C6   C1                     POP   bc   ; Restore the IP
02C7   C3 D9 02               JP   add3   
02CA                             ; + add                         25
02CA                             ; a b -- c
02CA                PLUS_:       
02CA                PLUS:        
02CA                ADD:         
02CA   03                     INC   bc   
02CB   0A                     LD   a,(bc)   
02CC   FE 2B                  CP   "+"   ; ++ increment variable
02CE   20 05                  JR   nz,add1   
02D0   E1                     POP   hl   
02D1   23                     INC   hl   
02D2   C3 64 0D               JP   assign0   
02D5                ADD1:        
02D5   0B                     DEC   bc   
02D6   D1                     POP   de   ; second term
02D7   E1                     POP   hl   ; first term
02D8   19                     ADD   hl,de   
02D9                ADD3:        
02D9   03                     INC   bc   
02DA   0A                     LD   a,(bc)   
02DB   FE 3D                  CP   "="   
02DD   28 04                  JR   z,add4   
02DF   0B                     DEC   bc   
02E0   E5                     PUSH   hl   
02E1   DD E9                  JP   (ix)   
02E3                ADD4:        
02E3   C3 64 0D               JP   assign0   
02E6                COLON_:      
02E6                COLON:       
02E6   03                     INC   bc   ; arg_list must ve immediately followed by {
02E7   0A                     LD   a,(bc)   
02E8   FE 3D                  CP   "="   ; := definition
02EA   28 07                  JR   z,defineStart   
02EC   0B                     DEC   bc   
02ED   21 01 00               LD   hl,1   
02F0   C3 F3 10               JP   error   
02F3                DEFINESTART:      
02F3   E1                     POP   hl   ; discard variable value
02F4   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
02F7   22 F4 23               LD   (vDefine),hl   
02FA   DD E9                  JP   (ix)   
02FC                             ;                               18
02FC                UPCASE_:      
02FC                UPCASE:      
02FC   0A                     LD   a,(bc)   ; a = identifier char
02FD   D6 41                  SUB   "A"   ; "A" = 0
02FF   18 19                  JR   ident1   
0301                             ; ;
0301                SEMICOLON:      
0301                DEFINEEND:      
0301   2A F4 23               LD   hl,(vDefine)   ; hl = define*
0304   7D                     LD   a,l   
0305   B4                     OR   h   
0306   28 0B                  JR   z,defineEnd1   
0308   11 00 00               LD   de,NUL   ; set vDefine=NUL
030B   ED 53 F4 23            LD   (vDefine),de   
030F   D1                     POP   de   ; de = value
0310   C3 68 0D               JP   assign1   
0313                DEFINEEND1:      
0313   DD E9                  JP   (ix)   
0315                             ;********************** PAGE 2 END *********************************************
0315                             ; .align $100
0315                             ;********************** PAGE 3 BEGIN *********************************************
0315                LOWCASE_:      
0315                LOWCASE:      
0315   0A                     LD   a,(bc)   
0316   D6 61                  SUB   "a"   
0318   C6 1A                  ADD   a,26   
031A                IDENT1:      
031A   87                     ADD   a,a   ; l = a * 2
031B   6F                     LD   l,a   
031C   26 23                  LD   h,msb(vars)   
031E   22 F8 23               LD   (vPointer),hl   ; store address in setter
0321   5E                     LD   e,(hl)   
0322   23                     INC   hl   
0323   56                     LD   d,(hl)   
0324   D5                     PUSH   de   
0325   DD E9                  JP   (ix)   
0327                             ; [                             14
0327                LBRACK_:      
0327                LBRACK:      
0327                ARRAYSTART:      
0327   11 00 00               LD   de,0   ; create stack frame
032A   D5                     PUSH   de   ; push null for IP
032B   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
032E   FD 56 05               LD   d,(iy+5)   ; 
0331   D5                     PUSH   de   ; 
0332   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0335   FD 56 03               LD   d,(iy+3)   ; 
0338   D5                     PUSH   de   ; 
0339   FD E5                  PUSH   iy   ; push BP
033B   FD 21 00 00            LD   iy,0   ; BP = SP
033F   FD 39                  ADD   iy,sp   
0341   DD E9                  JP   (ix)   
0343                             ; \                             19
0343                BACKSLASH_:      
0343                BACKSLASH:      
0343                LAMBDA:      
0343   DD E5                  PUSH   ix   
0345   CD 2D 0E               CALL   parseArgs   
0348                LAMBDA1:      
0348   03                     INC   bc   ; arg_list must ve immediately followed by {
0349   0A                     LD   a,(bc)   
034A   FE 21                  CP   " "+1   ; skip white space
034C   38 FA                  JR   c,lambda1   
034E   FE 7B                  CP   "{"   
0350   28 06                  JR   z,lambda2   
0352   21 02 00               LD   hl,2   ; error 2: parse error
0355   C3 F3 10               JP   error   
0358                LAMBDA2:      
0358   CD 63 0E               CALL   parseBlock   
035B   CD CD 0E               CALL   createFunc   
035E   E1                     POP   hl   
035F   DD E1                  POP   ix   
0361   E5                     PUSH   hl   
0362   DD E9                  JP   (ix)   
0364                RBRACK_:      
0364                RBRACK:      
0364                ARRAYEND:      ; 53
0364   FD 54                  LD   d,iyh   ; de = BP
0366   FD 5D                  LD   e,iyl   
0368   ED 43 04 24            LD   (vTemp1),bc   ; save IP
036C   62 6B                  LD   hl,de   ; hl = de = BP
036E   B7                     OR   a   
036F   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0371   CB 3C                  SRL   h   ; 
0373   CB 1D                  RR   l   
0375   44 4D                  LD   bc,hl   ; bc = count
0377   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
037A   71                     LD   (hl),c   ; write num items in length word
037B   23                     INC   hl   
037C   70                     LD   (hl),b   
037D   23                     INC   hl   ; hl = array[0], bc = count
037E                             ; de = BP, hl = array[0], bc = count
037E   18 15                  JR   arrayEnd3   
0380                ARRAYEND1:      
0380   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0383   77                     LD   (hl),a   ; write lsb of array item
0384   23                     INC   hl   ; move to msb of array item
0385   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0388   3D                     DEC   a   
0389   28 05                  JR   z,arrayEnd2   
038B   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
038E   77                     LD   (hl),a   ; write msb of array item
038F   23                     INC   hl   ; move to next word in array
0390                ARRAYEND2:      
0390   FD 2B                  DEC   iy   ; move to next word on stack
0392   FD 2B                  DEC   iy   
0394   0B                     DEC   bc   ; dec items count
0395                ARRAYEND3:      
0395   79                     LD   a,c   ; if not zero loop
0396   B0                     OR   b   
0397   20 E7                  JR   nz,arrayEnd1   
0399   EB                     EX   de,hl   ; de = end of array, hl = BP
039A   F9                     LD   sp,hl   ; sp = BP
039B   E1                     POP   hl   ; de = end of array, hl = old BP
039C   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
039D   FD 62                  LD   iyh,d   
039F   FD 6B                  LD   iyl,e   
03A1   D1                     POP   de   ; pop arg_list (discard)
03A2   D1                     POP   de   ; pop first_arg* (discard)
03A3   D1                     POP   de   ; pop IP (discard)
03A4   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
03A8   13                     INC   de   
03A9   13                     INC   de   
03AA   D5                     PUSH   de   ; return array[0]
03AB   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
03AE   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
03B2   DD E9                  JP   (ix)   
03B4                CARET_:      
03B4                             ; execute a block of code which ends with } 116
03B4                             ; creates a root scope if BP == stack
03B4                             ; else uses outer scope
03B4                CARET:       
03B4                GO:          
03B4   D1                     POP   de   ; de = block*
03B5                GO1:         
03B5   7B                     LD   a,e   ; if block* == null, exit
03B6   B2                     OR   d   
03B7   20 02                  JR   nz,go2   
03B9   DD E9                  JP   (ix)   
03BB                GO2:         
03BB   1A                     LD   a,(de)   
03BC   FE 7B                  CP   "{"   
03BE   CA D5 0C               JP   z,goBlock   
03C1   FE 28                  CP   "("   
03C3   C2 08 0D               JP   nz,goFunc   
03C6   D5                     PUSH   de   ; push de just before stack frame
03C7   CA D5 0C               JP   z,goBlock   
03CA                GRAVE_:      
03CA                GRAVE:       
03CA                PRINTLITERAL:      
03CA   03                     INC   bc   ; move to first char
03CB   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
03CF   18 03                  JR   printLiteral1   
03D1                PRINTLITERAL0:      
03D1   12                     LD   (de),a   ; a -> buffer*
03D2   13                     INC   de   ; string*++,
03D3   03                     INC   bc   
03D4                PRINTLITERAL1:      
03D4   0A                     LD   a,(bc)   ; a <- string*
03D5   FE 60                  CP   "`"   ; if ` exit loop
03D7   20 F8                  JR   nz,printLiteral0   
03D9   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03DD   C3 13 0E               JP   dotNext   
03E0                LBRACE_:      
03E0                LBRACE:      
03E0   CD 63 0E               CALL   parseBlock   
03E3   DD E9                  JP   (ix)   
03E5                             ; | or                          11
03E5                             ; a b -- c
03E5                PIPE_:       
03E5                PIPE:        
03E5                OR:          
03E5   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03E6   E1                     POP   hl   
03E7   7B                     LD   a,e   
03E8   B5                     OR   l   
03E9   6F                     LD   l,a   
03EA   7A                     LD   a,d   
03EB   B4                     OR   h   
03EC   67                     LD   h,a   
03ED   C3 D9 02               JP   add3   
03F0                RBRACE_:      
03F0   C3 68 0C               JP   rbrace   
03F3                             ; ~ char                        8
03F3                TILDE_:      
03F3   C3 A9 0B               JP   tilde   
03F6                UNDERSCORE_:      
03F6                CHAR:        
03F6   03                     INC   bc   ; point to next char
03F7   0A                     LD   a,(bc)   
03F8   6F                     LD   l,a   
03F9   26 00                  LD   h,0   
03FB   E5                     PUSH   hl   
03FC   DD E9                  JP   (ix)   
03FE                AT_:         
03FE                AT:          
03FE                ADDR:        
03FE   ED 5B F8 23            LD   de,(vPointer)   
0402   21 F8 23               LD   hl,vPointer   
0405   C3 36 08               JP   variable   
0408                             ;********************** PAGE 3 END *********************************************
0408                          ALIGN   $100   
0500                             ;********************** PAGE 4 BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500                PRINT:       
0500   CD 85 0F               CALL   commandTable   
0503   61                     DB   "a"   ; .a print array
0504   61 0B                  DW   printArray   
0506   63                     DB   "c"   ; .c print char
0507   12 05                  DW   printChar   
0509   68                     DB   "h"   ; .h print hex without $ prefix
050A   A7 05                  DW   printHex0   
050C   73                     DB   "s"   ; .s print string
050D   21 05                  DW   printString   
050F   00                     DB   NUL   ; .  print number, fall through
0510   36 05                  DW   printNumber   
0512                             ; .c print char
0512                             ; char --
0512                PRINTCHAR:      
0512   E1                     POP   hl   ; a = char
0513   7D                     LD   a,l   
0514   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0518   12                     LD   (de),a   
0519   13                     INC   de   
051A   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
051E   C3 13 0E               JP   dotNext   
0521                             ; .s print string
0521                             ; string* --
0521                PRINTSTRING:      
0521   E1                     POP   hl   ; hl = string*
0522   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0526   18 03                  JR   printString1   
0528                PRINTSTRING0:      
0528   12                     LD   (de),a   ; a -> buffer*
0529   13                     INC   de   ; string*++,
052A   23                     INC   hl   
052B                PRINTSTRING1:      
052B   7E                     LD   a,(hl)   ; a <- string*
052C   B7                     OR   a   ; if NUL exit loop
052D   20 F9                  JR   nz,printString0   
052F   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0533   C3 13 0E               JP   dotNext   
0536                             ; . print decimal
0536                             ; value --
0536                PRINTNUMBER:      
0536   3A E8 23               LD   a,(vNumBase)   
0539   FE 10                  CP   16   
053B   CA AD 05               JP   z,printHex   ; else falls through
053E   C3 41 05               JP   printDec   
0541                             ; print decimal                 ; 70
0541                             ; value --
0541                PRINTDEC:      
0541   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0545   D9                     EXX      
0546   E1                     POP   hl   ; hl = value
0547   3A E6 23               LD   a,(vDataWidth)   
054A   3D                     DEC   a   
054B   20 02                  JR   nz,printDec1   
054D   26 00                  LD   h,0   
054F                PRINTDEC1:      
054F   CD 5E 05               CALL   printDec2   
0552   D9                     EXX      ; de = buffer*' bc = IP
0553   3E 20                  LD   a," "   ; append space to buffer
0555   12                     LD   (de),a   
0556   13                     INC   de   ; string*++,
0557   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
055B   C3 13 0E               JP   dotNext   
055E                             ; hl = value
055E                             ; de' = buffer*
055E                             ; a, bc, de, hl destroyed
055E                PRINTDEC2:      
055E   CB 7C                  BIT   7,h   
0560   28 0C                  JR   z,printDec3   
0562   D9                     EXX      
0563   3E 2D                  LD   a,"-"   
0565   12                     LD   (de),a   
0566   13                     INC   de   
0567   D9                     EXX      
0568   AF                     XOR   a   
0569   95                     SUB   l   
056A   6F                     LD   l,a   
056B   9F                     SBC   a,a   
056C   94                     SUB   h   
056D   67                     LD   h,a   
056E                PRINTDEC3:      
056E   0E 00                  LD   c,0   ; leading zeros flag = false
0570   11 F0 D8               LD   de,-10000   
0573   CD 8E 05               CALL   printDec4   
0576   11 18 FC               LD   de,-1000   
0579   CD 8E 05               CALL   printDec4   
057C   11 9C FF               LD   de,-100   
057F   CD 8E 05               CALL   printDec4   
0582   1E F6                  LD   e,-10   
0584   CD 8E 05               CALL   printDec4   
0587   0C                     INC   c   ; flag = true for at least digit
0588   1E FF                  LD   e,-1   
058A   CD 8E 05               CALL   printDec4   
058D   C9                     RET      
058E                PRINTDEC4:      
058E   06 2F                  LD   b,"0"-1   
0590                PRINTDEC5:      
0590   04                     INC   b   
0591   19                     ADD   hl,de   
0592   38 FC                  JR   c,printDec5   
0594   ED 52                  SBC   hl,de   
0596   3E 30                  LD   a,"0"   
0598   B8                     CP   b   
0599   20 05                  JR   nz,printDec6   
059B   AF                     XOR   a   
059C   B1                     OR   c   
059D   C8                     RET   z   
059E   18 01                  JR   printDec7   
05A0                PRINTDEC6:      
05A0   0C                     INC   c   
05A1                PRINTDEC7:      
05A1   78                     LD   a,b   
05A2   D9                     EXX      
05A3   12                     LD   (de),a   
05A4   13                     INC   de   
05A5   D9                     EXX      
05A6   C9                     RET      
05A7                             ; buffer hex                    37
05A7                             ; value --
05A7                PRINTHEX0:      
05A7   ED 5B EC 23            LD   de,(vBufPtr)   
05AB   18 08                  JR   printHex1   
05AD                PRINTHEX:      
05AD   ED 5B EC 23            LD   de,(vBufPtr)   
05B1   3E 24                  LD   a,"$"   ; # prefix
05B3   12                     LD   (de),a   
05B4   13                     INC   de   ; string*++,
05B5                PRINTHEX1:      
05B5   E1                     POP   hl   ; hl = value
05B6   3A E6 23               LD   a,(vDataWidth)   
05B9   3D                     DEC   a   
05BA   28 04                  JR   z,printHex2   
05BC   7C                     LD   a,h   
05BD   CD CF 05               CALL   printHex3   
05C0                PRINTHEX2:      
05C0   7D                     LD   a,l   
05C1   CD CF 05               CALL   printHex3   
05C4   3E 20                  LD   a," "   ; append space to buffer
05C6   12                     LD   (de),a   
05C7   13                     INC   de   ; string*++,
05C8   ED 53 EC 23            LD   (vBufPtr),de   
05CC   C3 13 0E               JP   dotNext   
05CF                PRINTHEX3:      
05CF   F5                     PUSH   af   
05D0   1F                     RRA      
05D1   1F                     RRA      
05D2   1F                     RRA      
05D3   1F                     RRA      
05D4   CD D8 05               CALL   printHex4   
05D7   F1                     POP   af   
05D8                PRINTHEX4:      
05D8   E6 0F                  AND   0x0F   
05DA   C6 90                  ADD   a,0x90   
05DC   27                     DAA      
05DD   CE 40                  ADC   a,0x40   
05DF   27                     DAA      
05E0   12                     LD   (de),a   
05E1   13                     INC   de   ; string*++,
05E2   C9                     RET      
05E3                             ; unused
05E3                DQUOTE:      
05E3                UNDERSCORE:      
05E3                COMMA:       
05E3   DD E9                  JP   (ix)   
05E5                             ;********************** PAGE 4 END *********************************************
05E5                          ALIGN   $100   
0600                             ;********************** PAGE 5 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 4F 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 6F 0F               CALL   lowerCaseTable   
060B   26                     DB   lsb(command_a_)   
060C   38                     DB   lsb(command_b_)   
060D   C8                     DB   lsb(command_nop_)   
060E   44                     DB   lsb(command_d_)   
060F   C8                     DB   lsb(command_nop_)   
0610   4A                     DB   lsb(command_f_)   
0611   C8                     DB   lsb(command_nop_)   
0612   65                     DB   lsb(command_h_)   
0613   6B                     DB   lsb(command_i_)   
0614   C8                     DB   lsb(command_nop_)   
0615   71                     DB   lsb(key_)   
0616   C8                     DB   lsb(command_nop_)   
0617   74                     DB   lsb(command_m_)   
0618   C8                     DB   lsb(command_nop_)   
0619   7A                     DB   lsb(output_)   
061A   7D                     DB   lsb(command_p_)   
061B   80                     DB   lsb(command_q_)   
061C   86                     DB   lsb(command_r_)   
061D   92                     DB   lsb(command_s_)   
061E   A7                     DB   lsb(true_)   
061F   C8                     DB   lsb(command_nop_)   
0620   AA                     DB   lsb(command_v_)   
0621   BF                     DB   lsb(command_w_)   
0622   C5                     DB   lsb(xor_)   
0623   C8                     DB   lsb(command_nop_)   
0624   C8                     DB   lsb(command_nop_)   
0625   CB                     DB   lsb(command_default_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   62                     DB   "b"   ; /ab absolute
0627   E1 06                  DW   absolute   
0629   64                     DB   "d"   ; /ad address of
062A   EF 06                  DW   addrOf   
062C   69                     DB   "i"   ; /ad address of
062D   E1 08                  DW   arrayIter   
062F   6C                     DB   "l"   ; /al array length
0630   10 07                  DW   arrayLength   
0632   73                     DB   "s"   ; /as array size
0633   19 07                  DW   arraySize   
0635   00                     DB   NUL   
0636   72 07                  DW   error1   
0638                COMMAND_B_:      
0638   62                     DB   "b"   ; /bb bye bye cold boot
0639   3A 10                  DW   coldStart   
063B   6D                     DB   "m"   ; /bm byte mode
063C   47 07                  DW   byteMode   
063E   72                     DB   "r"   ; /br break from loop
063F   2D 07                  DW   break   
0641   00                     DB   NUL   
0642   72 07                  DW   error1   
0644                COMMAND_D_:      
0644   63                     DB   "c"   ; /dc decimal
0645   6A 07                  DW   decBase   
0647   00                     DB   NUL   
0648   6A 07                  DW   decBase   ; /d decimal
064A                COMMAND_F_:      
064A   64                     DB   "d"   ; /fd fold
064B   8A 0A                  DW   fold   
064D   65                     DB   "e"   ; /fe forEach
064E   DC 0A                  DW   forEach   
0650   73                     DB   "s"   ; /fs funcSrc
0651   28 0B                  DW   funcSrc   
0653   74                     DB   "t"   ; /ft filter
0654   2C 0A                  DW   filter   
0656   31                     DB   "1"   
0657   1B 11                  DW   f1   
0659   32                     DB   "2"   
065A   1B 11                  DW   f2   
065C   33                     DB   "3"   
065D   1B 11                  DW   f3   
065F   34                     DB   "4"   
0660   1B 11                  DW   f4   
0662   00                     DB   NUL   
0663   94 0D                  DW   false1   
0665                COMMAND_H_:      
0665   62                     DB   "b"   ; /hx hex
0666   78 07                  DW   hexBase   
0668   00                     DB   NUL   
0669   72 07                  DW   error1   
066B                             ; 6
066B                COMMAND_I_:      
066B   6E                     DB   "n"   ; /in input
066C   7E 07                  DW   input   
066E   00                     DB   NUL   
066F   72 07                  DW   error1   
0671                KEY_:        
0671   00                     DB   NUL   
0672   89 07                  DW   key   
0674                COMMAND_M_:      
0674   70                     DB   "p"   ; /mp map
0675   EA 09                  DW   map   
0677   00                     DB   NUL   
0678   72 07                  DW   error1   
067A                OUTPUT_:      
067A   00                     DB   NUL   
067B   92 07                  DW   output   
067D                             ; 4
067D                COMMAND_P_:      
067D   00                     DB   NUL   
067E   72 07                  DW   error1   
0680                             ; 6
0680                COMMAND_Q_:      
0680   74                     DB   "t"   ; /qt quit
0681   9B 07                  DW   quit   
0683   00                     DB   NUL   
0684   72 07                  DW   error1   
0686                COMMAND_R_:      
0686   63                     DB   "c"   ; /rc tail call optimisation
0687   A5 07                  DW   recur   
0689   65                     DB   "e"   ; /re remainder
068A   AB 07                  DW   remain   
068C   67                     DB   "g"   ; /rg range src
068D   4D 08                  DW   rangeSrc   
068F   00                     DB   NUL   
0690   72 07                  DW   error1   
0692                COMMAND_S_:      
0692   62                     DB   "b"   
0693   B1 07                  DW   stringBegin   
0695   63                     DB   "c"   
0696   03 08                  DW   stringCompare   
0698   65                     DB   "e"   
0699   B9 07                  DW   stringEnd   
069B   69                     DB   "i"   
069C   62 09                  DW   stringIter   
069E   6C                     DB   "l"   
069F   E8 07                  DW   stringLength   
06A1   73                     DB   "s"   
06A2   F7 07                  DW   stringSize   
06A4   00                     DB   NUL   
06A5   72 07                  DW   error1   
06A7                TRUE_:       
06A7   00                     DB   NUL   
06A8   8E 0D                  DW   true1   
06AA                COMMAND_V_:      
06AA   62                     DB   "b"   
06AB   1B 08                  DW   varBufPtr   
06AD   68                     DB   "h"   
06AE   24 08                  DW   varHeapPtr   
06B0   74                     DB   "t"   
06B1   2D 08                  DW   varTIBPtr   
06B3   42                     DB   "B"   
06B4   64 07                  DW   constBufStart   
06B6   48                     DB   "H"   
06B7   58 07                  DW   constHeapStart   
06B9   54                     DB   "T"   
06BA   5E 07                  DW   constTIBStart   
06BC   00                     DB   NUL   
06BD   72 07                  DW   error1   
06BF                COMMAND_W_:      
06BF   6D                     DB   "m"   ; /wm word mode
06C0   3C 08                  DW   wordMode   
06C2   00                     DB   NUL   
06C3   72 07                  DW   error1   
06C5                XOR_:        
06C5   00                     DB   NUL   
06C6   42 08                  DW   xor   
06C8                             ; 2
06C8                COMMAND_NOP_:      
06C8   00                     DB   NUL   
06C9   CE 06                  DW   nop   
06CB                             ; 3
06CB                COMMAND_DEFAULT_:      
06CB   00                     DB   NUL   
06CC   D0 06                  DW   div   
06CE                             ;********************** PAGE 5 END *********************************************
06CE                NOP:         
06CE   DD E9                  JP   (ix)   
06D0                             ;                               32
06D0                DIV:         
06D0   D1                     POP   de   
06D1   E1                     POP   hl   
06D2   C5                     PUSH   bc   ; preserve the IP
06D3   44 4D                  LD   bc,hl   
06D5   CD FA 0D               CALL   divide   
06D8   EB                     EX   de,hl   
06D9   ED 53 FA 23            LD   (vRemain),de   
06DD   C1                     POP   bc   
06DE   C3 D9 02               JP   add3   
06E1                             ; /ab absolute
06E1                             ; num -- num
06E1                ABSOLUTE:      
06E1   E1                     POP   hl   
06E2   CB 7C                  BIT   7,h   
06E4   28 06                  JR   z,absolute1   
06E6   AF                     XOR   a   
06E7   95                     SUB   l   
06E8   6F                     LD   l,a   
06E9   9F                     SBC   a,a   
06EA   94                     SUB   h   
06EB   67                     LD   h,a   
06EC                ABSOLUTE1:      
06EC   E5                     PUSH   hl   
06ED   DD E9                  JP   (ix)   
06EF                             ; /ad addrOf                    24
06EF                             ; char -- addr
06EF                ADDROF:      
06EF   E1                     POP   hl   ; a = char
06F0   7D                     LD   a,l   
06F1   FE 7B                  CP   "z"+1   ; if a > z then exit
06F3   30 19                  JR   nc,addrOf2   
06F5   D6 41                  SUB   "A"   ; a - 65
06F7   38 15                  JR   c,addrOf2   ; if < A then exit
06F9   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
06FB   38 06                  JR   c,addrOf1   
06FD   D6 06                  SUB   "a"-("Z"+1)   
06FF   FE 1A                  CP   "Z"-"A"+1   
0701   38 0B                  JR   c,addrOf2   ; if < a then exit
0703                ADDROF1:      
0703   87                     ADD   a,a   ; double a
0704   21 00 23               LD   hl,VARS   ; hl = VARS + a
0707   85                     ADD   a,l   
0708   6F                     LD   l,a   
0709   3E 00                  LD   a,0   
070B   8C                     ADC   a,h   
070C   67                     LD   h,a   
070D   E5                     PUSH   hl   
070E                ADDROF2:      
070E   DD E9                  JP   (ix)   
0710                             ; /al length of an array, num elements
0710                             ; array* -- num
0710                ARRAYLENGTH:      
0710   E1                     POP   hl   
0711   2B                     DEC   hl   ; msb size
0712   56                     LD   d,(hl)   
0713   2B                     DEC   hl   ; lsb size
0714   5E                     LD   e,(hl)   
0715   EB                     EX   de,hl   
0716                ARRAYLENGTH1:      
0716   E5                     PUSH   hl   
0717   DD E9                  JP   (ix)   
0719                             ; /as size in bytes of an array, based on current data width
0719                             ; array* -- num
0719                ARRAYSIZE:      
0719                          ;*Macro unroll:  PERFORM arrayLength
0719   DD 21 20 07            LD   ix,performM_1512S1068   
071D   C3 10 07               JP   arrayLength   
0720                PERFORMM_1512S1068:      
0720   E1                     POP   hl   
0721   3A E6 23               LD   a,(vDataWidth)   
0724   3D                     DEC   a   
0725   28 EF                  JR   z,arrayLength1   
0727   CB 3C                  SRL   h   
0729   CB 1D                  RR   l   
072B   18 E9                  JR   arrayLength1   
072D                             ; 13
072D                             ; /br break from loop
072D                             ; --
072D                BREAK:       
072D   E1                     POP   hl   ; hl = condition, break if false
072E   7D                     LD   a,l   
072F   B4                     OR   h   
0730   28 02                  JR   z,break1   
0732   DD E9                  JP   (ix)   
0734                BREAK1:      
0734   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0736   FD 54                  LD   d,iyh   
0738   21 08 00               LD   hl,8   
073B   19                     ADD   hl,de   
073C   23                     INC   hl   
073D   23                     INC   hl   
073E   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0741   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0744   C3 68 0C               JP   blockEnd   
0747                             ; /b
0747                BYTEMODE:      
0747   21 01 00               LD   hl,1   
074A                BYTEMODE1:      
074A   22 E6 23               LD   (vDataWidth),hl   
074D   DD E9                  JP   (ix)   
074F                             ; //
074F                COMMENT:      
074F   03                     INC   bc   ; point to next char
0750   0A                     LD   a,(bc)   
0751   FE 20                  CP   " "   ; terminate on any char less than SP
0753   30 FA                  JR   nc,comment   
0755   0B                     DEC   bc   
0756   DD E9                  JP   (ix)   
0758                CONSTHEAPSTART:      
0758   11 22 24               LD   de,HEAP   
075B   C3 39 08               JP   constant   
075E                CONSTTIBSTART:      
075E   11 00 21               LD   de,TIB   
0761   C3 39 08               JP   constant   
0764                CONSTBUFSTART:      
0764   11 00 22               LD   de,BUFFER   
0767   C3 39 08               JP   constant   
076A                DECBASE:      
076A   21 0A 00               LD   hl,10   
076D                DECBASE1:      
076D   22 E8 23               LD   (vNumBase),hl   
0770   DD E9                  JP   (ix)   
0772                ERROR1:      
0772   21 01 00               LD   hl,1   ; error 1: unknown command
0775   C3 F3 10               JP   error   
0778                HEXBASE:      
0778   21 10 00               LD   hl,16   
077B   C3 6D 07               JP   decBase1   
077E                             ; Z80 port input
077E                             ; port -- value
077E                INPUT:       
077E   E1                     POP   hl   
077F   59                     LD   e,c   ; save IP
0780   4D                     LD   c,l   
0781   ED 68                  IN   l,(c)   
0783   26 00                  LD   h,0   
0785   4B                     LD   c,e   ; restore IP
0786   E5                     PUSH   hl   
0787   DD E9                  JP   (ix)   
0789                             ; /k                              6
0789                KEY:         
0789   CD 81 00               CALL   getchar   
078C   26 00                  LD   h,0   
078E   6F                     LD   l,a   
078F   E5                     PUSH   hl   
0790   DD E9                  JP   (ix)   
0792                             ; /o Z80 port output
0792                             ; value port --
0792                OUTPUT:      
0792   E1                     POP   hl   
0793   59                     LD   e,c   ; save IP
0794   4D                     LD   c,l   
0795   E1                     POP   hl   
0796   ED 69                  OUT   (c),l   
0798   4B                     LD   c,e   ; restore IP
0799   DD E9                  JP   (ix)   
079B                             ; /qt
079B                             ; bool --
079B                QUIT:        
079B   E1                     POP   hl   ; hl = condition, exit if true
079C   7D                     LD   a,l   
079D   B4                     OR   h   
079E   20 02                  JR   nz,quit1   
07A0   DD E9                  JP   (ix)   
07A2                QUIT1:       
07A2   C3 68 0C               JP   blockEnd   
07A5                RECUR:       
07A5   E1                     POP   hl   
07A6   22 F2 23               LD   (vRecur),hl   
07A9   DD E9                  JP   (ix)   
07AB                REMAIN:      
07AB   2A FA 23               LD   hl,(vRemain)   
07AE   E5                     PUSH   hl   
07AF   DD E9                  JP   (ix)   
07B1                STRINGBEGIN:      
07B1   21 FF FF               LD   hl,TRUE   ; string mode = true
07B4   22 F6 23               LD   (vStrMode),hl   
07B7   18 27                  JR   stringEnd1   ; save hl in vBufPtr
07B9                STRINGEND:      
07B9   21 00 00               LD   hl,FALSE   ; string mode = false
07BC   22 F6 23               LD   (vStrMode),hl   
07BF   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
07C2   AF                     XOR   a   
07C3   77                     LD   (hl),a   
07C4   23                     INC   hl   ; hl = string_end*
07C5   ED 43 04 24            LD   (vTemp1),bc   ; save IP
07C9   11 00 22               LD   de,BUFFER   ; de = string*
07CC   B7                     OR   a   ; bc = size
07CD   ED 52                  SBC   hl,de   
07CF   44 4D                  LD   bc,hl   
07D1   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
07D4   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
07D5   D5                     PUSH   de   ; return hstring*
07D6   ED B0                  LDIR      ; copy size bytes from string* to hstring*
07D8   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
07DC   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
07E0                STRINGEND1:      
07E0   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
07E3   22 EC 23               LD   (vBufPtr),hl   
07E6   DD E9                  JP   (ix)   
07E8                STRINGLENGTH:      
07E8   D1                     POP   de   
07E9   21 00 00               LD   hl,0   
07EC   18 02                  JR   stringLength2   
07EE                STRINGLENGTH1:      
07EE   13                     INC   de   
07EF   23                     INC   hl   
07F0                STRINGLENGTH2:      
07F0   1A                     LD   a,(de)   
07F1   B7                     OR   a   
07F2   20 FA                  JR   nz,stringLength1   
07F4                STRINGLENGTH3:      
07F4   E5                     PUSH   hl   
07F5   DD E9                  JP   (ix)   
07F7                STRINGSIZE:      
07F7                          ;*Macro unroll:  PERFORM stringLength
07F7   DD 21 FE 07            LD   ix,performM_1660S1236   
07FB   C3 E8 07               JP   stringLength   
07FE                PERFORMM_1660S1236:      
07FE   E1                     POP   hl   
07FF   23                     INC   hl   
0800   C3 F4 07               JP   stringLength3   
0803                             ; /sc string compare
0803                             ; string1* string2* -- bool
0803                             ; Compares two null terminated strings.
0803                STRINGCOMPARE:      
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805                STRINGCOMPARE1:      
0805   1A                     LD   a,(de)   
0806   BE                     CP   (hl)   
0807   20 07                  JR   nz,stringCompare2   
0809   B7                     OR   a   
080A   28 09                  JR   z,stringCompare3   
080C   13                     INC   de   
080D   23                     INC   hl   
080E   18 F5                  JR   stringCompare1   
0810                STRINGCOMPARE2:      
0810   21 00 00               LD   hl,FALSE   
0813   18 03                  JR   stringCompare4   
0815                STRINGCOMPARE3:      
0815   21 FF FF               LD   hl,TRUE   
0818                STRINGCOMPARE4:      
0818   E5                     PUSH   hl   
0819   DD E9                  JP   (ix)   
081B                VARBUFPTR:      
081B   ED 5B EC 23            LD   de,(vBufPtr)   
081F   21 EC 23               LD   hl,vBufPtr   
0822   18 12                  JR   variable   
0824                VARHEAPPTR:      
0824   ED 5B F0 23            LD   de,(vHeapPtr)   
0828   21 F0 23               LD   hl,vHeapPtr   
082B   18 09                  JR   variable   
082D                VARTIBPTR:      
082D   ED 5B EA 23            LD   de,(vTIBPtr)   
0831   21 EA 23               LD   hl,vTIBPtr   
0834   18 00                  JR   variable   
0836                VARIABLE:      
0836   22 F8 23               LD   (vPointer),hl   
0839                CONSTANT:      
0839   D5                     PUSH   de   
083A   DD E9                  JP   (ix)   
083C                             ; /wm
083C                WORDMODE:      
083C   21 02 00               LD   hl,2   
083F   C3 4A 07               JP   byteMode1   
0842                             ; /x
0842                XOR:         
0842   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0843                XOR1:        
0843   E1                     POP   hl   
0844   7B                     LD   a,e   
0845   AD                     XOR   l   
0846   6F                     LD   l,a   
0847   7A                     LD   a,d   
0848   AC                     XOR   h   
0849   67                     LD   h,a   
084A   C3 D9 02               JP   add3   
084D                             ;*******************************************************************
084D                             ; Monty implementations
084D                             ;*******************************************************************
084D                             ; /rg rangeSrc
084D                             ; begin end step -- src
084D                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
084D                RANGESRC:      ; range source: begin, end, step, local: L
084D   CD B4 03               CALL   go   
0850   00 00                  DW   NUL   
0852   5C 08                  DW   rangeSrcM_1725S1310   
0854   56 08                  DW   $+2   
0856   01                     DB   1   
0857   04 62 65 73 4C         .PSTR   "besL"   
085C                RANGESRCM_1725S1310:      
085C   7B                     DB   "{"   ; init mutable L [index active inrange_test]
085D   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}??] %L= "   
0882   5C 6B 74 7B            DB   "\\kt{"   
0886   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
088E   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0894   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
089C   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
08A4   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
08AE   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08B6   25 4C 32 23 5E         DB   "%L2#^"   ; ifte: inrange_test?
08BB   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
08CF   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08D7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08DE   7D                     DB   "}"   
08DF   7D                     DB   "}"   
08E0   00                     DB   0   
08E1                             ; /ai arrayIter
08E1                             ; array* -- src
08E1                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
08E1                ARRAYITER:      
08E1   CD B4 03               CALL   go   
08E4   00 00                  DW   NUL   
08E6   EE 08                  DW   arrayIterM_1744S1330   
08E8   EA 08                  DW   $+2   
08EA   01                     DB   1   
08EB   02 61 4C               .PSTR   "aL"   
08EE                ARRAYITERM_1744S1330:      
08EE   7B                     DB   "{"   
08EF   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
08FF   5C 6B 74 7B            DB   "\\kt{"   
0903   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
090B   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0911   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0919   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0921   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0928   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0930   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0939   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
0950   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0958   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
095F   7D                     DB   "}"   
0960   7D                     DB   "}"   
0961   00                     DB   0   
0962                             ; /si stringIter
0962                             ; string* -- src
0962                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0962                STRINGITER:      
0962   CD B4 03               CALL   go   
0965   00 00                  DW   NUL   
0967   6F 09                  DW   stringIterM_1763S1350   
0969   6B 09                  DW   $+2   
096B   01                     DB   1   
096C   02 73 4C               .PSTR   "sL"   
096F                STRINGITERM_1763S1350:      
096F   7B                     DB   "{"   
0970   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
097A   5C 6B 74 7B            DB   "\\kt{"   
097E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0986   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
098D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0995   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
099D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
09A4   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
09B5   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
09BD   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
09C4   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
09D8   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
09E0   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
09E7   7D                     DB   "}"   
09E8   7D                     DB   "}"   
09E9   00                     DB   0   
09EA                             ; /mp map
09EA                             ; src func -- src1
09EA                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
09EA                MAP:         ; map: source, function
09EA   CD B4 03               CALL   go   
09ED   00 00                  DW   NUL   
09EF   F7 09                  DW   mapM_1783S1372   
09F1   F3 09                  DW   $+2   
09F3   00                     DB   0   
09F4   02 73 66               .PSTR   "sf"   
09F7                MAPM_1783S1372:      
09F7   7B                     DB   "{"   
09F8   5C 6B 74 7B            DB   "\\kt{"   
09FC   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0A04   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A08   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A0D   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0A19   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A22   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A29   7D                     DB   "}"   
0A2A   7D                     DB   "}"   
0A2B   00                     DB   0   
0A2C                             ; /ft filter
0A2C                             ; src pred -- src1
0A2C                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0A2C                FILTER:      ; filter: source, predicate, local: T
0A2C   CD B4 03               CALL   go   
0A2F   00 00                  DW   NUL   
0A31   3A 0A                  DW   filterM_1797S1387   
0A33   35 0A                  DW   $+2   
0A35   01                     DB   1   
0A36   03 73 70 54            .PSTR   "spT"   
0A3A                FILTERM_1797S1387:      
0A3A   7B                     DB   "{"   
0A3B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A41   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A45   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A49   5B                     DB   "["   
0A4A   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0A57   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0A5F   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0A63   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
0A68   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
0A7E   3F 3F                  DB   "??"   
0A80   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A87   7D                     DB   "}"   
0A88   7D                     DB   "}"   
0A89   00                     DB   0   
0A8A                             ; /fd fold
0A8A                             ; reducer is a function like: \\da00bbLi4u
0A8A                             ; src init reducer -- src1
0A8A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A8A                FOLD:        ; src, init, reducer
0A8A   CD B4 03               CALL   go   
0A8D   00 00                  DW   NUL   
0A8F   99 0A                  DW   foldM_1816S1407   
0A91   93 0A                  DW   $+2   
0A93   01                     DB   1   
0A94   04 73 69 72 41         .PSTR   "sirA"   
0A99                FOLDM_1816S1407:      
0A99   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A9A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0AA1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0AA5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0AA9   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0AAE   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0AC9   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0AD2   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AD9   7D                     DB   "}"   
0ADA   7D                     DB   "}"   
0ADB   00                     DB   0   
0ADC                             ; /fe forEach
0ADC                             ; src proc --
0ADC                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0ADC                FOREACH:      ; forEach: source, procedure, local: T
0ADC   CD B4 03               CALL   go   
0ADF   00 00                  DW   NUL   
0AE1   EA 0A                  DW   forEachM_1830S1422   
0AE3   E5 0A                  DW   $+2   
0AE5   01                     DB   1   
0AE6   03 73 70 54            .PSTR   "spT"   
0AEA                FOREACHM_1830S1422:      
0AEA   7B                     DB   "{"   
0AEB   5B 30 5D 25 54 3D      DB   "[0]%T="   
0AF1   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0AF5   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0AFD   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0B02   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0B14   3F 3F                  DB   "??"   ; ifte:
0B16   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0B1F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0B26   7D                     DB   "}"   
0B27   00                     DB   0   
0B28                             ; ; /fs funcSrc
0B28                             ; ; func -- src
0B28                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0B28                FUNCSRC:      ; :f func or block
0B28   CD B4 03               CALL   go   
0B2B   00 00                  DW   NUL   
0B2D   34 0B                  DW   funcSrcM_1844S1437   
0B2F   31 0B                  DW   $+2   
0B31   00                     DB   0   
0B32   01 66                  .PSTR   "f"   
0B34                FUNCSRCM_1844S1437:      
0B34   7B                     DB   "{"   
0B35   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0B39   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0B41   5C 64 74 7B            DB   "\\dt{"   
0B45   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0B57   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0B5E   7D                     DB   "}"   
0B5F   7D                     DB   "}"   
0B60   00                     DB   0   
0B61                          ;*Macro unroll: FUNC printArray, 2, "abc"
0B61                PRINTARRAY:      
0B61   CD B4 03               CALL   go   
0B64   00 00                  DW   NUL   
0B66   6F 0B                  DW   printArrayM_1854S1448   
0B68   6A 0B                  DW   $+2   
0B6A   02                     DB   2   
0B6B   03 61 62 63            .PSTR   "abc"   
0B6F                PRINTARRAYM_1854S1448:      
0B6F   7B                     DB   "{"   
0B70   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0BA7   7D                     DB   "}"   
0BA8   00                     DB   0   
0BA9                             ;*******************************************************************
0BA9                             ; implementations continued
0BA9                             ;*******************************************************************
0BA9                             ; ~ bitwise invert
0BA9                TILDE:       
0BA9                INVERT:      
0BA9   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BAA   7D                     LD   a,l   
0BAB   2F                     CPL      
0BAC   6F                     LD   l,a   
0BAD   7C                     LD   a,h   
0BAE   2F                     CPL      
0BAF   67                     LD   h,a   
0BB0   C3 D9 02               JP   add3   
0BB3                             ; $ hex                         ; 22
0BB3                DOLLAR:      
0BB3                HEXNUM:      
0BB3   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BB6                HEXNUM1:      
0BB6   03                     INC   bc   
0BB7   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BB8   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BBA   28 02                  JR   z,hexnum2   ; no a decimal
0BBC   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BBE                HEXNUM2:      
0BBE   D6 30                  SUB   $30   ; form decimal digit
0BC0   DA 5A 0C               JP   c,num2   
0BC3   FE 10                  CP   $0F+1   
0BC5   D2 5A 0C               JP   nc,num2   
0BC8   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BC9   29                     ADD   hl,hl   ; 4X
0BCA   29                     ADD   hl,hl   ; 8X
0BCB   29                     ADD   hl,hl   ; 16X
0BCC   85                     ADD   a,l   ; add into bottom of hl
0BCD   6F                     LD   l,a   
0BCE   18 E6                  JR   hexnum1   
0BD0                             ; ? if                            23
0BD0                             ; condition then -- value
0BD0                QUESTION:      
0BD0                IF:          
0BD0   03                     INC   bc   
0BD1   0A                     LD   a,(bc)   
0BD2   FE 3F                  CP   "?"   
0BD4   28 06                  JR   z,ifte   
0BD6   0B                     DEC   bc   
0BD7   11 00 00               LD   de,NUL   ; NUL pointer for else
0BDA   18 01                  JR   ifte1   
0BDC                             ; ?? ifte
0BDC                             ; condition then else -- value
0BDC                IFTE:        
0BDC   D1                     POP   de   ; de = else
0BDD                IFTE1:       
0BDD   E1                     POP   hl   ; hl = then
0BDE   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BDF   7C                     LD   a,h   
0BE0   B5                     OR   l   
0BE1   E1                     POP   hl   ; hl = then
0BE2   CA B5 03               JP   z,go1   ; if z de = else
0BE5   EB                     EX   de,hl   ; condition = false, de = then
0BE6   C3 B5 03               JP   go1   
0BE9                             ; string                        ;38
0BE9                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BE9                QUOTE:       
0BE9                STRING:      
0BE9   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0BEC   E5                     PUSH   hl   ; save start of string
0BED   0A                     LD   a,(bc)   
0BEE   5F                     LD   e,a   ; e = matching terminator
0BEF   03                     INC   bc   ; point to next char
0BF0   18 03                  JR   string2   
0BF2                STRING1:      
0BF2   77                     LD   (hl),a   
0BF3   23                     INC   hl   ; increase count
0BF4   03                     INC   bc   ; point to next char
0BF5                STRING2:      
0BF5   0A                     LD   a,(bc)   
0BF6   BB                     CP   e   ; is it the string terminator
0BF7   28 02                  JR   z,string3   
0BF9   18 F7                  JR   string1   
0BFB                STRING3:      
0BFB   AF                     XOR   a   ; write NUL to terminate string
0BFC   77                     LD   (hl),a   ; hl = end of string
0BFD   23                     INC   hl   
0BFE   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C01   DD E9                  JP   (ix)   
0C03                             ; %a .. %z                      43
0C03                             ; -- value
0C03                             ; returns value of arg
0C03                PERCENT:      
0C03                ARG:         
0C03   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0C06   FD 56 05               LD   d,(iy+5)   
0C09   EB                     EX   de,hl   
0C0A   7D                     LD   a,l   ; arg_list* == null, skip
0C0B   B4                     OR   h   
0C0C   28 1A                  JR   z,arg0a   
0C0E   23                     INC   hl   ; a = num_args, hl = arg_list*
0C0F   7E                     LD   a,(hl)   
0C10   23                     INC   hl   
0C11   B7                     OR   a   
0C12   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C14   5F                     LD   e,a   ; e = a = num_args
0C15   03                     INC   bc   ; a = next char = dollar_name
0C16   0A                     LD   a,(bc)   
0C17   C5                     PUSH   bc   ; save IP
0C18   43                     LD   b,e   ; b = e = num_args
0C19   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C1C   FD 56 03               LD   d,(iy+3)   
0C1F                ARG0:        
0C1F   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C20   1B                     DEC   de   
0C21   BE                     CP   (hl)   
0C22   28 09                  JR   z,arg1   
0C24   23                     INC   hl   ; hl = next arg_list*
0C25   10 F8                  DJNZ   arg0   
0C27   C1                     POP   bc   ; no match, restore IP
0C28                ARG0A:       
0C28   11 00 00               LD   de,0   ; return 0
0C2B   18 08                  JR   arg1a   
0C2D                ARG1:        
0C2D   C1                     POP   bc   ; restore IP
0C2E   EB                     EX   de,hl   ; hl = arg*
0C2F   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0C32   5E                     LD   e,(hl)   
0C33   23                     INC   hl   
0C34   56                     LD   d,(hl)   ; de = arg
0C35                ARG1A:       
0C35   D5                     PUSH   de   ; push arg
0C36   DD E9                  JP   (ix)   
0C38                             ; 0..9 number                   37
0C38                NUM:         
0C38   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C3B   0A                     LD   a,(bc)   ; Get numeral or -
0C3C   FE 2D                  CP   "-"   
0C3E   20 01                  JR   nz,num0   
0C40   03                     INC   bc   ; move to next char, no flags affected
0C41                NUM0:        
0C41   08                     EX   af,af'   ; save zero flag = 0 for later
0C42                NUM1:        
0C42   0A                     LD   a,(bc)   ; read digit
0C43   D6 30                  SUB   "0"   ; less than 0?
0C45   38 13                  JR   c,num2   ; not a digit, exit loop
0C47   FE 0A                  CP   10   ; greater that 9?
0C49   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C4B   03                     INC   bc   ; inc IP
0C4C   54 5D                  LD   de,hl   ; multiply hl * 10
0C4E   29                     ADD   hl,hl   
0C4F   29                     ADD   hl,hl   
0C50   19                     ADD   hl,de   
0C51   29                     ADD   hl,hl   
0C52   85                     ADD   a,l   ; add digit in a to hl
0C53   6F                     LD   l,a   
0C54   3E 00                  LD   a,0   
0C56   8C                     ADC   a,h   
0C57   67                     LD   h,a   
0C58   18 E8                  JR   num1   
0C5A                NUM2:        
0C5A   0B                     DEC   bc   
0C5B   08                     EX   af,af'   ; restore zero flag
0C5C   20 07                  JR   nz,num3   
0C5E   EB                     EX   de,hl   ; negate the value of hl
0C5F   21 00 00               LD   hl,0   
0C62   B7                     OR   a   ; jump to sub2
0C63   ED 52                  SBC   hl,de   
0C65                NUM3:        
0C65   E5                     PUSH   hl   ; Put the number on the stack
0C66   DD E9                  JP   (ix)   ; and process the next character
0C68                             ; }                               58
0C68                RBRACE:      
0C68                BLOCKEND:      
0C68   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C6B   FD 56 01               LD   d,(iy+1)   
0C6E   ED 53 04 24            LD   (vTemp1),de   
0C72   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C75   FD 56 07               LD   d,(iy+7)   
0C78   ED 53 06 24            LD   (vTemp2),de   
0C7C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C7F   FD 56 03               LD   d,(iy+3)   
0C82   EB                     EX   de,hl   
0C83   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C86   FD 56 01               LD   d,(iy+1)   
0C89   13                     INC   de   ; for carry flag <=
0C8A   B7                     OR   a   
0C8B   ED 52                  SBC   hl,de   
0C8D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C8F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C91   FD 5D                  LD   e,iyl   
0C93   21 08 00               LD   hl,8   
0C96   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C97   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C98   18 0C                  JR   blockEnd2   
0C9A                BLOCKEND1:      ; same scope
0C9A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C9D   FD 56 03               LD   d,(iy+3)   
0CA0   EB                     EX   de,hl   
0CA1   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0CA3   FD 5D                  LD   e,iyl   
0CA5   EB                     EX   de,hl   
0CA6                BLOCKEND2:      
0CA6   44 4D                  LD   bc,hl   ; bc = hl = BP
0CA8   B7                     OR   a   ; hl = BP - SP = count
0CA9   ED 72                  SBC   hl,sp   
0CAB   7D                     LD   a,l   
0CAC   B4                     OR   h   
0CAD   28 09                  JR   z,blockEnd3   
0CAF   C5                     PUSH   bc   ; bc = count, hl = BP
0CB0   44 4D                  LD   bc,hl   
0CB2   E1                     POP   hl   
0CB3   2B                     DEC   hl   ; hl = BP-1
0CB4   1B                     DEC   de   ; de = args*-1
0CB5   ED B8                  LDDR      
0CB7   13                     INC   de   
0CB8                BLOCKEND3:      
0CB8   EB                     EX   de,hl   ; sp = de = new tos*
0CB9   F9                     LD   sp,hl   
0CBA   ED 4B 06 24            LD   bc,(vTemp2)   
0CBE   FD 2A 04 24            LD   iy,(vTemp1)   
0CC2   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0CC6   7B                     LD   a,e   ; check for NUL
0CC7   B2                     OR   d   
0CC8   20 02                  JR   nz,blockEnd4   
0CCA   DD E9                  JP   (ix)   
0CCC                BLOCKEND4:      
0CCC   21 00 00               LD   hl,0   ; clear recur vector
0CCF   22 F2 23               LD   (vRecur),hl   
0CD2   C3 B5 03               JP   go1   ; execute de
0CD5                GOBLOCK:      
0CD5   ED 53 04 24            LD   (vTemp1),de   ; save de
0CD9   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CDC   FD 54                  LD   d,iyh   
0CDE   FD 5D                  LD   e,iyl   
0CE0   B7                     OR   a   ; if stack* == BP then this is the root_scope
0CE1   ED 52                  SBC   hl,de   
0CE3   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0CE7   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CE8   B4                     OR   h   
0CE9   3E 00                  LD   a,0   
0CEB   28 6A                  JR   z,goFunc8   
0CED   C5                     PUSH   bc   ; push IP
0CEE   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0CF1   FD 46 05               LD   b,(iy+5)   
0CF4   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0CF7   FD 66 03               LD   h,(iy+3)   
0CFA                GOBLOCK2:      
0CFA   C5                     PUSH   bc   ; arg_list*
0CFB   E5                     PUSH   hl   ; first_arg*
0CFC   FD E5                  PUSH   iy   ; push BP
0CFE   FD 21 00 00            LD   iy,0   ; BP = SP
0D02   FD 39                  ADD   iy,sp   
0D04                GOBLOCK3:      
0D04   42 4B                  LD   bc,de   ; bc = de = block*-1
0D06   DD E9                  JP   (ix)   
0D08                GOFUNC:      ; execute func
0D08   EB                     EX   de,hl   ; hl = func*
0D09   5E                     LD   e,(hl)   ; de = partial_array*
0D0A   23                     INC   hl   
0D0B   56                     LD   d,(hl)   
0D0C   23                     INC   hl   
0D0D   7B                     LD   a,e   ; if partial_array* == null skip
0D0E   B2                     OR   d   
0D0F   28 21                  JR   z,goFunc3   
0D11   ED 43 04 24            LD   (vTemp1),bc   
0D15   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0D18   EB                     EX   de,hl   ; hl = partial_array*
0D19   2B                     DEC   hl   ; bc = count
0D1A   46                     LD   b,(hl)   
0D1B   2B                     DEC   hl   
0D1C   4E                     LD   c,(hl)   
0D1D   23                     INC   hl   ; hl = array data*
0D1E   23                     INC   hl   
0D1F   18 06                  JR   goFunc2   ; push each item on stack
0D21                GOFUNC1:      
0D21   5E                     LD   e,(hl)   ; de = partial item
0D22   23                     INC   hl   
0D23   56                     LD   d,(hl)   
0D24   23                     INC   hl   
0D25   D5                     PUSH   de   ; push on stack
0D26   0B                     DEC   bc   
0D27                GOFUNC2:      
0D27   79                     LD   a,c   ; if count != 0 then loop
0D28   B0                     OR   b   
0D29   20 F6                  JR   nz,goFunc1   
0D2B   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0D2F   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0D32                GOFUNC3:      
0D32   5E                     LD   e,(hl)   ; de = block*
0D33   23                     INC   hl   
0D34   56                     LD   d,(hl)   
0D35   23                     INC   hl   
0D36   ED 53 04 24            LD   (vTemp1),de   ; save block*
0D3A   5E                     LD   e,(hl)   ; de = arg_list*
0D3B   23                     INC   hl   
0D3C   56                     LD   d,(hl)   
0D3D   23                     INC   hl   
0D3E   EB                     EX   de,hl   ; hl = arg_list*
0D3F   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0D43   7D                     LD   a,l   ; if arg_list* == null a = 0
0D44   B4                     OR   h   
0D45   20 03                  JR   nz,goFunc4   
0D47   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D48   18 0D                  JR   goFunc8   
0D4A                GOFUNC4:      ; allocate locals
0D4A   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D4B   18 03                  JR   goFunc6   
0D4D                GOFUNC5:      ; loop
0D4D   3B                     DEC   sp   
0D4E   3B                     DEC   sp   
0D4F   3D                     DEC   a   
0D50                GOFUNC6:      
0D50   B7                     OR   a   
0D51   20 FA                  JR   nz,goFunc5   ; end loop
0D53                GOFUNC7:      
0D53   23                     INC   hl   ; a = num_args* x 2
0D54   7E                     LD   a,(hl)   
0D55   2B                     DEC   hl   
0D56   87                     ADD   a,a   ; a *= 2
0D57                GOFUNC8:      
0D57   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D58   44 4D                  LD   bc,hl   
0D5A   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D5D   85                     ADD   a,l   
0D5E   6F                     LD   l,a   
0D5F   39                     ADD   hl,sp   
0D60   18 98                  JR   goBlock2   
0D62                             ; =                              21
0D62                             ; value _oldValue --            ; uses address in vPointer 15
0D62                ASSIGN:      
0D62   E1                     POP   hl   ; discard last accessed value
0D63   E1                     POP   hl   ; hl = new value
0D64                ASSIGN0:      
0D64   EB                     EX   de,hl   ; de = new value
0D65   2A F8 23               LD   hl,(vPointer)   
0D68                ASSIGN1:      ; entry point from defineEnd
0D68   73                     LD   (hl),e   
0D69   3A E6 23               LD   a,(vDataWidth)   
0D6C   3D                     DEC   a   ; is it byte?
0D6D   28 02                  JR   z,assign2   
0D6F   23                     INC   hl   
0D70   72                     LD   (hl),d   
0D71                ASSIGN2:      
0D71   DD E9                  JP   (ix)   
0D73                             ; hl = value1, de = value2
0D73                             ; hl = result
0D73                EQUALS:      
0D73   B7                     OR   a   ; reset the carry flag
0D74   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D76   28 16                  JR   z,true1   
0D78   18 1A                  JR   false1   
0D7A                NOTEQUALS:      
0D7A   B7                     OR   a   ; reset the carry flag
0D7B   ED 52                  SBC   hl,de   
0D7D   20 0F                  JR   nz,true1   
0D7F   18 13                  JR   false1   
0D81                             ; hl = value1 de = value2
0D81                             ; hl = result
0D81                LESSTHANEQ:      
0D81   B7                     OR   a   
0D82   ED 52                  SBC   hl,de   
0D84   18 05                  JR   lessthan1   
0D86                             ; hl = value1 de = value2
0D86                             ; hl = result
0D86                LESSTHAN:      
0D86   B7                     OR   a   
0D87   ED 52                  SBC   hl,de   
0D89   28 09                  JR   z,false1   
0D8B                LESSTHAN1:      
0D8B   FA 94 0D               JP   m,false1   
0D8E                TRUE1:       
0D8E   21 FF FF               LD   hl,TRUE   
0D91   E5                     PUSH   hl   
0D92   DD E9                  JP   (ix)   
0D94                NULL1:       
0D94                FALSE1:      
0D94   21 00 00               LD   hl,FALSE   
0D97   E5                     PUSH   hl   
0D98   DD E9                  JP   (ix)   
0D9A                XSPREAD:      
0D9A   E1                     POP   hl   ; hl = array*
0D9B   E5                     PUSH   hl   ; dupe
0D9C                          ;*Macro unroll:  PERFORM arrayLength
0D9C   DD 21 A3 0D            LD   ix,performM_2238S1851   
0DA0   C3 10 07               JP   arrayLength   
0DA3                PERFORMM_2238S1851:      
0DA3   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0DA7   C1                     POP   bc   ; bc = length
0DA8   18 06                  JR   xspread2   
0DAA                XSPREAD1:      
0DAA   5E                     LD   e,(hl)   
0DAB   23                     INC   hl   
0DAC   56                     LD   d,(hl)   
0DAD   23                     INC   hl   
0DAE   0B                     DEC   bc   
0DAF   E5                     PUSH   hl   
0DB0                XSPREAD2:      
0DB0   79                     LD   a,c   
0DB1   B0                     OR   b   
0DB2   20 F6                  JR   nz,xspread1   
0DB4   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0DB8   DD E9                  JP   (ix)   
0DBA                SPREAD:      
0DBA   E1                     POP   hl   ; hl = array*
0DBB   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0DBF   2B                     DEC   hl   ; bc = length
0DC0   46                     LD   b,(hl)   
0DC1   2B                     DEC   hl   
0DC2   4E                     LD   c,(hl)   
0DC3   23                     INC   hl   
0DC4   23                     INC   hl   
0DC5   18 06                  JR   spread2   
0DC7                SPREAD1:      
0DC7   5E                     LD   e,(hl)   
0DC8   23                     INC   hl   
0DC9   56                     LD   d,(hl)   
0DCA   23                     INC   hl   
0DCB   0B                     DEC   bc   
0DCC   E5                     PUSH   hl   
0DCD                SPREAD2:      
0DCD   79                     LD   a,c   
0DCE   B0                     OR   b   
0DCF   20 F6                  JR   nz,spread1   
0DD1   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0DD5   DD E9                  JP   (ix)   
0DD7                             ; shiftLeft                     15
0DD7                             ; value count -- value2          shift left count places
0DD7                SHIFTLEFT:      
0DD7   50 59                  LD   de,bc   ; save IP
0DD9   C1                     POP   bc   ; bc = count
0DDA   41                     LD   b,c   ; b = loop counter
0DDB   E1                     POP   hl   
0DDC   04                     INC   b   ; test for counter=0 case
0DDD   18 01                  JR   shiftLeft2   
0DDF                SHIFTLEFT1:      
0DDF   29                     ADD   hl,hl   ; left shift hl
0DE0                SHIFTLEFT2:      
0DE0   10 FD                  DJNZ   shiftLeft1   
0DE2   E5                     PUSH   hl   
0DE3   42 4B                  LD   bc,de   ; restore IP
0DE5   DD E9                  JP   (ix)   
0DE7                             ; shiftRight                    16
0DE7                             ; value count -- value2          shift left count places
0DE7                SHIFTRIGHT:      
0DE7   50 59                  LD   de,bc   ; save IP
0DE9   C1                     POP   bc   ; bc = count
0DEA   41                     LD   b,c   ; b = loop counter
0DEB   E1                     POP   hl   
0DEC   04                     INC   b   ; test for counter=0 case
0DED   18 04                  JR   shiftRight2   
0DEF                SHIFTRIGHT1:      
0DEF   CB 3C                  SRL   h   ; right shift hl
0DF1   CB 1D                  RR   l   
0DF3                SHIFTRIGHT2:      
0DF3   10 FA                  DJNZ   shiftRight1   
0DF5   E5                     PUSH   hl   
0DF6   42 4B                  LD   bc,de   ; restore IP
0DF8   DD E9                  JP   (ix)   
0DFA                             ; division subroutine.
0DFA                             ; bc: divisor, de: dividend, hl: remainder
0DFA                DIVIDE:      
0DFA   21 00 00               LD   hl,0   ; zero the remainder
0DFD   3E 10                  LD   a,16   ; loop counter
0DFF                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0DFF   CB 21                  SLA   c   
0E01   CB 10                  RL   b   
0E03   ED 6A                  ADC   hl,hl   
0E05   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0E07   38 03                  JR   c,divide2   
0E09   0C                     INC   c   
0E0A   18 01                  JR   divide3   
0E0C                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0E0C   19                     ADD   hl,de   
0E0D                DIVIDE3:      
0E0D   3D                     DEC   a   
0E0E   20 EF                  JR   nz,divide1   
0E10   50 59                  LD   de,bc   ; result from bc to de
0E12   C9                     RET      
0E13                DOTNEXT:      
0E13   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0E16   3C                     INC   a   
0E17   20 02                  JR   nz,dotNext1   
0E19   DD E9                  JP   (ix)   
0E1B                DOTNEXT1:      
0E1B   11 00 22               LD   de,BUFFER   
0E1E   2A EC 23               LD   hl,(vBufPtr)   
0E21   36 00                  LD   (hl),0   ; store NUL at end of string
0E23   ED 53 EC 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E27   EB                     EX   de,hl   ; hl = BUFFER
0E28   CD A1 0F               CALL   putstr   
0E2B   DD E9                  JP   (ix)   
0E2D                             ; arg_list - parses arg_list e.g. ab:c
0E2D                             ; -- arg_list*
0E2D                PARSEARGS:      
0E2D   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E30   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0E33   E5                     PUSH   hl   ; save start of arg_list
0E34   23                     INC   hl   ; skip length fields to start of string
0E35   23                     INC   hl   
0E36   03                     INC   bc   ; point to next char
0E37                PARSEARGS1:      
0E37   0A                     LD   a,(bc)   
0E38   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E3A   20 03                  JR   nz,parseArgs1a   
0E3C   14                     INC   d   ; non zero value local count acts as flag
0E3D   18 10                  JR   parseArgs3   
0E3F                PARSEARGS1A:      
0E3F   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E41   38 0F                  JR   c,parseArgs4   
0E43   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E45   30 0B                  JR   nc,parseArgs4   
0E47                PARSEARGS2:      
0E47   77                     LD   (hl),a   
0E48   23                     INC   hl   
0E49   1C                     INC   e   ; increase arg count
0E4A   AF                     XOR   a   
0E4B   B2                     OR   d   
0E4C   28 01                  JR   z,parseArgs3   
0E4E   14                     INC   d   ; if d > 0 increase local count
0E4F                PARSEARGS3:      
0E4F   03                     INC   bc   ; point to next char
0E50   18 E5                  JR   parseArgs1   
0E52                PARSEARGS4:      
0E52   0B                     DEC   bc   
0E53   AF                     XOR   a   
0E54   B2                     OR   d   
0E55   28 01                  JR   z,parseArgs5   
0E57   15                     DEC   d   ; remove initial inc
0E58                PARSEARGS5:      
0E58   23                     INC   hl   
0E59   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E5C   E1                     POP   hl   ; hl = start of arg_list
0E5D   72                     LD   (hl),d   ; write number of locals at start - 1
0E5E   23                     INC   hl   
0E5F   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E60   2B                     DEC   hl   
0E61   E3                     EX   (sp),hl   
0E62   E9                     JP   (hl)   
0E63                             ; create block: parses block e.g. 00bbIC4uLi4g
0E63                             ; -- block*
0E63                PARSEBLOCK:      
0E63   C5                     PUSH   bc   ; return pointer to first { of block
0E64   03                     INC   bc   
0E65   16 01                  LD   d,1   ; nesting: count first parenthesis
0E67                PARSEBLOCK1:      ; Skip to end of definition
0E67   0A                     LD   a,(bc)   ; Get the next character
0E68   03                     INC   bc   ; Point to next character
0E69   FE 21                  CP   " " + 1   ; ignore whitespace
0E6B   38 FA                  JR   c,parseBlock1   
0E6D   FE 29                  CP   ")"   
0E6F   28 2D                  JR   z,parseBlock4   
0E71   FE 7D                  CP   "}"   
0E73   28 29                  JR   z,parseBlock4   
0E75   FE 5D                  CP   "]"   
0E77   28 25                  JR   z,parseBlock4   
0E79   FE 28                  CP   "("   
0E7B   28 16                  JR   z,parseBlock2   
0E7D   FE 7B                  CP   "{"   
0E7F   28 12                  JR   z,parseBlock2   
0E81   FE 5B                  CP   "["   
0E83   28 0E                  JR   z,parseBlock2   
0E85   FE 27                  CP   "'"   
0E87   28 0D                  JR   z,parseBlock3   
0E89   FE 60                  CP   "`"   
0E8B   28 09                  JR   z,parseBlock3   
0E8D   FE 22                  CP   DQ   
0E8F   28 05                  JR   z,parseBlock3   
0E91   18 D4                  JR   parseBlock1   
0E93                PARSEBLOCK2:      
0E93   14                     INC   d   
0E94   18 D1                  JR   parseBlock1   
0E96                PARSEBLOCK3:      
0E96   3E 80                  LD   a,$80   
0E98   AA                     XOR   d   
0E99   57                     LD   d,a   
0E9A   20 CB                  JR   nz,parseBlock1   
0E9C   18 03                  JR   parseBlock5   
0E9E                PARSEBLOCK4:      
0E9E   15                     DEC   d   
0E9F   20 C6                  JR   nz,parseBlock1   ; get the next element
0EA1                PARSEBLOCK5:      
0EA1   60 69                  LD   hl,bc   ; hl = IP
0EA3   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0EA6   B7                     OR   a   ; IP - HEAP
0EA7   ED 52                  SBC   hl,de   
0EA9   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0EAB   28 1C                  JR   z,parseBlock6   
0EAD   60 69                  LD   hl,bc   ; hl = IP
0EAF   D1                     POP   de   ; de = block*
0EB0   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0EB4   B7                     OR   a   ; bc = size
0EB5   ED 52                  SBC   hl,de   
0EB7   44 4D                  LD   bc,hl   
0EB9   EB                     EX   de,hl   ; hl = block* de = heap*
0EBA   ED 5B F0 23            LD   de,(vHeapPtr)   
0EBE   D5                     PUSH   de   ; return hblock*
0EBF   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EC1   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0EC5   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0EC9                PARSEBLOCK6:      
0EC9   0B                     DEC   bc   ; balanced, exit
0ECA   E1                     POP   hl   ; hl = block*
0ECB   E3                     EX   (sp),hl   ; return to caller
0ECC   E9                     JP   (hl)   
0ECD                             ; create function
0ECD                             ; arg_list* block* -- func*
0ECD                CREATEFUNC:      
0ECD   E1                     POP   hl   ; save retrn address
0ECE   22 08 24               LD   (vTemp3),hl   
0ED1   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0ED5   E1                     POP   hl   ; hl = block*
0ED6   22 06 24               LD   (vTemp2),hl   ; save block*
0ED9   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0EDC   FD 56 05               LD   d,(iy+5)   
0EDF   7B                     LD   a,e   ; if arg_list == null then make a func
0EE0   B2                     OR   d   
0EE1   20 09                  JR   nz,createFunc0   
0EE3   21 00 00               LD   hl,0   ; partial_array = null
0EE6   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0EEA   18 65                  JR   createFunc5   
0EEC                CREATEFUNC0:      
0EEC   E1                     POP   hl   ; hl = inner_arg_list*
0EED   E5                     PUSH   hl   ; save inner_arg_list
0EEE   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0EF2   7E                     LD   a,(hl)   ; compile inner_num_locals
0EF3   4F                     LD   c,a   ; b = inner_num_locals
0EF4   12                     LD   (de),a   
0EF5   23                     INC   hl   
0EF6   13                     INC   de   
0EF7   7E                     LD   a,(hl)   ; compile inner_length
0EF8   12                     LD   (de),a   
0EF9   91                     SUB   c   ; a = inner_num args
0EFA   23                     INC   hl   
0EFB   13                     INC   de   
0EFC   B7                     OR   a   ; compile args if inner_length > 0
0EFD   28 05                  JR   z,createFunc1   
0EFF   4F                     LD   c,a   ; bc = a
0F00   06 00                  LD   b,0   
0F02   ED B0                  LDIR      
0F04                CREATEFUNC1:      
0F04   EB                     EX   de,hl   ; hl = outer_arg_list
0F05   FD 5E 04               LD   e,(iy+4)   
0F08   FD 56 05               LD   d,(iy+5)   
0F0B   EB                     EX   de,hl   
0F0C   23                     INC   hl   ; a = outer_length
0F0D   7E                     LD   a,(hl)   
0F0E   23                     INC   hl   
0F0F   B7                     OR   a   
0F10   28 05                  JR   z,createFunc2   
0F12   4F                     LD   c,a   
0F13   06 00                  LD   b,0   
0F15   ED B0                  LDIR      ; append outer_args
0F17                CREATEFUNC2:      ; a = outer_length
0F17   47                     LD   b,a   ; b = a = outer_length
0F18   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F1B   23                     INC   hl   
0F1C   7E                     LD   a,(hl)   ; add outer_length to new length
0F1D   80                     ADD   a,b   
0F1E   77                     LD   (hl),a   
0F1F   2B                     DEC   hl   
0F20   78                     LD   a,b   ; save outer_length in a'
0F21   08                     EX   af,af'   
0F22   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F23   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F24   B7                     OR   a   
0F25   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F27   4F                     LD   c,a   ; c = inner_num_locals
0F28   06 00                  LD   b,0   ; bc = inner_num_locals
0F2A   23                     INC   hl   ; a = inner_length
0F2B   7E                     LD   a,(hl)   
0F2C   91                     SUB   c   ; a = inner_num_args
0F2D   23                     INC   hl   ; hl = inner_arg_chars
0F2E   85                     ADD   a,l   ; hl += a
0F2F   6F                     LD   l,a   
0F30   3E 00                  LD   a,0   
0F32   84                     ADD   a,h   
0F33   67                     LD   h,a   
0F34   ED B0                  LDIR      ; append inner_locals
0F36                CREATEFUNC2A:      
0F36   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F37   12                     LD   (de),a   ; compile partial_array length field
0F38   13                     INC   de   
0F39   AF                     XOR   a   
0F3A   12                     LD   (de),a   
0F3B   13                     INC   de   
0F3C   D5                     PUSH   de   ; push partial_array*
0F3D   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F3E   FD 5E 02               LD   e,(iy+2)   
0F41   FD 56 03               LD   d,(iy+3)   
0F44   EB                     EX   de,hl   
0F45                CREATEFUNC3:      
0F45   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F46   4E                     LD   c,(hl)   
0F47   2B                     DEC   hl   
0F48   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F49   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F4A   13                     INC   de   
0F4B   79                     LD   a,c   
0F4C   12                     LD   (de),a   
0F4D   13                     INC   de   
0F4E   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F50                CREATEFUNC4:      
0F50   E1                     POP   hl   ; hl = partial_array*
0F51                CREATEFUNC5:      
0F51   C1                     POP   bc   ; bc = new_arg_list*
0F52   D5                     PUSH   de   ; return new func*
0F53   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F54   73                     LD   (hl),e   ; compile partial_array* to func
0F55   23                     INC   hl   
0F56   72                     LD   (hl),d   
0F57   23                     INC   hl   
0F58   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0F5C   73                     LD   (hl),e   ; compile block* to func
0F5D   23                     INC   hl   
0F5E   72                     LD   (hl),d   
0F5F   23                     INC   hl   
0F60   71                     LD   (hl),c   ; compile new_arg_list* to func
0F61   23                     INC   hl   
0F62   70                     LD   (hl),b   
0F63   23                     INC   hl   
0F64   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0F67   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0F6B   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0F6E   E9                     JP   (hl)   
0F6F                             ;*******************************************************************
0F6F                             ; general routines
0F6F                             ;*******************************************************************
0F6F                             ; followed by a table
0F6F                             ; indexed on the 0-25 lowercase letter
0F6F                             ; db lsb(addr)
0F6F                             ; the final item index 26 matches any other char
0F6F                LOWERCASETABLE:      
0F6F   03                     INC   bc   
0F70   0A                     LD   a,(bc)   
0F71   FE 7B                  CP   "z"+1   
0F73   30 0B                  JR   nc,lowerCaseTable2   
0F75   D6 61                  SUB   "a"   
0F77   38 07                  JR   c,lowerCaseTable2   
0F79                LOWERCASETABLE1:      
0F79   E1                     POP   hl   
0F7A   85                     ADD   a,l   
0F7B   6F                     LD   l,a   
0F7C   6E                     LD   l,(hl)   ; must have the same msb as the table
0F7D   C3 86 0F               JP   commandTable1   
0F80                LOWERCASETABLE2:      
0F80   3E 1A                  LD   a,26   
0F82   0B                     DEC   bc   
0F83   18 F4                  JR   lowerCaseTable1   
0F85                             ; followed by a table
0F85                             ; db char
0F85                             ; dw addr
0F85                             ; the final item must have char == NUL
0F85                COMMANDTABLE:      
0F85   E1                     POP   hl   
0F86                COMMANDTABLE1:      
0F86   03                     INC   bc   
0F87                COMMANDTABLE2:      
0F87   AF                     XOR   a   
0F88   BE                     CP   (hl)   
0F89   20 03                  JR   nz,commandTable3   
0F8B   0B                     DEC   bc   
0F8C   18 09                  JR   commandTable4   
0F8E                COMMANDTABLE3:      
0F8E   0A                     LD   a,(bc)   
0F8F   BE                     CP   (hl)   
0F90   28 05                  JR   z,commandTable4   
0F92   23                     INC   hl   
0F93   23                     INC   hl   
0F94   23                     INC   hl   
0F95   18 F0                  JR   commandTable2   
0F97                COMMANDTABLE4:      
0F97   23                     INC   hl   
0F98   5E                     LD   e,(hl)   
0F99   23                     INC   hl   
0F9A   56                     LD   d,(hl)   
0F9B   EB                     EX   de,hl   
0F9C   E9                     JP   (hl)   
0F9D                PUTSTR0:      
0F9D   CD 85 00               CALL   putchar   
0FA0   23                     INC   hl   
0FA1                PUTSTR:      
0FA1   7E                     LD   a,(hl)   
0FA2   B7                     OR   a   
0FA3   20 F8                  JR   nz,putstr0   
0FA5   C9                     RET      
0FA6                             ; **************************************************************************
0FA6                             ; calculate nesting value
0FA6                             ; a is char to be tested,
0FA6                             ; e is the nesting value (initially 0)
0FA6                             ; e is increased by ( and [
0FA6                             ; e is decreased by ) and ]
0FA6                             ; e has its bit 7 toggled by `
0FA6                             ; limited to 127 levels
0FA6                             ; **************************************************************************
0FA6                NESTING:      
0FA6   FE 22                  CP   DQ   ; quote char
0FA8   28 06                  JR   z,nesting0   
0FAA   FE 60                  CP   "`"   ; quote char
0FAC   28 02                  JR   z,nesting0   
0FAE   18 0A                  JR   nesting1   
0FB0                NESTING0:      
0FB0   CB 7B                  BIT   7,e   
0FB2   28 03                  JR   z,nesting1a   
0FB4   CB BB                  RES   7,e   
0FB6   C9                     RET      
0FB7                NESTING1A:      
0FB7   CB FB                  SET   7,e   
0FB9   C9                     RET      
0FBA                NESTING1:      
0FBA   CB 7B                  BIT   7,e   
0FBC   C0                     RET   nz   
0FBD   FE 7B                  CP   "{"   
0FBF   28 08                  JR   z,nesting2   
0FC1   FE 5B                  CP   "["   
0FC3   28 04                  JR   z,nesting2   
0FC5   FE 28                  CP   "("   
0FC7   20 02                  JR   nz,nesting3   
0FC9                NESTING2:      
0FC9   1C                     INC   e   
0FCA   C9                     RET      
0FCB                NESTING3:      
0FCB   FE 7D                  CP   "}"   
0FCD   28 07                  JR   z,nesting4   
0FCF   FE 5D                  CP   "]"   
0FD1   28 03                  JR   z,nesting4   
0FD3   FE 29                  CP   ")"   
0FD5   C0                     RET   nz   
0FD6                NESTING4:      
0FD6   1D                     DEC   e   
0FD7   C9                     RET      
0FD8                PROMPT:      
0FD8   CD E8 0F               CALL   printStr   
0FDB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0FE0   C9                     RET      
0FE1                CRLF:        
0FE1   CD E8 0F               CALL   printStr   
0FE4   0D 0A 00               .CSTR   "\r\n"   
0FE7   C9                     RET      
0FE8                             ; prints a null teminated string
0FE8                             ; the string should be immediately following the call
0FE8                PRINTSTR:      
0FE8   E3                     EX   (sp),hl   ; swap			
0FE9   CD A1 0F               CALL   putstr   
0FEC   23                     INC   hl   ; inc past NUL
0FED   E3                     EX   (sp),hl   ; put it back	
0FEE   C9                     RET      
0FEF                INIT:        
0FEF   21 F0 01               LD   hl,titleStr   
0FF2   11 0E 24               LD   de,titleBuf   
0FF5   06 14                  LD   b,20   
0FF7                INIT1:       
0FF7   1A                     LD   a,(de)   
0FF8   BE                     CP   (hl)   
0FF9   20 17                  JR   nz,coldBoot0   
0FFB   13                     INC   de   
0FFC   23                     INC   hl   
0FFD   10 F8                  DJNZ   init1   
0FFF                WARMINIT:      
0FFF   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
1003   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
1007   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
100B   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
100F   C3 49 10               JP   start1   
1012                COLDBOOT0:      
1012   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1015   11 0E 24               LD   de,titleBuf   
1018   06 14                  LD   b,20   
101A   ED B0                  LDIR      
101C                COLDINIT:      
101C   21 DE 01               LD   hl,isysVars   
101F   11 E6 23               LD   de,sysVars   
1022   01 12 00               LD   bc,9 * 2   
1025   ED B0                  LDIR      
1027   21 00 23               LD   hl,vars   ; 52 vars LO HI
102A   06 34                  LD   b,26*2   
102C   AF                     XOR   a   
102D                COLDBOOT1:      
102D   77                     LD   (hl),a   
102E   23                     INC   hl   
102F   10 FC                  DJNZ   coldBoot1   
1031   DD 2A EE 23            LD   ix,(vNext)   
1035   FD 21 00 21            LD   iy,STACK   
1039   C9                     RET      
103A                COLDSTART:      
103A   31 00 21               LD   sp,STACK   
103D   CD 12 10               CALL   coldBoot0   
1040   C3 49 10               JP   start1   
1043                START:       
1043   31 00 21               LD   sp,STACK   ; start Monty
1046   CD EF 0F               CALL   init   ; setups
1049                START1:      
1049   21 0E 24               LD   hl,titleBuf   
104C   CD A1 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
104F                INTERPRET:      
104F   CD D8 0F               CALL   prompt   
1052   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1055   21 00 21               LD   hl,TIB   
1058   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
105B                INTERPRET2:      ; calculate nesting
105B   1E 00                  LD   e,0   ; initilize nesting value
105D   C5                     PUSH   bc   ; save offset into TIB,
105E                             ; bc is also the count of chars in TIB
105E   21 00 21               LD   hl,TIB   ; hl is start of TIB
1061   18 0B                  JR   interpret4   
1063                INTERPRET3:      
1063   3E 33                  LD   a,"3"   
1065   CD 85 00               CALL   putchar   
1068   7E                     LD   a,(hl)   ; a = char in TIB
1069   23                     INC   hl   ; inc pointer into TIB
106A   0B                     DEC   bc   ; dec count of chars in TIB
106B   CD A6 0F               CALL   nesting   ; update nesting value
106E                INTERPRET4:      
106E   79                     LD   a,c   ; is count zero?
106F   B0                     OR   b   
1070   20 F1                  JR   nz,interpret3   ; if not loop
1072   C1                     POP   bc   ; restore offset into TIB
1073                INTERPRET5:      
1073   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
1076   FE 20                  CP   $20   ; compare to space
1078   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
107A   FE 00                  CP   NUL   ; is it end of string? NUL end of string
107C                             ; ???? NEEDED?
107C   28 36                  JR   z,interpret8   
107E   FE 0D                  CP   "\r"   ; carriage return? ascii 13
1080   28 1F                  JR   z,interpret7   ; if anything else its macro/control
1082   FE 05                  CP   CTRL_E   
1084   CA 15 11               JP   z,edit_   
1087   FE 08                  CP   CTRL_H   
1089   CA 05 11               JP   z,backSpace_   
108C   FE 0A                  CP   CTRL_J   
108E   CA 18 11               JP   z,reEdit_   
1091                             ; cp CTRL_S
1091                             ; jp z,printStack_
1091                             ; DB     lsb(edit_)       ; ENQ ^E  5
1091                             ; DB     lsb(reedit_)     ; LF  ^J 10
1091                             ; DB     lsb(list_)       ; FF  ^L 12
1091                             ; DB     lsb(printStack_) ; DLE ^P 16
1091                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
1091                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
1091                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
1091                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
1091                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
1091                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
1091                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
1091                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
1091                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
1091                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
1091                INTERPRET5A:      
1091                             ; ld (vTIBPtr),bc
1091                             ; ld bc,(vTIBPtr)
1091   18 C8                  JR   interpret2   
1093                INTERPRET6:      
1093   21 00 21               LD   hl,TIB   
1096   09                     ADD   hl,bc   
1097   77                     LD   (hl),a   ; store the character in textbuf
1098   03                     INC   bc   
1099   CD 85 00               CALL   putchar   ; echo character to screen
109C   CD A6 0F               CALL   nesting   
109F   18 D2                  JR   interpret5   ; wait for next character
10A1                INTERPRET7:      
10A1   21 00 21               LD   hl,TIB   
10A4   09                     ADD   hl,bc   
10A5   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
10A7   23                     INC   hl   
10A8   36 0A                  LD   (hl),"\n"   
10AA   23                     INC   hl   
10AB   03                     INC   bc   
10AC   03                     INC   bc   
10AD   CD E1 0F               CALL   crlf   ; echo character to screen
10B0   7B                     LD   a,e   ; if zero nesting append and ETX after \r
10B1   B7                     OR   a   
10B2   20 BF                  JR   nz,interpret5   
10B4                INTERPRET8:      
10B4   21 00 21               LD   hl,TIB   
10B7   09                     ADD   hl,bc   
10B8   22 EA 23               LD   (vTIBPtr),hl   
10BB   01 00 21               LD   bc,TIB   
10BE   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
10C2   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
10C6   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
10CA   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
10CE   0B                     DEC   bc   
10CF                NEXT:        
10CF   03                     INC   bc   ; Increment the IP
10D0   0A                     LD   a,(bc)   ; Get the next character and dispatch
10D1   FE 20                  CP   " "   ; whitespace?
10D3   28 FA                  JR   z,next   ; space? ignore
10D5   38 0D                  JR   c,next1   
10D7   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
10D9   6F                     LD   l,a   ; index into table
10DA   26 01                  LD   h,msb(opcodes)   ; start address of jump table
10DC   6E                     LD   l,(hl)   ; get low jump address
10DD   24                     INC   h   ; page 2
10DE   FE BA                  CP   "Z" - "!" + 1 + $80   
10E0   38 01                  JR   c,next0   
10E2   24                     INC   h   ; page 3
10E3                NEXT0:       
10E3   E9                     JP   (hl)   ; Jump to routine
10E4                NEXT1:       
10E4   FE 00                  CP   NUL   ; end of input string?
10E6   28 03                  JR   z,exit   
10E8   C3 4F 10               JP   interpret   ; no, other whitespace, macros?
10EB                EXIT:        
10EB   03                     INC   bc   
10EC   60 69                  LD   hl,bc   
10EE   E9                     JP   (hl)   
10EF                RUN:         
10EF   C1                     POP   bc   
10F0   0B                     DEC   bc   
10F1   DD E9                  JP   (ix)   
10F3                ERROR:       
10F3   E5                     PUSH   hl   
10F4   CD EF 10               CALL   run   
10F7   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1102   C3 4F 10               JP   interpret   
1105                BACKSPACE_:      
1105   79                     LD   a,c   
1106   B0                     OR   b   
1107   CA 5B 10               JP   z,interpret2   
110A   0B                     DEC   bc   
110B   CD E8 0F               CALL   printStr   
110E   08 20 08 00            .CSTR   "\b \b"   
1112   C3 5B 10               JP   interpret2   
1115                             ; edit
1115                EDIT_:       
1115   C3 4F 10               JP   interpret   
1118                REEDIT_:      
1118   C3 4F 10               JP   interpret   
111B                             ; editDef:
111B                             ;     pop hl                      ; pop ret address
111B                             ;     ex (sp),hl                  ; swap with TOS
111B                             ;     push hl                     ; dup TOS
111B                             ;     ld a,l                      ; a = ident
111B                             ;     ld de,TIB                   ; de = start of TIB
111B                             ;     ld (vTIBPtr),de             ; update TIB*
111B                             ;     push ix                     ; save NEXT
111B                             ;     ld ix,editDef0              ; NEXT = editDef0
111B                             ;     jp lookupRef                ; convert letter into address
111B                             ; editDef0:
111B                             ;     ld e,(hl)                   ; de = (hl++)
111B                             ;     inc hl
111B                             ;     ld d,(hl)
111B                             ;     ld a,d                      ; de == 0 ?
111B                             ;     or e
111B                             ;     jr z,editDef4
111B                             ;     ld ix,editDef3              ; NEXT = editDef3
111B                             ;     ex de,hl
111B                             ;     ld a,(hl)
111B                             ;     cp "{"
111B                             ;     jr nz,editDef1
111B                             ;     jp editBlock0               ; convert letter into address
111B                             ; editDef1:
111B                             ;     cp "("
111B                             ;     jr nz,editDef2
111B                             ;     jp editBlock0               ; convert letter into address
111B                             ; editDef2:
111B                             ;     jp editFunc
111B                             ; editDef3:
111B                             ;     ld a," "                    ; write assign
111B                             ;     call writeChar
111B                             ;     pop hl                      ; a = ident
111B                             ;     ld a,l
111B                             ;     call writeChar
111B                             ;     ld a,"="                    ; write assign
111B                             ;     call writeChar
111B                             ;     ld ix,editDef4              ; NEXT = editDef4
111B                             ;     jp printTIB
111B                             ; editDef4:
111B                             ;     pop ix                      ; restore NEXT
111B                             ;     jp (ix)
111B                             ; writeChar:
111B                             ;     ld de,(vTIBPtr)             ; de = TIB*
111B                             ;     ld (de),a                   ; write ident
111B                             ;     inc de
111B                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
111B                             ;     ret
111B                             ; ; printTIB
111B                             ; printTIB:
111B                             ;     ld hl,(vTIBPtr)
111B                             ;     ld de,TIB
111B                             ;     or a
111B                             ;     sbc hl,de
111B                             ;     jp printTIB2
111B                             ; printTIB1:
111B                             ;     ld a,(de)
111B                             ;     call putchar
111B                             ; printTIB2:
111B                             ;     ld a,l
111B                             ;     or h
111B                             ;     jr nz,printTIB1
111B                             ;     jp (ix)
111B                             ; editBlock:
111B                             ;     pop hl                      ; hl = block*
111B                             ; editBlock0:
111B                             ;     push ix                     ; save next
111B                             ;     push hl                     ; push block*
111B                             ;     push hl                     ; push block*
111B                             ;     ld ix,(editBlock2)
111B                             ;     jp blockLength
111B                             ; editBlock1:
111B                             ;     pop hl                      ; bc = length, (sp) = IP
111B                             ;     pop de                      ; de = block*
111B                             ;     ld a,l
111B                             ;     or h
111B                             ;     jr z,editBlock2
111B                             ;     push bc
111B                             ;     ld bc,hl
111B                             ;     ex de,hl                    ; hl = block*
111B                             ;     ld de,(vTIBPtr)              ; de = TIB*
111B                             ;     ldir                        ; copy block to TIB
111B                             ;     ld (vTIBPtr),de              ; save TIB*
111B                             ;     pop bc
111B                             ; editBlock2:
111B                             ;     pop ix                      ; restore next
111B                             ;     jp (ix)
111B                             ; editFunc:
111B                             ;     jp (ix)
111B                             ; editArray:
111B                             ;     jp (ix)
111B                             ; editparseArgs:
111B                             ;     jp (ix)
111B                             ; ; blockLength
111B                             ; ; addr1 -- length
111B                             ; blockLength:
111B                             ;     pop hl                      ; block*
111B                             ;     push hl                     ; save block*
111B                             ;     inc hl                      ; skip first char
111B                             ;     ld d,1                      ; increase nesting
111B                             ; blockLength1:                   ; Skip to end of definition
111B                             ;     ld a,(hl)                   ; Get the next character
111B                             ;     inc hl                      ; Point to next character
111B                             ;     cp " " + 1                  ; ignore whitespace
111B                             ;     jr c,blockLength1
111B                             ;     cp ")"
111B                             ;     jr z,blockLength4
111B                             ;     cp "}"
111B                             ;     jr z,blockLength4
111B                             ;     cp "]"
111B                             ;     jr z,blockLength4
111B                             ;     cp "("
111B                             ;     jr z,blockLength2
111B                             ;     cp "{"
111B                             ;     jr z,blockLength2
111B                             ;     cp "["
111B                             ;     jr z,blockLength2
111B                             ;     cp "'"
111B                             ;     jr z,blockLength3
111B                             ;     cp "`"
111B                             ;     jr z,blockLength3
111B                             ;     cp DQ
111B                             ;     jr z,blockLength3
111B                             ;     jr blockLength1
111B                             ; blockLength2:
111B                             ;     inc d
111B                             ;     jr blockLength1
111B                             ; blockLength4:
111B                             ;     dec d
111B                             ;     jr nz, blockLength1         ; get the next element
111B                             ; blockLength3:
111B                             ;     ld a,$80
111B                             ;     xor d
111B                             ;     ld d,a
111B                             ;     jr nz, blockLength1
111B                             ;     pop hl                      ; hl = block*
111B                             ;     or a
111B                             ;     sbc hl,de
111B                             ;     push hl
111B                             ;     jp (ix)
111B                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
111B                             ; \a start of stack \#3 depth \b base \$ prompt
111B                             ; DW dStack               ; a vS0 start of datastack			
111B                             ; DW FALSE                ; b vBase16
111B                             ; DW 0                    ; c vTIBPtr an offset to the tib
111B                             ; DW 0                    ; d
111B                             ; DW 65                   ; e vLastDef "A" last command u defined
111B                             ; DW 0                    ; f
111B                             ; DW page6                ; g 256 bytes limits
111B                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
111B                F1:          
111B                F2:          
111B                F3:          
111B                F4:          
111B                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 2422 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2406 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 412 IN MAIN.asm
                    > USED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 886 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 909 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 924 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 2425 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2431 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2354 IN MAIN.asm
DQUOTE_:            0204 DEFINED AT LINE 173 IN MAIN.asm
COMMA_:             0204 DEFINED AT LINE 174 IN MAIN.asm
DOLLAR_:            0206 DEFINED AT LINE 177 IN MAIN.asm
PERCENT_:           0209 DEFINED AT LINE 180 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 183 IN MAIN.asm
LPAREN_:            020F DEFINED AT LINE 186 IN MAIN.asm
DOT_:               0212 DEFINED AT LINE 189 IN MAIN.asm
SLASH_:             0215 DEFINED AT LINE 192 IN MAIN.asm
NUM_:               0218 DEFINED AT LINE 195 IN MAIN.asm
SEMICOLON_:         021B DEFINED AT LINE 198 IN MAIN.asm
QUESTION_:          021E DEFINED AT LINE 201 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 204 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 205 IN MAIN.asm
NOT:                022C DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 217 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 218 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 225 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 227 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 231 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 232 IN MAIN.asm
LT_:                024C DEFINED AT LINE 240 IN MAIN.asm
LT:                 024C DEFINED AT LINE 241 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 248 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 256 IN MAIN.asm
HASH:               025E DEFINED AT LINE 257 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 258 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
ARRAYINDEX2:        0273 DEFINED AT LINE 275 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
RPAREN_:            0276 DEFINED AT LINE 280 IN MAIN.asm
RPAREN:             0276 DEFINED AT LINE 281 IN MAIN.asm
AMPER_:             027E DEFINED AT LINE 288 IN MAIN.asm
AMPER:              027E DEFINED AT LINE 289 IN MAIN.asm
AND:                027E DEFINED AT LINE 290 IN MAIN.asm
MINUS_:             0288 DEFINED AT LINE 303 IN MAIN.asm
MINUS:              0288 DEFINED AT LINE 304 IN MAIN.asm
SUB:                0294 DEFINED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 309 IN MAIN.asm
SUB1:               029E DEFINED AT LINE 319 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
STAR_:              02A6 DEFINED AT LINE 327 IN MAIN.asm
STAR:               02A6 DEFINED AT LINE 328 IN MAIN.asm
MUL:                02AE DEFINED AT LINE 334 IN MAIN.asm
MUL2:               02B0 DEFINED AT LINE 337 IN MAIN.asm
MUL3:               02B8 DEFINED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 351 IN MAIN.asm
PLUS_:              02CA DEFINED AT LINE 357 IN MAIN.asm
PLUS:               02CA DEFINED AT LINE 358 IN MAIN.asm
ADD:                02CA DEFINED AT LINE 359 IN MAIN.asm
ADD1:               02D5 DEFINED AT LINE 367 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
ADD3:               02D9 DEFINED AT LINE 372 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
ADD4:               02E3 DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
COLON_:             02E6 DEFINED AT LINE 383 IN MAIN.asm
COLON:              02E6 DEFINED AT LINE 384 IN MAIN.asm
DEFINESTART:        02F3 DEFINED AT LINE 392 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
UPCASE_:            02FC DEFINED AT LINE 399 IN MAIN.asm
UPCASE:             02FC DEFINED AT LINE 400 IN MAIN.asm
SEMICOLON:          0301 DEFINED AT LINE 406 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DEFINEEND:          0301 DEFINED AT LINE 407 IN MAIN.asm
DEFINEEND1:         0313 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LOWCASE_:           0315 DEFINED AT LINE 424 IN MAIN.asm
LOWCASE:            0315 DEFINED AT LINE 425 IN MAIN.asm
IDENT1:             031A DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
LBRACK_:            0327 DEFINED AT LINE 441 IN MAIN.asm
LBRACK:             0327 DEFINED AT LINE 442 IN MAIN.asm
ARRAYSTART:         0327 DEFINED AT LINE 443 IN MAIN.asm
BACKSLASH_:         0343 DEFINED AT LINE 458 IN MAIN.asm
BACKSLASH:          0343 DEFINED AT LINE 459 IN MAIN.asm
LAMBDA:             0343 DEFINED AT LINE 460 IN MAIN.asm
LAMBDA1:            0348 DEFINED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
LAMBDA2:            0358 DEFINED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
RBRACK_:            0364 DEFINED AT LINE 480 IN MAIN.asm
RBRACK:             0364 DEFINED AT LINE 481 IN MAIN.asm
ARRAYEND:           0364 DEFINED AT LINE 482 IN MAIN.asm
ARRAYEND1:          0380 DEFINED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
ARRAYEND2:          0390 DEFINED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 505 IN MAIN.asm
ARRAYEND3:          0395 DEFINED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
CARET_:             03B4 DEFINED AT LINE 534 IN MAIN.asm
CARET:              03B4 DEFINED AT LINE 538 IN MAIN.asm
GO:                 03B4 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03B5 DEFINED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
GO2:                03BB DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 544 IN MAIN.asm
GRAVE_:             03CA DEFINED AT LINE 555 IN MAIN.asm
GRAVE:              03CA DEFINED AT LINE 556 IN MAIN.asm
PRINTLITERAL:       03CA DEFINED AT LINE 557 IN MAIN.asm
PRINTLITERAL0:      03D1 DEFINED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
PRINTLITERAL1:      03D4 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
LBRACE_:            03E0 DEFINED AT LINE 572 IN MAIN.asm
LBRACE:             03E0 DEFINED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
PIPE_:              03E5 DEFINED AT LINE 579 IN MAIN.asm
PIPE:               03E5 DEFINED AT LINE 580 IN MAIN.asm
OR:                 03E5 DEFINED AT LINE 581 IN MAIN.asm
RBRACE_:            03F0 DEFINED AT LINE 592 IN MAIN.asm
TILDE_:             03F3 DEFINED AT LINE 596 IN MAIN.asm
UNDERSCORE_:        03F6 DEFINED AT LINE 599 IN MAIN.asm
CHAR:               03F6 DEFINED AT LINE 600 IN MAIN.asm
AT_:                03FE DEFINED AT LINE 608 IN MAIN.asm
AT:                 03FE DEFINED AT LINE 609 IN MAIN.asm
ADDR:               03FE DEFINED AT LINE 610 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
PRINT:              0500 DEFINED AT LINE 622 IN MAIN.asm
PRINTCHAR:          0512 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
PRINTSTRING:        0521 DEFINED AT LINE 648 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
PRINTSTRING0:       0528 DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
PRINTSTRING1:       052B DEFINED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
PRINTNUMBER:        0536 DEFINED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
PRINTDEC:           0541 DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
PRINTDEC1:          054F DEFINED AT LINE 681 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
PRINTDEC2:          055E DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
PRINTDEC3:          056E DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
PRINTDEC4:          058E DEFINED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
PRINTDEC5:          0590 DEFINED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
PRINTDEC6:          05A0 DEFINED AT LINE 735 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PRINTDEC7:          05A1 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
PRINTHEX0:          05A7 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
PRINTHEX:           05AD DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PRINTHEX1:          05B5 DEFINED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
PRINTHEX2:          05C0 DEFINED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
PRINTHEX3:          05CF DEFINED AT LINE 772 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
PRINTHEX4:          05D8 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
DQUOTE:             05E3 DEFINED AT LINE 792 IN MAIN.asm
UNDERSCORE:         05E3 DEFINED AT LINE 793 IN MAIN.asm
COMMA:              05E3 DEFINED AT LINE 794 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 803 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 839 IN MAIN.asm
COMMAND_B_:         0638 DEFINED AT LINE 853 IN MAIN.asm
COMMAND_D_:         0644 DEFINED AT LINE 863 IN MAIN.asm
COMMAND_F_:         064A DEFINED AT LINE 869 IN MAIN.asm
COMMAND_H_:         0665 DEFINED AT LINE 889 IN MAIN.asm
COMMAND_I_:         066B DEFINED AT LINE 896 IN MAIN.asm
KEY_:               0671 DEFINED AT LINE 902 IN MAIN.asm
COMMAND_M_:         0674 DEFINED AT LINE 906 IN MAIN.asm
OUTPUT_:            067A DEFINED AT LINE 912 IN MAIN.asm
COMMAND_P_:         067D DEFINED AT LINE 916 IN MAIN.asm
COMMAND_Q_:         0680 DEFINED AT LINE 921 IN MAIN.asm
COMMAND_R_:         0686 DEFINED AT LINE 927 IN MAIN.asm
COMMAND_S_:         0692 DEFINED AT LINE 937 IN MAIN.asm
TRUE_:              06A7 DEFINED AT LINE 953 IN MAIN.asm
COMMAND_V_:         06AA DEFINED AT LINE 957 IN MAIN.asm
COMMAND_W_:         06BF DEFINED AT LINE 973 IN MAIN.asm
XOR_:               06C5 DEFINED AT LINE 979 IN MAIN.asm
COMMAND_NOP_:       06C8 DEFINED AT LINE 984 IN MAIN.asm
COMMAND_DEFAULT_:   06CB DEFINED AT LINE 989 IN MAIN.asm
NOP:                06CE DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
DIV:                06D0 DEFINED AT LINE 999 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
ABSOLUTE:           06E1 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
ABSOLUTE1:          06EC DEFINED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1015 IN MAIN.asm
ADDROF:             06EF DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
ADDROF1:            0703 DEFINED AT LINE 1040 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
ADDROF2:            070E DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
ARRAYLENGTH:        0710 DEFINED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 44
                    > USED AT LINE 44
ARRAYLENGTH1:       0716 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
ARRAYSIZE:          0719 DEFINED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
PERFORMM_1512S1068: 0720 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              072D DEFINED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
BREAK1:             0734 DEFINED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
BYTEMODE:           0747 DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
BYTEMODE1:          074A DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
COMMENT:            074F DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
CONSTHEAPSTART:     0758 DEFINED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
CONSTTIBSTART:      075E DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
CONSTBUFSTART:      0764 DEFINED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
DECBASE:            076A DEFINED AT LINE 1125 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
DECBASE1:           076D DEFINED AT LINE 1127 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
ERROR1:             0772 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 925 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
HEXBASE:            0778 DEFINED AT LINE 1135 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
INPUT:              077E DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
KEY:                0789 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
OUTPUT:             0792 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
QUIT:               079B DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
QUIT1:              07A2 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
RECUR:              07A5 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
REMAIN:             07AB DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
STRINGBEGIN:        07B1 DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
STRINGEND:          07B9 DEFINED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGEND1:         07E0 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
STRINGLENGTH:       07E8 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      07EE DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
STRINGLENGTH2:      07F0 DEFINED AT LINE 1227 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
STRINGLENGTH3:      07F4 DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
STRINGSIZE:         07F7 DEFINED AT LINE 1235 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
PERFORMM_1660S1236: 07FE DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      0803 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
STRINGCOMPARE1:     0805 DEFINED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
STRINGCOMPARE2:     0810 DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
STRINGCOMPARE3:     0815 DEFINED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
STRINGCOMPARE4:     0818 DEFINED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
VARBUFPTR:          081B DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
VARHEAPPTR:         0824 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
VARTIBPTR:          082D DEFINED AT LINE 1275 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
VARIABLE:           0836 DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
                    > USED AT LINE 1278 IN MAIN.asm
CONSTANT:           0839 DEFINED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
WORDMODE:           083C DEFINED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
XOR:                0842 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
XOR1:               0843 DEFINED AT LINE 1294 IN MAIN.asm
RANGESRC:           084D DEFINED AT LINE 32
                    > USED AT LINE 933 IN MAIN.asm
RANGESRCM_1725S1310: 085C DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          08E1 DEFINED AT LINE 32
                    > USED AT LINE 845 IN MAIN.asm
ARRAYITERM_1744S1330: 08EE DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0962 DEFINED AT LINE 32
                    > USED AT LINE 945 IN MAIN.asm
STRINGITERM_1763S1350: 096F DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                09EA DEFINED AT LINE 32
                    > USED AT LINE 908 IN MAIN.asm
MAPM_1783S1372:     09F7 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0A2C DEFINED AT LINE 32
                    > USED AT LINE 877 IN MAIN.asm
FILTERM_1797S1387:  0A3A DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A8A DEFINED AT LINE 32
                    > USED AT LINE 871 IN MAIN.asm
FOLDM_1816S1407:    0A99 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0ADC DEFINED AT LINE 32
                    > USED AT LINE 873 IN MAIN.asm
FOREACHM_1830S1422: 0AEA DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0B28 DEFINED AT LINE 32
                    > USED AT LINE 875 IN MAIN.asm
FUNCSRCM_1844S1437: 0B34 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0B61 DEFINED AT LINE 32
                    > USED AT LINE 625 IN MAIN.asm
PRINTARRAYM_1854S1448: 0B6F DEFINED AT LINE 39
                    > USED AT LINE 35
TILDE:              0BA9 DEFINED AT LINE 1459 IN MAIN.asm
                    > USED AT LINE 597 IN MAIN.asm
INVERT:             0BA9 DEFINED AT LINE 1460 IN MAIN.asm
DOLLAR:             0BB3 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
HEXNUM:             0BB3 DEFINED AT LINE 1472 IN MAIN.asm
HEXNUM1:            0BB6 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
HEXNUM2:            0BBE DEFINED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
QUESTION:           0BD0 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
IF:                 0BD0 DEFINED AT LINE 1496 IN MAIN.asm
IFTE:               0BDC DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
IFTE1:              0BDD DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1503 IN MAIN.asm
QUOTE:              0BE9 DEFINED AT LINE 1521 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
STRING:             0BE9 DEFINED AT LINE 1522 IN MAIN.asm
STRING1:            0BF2 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
STRING2:            0BF5 DEFINED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
STRING3:            0BFB DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
PERCENT:            0C03 DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
ARG:                0C03 DEFINED AT LINE 1549 IN MAIN.asm
ARG0:               0C1F DEFINED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
ARG0A:              0C28 DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
ARG1:               0C2D DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
ARG1A:              0C35 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
NUM:                0C38 DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
NUM0:               0C41 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
NUM1:               0C42 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
NUM2:               0C5A DEFINED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1602 IN MAIN.asm
                    > USED AT LINE 1604 IN MAIN.asm
NUM3:               0C65 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
RBRACE:             0C68 DEFINED AT LINE 1630 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKEND:           0C68 DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
BLOCKEND1:          0C9A DEFINED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
BLOCKEND2:          0CA6 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
BLOCKEND3:          0CB8 DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
BLOCKEND4:          0CCC DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
GOBLOCK:            0CD5 DEFINED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
GOBLOCK2:           0CFA DEFINED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
GOBLOCK3:           0D04 DEFINED AT LINE 1712 IN MAIN.asm
GOFUNC:             0D08 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
GOFUNC1:            0D21 DEFINED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
GOFUNC2:            0D27 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
GOFUNC3:            0D32 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
GOFUNC4:            0D4A DEFINED AT LINE 1765 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOFUNC5:            0D4D DEFINED AT LINE 1768 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
GOFUNC6:            0D50 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
GOFUNC7:            0D53 DEFINED AT LINE 1775 IN MAIN.asm
GOFUNC8:            0D57 DEFINED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
ASSIGN:             0D62 DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ASSIGN0:            0D64 DEFINED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
                    > USED AT LINE 381 IN MAIN.asm
ASSIGN1:            0D68 DEFINED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 415 IN MAIN.asm
ASSIGN2:            0D71 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
EQUALS:             0D73 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
NOTEQUALS:          0D7A DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
LESSTHANEQ:         0D81 DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LESSTHAN:           0D86 DEFINED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
LESSTHAN1:          0D8B DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
TRUE1:              0D8E DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
NULL1:              0D94 DEFINED AT LINE 1842 IN MAIN.asm
FALSE1:             0D94 DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
XSPREAD:            0D9A DEFINED AT LINE 1848 IN MAIN.asm
PERFORMM_2238S1851: 0DA3 DEFINED AT LINE 45
                    > USED AT LINE 43
XSPREAD1:           0DAA DEFINED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
XSPREAD2:           0DB0 DEFINED AT LINE 1862 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
SPREAD:             0DBA DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
SPREAD1:            0DC7 DEFINED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1889 IN MAIN.asm
SPREAD2:            0DCD DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
SHIFTLEFT:          0DD7 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 245 IN MAIN.asm
SHIFTLEFT1:         0DDF DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
SHIFTLEFT2:         0DE0 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
SHIFTRIGHT:         0DE7 DEFINED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
SHIFTRIGHT1:        0DEF DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
SHIFTRIGHT2:        0DF3 DEFINED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
DIVIDE:             0DFA DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1004 IN MAIN.asm
DIVIDE1:            0DFF DEFINED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1946 IN MAIN.asm
DIVIDE2:            0E0C DEFINED AT LINE 1942 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
DIVIDE3:            0E0D DEFINED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
DOTNEXT:            0E13 DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
DOTNEXT1:           0E1B DEFINED AT LINE 1955 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
PARSEARGS:          0E2D DEFINED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 462 IN MAIN.asm
PARSEARGS1:         0E37 DEFINED AT LINE 1973 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
PARSEARGS1A:        0E3F DEFINED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
PARSEARGS2:         0E47 DEFINED AT LINE 1984 IN MAIN.asm
PARSEARGS3:         0E4F DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
PARSEARGS4:         0E52 DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
PARSEARGS5:         0E58 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
PARSEBLOCK:         0E63 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
PARSEBLOCK1:        0E67 DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
PARSEBLOCK2:        0E93 DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
PARSEBLOCK3:        0E96 DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
PARSEBLOCK4:        0E9E DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
PARSEBLOCK5:        0EA1 DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
PARSEBLOCK6:        0EC9 DEFINED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
CREATEFUNC:         0ECD DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
CREATEFUNC0:        0EEC DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
CREATEFUNC1:        0F04 DEFINED AT LINE 2117 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
CREATEFUNC2:        0F17 DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
CREATEFUNC2A:       0F36 DEFINED AT LINE 2156 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
CREATEFUNC3:        0F45 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
CREATEFUNC4:        0F50 DEFINED AT LINE 2179 IN MAIN.asm
CREATEFUNC5:        0F51 DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
LOWERCASETABLE:     0F6F DEFINED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
LOWERCASETABLE1:    0F79 DEFINED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
LOWERCASETABLE2:    0F80 DEFINED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2215 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
COMMANDTABLE:       0F85 DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
COMMANDTABLE1:      0F86 DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2223 IN MAIN.asm
COMMANDTABLE2:      0F87 DEFINED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
COMMANDTABLE3:      0F8E DEFINED AT LINE 2243 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
COMMANDTABLE4:      0F97 DEFINED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
PUTSTR0:            0F9D DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
PUTSTR:             0FA1 DEFINED AT LINE 2262 IN MAIN.asm
                    > USED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
NESTING:            0FA6 DEFINED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
                    > USED AT LINE 2469 IN MAIN.asm
NESTING0:           0FB0 DEFINED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2282 IN MAIN.asm
NESTING1A:          0FB7 DEFINED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2286 IN MAIN.asm
NESTING1:           0FBA DEFINED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
NESTING2:           0FC9 DEFINED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
NESTING3:           0FCB DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
NESTING4:           0FD6 DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
PROMPT:             0FD8 DEFINED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
CRLF:               0FE1 DEFINED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
PRINTSTR:           0FE8 DEFINED AT LINE 2327 IN MAIN.asm
                    > USED AT LINE 2316 IN MAIN.asm
                    > USED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
INIT:               0FEF DEFINED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2383 IN MAIN.asm
INIT1:              0FF7 DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
WARMINIT:           0FFF DEFINED AT LINE 2346 IN MAIN.asm
COLDBOOT0:          1012 DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
COLDINIT:           101C DEFINED AT LINE 2359 IN MAIN.asm
COLDBOOT1:          102D DEFINED AT LINE 2368 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
COLDSTART:          103A DEFINED AT LINE 2377 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
START:              1043 DEFINED AT LINE 2381 IN MAIN.asm
                    > USED AT LINE 7
START1:             1049 DEFINED AT LINE 2384 IN MAIN.asm
                    > USED AT LINE 2351 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
INTERPRET:          104F DEFINED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2519 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2548 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
INTERPRET2:         105B DEFINED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
INTERPRET3:         1063 DEFINED AT LINE 2404 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
INTERPRET4:         106E DEFINED AT LINE 2413 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
INTERPRET5:         1073 DEFINED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2485 IN MAIN.asm
INTERPRET5A:        1091 DEFINED AT LINE 2457 IN MAIN.asm
INTERPRET6:         1093 DEFINED AT LINE 2462 IN MAIN.asm
                    > USED AT LINE 2424 IN MAIN.asm
INTERPRET7:         10A1 DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2429 IN MAIN.asm
INTERPRET8:         10B4 DEFINED AT LINE 2487 IN MAIN.asm
                    > USED AT LINE 2427 IN MAIN.asm
NEXT:               10CF DEFINED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
NEXT0:              10E3 DEFINED AT LINE 2514 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
NEXT1:              10E4 DEFINED AT LINE 2516 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
EXIT:               10EB DEFINED AT LINE 2521 IN MAIN.asm
                    > USED AT LINE 2518 IN MAIN.asm
RUN:                10EF DEFINED AT LINE 2526 IN MAIN.asm
                    > USED AT LINE 2533 IN MAIN.asm
ERROR:              10F3 DEFINED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
BACKSPACE_:         1105 DEFINED AT LINE 2537 IN MAIN.asm
                    > USED AT LINE 2434 IN MAIN.asm
EDIT_:              1115 DEFINED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2432 IN MAIN.asm
REEDIT_:            1118 DEFINED AT LINE 2550 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
F1:                 111B DEFINED AT LINE 10
                    > USED AT LINE 879 IN MAIN.asm
F2:                 111B DEFINED AT LINE 11
                    > USED AT LINE 881 IN MAIN.asm
F3:                 111B DEFINED AT LINE 12
                    > USED AT LINE 883 IN MAIN.asm
F4:                 111B DEFINED AT LINE 13
                    > USED AT LINE 885 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1691 IN MAIN.asm
                    > USED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
                    > USED AT LINE 2492 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2361 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 261 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2491 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2373 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1271 IN MAIN.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 433 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2494 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2348 IN MAIN.asm
                    > USED AT LINE 2495 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2496 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2350 IN MAIN.asm
                    > USED AT LINE 2497 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2086 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
                    > USED AT LINE 2385 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
