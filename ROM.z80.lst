0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0D               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0D               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0D               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0D               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0D               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0D               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0D               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0D               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0D               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0D               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0C               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0D               LD   (RST08),HL   
0094   22 D2 0D               LD   (RST10),HL   
0097   22 D4 0D               LD   (RST18),HL   
009A   22 D6 0D               LD   (RST20),HL   
009D   22 D8 0D               LD   (RST28),HL   
00A0   22 DA 0D               LD   (RST30),HL   
00A3   22 DE 0D               LD   (INTVEC),HL   
00A6   22 E0 0D               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0D               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0D               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 0C               LD   sp,STACK   
00C6   CD EF 0A               CALL   init   
00C9   C3 0D 0B               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; vTIBPtr an offset to the tib
0184   93 0B                  DW   next   ; nNext
0186   00 11                  DW   heap   ; vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   85                     DB   lsb(nop_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 A4 03               JP   at   
0306                AMPER_:      
0306   C3 B0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 D4 03               JP   dollar   
030C                LBRACK_:      
030C   C3 0B 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 27 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 75 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AF 05               JP   backslash   
0318                LBRACE_:      
0318   C3 D5 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3E 05               JP   rbrace   
031E                TICK_:       
031E   C3 9A 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 8E 07               JP   semicolon   
0324                DOT_:        
0324   C3 DE 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 80 07               JP   underscore   
032A                COLON_:      
032A   C3 9E 04               JP   colon   
032D                UPCASE_:      
032D   C3 04 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 09 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 1B 07               JP   question   
0336                STAR_:       
0336   C3 34 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 50 07               JP   num   
0341                HASH_:       
0341   C3 E7 06               JP   hash   
0344                PIPE_:       
0344   C3 BB 03               JP   pipe   
0347                CARET_:      
0347   C3 45 06               JP   caret   
034A                COMMA_:      
034A   C3 B1 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 CD 07               JP   dblquote   
0350                MINUS_:      
0350   C3 F5 07               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8D 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 21 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA BA 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 42 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA AA 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 29 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 2E 06               JP   lessthan   
0382                SLASH_:      
0382   C3 C0 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 86 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 8F 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399   03                     INC   bc   
039A   0A                     LD   a,(bc)   
039B   FE 3D                  CP   "="   ; += add to variable
039D   CA 8F 04               JP   z,assign0   
03A0   E5                     PUSH   hl   
03A1   0B                     DEC   bc   
03A2   DD E9                  JP   (ix)   
03A4                             ; @ addr
03A4                             ; -- ptr
03A4                AT:          
03A4                ADDR:        
03A4   2A EE 0D               LD   hl,(vPointer)   
03A7   E5                     PUSH   hl   
03A8   21 EE 0D               LD   hl,vPointer   
03AB   22 EE 0D               LD   (vPointer),hl   
03AE   DD E9                  JP   (ix)   
03B0                AMPER:       
03B0                AND:         
03B0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B1   E1                     POP   hl   
03B2   7B                     LD   a,e   
03B3   A5                     AND   l   
03B4   6F                     LD   l,a   
03B5   7A                     LD   a,d   
03B6   A4                     AND   h   
03B7                AND1:        
03B7   67                     LD   h,a   
03B8   C3 99 03               JP   add3   
03BB                PIPE:        
03BB                OR:          
03BB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BC   E1                     POP   hl   
03BD   7B                     LD   a,e   
03BE   B5                     OR   l   
03BF   6F                     LD   l,a   
03C0   7A                     LD   a,d   
03C1   B4                     OR   h   
03C2   18 F3                  JR   and1   
03C4                XOR:         
03C4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C5                XOR1:        
03C5   E1                     POP   hl   
03C6   7B                     LD   a,e   
03C7   AD                     XOR   l   
03C8   6F                     LD   l,a   
03C9   7A                     LD   a,d   
03CA   AC                     XOR   h   
03CB   67                     LD   h,a   
03CC   E5                     PUSH   hl   
03CD   DD E9                  JP   (ix)   
03CF                INVERT:      ; Bitwise INVert the top member of the stack
03CF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D2   18 F1                  JR   xor1   
03D4                             ; $a .. $z
03D4                             ; -- value
03D4                             ; returns value of arg
03D4                DOLLAR:      
03D4                ARG:         
03D4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D7   FD 56 05               LD   d,(iy+5)   
03DA   EB                     EX   de,hl   
03DB   7D                     LD   a,l   ; arg_list* == null, skip
03DC   B4                     OR   h   
03DD   28 1C                  JR   z,arg0a   
03DF   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E0   2B                     DEC   hl   
03E1   7E                     LD   a,(hl)   
03E2   23                     INC   hl   
03E3   23                     INC   hl   
03E4   B7                     OR   a   
03E5   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E7   5F                     LD   e,a   ; e = a = num_args
03E8   03                     INC   bc   ; a = next char = dollar_name
03E9   0A                     LD   a,(bc)   
03EA   C5                     PUSH   bc   ; save IP
03EB   43                     LD   b,e   ; b = e = num_args
03EC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EF   FD 56 03               LD   d,(iy+3)   
03F2                ARG0:        
03F2   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F3   1B                     DEC   de   
03F4   BE                     CP   (hl)   
03F5   28 09                  JR   z,arg1   
03F7   23                     INC   hl   ; hl = next arg_list*
03F8   10 F8                  DJNZ   arg0   
03FA   C1                     POP   bc   ; no match, restore IP
03FB                ARG0A:       
03FB   11 00 00               LD   de,0   ; return 0
03FE   18 08                  JR   arg1a   
0400                ARG1:        
0400   C1                     POP   bc   ; restore IP
0401   EB                     EX   de,hl   ; hl = arg*
0402   22 EE 0D               LD   (vPointer),hl   ; store arg* in setter
0405   5E                     LD   e,(hl)   
0406   23                     INC   hl   
0407   56                     LD   d,(hl)   ; de = arg
0408                ARG1A:       
0408   D5                     PUSH   de   ; push arg
0409   DD E9                  JP   (ix)   
040B                LBRACK:      
040B                ARRBEGIN:      
040B   11 00 00               LD   de,0   ; create stack frame
040E   D5                     PUSH   de   ; push null for IP
040F   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0412   FD 56 05               LD   d,(iy+5)   ; 
0415   D5                     PUSH   de   ; 
0416   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0419   FD 56 03               LD   d,(iy+3)   ; 
041C   D5                     PUSH   de   ; 
041D   FD E5                  PUSH   iy   ; push BP
041F   FD 21 00 00            LD   iy,0   ; BP = SP
0423   FD 39                  ADD   iy,sp   
0425   DD E9                  JP   (ix)   
0427                RBRACK:      
0427                ARREND:      
0427   FD 54                  LD   d,iyh   ; de = BP
0429   FD 5D                  LD   e,iyl   
042B   ED 43 FA 0D            LD   (vTemp1),bc   ; save IP
042F   62 6B                  LD   hl,de   ; hl = de = BP
0431   B7                     OR   a   
0432   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0434   CB 3C                  SRL   h   ; 
0436   CB 1D                  RR   l   
0438   44 4D                  LD   bc,hl   ; bc = count
043A   2A EC 0D               LD   hl,(vHeapPtr)   ; hl = array[-2]
043D   71                     LD   (hl),c   ; write num items in length word
043E   23                     INC   hl   
043F   70                     LD   (hl),b   
0440   23                     INC   hl   ; hl = array[0], bc = count
0441                             ; de = BP, hl = array[0], bc = count
0441                ARREND1:      
0441   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0444   77                     LD   (hl),a   ; write lsb of array item
0445   23                     INC   hl   ; move to msb of array item
0446   3A E6 0D               LD   a,(vDataWidth)   ; vDataWidth=1?
0449   3D                     DEC   a   
044A   28 05                  JR   z,arrEnd2   
044C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044F   77                     LD   (hl),a   ; write msb of array item
0450   23                     INC   hl   ; move to next word in array
0451                ARREND2:      
0451   FD 2B                  DEC   iy   ; move to next word on stack
0453   FD 2B                  DEC   iy   
0455   0B                     DEC   bc   ; dec items count
0456   79                     LD   a,c   ; if not zero loop
0457   B0                     OR   b   
0458   20 E7                  JR   nz,arrEnd1   
045A   EB                     EX   de,hl   ; de = end of array, hl = BP
045B   F9                     LD   sp,hl   ; sp = BP
045C   E1                     POP   hl   ; de = end of array, hl = old BP
045D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
045E   FD 62                  LD   iyh,d   
0460   FD 6B                  LD   iyl,e   
0462   D1                     POP   de   ; pop arg_list (discard)
0463   D1                     POP   de   ; pop first_arg* (discard)
0464   D1                     POP   de   ; pop IP (discard)
0465   ED 5B EC 0D            LD   de,(vHeapPtr)   ; de = array[-2]
0469   22 EC 0D               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FA 0D            LD   bc,(vTemp1)   ; restore IP
0470   13                     INC   de   ; de = array[0]
0471   13                     INC   de   
0472   D5                     PUSH   de   ; return array[0]
0473   DD E9                  JP   (ix)   
0475                             ; index of an array, based on vDataWidth
0475                             ; array num -- value    ; also sets vPointer to address
0475                ARRINDEX:      
0475   E1                     POP   hl   ; hl = index
0476   D1                     POP   de   ; de = array
0477   3A E6 0D               LD   a,(vDataWidth)   ; a = data width
047A   3D                     DEC   a   
047B   28 01                  JR   z,arrIndex1   
047D                ARRINDEX0:      
047D   29                     ADD   hl,hl   ; if data width = 2 then double
047E                ARRINDEX1:      
047E   19                     ADD   hl,de   ; add addr
047F   22 EE 0D               LD   (vPointer),hl   ; store address in setter
0482   16 00                  LD   d,0   
0484   5E                     LD   e,(hl)   
0485   B7                     OR   a   ; check data width again
0486   28 02                  JR   z,arrIndex2   
0488   23                     INC   hl   
0489   56                     LD   d,(hl)   
048A                ARRINDEX2:      
048A   D5                     PUSH   de   
048B   DD E9                  JP   (ix)   
048D                             ; value _oldValue --            ; uses address in vPointer
048D                ASSIGN:      
048D   E1                     POP   hl   ; discard last accessed value
048E   E1                     POP   hl   ; hl = new value
048F                ASSIGN0:      
048F   EB                     EX   de,hl   ; de = new value
0490                ASSIGNX:      
0490   2A EE 0D               LD   hl,(vPointer)   
0493   73                     LD   (hl),e   
0494   3A E6 0D               LD   a,(vDataWidth)   
0497   3D                     DEC   a   ; is it byte?
0498   28 02                  JR   z,assign1   
049A   23                     INC   hl   
049B   72                     LD   (hl),d   
049C                ASSIGN1:      
049C   DD E9                  JP   (ix)   
049E                             ; arg_list - parses input (ab:c)
049E                             ; names after the : represent uninitialised locals
049E                             ; return values are the state of the stack after the block ends
049E                COLON:       
049E                ARGLIST:      
049E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04A1   2A EC 0D               LD   hl,(vHeapPtr)   ; hl = heap*
04A4   23                     INC   hl   ; skip length field to start
04A5   23                     INC   hl   
04A6   E5                     PUSH   hl   ; save start of arg_list
04A7   03                     INC   bc   ; point to next char
04A8                ARGLIST1:      
04A8   0A                     LD   a,(bc)   
04A9   FE 3A                  CP   ":"   ; ":" switches from args to locals
04AB   20 03                  JR   nz,arglist1a   
04AD   14                     INC   d   ; non zero value local count acts as flag
04AE   18 10                  JR   arglist3   
04B0                ARGLIST1A:      
04B0   FE 41                  CP   "A"   ; < "A" terminates arg_list
04B2   38 0F                  JR   c,arglist4   
04B4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B6   30 0B                  JR   nc,arglist4   
04B8                ARGLIST2:      
04B8   77                     LD   (hl),a   
04B9   23                     INC   hl   
04BA   1C                     INC   e   ; increase arg count
04BB   AF                     XOR   a   
04BC   B2                     OR   d   
04BD   28 01                  JR   z,arglist3   
04BF   14                     INC   d   ; if d > 0 increase local count
04C0                ARGLIST3:      
04C0   03                     INC   bc   ; point to next char
04C1   18 E5                  JR   arglist1   
04C3                ARGLIST4:      
04C3   0B                     DEC   bc   
04C4   AF                     XOR   a   
04C5   B2                     OR   d   
04C6   28 01                  JR   z,arglist5   
04C8   15                     DEC   d   ; remove initial inc
04C9                ARGLIST5:      
04C9   23                     INC   hl   
04CA   22 EC 0D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CD   E1                     POP   hl   ; hl = start of arg_list
04CE   E5                     PUSH   hl   ; return start of arg_list
04CF   2B                     DEC   hl   ; write number of locals at start - 1
04D0   72                     LD   (hl),d   
04D1   2B                     DEC   hl   ; write number of args + locals at start - 2
04D2   73                     LD   (hl),e   
04D3   DD E9                  JP   (ix)   
04D5                LBRACE:      
04D5                BLOCK:       
04D5   C5                     PUSH   bc   ; return pointer to first { of block
04D6   03                     INC   bc   
04D7   16 01                  LD   d,1   ; nesting: count first parenthesis
04D9                BLOCK1:      ; Skip to end of definition
04D9   0A                     LD   a,(bc)   ; Get the next character
04DA   03                     INC   bc   ; Point to next character
04DB   FE 21                  CP   " " + 1   ; ignore whitespace
04DD   38 FA                  JR   c,block1   
04DF   FE 29                  CP   ")"   
04E1   28 2D                  JR   z,block4   
04E3   FE 7D                  CP   "}"   
04E5   28 29                  JR   z,block4   
04E7   FE 5D                  CP   "]"   
04E9   28 25                  JR   z,block4   
04EB   FE 28                  CP   "("   
04ED   28 16                  JR   z,block2   
04EF   FE 7B                  CP   "{"   
04F1   28 12                  JR   z,block2   
04F3   FE 5B                  CP   "["   
04F5   28 0E                  JR   z,block2   
04F7   FE 27                  CP   "'"   
04F9   28 0D                  JR   z,block3   
04FB   FE 60                  CP   "`"   
04FD   28 09                  JR   z,block3   
04FF   FE 22                  CP   DQUOTE   
0501   28 05                  JR   z,block3   
0503   18 D4                  JR   block1   
0505                BLOCK2:      
0505   14                     INC   d   
0506   18 D1                  JR   block1   
0508                BLOCK3:      
0508   3E 80                  LD   a,$80   
050A   AA                     XOR   d   
050B   47                     LD   b,a   
050C   20 CB                  JR   nz,block1   
050E   18 03                  JR   block5   
0510                BLOCK4:      
0510   15                     DEC   d   
0511   20 C6                  JR   nz,block1   ; get the next element
0513                BLOCK5:      
0513   60 69                  LD   hl,bc   ; hl = IP
0515   11 00 11               LD   de,HEAP   ; is IP pointing to object in heap
0518   B7                     OR   a   ; IP - HEAP
0519   ED 52                  SBC   hl,de   
051B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051D   28 1C                  JR   z,block6   
051F   60 69                  LD   hl,bc   ; hl = IP
0521   D1                     POP   de   ; de = block*
0522   ED 43 FA 0D            LD   (vTemp1),bc   ; save IP
0526   B7                     OR   a   ; bc = size
0527   ED 52                  SBC   hl,de   
0529   44 4D                  LD   bc,hl   
052B   EB                     EX   de,hl   ; hl = block* de = heap*
052C   ED 5B EC 0D            LD   de,(vHeapPtr)   
0530   D5                     PUSH   de   ; return hblock*
0531   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0533   ED 53 EC 0D            LD   (vHeapPtr),de   ; heap* += size
0537   ED 4B FA 0D            LD   bc,(vTemp1)   ; restore IP
053B                BLOCK6:      
053B   0B                     DEC   bc   ; balanced, exit
053C   DD E9                  JP   (ix)   
053E                RBRACE:      
053E                BLOCKEND:      
053E   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0541   FD 56 01               LD   d,(iy+1)   
0544   ED 53 FA 0D            LD   (vTemp1),de   
0548   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
054B   FD 56 07               LD   d,(iy+7)   
054E   ED 53 FC 0D            LD   (vTemp2),de   
0552   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0555   FD 56 03               LD   d,(iy+3)   
0558   EB                     EX   de,hl   
0559   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
055C   FD 56 01               LD   d,(iy+1)   
055F   13                     INC   de   ; for carry flag <=
0560   B7                     OR   a   
0561   ED 52                  SBC   hl,de   
0563   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0565   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0567   FD 5D                  LD   e,iyl   
0569   21 08 00               LD   hl,8   
056C   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056D   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056E   18 0C                  JR   blockEnd2   
0570                BLOCKEND1:      ; same scope
0570   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0573   FD 56 03               LD   d,(iy+3)   
0576   EB                     EX   de,hl   
0577   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0579   FD 5D                  LD   e,iyl   
057B   EB                     EX   de,hl   
057C                BLOCKEND2:      
057C   44 4D                  LD   bc,hl   ; bc = hl = BP
057E   B7                     OR   a   ; hl = BP - SP = count
057F   ED 72                  SBC   hl,sp   
0581   7D                     LD   a,l   
0582   B4                     OR   h   
0583   28 09                  JR   z,blockEnd3   
0585   C5                     PUSH   bc   ; bc = count, hl = BP
0586   44 4D                  LD   bc,hl   
0588   E1                     POP   hl   
0589   2B                     DEC   hl   ; hl = BP-1
058A   1B                     DEC   de   ; de = args*-1
058B   ED B8                  LDDR      
058D   13                     INC   de   
058E                BLOCKEND3:      
058E   EB                     EX   de,hl   ; sp = de = new tos*
058F   F9                     LD   sp,hl   
0590   ED 4B FC 0D            LD   bc,(vTemp2)   
0594   FD 2A FA 0D            LD   iy,(vTemp1)   
0598   DD E9                  JP   (ix)   
059A                TICK:        
059A                CHAR:        
059A   21 00 00               LD   hl,0   ; if "" is empty or null
059D                CHAR1:       
059D   03                     INC   bc   ; point to next char
059E   0A                     LD   a,(bc)   
059F   FE 27                  CP   "'"   ; ' is the terminator
05A1   28 09                  JR   z,char3   
05A3   FE 5C                  CP   $5c   ; \ is the escape
05A5   20 02                  JR   nz,char2   
05A7   03                     INC   bc   
05A8   0A                     LD   a,(bc)   
05A9                CHAR2:       
05A9   6F                     LD   l,a   
05AA   18 F1                  JR   char1   
05AC                CHAR3:       
05AC   E5                     PUSH   hl   
05AD   DD E9                  JP   (ix)   
05AF                BACKSLASH:      
05AF   DD E9                  JP   (ix)   
05B1                             ; , discard stack item
05B1                             ; x y -- x
05B1                COMMA:       
05B1                DISCARD:      
05B1   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B3   FD 5D                  LD   e,iyl   
05B5   EB                     EX   de,hl   
05B6   B7                     OR   a   
05B7   ED 72                  SBC   hl,sp   
05B9   CB 7C                  BIT   7,h   
05BB   20 01                  JR   nz,discard1   
05BD   E1                     POP   hl   
05BE                DISCARD1:      
05BE   DD E9                  JP   (ix)   
05C0                SLASH:       
05C0   03                     INC   bc   
05C1   0A                     LD   a,(bc)   
05C2   FE 5C                  CP   $5C   
05C4   CA B4 08               JP   z,comment   
05C7   FE 41                  CP   "A"   
05C9   D2 14 08               JP   nc,command   
05CC   0B                     DEC   bc   
05CD   D1                     POP   de   
05CE   E1                     POP   hl   
05CF   C5                     PUSH   bc   ; preserve the IP
05D0   44 4D                  LD   bc,hl   
05D2   CD 08 06               CALL   divide   
05D5   EB                     EX   de,hl   
05D6   ED 53 F0 0D            LD   (vRemain),de   
05DA   C1                     POP   bc   
05DB   C3 99 03               JP   add3   
05DE                DOT:         
05DE   03                     INC   bc   
05DF   0A                     LD   a,(bc)   
05E0   E1                     POP   hl   
05E1   FE 68                  CP   "h"   
05E3   20 05                  JR   nz,dot1   
05E5   CD 7E 0A               CALL   prthex   
05E8   18 17                  JR   dot4   
05EA                DOT1:        
05EA   FE 73                  CP   "s"   
05EC   20 05                  JR   nz,dot2   
05EE   CD A1 0A               CALL   prtstr   
05F1   18 0E                  JR   dot4   
05F3                DOT2:        
05F3   FE 63                  CP   "c"   
05F5   20 06                  JR   nz,dot3   
05F7   7D                     LD   a,l   
05F8   CD 85 00               CALL   putchar   
05FB   18 04                  JR   dot4   
05FD                DOT3:        
05FD   0B                     DEC   bc   
05FE   CD 36 0A               CALL   prtdec   
0601                DOT4:        
0601   3E 20                  LD   a," "   
0603   CD 85 00               CALL   putchar   
0606   DD E9                  JP   (ix)   
0608                             ; division subroutine.
0608                             ; bc: divisor, de: dividend, hl: remainder
0608                DIVIDE:      
0608   21 00 00               LD   hl,0   ; zero the remainder
060B   3E 10                  LD   a,16   ; loop counter
060D                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
060D   CB 21                  SLA   c   
060F   CB 10                  RL   b   
0611   ED 6A                  ADC   hl,hl   
0613   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0615   38 03                  JR   c,divide2   
0617   0C                     INC   c   
0618   18 01                  JR   divide3   
061A                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061A   19                     ADD   hl,de   
061B                DIVIDE3:      
061B   3D                     DEC   a   
061C   20 EF                  JR   nz,divide1   
061E   50 59                  LD   de,bc   ; result from bc to de
0620   C9                     RET      
0621                             ; hl = value1, de = value2
0621                             ; hl = result
0621                EQUALS:      
0621   B7                     OR   a   ; reset the carry flag
0622   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0624   28 10                  JR   z,true1   
0626   C3 3C 06               JP   false1   
0629                             ; hl = value1 de = value2
0629                             ; hl = result
0629                LESSTHANEQ:      
0629   B7                     OR   a   
062A   ED 52                  SBC   hl,de   
062C   18 05                  JR   lessthan1   
062E                             ; hl = value1 de = value2
062E                             ; hl = result
062E                LESSTHAN:      
062E   B7                     OR   a   
062F   ED 52                  SBC   hl,de   
0631   28 09                  JR   z,false1   
0633                LESSTHAN1:      
0633   FA 3C 06               JP   m,false1   
0636                TRUE1:       
0636   21 FF FF               LD   hl,TRUE   
0639   E5                     PUSH   hl   
063A   DD E9                  JP   (ix)   
063C                NULL1:       
063C                FALSE1:      
063C   21 00 00               LD   hl,FALSE   
063F   E5                     PUSH   hl   
0640   DD E9                  JP   (ix)   
0642                LPAREN:      
0642   C3 D5 04               JP   block   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 07                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8B 06               JP   nz,goFunc   
0656   13                     INC   de   ; de is the address to jump back to
0657   D5                     PUSH   de   ; push de just before stack frame
0658                GOBLOCK:      
0658                GOBLOCK1:      
0658   ED 53 FA 0D            LD   (vTemp1),de   ; save de
065C   21 80 0C               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065F   FD 54                  LD   d,iyh   
0661   FD 5D                  LD   e,iyl   
0663   B7                     OR   a   ; if stack* == BP then this is the root_scope
0664   ED 52                  SBC   hl,de   
0666   ED 5B FA 0D            LD   de,(vTemp1)   ; restore de
066A   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066B   B4                     OR   h   
066C   3E 00                  LD   a,0   
066E   28 6C                  JR   z,goFunc8   
0670   C5                     PUSH   bc   ; push IP
0671   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0674   FD 46 05               LD   b,(iy+5)   
0677   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
067A   FD 66 03               LD   h,(iy+3)   
067D                GOBLOCK2:      
067D   C5                     PUSH   bc   ; arg_list*
067E   E5                     PUSH   hl   ; first_arg*
067F   FD E5                  PUSH   iy   ; push BP
0681   FD 21 00 00            LD   iy,0   ; BP = SP
0685   FD 39                  ADD   iy,sp   
0687   42 4B                  LD   bc,de   ; bc = de = block*-1
0689   DD E9                  JP   (ix)   
068B                GOFUNC:      ; execute function
068B   EB                     EX   de,hl   ; hl = func*
068C   5E                     LD   e,(hl)   ; de = partial_array*
068D   23                     INC   hl   
068E   56                     LD   d,(hl)   
068F   23                     INC   hl   
0690   7B                     LD   a,e   ; if partial_array* == null skip
0691   B2                     OR   d   
0692   28 21                  JR   z,goFunc3   
0694   ED 43 FA 0D            LD   (vTemp1),bc   
0698   22 FC 0D               LD   (vTemp2),hl   ; save bc,hl
069B   EB                     EX   de,hl   ; hl = partial_array*
069C   2B                     DEC   hl   ; bc = count
069D   46                     LD   b,(hl)   
069E   2B                     DEC   hl   
069F   4E                     LD   c,(hl)   
06A0   23                     INC   hl   ; push each item on stack
06A1   23                     INC   hl   
06A2   18 06                  JR   goFunc2   
06A4                GOFUNC1:      
06A4   5E                     LD   e,(hl)   ; de = partial item
06A5   23                     INC   hl   
06A6   56                     LD   d,(hl)   
06A7   23                     INC   hl   
06A8   D5                     PUSH   de   ; push on stack
06A9   0B                     DEC   bc   
06AA                GOFUNC2:      
06AA   79                     LD   a,c   ; if count != 0 then loop
06AB   B0                     OR   b   
06AC   20 F6                  JR   nz,goFunc1   
06AE   ED 4B FA 0D            LD   bc,(vTemp1)   ; restore bc
06B2   2A FC 0D               LD   hl,(vTemp2)   ; restore hl
06B5                GOFUNC3:      
06B5   5E                     LD   e,(hl)   ; de = block*
06B6   23                     INC   hl   
06B7   56                     LD   d,(hl)   
06B8   23                     INC   hl   
06B9   ED 53 FA 0D            LD   (vTemp1),de   ; save block*
06BD   5E                     LD   e,(hl)   ; de = arg_list*
06BE   23                     INC   hl   
06BF   56                     LD   d,(hl)   
06C0   23                     INC   hl   
06C1   EB                     EX   de,hl   ; hl = arg_list*
06C2   ED 5B FA 0D            LD   de,(vTemp1)   ; restore de = block*
06C6   7D                     LD   a,l   ; if arg_list* == null a = 0
06C7   B4                     OR   h   
06C8   20 03                  JR   nz,goFunc4   
06CA   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CB   18 0F                  JR   goFunc8   
06CD                GOFUNC4:      ; allocate locals
06CD   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06CE   7E                     LD   a,(hl)   
06CF   18 03                  JR   goFunc6   
06D1                GOFUNC5:      ; loop
06D1   3B                     DEC   sp   
06D2   3B                     DEC   sp   
06D3   3D                     DEC   a   
06D4                GOFUNC6:      
06D4   B7                     OR   a   
06D5   20 FA                  JR   nz,goFunc5   ; end loop
06D7                GOFUNC7:      
06D7   2B                     DEC   hl   ; a = num_args* x 2
06D8   7E                     LD   a,(hl)   
06D9   23                     INC   hl   
06DA   23                     INC   hl   
06DB   87                     ADD   a,a   ; a *= 2
06DC                GOFUNC8:      
06DC   C5                     PUSH   bc   ; push IP
06DD   44 4D                  LD   bc,hl   
06DF   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06E2   85                     ADD   a,l   
06E3   6F                     LD   l,a   
06E4   39                     ADD   hl,sp   
06E5   18 96                  JR   goBlock2   
06E7                HASH:        
06E7                HEXNUM:      
06E7   21 00 00               LD   hl,0   ; Clear hl to accept the number
06EA                HEXNUM1:      
06EA   03                     INC   bc   
06EB   0A                     LD   a,(bc)   ; Get the character which is a numeral
06EC   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EE   28 02                  JR   z,hexnum2   ; no a decimal
06F0   D6 07                  SUB   7   ; sub 7  to make $a - $F
06F2                HEXNUM2:      
06F2   D6 30                  SUB   $30   ; form decimal digit
06F4   DA 72 07               JP   c,num2   
06F7   FE 10                  CP   $0F+1   
06F9   D2 72 07               JP   nc,num2   
06FC   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FD   29                     ADD   hl,hl   ; 4X
06FE   29                     ADD   hl,hl   ; 8X
06FF   29                     ADD   hl,hl   ; 16X
0700   85                     ADD   a,l   ; add into bottom of hl
0701   6F                     LD   l,a   
0702   18 E6                  JR   hexnum1   
0704                UPCASE:      
0704   0A                     LD   a,(bc)   ; a = identifier char
0705   D6 41                  SUB   "A"   ; "A" = 0
0707   18 05                  JR   ident1   
0709                LOWCASE:      
0709   0A                     LD   a,(bc)   
070A   D6 61                  SUB   "a"   
070C   C6 1A                  ADD   a,26   
070E                IDENT1:      
070E   87                     ADD   a,a   ; l = a * 2
070F   6F                     LD   l,a   
0710   26 0D                  LD   h,msb(vars)   
0712   22 EE 0D               LD   (vPointer),hl   ; store address in setter
0715   5E                     LD   e,(hl)   
0716   23                     INC   hl   
0717   56                     LD   d,(hl)   
0718   D5                     PUSH   de   
0719   DD E9                  JP   (ix)   
071B                             ; if
071B                             ; condition then -- value
071B                QUESTION:      
071B                IF:          
071B   03                     INC   bc   
071C   0A                     LD   a,(bc)   
071D   FE 3F                  CP   "?"   
071F   28 06                  JR   z,ifte   
0721   0B                     DEC   bc   
0722   11 00 00               LD   de,NUL   ; NUL pointer for else
0725   18 01                  JR   ifte1   
0727                             ; ifte
0727                             ; condition then else -- value
0727                IFTE:        
0727   D1                     POP   de   ; de = else
0728                IFTE1:       
0728   E1                     POP   hl   ; hl = then
0729   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
072A   7C                     LD   a,h   
072B   B5                     OR   l   
072C   E1                     POP   hl   ; hl = then
072D   CA 46 06               JP   z,go1   ; if z de = else
0730   EB                     EX   de,hl   ; condition = false, de = then
0731   C3 46 06               JP   go1   
0734                STAR:        
0734                MUL:         
0734   D1                     POP   de   ; get first value
0735   E1                     POP   hl   
0736                MUL2:        
0736   C5                     PUSH   bc   ; Preserve the IP
0737   44 4D                  LD   bc,hl   ; bc = 2nd value
0739   21 00 00               LD   hl,0   
073C   3E 10                  LD   a,16   
073E                MUL3:        
073E   29                     ADD   hl,hl   
073F   CB 13                  RL   e   
0741   CB 12                  RL   d   
0743   30 04                  JR   nc,$+6   
0745   09                     ADD   hl,bc   
0746   30 01                  JR   nc,$+3   
0748   13                     INC   de   
0749   3D                     DEC   a   
074A   20 F2                  JR   nz,mul3   
074C   C1                     POP   bc   ; Restore the IP
074D   C3 99 03               JP   add3   
0750                NUM:         
0750   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0753   0A                     LD   a,(bc)   ; Get numeral or -
0754   FE 2D                  CP   "-"   
0756   20 01                  JR   nz,num0   
0758   03                     INC   bc   ; move to next char, no flags affected
0759                NUM0:        
0759   08                     EX   af,af'   ; save zero flag = 0 for later
075A                NUM1:        
075A   0A                     LD   a,(bc)   ; read digit
075B   D6 30                  SUB   "0"   ; less than 0?
075D   38 13                  JR   c,num2   ; not a digit, exit loop
075F   FE 0A                  CP   10   ; greater that 9?
0761   30 0F                  JR   nc,num2   ; not a digit, exit loop
0763   03                     INC   bc   ; inc IP
0764   54 5D                  LD   de,hl   ; multiply hl * 10
0766   29                     ADD   hl,hl   
0767   29                     ADD   hl,hl   
0768   19                     ADD   hl,de   
0769   29                     ADD   hl,hl   
076A   85                     ADD   a,l   ; add digit in a to hl
076B   6F                     LD   l,a   
076C   3E 00                  LD   a,0   
076E   8C                     ADC   a,h   
076F   67                     LD   h,a   
0770   18 E8                  JR   num1   
0772                NUM2:        
0772   0B                     DEC   bc   
0773   08                     EX   af,af'   ; restore zero flag
0774   20 07                  JR   nz,num3   
0776   EB                     EX   de,hl   ; negate the value of hl
0777   21 00 00               LD   hl,0   
077A   B7                     OR   a   ; jump to sub2
077B   ED 52                  SBC   hl,de   
077D                NUM3:        
077D   E5                     PUSH   hl   ; Put the number on the stack
077E   DD E9                  JP   (ix)   ; and process the next character
0780                UNDERSCORE:      
0780                REMAIN:      
0780   2A F0 0D               LD   hl,(vRemain)   
0783   E5                     PUSH   hl   
0784   DD E9                  JP   (ix)   
0786                RPAREN:      
0786   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0789   FD 46 09               LD   b,(iy+9)   
078C   DD E9                  JP   (ix)   
078E                             ; arg_list* block* -- ptr
078E                SEMICOLON:      
078E   D1                     POP   de   ; de = block* hl = heap*
078F   2A EC 0D               LD   hl,(vHeapPtr)   
0792   AF                     XOR   a   
0793   77                     LD   (hl),a   ; compile null partial_array*
0794   23                     INC   hl   
0795   77                     LD   (hl),a   
0796   23                     INC   hl   
0797   73                     LD   (hl),e   ; compile block*
0798   23                     INC   hl   
0799   72                     LD   (hl),d   
079A   23                     INC   hl   
079B   D1                     POP   de   ; de = block*
079C   73                     LD   (hl),e   ; compile arg_list*
079D   23                     INC   hl   
079E   72                     LD   (hl),d   
079F   23                     INC   hl   
07A0   ED 5B EC 0D            LD   de,(vHeapPtr)   ; return func*
07A4   D5                     PUSH   de   
07A5   22 EC 0D               LD   (vHeapPtr),hl   ; heap* += 4
07A8   DD E9                  JP   (ix)   
07AA                             ; shiftLeft
07AA                             ; value count -- value2          shift left count places
07AA                SHIFTLEFT:      
07AA   50 59                  LD   de,bc   ; save IP
07AC   C1                     POP   bc   ; bc = count
07AD   41                     LD   b,c   ; b = loop counter
07AE   E1                     POP   hl   
07AF   04                     INC   b   ; test for counter=0 case
07B0   18 01                  JR   shiftLeft2   
07B2                SHIFTLEFT1:      
07B2   29                     ADD   hl,hl   ; left shift hl
07B3                SHIFTLEFT2:      
07B3   10 FD                  DJNZ   shiftLeft1   
07B5   E5                     PUSH   hl   
07B6   42 4B                  LD   bc,de   ; restore IP
07B8   DD E9                  JP   (ix)   
07BA                             ; shiftRight
07BA                             ; value count -- value2          shift left count places
07BA                SHIFTRIGHT:      
07BA   50 59                  LD   de,bc   ; save IP
07BC   C1                     POP   bc   ; bc = count
07BD   41                     LD   b,c   ; b = loop counter
07BE   E1                     POP   hl   
07BF   04                     INC   b   ; test for counter=0 case
07C0   18 04                  JR   shiftRight2   
07C2                SHIFTRIGHT1:      
07C2   CB 3C                  SRL   h   ; right shift hl
07C4   CB 1D                  RR   l   
07C6                SHIFTRIGHT2:      
07C6   10 FA                  DJNZ   shiftRight1   
07C8   E5                     PUSH   hl   
07C9   42 4B                  LD   bc,de   ; restore IP
07CB   DD E9                  JP   (ix)   
07CD                             ; string
07CD                             ; -- ptr                        ; points to start of string chars,
07CD                             ; length is stored at start - 2 bytes
07CD                DBLQUOTE:      
07CD                STRING:      
07CD   2A EC 0D               LD   hl,(vHeapPtr)   ; hl = heap*
07D0   23                     INC   hl   ; skip length field to start
07D1   23                     INC   hl   
07D2   E5                     PUSH   hl   ; save start of string
07D3   03                     INC   bc   ; point to next char
07D4   18 03                  JR   string2   
07D6                STRING1:      
07D6   77                     LD   (hl),a   
07D7   23                     INC   hl   ; increase count
07D8   03                     INC   bc   ; point to next char
07D9                STRING2:      
07D9   0A                     LD   a,(bc)   
07DA   FE 22                  CP   DQUOTE   ; " is the string terminator
07DC   28 04                  JR   z,string3   
07DE   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07E0   20 F4                  JR   nz,string1   
07E2                STRING3:      
07E2   AF                     XOR   a   ; write NUL to terminate string
07E3   77                     LD   (hl),a   ; hl = end of string
07E4   23                     INC   hl   
07E5   22 EC 0D               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07E8   2B                     DEC   hl   ; hl = end of string without terminator
07E9   D1                     POP   de   ; de = start of string
07EA   D5                     PUSH   de   ; return start of string
07EB   B7                     OR   a   ; hl = length bytes, de = start of string
07EC   ED 52                  SBC   hl,de   
07EE   EB                     EX   de,hl   
07EF   2B                     DEC   hl   ; write length bytes to length field at start - 2
07F0   72                     LD   (hl),d   
07F1   2B                     DEC   hl   
07F2   73                     LD   (hl),e   
07F3   DD E9                  JP   (ix)   
07F5                MINUS:       ; negative sign or subtract
07F5   03                     INC   bc   ; check if sign of a number
07F6   0A                     LD   a,(bc)   
07F7   0B                     DEC   bc   
07F8   FE 30                  CP   "0"   
07FA   38 05                  JR   c,sub   
07FC   FE 3A                  CP   "9"+1   
07FE   DA 3E 03               JP   c,num_   
0801                SUB:         ; Subtract the value 2nd on stack from top of stack
0801   03                     INC   bc   
0802   FE 2D                  CP   "-"   
0804   20 05                  JR   nz,sub1   
0806   E1                     POP   hl   
0807   2B                     DEC   hl   
0808   C3 8F 04               JP   assign0   
080B                SUB1:        
080B   0B                     DEC   bc   
080C   D1                     POP   de   
080D   E1                     POP   hl   
080E   B7                     OR   a   
080F   ED 52                  SBC   hl,de   
0811   C3 99 03               JP   add3   
0814                             ;*******************************************************************
0814                             ; commands
0814                             ; a contains command letter
0814                             ; bc points to command letter
0814                             ;*******************************************************************
0814                COMMAND:      
0814   FE 2F                  CP   "/"   ; // comment
0816   CA B4 08               JP   z,comment   
0819   FE 61                  CP   "a"   ; /ab absolute /ad address of
081B   28 3D                  JR   z,command_a   
081D   FE 62                  CP   "b"   ; /ba buf array /bb buf block /bc buf char
081F                             ; /bd buf decimal /bp buf params /br break
081F   CA 68 08               JP   z,command_b   
0822   FE 63                  CP   "c"   ; /c chars
0824   CA E5 09               JP   z,chars   
0827   FE 66                  CP   "f"   ; /f false
0829   CA 3C 06               JP   z,false1   
082C   FE 69                  CP   "i"   ; /in input iv invert
082E   CA 7B 08               JP   z,command_i   
0831   FE 6B                  CP   "k"   ; /k key
0833   CA 1C 0A               JP   z,key   
0836   FE 6E                  CP   "n"   ; /n numbers
0838   CA 2E 0A               JP   z,numbers   
083B   FE 6F                  CP   "o"   ; /o output
083D   CA 25 0A               JP   z,output   
0840   FE 70                  CP   "p"   ; /pa partial /ps print stack /pt print tib
0842   CA 89 08               JP   z,command_p   
0845   FE 74                  CP   "t"   ; /t true
0847   CA 36 06               JP   z,true1   
084A   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vt TIBPtr
084C   CA 9C 08               JP   z,command_v   
084F   FE 78                  CP   "x"   ; /x xor
0851   CA C4 03               JP   z,xor   
0854                ERROR1:      
0854   21 01 00               LD   hl,1   ; error 1: unknown command
0857   C3 B1 0B               JP   error   
085A                COMMAND_A:      
085A   03                     INC   bc   
085B   0A                     LD   a,(bc)   
085C   FE 62                  CP   "b"   
085E   CA BD 08               JP   z,absolute   
0861   FE 64                  CP   "d"   
0863   CA CA 08               JP   z,addrOf   
0866   18 EC                  JR   error1   
0868                COMMAND_B:      
0868   03                     INC   bc   
0869   0A                     LD   a,(bc)   
086A   FE 63                  CP   "c"   ; /bd buffer decimal
086C   CA EB 08               JP   z,bufferChar   
086F   FE 64                  CP   "d"   ; /bd buffer decimal
0871   CA F6 08               JP   z,bufferDec   
0874   FE 72                  CP   "r"   ; /br break
0876   CA 57 09               JP   z,break   
0879   18 D9                  JR   error1   
087B                COMMAND_I:      
087B   03                     INC   bc   
087C   0A                     LD   a,(bc)   
087D   FE 6E                  CP   "n"   ; /in input
087F   CA 11 0A               JP   z,input   
0882   FE 76                  CP   "v"   ; /iv invert
0884   CA CF 03               JP   z,invert   
0887   18 CB                  JR   error1   
0889                COMMAND_P:      
0889   03                     INC   bc   
088A   0A                     LD   a,(bc)   
088B   FE 61                  CP   "a"   
088D   CA 71 09               JP   z,partial   
0890   FE 73                  CP   "s"   
0892   CA 91 09               JP   z,printStack   
0895   FE 74                  CP   "t"   
0897   CA C8 09               JP   z,printTIB   
089A   18 B8                  JR   error1   
089C                COMMAND_V:      
089C   03                     INC   bc   
089D   0A                     LD   a,(bc)   
089E   FE 68                  CP   "h"   
08A0   CA F9 09               JP   z,varHeapPtr   
08A3   FE 74                  CP   "t"   
08A5   CA 02 0A               JP   z,varTIBPtr   
08A8   FE 48                  CP   "H"   
08AA   CA ED 09               JP   z,constHeapStart   
08AD   FE 54                  CP   "T"   
08AF   CA F3 09               JP   z,constTIBStart   
08B2   18 A0                  JR   error1   
08B4                COMMENT:      
08B4   03                     INC   bc   ; point to next char
08B5   0A                     LD   a,(bc)   
08B6   FE 20                  CP   " "   ; terminate on any char less than SP
08B8   30 FA                  JR   nc,comment   
08BA   0B                     DEC   bc   
08BB   DD E9                  JP   (ix)   
08BD                             ; /ab absolute
08BD                             ; num -- num
08BD                ABSOLUTE:      
08BD   E1                     POP   hl   
08BE   CB 7C                  BIT   7,h   
08C0   C8                     RET   z   
08C1   AF                     XOR   a   
08C2   95                     SUB   l   
08C3   6F                     LD   l,a   
08C4   9F                     SBC   a,a   
08C5   94                     SUB   h   
08C6   67                     LD   h,a   
08C7   E5                     PUSH   hl   
08C8   DD E9                  JP   (ix)   
08CA                             ; /ad addrOf
08CA                             ; char -- addr
08CA                ADDROF:      
08CA   E1                     POP   hl   ; a = char
08CB   7D                     LD   a,l   
08CC   FE 7B                  CP   "z"+1   ; if a > z then exit
08CE   30 19                  JR   nc,addrOf2   
08D0   D6 41                  SUB   "A"   ; a - 65
08D2   38 15                  JR   c,addrOf2   ; if < A then exit
08D4   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08D6   38 06                  JR   c,addrOf1   
08D8   D6 06                  SUB   "a"-("Z"+1)   
08DA   FE 1A                  CP   "Z"-"A"+1   
08DC   38 0B                  JR   c,addrOf2   ; if < a then exit
08DE                ADDROF1:      
08DE   87                     ADD   a,a   ; double a
08DF   21 00 0D               LD   hl,VARS   ; hl = VARS + a
08E2   85                     ADD   a,l   
08E3   6F                     LD   l,a   
08E4   3E 00                  LD   a,0   
08E6   8C                     ADC   a,h   
08E7   67                     LD   h,a   
08E8   E5                     PUSH   hl   
08E9                ADDROF2:      
08E9   DD E9                  JP   (ix)   
08EB                             ; /bc buffered char
08EB                             ; value --
08EB                BUFFERCHAR:      
08EB   D1                     POP   de   
08EC   2A E8 0D               LD   hl,(vTIBPtr)   
08EF   73                     LD   (hl),e   
08F0   23                     INC   hl   
08F1   22 E8 0D               LD   (vTIBPtr),hl   
08F4   DD E9                  JP   (ix)   
08F6                             ; /bd buffer decimal
08F6                             ; value -- len
08F6                BUFFERDEC:      
08F6   ED 5B E8 0D            LD   de,(vTIBPtr)   ; de"= buffer* bc" = IP
08FA   D9                     EXX      
08FB   E1                     POP   hl   ; hl = value
08FC   CD 0E 09               CALL   bufferDec0   
08FF   D9                     EXX      ; de = buffer*' bc = IP
0900   2A E8 0D               LD   hl,(vTIBPtr)   ; hl = buffer*
0903   ED 53 E8 0D            LD   (vTIBPtr),de   ; update TIB* = de
0907   EB                     EX   de,hl   ; hl = length
0908   B7                     OR   a   
0909   ED 52                  SBC   hl,de   
090B   E5                     PUSH   hl   ; return length
090C   DD E9                  JP   (ix)   
090E                             ; hl = value
090E                             ; de' = buffer*
090E                             ; a, bc, de, hl destroyed
090E                BUFFERDEC0:      
090E   CB 7C                  BIT   7,h   
0910   28 0C                  JR   z,bufferDec1   
0912   D9                     EXX      
0913   3E 2D                  LD   a,"-"   
0915   12                     LD   (de),a   
0916   13                     INC   de   
0917   D9                     EXX      
0918   AF                     XOR   a   
0919   95                     SUB   l   
091A   6F                     LD   l,a   
091B   9F                     SBC   a,a   
091C   94                     SUB   h   
091D   67                     LD   h,a   
091E                BUFFERDEC1:      
091E   0E 00                  LD   c,0   ; leading zeros flag = false
0920   11 F0 D8               LD   de,-10000   
0923   CD 3E 09               CALL   bufferDec2   
0926   11 18 FC               LD   de,-1000   
0929   CD 3E 09               CALL   bufferDec2   
092C   11 9C FF               LD   de,-100   
092F   CD 3E 09               CALL   bufferDec2   
0932   1E F6                  LD   e,-10   
0934   CD 3E 09               CALL   bufferDec2   
0937   0C                     INC   c   ; flag = true for at least digit
0938   1E FF                  LD   e,-1   
093A   CD 3E 09               CALL   bufferDec2   
093D   C9                     RET      
093E                BUFFERDEC2:      
093E   06 2F                  LD   b,"0"-1   
0940                BUFFERDEC3:      
0940   04                     INC   b   
0941   19                     ADD   hl,de   
0942   38 FC                  JR   c,bufferDec3   
0944   ED 52                  SBC   hl,de   
0946   3E 30                  LD   a,"0"   
0948   B8                     CP   b   
0949   20 05                  JR   nz,bufferDec4   
094B   AF                     XOR   a   
094C   B1                     OR   c   
094D   C8                     RET   z   
094E   18 01                  JR   bufferDec5   
0950                BUFFERDEC4:      
0950   0C                     INC   c   
0951                BUFFERDEC5:      
0951   78                     LD   a,b   
0952   D9                     EXX      
0953   12                     LD   (de),a   
0954   13                     INC   de   
0955   D9                     EXX      
0956   C9                     RET      
0957                BREAK:       
0957   E1                     POP   hl   
0958   7D                     LD   a,l   
0959   B4                     OR   h   
095A   28 02                  JR   z,break1   
095C   DD E9                  JP   (ix)   
095E                BREAK1:      
095E   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0960   FD 54                  LD   d,iyh   
0962   21 08 00               LD   hl,8   
0965   19                     ADD   hl,de   
0966   23                     INC   hl   
0967   23                     INC   hl   
0968   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
096B   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
096E   C3 3E 05               JP   blockEnd   
0971                             ; partial
0971                             ; array* func* -- func1*
0971                PARTIAL:      
0971   E1                     POP   hl   ; h1 = func*
0972   ED 5B EC 0D            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0976   ED 43 FA 0D            LD   (vTemp1),bc   ; save IP
097A   01 06 00               LD   bc,6   ; bc = count
097D   ED B0                  LDIR      ; clone func
097F   ED 4B FA 0D            LD   bc,(vTemp1)   ; restore IP
0983   2A EC 0D               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0986   ED 53 EC 0D            LD   (vHeapPtr),de   ; heap* += 6
098A   D1                     POP   de   ; de = array*
098B   E5                     PUSH   hl   ; return partial_array*
098C   73                     LD   (hl),e   ; compile array*
098D   23                     INC   hl   
098E   72                     LD   (hl),d   
098F   DD E9                  JP   (ix)   
0991                             ; /ps print stack
0991                             ; --
0991                PRINTSTACK:      
0991   ED 43 FA 0D            LD   (vTemp1),bc   
0995   CD E8 0A               CALL   printStr   
0998   3D 3E 20 00            .CSTR   "=> "   
099C   21 80 0C               LD   hl,STACK   
099F   ED 72                  SBC   hl,sp   
09A1   CB 3C                  SRL   h   
09A3   CB 1D                  RR   l   
09A5   44 4D                  LD   bc,hl   
09A7   21 80 0C               LD   hl,STACK   
09AA   18 0F                  JR   printStack2   
09AC                PRINTSTACK1:      
09AC   0B                     DEC   bc   
09AD   2B                     DEC   hl   
09AE   56                     LD   d,(hl)   
09AF   2B                     DEC   hl   
09B0   5E                     LD   e,(hl)   
09B1   EB                     EX   de,hl   
09B2   CD 7E 0A               CALL   prthex   
09B5   EB                     EX   de,hl   
09B6   3E 20                  LD   a," "   
09B8   CD 85 00               CALL   putchar   
09BB                PRINTSTACK2:      
09BB   79                     LD   a,c   
09BC   B0                     OR   b   
09BD   20 ED                  JR   nz,printStack1   
09BF   CD D8 0A               CALL   prompt   
09C2   ED 4B FA 0D            LD   bc,(vTemp1)   
09C6   DD E9                  JP   (ix)   
09C8                             ; printTIB
09C8                             ; --
09C8                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
09C8                PRINTTIB:      
09C8   11 00 0F               LD   de,TIB   
09CB   2A E8 0D               LD   hl,(vTIBPtr)   
09CE   B7                     OR   a   ; hl = length
09CF   ED 52                  SBC   hl,de   
09D1   C3 DF 09               JP   printChars2   
09D4                             ; printChars
09D4                             ; char* len --
09D4                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
09D4                PRINTCHARS:      
09D4   E1                     POP   hl   
09D5   D1                     POP   de   
09D6   C3 DF 09               JP   printChars2   
09D9                PRINTCHARS1:      
09D9   13                     INC   de   
09DA   2B                     DEC   hl   
09DB   1A                     LD   a,(de)   
09DC   CD 85 00               CALL   putchar   
09DF                PRINTCHARS2:      
09DF   7D                     LD   a,l   
09E0   B4                     OR   h   
09E1   20 F6                  JR   nz,printChars1   
09E3   DD E9                  JP   (ix)   
09E5                CHARS:       
09E5   21 01 00               LD   hl,1   
09E8                CHARS1:      
09E8   22 E6 0D               LD   (vDataWidth),hl   
09EB   DD E9                  JP   (ix)   
09ED                CONSTHEAPSTART:      
09ED   ED 5B EC 0D            LD   de,(vHeapPtr)   
09F1   18 1B                  JR   constant   
09F3                CONSTTIBSTART:      
09F3   ED 5B E8 0D            LD   de,(vTIBPtr)   
09F7   18 15                  JR   constant   
09F9                VARHEAPPTR:      
09F9   ED 5B EC 0D            LD   de,(vHeapPtr)   
09FD   21 EC 0D               LD   hl,vHeapPtr   
0A00   18 09                  JR   variable   
0A02                VARTIBPTR:      
0A02   ED 5B E8 0D            LD   de,(vTIBPtr)   
0A06   21 E8 0D               LD   hl,vTIBPtr   
0A09   18 00                  JR   variable   
0A0B                VARIABLE:      
0A0B   22 EE 0D               LD   (vPointer),hl   
0A0E                CONSTANT:      
0A0E   D5                     PUSH   de   
0A0F   DD E9                  JP   (ix)   
0A11                             ; Z80 port input
0A11                             ; port -- value
0A11                INPUT:       
0A11   E1                     POP   hl   
0A12   59                     LD   e,c   ; save IP
0A13   4D                     LD   c,l   
0A14   ED 68                  IN   l,(c)   
0A16   26 00                  LD   h,0   
0A18   4B                     LD   c,e   ; restore IP
0A19   E5                     PUSH   hl   
0A1A   DD E9                  JP   (ix)   
0A1C                KEY:         
0A1C   CD 81 00               CALL   getchar   
0A1F   26 00                  LD   h,0   
0A21   6F                     LD   l,a   
0A22   E5                     PUSH   hl   
0A23   DD E9                  JP   (ix)   
0A25                             ; Z80 port output
0A25                             ; value port --
0A25                OUTPUT:      
0A25   E1                     POP   hl   
0A26   59                     LD   e,c   ; save IP
0A27   4D                     LD   c,l   
0A28   E1                     POP   hl   
0A29   ED 69                  OUT   (c),l   
0A2B   4B                     LD   c,e   ; restore IP
0A2C   DD E9                  JP   (ix)   
0A2E                NUMBERS:      
0A2E   21 02 00               LD   hl,2   
0A31   C3 E8 09               JP   chars1   
0A34                             ; 
0A34                             ; 
0A34                             ; 
0A34                             ; 
0A34                FILTER:      
0A34                MAP:         
0A34                SCAN:        
0A34   DD E9                  JP   (ix)   
0A36                             ; print decimal
0A36                             ; hl = value
0A36                PRTDEC:      
0A36   CB 7C                  BIT   7,h   
0A38   28 0B                  JR   z,prtdec0   
0A3A   3E 2D                  LD   a,"-"   
0A3C   CD 85 00               CALL   putchar   
0A3F   AF                     XOR   a   
0A40   95                     SUB   l   
0A41   6F                     LD   l,a   
0A42   9F                     SBC   a,a   
0A43   94                     SUB   h   
0A44   67                     LD   h,a   
0A45                PRTDEC0:      
0A45   C5                     PUSH   bc   
0A46   0E 00                  LD   c,0   ; leading zeros flag = false
0A48   11 F0 D8               LD   de,-10000   
0A4B   CD 67 0A               CALL   prtdec1   
0A4E   11 18 FC               LD   de,-1000   
0A51   CD 67 0A               CALL   prtdec1   
0A54   11 9C FF               LD   de,-100   
0A57   CD 67 0A               CALL   prtdec1   
0A5A   1E F6                  LD   e,-10   
0A5C   CD 67 0A               CALL   prtdec1   
0A5F   0C                     INC   c   ; flag = true for at least digit
0A60   1E FF                  LD   e,-1   
0A62   CD 67 0A               CALL   prtdec1   
0A65   C1                     POP   bc   
0A66   C9                     RET      
0A67                PRTDEC1:      
0A67   06 2F                  LD   b,"0"-1   
0A69                PRTDEC2:      
0A69   04                     INC   b   
0A6A   19                     ADD   hl,de   
0A6B   38 FC                  JR   c,prtdec2   
0A6D   ED 52                  SBC   hl,de   
0A6F   3E 30                  LD   a,"0"   
0A71   B8                     CP   b   
0A72   20 05                  JR   nz,prtdec3   
0A74   AF                     XOR   a   
0A75   B1                     OR   c   
0A76   C8                     RET   z   
0A77   18 01                  JR   prtdec4   
0A79                PRTDEC3:      
0A79   0C                     INC   c   
0A7A                PRTDEC4:      
0A7A   78                     LD   a,b   
0A7B   C3 85 00               JP   putchar   
0A7E                PRTHEX:      ; display hl as a 16-bit number in hex.
0A7E   C5                     PUSH   bc   ; preserve the IP
0A7F   7C                     LD   a,h   
0A80   CD 89 0A               CALL   prthex2   
0A83   7D                     LD   a,l   
0A84   CD 89 0A               CALL   prthex2   
0A87   C1                     POP   bc   
0A88   C9                     RET      
0A89                PRTHEX2:      
0A89   4F                     LD   c,a   
0A8A   1F                     RRA      
0A8B   1F                     RRA      
0A8C   1F                     RRA      
0A8D   1F                     RRA      
0A8E   CD 92 0A               CALL   prthex3   
0A91   79                     LD   a,c   
0A92                PRTHEX3:      
0A92   E6 0F                  AND   0x0F   
0A94   C6 90                  ADD   a,0x90   
0A96   27                     DAA      
0A97   CE 40                  ADC   a,0x40   
0A99   27                     DAA      
0A9A   C3 85 00               JP   putchar   
0A9D                PRTSTR0:      
0A9D   CD 85 00               CALL   putchar   
0AA0   23                     INC   hl   
0AA1                PRTSTR:      
0AA1   7E                     LD   a,(hl)   
0AA2   B7                     OR   a   
0AA3   20 F8                  JR   nz,prtstr0   
0AA5   C9                     RET      
0AA6                             ; **************************************************************************
0AA6                             ; calculate nesting value
0AA6                             ; a is char to be tested,
0AA6                             ; e is the nesting value (initially 0)
0AA6                             ; e is increased by ( and [
0AA6                             ; e is decreased by ) and ]
0AA6                             ; e has its bit 7 toggled by `
0AA6                             ; limited to 127 levels
0AA6                             ; **************************************************************************
0AA6                NESTING:      
0AA6   FE 22                  CP   DQUOTE   ; quote char
0AA8   28 06                  JR   z,nesting0   
0AAA   FE 60                  CP   "`"   ; quote char
0AAC   28 02                  JR   z,nesting0   
0AAE   18 0A                  JR   nesting1   
0AB0                NESTING0:      
0AB0   CB 7B                  BIT   7,e   
0AB2   28 03                  JR   z,nesting1a   
0AB4   CB BB                  RES   7,e   
0AB6   C9                     RET      
0AB7                NESTING1A:      
0AB7   CB FB                  SET   7,e   
0AB9   C9                     RET      
0ABA                NESTING1:      
0ABA   CB 7B                  BIT   7,e   
0ABC   C0                     RET   nz   
0ABD   FE 7B                  CP   "{"   
0ABF   28 08                  JR   z,nesting2   
0AC1   FE 5B                  CP   "["   
0AC3   28 04                  JR   z,nesting2   
0AC5   FE 28                  CP   "("   
0AC7   20 02                  JR   nz,nesting3   
0AC9                NESTING2:      
0AC9   1C                     INC   e   
0ACA   C9                     RET      
0ACB                NESTING3:      
0ACB   FE 7D                  CP   "}"   
0ACD   28 07                  JR   z,nesting4   
0ACF   FE 5D                  CP   "]"   
0AD1   28 03                  JR   z,nesting4   
0AD3   FE 29                  CP   ")"   
0AD5   C0                     RET   nz   
0AD6                NESTING4:      
0AD6   1D                     DEC   e   
0AD7   C9                     RET      
0AD8                PROMPT:      
0AD8   CD E8 0A               CALL   printStr   
0ADB   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0AE0   C9                     RET      
0AE1                CRLF:        
0AE1   CD E8 0A               CALL   printStr   
0AE4   0D 0A 00               .CSTR   "\r\n"   
0AE7   C9                     RET      
0AE8                             ; prints a null teminated string
0AE8                             ; the string should be immedaitely following the call
0AE8                PRINTSTR:      
0AE8   E3                     EX   (sp),hl   ; swap			
0AE9   CD A1 0A               CALL   prtstr   
0AEC   23                     INC   hl   ; inc past NUL
0AED   E3                     EX   (sp),hl   ; put it back	
0AEE   C9                     RET      
0AEF                INIT:        
0AEF   DD 2A EA 0D            LD   ix,(vNext)   
0AF3   FD 21 80 0C            LD   iy,STACK   
0AF7   21 80 01               LD   hl,isysVars   
0AFA   11 E6 0D               LD   de,sysVars   
0AFD   01 10 00               LD   bc,8 * 2   
0B00   ED B0                  LDIR      
0B02   21 00 0D               LD   hl,vars   ; 52 vars LO HI
0B05   06 34                  LD   b,26*2   
0B07   AF                     XOR   a   
0B08                INIT0:       
0B08   77                     LD   (hl),a   
0B09   23                     INC   hl   
0B0A   10 FC                  DJNZ   init0   
0B0C   C9                     RET      
0B0D                START:       
0B0D   31 80 0C               LD   sp,STACK   ; start of monty
0B10   CD EF 0A               CALL   init   ; setups
0B13   CD E8 0A               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0B16   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0B23                INTERPRET:      
0B23   CD D8 0A               CALL   prompt   
0B26   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0B29   21 00 0F               LD   hl,TIB   
0B2C   22 E8 0D               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0B2F                INTERPRET2:      ; calculate nesting
0B2F   1E 00                  LD   e,0   ; initilize nesting value
0B31   C5                     PUSH   bc   ; save offset into TIB,
0B32                             ; bc is also the count of chars in TIB
0B32   21 00 0F               LD   hl,TIB   ; hl is start of TIB
0B35   18 06                  JR   interpret4   
0B37                INTERPRET3:      
0B37   7E                     LD   a,(hl)   ; a = char in TIB
0B38   23                     INC   hl   ; inc pointer into TIB
0B39   0B                     DEC   bc   ; dec count of chars in TIB
0B3A   CD A6 0A               CALL   nesting   ; update nesting value
0B3D                INTERPRET4:      
0B3D   79                     LD   a,c   ; is count zero?
0B3E   B0                     OR   b   
0B3F   20 F6                  JR   nz,interpret3   ; if not loop
0B41   C1                     POP   bc   ; restore offset into TIB
0B42                INTERPRET5:      
0B42   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0B45   FE 20                  CP   $20   ; compare to space
0B47   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0B49   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0B4B                             ; ???? NEEDED?
0B4B   28 3B                  JR   z,interpret8   
0B4D   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0B4F   28 24                  JR   z,interpret7   ; if anything else its macro/control
0B51   FE 05                  CP   CTRL_E   
0B53   CA D1 0B               JP   z,edit_   
0B56   FE 08                  CP   CTRL_H   
0B58   CA C1 0B               JP   z,backSpace_   
0B5B   FE 0A                  CP   CTRL_J   
0B5D   CA E9 0B               JP   z,reEdit_   
0B60   FE 13                  CP   CTRL_S   
0B62   CA EC 0B               JP   z,printStack_   
0B65                             ; DB     lsb(edit_)       ; ENQ ^E  5
0B65                             ; DB     lsb(reedit_)     ; LF  ^J 10
0B65                             ; DB     lsb(list_)       ; FF  ^L 12
0B65                             ; DB     lsb(printStack_) ; DLE ^P 16
0B65                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0B65                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0B65                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0B65                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0B65                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0B65                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0B65                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0B65                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0B65                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0B65                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0B65                INTERPRET5A:      
0B65                             ; ld (vTIBPtr),bc
0B65                             ; ld bc,(vTIBPtr)
0B65   18 C8                  JR   interpret2   
0B67                INTERPRET6:      
0B67   21 00 0F               LD   hl,TIB   
0B6A   09                     ADD   hl,bc   
0B6B   77                     LD   (hl),a   ; store the character in textbuf
0B6C   03                     INC   bc   
0B6D   CD 85 00               CALL   putchar   ; echo character to screen
0B70   CD A6 0A               CALL   nesting   
0B73   18 CD                  JR   interpret5   ; wait for next character
0B75                INTERPRET7:      
0B75   21 00 0F               LD   hl,TIB   
0B78   09                     ADD   hl,bc   
0B79   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0B7B   23                     INC   hl   
0B7C   36 0A                  LD   (hl),"\n"   
0B7E   23                     INC   hl   
0B7F   03                     INC   bc   
0B80   03                     INC   bc   
0B81   CD E1 0A               CALL   crlf   ; echo character to screen
0B84   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0B85   B7                     OR   a   
0B86   20 BA                  JR   nz,interpret5   
0B88                INTERPRET8:      
0B88   21 00 0F               LD   hl,TIB   
0B8B   09                     ADD   hl,bc   
0B8C   22 E8 0D               LD   (vTIBPtr),hl   
0B8F   01 00 0F               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0B92                             ; we pressed enter
0B92   0B                     DEC   bc   
0B93                NEXT:        
0B93   03                     INC   bc   ; Increment the IP
0B94   0A                     LD   a,(bc)   ; Get the next character and dispatch
0B95   FE 20                  CP   " "   ; whitespace?
0B97   28 FA                  JR   z,next   ; space? ignore
0B99   38 07                  JR   c,next1   
0B9B   6F                     LD   l,a   ; index into table
0B9C   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0B9E   6E                     LD   l,(hl)   ; get low jump address
0B9F   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0BA1   E9                     JP   (hl)   ; Jump to routine
0BA2                NEXT1:       
0BA2   FE 00                  CP   NUL   ; end of input string?
0BA4   28 03                  JR   z,exit   
0BA6   C3 23 0B               JP   interpret   ; no, other whitespace, macros?
0BA9                EXIT:        
0BA9   03                     INC   bc   
0BAA   60 69                  LD   hl,bc   
0BAC   E9                     JP   (hl)   
0BAD                RUN:         
0BAD   C1                     POP   bc   
0BAE   0B                     DEC   bc   
0BAF   DD E9                  JP   (ix)   
0BB1                ERROR:       
0BB1   CD E8 0A               CALL   printStr   
0BB4   45 72 72 6F 72 20 00   .CSTR   "Error "   
0BBB   CD 36 0A               CALL   prtdec   
0BBE   C3 23 0B               JP   interpret   
0BC1                BACKSPACE_:      
0BC1   79                     LD   a,c   
0BC2   B0                     OR   b   
0BC3   CA 2F 0B               JP   z,interpret2   
0BC6   0B                     DEC   bc   
0BC7   CD E8 0A               CALL   printStr   
0BCA   08 20 08 00            .CSTR   "\b \b"   
0BCE   C3 2F 0B               JP   interpret2   
0BD1                             ; edit
0BD1                EDIT_:       
0BD1   CD AD 0B               CALL   run   
0BD4   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0BE6   C3 23 0B               JP   interpret   
0BE9                REEDIT_:      
0BE9   C3 23 0B               JP   interpret   
0BEC                PRINTSTACK_:      
0BEC   CD AD 0B               CALL   run   
0BEF   2F 70 73 00            .CSTR   "/ps"   
0BF3   C3 23 0B               JP   interpret   
0BF6                             ; editDef:
0BF6                             ;     pop hl                      ; pop ret address
0BF6                             ;     ex (sp),hl                  ; swap with TOS
0BF6                             ;     push hl                     ; dup TOS
0BF6                             ;     ld a,l                      ; a = ident
0BF6                             ;     ld de,TIB                   ; de = start of TIB
0BF6                             ;     ld (vTIBPtr),de             ; update TIB*
0BF6                             ;     push ix                     ; save NEXT
0BF6                             ;     ld ix,editDef0              ; NEXT = editDef0
0BF6                             ;     jp lookupRef                ; convert letter into address
0BF6                             ; editDef0:
0BF6                             ;     ld e,(hl)                   ; de = (hl++)
0BF6                             ;     inc hl
0BF6                             ;     ld d,(hl)
0BF6                             ;     ld a,d                      ; de == 0 ?
0BF6                             ;     or e
0BF6                             ;     jr z,editDef4
0BF6                             ;     ld ix,editDef3              ; NEXT = editDef3
0BF6                             ;     ex de,hl
0BF6                             ;     ld a,(hl)
0BF6                             ;     cp "{"
0BF6                             ;     jr nz,editDef1
0BF6                             ;     jp editBlock0               ; convert letter into address
0BF6                             ; editDef1:
0BF6                             ;     cp "("
0BF6                             ;     jr nz,editDef2
0BF6                             ;     jp editBlock0               ; convert letter into address
0BF6                             ; editDef2:
0BF6                             ;     jp editFunc
0BF6                             ; editDef3:
0BF6                             ;     ld a," "                    ; write assign
0BF6                             ;     call writeChar
0BF6                             ;     pop hl                      ; a = ident
0BF6                             ;     ld a,l
0BF6                             ;     call writeChar
0BF6                             ;     ld a,"="                    ; write assign
0BF6                             ;     call writeChar
0BF6                             ;     ld ix,editDef4              ; NEXT = editDef4
0BF6                             ;     jp printTIB
0BF6                             ; editDef4:
0BF6                             ;     pop ix                      ; restore NEXT
0BF6                             ;     jp (ix)
0BF6                             ; writeChar:
0BF6                             ;     ld de,(vTIBPtr)             ; de = TIB*
0BF6                             ;     ld (de),a                   ; write ident
0BF6                             ;     inc de
0BF6                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0BF6                             ;     ret
0BF6                             ; ; printTIB
0BF6                             ; printTIB:
0BF6                             ;     ld hl,(vTIBPtr)
0BF6                             ;     ld de,TIB
0BF6                             ;     or a
0BF6                             ;     sbc hl,de
0BF6                             ;     jp printTIB2
0BF6                             ; printTIB1:
0BF6                             ;     ld a,(de)
0BF6                             ;     call putchar
0BF6                             ; printTIB2:
0BF6                             ;     ld a,l
0BF6                             ;     or h
0BF6                             ;     jr nz,printTIB1
0BF6                             ;     jp (ix)
0BF6                             ; editBlock:
0BF6                             ;     pop hl                      ; hl = block*
0BF6                             ; editBlock0:
0BF6                             ;     push ix                     ; save next
0BF6                             ;     push hl                     ; push block*
0BF6                             ;     push hl                     ; push block*
0BF6                             ;     ld ix,(editBlock2)
0BF6                             ;     jp blockLength
0BF6                             ; editBlock1:
0BF6                             ;     pop hl                      ; bc = length, (sp) = IP
0BF6                             ;     pop de                      ; de = block*
0BF6                             ;     ld a,l
0BF6                             ;     or h
0BF6                             ;     jr z,editBlock2
0BF6                             ;     push bc
0BF6                             ;     ld bc,hl
0BF6                             ;     ex de,hl                    ; hl = block*
0BF6                             ;     ld de,(vTIBPtr)              ; de = TIB*
0BF6                             ;     ldir                        ; copy block to TIB
0BF6                             ;     ld (vTIBPtr),de              ; save TIB*
0BF6                             ;     pop bc
0BF6                             ; editBlock2:
0BF6                             ;     pop ix                      ; restore next
0BF6                             ;     jp (ix)
0BF6                             ; editFunc:
0BF6                             ;     jp (ix)
0BF6                             ; editArray:
0BF6                             ;     jp (ix)
0BF6                             ; editArglist:
0BF6                             ;     jp (ix)
0BF6                             ; ; blockLength
0BF6                             ; ; addr1 -- length
0BF6                             ; blockLength:
0BF6                             ;     pop hl                      ; block*
0BF6                             ;     push hl                     ; save block*
0BF6                             ;     inc hl                      ; skip first char
0BF6                             ;     ld d,1                      ; increase nesting
0BF6                             ; blockLength1:                   ; Skip to end of definition
0BF6                             ;     ld a,(hl)                   ; Get the next character
0BF6                             ;     inc hl                      ; Point to next character
0BF6                             ;     cp " " + 1                  ; ignore whitespace
0BF6                             ;     jr c,blockLength1
0BF6                             ;     cp ")"
0BF6                             ;     jr z,blockLength4
0BF6                             ;     cp "}"
0BF6                             ;     jr z,blockLength4
0BF6                             ;     cp "]"
0BF6                             ;     jr z,blockLength4
0BF6                             ;     cp "("
0BF6                             ;     jr z,blockLength2
0BF6                             ;     cp "{"
0BF6                             ;     jr z,blockLength2
0BF6                             ;     cp "["
0BF6                             ;     jr z,blockLength2
0BF6                             ;     cp "'"
0BF6                             ;     jr z,blockLength3
0BF6                             ;     cp "`"
0BF6                             ;     jr z,blockLength3
0BF6                             ;     cp DQUOTE
0BF6                             ;     jr z,blockLength3
0BF6                             ;     jr blockLength1
0BF6                             ; blockLength2:
0BF6                             ;     inc d
0BF6                             ;     jr blockLength1
0BF6                             ; blockLength4:
0BF6                             ;     dec d
0BF6                             ;     jr nz, blockLength1         ; get the next element
0BF6                             ; blockLength3:
0BF6                             ;     ld a,$80
0BF6                             ;     xor d
0BF6                             ;     ld d,a
0BF6                             ;     jr nz, blockLength1
0BF6                             ;     pop hl                      ; hl = block*
0BF6                             ;     or a
0BF6                             ;     sbc hl,de
0BF6                             ;     push hl
0BF6                             ;     jp (ix)
0BF6                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0BF6                             ; \a start of stack \#3 depth \b base \$ prompt
0BF6                             ; DW dStack               ; a vS0 start of datastack			
0BF6                             ; DW FALSE                ; b vBase16
0BF6                             ; DW 0                    ; c vTIBPtr an offset to the tib
0BF6                             ; DW 0                    ; d
0BF6                             ; DW 65                   ; e vLastDef "A" last command u defined
0BF6                             ; DW 0                    ; f
0BF6                             ; DW page6                ; g 256 bytes limits
0BF6                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0BF6                          ALIGN   $100   
0C00                             ; .org RAMSTART
0C00                          DS   DSIZE   
0C80                STACK:       
0C80                          ALIGN   $100   
0D00                VARS:        
0D00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0DD0                RESTARTS:      
0DD0                RST08:    DS   2   
0DD2                RST10:    DS   2   
0DD4                RST18:    DS   2   
0DD6                RST20:    DS   2   
0DD8                RST28:    DS   2   
0DDA                RST30:    DS   2   ; 
0DDC                BAUD:     DS   2   ; 
0DDE                INTVEC:   DS   2   ; 
0DE0                NMIVEC:   DS   2   ; 
0DE2                GETCVEC:   DS   2   ; 
0DE4                PUTCVEC:   DS   2   ; 
0DE6                SYSVARS:      
0DE6                             ; initialised sys variables (preserved)
0DE6                VDATAWIDTH:   DS   2   ; 
0DE8                VTIBPTR:   DS   2   ; 
0DEA                VNEXT:    DS   2   ; 
0DEC                VHEAPPTR:   DS   2   ; 
0DEE                             ; uninitialised sys variables (preserved)
0DEE                VPOINTER:   DS   2   ; 
0DF0                VREMAIN:   DS   2   ; 
0DF2                VSAVEDIP:   DS   2   ; 
0DF4                VSAVEDSP:   DS   2   ; 
0DF6                VSAVEDBP:   DS   2   ; 
0DF8                VCHECKSUM:   DS   2   ; 
0DFA                             ; uninitialised sys variables (unpreserved)
0DFA                VTEMP1:   DS   2   ; 
0DFC                VTEMP2:   DS   2   ; 
0DFE                VLASTDEF:   DS   2   ; 
0E00                VHASHSTR:   DS   2   ; 
0E02                TBPTR:    DS   2   ; reserved for tests
0E04                          ALIGN   $100   
0F00                TIB:      DS   TIBSIZE   
1000                          ALIGN   $100   
1000                PAD:      DS   $100   
1100                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 58 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0A34 DEFINED AT LINE 1618 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 29 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 786 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1865 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 53 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 22 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 26 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 27 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 28 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 31 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 63 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 68 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 76 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 78 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 112 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 215 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 217 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 219 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 221 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 223 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 225 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 227 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 229 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 231 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 233 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 235 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 237 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 239 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 241 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 243 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 245 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 247 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 249 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 251 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 253 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 255 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 258 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 260 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 262 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 264 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 266 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 268 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 270 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 272 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 285 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 293 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 295 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 302 IN MAIN.asm
                    > USED AT LINE 292 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 307 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 309 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 311 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 318 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
ADD:                038A DEFINED AT LINE 319 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 323 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
AT:                 03A4 DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADDR:               03A4 DEFINED AT LINE 344 IN MAIN.asm
AMPER:              03B0 DEFINED AT LINE 351 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
AND:                03B0 DEFINED AT LINE 352 IN MAIN.asm
AND1:               03B7 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 373 IN MAIN.asm
PIPE:               03BB DEFINED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
OR:                 03BB DEFINED AT LINE 365 IN MAIN.asm
XOR:                03C4 DEFINED AT LINE 375 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
XOR1:               03C5 DEFINED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 389 IN MAIN.asm
INVERT:             03CF DEFINED AT LINE 387 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
DOLLAR:             03D4 DEFINED AT LINE 394 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARG:                03D4 DEFINED AT LINE 395 IN MAIN.asm
ARG0:               03F2 DEFINED AT LINE 416 IN MAIN.asm
                    > USED AT LINE 422 IN MAIN.asm
ARG0A:              03FB DEFINED AT LINE 424 IN MAIN.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 408 IN MAIN.asm
ARG1:               0400 DEFINED AT LINE 427 IN MAIN.asm
                    > USED AT LINE 420 IN MAIN.asm
ARG1A:              0408 DEFINED AT LINE 434 IN MAIN.asm
                    > USED AT LINE 426 IN MAIN.asm
LBRACK:             040B DEFINED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARRBEGIN:           040B DEFINED AT LINE 439 IN MAIN.asm
RBRACK:             0427 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARREND:             0427 DEFINED AT LINE 454 IN MAIN.asm
ARREND1:            0441 DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARREND2:            0451 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 476 IN MAIN.asm
ARRINDEX:           0475 DEFINED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARRINDEX0:          047D DEFINED AT LINE 513 IN MAIN.asm
ARRINDEX1:          047E DEFINED AT LINE 515 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
ARRINDEX2:          048A DEFINED AT LINE 524 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ASSIGN:             048D DEFINED AT LINE 529 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
ASSIGN0:            048F DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
ASSIGNX:            0490 DEFINED AT LINE 534 IN MAIN.asm
ASSIGN1:            049C DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 539 IN MAIN.asm
COLON:              049E DEFINED AT LINE 549 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
ARGLIST:            049E DEFINED AT LINE 550 IN MAIN.asm
ARGLIST1:           04A8 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
ARGLIST1A:          04B0 DEFINED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 560 IN MAIN.asm
ARGLIST2:           04B8 DEFINED AT LINE 568 IN MAIN.asm
ARGLIST3:           04C0 DEFINED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
ARGLIST4:           04C3 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 567 IN MAIN.asm
ARGLIST5:           04C9 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 583 IN MAIN.asm
LBRACE:             04D5 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
BLOCK:              04D5 DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
BLOCK1:             04D9 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCK2:             0505 DEFINED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
BLOCK3:             0508 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
BLOCK4:             0510 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
BLOCK5:             0513 DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
BLOCK6:             053B DEFINED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 646 IN MAIN.asm
RBRACE:             053E DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCKEND:           053E DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
BLOCKEND1:          0570 DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 679 IN MAIN.asm
BLOCKEND2:          057C DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
BLOCKEND3:          058E DEFINED AT LINE 707 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
TICK:               059A DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
CHAR:               059A DEFINED AT LINE 715 IN MAIN.asm
CHAR1:              059D DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
CHAR2:              05A9 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
CHAR3:              05AC DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
BACKSLASH:          05AF DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
COMMA:              05B1 DEFINED AT LINE 738 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
DISCARD:            05B1 DEFINED AT LINE 739 IN MAIN.asm
DISCARD1:           05BE DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
SLASH:              05C0 DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
DOT:                05DE DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
DOT1:               05EA DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
DOT2:               05F3 DEFINED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DOT3:               05FD DEFINED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
DOT4:               0601 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
DIVIDE:             0608 DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
DIVIDE1:            060D DEFINED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
DIVIDE2:            061A DEFINED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
DIVIDE3:            061B DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
EQUALS:             0621 DEFINED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LESSTHANEQ:         0629 DEFINED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
LESSTHAN:           062E DEFINED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN1:          0633 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
TRUE1:              0636 DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
NULL1:              063C DEFINED AT LINE 847 IN MAIN.asm
FALSE1:             063C DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
LPAREN:             0642 DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 860 IN MAIN.asm
GO1:                0646 DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1040 IN MAIN.asm
GO2:                064C DEFINED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
GOBLOCK:            0658 DEFINED AT LINE 875 IN MAIN.asm
GOBLOCK1:           0658 DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
GOBLOCK2:           067D DEFINED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
GOFUNC:             068B DEFINED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOFUNC1:            06A4 DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
GOFUNC2:            06AA DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
GOFUNC3:            06B5 DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOFUNC4:            06CD DEFINED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOFUNC5:            06D1 DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
GOFUNC6:            06D4 DEFINED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
GOFUNC7:            06D7 DEFINED AT LINE 962 IN MAIN.asm
GOFUNC8:            06DC DEFINED AT LINE 968 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
HASH:               06E7 DEFINED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
HEXNUM:             06E7 DEFINED AT LINE 978 IN MAIN.asm
HEXNUM1:            06EA DEFINED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
HEXNUM2:            06F2 DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
UPCASE:             0704 DEFINED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
LOWCASE:            0709 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
IDENT1:             070E DEFINED AT LINE 1006 IN MAIN.asm
                    > USED AT LINE 1001 IN MAIN.asm
QUESTION:           071B DEFINED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IF:                 071B DEFINED AT LINE 1020 IN MAIN.asm
IFTE:               0727 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
IFTE1:              0728 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1027 IN MAIN.asm
STAR:               0734 DEFINED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
MUL:                0734 DEFINED AT LINE 1043 IN MAIN.asm
MUL2:               0736 DEFINED AT LINE 1046 IN MAIN.asm
MUL3:               073E DEFINED AT LINE 1051 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
NUM:                0750 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
NUM0:               0759 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
NUM1:               075A DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
NUM2:               0772 DEFINED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1077 IN MAIN.asm
NUM3:               077D DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1093 IN MAIN.asm
UNDERSCORE:         0780 DEFINED AT LINE 1102 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
REMAIN:             0780 DEFINED AT LINE 1103 IN MAIN.asm
RPAREN:             0786 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 312 IN MAIN.asm
SEMICOLON:          078E DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
SHIFTLEFT:          07AA DEFINED AT LINE 1138 IN MAIN.asm
                    > USED AT LINE 299 IN MAIN.asm
SHIFTLEFT1:         07B2 DEFINED AT LINE 1145 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
SHIFTLEFT2:         07B3 DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
SHIFTRIGHT:         07BA DEFINED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
SHIFTRIGHT1:        07C2 DEFINED AT LINE 1162 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
SHIFTRIGHT2:        07C6 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
DBLQUOTE:           07CD DEFINED AT LINE 1174 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
STRING:             07CD DEFINED AT LINE 1175 IN MAIN.asm
STRING1:            07D6 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1191 IN MAIN.asm
STRING2:            07D9 DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
STRING3:            07E2 DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
MINUS:              07F5 DEFINED AT LINE 1209 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
SUB:                0801 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1214 IN MAIN.asm
SUB1:               080B DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
COMMAND:            0814 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
ERROR1:             0854 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1320 IN MAIN.asm
COMMAND_A:          085A DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
COMMAND_B:          0868 DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
COMMAND_I:          087B DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
COMMAND_P:          0889 DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
COMMAND_V:          089C DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
COMMENT:            08B4 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
ABSOLUTE:           08BD DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
ADDROF:             08CA DEFINED AT LINE 1347 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
ADDROF1:            08DE DEFINED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
ADDROF2:            08E9 DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
BUFFERCHAR:         08EB DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
BUFFERDEC:          08F6 DEFINED AT LINE 1383 IN MAIN.asm
                    > USED AT LINE 1284 IN MAIN.asm
BUFFERDEC0:         090E DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1387 IN MAIN.asm
BUFFERDEC1:         091E DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1402 IN MAIN.asm
BUFFERDEC2:         093E DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
BUFFERDEC3:         0940 DEFINED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
BUFFERDEC4:         0950 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
BUFFERDEC5:         0951 DEFINED AT LINE 1444 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
BREAK:              0957 DEFINED AT LINE 1452 IN MAIN.asm
                    > USED AT LINE 1286 IN MAIN.asm
BREAK1:             095E DEFINED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
PARTIAL:            0971 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
PRINTSTACK:         0991 DEFINED AT LINE 1489 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
PRINTSTACK1:        09AC DEFINED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
PRINTSTACK2:        09BB DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
PRINTTIB:           09C8 DEFINED AT LINE 1522 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
PRINTCHARS:         09D4 DEFINED AT LINE 1532 IN MAIN.asm
PRINTCHARS1:        09D9 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
PRINTCHARS2:        09DF DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1535 IN MAIN.asm
CHARS:              09E5 DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1246 IN MAIN.asm
CHARS1:             09E8 DEFINED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1609 IN MAIN.asm
CONSTHEAPSTART:     09ED DEFINED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
CONSTTIBSTART:      09F3 DEFINED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
VARHEAPPTR:         09F9 DEFINED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
VARTIBPTR:          0A02 DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
VARIABLE:           0A0B DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 1569 IN MAIN.asm
CONSTANT:           0A0E DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1559 IN MAIN.asm
INPUT:              0A11 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
KEY:                0A1C DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
OUTPUT:             0A25 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
NUMBERS:            0A2E DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
FILTER:             0A34 DEFINED AT LINE 1616 IN MAIN.asm
MAP:                0A34 DEFINED AT LINE 1617 IN MAIN.asm
PRTDEC:             0A36 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
PRTDEC0:            0A45 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
PRTDEC1:            0A67 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
PRTDEC2:            0A69 DEFINED AT LINE 1654 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
PRTDEC3:            0A79 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
PRTDEC4:            0A7A DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 1665 IN MAIN.asm
PRTHEX:             0A7E DEFINED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
PRTHEX2:            0A89 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
PRTHEX3:            0A92 DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1686 IN MAIN.asm
PRTSTR0:            0A9D DEFINED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
PRTSTR:             0AA1 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
NESTING:            0AA6 DEFINED AT LINE 1715 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1866 IN MAIN.asm
NESTING0:           0AB0 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
NESTING1A:          0AB7 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
NESTING1:           0ABA DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1720 IN MAIN.asm
NESTING2:           0AC9 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
NESTING3:           0ACB DEFINED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
NESTING4:           0AD6 DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
PROMPT:             0AD8 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
CRLF:               0AE1 DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
PRINTSTR:           0AE8 DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
INIT:               0AEF DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 1789 IN MAIN.asm
INIT0:              0B08 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
START:              0B0D DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0B23 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
INTERPRET2:         0B2F DEFINED AT LINE 1800 IN MAIN.asm
                    > USED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
INTERPRET3:         0B37 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
INTERPRET4:         0B3D DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
INTERPRET5:         0B42 DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
INTERPRET5A:        0B65 DEFINED AT LINE 1855 IN MAIN.asm
INTERPRET6:         0B67 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
INTERPRET7:         0B75 DEFINED AT LINE 1869 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
INTERPRET8:         0B88 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
NEXT:               0B93 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
NEXT1:              0BA2 DEFINED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
EXIT:               0BA9 DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1904 IN MAIN.asm
RUN:                0BAD DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
ERROR:              0BB1 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
BACKSPACE_:         0BC1 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
EDIT_:              0BD1 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
REEDIT_:            0BE9 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
PRINTSTACK_:        0BEC DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
STACK:              0C80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
VARS:               0D00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
RESTARTS:           0DD0 DEFINED AT LINE 11 IN ram.asm
RST08:              0DD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0DD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0DD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0DD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0DD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0DDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0DDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0DDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0DE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0DE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            0DE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0DE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1775 IN MAIN.asm
VDATAWIDTH:         0DE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 1550 IN MAIN.asm
VTIBPTR:            0DE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1375 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1384 IN MAIN.asm
                    > USED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
VNEXT:              0DEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1772 IN MAIN.asm
VHEAPPTR:           0DEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
VPOINTER:           0DEE DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
VREMAIN:            0DF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
VSAVEDIP:           0DF2 DEFINED AT LINE 39 IN ram.asm
VSAVEDSP:           0DF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDBP:           0DF6 DEFINED AT LINE 41 IN ram.asm
VCHECKSUM:          0DF8 DEFINED AT LINE 42 IN ram.asm
VTEMP1:             0DFA DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
VTEMP2:             0DFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 670 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
VLASTDEF:           0DFE DEFINED AT LINE 48 IN ram.asm
VHASHSTR:           0E00 DEFINED AT LINE 49 IN ram.asm
TBPTR:              0E02 DEFINED AT LINE 50 IN ram.asm
TIB:                0F00 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
PAD:                1000 DEFINED AT LINE 56 IN ram.asm
HEAP:               1100 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 642 IN MAIN.asm
