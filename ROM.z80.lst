0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   
00C6   CD 87 0B               CALL   init   
00C9   C3 A5 0B               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                TMAGIC:   EQU   $AA   ; magic number
00CC                TRESERV:   EQU   $A0   ; reserved
00CC                TNUMBER:   EQU   $A1   ; number
00CC                TSTRING:   EQU   $A2   ; string
00CC                TPOINTER:   EQU   $A3   ; pointer
00CC                TARRAY:   EQU   $A4   ; array
00CC                TBLOCK:   EQU   $A5   ; block
00CC                TLAMBDA:   EQU   $A6   ; lambda
00CC                TARGLST:   EQU   $A7   ; arglist
00CC                             ; z80_RST8    equ     $CF
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   32 0C                  DW   next   ; nNext
018A   08 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ `
0200   82                     DB   lsb(nop_)   ; SP
0201   39                     DB   lsb(bang_)   ; !
0202   4D                     DB   lsb(dblquote_)   ; "
0203   41                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   84                     DB   lsb(rparen_)   ; )
020A   36                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   4A                     DB   lsb(comma_)   ; ,
020D   50                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7F                     DB   lsb(slash_)   ; /	
0210   3E                     DB   lsb(num_)   ; 0
0211   3E                     DB   lsb(num_)   ; 1
0212   3E                     DB   lsb(num_)   ; 2
0213   3E                     DB   lsb(num_)   ; 3
0214   3E                     DB   lsb(num_)   ; 4
0215   3E                     DB   lsb(num_)   ; 5
0216   3E                     DB   lsb(num_)   ; 6
0217   3E                     DB   lsb(num_)   ; 7
0218   3E                     DB   lsb(num_)   ; 8
0219   3E                     DB   lsb(num_)   ; 9
021A   2A                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6D                     DB   lsb(lt_)   ; <
021D   53                     DB   lsb(eq_)   ; =
021E   62                     DB   lsb(gt_)   ; >
021F   33                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2D                     DB   lsb(upcase_)   ; A
0222   2D                     DB   lsb(upcase_)   ; B
0223   2D                     DB   lsb(upcase_)   ; C
0224   2D                     DB   lsb(upcase_)   ; D
0225   2D                     DB   lsb(upcase_)   ; E
0226   2D                     DB   lsb(upcase_)   ; F
0227   2D                     DB   lsb(upcase_)   ; G
0228   2D                     DB   lsb(upcase_)   ; h
0229   2D                     DB   lsb(upcase_)   ; I
022A   2D                     DB   lsb(upcase_)   ; J
022B   2D                     DB   lsb(upcase_)   ; K
022C   2D                     DB   lsb(upcase_)   ; L
022D   2D                     DB   lsb(upcase_)   ; M
022E   2D                     DB   lsb(upcase_)   ; N
022F   2D                     DB   lsb(upcase_)   ; O
0230   2D                     DB   lsb(upcase_)   ; p
0231   2D                     DB   lsb(upcase_)   ; Q
0232   2D                     DB   lsb(upcase_)   ; R
0233   2D                     DB   lsb(upcase_)   ; S
0234   2D                     DB   lsb(upcase_)   ; T
0235   2D                     DB   lsb(upcase_)   ; U
0236   2D                     DB   lsb(upcase_)   ; V
0237   2D                     DB   lsb(upcase_)   ; W
0238   2D                     DB   lsb(upcase_)   ; X
0239   2D                     DB   lsb(upcase_)   ; Y
023A   2D                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   47                     DB   lsb(caret_)   ; ^
023F   27                     DB   lsb(underscore_)   ; _
0240   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   30                     DB   lsb(lowcase_)   ; a
0242   30                     DB   lsb(lowcase_)   ; b
0243   30                     DB   lsb(lowcase_)   ; c
0244   30                     DB   lsb(lowcase_)   ; d
0245   30                     DB   lsb(lowcase_)   ; e
0246   30                     DB   lsb(lowcase_)   ; f
0247   30                     DB   lsb(lowcase_)   ; g
0248   30                     DB   lsb(lowcase_)   ; h
0249   30                     DB   lsb(lowcase_)   ; i
024A   30                     DB   lsb(lowcase_)   ; j
024B   30                     DB   lsb(lowcase_)   ; k
024C   30                     DB   lsb(lowcase_)   ; l
024D   30                     DB   lsb(lowcase_)   ; m
024E   30                     DB   lsb(lowcase_)   ; n
024F   30                     DB   lsb(lowcase_)   ; o
0250   30                     DB   lsb(lowcase_)   ; p
0251   30                     DB   lsb(lowcase_)   ; q
0252   30                     DB   lsb(lowcase_)   ; r
0253   30                     DB   lsb(lowcase_)   ; s
0254   30                     DB   lsb(lowcase_)   ; t
0255   30                     DB   lsb(lowcase_)   ; u
0256   30                     DB   lsb(lowcase_)   ; v
0257   30                     DB   lsb(lowcase_)   ; w
0258   30                     DB   lsb(lowcase_)   ; x
0259   30                     DB   lsb(lowcase_)   ; y
025A   30                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   44                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   82                     DB   lsb(nop_)   ; ~
025F   82                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 87 03               JP   plus   
0303                AT_:         
0303   C3 99 03               JP   at   
0306                AMPER_:      
0306   C3 A3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 C7 03               JP   dollar   
030C                LBRACK_:      
030C   C3 FE 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 1A 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 72 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 AC 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 D2 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 3B 05               JP   rbrace   
031E                TICK_:       
031E   C3 97 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 01 08               JP   semicolon   
0324                DOT_:        
0324   C3 04 06               JP   dot   
0327                UNDERSCORE_:      
0327   C3 F3 07               JP   underscore   
032A                COLON_:      
032A   C3 9B 04               JP   colon   
032D                UPCASE_:      
032D   C3 77 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 7C 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 8E 07               JP   question   
0336                STAR_:       
0336   C3 A7 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 C3 07               JP   num   
0341                HASH_:       
0341   C3 5A 07               JP   hash   
0344                PIPE_:       
0344   C3 AE 03               JP   pipe   
0347                CARET_:      
0347   C3 B4 06               JP   caret   
034A                COMMA_:      
034A   C3 AE 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 40 08               JP   dblquote   
0350                MINUS_:      
0350   C3 68 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 8A 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 93 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA 2D 08               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 09                  JR   lt1   
036D                LT_:         
036D   03                     INC   bc   
036E   0A                     LD   a,(bc)   
036F   FE 3C                  CP   "<"   
0371   CA 1D 08               JP   z,shiftLeft   
0374   E1                     POP   hl   
0375   D1                     POP   de   
0376                LT1:         
0376   FE 3D                  CP   "="   
0378   CA 9B 06               JP   z,lessthaneq   
037B   0B                     DEC   bc   
037C   C3 A0 06               JP   lessthan   
037F                SLASH_:      
037F   C3 BD 05               JP   slash   
0382                NOP_:        
0382   DD E9                  JP   (ix)   
0384                RPAREN_:      
0384   C3 F9 07               JP   rparen   
0387                             ;*******************************************************************
0387                             ; implementations
0387                             ;*******************************************************************
0387                PLUS:        
0387                ADD:         
0387   03                     INC   bc   
0388   0A                     LD   a,(bc)   
0389   FE 2B                  CP   "+"   ; ++ increment variable
038B   20 05                  JR   nz,add1   
038D   E1                     POP   hl   
038E   23                     INC   hl   
038F   C3 8C 04               JP   assign0   
0392                ADD1:        
0392   0B                     DEC   bc   
0393   D1                     POP   de   ; second term
0394   E1                     POP   hl   ; first term
0395   19                     ADD   hl,de   
0396                ADD3:        
0396   E5                     PUSH   hl   
0397   DD E9                  JP   (ix)   
0399                             ; @ addr
0399                             ; -- ptr
0399                AT:          
0399                ADDR:        
0399   ED 5B F2 23            LD   de,(vPointer)   
039D   21 F2 23               LD   hl,vPointer   
03A0   C3 CB 0A               JP   variable   
03A3                AMPER:       
03A3                AND:         
03A3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A4   E1                     POP   hl   
03A5   7B                     LD   a,e   
03A6   A5                     AND   l   
03A7   6F                     LD   l,a   
03A8   7A                     LD   a,d   
03A9   A4                     AND   h   
03AA                AND1:        
03AA   67                     LD   h,a   
03AB   E5                     PUSH   hl   
03AC   DD E9                  JP   (ix)   
03AE                PIPE:        
03AE                OR:          
03AE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AF   E1                     POP   hl   
03B0   7B                     LD   a,e   
03B1   B5                     OR   l   
03B2   6F                     LD   l,a   
03B3   7A                     LD   a,d   
03B4   B4                     OR   h   
03B5   18 F3                  JR   and1   
03B7                XOR:         
03B7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B8                XOR1:        
03B8   E1                     POP   hl   
03B9   7B                     LD   a,e   
03BA   AD                     XOR   l   
03BB   6F                     LD   l,a   
03BC   7A                     LD   a,d   
03BD   AC                     XOR   h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0   DD E9                  JP   (ix)   
03C2                INVERT:      ; Bitwise INVert the top member of the stack
03C2   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C5   18 F1                  JR   xor1   
03C7                             ; $a .. $z
03C7                             ; -- value
03C7                             ; returns value of arg
03C7                DOLLAR:      
03C7                ARG:         
03C7   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CA   FD 56 05               LD   d,(iy+5)   
03CD   EB                     EX   de,hl   
03CE   7D                     LD   a,l   ; arg_list* == null, skip
03CF   B4                     OR   h   
03D0   28 1C                  JR   z,arg0a   
03D2   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D3   2B                     DEC   hl   
03D4   7E                     LD   a,(hl)   
03D5   23                     INC   hl   
03D6   23                     INC   hl   
03D7   B7                     OR   a   
03D8   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DA   5F                     LD   e,a   ; e = a = num_args
03DB   03                     INC   bc   ; a = next char = dollar_name
03DC   0A                     LD   a,(bc)   
03DD   C5                     PUSH   bc   ; save IP
03DE   43                     LD   b,e   ; b = e = num_args
03DF   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E2   FD 56 03               LD   d,(iy+3)   
03E5                ARG0:        
03E5   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E6   1B                     DEC   de   
03E7   BE                     CP   (hl)   
03E8   28 09                  JR   z,arg1   
03EA   23                     INC   hl   ; hl = next arg_list*
03EB   10 F8                  DJNZ   arg0   
03ED   C1                     POP   bc   ; no match, restore IP
03EE                ARG0A:       
03EE   11 00 00               LD   de,0   ; return 0
03F1   18 08                  JR   arg1a   
03F3                ARG1:        
03F3   C1                     POP   bc   ; restore IP
03F4   EB                     EX   de,hl   ; hl = arg*
03F5   22 F2 23               LD   (vPointer),hl   ; store arg* in setter
03F8   5E                     LD   e,(hl)   
03F9   23                     INC   hl   
03FA   56                     LD   d,(hl)   ; de = arg
03FB                ARG1A:       
03FB   D5                     PUSH   de   ; push arg
03FC   DD E9                  JP   (ix)   
03FE                LBRACK:      
03FE                ARRAYSTART:      
03FE   11 00 00               LD   de,0   ; create stack frame
0401   D5                     PUSH   de   ; push null for IP
0402   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0405   FD 56 05               LD   d,(iy+5)   ; 
0408   D5                     PUSH   de   ; 
0409   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040C   FD 56 03               LD   d,(iy+3)   ; 
040F   D5                     PUSH   de   ; 
0410   FD E5                  PUSH   iy   ; push BP
0412   FD 21 00 00            LD   iy,0   ; BP = SP
0416   FD 39                  ADD   iy,sp   
0418   DD E9                  JP   (ix)   
041A                RBRACK:      
041A                ARRAYEND:      
041A   FD 54                  LD   d,iyh   ; de = BP
041C   FD 5D                  LD   e,iyl   
041E   ED 43 FE 23            LD   (vTemp1),bc   ; save IP
0422   62 6B                  LD   hl,de   ; hl = de = BP
0424   B7                     OR   a   
0425   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0427   CB 3C                  SRL   h   ; 
0429   CB 1D                  RR   l   
042B   44 4D                  LD   bc,hl   ; bc = count
042D   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0430   71                     LD   (hl),c   ; write num items in length word
0431   23                     INC   hl   
0432   70                     LD   (hl),b   
0433   23                     INC   hl   ; hl = array[0], bc = count
0434                             ; de = BP, hl = array[0], bc = count
0434   3E A4                  LD   a,TARRAY   ; write type tag
0436   77                     LD   (hl),a   
0437   23                     INC   hl   
0438   3E AA                  LD   a,TMAGIC   ; write magic byte
043A   77                     LD   (hl),a   
043B   23                     INC   hl   
043C                ARRAYEND1:      
043C   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043F   77                     LD   (hl),a   ; write lsb of array item
0440   23                     INC   hl   ; move to msb of array item
0441   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0444   3D                     DEC   a   
0445   28 05                  JR   z,arrayEnd2   
0447   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
044A   77                     LD   (hl),a   ; write msb of array item
044B   23                     INC   hl   ; move to next word in array
044C                ARRAYEND2:      
044C   FD 2B                  DEC   iy   ; move to next word on stack
044E   FD 2B                  DEC   iy   
0450   0B                     DEC   bc   ; dec items count
0451   79                     LD   a,c   ; if not zero loop
0452   B0                     OR   b   
0453   20 E7                  JR   nz,arrayEnd1   
0455   EB                     EX   de,hl   ; de = end of array, hl = BP
0456   F9                     LD   sp,hl   ; sp = BP
0457   E1                     POP   hl   ; de = end of array, hl = old BP
0458   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0459   FD 62                  LD   iyh,d   
045B   FD 6B                  LD   iyl,e   
045D   D1                     POP   de   ; pop arg_list (discard)
045E   D1                     POP   de   ; pop first_arg* (discard)
045F   D1                     POP   de   ; pop IP (discard)
0460   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-4]
0464   13                     INC   de   ; de = array[0]
0465   13                     INC   de   
0466   13                     INC   de   
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
046C   ED 4B FE 23            LD   bc,(vTemp1)   ; restore IP
0470   DD E9                  JP   (ix)   
0472                             ; index of an array, based on vDataWidth
0472                             ; array num -- value    ; also sets vPointer to address
0472                ARRINDEX:      
0472   E1                     POP   hl   ; hl = index
0473   D1                     POP   de   ; de = array
0474   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0477   3D                     DEC   a   
0478   28 01                  JR   z,arrIndex1   
047A                ARRINDEX0:      
047A   29                     ADD   hl,hl   ; if data width = 2 then double
047B                ARRINDEX1:      
047B   19                     ADD   hl,de   ; add addr
047C   22 F2 23               LD   (vPointer),hl   ; store address in setter
047F   16 00                  LD   d,0   
0481   5E                     LD   e,(hl)   
0482   B7                     OR   a   ; check data width again
0483   28 02                  JR   z,arrIndex2   
0485   23                     INC   hl   
0486   56                     LD   d,(hl)   
0487                ARRINDEX2:      
0487   D5                     PUSH   de   
0488   DD E9                  JP   (ix)   
048A                             ; value _oldValue --            ; uses address in vPointer
048A                ASSIGN:      
048A   E1                     POP   hl   ; discard last accessed value
048B   E1                     POP   hl   ; hl = new value
048C                ASSIGN0:      
048C   EB                     EX   de,hl   ; de = new value
048D                ASSIGNX:      
048D   2A F2 23               LD   hl,(vPointer)   
0490   73                     LD   (hl),e   
0491   3A E6 23               LD   a,(vDataWidth)   
0494   3D                     DEC   a   ; is it byte?
0495   28 02                  JR   z,assign1   
0497   23                     INC   hl   
0498   72                     LD   (hl),d   
0499                ASSIGN1:      
0499   DD E9                  JP   (ix)   
049B                             ; arg_list - parses input (ab:c)
049B                             ; names after the : represent uninitialised locals
049B                             ; return values are the state of the stack after the block ends
049B                COLON:       
049B                ARGLIST:      
049B   11 00 00               LD   de,0   ; d = count locals, e = count args ()
049E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
04A1   23                     INC   hl   ; skip length field to start
04A2   23                     INC   hl   
04A3   E5                     PUSH   hl   ; save start of arg_list
04A4   03                     INC   bc   ; point to next char
04A5                ARGLIST1:      
04A5   0A                     LD   a,(bc)   
04A6   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A8   20 03                  JR   nz,arglist1a   
04AA   14                     INC   d   ; non zero value local count acts as flag
04AB   18 10                  JR   arglist3   
04AD                ARGLIST1A:      
04AD   FE 41                  CP   "A"   ; < "A" terminates arg_list
04AF   38 0F                  JR   c,arglist4   
04B1   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04B3   30 0B                  JR   nc,arglist4   
04B5                ARGLIST2:      
04B5   77                     LD   (hl),a   
04B6   23                     INC   hl   
04B7   1C                     INC   e   ; increase arg count
04B8   AF                     XOR   a   
04B9   B2                     OR   d   
04BA   28 01                  JR   z,arglist3   
04BC   14                     INC   d   ; if d > 0 increase local count
04BD                ARGLIST3:      
04BD   03                     INC   bc   ; point to next char
04BE   18 E5                  JR   arglist1   
04C0                ARGLIST4:      
04C0   0B                     DEC   bc   
04C1   AF                     XOR   a   
04C2   B2                     OR   d   
04C3   28 01                  JR   z,arglist5   
04C5   15                     DEC   d   ; remove initial inc
04C6                ARGLIST5:      
04C6   23                     INC   hl   
04C7   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04CA   E1                     POP   hl   ; hl = start of arg_list
04CB   E5                     PUSH   hl   ; return start of arg_list
04CC   2B                     DEC   hl   ; write number of locals at start - 1
04CD   72                     LD   (hl),d   
04CE   2B                     DEC   hl   ; write number of args + locals at start - 2
04CF   73                     LD   (hl),e   
04D0   DD E9                  JP   (ix)   
04D2                LBRACE:      
04D2                BLOCKSTART:      
04D2   C5                     PUSH   bc   ; return pointer to first { of block
04D3   03                     INC   bc   
04D4   16 01                  LD   d,1   ; nesting: count first parenthesis
04D6                BLOCKSTART1:      ; Skip to end of definition
04D6   0A                     LD   a,(bc)   ; Get the next character
04D7   03                     INC   bc   ; Point to next character
04D8   FE 21                  CP   " " + 1   ; ignore whitespace
04DA   38 FA                  JR   c,blockStart1   
04DC   FE 29                  CP   ")"   
04DE   28 2D                  JR   z,blockStart4   
04E0   FE 7D                  CP   "}"   
04E2   28 29                  JR   z,blockStart4   
04E4   FE 5D                  CP   "]"   
04E6   28 25                  JR   z,blockStart4   
04E8   FE 28                  CP   "("   
04EA   28 16                  JR   z,blockStart2   
04EC   FE 7B                  CP   "{"   
04EE   28 12                  JR   z,blockStart2   
04F0   FE 5B                  CP   "["   
04F2   28 0E                  JR   z,blockStart2   
04F4   FE 27                  CP   "'"   
04F6   28 0D                  JR   z,blockStart3   
04F8   FE 60                  CP   "`"   
04FA   28 09                  JR   z,blockStart3   
04FC   FE 22                  CP   DQUOTE   
04FE   28 05                  JR   z,blockStart3   
0500   18 D4                  JR   blockStart1   
0502                BLOCKSTART2:      
0502   14                     INC   d   
0503   18 D1                  JR   blockStart1   
0505                BLOCKSTART3:      
0505   3E 80                  LD   a,$80   
0507   AA                     XOR   d   
0508   57                     LD   d,a   
0509   20 CB                  JR   nz,blockStart1   
050B   18 03                  JR   blockStart5   
050D                BLOCKSTART4:      
050D   15                     DEC   d   
050E   20 C6                  JR   nz,blockStart1   ; get the next element
0510                BLOCKSTART5:      
0510   60 69                  LD   hl,bc   ; hl = IP
0512   11 08 24               LD   de,HEAP   ; is IP pointing to object in heap
0515   B7                     OR   a   ; IP - HEAP
0516   ED 52                  SBC   hl,de   
0518   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
051A   28 1C                  JR   z,blockStart6   
051C   60 69                  LD   hl,bc   ; hl = IP
051E   D1                     POP   de   ; de = block*
051F   ED 43 FE 23            LD   (vTemp1),bc   ; save IP
0523   B7                     OR   a   ; bc = size
0524   ED 52                  SBC   hl,de   
0526   44 4D                  LD   bc,hl   
0528   EB                     EX   de,hl   ; hl = block* de = heap*
0529   ED 5B F0 23            LD   de,(vHeapPtr)   
052D   D5                     PUSH   de   ; return hblock*
052E   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0530   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0534   ED 4B FE 23            LD   bc,(vTemp1)   ; restore IP
0538                BLOCKSTART6:      
0538   0B                     DEC   bc   ; balanced, exit
0539   DD E9                  JP   (ix)   
053B                RBRACE:      
053B                BLOCKEND:      
053B   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
053E   FD 56 01               LD   d,(iy+1)   
0541   ED 53 FE 23            LD   (vTemp1),de   
0545   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0548   FD 56 07               LD   d,(iy+7)   
054B   ED 53 00 24            LD   (vTemp2),de   
054F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0552   FD 56 03               LD   d,(iy+3)   
0555   EB                     EX   de,hl   
0556   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0559   FD 56 01               LD   d,(iy+1)   
055C   13                     INC   de   ; for carry flag <=
055D   B7                     OR   a   
055E   ED 52                  SBC   hl,de   
0560   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0562   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0564   FD 5D                  LD   e,iyl   
0566   21 08 00               LD   hl,8   
0569   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056A   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
056B   18 0C                  JR   blockEnd2   
056D                BLOCKEND1:      ; same scope
056D   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0570   FD 56 03               LD   d,(iy+3)   
0573   EB                     EX   de,hl   
0574   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0576   FD 5D                  LD   e,iyl   
0578   EB                     EX   de,hl   
0579                BLOCKEND2:      
0579   44 4D                  LD   bc,hl   ; bc = hl = BP
057B   B7                     OR   a   ; hl = BP - SP = count
057C   ED 72                  SBC   hl,sp   
057E   7D                     LD   a,l   
057F   B4                     OR   h   
0580   28 09                  JR   z,blockEnd3   
0582   C5                     PUSH   bc   ; bc = count, hl = BP
0583   44 4D                  LD   bc,hl   
0585   E1                     POP   hl   
0586   2B                     DEC   hl   ; hl = BP-1
0587   1B                     DEC   de   ; de = args*-1
0588   ED B8                  LDDR      
058A   13                     INC   de   
058B                BLOCKEND3:      
058B   EB                     EX   de,hl   ; sp = de = new tos*
058C   F9                     LD   sp,hl   
058D   ED 4B 00 24            LD   bc,(vTemp2)   
0591   FD 2A FE 23            LD   iy,(vTemp1)   
0595   DD E9                  JP   (ix)   
0597                TICK:        
0597                CHAR:        
0597   21 00 00               LD   hl,0   ; if "" is empty or null
059A                CHAR1:       
059A   03                     INC   bc   ; point to next char
059B   0A                     LD   a,(bc)   
059C   FE 27                  CP   "'"   ; ' is the terminator
059E   28 09                  JR   z,char3   
05A0   FE 5C                  CP   $5c   ; \ is the escape
05A2   20 02                  JR   nz,char2   
05A4   03                     INC   bc   
05A5   0A                     LD   a,(bc)   
05A6                CHAR2:       
05A6   6F                     LD   l,a   
05A7   18 F1                  JR   char1   
05A9                CHAR3:       
05A9   E5                     PUSH   hl   
05AA   DD E9                  JP   (ix)   
05AC                BACKSLASH:      
05AC   DD E9                  JP   (ix)   
05AE                             ; , discard stack item
05AE                             ; x y -- x
05AE                COMMA:       
05AE                DISCARD:      
05AE   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05B0   FD 5D                  LD   e,iyl   
05B2   EB                     EX   de,hl   
05B3   B7                     OR   a   
05B4   ED 72                  SBC   hl,sp   
05B6   CB 7C                  BIT   7,h   
05B8   20 01                  JR   nz,discard1   
05BA   E1                     POP   hl   
05BB                DISCARD1:      
05BB   DD E9                  JP   (ix)   
05BD                SLASH:       
05BD   CD 1F 0B               CALL   jumpTable   
05C0   2F                     DB   "/"   
05C1   8E 08                  DW   comment   
05C3   61                     DB   "a"   
05C4   97 08                  DW   command_a   
05C6   62                     DB   "b"   
05C7   D1 08                  DW   command_b   
05C9   63                     DB   "c"   
05CA   D1 0A                  DW   chars   
05CC   64                     DB   "d"   
05CD   D9 0A                  DW   decimal   
05CF   66                     DB   "f"   
05D0   AE 06                  DW   false1   
05D2   68                     DB   "h"   
05D3   E1 0A                  DW   hexadecimal   
05D5   69                     DB   "i"   
05D6   FE 09                  DW   command_i   
05D8   6B                     DB   "k"   
05D9   F2 0A                  DW   key   
05DB   6E                     DB   "n"   
05DC   04 0B                  DW   numbers   
05DE   6F                     DB   "o"   
05DF   FB 0A                  DW   output   
05E1   70                     DB   "p"   
05E2   0A 0A                  DW   command_p   
05E4   73                     DB   "s"   
05E5   82 0A                  DW   size   
05E7   74                     DB   "t"   
05E8   A8 06                  DW   true1   
05EA   76                     DB   "v"   
05EB   8C 0A                  DW   command_v   
05ED   78                     DB   "x"   
05EE   B7 03                  DW   xor   
05F0   00                     DB   NUL   
05F1   F3 05                  DW   div   
05F3                DIV:         
05F3   D1                     POP   de   
05F4   E1                     POP   hl   
05F5   C5                     PUSH   bc   ; preserve the IP
05F6   44 4D                  LD   bc,hl   
05F8   CD 7A 06               CALL   divide   
05FB   EB                     EX   de,hl   
05FC   ED 53 F4 23            LD   (vRemain),de   
0600   C1                     POP   bc   
0601   C3 96 03               JP   add3   
0604                DOT:         
0604   CD 1F 0B               CALL   jumpTable   
0607   61                     DB   "a"   
0608   16 06                  DW   dotArray   
060A   68                     DB   "h"   
060B   2A 06                  DW   dotHex   
060D   73                     DB   "s"   
060E   3E 06                  DW   dotStr   
0610   63                     DB   "c"   
0611   52 06                  DW   dotChar   
0613   00                     DB   NUL   
0614   66 06                  DW   dotDec   
0616                DOTARRAY:      
0616   CD B4 06               CALL   go   
0619   00 00                  DW   NUL   ; null closure
061B   1F 06                  DW   $+4   
061D   11 0B                  DW   args1A0L   
061F   7B 24 61 2F 62 61 2F 70 62 7D 00 .CSTR   "{$a/ba/pb}"   ; block
062A                DOTHEX:      
062A   CD B4 06               CALL   go   
062D   00 00                  DW   NUL   ; null closure
062F   33 06                  DW   $+4   
0631   11 0B                  DW   args1A0L   
0633   7B 24 61 2F 62 68 2F 70 62 7D 00 .CSTR   "{$a/bh/pb}"   ; block
063E                DOTSTR:      
063E   CD B4 06               CALL   go   
0641   00 00                  DW   NUL   ; null closure
0643   47 06                  DW   $+4   
0645   11 0B                  DW   args1A0L   
0647   7B 24 61 2F 62 73 2F 70 62 7D 00 .CSTR   "{$a/bs/pb}"   ; block
0652                DOTCHAR:      
0652   CD B4 06               CALL   go   
0655   00 00                  DW   NUL   ; null closure
0657   5B 06                  DW   $+4   
0659   11 0B                  DW   args1A0L   
065B   7B 24 61 2F 62 63 2F 70 62 7D 00 .CSTR   "{$a/bc/pb}"   ; block
0666                DOTDEC:      
0666   CD B4 06               CALL   go   
0669   00 00                  DW   NUL   ; closure
066B   6F 06                  DW   $+4   
066D   11 0B                  DW   args1A0L   
066F   7B 24 61 2F 62 64 2F 70 62 7D 00 .CSTR   "{$a/bd/pb}"   ; block
067A                             ; division subroutine.
067A                             ; bc: divisor, de: dividend, hl: remainder
067A                DIVIDE:      
067A   21 00 00               LD   hl,0   ; zero the remainder
067D   3E 10                  LD   a,16   ; loop counter
067F                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
067F   CB 21                  SLA   c   
0681   CB 10                  RL   b   
0683   ED 6A                  ADC   hl,hl   
0685   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0687   38 03                  JR   c,divide2   
0689   0C                     INC   c   
068A   18 01                  JR   divide3   
068C                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
068C   19                     ADD   hl,de   
068D                DIVIDE3:      
068D   3D                     DEC   a   
068E   20 EF                  JR   nz,divide1   
0690   50 59                  LD   de,bc   ; result from bc to de
0692   C9                     RET      
0693                             ; hl = value1, de = value2
0693                             ; hl = result
0693                EQUALS:      
0693   B7                     OR   a   ; reset the carry flag
0694   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0696   28 10                  JR   z,true1   
0698   C3 AE 06               JP   false1   
069B                             ; hl = value1 de = value2
069B                             ; hl = result
069B                LESSTHANEQ:      
069B   B7                     OR   a   
069C   ED 52                  SBC   hl,de   
069E   18 05                  JR   lessthan1   
06A0                             ; hl = value1 de = value2
06A0                             ; hl = result
06A0                LESSTHAN:      
06A0   B7                     OR   a   
06A1   ED 52                  SBC   hl,de   
06A3   28 09                  JR   z,false1   
06A5                LESSTHAN1:      
06A5   FA AE 06               JP   m,false1   
06A8                TRUE1:       
06A8   21 FF FF               LD   hl,TRUE   
06AB   E5                     PUSH   hl   
06AC   DD E9                  JP   (ix)   
06AE                NULL1:       
06AE                FALSE1:      
06AE   21 00 00               LD   hl,FALSE   
06B1   E5                     PUSH   hl   
06B2   DD E9                  JP   (ix)   
06B4                             ; execute a block of code which ends with }
06B4                             ; creates a root scope if BP == stack
06B4                             ; else uses outer scope
06B4                CARET:       
06B4                GO:          
06B4   D1                     POP   de   ; de = block*
06B5                GO1:         
06B5   7B                     LD   a,e   ; if block* == null, exit
06B6   B2                     OR   d   
06B7   20 02                  JR   nz,go2   
06B9   DD E9                  JP   (ix)   
06BB                GO2:         
06BB   1A                     LD   a,(de)   
06BC   FE 7B                  CP   "{"   
06BE   28 07                  JR   z,goBlock1   
06C0   FE 28                  CP   "("   
06C2   C2 FA 06               JP   nz,goLambda   
06C5   13                     INC   de   ; de is the address to jump back to
06C6   D5                     PUSH   de   ; push de just before stack frame
06C7                GOBLOCK:      
06C7                GOBLOCK1:      
06C7   ED 53 FE 23            LD   (vTemp1),de   ; save de
06CB   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
06CE   FD 54                  LD   d,iyh   
06D0   FD 5D                  LD   e,iyl   
06D2   B7                     OR   a   ; if stack* == BP then this is the root_scope
06D3   ED 52                  SBC   hl,de   
06D5   ED 5B FE 23            LD   de,(vTemp1)   ; restore de
06D9   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
06DA   B4                     OR   h   
06DB   3E 00                  LD   a,0   
06DD   28 70                  JR   z,goLambda8   
06DF   C5                     PUSH   bc   ; push IP
06E0   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
06E3   FD 46 05               LD   b,(iy+5)   
06E6   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
06E9   FD 66 03               LD   h,(iy+3)   
06EC                GOBLOCK2:      
06EC   C5                     PUSH   bc   ; arg_list*
06ED   E5                     PUSH   hl   ; first_arg*
06EE   FD E5                  PUSH   iy   ; push BP
06F0   FD 21 00 00            LD   iy,0   ; BP = SP
06F4   FD 39                  ADD   iy,sp   
06F6   42 4B                  LD   bc,de   ; bc = de = block*-1
06F8   DD E9                  JP   (ix)   
06FA                GOLAMBDA:      ; execute lambda
06FA   EB                     EX   de,hl   ; hl = lambda*
06FB   5E                     LD   e,(hl)   ; de = partial_array*
06FC   23                     INC   hl   
06FD   56                     LD   d,(hl)   
06FE   23                     INC   hl   
06FF   7B                     LD   a,e   ; if partial_array* == null skip
0700   B2                     OR   d   
0701   28 25                  JR   z,goLambda3   
0703   ED 43 FE 23            LD   (vTemp1),bc   
0707   22 00 24               LD   (vTemp2),hl   ; save bc,hl
070A   EB                     EX   de,hl   ; hl = partial_array*
070B   2B                     DEC   hl   ; skip type byte
070C   2B                     DEC   hl   ; skip magic byte
070D   2B                     DEC   hl   ; bc = count
070E   46                     LD   b,(hl)   
070F   2B                     DEC   hl   
0710   4E                     LD   c,(hl)   
0711   23                     INC   hl   ; hl = array data*
0712   23                     INC   hl   
0713   23                     INC   hl   
0714   23                     INC   hl   
0715   18 06                  JR   goLambda2   ; push each item on stack
0717                GOLAMBDA1:      
0717   5E                     LD   e,(hl)   ; de = partial item
0718   23                     INC   hl   
0719   56                     LD   d,(hl)   
071A   23                     INC   hl   
071B   D5                     PUSH   de   ; push on stack
071C   0B                     DEC   bc   
071D                GOLAMBDA2:      
071D   79                     LD   a,c   ; if count != 0 then loop
071E   B0                     OR   b   
071F   20 F6                  JR   nz,goLambda1   
0721   ED 4B FE 23            LD   bc,(vTemp1)   ; restore bc
0725   2A 00 24               LD   hl,(vTemp2)   ; restore hl
0728                GOLAMBDA3:      
0728   5E                     LD   e,(hl)   ; de = block*
0729   23                     INC   hl   
072A   56                     LD   d,(hl)   
072B   23                     INC   hl   
072C   ED 53 FE 23            LD   (vTemp1),de   ; save block*
0730   5E                     LD   e,(hl)   ; de = arg_list*
0731   23                     INC   hl   
0732   56                     LD   d,(hl)   
0733   23                     INC   hl   
0734   EB                     EX   de,hl   ; hl = arg_list*
0735   ED 5B FE 23            LD   de,(vTemp1)   ; restore de = block*
0739   7D                     LD   a,l   ; if arg_list* == null a = 0
073A   B4                     OR   h   
073B   20 03                  JR   nz,goLambda4   
073D   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
073E   18 0F                  JR   goLambda8   
0740                GOLAMBDA4:      ; allocate locals
0740   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0741   7E                     LD   a,(hl)   
0742   18 03                  JR   goLambda6   
0744                GOLAMBDA5:      ; loop
0744   3B                     DEC   sp   
0745   3B                     DEC   sp   
0746   3D                     DEC   a   
0747                GOLAMBDA6:      
0747   B7                     OR   a   
0748   20 FA                  JR   nz,goLambda5   ; end loop
074A                GOLAMBDA7:      
074A   2B                     DEC   hl   ; a = num_args* x 2
074B   7E                     LD   a,(hl)   
074C   23                     INC   hl   
074D   23                     INC   hl   
074E   87                     ADD   a,a   ; a *= 2
074F                GOLAMBDA8:      
074F   C5                     PUSH   bc   ; push IP
0750   44 4D                  LD   bc,hl   
0752   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0755   85                     ADD   a,l   
0756   6F                     LD   l,a   
0757   39                     ADD   hl,sp   
0758   18 92                  JR   goBlock2   
075A                HASH:        
075A                HEXNUM:      
075A   21 00 00               LD   hl,0   ; Clear hl to accept the number
075D                HEXNUM1:      
075D   03                     INC   bc   
075E   0A                     LD   a,(bc)   ; Get the character which is a numeral
075F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0761   28 02                  JR   z,hexnum2   ; no a decimal
0763   D6 07                  SUB   7   ; sub 7  to make $a - $F
0765                HEXNUM2:      
0765   D6 30                  SUB   $30   ; form decimal digit
0767   DA E5 07               JP   c,num2   
076A   FE 10                  CP   $0F+1   
076C   D2 E5 07               JP   nc,num2   
076F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0770   29                     ADD   hl,hl   ; 4X
0771   29                     ADD   hl,hl   ; 8X
0772   29                     ADD   hl,hl   ; 16X
0773   85                     ADD   a,l   ; add into bottom of hl
0774   6F                     LD   l,a   
0775   18 E6                  JR   hexnum1   
0777                UPCASE:      
0777   0A                     LD   a,(bc)   ; a = identifier char
0778   D6 41                  SUB   "A"   ; "A" = 0
077A   18 05                  JR   ident1   
077C                LOWCASE:      
077C   0A                     LD   a,(bc)   
077D   D6 61                  SUB   "a"   
077F   C6 1A                  ADD   a,26   
0781                IDENT1:      
0781   87                     ADD   a,a   ; l = a * 2
0782   6F                     LD   l,a   
0783   26 23                  LD   h,msb(vars)   
0785   22 F2 23               LD   (vPointer),hl   ; store address in setter
0788   5E                     LD   e,(hl)   
0789   23                     INC   hl   
078A   56                     LD   d,(hl)   
078B   D5                     PUSH   de   
078C   DD E9                  JP   (ix)   
078E                             ; if
078E                             ; condition then -- value
078E                QUESTION:      
078E                IF:          
078E   03                     INC   bc   
078F   0A                     LD   a,(bc)   
0790   FE 3F                  CP   "?"   
0792   28 06                  JR   z,ifte   
0794   0B                     DEC   bc   
0795   11 00 00               LD   de,NUL   ; NUL pointer for else
0798   18 01                  JR   ifte1   
079A                             ; ifte
079A                             ; condition then else -- value
079A                IFTE:        
079A   D1                     POP   de   ; de = else
079B                IFTE1:       
079B   E1                     POP   hl   ; hl = then
079C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
079D   7C                     LD   a,h   
079E   B5                     OR   l   
079F   E1                     POP   hl   ; hl = then
07A0   CA B5 06               JP   z,go1   ; if z de = else
07A3   EB                     EX   de,hl   ; condition = false, de = then
07A4   C3 B5 06               JP   go1   
07A7                STAR:        
07A7                MUL:         
07A7   D1                     POP   de   ; get first value
07A8   E1                     POP   hl   
07A9                MUL2:        
07A9   C5                     PUSH   bc   ; Preserve the IP
07AA   44 4D                  LD   bc,hl   ; bc = 2nd value
07AC   21 00 00               LD   hl,0   
07AF   3E 10                  LD   a,16   
07B1                MUL3:        
07B1   29                     ADD   hl,hl   
07B2   CB 13                  RL   e   
07B4   CB 12                  RL   d   
07B6   30 04                  JR   nc,$+6   
07B8   09                     ADD   hl,bc   
07B9   30 01                  JR   nc,$+3   
07BB   13                     INC   de   
07BC   3D                     DEC   a   
07BD   20 F2                  JR   nz,mul3   
07BF   C1                     POP   bc   ; Restore the IP
07C0   C3 96 03               JP   add3   
07C3                NUM:         
07C3   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
07C6   0A                     LD   a,(bc)   ; Get numeral or -
07C7   FE 2D                  CP   "-"   
07C9   20 01                  JR   nz,num0   
07CB   03                     INC   bc   ; move to next char, no flags affected
07CC                NUM0:        
07CC   08                     EX   af,af'   ; save zero flag = 0 for later
07CD                NUM1:        
07CD   0A                     LD   a,(bc)   ; read digit
07CE   D6 30                  SUB   "0"   ; less than 0?
07D0   38 13                  JR   c,num2   ; not a digit, exit loop
07D2   FE 0A                  CP   10   ; greater that 9?
07D4   30 0F                  JR   nc,num2   ; not a digit, exit loop
07D6   03                     INC   bc   ; inc IP
07D7   54 5D                  LD   de,hl   ; multiply hl * 10
07D9   29                     ADD   hl,hl   
07DA   29                     ADD   hl,hl   
07DB   19                     ADD   hl,de   
07DC   29                     ADD   hl,hl   
07DD   85                     ADD   a,l   ; add digit in a to hl
07DE   6F                     LD   l,a   
07DF   3E 00                  LD   a,0   
07E1   8C                     ADC   a,h   
07E2   67                     LD   h,a   
07E3   18 E8                  JR   num1   
07E5                NUM2:        
07E5   0B                     DEC   bc   
07E6   08                     EX   af,af'   ; restore zero flag
07E7   20 07                  JR   nz,num3   
07E9   EB                     EX   de,hl   ; negate the value of hl
07EA   21 00 00               LD   hl,0   
07ED   B7                     OR   a   ; jump to sub2
07EE   ED 52                  SBC   hl,de   
07F0                NUM3:        
07F0   E5                     PUSH   hl   ; Put the number on the stack
07F1   DD E9                  JP   (ix)   ; and process the next character
07F3                UNDERSCORE:      
07F3                REMAIN:      
07F3   2A F4 23               LD   hl,(vRemain)   
07F6   E5                     PUSH   hl   
07F7   DD E9                  JP   (ix)   
07F9                RPAREN:      
07F9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07FC   FD 46 09               LD   b,(iy+9)   
07FF   DD E9                  JP   (ix)   
0801                             ; arg_list* block* -- ptr
0801                SEMICOLON:      
0801   D1                     POP   de   ; de = block* hl = heap*
0802   2A F0 23               LD   hl,(vHeapPtr)   
0805   AF                     XOR   a   
0806   77                     LD   (hl),a   ; compile null partial_array*
0807   23                     INC   hl   
0808   77                     LD   (hl),a   
0809   23                     INC   hl   
080A   73                     LD   (hl),e   ; compile block*
080B   23                     INC   hl   
080C   72                     LD   (hl),d   
080D   23                     INC   hl   
080E   D1                     POP   de   ; de = block*
080F   73                     LD   (hl),e   ; compile arg_list*
0810   23                     INC   hl   
0811   72                     LD   (hl),d   
0812   23                     INC   hl   
0813   ED 5B F0 23            LD   de,(vHeapPtr)   ; return lambda*
0817   D5                     PUSH   de   
0818   22 F0 23               LD   (vHeapPtr),hl   ; heap* += 4
081B   DD E9                  JP   (ix)   
081D                             ; shiftLeft
081D                             ; value count -- value2          shift left count places
081D                SHIFTLEFT:      
081D   50 59                  LD   de,bc   ; save IP
081F   C1                     POP   bc   ; bc = count
0820   41                     LD   b,c   ; b = loop counter
0821   E1                     POP   hl   
0822   04                     INC   b   ; test for counter=0 case
0823   18 01                  JR   shiftLeft2   
0825                SHIFTLEFT1:      
0825   29                     ADD   hl,hl   ; left shift hl
0826                SHIFTLEFT2:      
0826   10 FD                  DJNZ   shiftLeft1   
0828   E5                     PUSH   hl   
0829   42 4B                  LD   bc,de   ; restore IP
082B   DD E9                  JP   (ix)   
082D                             ; shiftRight
082D                             ; value count -- value2          shift left count places
082D                SHIFTRIGHT:      
082D   50 59                  LD   de,bc   ; save IP
082F   C1                     POP   bc   ; bc = count
0830   41                     LD   b,c   ; b = loop counter
0831   E1                     POP   hl   
0832   04                     INC   b   ; test for counter=0 case
0833   18 04                  JR   shiftRight2   
0835                SHIFTRIGHT1:      
0835   CB 3C                  SRL   h   ; right shift hl
0837   CB 1D                  RR   l   
0839                SHIFTRIGHT2:      
0839   10 FA                  DJNZ   shiftRight1   
083B   E5                     PUSH   hl   
083C   42 4B                  LD   bc,de   ; restore IP
083E   DD E9                  JP   (ix)   
0840                             ; string
0840                             ; -- ptr                        ; points to start of string chars,
0840                             ; length is stored at start - 2 bytes
0840                DBLQUOTE:      
0840                STRING:      
0840   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0843   23                     INC   hl   ; skip length field to start
0844   23                     INC   hl   
0845   E5                     PUSH   hl   ; save start of string
0846   03                     INC   bc   ; point to next char
0847   18 03                  JR   string2   
0849                STRING1:      
0849   77                     LD   (hl),a   
084A   23                     INC   hl   ; increase count
084B   03                     INC   bc   ; point to next char
084C                STRING2:      
084C   0A                     LD   a,(bc)   
084D   FE 22                  CP   DQUOTE   ; " is the string terminator
084F   28 04                  JR   z,string3   
0851   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0853   20 F4                  JR   nz,string1   
0855                STRING3:      
0855   AF                     XOR   a   ; write NUL to terminate string
0856   77                     LD   (hl),a   ; hl = end of string
0857   23                     INC   hl   
0858   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
085B   2B                     DEC   hl   ; hl = end of string without terminator
085C   D1                     POP   de   ; de = start of string
085D   D5                     PUSH   de   ; return start of string
085E   B7                     OR   a   ; hl = length bytes, de = start of string
085F   ED 52                  SBC   hl,de   
0861   EB                     EX   de,hl   
0862   2B                     DEC   hl   ; write length bytes to length field at start - 2
0863   72                     LD   (hl),d   
0864   2B                     DEC   hl   
0865   73                     LD   (hl),e   
0866   DD E9                  JP   (ix)   
0868                MINUS:       ; negative sign or subtract
0868   03                     INC   bc   ; check if sign of a number
0869   0A                     LD   a,(bc)   
086A   0B                     DEC   bc   
086B   FE 30                  CP   "0"   
086D   38 05                  JR   c,sub   
086F   FE 3A                  CP   "9"+1   
0871   DA 3E 03               JP   c,num_   
0874                SUB:         ; Subtract the value 2nd on stack from top of stack
0874   03                     INC   bc   
0875   FE 2D                  CP   "-"   
0877   20 05                  JR   nz,sub1   
0879   E1                     POP   hl   
087A   2B                     DEC   hl   
087B   C3 8C 04               JP   assign0   
087E                SUB1:        
087E   0B                     DEC   bc   
087F   D1                     POP   de   
0880   E1                     POP   hl   
0881   B7                     OR   a   
0882   ED 52                  SBC   hl,de   
0884   C3 96 03               JP   add3   
0887                ERROR1:      
0887   21 01 00               LD   hl,1   ; error 1: unknown command
088A   E5                     PUSH   hl   
088B   C3 52 0C               JP   error   
088E                COMMENT:      
088E   03                     INC   bc   ; point to next char
088F   0A                     LD   a,(bc)   
0890   FE 20                  CP   " "   ; terminate on any char less than SP
0892   30 FA                  JR   nc,comment   
0894   0B                     DEC   bc   
0895   DD E9                  JP   (ix)   
0897                COMMAND_A:      
0897   CD 1F 0B               CALL   jumpTable   
089A   62                     DB   "b"   
089B   A3 08                  DW   absolute   
089D   64                     DB   "d"   
089E   B0 08                  DW   addrOf   
08A0   00                     DB   NUL   
08A1   87 08                  DW   error1   
08A3                             ; /ab absolute
08A3                             ; num -- num
08A3                ABSOLUTE:      
08A3   E1                     POP   hl   
08A4   CB 7C                  BIT   7,h   
08A6   C8                     RET   z   
08A7   AF                     XOR   a   
08A8   95                     SUB   l   
08A9   6F                     LD   l,a   
08AA   9F                     SBC   a,a   
08AB   94                     SUB   h   
08AC   67                     LD   h,a   
08AD   E5                     PUSH   hl   
08AE   DD E9                  JP   (ix)   
08B0                             ; /ad addrOf
08B0                             ; char -- addr
08B0                ADDROF:      
08B0   E1                     POP   hl   ; a = char
08B1   7D                     LD   a,l   
08B2   FE 7B                  CP   "z"+1   ; if a > z then exit
08B4   30 19                  JR   nc,addrOf2   
08B6   D6 41                  SUB   "A"   ; a - 65
08B8   38 15                  JR   c,addrOf2   ; if < A then exit
08BA   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
08BC   38 06                  JR   c,addrOf1   
08BE   D6 06                  SUB   "a"-("Z"+1)   
08C0   FE 1A                  CP   "Z"-"A"+1   
08C2   38 0B                  JR   c,addrOf2   ; if < a then exit
08C4                ADDROF1:      
08C4   87                     ADD   a,a   ; double a
08C5   21 00 23               LD   hl,VARS   ; hl = VARS + a
08C8   85                     ADD   a,l   
08C9   6F                     LD   l,a   
08CA   3E 00                  LD   a,0   
08CC   8C                     ADC   a,h   
08CD   67                     LD   h,a   
08CE   E5                     PUSH   hl   
08CF                ADDROF2:      
08CF   DD E9                  JP   (ix)   
08D1                COMMAND_B:      
08D1   CD 1F 0B               CALL   jumpTable   
08D4   61                     DB   "a"   
08D5   EC 08                  DW   bufferArray   
08D7   63                     DB   "c"   
08D8   20 09                  DW   bufferChar   
08DA   64                     DB   "d"   
08DB   2B 09                  DW   bufferDec   
08DD   68                     DB   "h"   
08DE   8B 09                  DW   bufferHex   
08E0   72                     DB   "r"   
08E1   BA 09                  DW   break   
08E3   73                     DB   "s"   
08E4   D4 09                  DW   bufferString   
08E6   78                     DB   "x"   
08E7   EB 09                  DW   bufferXSpaces   
08E9   00                     DB   NUL   
08EA   87 08                  DW   error1   
08EC                             ; /ba buffer array
08EC                             ; array* --
08EC                BUFFERARRAY:      
08EC   CD B4 06               CALL   go   
08EF   00 00                  DW   NUL   ; NUL closure
08F1   F5 08                  DW   $+4   
08F3   1C 0B                  DW   args1A2L   
08F5   7B 24 61 2F 73 24 63 3D 20 30 24 62 3D 28 20 24 61 24 62 25 2F 62 64 20 24 62 2B 2B 20 24 62 20 24 63 3C 2F 62 72 20 29 5E 7D 00 .CSTR   "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}"   ; block
0920                             ; /bc buffer char
0920                             ; char --
0920                BUFFERCHAR:      
0920   D1                     POP   de   ; e = char
0921   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
0924   73                     LD   (hl),e   ; e -> buffer*
0925   23                     INC   hl   ; buffer*++
0926   22 EC 23               LD   (vBufPtr),hl   ; save buffer*' in pointer
0929   DD E9                  JP   (ix)   
092B                             ; /bd buffer decimal
092B                             ; value --                      ; length can be used to rewind buffer*
092B                BUFFERDEC:      
092B   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
092F   D9                     EXX      
0930   E1                     POP   hl   ; hl = value
0931   CD 42 09               CALL   bufferDec0   
0934   D9                     EXX      ; de = buffer*' bc = IP
0935   3E 20                  LD   a," "   ; append space to buffer
0937   12                     LD   (de),a   
0938   13                     INC   de   
0939   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
093C   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0940   DD E9                  JP   (ix)   
0942                             ; hl = value
0942                             ; de' = buffer*
0942                             ; a, bc, de, hl destroyed
0942                BUFFERDEC0:      
0942   CB 7C                  BIT   7,h   
0944   28 0C                  JR   z,bufferDec1   
0946   D9                     EXX      
0947   3E 2D                  LD   a,"-"   
0949   12                     LD   (de),a   
094A   13                     INC   de   
094B   D9                     EXX      
094C   AF                     XOR   a   
094D   95                     SUB   l   
094E   6F                     LD   l,a   
094F   9F                     SBC   a,a   
0950   94                     SUB   h   
0951   67                     LD   h,a   
0952                BUFFERDEC1:      
0952   0E 00                  LD   c,0   ; leading zeros flag = false
0954   11 F0 D8               LD   de,-10000   
0957   CD 72 09               CALL   bufferDec2   
095A   11 18 FC               LD   de,-1000   
095D   CD 72 09               CALL   bufferDec2   
0960   11 9C FF               LD   de,-100   
0963   CD 72 09               CALL   bufferDec2   
0966   1E F6                  LD   e,-10   
0968   CD 72 09               CALL   bufferDec2   
096B   0C                     INC   c   ; flag = true for at least digit
096C   1E FF                  LD   e,-1   
096E   CD 72 09               CALL   bufferDec2   
0971   C9                     RET      
0972                BUFFERDEC2:      
0972   06 2F                  LD   b,"0"-1   
0974                BUFFERDEC3:      
0974   04                     INC   b   
0975   19                     ADD   hl,de   
0976   38 FC                  JR   c,bufferDec3   
0978   ED 52                  SBC   hl,de   
097A   3E 30                  LD   a,"0"   
097C   B8                     CP   b   
097D   20 05                  JR   nz,bufferDec4   
097F   AF                     XOR   a   
0980   B1                     OR   c   
0981   C8                     RET   z   
0982   18 01                  JR   bufferDec5   
0984                BUFFERDEC4:      
0984   0C                     INC   c   
0985                BUFFERDEC5:      
0985   78                     LD   a,b   
0986   D9                     EXX      
0987   12                     LD   (de),a   
0988   13                     INC   de   
0989   D9                     EXX      
098A   C9                     RET      
098B                             ; /bh buffer hex
098B                             ; value --                      ; length can be used to rewind buffer*
098B                BUFFERHEX:      
098B   E1                     POP   hl   ; hl = value
098C   ED 5B EC 23            LD   de,(vBufPtr)   
0990   3E 23                  LD   a,"#"   ; # prefix
0992   12                     LD   (de),a   
0993   13                     INC   de   
0994   7C                     LD   a,h   
0995   CD A6 09               CALL   bufferHex1   
0998   7D                     LD   a,l   
0999   CD A6 09               CALL   bufferHex1   
099C   3E 20                  LD   a," "   ; append space to buffer
099E   12                     LD   (de),a   
099F   13                     INC   de   
09A0   ED 53 EC 23            LD   (vBufPtr),de   
09A4   DD E9                  JP   (ix)   
09A6                BUFFERHEX1:      
09A6   F5                     PUSH   af   
09A7   1F                     RRA      
09A8   1F                     RRA      
09A9   1F                     RRA      
09AA   1F                     RRA      
09AB   CD AF 09               CALL   bufferHex2   
09AE   F1                     POP   af   
09AF                BUFFERHEX2:      
09AF   E6 0F                  AND   0x0F   
09B1   C6 90                  ADD   a,0x90   
09B3   27                     DAA      
09B4   CE 40                  ADC   a,0x40   
09B6   27                     DAA      
09B7   12                     LD   (de),a   
09B8   13                     INC   de   
09B9   C9                     RET      
09BA                             ; /br break from loop
09BA                             ; --
09BA                BREAK:       
09BA   E1                     POP   hl   
09BB   7D                     LD   a,l   
09BC   B4                     OR   h   
09BD   28 02                  JR   z,break1   
09BF   DD E9                  JP   (ix)   
09C1                BREAK1:      
09C1   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09C3   FD 54                  LD   d,iyh   
09C5   21 08 00               LD   hl,8   
09C8   19                     ADD   hl,de   
09C9   23                     INC   hl   
09CA   23                     INC   hl   
09CB   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09CE   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09D1   C3 3B 05               JP   blockEnd   
09D4                             ; /bs buffered string
09D4                             ; string* --
09D4                BUFFERSTRING:      
09D4   E1                     POP   hl   ; hl = string*
09D5   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
09D9   18 03                  JR   bufferString1   
09DB                BUFFERSTRING0:      
09DB   12                     LD   (de),a   ; a -> buffer*
09DC   13                     INC   de   ; string*++ buffer++
09DD   23                     INC   hl   
09DE                BUFFERSTRING1:      
09DE   7E                     LD   a,(hl)   ; a <- string*
09DF   B7                     OR   a   ; if NUL exit loop
09E0   20 F9                  JR   nz,bufferString0   
09E2   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
09E5   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
09E9   DD E9                  JP   (ix)   
09EB                             ; /bx buffered x spaces
09EB                             ; length --
09EB                BUFFERXSPACES:      
09EB   D1                     POP   de   ; bc = length
09EC   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
09EF   18 04                  JR   bufferXSpaces2   
09F1                BUFFERXSPACES1:      
09F1   36 20                  LD   (hl)," "   
09F3   23                     INC   hl   
09F4   1B                     DEC   de   
09F5                BUFFERXSPACES2:      
09F5   7B                     LD   a,e   
09F6   B2                     OR   d   
09F7   20 F8                  JR   nz,bufferXSpaces1   
09F9   22 EC 23               LD   (vBufPtr),hl   ; save buffer*'
09FC   DD E9                  JP   (ix)   
09FE                COMMAND_I:      
09FE   CD 1F 0B               CALL   jumpTable   
0A01   6E                     DB   "n"   
0A02   E7 0A                  DW   input   
0A04   76                     DB   "v"   
0A05   C2 03                  DW   invert   
0A07   00                     DB   NUL   
0A08   87 08                  DW   error1   
0A0A                COMMAND_P:      
0A0A   CD 1F 0B               CALL   jumpTable   
0A0D   61                     DB   "a"   
0A0E   1C 0A                  DW   partial   
0A10   62                     DB   "b"   
0A11   3C 0A                  DW   printBuffer   
0A13   63                     DB   "c"   
0A14   6E 0A                  DW   printChars   
0A16   6B                     DB   "k"   
0A17   80 0A                  DW   printStack   
0A19   00                     DB   NUL   
0A1A   87 08                  DW   error1   
0A1C                             ; partial
0A1C                             ; array* lambda* -- lambda1*
0A1C                PARTIAL:      
0A1C   E1                     POP   hl   ; h1 = lambda*
0A1D   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0A21   ED 43 FE 23            LD   (vTemp1),bc   ; save IP
0A25   01 06 00               LD   bc,6   ; bc = count
0A28   ED B0                  LDIR      ; clone lambda
0A2A   ED 4B FE 23            LD   bc,(vTemp1)   ; restore IP
0A2E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0A31   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += 6
0A35   D1                     POP   de   ; de = array*
0A36   E5                     PUSH   hl   ; return partial_array*
0A37   73                     LD   (hl),e   ; compile array*
0A38   23                     INC   hl   
0A39   72                     LD   (hl),d   
0A3A   DD E9                  JP   (ix)   
0A3C                             ; /pb printBuffer
0A3C                             ; --
0A3C                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A3C                PRINTBUFFER:      
0A3C   CD B4 06               CALL   go   
0A3F   00 00                  DW   NUL   ; NUL closure
0A41   45 0A                  DW   $+4   
0A43   11 0B                  DW   args1A0L   
0A45   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A5F                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0A5F                FLUSHBUFFER:      
0A5F   2A EC 23               LD   hl,(vBufPtr)   
0A62   11 00 22               LD   de,BUF   
0A65   ED 53 EC 23            LD   (vBufPtr),de   
0A69   B7                     OR   a   
0A6A   ED 52                  SBC   hl,de   
0A6C   18 0D                  JR   printChars2   
0A6E                             ; printChars
0A6E                             ; char* len --
0A6E                PRINTCHARS:      
0A6E   E1                     POP   hl   ; hl = count
0A6F   D1                     POP   de   ; de = char*
0A70   CD 7B 0A               CALL   printChars2   
0A73   DD E9                  JP   (ix)   
0A75                PRINTCHARS1:      
0A75   1A                     LD   a,(de)   ; print char at char*
0A76   CD 85 00               CALL   putchar   
0A79   13                     INC   de   ; char*++
0A7A   2B                     DEC   hl   ; count--
0A7B                PRINTCHARS2:      
0A7B   7D                     LD   a,l   ; count == 0?
0A7C   B4                     OR   h   
0A7D   C8                     RET   z   
0A7E   18 F5                  JR   printChars1   ; if not loop
0A80                             ; /pk print stack
0A80                             ; --
0A80                PRINTSTACK:      
0A80                             ;     ld (vTemp1),bc
0A80                             ;     call printStr
0A80                             ;     .cstr "=> "
0A80                             ;     ld hl,STACK
0A80                             ;     sbc hl,sp
0A80                             ;     srl h
0A80                             ;     rr l
0A80                             ;     ld bc,hl
0A80                             ;     ld hl,STACK
0A80                             ;     jr printStack2
0A80                             ; printStack1:
0A80                             ;     dec bc
0A80                             ;     dec hl
0A80                             ;     ld d,(hl)
0A80                             ;     dec hl
0A80                             ;     ld e,(hl)
0A80                             ;     ex de,hl
0A80                             ;     call prthex
0A80                             ;     ex de,hl
0A80                             ;     ld a," "
0A80                             ;     call putchar
0A80                             ; printStack2:
0A80                             ;     ld a,c
0A80                             ;     or b
0A80                             ;     jr nz,printStack1
0A80                             ;     call prompt
0A80                             ;     ld bc,(vTemp1)
0A80   DD E9                  JP   (ix)   
0A82                SIZE:        
0A82   E1                     POP   hl   
0A83   2B                     DEC   hl   ; skip magic byte
0A84   2B                     DEC   hl   ; skip type tag
0A85   2B                     DEC   hl   ; msb size
0A86   56                     LD   d,(hl)   
0A87   2B                     DEC   hl   ; lsb size
0A88   5E                     LD   e,(hl)   
0A89   D5                     PUSH   de   
0A8A   DD E9                  JP   (ix)   
0A8C                COMMAND_V:      
0A8C   CD 1F 0B               CALL   jumpTable   
0A8F   62                     DB   "b"   
0A90   B0 0A                  DW   varBufPtr   
0A92   68                     DB   "h"   
0A93   B9 0A                  DW   varHeapPtr   
0A95   74                     DB   "t"   
0A96   C2 0A                  DW   varTIBPtr   
0A98   42                     DB   "B"   
0A99   A1 0A                  DW   constBufStart   
0A9B   54                     DB   "T"   
0A9C   AB 0A                  DW   constTIBStart   
0A9E   00                     DB   NUL   
0A9F   87 08                  DW   error1   
0AA1                CONSTBUFSTART:      
0AA1   11 00 22               LD   de,BUF   
0AA4   18 28                  JR   constant   
0AA6                CONSTHEAPSTART:      
0AA6   11 08 24               LD   de,HEAP   
0AA9   18 23                  JR   constant   
0AAB                CONSTTIBSTART:      
0AAB   11 00 21               LD   de,TIB   
0AAE   18 1E                  JR   constant   
0AB0                VARBUFPTR:      
0AB0   ED 5B EC 23            LD   de,(vBufPtr)   
0AB4   21 EC 23               LD   hl,vBufPtr   
0AB7   18 12                  JR   variable   
0AB9                VARHEAPPTR:      
0AB9   ED 5B F0 23            LD   de,(vHeapPtr)   
0ABD   21 F0 23               LD   hl,vHeapPtr   
0AC0   18 09                  JR   variable   
0AC2                VARTIBPTR:      
0AC2   ED 5B EA 23            LD   de,(vTIBPtr)   
0AC6   21 EA 23               LD   hl,vTIBPtr   
0AC9   18 00                  JR   variable   
0ACB                VARIABLE:      
0ACB   22 F2 23               LD   (vPointer),hl   
0ACE                CONSTANT:      
0ACE   D5                     PUSH   de   
0ACF   DD E9                  JP   (ix)   
0AD1                CHARS:       
0AD1   21 01 00               LD   hl,1   
0AD4                CHARS1:      
0AD4   22 E6 23               LD   (vDataWidth),hl   
0AD7   DD E9                  JP   (ix)   
0AD9                DECIMAL:      
0AD9   21 0A 00               LD   hl,10   
0ADC                DECIMAL1:      
0ADC   22 E8 23               LD   (vNumBase),hl   
0ADF   DD E9                  JP   (ix)   
0AE1                HEXADECIMAL:      
0AE1   21 10 00               LD   hl,16   
0AE4   C3 DC 0A               JP   decimal1   
0AE7                             ; Z80 port input
0AE7                             ; port -- value
0AE7                INPUT:       
0AE7   E1                     POP   hl   
0AE8   59                     LD   e,c   ; save IP
0AE9   4D                     LD   c,l   
0AEA   ED 68                  IN   l,(c)   
0AEC   26 00                  LD   h,0   
0AEE   4B                     LD   c,e   ; restore IP
0AEF   E5                     PUSH   hl   
0AF0   DD E9                  JP   (ix)   
0AF2                KEY:         
0AF2   CD 81 00               CALL   getchar   
0AF5   26 00                  LD   h,0   
0AF7   6F                     LD   l,a   
0AF8   E5                     PUSH   hl   
0AF9   DD E9                  JP   (ix)   
0AFB                             ; Z80 port output
0AFB                             ; value port --
0AFB                OUTPUT:      
0AFB   E1                     POP   hl   
0AFC   59                     LD   e,c   ; save IP
0AFD   4D                     LD   c,l   
0AFE   E1                     POP   hl   
0AFF   ED 69                  OUT   (c),l   
0B01   4B                     LD   c,e   ; restore IP
0B02   DD E9                  JP   (ix)   
0B04                NUMBERS:      
0B04   21 02 00               LD   hl,2   
0B07   C3 D4 0A               JP   chars1   
0B0A                             ; 
0B0A                             ; 
0B0A                             ; 
0B0A                             ; 
0B0A                FILTER:      
0B0A                MAP:         
0B0A                SCAN:        
0B0A   DD E9                  JP   (ix)   
0B0C                             ;*******************************************************************
0B0C                             ; reusable arglists
0B0C                             ;*******************************************************************
0B0C                ARGS0A1L_:      ; zero args one local
0B0C   01                     DB   1   ; num args + locals
0B0D   01                     DB   1   ; num locals
0B0E                ARGS0A1L:      
0B0E   61                     DB   "a"   
0B0F                ARGS1A0L_:      ; one arg zero locals
0B0F   01                     DB   1   ; num args + locals
0B10   00                     DB   0   ; num locals
0B11                ARGS1A0L:      
0B11   61                     DB   "a"   
0B12                ARGS1A1L_:      ; one arg one local
0B12   02                     DB   2   ; num args + locals
0B13   01                     DB   1   ; num locals
0B14                ARGS1A1L:      
0B14   61 62                  DB   "ab"   
0B16                ARGS2A0L_:      ; two args zero locals
0B16   02                     DB   2   ; num args + locals
0B17   00                     DB   0   ; num locals
0B18                ARGS2A0L:      
0B18   61 62                  DB   "ab"   
0B1A                ARGS1A2L_:      ; one arg two locals
0B1A   03                     DB   3   ; num args + locals
0B1B   02                     DB   2   ; num locals
0B1C                ARGS1A2L:      
0B1C   61 62 63               DB   "abc"   
0B1F                             ;*******************************************************************
0B1F                             ; general routines
0B1F                             ;*******************************************************************
0B1F                             ; followed by a table
0B1F                             ; db char
0B1F                             ; dw addr
0B1F                             ; the final item must have char == NUL
0B1F                JUMPTABLE:      
0B1F   03                     INC   bc   
0B20   E1                     POP   hl   
0B21                JUMPTABLE0:      
0B21   AF                     XOR   a   
0B22   BE                     CP   (hl)   
0B23   28 09                  JR   z,jumpTable1   
0B25   0A                     LD   a,(bc)   
0B26   BE                     CP   (hl)   
0B27   28 06                  JR   z,jumpTable2   
0B29   23                     INC   hl   
0B2A   23                     INC   hl   
0B2B   23                     INC   hl   
0B2C   18 F3                  JR   jumpTable0   
0B2E                JUMPTABLE1:      
0B2E   0B                     DEC   bc   
0B2F                JUMPTABLE2:      
0B2F   23                     INC   hl   
0B30   5E                     LD   e,(hl)   
0B31   23                     INC   hl   
0B32   56                     LD   d,(hl)   
0B33   EB                     EX   de,hl   
0B34   E9                     JP   (hl)   
0B35                PRTSTR0:      
0B35   CD 85 00               CALL   putchar   
0B38   23                     INC   hl   
0B39                PRTSTR:      
0B39   7E                     LD   a,(hl)   
0B3A   B7                     OR   a   
0B3B   20 F8                  JR   nz,prtstr0   
0B3D   C9                     RET      
0B3E                             ; **************************************************************************
0B3E                             ; calculate nesting value
0B3E                             ; a is char to be tested,
0B3E                             ; e is the nesting value (initially 0)
0B3E                             ; e is increased by ( and [
0B3E                             ; e is decreased by ) and ]
0B3E                             ; e has its bit 7 toggled by `
0B3E                             ; limited to 127 levels
0B3E                             ; **************************************************************************
0B3E                NESTING:      
0B3E   FE 22                  CP   DQUOTE   ; quote char
0B40   28 06                  JR   z,nesting0   
0B42   FE 60                  CP   "`"   ; quote char
0B44   28 02                  JR   z,nesting0   
0B46   18 0A                  JR   nesting1   
0B48                NESTING0:      
0B48   CB 7B                  BIT   7,e   
0B4A   28 03                  JR   z,nesting1a   
0B4C   CB BB                  RES   7,e   
0B4E   C9                     RET      
0B4F                NESTING1A:      
0B4F   CB FB                  SET   7,e   
0B51   C9                     RET      
0B52                NESTING1:      
0B52   CB 7B                  BIT   7,e   
0B54   C0                     RET   nz   
0B55   FE 7B                  CP   "{"   
0B57   28 08                  JR   z,nesting2   
0B59   FE 5B                  CP   "["   
0B5B   28 04                  JR   z,nesting2   
0B5D   FE 28                  CP   "("   
0B5F   20 02                  JR   nz,nesting3   
0B61                NESTING2:      
0B61   1C                     INC   e   
0B62   C9                     RET      
0B63                NESTING3:      
0B63   FE 7D                  CP   "}"   
0B65   28 07                  JR   z,nesting4   
0B67   FE 5D                  CP   "]"   
0B69   28 03                  JR   z,nesting4   
0B6B   FE 29                  CP   ")"   
0B6D   C0                     RET   nz   
0B6E                NESTING4:      
0B6E   1D                     DEC   e   
0B6F   C9                     RET      
0B70                PROMPT:      
0B70   CD 80 0B               CALL   printStr   
0B73   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B78   C9                     RET      
0B79                CRLF:        
0B79   CD 80 0B               CALL   printStr   
0B7C   0D 0A 00               .CSTR   "\r\n"   
0B7F   C9                     RET      
0B80                             ; prints a null teminated string
0B80                             ; the string should be immediately following the call
0B80                PRINTSTR:      
0B80   E3                     EX   (sp),hl   ; swap			
0B81   CD 39 0B               CALL   prtstr   
0B84   23                     INC   hl   ; inc past NUL
0B85   E3                     EX   (sp),hl   ; put it back	
0B86   C9                     RET      
0B87                INIT:        
0B87   DD 2A EE 23            LD   ix,(vNext)   
0B8B   FD 21 00 21            LD   iy,STACK   
0B8F   21 80 01               LD   hl,isysVars   
0B92   11 E6 23               LD   de,sysVars   
0B95   01 10 00               LD   bc,8 * 2   
0B98   ED B0                  LDIR      
0B9A   21 00 23               LD   hl,vars   ; 52 vars LO HI
0B9D   06 34                  LD   b,26*2   
0B9F   AF                     XOR   a   
0BA0                INIT0:       
0BA0   77                     LD   (hl),a   
0BA1   23                     INC   hl   
0BA2   10 FC                  DJNZ   init0   
0BA4   C9                     RET      
0BA5                START:       
0BA5   31 00 21               LD   sp,STACK   ; start Monty
0BA8   CD 87 0B               CALL   init   ; setups
0BAB   CD 80 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BAE   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   $1b,"[2JMonty V0.0\r\n"   
0BBF                INTERPRET:      
0BBF   CD 5F 0A               CALL   flushBuffer   
0BC2   CD 70 0B               CALL   prompt   
0BC5   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0BC8   21 00 21               LD   hl,TIB   
0BCB   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0BCE                INTERPRET2:      ; calculate nesting
0BCE   1E 00                  LD   e,0   ; initilize nesting value
0BD0   C5                     PUSH   bc   ; save offset into TIB,
0BD1                             ; bc is also the count of chars in TIB
0BD1   21 00 21               LD   hl,TIB   ; hl is start of TIB
0BD4   18 06                  JR   interpret4   
0BD6                INTERPRET3:      
0BD6   7E                     LD   a,(hl)   ; a = char in TIB
0BD7   23                     INC   hl   ; inc pointer into TIB
0BD8   0B                     DEC   bc   ; dec count of chars in TIB
0BD9   CD 3E 0B               CALL   nesting   ; update nesting value
0BDC                INTERPRET4:      
0BDC   79                     LD   a,c   ; is count zero?
0BDD   B0                     OR   b   
0BDE   20 F6                  JR   nz,interpret3   ; if not loop
0BE0   C1                     POP   bc   ; restore offset into TIB
0BE1                INTERPRET5:      
0BE1   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0BE4   FE 20                  CP   $20   ; compare to space
0BE6   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0BE8   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0BEA                             ; ???? NEEDED?
0BEA   28 3B                  JR   z,interpret8   
0BEC   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0BEE   28 24                  JR   z,interpret7   ; if anything else its macro/control
0BF0   FE 05                  CP   CTRL_E   
0BF2   CA 75 0C               JP   z,edit_   
0BF5   FE 08                  CP   CTRL_H   
0BF7   CA 65 0C               JP   z,backSpace_   
0BFA   FE 0A                  CP   CTRL_J   
0BFC   CA 8D 0C               JP   z,reEdit_   
0BFF   FE 13                  CP   CTRL_S   
0C01   CA 90 0C               JP   z,printStack_   
0C04                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C04                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C04                             ; DB     lsb(list_)       ; FF  ^L 12
0C04                             ; DB     lsb(printStack_) ; DLE ^P 16
0C04                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C04                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C04                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C04                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C04                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C04                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C04                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C04                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C04                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C04                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C04                INTERPRET5A:      
0C04                             ; ld (vTIBPtr),bc
0C04                             ; ld bc,(vTIBPtr)
0C04   18 C8                  JR   interpret2   
0C06                INTERPRET6:      
0C06   21 00 21               LD   hl,TIB   
0C09   09                     ADD   hl,bc   
0C0A   77                     LD   (hl),a   ; store the character in textbuf
0C0B   03                     INC   bc   
0C0C   CD 85 00               CALL   putchar   ; echo character to screen
0C0F   CD 3E 0B               CALL   nesting   
0C12   18 CD                  JR   interpret5   ; wait for next character
0C14                INTERPRET7:      
0C14   21 00 21               LD   hl,TIB   
0C17   09                     ADD   hl,bc   
0C18   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C1A   23                     INC   hl   
0C1B   36 0A                  LD   (hl),"\n"   
0C1D   23                     INC   hl   
0C1E   03                     INC   bc   
0C1F   03                     INC   bc   
0C20   CD 79 0B               CALL   crlf   ; echo character to screen
0C23   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C24   B7                     OR   a   
0C25   20 BA                  JR   nz,interpret5   
0C27                INTERPRET8:      
0C27   21 00 21               LD   hl,TIB   
0C2A   09                     ADD   hl,bc   
0C2B   22 EA 23               LD   (vTIBPtr),hl   
0C2E   01 00 21               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C31                             ; we pressed enter
0C31   0B                     DEC   bc   
0C32                NEXT:        
0C32   03                     INC   bc   ; Increment the IP
0C33   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C34   FE 20                  CP   " "   ; whitespace?
0C36   28 FA                  JR   z,next   ; space? ignore
0C38   38 09                  JR   c,next1   
0C3A   D6 20                  SUB   " "   
0C3C   6F                     LD   l,a   ; index into table
0C3D   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0C3F   6E                     LD   l,(hl)   ; get low jump address
0C40   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C42   E9                     JP   (hl)   ; Jump to routine
0C43                NEXT1:       
0C43   FE 00                  CP   NUL   ; end of input string?
0C45   28 03                  JR   z,exit   
0C47   C3 BF 0B               JP   interpret   ; no, other whitespace, macros?
0C4A                EXIT:        
0C4A   03                     INC   bc   
0C4B   60 69                  LD   hl,bc   
0C4D   E9                     JP   (hl)   
0C4E                RUN:         
0C4E   C1                     POP   bc   
0C4F   0B                     DEC   bc   
0C50   DD E9                  JP   (ix)   
0C52                ERROR:       
0C52   CD 4E 0C               CALL   run   
0C55   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0C62   C3 BF 0B               JP   interpret   
0C65                BACKSPACE_:      
0C65   79                     LD   a,c   
0C66   B0                     OR   b   
0C67   CA CE 0B               JP   z,interpret2   
0C6A   0B                     DEC   bc   
0C6B   CD 80 0B               CALL   printStr   
0C6E   08 20 08 00            .CSTR   "\b \b"   
0C72   C3 CE 0B               JP   interpret2   
0C75                             ; edit
0C75                EDIT_:       
0C75   CD 4E 0C               CALL   run   
0C78   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0C8A   C3 BF 0B               JP   interpret   
0C8D                REEDIT_:      
0C8D   C3 BF 0B               JP   interpret   
0C90                PRINTSTACK_:      
0C90   CD 4E 0C               CALL   run   
0C93   2F 70 6B 00            .CSTR   "/pk"   
0C97   C3 BF 0B               JP   interpret   
0C9A                             ; editDef:
0C9A                             ;     pop hl                      ; pop ret address
0C9A                             ;     ex (sp),hl                  ; swap with TOS
0C9A                             ;     push hl                     ; dup TOS
0C9A                             ;     ld a,l                      ; a = ident
0C9A                             ;     ld de,TIB                   ; de = start of TIB
0C9A                             ;     ld (vTIBPtr),de             ; update TIB*
0C9A                             ;     push ix                     ; save NEXT
0C9A                             ;     ld ix,editDef0              ; NEXT = editDef0
0C9A                             ;     jp lookupRef                ; convert letter into address
0C9A                             ; editDef0:
0C9A                             ;     ld e,(hl)                   ; de = (hl++)
0C9A                             ;     inc hl
0C9A                             ;     ld d,(hl)
0C9A                             ;     ld a,d                      ; de == 0 ?
0C9A                             ;     or e
0C9A                             ;     jr z,editDef4
0C9A                             ;     ld ix,editDef3              ; NEXT = editDef3
0C9A                             ;     ex de,hl
0C9A                             ;     ld a,(hl)
0C9A                             ;     cp "{"
0C9A                             ;     jr nz,editDef1
0C9A                             ;     jp editBlock0               ; convert letter into address
0C9A                             ; editDef1:
0C9A                             ;     cp "("
0C9A                             ;     jr nz,editDef2
0C9A                             ;     jp editBlock0               ; convert letter into address
0C9A                             ; editDef2:
0C9A                             ;     jp editLambda
0C9A                             ; editDef3:
0C9A                             ;     ld a," "                    ; write assign
0C9A                             ;     call writeChar
0C9A                             ;     pop hl                      ; a = ident
0C9A                             ;     ld a,l
0C9A                             ;     call writeChar
0C9A                             ;     ld a,"="                    ; write assign
0C9A                             ;     call writeChar
0C9A                             ;     ld ix,editDef4              ; NEXT = editDef4
0C9A                             ;     jp printTIB
0C9A                             ; editDef4:
0C9A                             ;     pop ix                      ; restore NEXT
0C9A                             ;     jp (ix)
0C9A                             ; writeChar:
0C9A                             ;     ld de,(vTIBPtr)             ; de = TIB*
0C9A                             ;     ld (de),a                   ; write ident
0C9A                             ;     inc de
0C9A                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0C9A                             ;     ret
0C9A                             ; ; printTIB
0C9A                             ; printTIB:
0C9A                             ;     ld hl,(vTIBPtr)
0C9A                             ;     ld de,TIB
0C9A                             ;     or a
0C9A                             ;     sbc hl,de
0C9A                             ;     jp printTIB2
0C9A                             ; printTIB1:
0C9A                             ;     ld a,(de)
0C9A                             ;     call putchar
0C9A                             ; printTIB2:
0C9A                             ;     ld a,l
0C9A                             ;     or h
0C9A                             ;     jr nz,printTIB1
0C9A                             ;     jp (ix)
0C9A                             ; editBlock:
0C9A                             ;     pop hl                      ; hl = block*
0C9A                             ; editBlock0:
0C9A                             ;     push ix                     ; save next
0C9A                             ;     push hl                     ; push block*
0C9A                             ;     push hl                     ; push block*
0C9A                             ;     ld ix,(editBlock2)
0C9A                             ;     jp blockLength
0C9A                             ; editBlock1:
0C9A                             ;     pop hl                      ; bc = length, (sp) = IP
0C9A                             ;     pop de                      ; de = block*
0C9A                             ;     ld a,l
0C9A                             ;     or h
0C9A                             ;     jr z,editBlock2
0C9A                             ;     push bc
0C9A                             ;     ld bc,hl
0C9A                             ;     ex de,hl                    ; hl = block*
0C9A                             ;     ld de,(vTIBPtr)              ; de = TIB*
0C9A                             ;     ldir                        ; copy block to TIB
0C9A                             ;     ld (vTIBPtr),de              ; save TIB*
0C9A                             ;     pop bc
0C9A                             ; editBlock2:
0C9A                             ;     pop ix                      ; restore next
0C9A                             ;     jp (ix)
0C9A                             ; editLambda:
0C9A                             ;     jp (ix)
0C9A                             ; editArray:
0C9A                             ;     jp (ix)
0C9A                             ; editArglist:
0C9A                             ;     jp (ix)
0C9A                             ; ; blockLength
0C9A                             ; ; addr1 -- length
0C9A                             ; blockLength:
0C9A                             ;     pop hl                      ; block*
0C9A                             ;     push hl                     ; save block*
0C9A                             ;     inc hl                      ; skip first char
0C9A                             ;     ld d,1                      ; increase nesting
0C9A                             ; blockLength1:                   ; Skip to end of definition
0C9A                             ;     ld a,(hl)                   ; Get the next character
0C9A                             ;     inc hl                      ; Point to next character
0C9A                             ;     cp " " + 1                  ; ignore whitespace
0C9A                             ;     jr c,blockLength1
0C9A                             ;     cp ")"
0C9A                             ;     jr z,blockLength4
0C9A                             ;     cp "}"
0C9A                             ;     jr z,blockLength4
0C9A                             ;     cp "]"
0C9A                             ;     jr z,blockLength4
0C9A                             ;     cp "("
0C9A                             ;     jr z,blockLength2
0C9A                             ;     cp "{"
0C9A                             ;     jr z,blockLength2
0C9A                             ;     cp "["
0C9A                             ;     jr z,blockLength2
0C9A                             ;     cp "'"
0C9A                             ;     jr z,blockLength3
0C9A                             ;     cp "`"
0C9A                             ;     jr z,blockLength3
0C9A                             ;     cp DQUOTE
0C9A                             ;     jr z,blockLength3
0C9A                             ;     jr blockLength1
0C9A                             ; blockLength2:
0C9A                             ;     inc d
0C9A                             ;     jr blockLength1
0C9A                             ; blockLength4:
0C9A                             ;     dec d
0C9A                             ;     jr nz, blockLength1         ; get the next element
0C9A                             ; blockLength3:
0C9A                             ;     ld a,$80
0C9A                             ;     xor d
0C9A                             ;     ld d,a
0C9A                             ;     jr nz, blockLength1
0C9A                             ;     pop hl                      ; hl = block*
0C9A                             ;     or a
0C9A                             ;     sbc hl,de
0C9A                             ;     push hl
0C9A                             ;     jp (ix)
0C9A                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0C9A                             ; \a start of stack \#3 depth \b base \$ prompt
0C9A                             ; DW dStack               ; a vS0 start of datastack			
0C9A                             ; DW FALSE                ; b vBase16
0C9A                             ; DW 0                    ; c vTIBPtr an offset to the tib
0C9A                             ; DW 0                    ; d
0C9A                             ; DW 65                   ; e vLastDef "A" last command u defined
0C9A                             ; DW 0                    ; f
0C9A                             ; DW page6                ; g 256 bytes limits
0C9A                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0C9A                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                             ; uninitialised sys variables (preserved)
23F2                VPOINTER:   DS   2   ; 
23F4                VREMAIN:   DS   2   ; 
23F6                VSAVEDIP:   DS   2   ; 
23F8                VSAVEDSP:   DS   2   ; 
23FA                VSAVEDBP:   DS   2   ; 
23FC                VCHECKSUM:   DS   2   ; 
23FE                             ; uninitialised sys variables (unpreserved)
23FE                VTEMP1:   DS   2   ; 
2400                VTEMP2:   DS   2   ; 
2402                VLASTDEF:   DS   2   ; 
2404                VHASHSTR:   DS   2   ; 
2406                TBPTR:    DS   2   ; reserved for tests
2408                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 46 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 12
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B0A DEFINED AT LINE 1725 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1918 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1568 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 763 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 1931 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
TMAGIC:             00AA DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 419 IN MAIN.asm
TRESERV:            00A0 DEFINED AT LINE 30 IN MAIN.asm
TNUMBER:            00A1 DEFINED AT LINE 31 IN MAIN.asm
TSTRING:            00A2 DEFINED AT LINE 32 IN MAIN.asm
TPOINTER:           00A3 DEFINED AT LINE 33 IN MAIN.asm
TARRAY:             00A4 DEFINED AT LINE 34 IN MAIN.asm
                    > USED AT LINE 416 IN MAIN.asm
TBLOCK:             00A5 DEFINED AT LINE 35 IN MAIN.asm
TLAMBDA:            00A6 DEFINED AT LINE 36 IN MAIN.asm
TARGLST:            00A7 DEFINED AT LINE 37 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 51 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 56 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 66 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 169 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 171 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 173 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 175 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 177 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 179 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 181 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 183 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 185 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 187 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 188 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 190 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 192 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 194 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 196 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 240 IN MAIN.asm
LT_:                036D DEFINED AT LINE 248 IN MAIN.asm
LT1:                0376 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037F DEFINED AT LINE 260 IN MAIN.asm
NOP_:               0382 DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0384 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0387 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD:                0387 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               0392 DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0396 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
AT:                 0399 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADDR:               0399 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A3 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
AND:                03A3 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03AA DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AE DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AE DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B7 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
XOR1:               03B8 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03C2 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
DOLLAR:             03C7 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
ARG:                03C7 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E5 DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
ARG0A:              03EE DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
ARG1:               03F3 DEFINED AT LINE 373 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG1A:              03FB DEFINED AT LINE 380 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
LBRACK:             03FE DEFINED AT LINE 384 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
ARRAYSTART:         03FE DEFINED AT LINE 385 IN MAIN.asm
RBRACK:             041A DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYEND:           041A DEFINED AT LINE 400 IN MAIN.asm
ARRAYEND1:          043C DEFINED AT LINE 422 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
ARRAYEND2:          044C DEFINED AT LINE 432 IN MAIN.asm
                    > USED AT LINE 428 IN MAIN.asm
ARRINDEX:           0472 DEFINED AT LINE 461 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRINDEX0:          047A DEFINED AT LINE 467 IN MAIN.asm
ARRINDEX1:          047B DEFINED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
ARRINDEX2:          0487 DEFINED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
ASSIGN:             048A DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            048C DEFINED AT LINE 486 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
ASSIGNX:            048D DEFINED AT LINE 488 IN MAIN.asm
ASSIGN1:            0499 DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
COLON:              049B DEFINED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            049B DEFINED AT LINE 504 IN MAIN.asm
ARGLIST1:           04A5 DEFINED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
ARGLIST1A:          04AD DEFINED AT LINE 517 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST2:           04B5 DEFINED AT LINE 522 IN MAIN.asm
ARGLIST3:           04BD DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 528 IN MAIN.asm
ARGLIST4:           04C0 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 519 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST5:           04C6 DEFINED AT LINE 539 IN MAIN.asm
                    > USED AT LINE 537 IN MAIN.asm
LBRACE:             04D2 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
BLOCKSTART:         04D2 DEFINED AT LINE 551 IN MAIN.asm
BLOCKSTART1:        04D6 DEFINED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 559 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
BLOCKSTART2:        0502 DEFINED AT LINE 582 IN MAIN.asm
                    > USED AT LINE 569 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
BLOCKSTART3:        0505 DEFINED AT LINE 585 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
                    > USED AT LINE 580 IN MAIN.asm
BLOCKSTART4:        050D DEFINED AT LINE 591 IN MAIN.asm
                    > USED AT LINE 562 IN MAIN.asm
                    > USED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
BLOCKSTART5:        0510 DEFINED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 590 IN MAIN.asm
BLOCKSTART6:        0538 DEFINED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
RBRACE:             053B DEFINED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKEND:           053B DEFINED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
BLOCKEND1:          056D DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
BLOCKEND2:          0579 DEFINED AT LINE 647 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
BLOCKEND3:          058B DEFINED AT LINE 661 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
TICK:               0597 DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
CHAR:               0597 DEFINED AT LINE 669 IN MAIN.asm
CHAR1:              059A DEFINED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 682 IN MAIN.asm
CHAR2:              05A6 DEFINED AT LINE 680 IN MAIN.asm
                    > USED AT LINE 677 IN MAIN.asm
CHAR3:              05A9 DEFINED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 675 IN MAIN.asm
BACKSLASH:          05AC DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
COMMA:              05AE DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05AE DEFINED AT LINE 693 IN MAIN.asm
DISCARD1:           05BB DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
SLASH:              05BD DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
DIV:                05F3 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
DOT:                0604 DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DOTARRAY:           0616 DEFINED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
DOTHEX:             062A DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
DOTSTR:             063E DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
DOTCHAR:            0652 DEFINED AT LINE 787 IN MAIN.asm
                    > USED AT LINE 762 IN MAIN.asm
DOTDEC:             0666 DEFINED AT LINE 794 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
DIVIDE:             067A DEFINED AT LINE 804 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
DIVIDE1:            067F DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
DIVIDE2:            068C DEFINED AT LINE 815 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
DIVIDE3:            068D DEFINED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
EQUALS:             0693 DEFINED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         069B DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           06A0 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          06A5 DEFINED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
TRUE1:              06A8 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
NULL1:              06AE DEFINED AT LINE 852 IN MAIN.asm
FALSE1:             06AE DEFINED AT LINE 853 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
CARET:              06B4 DEFINED AT LINE 861 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 06B4 DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
GO1:                06B5 DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 1046 IN MAIN.asm
GO2:                06BB DEFINED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
GOBLOCK:            06C7 DEFINED AT LINE 877 IN MAIN.asm
GOBLOCK1:           06C7 DEFINED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOBLOCK2:           06EC DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 981 IN MAIN.asm
GOLAMBDA:           06FA DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
GOLAMBDA1:          0717 DEFINED AT LINE 927 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
GOLAMBDA2:          071D DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
GOLAMBDA3:          0728 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
GOLAMBDA4:          0740 DEFINED AT LINE 957 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
GOLAMBDA5:          0744 DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
GOLAMBDA6:          0747 DEFINED AT LINE 965 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
GOLAMBDA7:          074A DEFINED AT LINE 968 IN MAIN.asm
GOLAMBDA8:          074F DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
HASH:               075A DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             075A DEFINED AT LINE 984 IN MAIN.asm
HEXNUM1:            075D DEFINED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
HEXNUM2:            0765 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 990 IN MAIN.asm
UPCASE:             0777 DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            077C DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             0781 DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
QUESTION:           078E DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 078E DEFINED AT LINE 1026 IN MAIN.asm
IFTE:               079A DEFINED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
IFTE1:              079B DEFINED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
STAR:               07A7 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                07A7 DEFINED AT LINE 1049 IN MAIN.asm
MUL2:               07A9 DEFINED AT LINE 1052 IN MAIN.asm
MUL3:               07B1 DEFINED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
NUM:                07C3 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               07CC DEFINED AT LINE 1076 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
NUM1:               07CD DEFINED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
NUM2:               07E5 DEFINED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 994 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
NUM3:               07F0 DEFINED AT LINE 1104 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
UNDERSCORE:         07F3 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
REMAIN:             07F3 DEFINED AT LINE 1109 IN MAIN.asm
RPAREN:             07F9 DEFINED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0801 DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
SHIFTLEFT:          081D DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         0825 DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
SHIFTLEFT2:         0826 DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
SHIFTRIGHT:         082D DEFINED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        0835 DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
SHIFTRIGHT2:        0839 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
DBLQUOTE:           0840 DEFINED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             0840 DEFINED AT LINE 1181 IN MAIN.asm
STRING1:            0849 DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
STRING2:            084C DEFINED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
STRING3:            0855 DEFINED AT LINE 1198 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
MINUS:              0868 DEFINED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                0874 DEFINED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
SUB1:               087E DEFINED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
ERROR1:             0887 DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1633 IN MAIN.asm
COMMENT:            088E DEFINED AT LINE 1243 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
COMMAND_A:          0897 DEFINED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 710 IN MAIN.asm
ABSOLUTE:           08A3 DEFINED AT LINE 1262 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
ADDROF:             08B0 DEFINED AT LINE 1277 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
ADDROF1:            08C4 DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
ADDROF2:            08CF DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
COMMAND_B:          08D1 DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
BUFFERARRAY:        08EC DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
BUFFERCHAR:         0920 DEFINED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
BUFFERDEC:          092B DEFINED AT LINE 1341 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
BUFFERDEC0:         0942 DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
BUFFERDEC1:         0952 DEFINED AT LINE 1371 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
BUFFERDEC2:         0972 DEFINED AT LINE 1385 IN MAIN.asm
                    > USED AT LINE 1374 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1378 IN MAIN.asm
                    > USED AT LINE 1380 IN MAIN.asm
                    > USED AT LINE 1383 IN MAIN.asm
BUFFERDEC3:         0974 DEFINED AT LINE 1387 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
BUFFERDEC4:         0984 DEFINED AT LINE 1399 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
BUFFERDEC5:         0985 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 1398 IN MAIN.asm
BUFFERHEX:          098B DEFINED AT LINE 1411 IN MAIN.asm
                    > USED AT LINE 1310 IN MAIN.asm
BUFFERHEX1:         09A6 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
BUFFERHEX2:         09AF DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
BREAK:              09BA DEFINED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
BREAK1:             09C1 DEFINED AT LINE 1453 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
BUFFERSTRING:       09D4 DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERSTRING0:      09DB DEFINED AT LINE 1470 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
BUFFERSTRING1:      09DE DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1469 IN MAIN.asm
BUFFERXSPACES:      09EB DEFINED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1316 IN MAIN.asm
BUFFERXSPACES1:     09F1 DEFINED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
BUFFERXSPACES2:     09F5 DEFINED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
COMMAND_I:          09FE DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
COMMAND_P:          0A0A DEFINED AT LINE 1508 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
PARTIAL:            0A1C DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
PRINTBUFFER:        0A3C DEFINED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
FLUSHBUFFER:        0A5F DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
PRINTCHARS:         0A6E DEFINED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1515 IN MAIN.asm
PRINTCHARS1:        0A75 DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
PRINTCHARS2:        0A7B DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
PRINTSTACK:         0A80 DEFINED AT LINE 1579 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
SIZE:               0A82 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 732 IN MAIN.asm
COMMAND_V:          0A8C DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
CONSTBUFSTART:      0AA1 DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
CONSTHEAPSTART:     0AA6 DEFINED AT LINE 1639 IN MAIN.asm
CONSTTIBSTART:      0AAB DEFINED AT LINE 1643 IN MAIN.asm
                    > USED AT LINE 1631 IN MAIN.asm
VARBUFPTR:          0AB0 DEFINED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
VARHEAPPTR:         0AB9 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1625 IN MAIN.asm
VARTIBPTR:          0AC2 DEFINED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
VARIABLE:           0ACB DEFINED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1660 IN MAIN.asm
CONSTANT:           0ACE DEFINED AT LINE 1664 IN MAIN.asm
                    > USED AT LINE 1637 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
CHARS:              0AD1 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
CHARS1:             0AD4 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
DECIMAL:            0AD9 DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 716 IN MAIN.asm
DECIMAL1:           0ADC DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
HEXADECIMAL:        0AE1 DEFINED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
INPUT:              0AE7 DEFINED AT LINE 1686 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
KEY:                0AF2 DEFINED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
OUTPUT:             0AFB DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
NUMBERS:            0B04 DEFINED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
FILTER:             0B0A DEFINED AT LINE 1723 IN MAIN.asm
MAP:                0B0A DEFINED AT LINE 1724 IN MAIN.asm
ARGS0A1L_:          0B0C DEFINED AT LINE 1731 IN MAIN.asm
ARGS0A1L:           0B0E DEFINED AT LINE 1734 IN MAIN.asm
ARGS1A0L_:          0B0F DEFINED AT LINE 1737 IN MAIN.asm
ARGS1A0L:           0B11 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 784 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
ARGS1A1L_:          0B12 DEFINED AT LINE 1743 IN MAIN.asm
ARGS1A1L:           0B14 DEFINED AT LINE 1746 IN MAIN.asm
ARGS2A0L_:          0B16 DEFINED AT LINE 1749 IN MAIN.asm
ARGS2A0L:           0B18 DEFINED AT LINE 1752 IN MAIN.asm
ARGS1A2L_:          0B1A DEFINED AT LINE 1755 IN MAIN.asm
ARGS1A2L:           0B1C DEFINED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
JUMPTABLE:          0B1F DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
JUMPTABLE0:         0B21 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1782 IN MAIN.asm
JUMPTABLE1:         0B2E DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
JUMPTABLE2:         0B2F DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1778 IN MAIN.asm
PRTSTR0:            0B35 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
PRTSTR:             0B39 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
NESTING:            0B3E DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1964 IN MAIN.asm
NESTING0:           0B48 DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
NESTING1A:          0B4F DEFINED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
NESTING1:           0B52 DEFINED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1817 IN MAIN.asm
NESTING2:           0B61 DEFINED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
                    > USED AT LINE 1832 IN MAIN.asm
NESTING3:           0B63 DEFINED AT LINE 1838 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
NESTING4:           0B6E DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
PROMPT:             0B70 DEFINED AT LINE 1849 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
CRLF:               0B79 DEFINED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
PRINTSTR:           0B80 DEFINED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
INIT:               0B87 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 1886 IN MAIN.asm
INIT0:              0BA0 DEFINED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
START:              0BA5 DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0BBF DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 2017 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
INTERPRET2:         0BCE DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
INTERPRET3:         0BD6 DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
INTERPRET4:         0BDC DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
INTERPRET5:         0BE1 DEFINED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
INTERPRET5A:        0C04 DEFINED AT LINE 1953 IN MAIN.asm
INTERPRET6:         0C06 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
INTERPRET7:         0C14 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
INTERPRET8:         0C27 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
NEXT:               0C32 DEFINED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
NEXT1:              0C43 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
EXIT:               0C4A DEFINED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
RUN:                0C4E DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
ERROR:              0C52 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
BACKSPACE_:         0C65 DEFINED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
EDIT_:              0C75 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
REEDIT_:            0C8D DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
PRINTSTACK_:        0C90 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 59 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
                    > USED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 60 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1875 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1872 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 426 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1678 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1336 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1649 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 1869 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
VPOINTER:           23F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
VREMAIN:            23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
VSAVEDIP:           23F6 DEFINED AT LINE 48 IN ram.asm
VSAVEDSP:           23F8 DEFINED AT LINE 49 IN ram.asm
VSAVEDBP:           23FA DEFINED AT LINE 50 IN ram.asm
VCHECKSUM:          23FC DEFINED AT LINE 51 IN ram.asm
VTEMP1:             23FE DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 403 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
                    > USED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
VTEMP2:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
VLASTDEF:           2402 DEFINED AT LINE 57 IN ram.asm
VHASHSTR:           2404 DEFINED AT LINE 58 IN ram.asm
TBPTR:              2406 DEFINED AT LINE 59 IN ram.asm
HEAP:               2408 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
