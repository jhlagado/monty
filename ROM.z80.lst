0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 DE 0F               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 85 0A               JP   comma   
0209                DOLLAR_:      
0209   C3 08 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 32 0B               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 4C 0B               JP   percent   
0215                QUESTION_:      
0215   C3 25 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 81 0B               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 C3 0C               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 AB 0C               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 BC 0C               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA 23 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA 07 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA CA 0C               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 CF 0C               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 23               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 BC 0E               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 81 0B               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 AD 0C               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA AD 0C               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA E3 0C               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 AD 0C               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 AD 0C               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(VARS)   
0309   22 F8 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 75 0D               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 84 10               JP   error   
0343                LAMBDA2:      
0343   CD AB 0D               CALL   parseBlock   
0346   CD 1A 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA 1E 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 51 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA 1E 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 5B 0D               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD AB 0D               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 B1 0B               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 FE 0A               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 23            LD   de,(vPointer)   
03ED   21 F8 23               LD   hl,vPointer   
03F0   C3 BC 0E               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD E4 0E               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   3D 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*'
041B   C3 5B 0D               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   printString1   
0425                PRINTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                PRINTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,printString0   
042C   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 5B 0D               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A EF 23               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,printHex   ; else falls through
043B   C3 3E 04               JP   printDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                PRINTDEC:      
043E   ED 5B E8 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A EE 23               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,printDec1   
044A   26 00                  LD   h,0   
044C                PRINTDEC1:      
044C   CD 5B 04               CALL   printDec2   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 5B 0D               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                PRINTDEC2:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,printDec3   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                PRINTDEC3:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   printDec4   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   printDec4   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   printDec4   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   printDec4   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   printDec4   
048A   C9                     RET      
048B                PRINTDEC4:      
048B   06 2F                  LD   b,"0"-1   
048D                PRINTDEC5:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,printDec5   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,printDec6   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   printDec7   
049D                PRINTDEC6:      
049D   0C                     INC   c   
049E                PRINTDEC7:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                PRINTHEX:      
04A4   ED 5B E8 23            LD   de,(vBufPtr)   
04A8   3A F0 23               LD   a,(vHexPrefix)   ; "$"
04AB   B7                     OR   a   ; skip if null
04AC   28 02                  JR   z,printHex1   
04AE   12                     LD   (de),a   
04AF   13                     INC   de   ; string*++,
04B0                PRINTHEX1:      
04B0   E1                     POP   hl   ; hl = value
04B1   3A EE 23               LD   a,(vDataWidth)   
04B4   3D                     DEC   a   
04B5   28 04                  JR   z,printHex2   
04B7   7C                     LD   a,h   
04B8   CD CA 04               CALL   printHex3   
04BB                PRINTHEX2:      
04BB   7D                     LD   a,l   
04BC   CD CA 04               CALL   printHex3   
04BF   3E 20                  LD   a," "   ; append space to buffer
04C1   12                     LD   (de),a   
04C2   13                     INC   de   ; string*++,
04C3   ED 53 E8 23            LD   (vBufPtr),de   
04C7   C3 5B 0D               JP   dotNext   
04CA                PRINTHEX3:      
04CA   F5                     PUSH   af   
04CB   1F                     RRA      
04CC   1F                     RRA      
04CD   1F                     RRA      
04CE   1F                     RRA      
04CF   CD D3 04               CALL   printHex4   
04D2   F1                     POP   af   
04D3                PRINTHEX4:      
04D3   E6 0F                  AND   0x0F   
04D5   C6 90                  ADD   a,0x90   
04D7   27                     DAA      
04D8   CE 40                  ADC   a,0x40   
04DA   27                     DAA      
04DB   12                     LD   (de),a   
04DC   13                     INC   de   ; string*++,
04DD   C9                     RET      
04DE                             ;********************** PAGE 4 END *********************************************
04DE                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA 42 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD CE 0E               CALL   lowerCaseTable   
050B   26                     DB   lsb(command_a_)   
050C   38                     DB   lsb(command_b_)   
050D   CB                     DB   lsb(command_nop_)   
050E   44                     DB   lsb(command_d_)   
050F   CB                     DB   lsb(command_nop_)   
0510   4A                     DB   lsb(command_f_)   
0511   CB                     DB   lsb(command_nop_)   
0512   65                     DB   lsb(command_h_)   
0513   6B                     DB   lsb(command_i_)   
0514   CB                     DB   lsb(command_nop_)   
0515   CB                     DB   lsb(command_nop_)   
0516   CB                     DB   lsb(command_nop_)   
0517   71                     DB   lsb(command_m_)   
0518   CB                     DB   lsb(command_nop_)   
0519   77                     DB   lsb(output_)   
051A   7A                     DB   lsb(command_p_)   
051B   7D                     DB   lsb(command_q_)   
051C   83                     DB   lsb(command_r_)   
051D   8F                     DB   lsb(command_s_)   
051E   A4                     DB   lsb(true_)   
051F   CB                     DB   lsb(command_nop_)   
0520   A7                     DB   lsb(command_v_)   
0521   C2                     DB   lsb(command_w_)   
0522   C8                     DB   lsb(xor_)   
0523   CB                     DB   lsb(command_nop_)   
0524   CB                     DB   lsb(command_nop_)   
0525   CE                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   62                     DB   "b"   ; /ab absolute
0527   EE 05                  DW   absolute   
0529   64                     DB   "d"   ; /ad address of
052A   FC 05                  DW   addrOf   
052C   69                     DB   "i"   ; /ai array iterator
052D   C3 07                  DW   arrayIter   
052F   6C                     DB   "l"   ; /al array length
0530   04 06                  DW   arrayLength   
0532   73                     DB   "s"   ; /as array size
0533   0D 06                  DW   arraySize   
0535   00                     DB   NUL   
0536   69 06                  DW   error1   
0538                COMMAND_B_:      
0538   62                     DB   "b"   ; /bb bye bye cold boot
0539   D5 0F                  DW   coldStart   
053B   6D                     DB   "m"   ; /bm byte mode
053C   3B 06                  DW   byteMode   
053E   72                     DB   "r"   ; /br break from loop
053F   21 06                  DW   break   
0541   00                     DB   NUL   
0542   69 06                  DW   error1   
0544                COMMAND_D_:      
0544   63                     DB   "c"   ; /dc decimal
0545   5D 06                  DW   decBase   
0547   00                     DB   NUL   
0548   69 06                  DW   error1   
054A                COMMAND_F_:      
054A   64                     DB   "d"   ; /fd fold
054B   68 09                  DW   fold   
054D   65                     DB   "e"   ; /fe forEach
054E   B9 09                  DW   forEach   
0550   73                     DB   "s"   ; /fs funcSrc
0551   04 0A                  DW   funcSrc   
0553   74                     DB   "t"   ; /ft filter
0554   0B 09                  DW   filter   
0556   31                     DB   "1"   
0557   C6 10                  DW   f1   
0559   32                     DB   "2"   
055A   C6 10                  DW   f2   
055C   33                     DB   "3"   
055D   C6 10                  DW   f3   
055F   34                     DB   "4"   
0560   C6 10                  DW   f4   
0562   00                     DB   NUL   
0563   DD 0C                  DW   false1   
0565                COMMAND_H_:      
0565   78                     DB   "x"   ; /hx hex
0566   64 06                  DW   hexBase   
0568   00                     DB   NUL   
0569   69 06                  DW   error1   
056B                             ; 6
056B                COMMAND_I_:      
056B   6E                     DB   "n"   ; /in input
056C   6F 06                  DW   input   
056E   00                     DB   NUL   
056F   69 06                  DW   error1   
0571                COMMAND_M_:      
0571   70                     DB   "p"   ; /mp map
0572   CA 08                  DW   map   
0574   00                     DB   NUL   
0575   69 06                  DW   error1   
0577                OUTPUT_:      
0577   00                     DB   NUL   
0578   7A 06                  DW   output   
057A                             ; 4
057A                COMMAND_P_:      
057A   00                     DB   NUL   
057B   69 06                  DW   error1   
057D                             ; 6
057D                COMMAND_Q_:      
057D   74                     DB   "t"   ; /qt quit
057E   83 06                  DW   quit   
0580   00                     DB   NUL   
0581   69 06                  DW   error1   
0583                COMMAND_R_:      
0583   63                     DB   "c"   ; /rc tail call optimisation
0584   8D 06                  DW   recur   
0586   65                     DB   "e"   ; /re remainder
0587   93 06                  DW   remain   
0589   67                     DB   "g"   ; /rg range src
058A   31 07                  DW   rangeSrc   
058C   00                     DB   NUL   
058D   69 06                  DW   error1   
058F                COMMAND_S_:      
058F   62                     DB   "b"   
0590   99 06                  DW   stringBegin   
0592   63                     DB   "c"   
0593   EB 06                  DW   stringCompare   
0595   65                     DB   "e"   
0596   A1 06                  DW   stringEnd   
0598   69                     DB   "i"   
0599   43 08                  DW   stringIter   
059B   6C                     DB   "l"   
059C   D0 06                  DW   stringLength   
059E   73                     DB   "s"   
059F   DF 06                  DW   stringSize   
05A1   00                     DB   NUL   
05A2   69 06                  DW   error1   
05A4                TRUE_:       
05A4   00                     DB   NUL   
05A5   D7 0C                  DW   true1   
05A7                COMMAND_V_:      
05A7   62                     DB   "b"   
05A8   03 07                  DW   varBufPtr   
05AA   62                     DB   "b"   
05AB   09 07                  DW   varEcho   
05AD   68                     DB   "h"   
05AE   0F 07                  DW   varHeapPtr   
05B0   74                     DB   "t"   
05B1   15 07                  DW   varTIBPtr   
05B3   78                     DB   "x"   
05B4   1B 07                  DW   varHexPrefix   
05B6   42                     DB   "B"   
05B7   57 06                  DW   constBufStart   
05B9   48                     DB   "H"   
05BA   4B 06                  DW   constHeapStart   
05BC   54                     DB   "T"   
05BD   51 06                  DW   constTIBStart   
05BF   00                     DB   NUL   
05C0   69 06                  DW   error1   
05C2                COMMAND_W_:      
05C2   6D                     DB   "m"   ; /wm word mode
05C3   21 07                  DW   wordMode   
05C5   00                     DB   NUL   
05C6   69 06                  DW   error1   
05C8                XOR_:        
05C8   00                     DB   NUL   
05C9   26 07                  DW   xor   
05CB                             ; 2
05CB                COMMAND_NOP_:      
05CB   00                     DB   NUL   
05CC   D1 05                  DW   nop   
05CE                             ; 3
05CE                COMMAND_DEFAULT_:      
05CE   00                     DB   NUL   
05CF   D3 05                  DW   div   
05D1                             ;********************** PAGE 5 END *********************************************
05D1                NOP:         
05D1   DD E9                  JP   (ix)   
05D3                             ;                               32
05D3                DIV:         
05D3   E1                     POP   hl   ; hl = arg_b
05D4   D1                     POP   de   ; de = arg_a
05D5   03                     INC   bc   
05D6   0A                     LD   a,(bc)   
05D7   FE 3D                  CP   "="   
05D9   28 02                  JR   z,div2   
05DB   0B                     DEC   bc   ; /
05DC   EB                     EX   de,hl   
05DD                DIV2:        
05DD   F5                     PUSH   af   ; preserve af, bc
05DE   C5                     PUSH   bc   
05DF   44 4D                  LD   bc,hl   
05E1   CD 42 0D               CALL   divide   
05E4   EB                     EX   de,hl   
05E5   ED 53 FA 23            LD   (vRemain),de   
05E9   C1                     POP   bc   ; restore
05EA   F1                     POP   af   
05EB   C3 9D 02               JP   sub3   
05EE                             ; /ab absolute
05EE                             ; num -- num
05EE                ABSOLUTE:      
05EE   E1                     POP   hl   
05EF   CB 7C                  BIT   7,h   
05F1   28 06                  JR   z,absolute1   
05F3   AF                     XOR   a   
05F4   95                     SUB   l   
05F5   6F                     LD   l,a   
05F6   9F                     SBC   a,a   
05F7   94                     SUB   h   
05F8   67                     LD   h,a   
05F9                ABSOLUTE1:      
05F9   E5                     PUSH   hl   
05FA   DD E9                  JP   (ix)   
05FC                             ; /ad addrOf                    24
05FC                             ; char -- addr
05FC                ADDROF:      
05FC   E1                     POP   hl   ; a = char
05FD   7D                     LD   a,l   
05FE   CD 1D 0F               CALL   getVarAddr   
0601   E5                     PUSH   hl   
0602                ADDROF2:      
0602   DD E9                  JP   (ix)   
0604                             ; /al length of an array, num elements
0604                             ; array* -- num
0604                ARRAYLENGTH:      
0604   E1                     POP   hl   
0605   2B                     DEC   hl   ; msb size
0606   56                     LD   d,(hl)   
0607   2B                     DEC   hl   ; lsb size
0608   5E                     LD   e,(hl)   
0609   EB                     EX   de,hl   
060A                ARRAYLENGTH1:      
060A   E5                     PUSH   hl   
060B   DD E9                  JP   (ix)   
060D                             ; /as size in bytes of an array, based on current data width
060D                             ; array* -- num
060D                ARRAYSIZE:      
060D                          ;*Macro unroll:  PERFORM arrayLength
060D   DD 21 14 06            LD   ix,performM_1480S1032   
0611   C3 04 06               JP   arrayLength   
0614                PERFORMM_1480S1032:      
0614   E1                     POP   hl   
0615   3A EE 23               LD   a,(vDataWidth)   
0618   3D                     DEC   a   
0619   28 EF                  JR   z,arrayLength1   
061B   CB 3C                  SRL   h   
061D   CB 1D                  RR   l   
061F   18 E9                  JR   arrayLength1   
0621                             ; 13
0621                             ; /br break from loop
0621                             ; --
0621                BREAK:       
0621   E1                     POP   hl   ; hl = condition, break if false
0622   7D                     LD   a,l   
0623   B4                     OR   h   
0624   28 02                  JR   z,break1   
0626   DD E9                  JP   (ix)   
0628                BREAK1:      
0628   FD 5D                  LD   e,iyl   ; get block* just under stack frame
062A   FD 54                  LD   d,iyh   
062C   21 08 00               LD   hl,8   
062F   19                     ADD   hl,de   
0630   23                     INC   hl   
0631   23                     INC   hl   
0632   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0635   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0638   C3 B1 0B               JP   blockEnd   
063B                             ; /b
063B                BYTEMODE:      
063B   3E 01                  LD   a,1   
063D                BYTEMODE1:      
063D   32 EE 23               LD   (vDataWidth),a   
0640   DD E9                  JP   (ix)   
0642                             ; //
0642                COMMENT:      
0642   03                     INC   bc   ; point to next char
0643   0A                     LD   a,(bc)   
0644   FE 20                  CP   " "   ; terminate on any char less than SP
0646   30 FA                  JR   nc,comment   
0648   0B                     DEC   bc   
0649   DD E9                  JP   (ix)   
064B                CONSTHEAPSTART:      
064B   11 22 24               LD   de,HEAP   
064E   C3 CB 0E               JP   constant   
0651                CONSTTIBSTART:      
0651   11 00 21               LD   de,TIB   
0654   C3 CB 0E               JP   constant   
0657                CONSTBUFSTART:      
0657   11 00 22               LD   de,BUFFER   
065A   C3 CB 0E               JP   constant   
065D                DECBASE:      
065D   3E 0A                  LD   a,10   
065F                DECBASE1:      
065F   32 EF 23               LD   (vNumBase),a   
0662   DD E9                  JP   (ix)   
0664                HEXBASE:      
0664   3E 10                  LD   a,16   
0666   C3 5F 06               JP   decBase1   
0669                ERROR1:      
0669   21 01 00               LD   hl,1   ; error 1: unknown command
066C   C3 84 10               JP   error   
066F                             ; Z80 port input
066F                             ; port -- value
066F                INPUT:       
066F   E1                     POP   hl   
0670   59                     LD   e,c   ; save IP
0671   4D                     LD   c,l   
0672   ED 68                  IN   l,(c)   
0674   26 00                  LD   h,0   
0676   4B                     LD   c,e   ; restore IP
0677   E5                     PUSH   hl   
0678   DD E9                  JP   (ix)   
067A                             ; /o Z80 port output
067A                             ; value port --
067A                OUTPUT:      
067A   E1                     POP   hl   
067B   59                     LD   e,c   ; save IP
067C   4D                     LD   c,l   
067D   E1                     POP   hl   
067E   ED 69                  OUT   (c),l   
0680   4B                     LD   c,e   ; restore IP
0681   DD E9                  JP   (ix)   
0683                             ; /qt
0683                             ; bool --
0683                QUIT:        
0683   E1                     POP   hl   ; hl = condition, exit if true
0684   7D                     LD   a,l   
0685   B4                     OR   h   
0686   20 02                  JR   nz,quit1   
0688   DD E9                  JP   (ix)   
068A                QUIT1:       
068A   C3 B1 0B               JP   blockEnd   
068D                RECUR:       
068D   E1                     POP   hl   
068E   22 EC 23               LD   (vRecurPtr),hl   
0691   DD E9                  JP   (ix)   
0693                REMAIN:      
0693   2A FA 23               LD   hl,(vRemain)   
0696   E5                     PUSH   hl   
0697   DD E9                  JP   (ix)   
0699                STRINGBEGIN:      
0699   21 FF FF               LD   hl,TRUE   ; string mode = true
069C   22 F2 23               LD   (vStrMode),hl   
069F   18 27                  JR   stringEnd1   ; save hl in vBufPtr
06A1                STRINGEND:      
06A1   21 00 00               LD   hl,FALSE   ; string mode = false
06A4   22 F2 23               LD   (vStrMode),hl   
06A7   2A E8 23               LD   hl,(vBufPtr)   ; append NUL to string
06AA   AF                     XOR   a   
06AB   77                     LD   (hl),a   
06AC   23                     INC   hl   ; hl = string_end*
06AD   ED 43 04 24            LD   (vTemp1),bc   ; save IP
06B1   11 00 22               LD   de,BUFFER   ; de = string*
06B4   B7                     OR   a   ; bc = size
06B5   ED 52                  SBC   hl,de   
06B7   44 4D                  LD   bc,hl   
06B9   2A EA 23               LD   hl,(vHeapPtr)   ; hl = hstring*
06BC   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
06BD   D5                     PUSH   de   ; return hstring*
06BE   ED B0                  LDIR      ; copy size bytes from string* to hstring*
06C0   ED 53 EA 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
06C4   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
06C8                STRINGEND1:      
06C8   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
06CB   22 E8 23               LD   (vBufPtr),hl   
06CE   DD E9                  JP   (ix)   
06D0                STRINGLENGTH:      
06D0   D1                     POP   de   
06D1   21 00 00               LD   hl,0   
06D4   18 02                  JR   stringLength2   
06D6                STRINGLENGTH1:      
06D6   13                     INC   de   
06D7   23                     INC   hl   
06D8                STRINGLENGTH2:      
06D8   1A                     LD   a,(de)   
06D9   B7                     OR   a   
06DA   20 FA                  JR   nz,stringLength1   
06DC                STRINGLENGTH3:      
06DC   E5                     PUSH   hl   
06DD   DD E9                  JP   (ix)   
06DF                STRINGSIZE:      
06DF                          ;*Macro unroll:  PERFORM stringLength
06DF   DD 21 E6 06            LD   ix,performM_1621S1191   
06E3   C3 D0 06               JP   stringLength   
06E6                PERFORMM_1621S1191:      
06E6   E1                     POP   hl   
06E7   23                     INC   hl   
06E8   C3 DC 06               JP   stringLength3   
06EB                             ; /sc string compare
06EB                             ; string1* string2* -- bool
06EB                             ; Compares two null terminated strings.
06EB                STRINGCOMPARE:      
06EB   D1                     POP   de   
06EC   E1                     POP   hl   
06ED                STRINGCOMPARE1:      
06ED   1A                     LD   a,(de)   
06EE   BE                     CP   (hl)   
06EF   20 07                  JR   nz,stringCompare2   
06F1   B7                     OR   a   
06F2   28 09                  JR   z,stringCompare3   
06F4   13                     INC   de   
06F5   23                     INC   hl   
06F6   18 F5                  JR   stringCompare1   
06F8                STRINGCOMPARE2:      
06F8   21 00 00               LD   hl,FALSE   
06FB   18 03                  JR   stringCompare4   
06FD                STRINGCOMPARE3:      
06FD   21 FF FF               LD   hl,TRUE   
0700                STRINGCOMPARE4:      
0700   E5                     PUSH   hl   
0701   DD E9                  JP   (ix)   
0703                VARBUFPTR:      
0703   21 E8 23               LD   hl,vBufPtr   
0706   C3 BC 0E               JP   variable   
0709                VARECHO:      
0709   21 F1 23               LD   hl,vEcho   
070C   C3 BC 0E               JP   variable   
070F                VARHEAPPTR:      
070F   21 EA 23               LD   hl,vHeapPtr   
0712   C3 BC 0E               JP   variable   
0715                VARTIBPTR:      
0715   21 E6 23               LD   hl,vTIBPtr   
0718   C3 BC 0E               JP   variable   
071B                VARHEXPREFIX:      
071B   21 F0 23               LD   hl,vHexPrefix   
071E   C3 BC 0E               JP   variable   
0721                             ; /wm
0721                WORDMODE:      
0721   3E 02                  LD   a,2   
0723   C3 3D 06               JP   byteMode1   
0726                             ; /x
0726                XOR:         
0726   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
0727                XOR1:        
0727   E1                     POP   hl   
0728   7B                     LD   a,e   
0729   AD                     XOR   l   
072A   6F                     LD   l,a   
072B   7A                     LD   a,d   
072C   AC                     XOR   h   
072D   67                     LD   h,a   
072E   C3 D8 02               JP   add3   
0731                             ;*******************************************************************
0731                             ; Monty implementations
0731                             ;*******************************************************************
0731                             ; /rg rangeSrc
0731                             ; begin end step -- src
0731                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
0731                RANGESRC:      ; range source: begin, end, step, local: L
0731   CD 9F 03               CALL   go   
0734   00 00                  DW   NUL   
0736   40 07                  DW   rangeSrcM_1684S1264   
0738   3A 07                  DW   $+2   
073A   01                     DB   1   
073B   04 62 65 73 4C         .PSTR   "besL"   
0740                RANGESRCM_1684S1264:      
0740   7B                     DB   "{"   ; init mutable L [index active inrange_test]
0741   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0765   5C 6B 74 7B            DB   "\\kt{"   
0769   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0771   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0777   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
077F   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0787   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
0791   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0799   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
079E   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1;= 0 2}"   ; ifte: /t index, /f active = false, quit
07B2   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
07B9   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
07C0   7D                     DB   "}"   
07C1   7D                     DB   "}"   
07C2   00                     DB   0   
07C3                             ; /ai arrayIter
07C3                             ; array* -- src
07C3                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
07C3                ARRAYITER:      
07C3   CD 9F 03               CALL   go   
07C6   00 00                  DW   NUL   
07C8   D0 07                  DW   arrayIterM_1703S1284   
07CA   CC 07                  DW   $+2   
07CC   01                     DB   1   
07CD   02 61 4C               .PSTR   "aL"   
07D0                ARRAYITERM_1703S1284:      
07D0   7B                     DB   "{"   
07D1   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
07E1   5C 6B 74 7B            DB   "\\kt{"   
07E5   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07ED   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
07F3   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
07FB   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
0803   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
080A   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0812   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
081B   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/f %L1;= 0 2}"   ; ifte: /t value, /f active = false, quit
0832   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
0839   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0840   7D                     DB   "}"   
0841   7D                     DB   "}"   
0842   00                     DB   0   
0843                             ; /si stringIter
0843                             ; string* -- src
0843                          ;*Macro unroll: FUNC stringIter, 1, "sL"
0843                STRINGITER:      
0843   CD 9F 03               CALL   go   
0846   00 00                  DW   NUL   
0848   50 08                  DW   stringIterM_1722S1304   
084A   4C 08                  DW   $+2   
084C   01                     DB   1   
084D   02 73 4C               .PSTR   "sL"   
0850                STRINGITERM_1722S1304:      
0850   7B                     DB   "{"   
0851   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
085B   5C 6B 74 7B            DB   "\\kt{"   
085F   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0867   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
086E   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
0876   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
087E   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0885   2F 62 6D 20 25 73 25 69 3B 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i; /wm %c="   ; read byte at i, store in c as word
0896   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
089E   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08A5   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
08B9   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
08C0   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08C7   7D                     DB   "}"   
08C8   7D                     DB   "}"   
08C9   00                     DB   0   
08CA                             ; /mp map
08CA                             ; src func -- src1
08CA                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
08CA                MAP:         ; map: source, function
08CA   CD 9F 03               CALL   go   
08CD   00 00                  DW   NUL   
08CF   D7 08                  DW   mapM_1742S1326   
08D1   D3 08                  DW   $+2   
08D3   00                     DB   0   
08D4   02 73 66               .PSTR   "sf"   
08D7                MAPM_1742S1326:      
08D7   7B                     DB   "{"   
08D8   5C 6B 74 7B            DB   "\\kt{"   
08DC   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08E4   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
08E8   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
08ED   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
08F9   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0901   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0908   7D                     DB   "}"   
0909   7D                     DB   "}"   
090A   00                     DB   0   
090B                             ; /ft filter
090B                             ; src pred -- src1
090B                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
090B                FILTER:      ; filter: source, predicate, local: T
090B   CD 9F 03               CALL   go   
090E   00 00                  DW   NUL   
0910   19 09                  DW   filterM_1756S1341   
0912   14 09                  DW   $+2   
0914   01                     DB   1   
0915   03 73 70 54            .PSTR   "spT"   
0919                FILTERM_1756S1341:      
0919   7B                     DB   "{"   
091A   5B 30 5D 25 54 3D      DB   "[0]%T="   
0920   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0924   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0928   5B                     DB   "["   
0929   7B 25 64 20 25 54 30 3B 3D 20 2F 74 7D DB   "{%d %T0;= /t}"   ; case 0: store talkback in T[0], return true
0936   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
093E   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
0942   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
0947   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
095D   3F                     DB   "?"   
095E   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0965   7D                     DB   "}"   
0966   7D                     DB   "}"   
0967   00                     DB   0   
0968                             ; /fd fold
0968                             ; reducer is a function like: \\da00bbLi4u
0968                             ; src init reducer -- src1
0968                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0968                FOLD:        ; src, init, reducer
0968   CD 9F 03               CALL   go   
096B   00 00                  DW   NUL   
096D   77 09                  DW   foldM_1775S1361   
096F   71 09                  DW   $+2   
0971   01                     DB   1   
0972   04 73 69 72 41         .PSTR   "sirA"   
0977                FOLDM_1775S1361:      
0977   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0978   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
097F   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0983   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0987   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
098C   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
09A7   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09AF   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09B6   7D                     DB   "}"   
09B7   7D                     DB   "}"   
09B8   00                     DB   0   
09B9                             ; /fe forEach
09B9                             ; src proc --
09B9                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
09B9                FOREACH:      ; forEach: source, procedure, local: T
09B9   CD 9F 03               CALL   go   
09BC   00 00                  DW   NUL   
09BE   C7 09                  DW   forEachM_1789S1376   
09C0   C2 09                  DW   $+2   
09C2   01                     DB   1   
09C3   03 73 70 54            .PSTR   "spT"   
09C7                FOREACHM_1789S1376:      
09C7   7B                     DB   "{"   
09C8   5B 30 5D 25 54 3D      DB   "[0]%T="   
09CE   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
09D2   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
09DA   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
09DF   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
09F1   3F                     DB   "?"   ; ifte:
09F2   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
09FB   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A02   7D                     DB   "}"   
0A03   00                     DB   0   
0A04                             ; ; /fs funcSrc
0A04                             ; ; func -- src
0A04                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A04                FUNCSRC:      ; :f func or block
0A04   CD 9F 03               CALL   go   
0A07   00 00                  DW   NUL   
0A09   10 0A                  DW   funcSrcM_1803S1391   
0A0B   0D 0A                  DW   $+2   
0A0D   00                     DB   0   
0A0E   01 66                  .PSTR   "f"   
0A10                FUNCSRCM_1803S1391:      
0A10   7B                     DB   "{"   
0A11   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A15   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A1D   5C 64 74 7B            DB   "\\dt{"   
0A21   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A33   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A3A   7D                     DB   "}"   
0A3B   7D                     DB   "}"   
0A3C   00                     DB   0   
0A3D                          ;*Macro unroll: FUNC printArray, 2, "abc"
0A3D                PRINTARRAY:      
0A3D   CD 9F 03               CALL   go   
0A40   00 00                  DW   NUL   
0A42   4B 0A                  DW   printArrayM_1813S1402   
0A44   46 0A                  DW   $+2   
0A46   02                     DB   2   
0A47   03 61 62 63            .PSTR   "abc"   
0A4B                PRINTARRAYM_1813S1402:      
0A4B   7B                     DB   "{"   
0A4C   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b ;. %b ++ %b %c </br)^ ']'.s"   
0A83   7D                     DB   "}"   
0A84   00                     DB   0   
0A85                             ;*******************************************************************
0A85                             ; implementations continued
0A85                             ;*******************************************************************
0A85                COMMA:       
0A85   CD FC 0E               CALL   cmdTable   
0A88   63 00                  DB   "c",NUL   ; .c print char
0A8A   94 0A                  DW   readChar   
0A8C   73 00                  DB   "s",NUL   ; .s print string
0A8E   9D 0A                  DW   readString   
0A90   00 00                  DW   NUL   ; .  print number, fall through
0A92   BF 0A                  DW   readNumber   
0A94                READCHAR:      
0A94   CD 81 00               CALL   getchar   
0A97   26 00                  LD   h,0   
0A99   6F                     LD   l,a   
0A9A   E5                     PUSH   hl   
0A9B   DD E9                  JP   (ix)   
0A9D                READSTRING:      
0A9D   ED 5B EA 23            LD   de,(vHeapPtr)   
0AA1   D5                     PUSH   de   ; return start of string
0AA2                READSTRING1:      
0AA2   CD 81 00               CALL   getchar   
0AA5   FE 0D                  CP   "\r"   
0AA7   28 0D                  JR   z,readString2   
0AA9   12                     LD   (de),a   
0AAA   13                     INC   de   
0AAB   3A F1 23               LD   a,(vEcho)   
0AAE   3C                     INC   a   
0AAF   20 F1                  JR   nz,readString1   
0AB1   CD 85 00               CALL   putchar   
0AB4   18 EC                  JR   readString1   
0AB6                READSTRING2:      
0AB6   AF                     XOR   a   
0AB7   12                     LD   (de),a   
0AB8   13                     INC   de   
0AB9   ED 53 EA 23            LD   (vHeapPtr),de   
0ABD   DD E9                  JP   (ix)   
0ABF                READNUMBER:      
0ABF   DD E5                  PUSH   ix   
0AC1                          ;*Macro unroll:  PERFORM readString
0AC1   DD 21 C8 0A            LD   ix,performM_1857S1451   
0AC5   C3 9D 0A               JP   readString   
0AC8                PERFORMM_1857S1451:      
0AC8   60 69                  LD   hl,bc   ; save bc, hl = string*
0ACA   E3                     EX   (sp),hl   
0ACB   22 EA 23               LD   (vHeapPtr),hl   ; restore heap* to before string
0ACE   44 4D                  LD   bc,hl   
0AD0   0A                     LD   a,(bc)   
0AD1   FE 2D                  CP   "-"   
0AD3   28 11                  JR   z,readNumber1   
0AD5   FE 24                  CP   "$"   
0AD7   28 17                  JR   z,readNumber2   
0AD9   FE 30                  CP   "0"   
0ADB   30 09                  JR   nc,readNumber1   
0ADD   FE 3A                  CP   "9"+1   
0ADF   38 05                  JR   c,readNumber1   
0AE1   21 00 00               LD   hl,0   
0AE4   18 12                  JR   readNumber3   
0AE6                READNUMBER1:      
0AE6                          ;*Macro unroll:  PERFORM num
0AE6   DD 21 ED 0A            LD   ix,performM_1874S1468   
0AEA   C3 81 0B               JP   num   
0AED                PERFORMM_1874S1468:      
0AED   E1                     POP   hl   
0AEE   18 08                  JR   readNumber3   
0AF0                READNUMBER2:      
0AF0                          ;*Macro unroll:  PERFORM hexNum
0AF0   DD 21 F7 0A            LD   ix,performM_1878S1472   
0AF4   C3 08 0B               JP   hexNum   
0AF7                PERFORMM_1878S1472:      
0AF7   E1                     POP   hl   
0AF8                READNUMBER3:      
0AF8   C1                     POP   bc   
0AF9   DD E1                  POP   ix   
0AFB   E5                     PUSH   hl   
0AFC   DD E9                  JP   (ix)   
0AFE                             ; ~ bitwise invert
0AFE                TILDE:       
0AFE                INVERT:      
0AFE   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0AFF   7D                     LD   a,l   
0B00   2F                     CPL      
0B01   6F                     LD   l,a   
0B02   7C                     LD   a,h   
0B03   2F                     CPL      
0B04   67                     LD   h,a   
0B05   C3 D8 02               JP   add3   
0B08                             ; $ hex                         ; 22
0B08                DOLLAR:      
0B08                HEXNUM:      
0B08   21 00 00               LD   hl,0   ; Clear hl to accept the number
0B0B                HEXNUM1:      
0B0B   03                     INC   bc   
0B0C   0A                     LD   a,(bc)   ; Get the character which is a numeral
0B0D   CB 77                  BIT   6,a   ; is it uppercase alpha?
0B0F   28 02                  JR   z,hexnum2   ; no a decimal
0B11   D6 07                  SUB   7   ; sub 7  to make $a - $F
0B13                HEXNUM2:      
0B13   D6 30                  SUB   $30   ; form decimal digit
0B15   DA A3 0B               JP   c,num2   
0B18   FE 10                  CP   $0F+1   
0B1A   D2 A3 0B               JP   nc,num2   
0B1D   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0B1E   29                     ADD   hl,hl   ; 4X
0B1F   29                     ADD   hl,hl   ; 8X
0B20   29                     ADD   hl,hl   ; 16X
0B21   85                     ADD   a,l   ; add into bottom of hl
0B22   6F                     LD   l,a   
0B23   18 E6                  JR   hexnum1   
0B25                             ; ? if                            23
0B25                             ; condition then else -- value
0B25                QUESTION:      
0B25                IF:          
0B25   D1                     POP   de   ; de = else
0B26   E1                     POP   hl   ; hl = then
0B27   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0B28   7C                     LD   a,h   
0B29   B5                     OR   l   
0B2A   E1                     POP   hl   ; hl = then
0B2B   CA A0 03               JP   z,go1   ; if z de = else
0B2E   EB                     EX   de,hl   ; condition = false, de = then
0B2F   C3 A0 03               JP   go1   
0B32                             ; string                        ;38
0B32                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0B32                QUOTE:       
0B32                STRING:      
0B32   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B35   E5                     PUSH   hl   ; save start of string
0B36   0A                     LD   a,(bc)   
0B37   5F                     LD   e,a   ; e = matching terminator
0B38   03                     INC   bc   ; point to next char
0B39   18 03                  JR   string2   
0B3B                STRING1:      
0B3B   77                     LD   (hl),a   
0B3C   23                     INC   hl   ; increase count
0B3D   03                     INC   bc   ; point to next char
0B3E                STRING2:      
0B3E   0A                     LD   a,(bc)   
0B3F   BB                     CP   e   ; is it the string terminator
0B40   28 02                  JR   z,string3   
0B42   18 F7                  JR   string1   
0B44                STRING3:      
0B44   AF                     XOR   a   ; write NUL to terminate string
0B45   77                     LD   (hl),a   ; hl = end of string
0B46   23                     INC   hl   
0B47   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B4A   DD E9                  JP   (ix)   
0B4C                             ; %a .. %z                      43
0B4C                             ; -- value
0B4C                             ; returns value of arg
0B4C                PERCENT:      
0B4C                ARG:         
0B4C   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0B4F   FD 56 05               LD   d,(iy+5)   
0B52   EB                     EX   de,hl   
0B53   7D                     LD   a,l   ; arg_list* == null, skip
0B54   B4                     OR   h   
0B55   28 1A                  JR   z,arg0a   
0B57   23                     INC   hl   ; a = num_args, hl = arg_list*
0B58   7E                     LD   a,(hl)   
0B59   23                     INC   hl   
0B5A   B7                     OR   a   
0B5B   28 14                  JR   z,arg0a   ; num_args == 0, skip
0B5D   5F                     LD   e,a   ; e = a = num_args
0B5E   03                     INC   bc   ; a = next char = dollar_name
0B5F   0A                     LD   a,(bc)   
0B60   C5                     PUSH   bc   ; save IP
0B61   43                     LD   b,e   ; b = e = num_args
0B62   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0B65   FD 56 03               LD   d,(iy+3)   
0B68                ARG0:        
0B68   1B                     DEC   de   ; a = dollar_name, de = next arg*
0B69   1B                     DEC   de   
0B6A   BE                     CP   (hl)   
0B6B   28 09                  JR   z,arg1   
0B6D   23                     INC   hl   ; hl = next arg_list*
0B6E   10 F8                  DJNZ   arg0   
0B70   C1                     POP   bc   ; no match, restore IP
0B71                ARG0A:       
0B71   11 00 00               LD   de,0   ; return 0
0B74   18 08                  JR   arg1a   
0B76                ARG1:        
0B76   C1                     POP   bc   ; restore IP
0B77   EB                     EX   de,hl   ; hl = arg*
0B78   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0B7B   5E                     LD   e,(hl)   
0B7C   23                     INC   hl   
0B7D   56                     LD   d,(hl)   ; de = arg
0B7E                ARG1A:       
0B7E   D5                     PUSH   de   ; push arg
0B7F   DD E9                  JP   (ix)   
0B81                             ; 0..9 number                   37
0B81                NUM:         
0B81   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B84   0A                     LD   a,(bc)   ; Get numeral or -
0B85   FE 2D                  CP   "-"   
0B87   20 01                  JR   nz,num0   
0B89   03                     INC   bc   ; move to next char, no flags affected
0B8A                NUM0:        
0B8A   08                     EX   af,af'   ; save zero flag = 0 for later
0B8B                NUM1:        
0B8B   0A                     LD   a,(bc)   ; read digit
0B8C   D6 30                  SUB   "0"   ; less than 0?
0B8E   38 13                  JR   c,num2   ; not a digit, exit loop
0B90   FE 0A                  CP   10   ; greater that 9?
0B92   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B94   03                     INC   bc   ; inc IP
0B95   54 5D                  LD   de,hl   ; multiply hl * 10
0B97   29                     ADD   hl,hl   
0B98   29                     ADD   hl,hl   
0B99   19                     ADD   hl,de   
0B9A   29                     ADD   hl,hl   
0B9B   85                     ADD   a,l   ; add digit in a to hl
0B9C   6F                     LD   l,a   
0B9D   3E 00                  LD   a,0   
0B9F   8C                     ADC   a,h   
0BA0   67                     LD   h,a   
0BA1   18 E8                  JR   num1   
0BA3                NUM2:        
0BA3   0B                     DEC   bc   
0BA4   08                     EX   af,af'   ; restore zero flag
0BA5   20 07                  JR   nz,num3   
0BA7   EB                     EX   de,hl   ; negate the value of hl
0BA8   21 00 00               LD   hl,0   
0BAB   B7                     OR   a   ; jump to sub2
0BAC   ED 52                  SBC   hl,de   
0BAE                NUM3:        
0BAE   E5                     PUSH   hl   ; Put the number on the stack
0BAF   DD E9                  JP   (ix)   ; and process the next character
0BB1                             ; }                               58
0BB1                RBRACE:      
0BB1                BLOCKEND:      
0BB1   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BB4   FD 56 01               LD   d,(iy+1)   
0BB7   ED 53 04 24            LD   (vTemp1),de   
0BBB   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BBE   FD 56 07               LD   d,(iy+7)   
0BC1   ED 53 06 24            LD   (vTemp2),de   
0BC5   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BC8   FD 56 03               LD   d,(iy+3)   
0BCB   EB                     EX   de,hl   
0BCC   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BCF   FD 56 01               LD   d,(iy+1)   
0BD2   13                     INC   de   ; for carry flag <=
0BD3   B7                     OR   a   
0BD4   ED 52                  SBC   hl,de   
0BD6   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BD8   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BDA   FD 5D                  LD   e,iyl   
0BDC   21 08 00               LD   hl,8   
0BDF   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BE0   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BE1   18 0C                  JR   blockEnd2   
0BE3                BLOCKEND1:      ; same scope
0BE3   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BE6   FD 56 03               LD   d,(iy+3)   
0BE9   EB                     EX   de,hl   
0BEA   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BEC   FD 5D                  LD   e,iyl   
0BEE   EB                     EX   de,hl   
0BEF                BLOCKEND2:      
0BEF   44 4D                  LD   bc,hl   ; bc = hl = BP
0BF1   B7                     OR   a   ; hl = BP - SP = count
0BF2   ED 72                  SBC   hl,sp   
0BF4   7D                     LD   a,l   
0BF5   B4                     OR   h   
0BF6   28 09                  JR   z,blockEnd3   
0BF8   C5                     PUSH   bc   ; bc = count, hl = BP
0BF9   44 4D                  LD   bc,hl   
0BFB   E1                     POP   hl   
0BFC   2B                     DEC   hl   ; hl = BP-1
0BFD   1B                     DEC   de   ; de = args*-1
0BFE   ED B8                  LDDR      
0C00   13                     INC   de   
0C01                BLOCKEND3:      
0C01   EB                     EX   de,hl   ; sp = de = new tos*
0C02   F9                     LD   sp,hl   
0C03   ED 4B 06 24            LD   bc,(vTemp2)   
0C07   FD 2A 04 24            LD   iy,(vTemp1)   
0C0B   ED 5B EC 23            LD   de,(vRecurPtr)   ; de = recur vector
0C0F   7B                     LD   a,e   ; check for NUL
0C10   B2                     OR   d   
0C11   20 02                  JR   nz,blockEnd4   
0C13   DD E9                  JP   (ix)   
0C15                BLOCKEND4:      
0C15   21 00 00               LD   hl,0   ; clear recur vector
0C18   22 EC 23               LD   (vRecurPtr),hl   
0C1B   C3 A0 03               JP   go1   ; execute de
0C1E                GOBLOCK:      
0C1E   ED 53 04 24            LD   (vTemp1),de   ; save de
0C22   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C25   FD 54                  LD   d,iyh   
0C27   FD 5D                  LD   e,iyl   
0C29   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C2A   ED 52                  SBC   hl,de   
0C2C   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C30   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C31   B4                     OR   h   
0C32   3E 00                  LD   a,0   
0C34   28 6A                  JR   z,goFunc8   
0C36   C5                     PUSH   bc   ; push IP
0C37   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C3A   FD 46 05               LD   b,(iy+5)   
0C3D   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C40   FD 66 03               LD   h,(iy+3)   
0C43                GOBLOCK2:      
0C43   C5                     PUSH   bc   ; arg_list*
0C44   E5                     PUSH   hl   ; first_arg*
0C45   FD E5                  PUSH   iy   ; push BP
0C47   FD 21 00 00            LD   iy,0   ; BP = SP
0C4B   FD 39                  ADD   iy,sp   
0C4D                GOBLOCK3:      
0C4D   42 4B                  LD   bc,de   ; bc = de = block*-1
0C4F   DD E9                  JP   (ix)   
0C51                GOFUNC:      ; execute func
0C51   EB                     EX   de,hl   ; hl = func*
0C52   5E                     LD   e,(hl)   ; de = partial_array*
0C53   23                     INC   hl   
0C54   56                     LD   d,(hl)   
0C55   23                     INC   hl   
0C56   7B                     LD   a,e   ; if partial_array* == null skip
0C57   B2                     OR   d   
0C58   28 21                  JR   z,goFunc3   
0C5A   ED 43 04 24            LD   (vTemp1),bc   
0C5E   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C61   EB                     EX   de,hl   ; hl = partial_array*
0C62   2B                     DEC   hl   ; bc = count
0C63   46                     LD   b,(hl)   
0C64   2B                     DEC   hl   
0C65   4E                     LD   c,(hl)   
0C66   23                     INC   hl   ; hl = array data*
0C67   23                     INC   hl   
0C68   18 06                  JR   goFunc2   ; push each item on stack
0C6A                GOFUNC1:      
0C6A   5E                     LD   e,(hl)   ; de = partial item
0C6B   23                     INC   hl   
0C6C   56                     LD   d,(hl)   
0C6D   23                     INC   hl   
0C6E   D5                     PUSH   de   ; push on stack
0C6F   0B                     DEC   bc   
0C70                GOFUNC2:      
0C70   79                     LD   a,c   ; if count != 0 then loop
0C71   B0                     OR   b   
0C72   20 F6                  JR   nz,goFunc1   
0C74   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C78   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C7B                GOFUNC3:      
0C7B   5E                     LD   e,(hl)   ; de = block*
0C7C   23                     INC   hl   
0C7D   56                     LD   d,(hl)   
0C7E   23                     INC   hl   
0C7F   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C83   5E                     LD   e,(hl)   ; de = arg_list*
0C84   23                     INC   hl   
0C85   56                     LD   d,(hl)   
0C86   23                     INC   hl   
0C87   EB                     EX   de,hl   ; hl = arg_list*
0C88   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C8C   7D                     LD   a,l   ; if arg_list* == null a = 0
0C8D   B4                     OR   h   
0C8E   20 03                  JR   nz,goFunc4   
0C90   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C91   18 0D                  JR   goFunc8   
0C93                GOFUNC4:      ; allocate locals
0C93   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0C94   18 03                  JR   goFunc6   
0C96                GOFUNC5:      ; loop
0C96   3B                     DEC   sp   
0C97   3B                     DEC   sp   
0C98   3D                     DEC   a   
0C99                GOFUNC6:      
0C99   B7                     OR   a   
0C9A   20 FA                  JR   nz,goFunc5   ; end loop
0C9C                GOFUNC7:      
0C9C   23                     INC   hl   ; a = num_args* x 2
0C9D   7E                     LD   a,(hl)   
0C9E   2B                     DEC   hl   
0C9F   87                     ADD   a,a   ; a *= 2
0CA0                GOFUNC8:      
0CA0   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0CA1   44 4D                  LD   bc,hl   
0CA3   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CA6   85                     ADD   a,l   
0CA7   6F                     LD   l,a   
0CA8   39                     ADD   hl,sp   
0CA9   18 98                  JR   goBlock2   
0CAB                             ; =                              21
0CAB                             ; value _oldValue --            ; uses address in vPointer 15
0CAB                ASSIGN:      
0CAB   E1                     POP   hl   ; discard last accessed value
0CAC   E1                     POP   hl   ; hl = new value
0CAD                ASSIGN0:      
0CAD   EB                     EX   de,hl   ; de = new value
0CAE   2A F8 23               LD   hl,(vPointer)   
0CB1                ASSIGN1:      ; entry point from defineEnd
0CB1   73                     LD   (hl),e   
0CB2   3A EE 23               LD   a,(vDataWidth)   
0CB5   3D                     DEC   a   ; is it byte?
0CB6   28 02                  JR   z,assign2   
0CB8   23                     INC   hl   
0CB9   72                     LD   (hl),d   
0CBA                ASSIGN2:      
0CBA   DD E9                  JP   (ix)   
0CBC                             ; hl = value1, de = value2
0CBC                             ; hl = result
0CBC                EQUALS:      
0CBC   B7                     OR   a   ; reset the carry flag
0CBD   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0CBF   28 16                  JR   z,true1   
0CC1   18 1A                  JR   false1   
0CC3                NOTEQUALS:      
0CC3   B7                     OR   a   ; reset the carry flag
0CC4   ED 52                  SBC   hl,de   
0CC6   20 0F                  JR   nz,true1   
0CC8   18 13                  JR   false1   
0CCA                             ; hl = value1 de = value2
0CCA                             ; hl = result
0CCA                LESSTHANEQ:      
0CCA   B7                     OR   a   
0CCB   ED 52                  SBC   hl,de   
0CCD   18 05                  JR   lessthan1   
0CCF                             ; hl = value1 de = value2
0CCF                             ; hl = result
0CCF                LESSTHAN:      
0CCF   B7                     OR   a   
0CD0   ED 52                  SBC   hl,de   
0CD2   28 09                  JR   z,false1   
0CD4                LESSTHAN1:      
0CD4   FA DD 0C               JP   m,false1   
0CD7                TRUE1:       
0CD7   21 FF FF               LD   hl,TRUE   
0CDA   E5                     PUSH   hl   
0CDB   DD E9                  JP   (ix)   
0CDD                NULL1:       
0CDD                FALSE1:      
0CDD   21 00 00               LD   hl,FALSE   
0CE0   E5                     PUSH   hl   
0CE1   DD E9                  JP   (ix)   
0CE3                SPREAD:      
0CE3   E1                     POP   hl   ; hl = array*
0CE4   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0CE8   2B                     DEC   hl   ; bc = length
0CE9   46                     LD   b,(hl)   
0CEA   2B                     DEC   hl   
0CEB   4E                     LD   c,(hl)   
0CEC   23                     INC   hl   ; move back to array 0
0CED   23                     INC   hl   
0CEE   18 0D                  JR   spread3   
0CF0                SPREAD1:      
0CF0   5E                     LD   e,(hl)   ; e = lsb data at hl
0CF1   23                     INC   hl   
0CF2   3A EE 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0CF5   57                     LD   d,a   
0CF6   15                     DEC   d   
0CF7   28 02                  JR   z,spread2   
0CF9   56                     LD   d,(hl)   ; d = msb data at hl
0CFA   23                     INC   hl   
0CFB                SPREAD2:      
0CFB   D5                     PUSH   de   ; return de
0CFC   0B                     DEC   bc   ; count--
0CFD                SPREAD3:      
0CFD   79                     LD   a,c   ; exit loop if bc == 0
0CFE   B0                     OR   b   
0CFF   20 EF                  JR   nz,spread1   
0D01   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0D05   DD E9                  JP   (ix)   
0D07                             ; shiftLeft
0D07                             ; value count <<
0D07                             ; count variable <<=
0D07                SHIFTLEFT:      
0D07   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D08   D1                     POP   de   
0D09   03                     INC   bc   
0D0A   0A                     LD   a,(bc)   
0D0B   FE 3D                  CP   "="   
0D0D   28 02                  JR   z,shiftLeft2   
0D0F   0B                     DEC   bc   
0D10   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0D11                SHIFTLEFT2:      
0D11   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D15   43                     LD   b,e   ; b = loop counter
0D16   04                     INC   b   ; test for counter=0 case
0D17   18 01                  JR   shiftLeft4   
0D19                SHIFTLEFT3:      
0D19   29                     ADD   hl,hl   ; left shift hl
0D1A                SHIFTLEFT4:      
0D1A   10 FD                  DJNZ   shiftLeft3   
0D1C   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D20   C3 9D 02               JP   sub3   
0D23                             ; shiftRight
0D23                             ; value count >>
0D23                             ; count variable >>=
0D23                SHIFTRIGHT:      
0D23   E1                     POP   hl   ; de = arg_a, hl = arg_b
0D24   D1                     POP   de   
0D25   03                     INC   bc   
0D26   0A                     LD   a,(bc)   
0D27   FE 3D                  CP   "="   
0D29   28 02                  JR   z,shiftRight2   
0D2B   0B                     DEC   bc   
0D2C   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0D2D                SHIFTRIGHT2:      
0D2D   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D31   43                     LD   b,e   ; b = loop counter
0D32   04                     INC   b   ; test for counter=0 case
0D33   18 04                  JR   shiftRight4   
0D35                SHIFTRIGHT3:      
0D35   CB 3C                  SRL   h   ; right shift hl
0D37   CB 1D                  RR   l   
0D39                SHIFTRIGHT4:      
0D39   10 FA                  DJNZ   shiftRight3   
0D3B   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D3F   C3 9D 02               JP   sub3   
0D42                             ; division subroutine.
0D42                             ; bc: divisor, de: dividend, hl: remainder
0D42                DIVIDE:      
0D42   21 00 00               LD   hl,0   ; zero the remainder
0D45   3E 10                  LD   a,16   ; loop counter
0D47                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0D47   CB 21                  SLA   c   
0D49   CB 10                  RL   b   
0D4B   ED 6A                  ADC   hl,hl   
0D4D   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0D4F   38 03                  JR   c,divide2   
0D51   0C                     INC   c   
0D52   18 01                  JR   divide3   
0D54                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0D54   19                     ADD   hl,de   
0D55                DIVIDE3:      
0D55   3D                     DEC   a   
0D56   20 EF                  JR   nz,divide1   
0D58   50 59                  LD   de,bc   ; result from bc to de
0D5A   C9                     RET      
0D5B                DOTNEXT:      
0D5B   3A F2 23               LD   a,(vStrMode)   ; if string mode then exit
0D5E   3C                     INC   a   
0D5F   20 02                  JR   nz,dotNext1   
0D61   DD E9                  JP   (ix)   
0D63                DOTNEXT1:      
0D63   11 00 22               LD   de,BUFFER   
0D66   2A E8 23               LD   hl,(vBufPtr)   
0D69   36 00                  LD   (hl),0   ; store NUL at end of string
0D6B   ED 53 E8 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0D6F   EB                     EX   de,hl   ; hl = BUFFER
0D70   CD 38 0F               CALL   putstr   
0D73   DD E9                  JP   (ix)   
0D75                             ; arg_list - parses arg_list e.g. ab:c
0D75                             ; -- arg_list*
0D75                PARSEARGS:      
0D75   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0D78   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0D7B   E5                     PUSH   hl   ; save start of arg_list
0D7C   23                     INC   hl   ; skip length fields to start of string
0D7D   23                     INC   hl   
0D7E   03                     INC   bc   ; point to next char
0D7F                PARSEARGS1:      
0D7F   0A                     LD   a,(bc)   
0D80   FE 3A                  CP   ":"   ; ":" switches from args to locals
0D82   20 03                  JR   nz,parseArgs1a   
0D84   14                     INC   d   ; non zero value local count acts as flag
0D85   18 10                  JR   parseArgs3   
0D87                PARSEARGS1A:      
0D87   FE 61                  CP   "a"   ; < "a" terminates arg_list
0D89   38 0F                  JR   c,parseArgs4   
0D8B   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0D8D   30 0B                  JR   nc,parseArgs4   
0D8F                PARSEARGS2:      
0D8F   77                     LD   (hl),a   
0D90   23                     INC   hl   
0D91   1C                     INC   e   ; increase arg count
0D92   AF                     XOR   a   
0D93   B2                     OR   d   
0D94   28 01                  JR   z,parseArgs3   
0D96   14                     INC   d   ; if d > 0 increase local count
0D97                PARSEARGS3:      
0D97   03                     INC   bc   ; point to next char
0D98   18 E5                  JR   parseArgs1   
0D9A                PARSEARGS4:      
0D9A   0B                     DEC   bc   
0D9B   AF                     XOR   a   
0D9C   B2                     OR   d   
0D9D   28 01                  JR   z,parseArgs5   
0D9F   15                     DEC   d   ; remove initial inc
0DA0                PARSEARGS5:      
0DA0   23                     INC   hl   
0DA1   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0DA4   E1                     POP   hl   ; hl = start of arg_list
0DA5   72                     LD   (hl),d   ; write number of locals at start - 1
0DA6   23                     INC   hl   
0DA7   73                     LD   (hl),e   ; write number of args + locals at start - 2
0DA8   2B                     DEC   hl   
0DA9   E3                     EX   (sp),hl   
0DAA   E9                     JP   (hl)   
0DAB                             ; create block: parses block e.g. 00bbIC4uLi4g
0DAB                             ; -- block*
0DAB                PARSEBLOCK:      
0DAB   C5                     PUSH   bc   ; return pointer to first { of block
0DAC   03                     INC   bc   
0DAD   16 01                  LD   d,1   ; nesting: count first parenthesis
0DAF                PARSEBLOCK1:      ; Skip to end of definition
0DAF   0A                     LD   a,(bc)   ; Get the next character
0DB0   03                     INC   bc   ; Point to next character
0DB1   FE 21                  CP   " " + 1   ; ignore whitespace
0DB3   38 FA                  JR   c,parseBlock1   
0DB5   FE 27                  CP   "'"   ; quote char
0DB7   28 0F                  JR   z,parseBlock2   
0DB9   FE 22                  CP   DQ   ; double quote char
0DBB   28 0B                  JR   z,parseBlock2   
0DBD   FE 60                  CP   "`"   ; grave char
0DBF   28 07                  JR   z,parseBlock2   
0DC1   CB 7A                  BIT   7,d   
0DC3   20 EA                  JR   nz,parseBlock1   
0DC5   C3 CE 0D               JP   parseBlock3   
0DC8                PARSEBLOCK2:      
0DC8   3E 80                  LD   a,$80   
0DCA   AA                     XOR   d   
0DCB   57                     LD   d,a   
0DCC   18 E1                  JR   parseBlock1   
0DCE                PARSEBLOCK3:      
0DCE   FE 28                  CP   "("   
0DD0   28 16                  JR   z,parseBlock4   
0DD2   FE 7B                  CP   "{"   
0DD4   28 12                  JR   z,parseBlock4   
0DD6   FE 5B                  CP   "["   
0DD8   28 0E                  JR   z,parseBlock4   
0DDA   FE 29                  CP   ")"   
0DDC   28 0D                  JR   z,parseBlock5   
0DDE   FE 7D                  CP   "}"   
0DE0   28 09                  JR   z,parseBlock5   
0DE2   FE 5D                  CP   "]"   
0DE4   28 05                  JR   z,parseBlock5   
0DE6   18 C7                  JR   parseBlock1   
0DE8                PARSEBLOCK4:      
0DE8   14                     INC   d   
0DE9   18 C4                  JR   parseBlock1   
0DEB                PARSEBLOCK5:      
0DEB   15                     DEC   d   
0DEC   20 C1                  JR   nz,parseBlock1   ; get the next element
0DEE   60 69                  LD   hl,bc   ; hl = IP
0DF0   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0DF3   B7                     OR   a   ; IP - HEAP
0DF4   ED 52                  SBC   hl,de   
0DF6   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0DF8   28 1C                  JR   z,parseBlock6   
0DFA   60 69                  LD   hl,bc   ; hl = IP
0DFC   D1                     POP   de   ; de = block*
0DFD   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0E01   B7                     OR   a   ; bc = size
0E02   ED 52                  SBC   hl,de   
0E04   44 4D                  LD   bc,hl   
0E06   EB                     EX   de,hl   ; hl = block* de = heap*
0E07   ED 5B EA 23            LD   de,(vHeapPtr)   
0E0B   D5                     PUSH   de   ; return hblock*
0E0C   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0E0E   ED 53 EA 23            LD   (vHeapPtr),de   ; heap* += size
0E12   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E16                PARSEBLOCK6:      
0E16   0B                     DEC   bc   ; balanced, exit
0E17   E1                     POP   hl   ; hl = block*
0E18   E3                     EX   (sp),hl   ; return to caller
0E19   E9                     JP   (hl)   
0E1A                             ; create function
0E1A                             ; arg_list* block* -- func*
0E1A                CREATEFUNC:      
0E1A   E1                     POP   hl   ; save retrn address
0E1B   22 08 24               LD   (vTemp3),hl   
0E1E   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0E22   E1                     POP   hl   ; hl = block*
0E23   22 06 24               LD   (vTemp2),hl   ; save block*
0E26   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0E29   FD 56 05               LD   d,(iy+5)   
0E2C   7B                     LD   a,e   ; if arg_list == null then make a func
0E2D   B2                     OR   d   
0E2E   20 09                  JR   nz,createFunc0   
0E30   21 00 00               LD   hl,0   ; partial_array = null
0E33   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0E37   18 65                  JR   createFunc5   
0E39                CREATEFUNC0:      
0E39   E1                     POP   hl   ; hl = inner_arg_list*
0E3A   E5                     PUSH   hl   ; save inner_arg_list
0E3B   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0E3F   7E                     LD   a,(hl)   ; compile inner_num_locals
0E40   4F                     LD   c,a   ; b = inner_num_locals
0E41   12                     LD   (de),a   
0E42   23                     INC   hl   
0E43   13                     INC   de   
0E44   7E                     LD   a,(hl)   ; compile inner_length
0E45   12                     LD   (de),a   
0E46   91                     SUB   c   ; a = inner_num args
0E47   23                     INC   hl   
0E48   13                     INC   de   
0E49   B7                     OR   a   ; compile args if inner_length > 0
0E4A   28 05                  JR   z,createFunc1   
0E4C   4F                     LD   c,a   ; bc = a
0E4D   06 00                  LD   b,0   
0E4F   ED B0                  LDIR      
0E51                CREATEFUNC1:      
0E51   EB                     EX   de,hl   ; hl = outer_arg_list
0E52   FD 5E 04               LD   e,(iy+4)   
0E55   FD 56 05               LD   d,(iy+5)   
0E58   EB                     EX   de,hl   
0E59   23                     INC   hl   ; a = outer_length
0E5A   7E                     LD   a,(hl)   
0E5B   23                     INC   hl   
0E5C   B7                     OR   a   
0E5D   28 05                  JR   z,createFunc2   
0E5F   4F                     LD   c,a   
0E60   06 00                  LD   b,0   
0E62   ED B0                  LDIR      ; append outer_args
0E64                CREATEFUNC2:      ; a = outer_length
0E64   47                     LD   b,a   ; b = a = outer_length
0E65   2A EA 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0E68   23                     INC   hl   
0E69   7E                     LD   a,(hl)   ; add outer_length to new length
0E6A   80                     ADD   a,b   
0E6B   77                     LD   (hl),a   
0E6C   2B                     DEC   hl   
0E6D   78                     LD   a,b   ; save outer_length in a'
0E6E   08                     EX   af,af'   
0E6F   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0E70   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0E71   B7                     OR   a   
0E72   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0E74   4F                     LD   c,a   ; c = inner_num_locals
0E75   06 00                  LD   b,0   ; bc = inner_num_locals
0E77   23                     INC   hl   ; a = inner_length
0E78   7E                     LD   a,(hl)   
0E79   91                     SUB   c   ; a = inner_num_args
0E7A   23                     INC   hl   ; hl = inner_arg_chars
0E7B   85                     ADD   a,l   ; hl += a
0E7C   6F                     LD   l,a   
0E7D   3E 00                  LD   a,0   
0E7F   84                     ADD   a,h   
0E80   67                     LD   h,a   
0E81   ED B0                  LDIR      ; append inner_locals
0E83                CREATEFUNC2A:      
0E83   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0E84   12                     LD   (de),a   ; compile partial_array length field
0E85   13                     INC   de   
0E86   AF                     XOR   a   
0E87   12                     LD   (de),a   
0E88   13                     INC   de   
0E89   D5                     PUSH   de   ; push partial_array*
0E8A   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0E8B   FD 5E 02               LD   e,(iy+2)   
0E8E   FD 56 03               LD   d,(iy+3)   
0E91   EB                     EX   de,hl   
0E92                CREATEFUNC3:      
0E92   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0E93   4E                     LD   c,(hl)   
0E94   2B                     DEC   hl   
0E95   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0E96   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0E97   13                     INC   de   
0E98   79                     LD   a,c   
0E99   12                     LD   (de),a   
0E9A   13                     INC   de   
0E9B   10 F5                  DJNZ   createFunc3   ; b = outer_length
0E9D                CREATEFUNC4:      
0E9D   E1                     POP   hl   ; hl = partial_array*
0E9E                CREATEFUNC5:      
0E9E   C1                     POP   bc   ; bc = new_arg_list*
0E9F   D5                     PUSH   de   ; return new func*
0EA0   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0EA1   73                     LD   (hl),e   ; compile partial_array* to func
0EA2   23                     INC   hl   
0EA3   72                     LD   (hl),d   
0EA4   23                     INC   hl   
0EA5   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0EA9   73                     LD   (hl),e   ; compile block* to func
0EAA   23                     INC   hl   
0EAB   72                     LD   (hl),d   
0EAC   23                     INC   hl   
0EAD   71                     LD   (hl),c   ; compile new_arg_list* to func
0EAE   23                     INC   hl   
0EAF   70                     LD   (hl),b   
0EB0   23                     INC   hl   
0EB1   22 EA 23               LD   (vHeapPtr),hl   ; bump heap ptr
0EB4   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0EB8   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0EBB   E9                     JP   (hl)   
0EBC                             ;*******************************************************************
0EBC                             ; general routines
0EBC                             ;*******************************************************************
0EBC                             ; hl = address
0EBC                VARIABLE:      
0EBC   22 F8 23               LD   (vPointer),hl   
0EBF   5E                     LD   e,(hl)   
0EC0   3A EE 23               LD   a,(vDataWidth)   
0EC3   3D                     DEC   a   
0EC4   16 00                  LD   d,0   
0EC6   28 03                  JR   z,constant   
0EC8   23                     INC   hl   
0EC9   56                     LD   d,(hl)   
0ECA   2B                     DEC   hl   
0ECB                CONSTANT:      
0ECB   D5                     PUSH   de   
0ECC   DD E9                  JP   (ix)   
0ECE                             ; followed by a table
0ECE                             ; indexed on the 0-25 lowercase letter
0ECE                             ; db lsb(addr)
0ECE                             ; the final item index 26 matches any other char
0ECE                LOWERCASETABLE:      
0ECE   03                     INC   bc   
0ECF   0A                     LD   a,(bc)   
0ED0   FE 7B                  CP   "z"+1   
0ED2   30 0B                  JR   nc,lowerCaseTable2   
0ED4   D6 61                  SUB   "a"   
0ED6   38 07                  JR   c,lowerCaseTable2   
0ED8                LOWERCASETABLE1:      
0ED8   E1                     POP   hl   
0ED9   85                     ADD   a,l   
0EDA   6F                     LD   l,a   
0EDB   6E                     LD   l,(hl)   ; must have the same msb as the table
0EDC   C3 E5 0E               JP   commandTable1   
0EDF                LOWERCASETABLE2:      
0EDF   3E 1A                  LD   a,26   
0EE1   0B                     DEC   bc   
0EE2   18 F4                  JR   lowerCaseTable1   
0EE4                             ; followed by a table
0EE4                             ; db char
0EE4                             ; dw addr
0EE4                             ; the final item must have char == NUL
0EE4                COMMANDTABLE:      
0EE4   E1                     POP   hl   
0EE5                COMMANDTABLE1:      
0EE5   03                     INC   bc   
0EE6                COMMANDTABLE2:      
0EE6   AF                     XOR   a   
0EE7   BE                     CP   (hl)   
0EE8   20 03                  JR   nz,commandTable3   
0EEA   0B                     DEC   bc   
0EEB   18 09                  JR   commandTable4   
0EED                COMMANDTABLE3:      
0EED   0A                     LD   a,(bc)   
0EEE   BE                     CP   (hl)   
0EEF   28 05                  JR   z,commandTable4   
0EF1   23                     INC   hl   
0EF2   23                     INC   hl   
0EF3   23                     INC   hl   
0EF4   18 F0                  JR   commandTable2   
0EF6                COMMANDTABLE4:      
0EF6   23                     INC   hl   
0EF7   5E                     LD   e,(hl)   
0EF8   23                     INC   hl   
0EF9   56                     LD   d,(hl)   
0EFA   EB                     EX   de,hl   
0EFB   E9                     JP   (hl)   
0EFC                             ; followed by a table
0EFC                             ; db char
0EFC                             ; db char - if null only match on first char
0EFC                             ; dw addr
0EFC                             ; the final item must have char == NUL
0EFC                CMDTABLE:      
0EFC   E1                     POP   hl   
0EFD                CMDTABLE1:      
0EFD                CMDTABLE2:      
0EFD   56                     LD   d,(hl)   
0EFE   23                     INC   hl   
0EFF   5E                     LD   e,(hl)   
0F00   23                     INC   hl   
0F01   AF                     XOR   a   ; if d == 0, matched
0F02   BA                     CP   d   
0F03   28 13                  JR   z,cmdTable5   
0F05   03                     INC   bc   ; match?
0F06   0A                     LD   a,(bc)   
0F07   BA                     CP   d   
0F08   20 09                  JR   nz,cmdTable4   
0F0A                CMDTABLE3:      
0F0A   AF                     XOR   a   ; if e == 0, matched
0F0B   BB                     CP   e   
0F0C   28 0A                  JR   z,cmdTable5   
0F0E   03                     INC   bc   
0F0F   0A                     LD   a,(bc)   ; match?
0F10   BB                     CP   e   
0F11   28 05                  JR   z,cmdTable5   
0F13                CMDTABLE4:      ; no match, restore bc, go to next table entry
0F13   0B                     DEC   bc   
0F14   23                     INC   hl   
0F15   23                     INC   hl   
0F16   18 E5                  JR   cmdTable2   
0F18                CMDTABLE5:      ; matched, jump to addr
0F18   5E                     LD   e,(hl)   
0F19   23                     INC   hl   
0F1A   56                     LD   d,(hl)   
0F1B   EB                     EX   de,hl   
0F1C   E9                     JP   (hl)   
0F1D                GETVARADDR:      
0F1D   21 00 00               LD   hl,0   
0F20   FE 7B                  CP   "z"+1   ; if a > z then exit
0F22   D0                     RET   nc   
0F23   D6 41                  SUB   "A"   ; a - 65
0F25   D8                     RET   c   ; if < A then exit
0F26   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0F28   38 05                  JR   c,getVarAddr1   
0F2A   D6 06                  SUB   "a"-("Z"+1)   
0F2C   FE 1A                  CP   "Z"-"A"+1   
0F2E   D8                     RET   c   ; if < a then exit
0F2F                GETVARADDR1:      
0F2F   87                     ADD   a,a   ; double a
0F30   6F                     LD   l,a   
0F31   26 23                  LD   h,msb(VARS)   
0F33   C9                     RET      
0F34                PUTSTR0:      
0F34   CD 85 00               CALL   putchar   
0F37   23                     INC   hl   
0F38                PUTSTR:      
0F38   7E                     LD   a,(hl)   
0F39   B7                     OR   a   
0F3A   20 F8                  JR   nz,putstr0   
0F3C   C9                     RET      
0F3D                             ; **************************************************************************
0F3D                             ; calculate nesting value
0F3D                             ; a is char to be tested,
0F3D                             ; e is the nesting value (initially 0)
0F3D                             ; e is increased by ( and [
0F3D                             ; e is decreased by ) and ]
0F3D                             ; e has its bit 7 toggled by `
0F3D                             ; limited to 127 levels
0F3D                             ; **************************************************************************
0F3D                NESTING:      
0F3D   FE 27                  CP   "'"   ; quote char
0F3F   28 0A                  JR   z,nesting0   
0F41   FE 22                  CP   DQ   ; double quote char
0F43   28 06                  JR   z,nesting0   
0F45   FE 60                  CP   "`"   ; grave char
0F47   28 02                  JR   z,nesting0   
0F49   18 0A                  JR   nesting1   
0F4B                NESTING0:      
0F4B   CB 7B                  BIT   7,e   
0F4D   28 03                  JR   z,nesting1a   
0F4F   CB BB                  RES   7,e   
0F51   C9                     RET      
0F52                NESTING1A:      
0F52   CB FB                  SET   7,e   
0F54   C9                     RET      
0F55                NESTING1:      
0F55   CB 7B                  BIT   7,e   
0F57   C0                     RET   nz   
0F58   FE 7B                  CP   "{"   
0F5A   28 08                  JR   z,nesting2   
0F5C   FE 5B                  CP   "["   
0F5E   28 04                  JR   z,nesting2   
0F60   FE 28                  CP   "("   
0F62   20 02                  JR   nz,nesting3   
0F64                NESTING2:      
0F64   1C                     INC   e   
0F65   C9                     RET      
0F66                NESTING3:      
0F66   FE 7D                  CP   "}"   
0F68   28 07                  JR   z,nesting4   
0F6A   FE 5D                  CP   "]"   
0F6C   28 03                  JR   z,nesting4   
0F6E   FE 29                  CP   ")"   
0F70   C0                     RET   nz   
0F71                NESTING4:      
0F71   1D                     DEC   e   
0F72   C9                     RET      
0F73                PROMPT:      
0F73   CD 83 0F               CALL   printStr   
0F76   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0F7B   C9                     RET      
0F7C                CRLF:        
0F7C   CD 83 0F               CALL   printStr   
0F7F   0D 0A 00               .CSTR   "\r\n"   
0F82   C9                     RET      
0F83                             ; prints a null teminated string
0F83                             ; the string should be immediately following the call
0F83                PRINTSTR:      
0F83   E3                     EX   (sp),hl   ; swap			
0F84   CD 38 0F               CALL   putstr   
0F87   23                     INC   hl   ; inc past NUL
0F88   E3                     EX   (sp),hl   ; put it back	
0F89   C9                     RET      
0F8A                INIT:        
0F8A   21 F0 01               LD   hl,titleStr   
0F8D   11 0E 24               LD   de,titleBuf   
0F90   06 14                  LD   b,20   
0F92                INIT1:       
0F92   1A                     LD   a,(de)   
0F93   BE                     CP   (hl)   
0F94   20 17                  JR   nz,coldBoot0   
0F96   13                     INC   de   
0F97   23                     INC   hl   
0F98   10 F8                  DJNZ   init1   
0F9A                WARMINIT:      
0F9A   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0F9E   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0FA2   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0FA6   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0FAA   C3 E4 0F               JP   start1   
0FAD                COLDBOOT0:      
0FAD   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0FB0   11 0E 24               LD   de,titleBuf   
0FB3   06 14                  LD   b,20   
0FB5   ED B0                  LDIR      
0FB7                COLDINIT:      
0FB7   21 DE 01               LD   hl,isysVars   
0FBA   11 E6 23               LD   de,sysVars   
0FBD   01 12 00               LD   bc,4 * 2 + 10   
0FC0   ED B0                  LDIR      
0FC2   21 00 23               LD   hl,vars   ; 52 vars LO HI
0FC5   06 34                  LD   b,26*2   
0FC7   AF                     XOR   a   
0FC8                COLDBOOT1:      
0FC8   77                     LD   (hl),a   
0FC9   23                     INC   hl   
0FCA   10 FC                  DJNZ   coldBoot1   
0FCC   DD 21 60 10            LD   ix,NEXT   
0FD0   FD 21 00 21            LD   iy,STACK   
0FD4   C9                     RET      
0FD5                COLDSTART:      
0FD5   31 00 21               LD   sp,STACK   
0FD8   CD AD 0F               CALL   coldBoot0   
0FDB   C3 E4 0F               JP   start1   
0FDE                START:       
0FDE   31 00 21               LD   sp,STACK   ; start Monty
0FE1   CD 8A 0F               CALL   init   ; setups
0FE4                START1:      
0FE4   21 0E 24               LD   hl,titleBuf   
0FE7   CD 38 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
0FEA                INTERPRET:      
0FEA   CD 73 0F               CALL   prompt   
0FED   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0FF0   21 00 21               LD   hl,TIB   
0FF3   22 E6 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0FF6                INTERPRET2:      ; calculate nesting
0FF6   1E 00                  LD   e,0   ; initilize nesting value
0FF8   C5                     PUSH   bc   ; save offset into TIB,
0FF9                             ; bc is also the count of chars in TIB
0FF9   21 00 21               LD   hl,TIB   ; hl is start of TIB
0FFC   18 06                  JR   interpret4   
0FFE                INTERPRET3:      
0FFE   7E                     LD   a,(hl)   ; a = char in TIB
0FFF   23                     INC   hl   ; inc pointer into TIB
1000   0B                     DEC   bc   ; dec count of chars in TIB
1001   CD 3D 0F               CALL   nesting   ; update nesting value
1004                INTERPRET4:      
1004   79                     LD   a,c   ; is count zero?
1005   B0                     OR   b   
1006   20 F6                  JR   nz,interpret3   ; if not loop
1008   C1                     POP   bc   ; restore offset into TIB
1009                INTERPRET5:      
1009   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
100C   FE 20                  CP   $20   ; compare to space
100E   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
1010   FE 00                  CP   NUL   ; is it end of string? NUL end of string
1012   28 31                  JR   z,interpret8   
1014   FE 0D                  CP   "\r"   ; carriage return? ascii 13
1016   28 1A                  JR   z,interpret7   ; if anything else its macro/control
1018   FE 08                  CP   CTRL_H   
101A   CA 96 10               JP   z,backSpace_   
101D   FE 0A                  CP   CTRL_J   
101F   CA A6 10               JP   z,reEdit_   
1022                INTERPRET5A:      
1022   18 D2                  JR   interpret2   
1024                INTERPRET6:      
1024   21 00 21               LD   hl,TIB   
1027   09                     ADD   hl,bc   
1028   77                     LD   (hl),a   ; store the character in textbuf
1029   03                     INC   bc   
102A   CD 85 00               CALL   putchar   ; echo character to screen
102D   CD 3D 0F               CALL   nesting   
1030   18 D7                  JR   interpret5   ; wait for next character
1032                INTERPRET7:      
1032   21 00 21               LD   hl,TIB   
1035   09                     ADD   hl,bc   
1036   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
1038   23                     INC   hl   
1039   36 0A                  LD   (hl),"\n"   
103B   23                     INC   hl   
103C   03                     INC   bc   
103D   03                     INC   bc   
103E   CD 7C 0F               CALL   crlf   ; echo character to screen
1041   7B                     LD   a,e   ; if zero nesting append and ETX after \r
1042   B7                     OR   a   
1043   20 C4                  JR   nz,interpret5   
1045                INTERPRET8:      
1045   21 00 21               LD   hl,TIB   
1048   09                     ADD   hl,bc   
1049   22 E6 23               LD   (vTIBPtr),hl   
104C   01 00 21               LD   bc,TIB   
104F   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
1053   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
1057   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
105B   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
105F   0B                     DEC   bc   
1060                NEXT:        
1060   03                     INC   bc   ; Increment the IP
1061   0A                     LD   a,(bc)   ; Get the next character and dispatch
1062   FE 20                  CP   " "   ; whitespace?
1064   28 FA                  JR   z,next   ; space? ignore
1066   38 0D                  JR   c,next1   
1068   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
106A   6F                     LD   l,a   ; index into table
106B   26 01                  LD   h,msb(opcodes)   ; start address of jump table
106D   6E                     LD   l,(hl)   ; get low jump address
106E   24                     INC   h   ; page 2
106F   FE BA                  CP   "Z" - "!" + 1 + $80   
1071   38 01                  JR   c,next0   
1073   24                     INC   h   ; page 3
1074                NEXT0:       
1074   E9                     JP   (hl)   ; Jump to routine
1075                NEXT1:       
1075   FE 00                  CP   NUL   ; end of input string?
1077   28 03                  JR   z,exit   
1079   C3 EA 0F               JP   interpret   ; no, other whitespace, macros?
107C                EXIT:        
107C   03                     INC   bc   
107D   60 69                  LD   hl,bc   
107F   E9                     JP   (hl)   
1080                RUN:         
1080   C1                     POP   bc   
1081   0B                     DEC   bc   
1082   DD E9                  JP   (ix)   
1084                ERROR:       
1084   E5                     PUSH   hl   
1085   CD 80 10               CALL   run   
1088   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
1093   C3 EA 0F               JP   interpret   
1096                BACKSPACE_:      
1096   79                     LD   a,c   
1097   B0                     OR   b   
1098   CA F6 0F               JP   z,interpret2   
109B   0B                     DEC   bc   
109C   CD 83 0F               CALL   printStr   
109F   08 20 08 00            .CSTR   "\b \b"   
10A3   C3 F6 0F               JP   interpret2   
10A6                REEDIT_:      
10A6   CD 83 0F               CALL   printStr   
10A9   0D 3E 20 00            .CSTR   "\r> "   
10AD   21 00 21               LD   hl,TIB   
10B0   18 04                  JR   reEdit1   
10B2                REEDIT0:      
10B2   CD 85 00               CALL   putchar   
10B5   23                     INC   hl   
10B6                REEDIT1:      
10B6   7E                     LD   a,(hl)   
10B7   FE 0D                  CP   "\r"   
10B9   20 F7                  JR   nz,reEdit0   
10BB   11 00 21               LD   de,TIB   
10BE   B7                     OR   a   
10BF   ED 52                  SBC   hl,de   
10C1   44 4D                  LD   bc,hl   
10C3   C3 F6 0F               JP   interpret2   
10C6                F1:          
10C6                F2:          
10C6                F3:          
10C6                F4:          
10C6                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VTIBPTR:   DS   2   
23E8                VBUFPTR:   DS   2   
23EA                VHEAPPTR:   DS   2   
23EC                VRECURPTR:   DS   2   
23EE                VDATAWIDTH:   DS   1   
23EF                VNUMBASE:   DS   1   
23F0                VHEXPREFIX:   DS   1   
23F1                VECHO:    DS   1   
23F2                VSTRMODE:   DS   1   
23F3                          DS   1   
23F4                          DS   1   
23F5                          DS   1   
23F6                          DS   1   
23F7                          DS   1   
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                          DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2523 IN MAIN.asm
                    > USED AT LINE 2607 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
                    > USED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
                    > USED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1418 IN MAIN.asm
                    > USED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2572 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2361 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2509 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2442 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1525 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0425 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       0428 DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           043E DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          044C DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045B DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046B DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048B DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          048D DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          049D DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          049E DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A4 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B0 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BB DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CA DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D3 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0538 DEFINED AT LINE 824 IN MAIN.asm
COMMAND_D_:         0544 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_F_:         054A DEFINED AT LINE 840 IN MAIN.asm
COMMAND_H_:         0565 DEFINED AT LINE 860 IN MAIN.asm
COMMAND_I_:         056B DEFINED AT LINE 867 IN MAIN.asm
COMMAND_M_:         0571 DEFINED AT LINE 873 IN MAIN.asm
OUTPUT_:            0577 DEFINED AT LINE 879 IN MAIN.asm
COMMAND_P_:         057A DEFINED AT LINE 883 IN MAIN.asm
COMMAND_Q_:         057D DEFINED AT LINE 888 IN MAIN.asm
COMMAND_R_:         0583 DEFINED AT LINE 894 IN MAIN.asm
COMMAND_S_:         058F DEFINED AT LINE 904 IN MAIN.asm
TRUE_:              05A4 DEFINED AT LINE 920 IN MAIN.asm
COMMAND_V_:         05A7 DEFINED AT LINE 924 IN MAIN.asm
COMMAND_W_:         05C2 DEFINED AT LINE 944 IN MAIN.asm
XOR_:               05C8 DEFINED AT LINE 950 IN MAIN.asm
COMMAND_NOP_:       05CB DEFINED AT LINE 955 IN MAIN.asm
COMMAND_DEFAULT_:   05CE DEFINED AT LINE 960 IN MAIN.asm
NOP:                05D1 DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
DIV:                05D3 DEFINED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 962 IN MAIN.asm
DIV2:               05DD DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
ABSOLUTE:           05EE DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 812 IN MAIN.asm
ABSOLUTE1:          05F9 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 995 IN MAIN.asm
ADDROF:             05FC DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
ADDROF2:            0602 DEFINED AT LINE 1013 IN MAIN.asm
ARRAYLENGTH:        0604 DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       060A DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1039 IN MAIN.asm
ARRAYSIZE:          060D DEFINED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
PERFORMM_1480S1032: 0614 DEFINED AT LINE 45
                    > USED AT LINE 43
BREAK:              0621 DEFINED AT LINE 1044 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BREAK1:             0628 DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1048 IN MAIN.asm
BYTEMODE:           063B DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
BYTEMODE1:          063D DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1243 IN MAIN.asm
COMMENT:            0642 DEFINED AT LINE 1069 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1073 IN MAIN.asm
CONSTHEAPSTART:     064B DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
CONSTTIBSTART:      0651 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
CONSTBUFSTART:      0657 DEFINED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 936 IN MAIN.asm
DECBASE:            065D DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
DECBASE1:           065F DEFINED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
HEXBASE:            0664 DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
ERROR1:             0669 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
INPUT:              066F DEFINED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
OUTPUT:             067A DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
QUIT:               0683 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
QUIT1:              068A DEFINED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
RECUR:              068D DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
REMAIN:             0693 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
STRINGBEGIN:        0699 DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
STRINGEND:          06A1 DEFINED AT LINE 1152 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
STRINGEND1:         06C8 DEFINED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
STRINGLENGTH:       06D0 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      06D6 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1185 IN MAIN.asm
STRINGLENGTH2:      06D8 DEFINED AT LINE 1182 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
STRINGLENGTH3:      06DC DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
STRINGSIZE:         06DF DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 916 IN MAIN.asm
PERFORMM_1621S1191: 06E6 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      06EB DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
STRINGCOMPARE1:     06ED DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1210 IN MAIN.asm
STRINGCOMPARE2:     06F8 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
STRINGCOMPARE3:     06FD DEFINED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1207 IN MAIN.asm
STRINGCOMPARE4:     0700 DEFINED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
VARBUFPTR:          0703 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
VARECHO:            0709 DEFINED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 928 IN MAIN.asm
VARHEAPPTR:         070F DEFINED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 930 IN MAIN.asm
VARTIBPTR:          0715 DEFINED AT LINE 1232 IN MAIN.asm
                    > USED AT LINE 932 IN MAIN.asm
VARHEXPREFIX:       071B DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
WORDMODE:           0721 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 946 IN MAIN.asm
XOR:                0726 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 952 IN MAIN.asm
XOR1:               0727 DEFINED AT LINE 1248 IN MAIN.asm
RANGESRC:           0731 DEFINED AT LINE 32
                    > USED AT LINE 900 IN MAIN.asm
RANGESRCM_1684S1264: 0740 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          07C3 DEFINED AT LINE 32
                    > USED AT LINE 816 IN MAIN.asm
ARRAYITERM_1703S1284: 07D0 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         0843 DEFINED AT LINE 32
                    > USED AT LINE 912 IN MAIN.asm
STRINGITERM_1722S1304: 0850 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                08CA DEFINED AT LINE 32
                    > USED AT LINE 875 IN MAIN.asm
MAPM_1742S1326:     08D7 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             090B DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
FILTERM_1756S1341:  0919 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0968 DEFINED AT LINE 32
                    > USED AT LINE 842 IN MAIN.asm
FOLDM_1775S1361:    0977 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            09B9 DEFINED AT LINE 32
                    > USED AT LINE 844 IN MAIN.asm
FOREACHM_1789S1376: 09C7 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A04 DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
FUNCSRCM_1803S1391: 0A10 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0A3D DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1813S1402: 0A4B DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0A85 DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0A94 DEFINED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
READSTRING:         0A9D DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0AA2 DEFINED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
READSTRING2:        0AB6 DEFINED AT LINE 1442 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
READNUMBER:         0ABF DEFINED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
PERFORMM_1857S1451: 0AC8 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0AE6 DEFINED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1462 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
PERFORMM_1874S1468: 0AED DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0AF0 DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
PERFORMM_1878S1472: 0AF7 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0AF8 DEFINED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1470 IN MAIN.asm
TILDE:              0AFE DEFINED AT LINE 1481 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0AFE DEFINED AT LINE 1482 IN MAIN.asm
DOLLAR:             0B08 DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0B08 DEFINED AT LINE 1494 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0B0B DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1513 IN MAIN.asm
HEXNUM2:            0B13 DEFINED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 1500 IN MAIN.asm
QUESTION:           0B25 DEFINED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0B25 DEFINED AT LINE 1518 IN MAIN.asm
QUOTE:              0B32 DEFINED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0B32 DEFINED AT LINE 1532 IN MAIN.asm
STRING1:            0B3B DEFINED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1547 IN MAIN.asm
STRING2:            0B3E DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1538 IN MAIN.asm
STRING3:            0B44 DEFINED AT LINE 1548 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
PERCENT:            0B4C DEFINED AT LINE 1558 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0B4C DEFINED AT LINE 1559 IN MAIN.asm
ARG0:               0B68 DEFINED AT LINE 1578 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
ARG0A:              0B71 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
ARG1:               0B76 DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
ARG1A:              0B7E DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
NUM:                0B81 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0B8A DEFINED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1605 IN MAIN.asm
NUM1:               0B8B DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
NUM2:               0BA3 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1614 IN MAIN.asm
NUM3:               0BAE DEFINED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
RBRACE:             0BB1 DEFINED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0BB1 DEFINED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
BLOCKEND1:          0BE3 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
BLOCKEND2:          0BEF DEFINED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
BLOCKEND3:          0C01 DEFINED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1676 IN MAIN.asm
BLOCKEND4:          0C15 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1692 IN MAIN.asm
GOBLOCK:            0C1E DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0C43 DEFINED AT LINE 1716 IN MAIN.asm
                    > USED AT LINE 1797 IN MAIN.asm
GOBLOCK3:           0C4D DEFINED AT LINE 1722 IN MAIN.asm
GOFUNC:             0C51 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0C6A DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
GOFUNC2:            0C70 DEFINED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1744 IN MAIN.asm
GOFUNC3:            0C7B DEFINED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
GOFUNC4:            0C93 DEFINED AT LINE 1775 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
GOFUNC5:            0C96 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
GOFUNC6:            0C99 DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
GOFUNC7:            0C9C DEFINED AT LINE 1785 IN MAIN.asm
GOFUNC8:            0CA0 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
ASSIGN:             0CAB DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0CAD DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0CB1 DEFINED AT LINE 1807 IN MAIN.asm
ASSIGN2:            0CBA DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
EQUALS:             0CBC DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0CC3 DEFINED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0CCA DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0CCF DEFINED AT LINE 1840 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0CD4 DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1836 IN MAIN.asm
TRUE1:              0CD7 DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
NULL1:              0CDD DEFINED AT LINE 1852 IN MAIN.asm
FALSE1:             0CDD DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 1823 IN MAIN.asm
                    > USED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 1846 IN MAIN.asm
SPREAD:             0CE3 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0CF0 DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1883 IN MAIN.asm
SPREAD2:            0CFB DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
SPREAD3:            0CFD DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
SHIFTLEFT:          0D07 DEFINED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0D11 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
SHIFTLEFT3:         0D19 DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
SHIFTLEFT4:         0D1A DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
SHIFTRIGHT:         0D23 DEFINED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0D2D DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
SHIFTRIGHT3:        0D35 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
SHIFTRIGHT4:        0D39 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
DIVIDE:             0D42 DEFINED AT LINE 1940 IN MAIN.asm
                    > USED AT LINE 983 IN MAIN.asm
DIVIDE1:            0D47 DEFINED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
DIVIDE2:            0D54 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
DIVIDE3:            0D55 DEFINED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
DOTNEXT:            0D5B DEFINED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0D63 DEFINED AT LINE 1964 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
PARSEARGS:          0D75 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0D7F DEFINED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
PARSEARGS1A:        0D87 DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
PARSEARGS2:         0D8F DEFINED AT LINE 1993 IN MAIN.asm
PARSEARGS3:         0D97 DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
PARSEARGS4:         0D9A DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
PARSEARGS5:         0DA0 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
PARSEBLOCK:         0DAB DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0DAF DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
PARSEBLOCK2:        0DC8 DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
PARSEBLOCK3:        0DCE DEFINED AT LINE 2046 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
PARSEBLOCK4:        0DE8 DEFINED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
PARSEBLOCK5:        0DEB DEFINED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
PARSEBLOCK6:        0E16 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
CREATEFUNC:         0E1A DEFINED AT LINE 2092 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0E39 DEFINED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
CREATEFUNC1:        0E51 DEFINED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
CREATEFUNC2:        0E64 DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
CREATEFUNC2A:       0E83 DEFINED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2151 IN MAIN.asm
CREATEFUNC3:        0E92 DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
CREATEFUNC4:        0E9D DEFINED AT LINE 2187 IN MAIN.asm
CREATEFUNC5:        0E9E DEFINED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
VARIABLE:           0EBC DEFINED AT LINE 2216 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
CONSTANT:           0ECB DEFINED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1083 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
LOWERCASETABLE:     0ECE DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
LOWERCASETABLE1:    0ED8 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
LOWERCASETABLE2:    0EDF DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
COMMANDTABLE:       0EE4 DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
COMMANDTABLE1:      0EE5 DEFINED AT LINE 2258 IN MAIN.asm
                    > USED AT LINE 2246 IN MAIN.asm
COMMANDTABLE2:      0EE6 DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2273 IN MAIN.asm
COMMANDTABLE3:      0EED DEFINED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
COMMANDTABLE4:      0EF6 DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2269 IN MAIN.asm
CMDTABLE:           0EFC DEFINED AT LINE 2287 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
CMDTABLE1:          0EFD DEFINED AT LINE 2289 IN MAIN.asm
CMDTABLE2:          0EFD DEFINED AT LINE 2290 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
CMDTABLE3:          0F0A DEFINED AT LINE 2302 IN MAIN.asm
CMDTABLE4:          0F13 DEFINED AT LINE 2310 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
CMDTABLE5:          0F18 DEFINED AT LINE 2315 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
GETVARADDR:         0F1D DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
GETVARADDR1:        0F2F DEFINED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
PUTSTR0:            0F34 DEFINED AT LINE 2339 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
PUTSTR:             0F38 DEFINED AT LINE 2342 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2411 IN MAIN.asm
                    > USED AT LINE 2468 IN MAIN.asm
NESTING:            0F3D DEFINED AT LINE 2358 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
NESTING0:           0F4B DEFINED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
NESTING1A:          0F52 DEFINED AT LINE 2371 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
NESTING1:           0F55 DEFINED AT LINE 2374 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
NESTING2:           0F64 DEFINED AT LINE 2383 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
NESTING3:           0F66 DEFINED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2382 IN MAIN.asm
NESTING4:           0F71 DEFINED AT LINE 2393 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2390 IN MAIN.asm
PROMPT:             0F73 DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 2472 IN MAIN.asm
CRLF:               0F7C DEFINED AT LINE 2402 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
PRINTSTR:           0F83 DEFINED AT LINE 2409 IN MAIN.asm
                    > USED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2597 IN MAIN.asm
                    > USED AT LINE 2602 IN MAIN.asm
INIT:               0F8A DEFINED AT LINE 2416 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
INIT1:              0F92 DEFINED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
WARMINIT:           0F9A DEFINED AT LINE 2428 IN MAIN.asm
COLDBOOT0:          0FAD DEFINED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2461 IN MAIN.asm
COLDINIT:           0FB7 DEFINED AT LINE 2441 IN MAIN.asm
COLDBOOT1:          0FC8 DEFINED AT LINE 2450 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
COLDSTART:          0FD5 DEFINED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
START:              0FDE DEFINED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 7
START1:             0FE4 DEFINED AT LINE 2466 IN MAIN.asm
                    > USED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2462 IN MAIN.asm
INTERPRET:          0FEA DEFINED AT LINE 2470 IN MAIN.asm
                    > USED AT LINE 2574 IN MAIN.asm
                    > USED AT LINE 2590 IN MAIN.asm
INTERPRET2:         0FF6 DEFINED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2595 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
                    > USED AT LINE 2617 IN MAIN.asm
INTERPRET3:         0FFE DEFINED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2496 IN MAIN.asm
INTERPRET4:         1004 DEFINED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 2484 IN MAIN.asm
INTERPRET5:         1009 DEFINED AT LINE 2499 IN MAIN.asm
                    > USED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
INTERPRET5A:        1022 DEFINED AT LINE 2514 IN MAIN.asm
INTERPRET6:         1024 DEFINED AT LINE 2517 IN MAIN.asm
                    > USED AT LINE 2503 IN MAIN.asm
INTERPRET7:         1032 DEFINED AT LINE 2527 IN MAIN.asm
                    > USED AT LINE 2507 IN MAIN.asm
INTERPRET8:         1045 DEFINED AT LINE 2542 IN MAIN.asm
                    > USED AT LINE 2505 IN MAIN.asm
NEXT:               1060 DEFINED AT LINE 2555 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
NEXT0:              1074 DEFINED AT LINE 2569 IN MAIN.asm
                    > USED AT LINE 2567 IN MAIN.asm
NEXT1:              1075 DEFINED AT LINE 2571 IN MAIN.asm
                    > USED AT LINE 2560 IN MAIN.asm
EXIT:               107C DEFINED AT LINE 2576 IN MAIN.asm
                    > USED AT LINE 2573 IN MAIN.asm
RUN:                1080 DEFINED AT LINE 2581 IN MAIN.asm
                    > USED AT LINE 2588 IN MAIN.asm
ERROR:              1084 DEFINED AT LINE 2586 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
BACKSPACE_:         1096 DEFINED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2510 IN MAIN.asm
REEDIT_:            10A6 DEFINED AT LINE 2601 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
REEDIT0:            10B2 DEFINED AT LINE 2606 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
REEDIT1:            10B6 DEFINED AT LINE 2609 IN MAIN.asm
                    > USED AT LINE 2605 IN MAIN.asm
F1:                 10C6 DEFINED AT LINE 10
                    > USED AT LINE 850 IN MAIN.asm
F2:                 10C6 DEFINED AT LINE 11
                    > USED AT LINE 852 IN MAIN.asm
F3:                 10C6 DEFINED AT LINE 12
                    > USED AT LINE 854 IN MAIN.asm
F4:                 10C6 DEFINED AT LINE 13
                    > USED AT LINE 856 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 2456 IN MAIN.asm
                    > USED AT LINE 2460 IN MAIN.asm
                    > USED AT LINE 2464 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
                    > USED AT LINE 2475 IN MAIN.asm
                    > USED AT LINE 2483 IN MAIN.asm
                    > USED AT LINE 2519 IN MAIN.asm
                    > USED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2544 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
                    > USED AT LINE 2613 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 2447 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2443 IN MAIN.asm
VTIBPTR:            23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
                    > USED AT LINE 2546 IN MAIN.asm
VBUFPTR:            23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
VHEAPPTR:           23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1446 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 2079 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
VRECURPTR:          23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1689 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
VDATAWIDTH:         23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 2219 IN MAIN.asm
VNUMBASE:           23EF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
VHEXPREFIX:         23F0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1237 IN MAIN.asm
VECHO:              23F1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
VSTRMODE:           23F2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2429 IN MAIN.asm
                    > USED AT LINE 2549 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2430 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2431 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2432 IN MAIN.asm
                    > USED AT LINE 2552 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
                    > USED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2207 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
TBPTR:              240C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1078 IN MAIN.asm
                    > USED AT LINE 2067 IN MAIN.asm
