0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 94 0C               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   3E                     DB   lsb(bang_)   ; !
0181   F3                     DB   lsb(dquote_)   ; "
0182   EA                     DB   lsb(hash_)   ; #
0183   C0                     DB   lsb(dollar_)   ; $
0184   C9                     DB   lsb(percent_)   ; %
0185   20                     DB   lsb(amper_)   ; &
0186   D2                     DB   lsb(tick_)   ; '
0187   CC                     DB   lsb(lparen_)   ; (
0188   BD                     DB   lsb(rparen_)   ; )
0189   E7                     DB   lsb(star_)   ; *
018A   04                     DB   lsb(plus_)   ; +
018B   F0                     DB   lsb(comma_)   ; ,
018C   4E                     DB   lsb(minus_)   ; -
018D   D8                     DB   lsb(dot_)   ; .
018E   FF                     DB   lsb(slash_)   ; /	
018F   6B                     DB   lsb(num_)   ; 0
0190   6B                     DB   lsb(num_)   ; 1
0191   6B                     DB   lsb(num_)   ; 2
0192   6B                     DB   lsb(num_)   ; 3
0193   6B                     DB   lsb(num_)   ; 4
0194   6B                     DB   lsb(num_)   ; 5
0195   6B                     DB   lsb(num_)   ; 6
0196   6B                     DB   lsb(num_)   ; 7
0197   6B                     DB   lsb(num_)   ; 8
0198   6B                     DB   lsb(num_)   ; 9
0199   DB                     DB   lsb(colon_)   ; :
019A   D5                     DB   lsb(semicolon_)   ; ;
019B   86                     DB   lsb(lt_)   ; <
019C   6E                     DB   lsb(eq_)   ; =
019D   7B                     DB   lsb(gt_)   ; >
019E   E4                     DB   lsb(question_)   ; ?
019F   34                     DB   lsb(at_)   ; @
01A0   DE                     DB   lsb(upcase_)   ; A
01A1   DE                     DB   lsb(upcase_)   ; B
01A2   DE                     DB   lsb(upcase_)   ; C
01A3   DE                     DB   lsb(upcase_)   ; D
01A4   DE                     DB   lsb(upcase_)   ; E
01A5   DE                     DB   lsb(upcase_)   ; F
01A6   DE                     DB   lsb(upcase_)   ; G
01A7   DE                     DB   lsb(upcase_)   ; h
01A8   DE                     DB   lsb(upcase_)   ; I
01A9   DE                     DB   lsb(upcase_)   ; J
01AA   DE                     DB   lsb(upcase_)   ; K
01AB   DE                     DB   lsb(upcase_)   ; L
01AC   DE                     DB   lsb(upcase_)   ; M
01AD   DE                     DB   lsb(upcase_)   ; N
01AE   DE                     DB   lsb(upcase_)   ; O
01AF   DE                     DB   lsb(upcase_)   ; p
01B0   DE                     DB   lsb(upcase_)   ; Q
01B1   DE                     DB   lsb(upcase_)   ; R
01B2   DE                     DB   lsb(upcase_)   ; S
01B3   DE                     DB   lsb(upcase_)   ; T
01B4   DE                     DB   lsb(upcase_)   ; U
01B5   DE                     DB   lsb(upcase_)   ; V
01B6   DE                     DB   lsb(upcase_)   ; W
01B7   DE                     DB   lsb(upcase_)   ; X
01B8   DE                     DB   lsb(upcase_)   ; Y
01B9   DE                     DB   lsb(upcase_)   ; Z
01BA   C3                     DB   lsb(lbrack_)   ; [
01BB   F6                     DB   lsb(backslash_)   ; \
01BC   C6                     DB   lsb(rbrack_)   ; ]
01BD   ED                     DB   lsb(caret_)   ; ^
01BE   F9                     DB   lsb(underscore_)   ; _
01BF   F3                     DB   lsb(dquote_)   ; `     used for testing string   	
01C0   E1                     DB   lsb(lowcase_)   ; a
01C1   E1                     DB   lsb(lowcase_)   ; b
01C2   E1                     DB   lsb(lowcase_)   ; c
01C3   E1                     DB   lsb(lowcase_)   ; d
01C4   E1                     DB   lsb(lowcase_)   ; e
01C5   E1                     DB   lsb(lowcase_)   ; f
01C6   E1                     DB   lsb(lowcase_)   ; g
01C7   E1                     DB   lsb(lowcase_)   ; h
01C8   E1                     DB   lsb(lowcase_)   ; i
01C9   E1                     DB   lsb(lowcase_)   ; j
01CA   E1                     DB   lsb(lowcase_)   ; k
01CB   E1                     DB   lsb(lowcase_)   ; l
01CC   E1                     DB   lsb(lowcase_)   ; m
01CD   E1                     DB   lsb(lowcase_)   ; n
01CE   E1                     DB   lsb(lowcase_)   ; o
01CF   E1                     DB   lsb(lowcase_)   ; p
01D0   E1                     DB   lsb(lowcase_)   ; q
01D1   E1                     DB   lsb(lowcase_)   ; r
01D2   E1                     DB   lsb(lowcase_)   ; s
01D3   E1                     DB   lsb(lowcase_)   ; t
01D4   E1                     DB   lsb(lowcase_)   ; u
01D5   E1                     DB   lsb(lowcase_)   ; v
01D6   E1                     DB   lsb(lowcase_)   ; w
01D7   E1                     DB   lsb(lowcase_)   ; x
01D8   E1                     DB   lsb(lowcase_)   ; y
01D9   E1                     DB   lsb(lowcase_)   ; z
01DA   CC                     DB   lsb(lbrace_)   ; {
01DB   2B                     DB   lsb(pipe_)   ; |
01DC   CF                     DB   lsb(rbrace_)   ; }
01DD   FC                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
01E6   23 0D                  DW   next   ; nNext
01E8   1C 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; unused
01EE   00 00                  DW   0   ; unused
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN *********************************************
0204                PLUS_:       ; add the top 2 members of the stack
0204                ADD:         
0204   03                     INC   bc   
0205   0A                     LD   a,(bc)   
0206   FE 2B                  CP   "+"   ; ++ increment variable
0208   20 05                  JR   nz,add1   
020A   E1                     POP   hl   
020B   23                     INC   hl   
020C   C3 80 07               JP   assign0   
020F                ADD1:        
020F   0B                     DEC   bc   
0210   D1                     POP   de   ; second term
0211   E1                     POP   hl   ; first term
0212   19                     ADD   hl,de   
0213                ADD3:        
0213   03                     INC   bc   
0214   0A                     LD   a,(bc)   
0215   FE 3D                  CP   "="   
0217   28 04                  JR   z,add4   
0219   0B                     DEC   bc   
021A   E5                     PUSH   hl   
021B   DD E9                  JP   (ix)   
021D                ADD4:        
021D   C3 80 07               JP   assign0   
0220                AMPER_:      
0220                AND:         
0220   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0221   E1                     POP   hl   
0222   7B                     LD   a,e   
0223   A5                     AND   l   
0224   6F                     LD   l,a   
0225   7A                     LD   a,d   
0226   A4                     AND   h   
0227                AND1:        
0227   67                     LD   h,a   
0228   E5                     PUSH   hl   
0229   DD E9                  JP   (ix)   
022B                PIPE_:       
022B                OR:          
022B   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
022C   E1                     POP   hl   
022D   7B                     LD   a,e   
022E   B5                     OR   l   
022F   6F                     LD   l,a   
0230   7A                     LD   a,d   
0231   B4                     OR   h   
0232   18 F3                  JR   and1   
0234                             ; @ addr
0234                             ; -- ptr
0234                AT_:         
0234                ADDR:        
0234   ED 5B F4 23            LD   de,(vPointer)   
0238   21 F4 23               LD   hl,vPointer   
023B   C3 9C 04               JP   variable   
023E                BANG_:       ; logical invert, any non zero value
023E   03                     INC   bc   
023F   0A                     LD   a,(bc)   
0240   FE 3D                  CP   "="   
0242   20 04                  JR   nz,not   
0244   E1                     POP   hl   
0245   D1                     POP   de   
0246   18 55                  JR   notequals   
0248                NOT:         
0248   0B                     DEC   bc   
0249   21 00 00               LD   hl,0   ; is considered true
024C   18 2A                  JR   eq1   
024E                MINUS_:      
024E   03                     INC   bc   ; check if sign of a number
024F   0A                     LD   a,(bc)   
0250   0B                     DEC   bc   
0251   FE 30                  CP   "0"   
0253   38 04                  JR   c,sub   
0255   FE 3A                  CP   "9"+1   
0257   38 12                  JR   c,num_   
0259                SUB:         ; Subtract the value 2nd on stack from top of stack
0259   03                     INC   bc   
025A   FE 2D                  CP   "-"   
025C   20 05                  JR   nz,sub1   
025E   E1                     POP   hl   
025F   2B                     DEC   hl   
0260   C3 80 07               JP   assign0   
0263                SUB1:        
0263   0B                     DEC   bc   
0264   D1                     POP   de   
0265   E1                     POP   hl   
0266   B7                     OR   a   
0267   ED 52                  SBC   hl,de   
0269   18 A8                  JR   add3   
026B                NUM_:        
026B   C3 1F 0B               JP   num   
026E                EQ_:         
026E   CD DA 0B               CALL   jumpTable   
0271   3D                     DB   "="   
0272   77                     DB   lsb(eq0_)   
0273   00                     DB   NUL   
0274   C3 7E 07               JP   assign   
0277                EQ0_:        
0277   E1                     POP   hl   
0278                EQ1:         
0278   D1                     POP   de   
0279   18 1B                  JR   equals   
027B                GT_:         
027B   03                     INC   bc   
027C   0A                     LD   a,(bc)   
027D   FE 3E                  CP   ">"   
027F   CA 67 0B               JP   z,shiftRight   
0282   D1                     POP   de   
0283   E1                     POP   hl   
0284   18 09                  JR   lt1   
0286                LT_:         
0286   03                     INC   bc   
0287   0A                     LD   a,(bc)   
0288   FE 3C                  CP   "<"   
028A   CA 57 0B               JP   z,shiftLeft   
028D   E1                     POP   hl   
028E   D1                     POP   de   
028F                LT1:         
028F   FE 3D                  CP   "="   
0291   28 11                  JR   z,lessthaneq   
0293   0B                     DEC   bc   
0294   18 13                  JR   lessthan   
0296                             ; hl = value1, de = value2
0296                             ; hl = result
0296                EQUALS:      
0296   B7                     OR   a   ; reset the carry flag
0297   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0299   28 16                  JR   z,true1   
029B   18 1A                  JR   false1   
029D                NOTEQUALS:      
029D   B7                     OR   a   ; reset the carry flag
029E   ED 52                  SBC   hl,de   
02A0   20 0F                  JR   nz,true1   
02A2   18 13                  JR   false1   
02A4                             ; hl = value1 de = value2
02A4                             ; hl = result
02A4                LESSTHANEQ:      
02A4   B7                     OR   a   
02A5   ED 52                  SBC   hl,de   
02A7   18 05                  JR   lessthan1   
02A9                             ; hl = value1 de = value2
02A9                             ; hl = result
02A9                LESSTHAN:      
02A9   B7                     OR   a   
02AA   ED 52                  SBC   hl,de   
02AC   28 09                  JR   z,false1   
02AE                LESSTHAN1:      
02AE   FA B7 02               JP   m,false1   
02B1                TRUE1:       
02B1   21 FF FF               LD   hl,TRUE   
02B4   E5                     PUSH   hl   
02B5   DD E9                  JP   (ix)   
02B7                NULL1:       
02B7                FALSE1:      
02B7   21 00 00               LD   hl,FALSE   
02BA   E5                     PUSH   hl   
02BB                NOP_:        
02BB   DD E9                  JP   (ix)   
02BD                RPAREN_:      
02BD   C3 4F 0B               JP   rparen   
02C0                DOLLAR_:      
02C0   C3 A4 0A               JP   dollar   
02C3                LBRACK_:      
02C3   C3 C4 06               JP   lbrack   
02C6                RBRACK_:      
02C6   C3 E0 06               JP   rbrack   
02C9                PERCENT_:      
02C9   C3 8F 06               JP   percent   
02CC                LPAREN_:      
02CC                LBRACE_:      
02CC   C3 8F 07               JP   lbrace   
02CF                RBRACE_:      
02CF   C3 F8 07               JP   rbrace   
02D2                TICK_:       
02D2   C3 7F 08               JP   tick   
02D5                SEMICOLON_:      
02D5   C3 94 08               JP   semicolon   
02D8                DOT_:        
02D8   C3 A2 04               JP   dot   
02DB                COLON_:      
02DB   C3 48 07               JP   colon   
02DE                UPCASE_:      
02DE   C3 C1 0A               JP   upcase   
02E1                LOWCASE_:      
02E1   C3 C6 0A               JP   lowcase   
02E4                QUESTION_:      
02E4   C3 D8 0A               JP   question   
02E7                STAR_:       
02E7   C3 03 0B               JP   star   
02EA                HASH_:       
02EA   C3 30 07               JP   hash   
02ED                CARET_:      
02ED   C3 05 0A               JP   caret   
02F0                COMMA_:      
02F0   C3 8D 06               JP   comma   
02F3                DQUOTE_:      
02F3   C3 7A 0B               JP   dquote   
02F6                BACKSLASH_:      
02F6   C3 8D 06               JP   backslash   
02F9                UNDERSCORE_:      
02F9   C3 8D 06               JP   underscore   
02FC                TILDE_:      
02FC   C3 8D 06               JP   tilde   
02FF                SLASH_:      
02FF   18 00                  JR   slash   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3 BEGIN *********************************************
0301                SLASH:       
0301                COMMAND:      
0301   03                     INC   bc   
0302   0A                     LD   a,(bc)   
0303   FE 2F                  CP   "/"   ; // comment
0305   CA FA 03               JP   z,comment   
0308   0B                     DEC   bc   
0309   CD C6 0B               CALL   commandTable   
030C   27                     DB   lsb(command_a_)   
030D   34                     DB   lsb(command_b_)   
030E   66                     DB   lsb(command_nop_)   
030F   68                     DB   lsb(decimal_)   
0310   66                     DB   lsb(command_nop_)   
0311   3F                     DB   lsb(command_f_)   
0312   66                     DB   lsb(command_nop_)   
0313   77                     DB   lsb(hexadecimal_)   
0314   42                     DB   lsb(command_i_)   
0315   66                     DB   lsb(command_nop_)   
0316   7D                     DB   lsb(key_)   
0317   66                     DB   lsb(command_nop_)   
0318   4B                     DB   lsb(command_m_)   
0319   66                     DB   lsb(command_nop_)   
031A   80                     DB   lsb(output_)   
031B   4E                     DB   lsb(command_p_)   
031C   57                     DB   lsb(command_q_)   
031D   60                     DB   lsb(command_r_)   
031E   66                     DB   lsb(command_nop_)   
031F   83                     DB   lsb(true_)   
0320   66                     DB   lsb(command_nop_)   
0321   63                     DB   lsb(command_v_)   
0322   86                     DB   lsb(words_)   
0323   89                     DB   lsb(xor_)   
0324   66                     DB   lsb(command_nop_)   
0325   66                     DB   lsb(command_nop_)   
0326   70                     DB   lsb(div_)   
0327                COMMAND_A_:      
0327   CD DA 0B               CALL   jumpTable   
032A   62                     DB   "b"   ; /ab absolute
032B   94                     DB   lsb(absolute_)   
032C   64                     DB   "d"   ; /ad address of
032D   A1                     DB   lsb(addrOf_)   
032E   73                     DB   "s"   ; /as array size
032F   C2                     DB   lsb(arraySize_)   
0330   00                     DB   NUL   
0331   C3 74 03               JP   error1_   
0334                COMMAND_B_:      
0334   CD DA 0B               CALL   jumpTable   
0337   72                     DB   "r"   ; /br break
0338   CA                     DB   lsb(break_)   
0339   79                     DB   "y"   ; /by cold boot
033A   CD                     DB   lsb(coldStart_)   
033B   00                     DB   NUL   
033C   C3 D0 03               JP   bytes_   ; /b bytes
033F                COMMAND_F_:      
033F   C3 03 04               JP   command_f   
0342                COMMAND_I_:      
0342   CD DA 0B               CALL   jumpTable   
0345   6E                     DB   "n"   ; /in input
0346   D8                     DB   lsb(input_)   
0347   00                     DB   NUL   
0348   C3 74 03               JP   error1_   
034B                COMMAND_M_:      
034B   C3 37 04               JP   command_m   
034E                COMMAND_P_:      
034E   CD DA 0B               CALL   jumpTable   
0351   63                     DB   "c"   ; /pc print chars
0352   E3                     DB   lsb(printChars_)   
0353   00                     DB   NUL   
0354   C3 74 03               JP   error1_   
0357                COMMAND_Q_:      
0357   CD DA 0B               CALL   jumpTable   
035A   74                     DB   "t"   ; /qt quit
035B   EA                     DB   lsb(quit_)   
035C   00                     DB   NUL   
035D   C3 74 03               JP   error1_   
0360                COMMAND_R_:      
0360   C3 43 04               JP   command_r   
0363                COMMAND_V_:      
0363   C3 5F 04               JP   command_v   
0366                COMMAND_NOP_:      
0366   DD E9                  JP   (ix)   
0368                DECIMAL_:      
0368   21 0A 00               LD   hl,10   
036B                DECIMAL1:      
036B   22 E8 23               LD   (vNumBase),hl   
036E   DD E9                  JP   (ix)   
0370                DIV_:        
0370   00                     DB   NUL   
0371   C3 30 09               JP   div   
0374                ERROR1_:      
0374   C3 42 0D               JP   error1   
0377                HEXADECIMAL_:      
0377   21 10 00               LD   hl,16   
037A   C3 6B 03               JP   decimal1   
037D                KEY_:        
037D   C3 7D 03               JP   key_   
0380                OUTPUT_:      
0380   C3 FA 0A               JP   output   
0383                TRUE_:       
0383   C3 B1 02               JP   true1   
0386                WORDS_:      
0386   C3 F4 03               JP   words   
0389                XOR_:        
0389   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
038A                XOR1:        
038A   E1                     POP   hl   
038B   7B                     LD   a,e   
038C   AD                     XOR   l   
038D   6F                     LD   l,a   
038E   7A                     LD   a,d   
038F   AC                     XOR   h   
0390   67                     LD   h,a   
0391   E5                     PUSH   hl   
0392   DD E9                  JP   (ix)   
0394                             ; /ab absolute
0394                             ; num -- num
0394                ABSOLUTE_:      
0394   E1                     POP   hl   
0395   CB 7C                  BIT   7,h   
0397   C8                     RET   z   
0398   AF                     XOR   a   
0399   95                     SUB   l   
039A   6F                     LD   l,a   
039B   9F                     SBC   a,a   
039C   94                     SUB   h   
039D   67                     LD   h,a   
039E   E5                     PUSH   hl   
039F   DD E9                  JP   (ix)   
03A1                             ; /ad addrOf
03A1                             ; char -- addr
03A1                ADDROF_:      
03A1   E1                     POP   hl   ; a = char
03A2   7D                     LD   a,l   
03A3   FE 7B                  CP   "z"+1   ; if a > z then exit
03A5   30 19                  JR   nc,addrOf2   
03A7   D6 41                  SUB   "A"   ; a - 65
03A9   38 15                  JR   c,addrOf2   ; if < A then exit
03AB   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
03AD   38 06                  JR   c,addrOf1   
03AF   D6 06                  SUB   "a"-("Z"+1)   
03B1   FE 1A                  CP   "Z"-"A"+1   
03B3   38 0B                  JR   c,addrOf2   ; if < a then exit
03B5                ADDROF1:      
03B5   87                     ADD   a,a   ; double a
03B6   21 00 23               LD   hl,VARS   ; hl = VARS + a
03B9   85                     ADD   a,l   
03BA   6F                     LD   l,a   
03BB   3E 00                  LD   a,0   
03BD   8C                     ADC   a,h   
03BE   67                     LD   h,a   
03BF   E5                     PUSH   hl   
03C0                ADDROF2:      
03C0   DD E9                  JP   (ix)   
03C2                             ; /as size of an array, num elements, ignores vDataWidth :-/
03C2                             ; array* -- num
03C2                ARRAYSIZE_:      
03C2   E1                     POP   hl   
03C3   2B                     DEC   hl   ; msb size
03C4   56                     LD   d,(hl)   
03C5   2B                     DEC   hl   ; lsb size
03C6   5E                     LD   e,(hl)   
03C7   D5                     PUSH   de   
03C8   DD E9                  JP   (ix)   
03CA                             ; /br
03CA                BREAK_:      
03CA   C3 65 08               JP   break   
03CD                             ; /by
03CD                COLDSTART_:      
03CD   C3 8B 0C               JP   coldStart   
03D0                             ; /b
03D0                BYTES_:      
03D0   21 01 00               LD   hl,1   
03D3                BYTES1:      
03D3   22 E6 23               LD   (vDataWidth),hl   
03D6   DD E9                  JP   (ix)   
03D8                             ; Z80 port input
03D8                             ; port -- value
03D8                INPUT_:      
03D8   E1                     POP   hl   
03D9   59                     LD   e,c   ; save IP
03DA   4D                     LD   c,l   
03DB   ED 68                  IN   l,(c)   
03DD   26 00                  LD   h,0   
03DF   4B                     LD   c,e   ; restore IP
03E0   E5                     PUSH   hl   
03E1   DD E9                  JP   (ix)   
03E3                             ; /pc printChars
03E3                             ; char* len --
03E3                PRINTCHARS_:      
03E3   E1                     POP   hl   ; hl = count
03E4   D1                     POP   de   ; de = char*
03E5   CD A8 0B               CALL   printChars2   
03E8   DD E9                  JP   (ix)   
03EA                             ; /qt
03EA                QUIT_:       
03EA   E1                     POP   hl   ; hl = condition, exit if true
03EB   7D                     LD   a,l   
03EC   B4                     OR   h   
03ED   20 02                  JR   nz,quit1   
03EF   DD E9                  JP   (ix)   
03F1                QUIT1:       
03F1   C3 F8 07               JP   blockEnd   
03F4                             ; /w
03F4                WORDS:       
03F4   21 02 00               LD   hl,2   
03F7   C3 D3 03               JP   bytes1   
03FA                             ; //
03FA                COMMENT:      
03FA   03                     INC   bc   ; point to next char
03FB   0A                     LD   a,(bc)   
03FC   FE 20                  CP   " "   ; terminate on any char less than SP
03FE   30 FA                  JR   nc,comment   
0400   0B                     DEC   bc   
0401   DD E9                  JP   (ix)   
0403                             ;********************** PAGE 3 END *********************************************
0403                             ;********************** PAGE 4 BEGIN *********************************************
0403                COMMAND_F:      
0403   CD DA 0B               CALL   jumpTable   
0406   65                     DB   "e"   ; /fe forEach
0407   1A                     DB   lsb(forEach_)   
0408   6C                     DB   "l"   ; /fl flush output buffer
0409   1D                     DB   lsb(flush_)   
040A   73                     DB   "s"   ; /fs funcSrc
040B   22                     DB   lsb(funcSrc_)   
040C   31                     DB   "1"   
040D   25                     DB   lsb(f1_)   
040E   32                     DB   "2"   
040F   28                     DB   lsb(f2_)   
0410   33                     DB   "3"   
0411   2B                     DB   lsb(f3_)   
0412   34                     DB   "4"   
0413   2E                     DB   lsb(f4_)   
0414   7A                     DB   "z"   
0415   31                     DB   lsb(fz_)   
0416   00                     DB   NUL   
0417   C3 34 04               JP   false_   
041A                FOREACH_:      
041A   C3 F7 04               JP   forEach   
041D                             ; /fl flush
041D                             ; --
041D                FLUSH_:      
041D   CD AF 0B               CALL   flushBuffer   
0420   DD E9                  JP   (ix)   
0422                FUNCSRC_:      
0422   C3 44 05               JP   funcSrc   
0425                F1_:         
0425   C3 8E 0D               JP   f1   
0428                F2_:         
0428   C3 8E 0D               JP   f2   
042B                F3_:         
042B   C3 8E 0D               JP   f3   
042E                F4_:         
042E   C3 8E 0D               JP   f4   
0431                FZ_:         
0431   C3 F8 09               JP   fz   
0434                FALSE_:      
0434   C3 B7 02               JP   false1   
0437                COMMAND_M:      
0437   CD DA 0B               CALL   jumpTable   
043A   70                     DB   "p"   ; /mp map
043B   40                     DB   lsb(map_)   
043C   00                     DB   NUL   
043D   C3 74 03               JP   error1_   
0440                MAP_:        
0440   C3 C7 05               JP   map   
0443                COMMAND_R:      
0443   CD DA 0B               CALL   jumpTable   
0446   63                     DB   "c"   ; /rc tail call optimisation
0447   50                     DB   lsb(recur_)   
0448   65                     DB   "e"   ; /re remainder
0449   56                     DB   lsb(remain_)   
044A   67                     DB   "g"   ; /rg range src
044B   5C                     DB   lsb(rangeSrc_)   
044C   00                     DB   NUL   
044D   C3 74 03               JP   error1_   
0450                RECUR_:      
0450   E1                     POP   hl   
0451   22 F2 23               LD   (vRecur),hl   
0454   DD E9                  JP   (ix)   
0456                REMAIN_:      
0456   2A F6 23               LD   hl,(vRemain)   
0459   E5                     PUSH   hl   
045A   DD E9                  JP   (ix)   
045C                RANGESRC_:      
045C   C3 0B 06               JP   rangeSrc   
045F                COMMAND_V:      
045F   CD DA 0B               CALL   jumpTable   
0462   62                     DB   "b"   
0463   81                     DB   lsb(varBufPtr_)   
0464   68                     DB   "h"   
0465   8A                     DB   lsb(varHeapPtr_)   
0466   74                     DB   "t"   
0467   93                     DB   lsb(varTIBPtr_)   
0468   42                     DB   "B"   
0469   72                     DB   lsb(constBufStart_)   
046A   48                     DB   "H"   
046B   77                     DB   lsb(constHeapStart_)   
046C   54                     DB   "T"   
046D   7C                     DB   lsb(constTIBStart_)   
046E   00                     DB   NUL   
046F   C3 74 03               JP   error1_   
0472                CONSTBUFSTART_:      
0472   11 00 22               LD   de,BUF   
0475   18 28                  JR   constant   
0477                CONSTHEAPSTART_:      
0477   11 1C 24               LD   de,HEAP   
047A   18 23                  JR   constant   
047C                CONSTTIBSTART_:      
047C   11 00 21               LD   de,TIB   
047F   18 1E                  JR   constant   
0481                VARBUFPTR_:      
0481   ED 5B EC 23            LD   de,(vBufPtr)   
0485   21 EC 23               LD   hl,vBufPtr   
0488   18 12                  JR   variable   
048A                VARHEAPPTR_:      
048A   ED 5B F0 23            LD   de,(vHeapPtr)   
048E   21 F0 23               LD   hl,vHeapPtr   
0491   18 09                  JR   variable   
0493                VARTIBPTR_:      
0493   ED 5B EA 23            LD   de,(vTIBPtr)   
0497   21 EA 23               LD   hl,vTIBPtr   
049A   18 00                  JR   variable   
049C                VARIABLE:      
049C   22 F4 23               LD   (vPointer),hl   
049F                CONSTANT:      
049F   D5                     PUSH   de   
04A0   DD E9                  JP   (ix)   
04A2                DOT:         
04A2   CD DA 0B               CALL   jumpTable   
04A5   61                     DB   "a"   ; .a print array
04A6   7F                     DB   lsb(dotArray)   
04A7   63                     DB   "c"   ; .c print char
04A8   D6                     DB   lsb(dotChar_)   
04A9   73                     DB   "s"   ; .s print string
04AA   BC                     DB   lsb(dotString_)   
04AB   78                     DB   "x"   ; .x print x chars
04AC   DB                     DB   lsb(dotXChars_)   
04AD   00                     DB   NUL   ; .  print number
04AE   C3 B1 04               JP   dotNumber_   
04B1                             ; /bd buffer decimal
04B1                             ; value --
04B1                DOTNUMBER_:      
04B1   3A E8 23               LD   a,(vNumBase)   
04B4   FE 10                  CP   16   
04B6   CA A7 09               JP   z,bufferHex   ; else falls through
04B9   C3 41 09               JP   bufferDec   
04BC                             ; /bs buffered string
04BC                             ; string* --
04BC                DOTSTRING_:      
04BC   E1                     POP   hl   ; hl = string*
04BD   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
04C1   18 06                  JR   dotString1   
04C3                DOTSTRING0:      
04C3   12                     LD   (de),a   ; a -> buffer*
04C4   1C                     INC   e   ; buffer*++, wraparound
04C5   CC AF 0B               CALL   z,flushBuffer   
04C8   23                     INC   hl   
04C9                DOTSTRING1:      
04C9   7E                     LD   a,(hl)   ; a <- string*
04CA   B7                     OR   a   ; if NUL exit loop
04CB   20 F6                  JR   nz,dotString0   
04CD   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
04D0   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
04D4   DD E9                  JP   (ix)   
04D6                             ; /bc buffer char
04D6                             ; char --
04D6                DOTCHAR_:      
04D6   21 01 00               LD   hl,1   
04D9   18 01                  JR   dotXChars0   
04DB                             ; /bx buffered x chars
04DB                             ; char length --
04DB                DOTXCHARS_:      
04DB   E1                     POP   hl   ; hl = length
04DC                DOTXCHARS0:      
04DC   D1                     POP   de   ; a' = char
04DD   7B                     LD   a,e   
04DE   08                     EX   af,af'   
04DF   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
04E3   18 08                  JR   dotXChars2   
04E5                DOTXCHARS1:      
04E5   08                     EX   af,af'   
04E6   12                     LD   (de),a   
04E7   08                     EX   af,af'   
04E8   1C                     INC   e   ; buffer*++, wraparound
04E9   CC AF 0B               CALL   z,flushBuffer   
04EC   2B                     DEC   hl   
04ED                DOTXCHARS2:      
04ED   7D                     LD   a,l   
04EE   B4                     OR   h   
04EF   20 F4                  JR   nz,dotXChars1   
04F1   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
04F5   DD E9                  JP   (ix)   
04F7                             ;********************** PAGE 4 END *********************************************
04F7                             ;*******************************************************************
04F7                             ; Monty implementations
04F7                             ;*******************************************************************
04F7                             ; /fe forEach
04F7                             ; src proc --
04F7                          ;*Macro unroll: FUNC forEach, 1, "spT"
04F7                FOREACH:      
04F7   CD 05 0A               CALL   go   
04FA   00 00                  DW   NUL   
04FC   05 05                  DW   forEachM_1289S858   
04FE   00 05                  DW   $+2   
0500   01                     DB   1   
0501   03 73 70 54            .PSTR   "spT"   
0505                FOREACHM_1289S858:      
0505   7B                     DB   "{"   
0506   5B 30 5D 25 54 3D      DB   "[0]%T="   
050C   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data ; $56AA
0510   32 25 74 21 3D 7B      DB   "2%t!={"   ; if type == 2 skip
0516   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
051B   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
052D   3F 3F                  DB   "??"   ; ifte:
052F   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0538   7D 3F                  DB   "}?"   
053A   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0542   7D                     DB   "}"   
0543   00                     DB   0   
0544                             ; ; /fs funcSrc
0544                             ; ; func -- src
0544                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0544                FUNCSRC:      ; :f func or block
0544   CD 05 0A               CALL   go   
0547   00 00                  DW   NUL   
0549   50 05                  DW   funcSrcM_1304S874   
054B   4D 05                  DW   $+2   
054D   00                     DB   0   
054E   01 66                  .PSTR   "f"   
0550                FUNCSRCM_1304S874:      
0550   7B                     DB   "{"   
0551   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0555   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
055D   3A 64 74 7B            DB   ":dt{"   
0561   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0573   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
057B   7D 3B                  DB   "};"   
057D   7D                     DB   "}"   
057E   00                     DB   0   
057F                          ;*Macro unroll: FUNC dotArray, 2, "abc"
057F                DOTARRAY:      
057F   CD 05 0A               CALL   go   
0582   00 00                  DW   NUL   
0584   8D 05                  DW   dotArrayM_1314S885   
0586   88 05                  DW   $+2   
0588   02                     DB   2   
0589   03 61 62 63            .PSTR   "abc"   
058D                DOTARRAYM_1314S885:      
058D   7B                     DB   "{"   
058E   60 5B 20 60 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 DB   "`[ `.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s"   
05C5   7D                     DB   "}"   
05C6   00                     DB   0   
05C7                             ; /mp map
05C7                             ; src func -- src1
05C7                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
05C7                MAP:         ; map
05C7   CD 05 0A               CALL   go   
05CA   00 00                  DW   NUL   
05CC   D4 05                  DW   mapM_1321S893   
05CE   D0 05                  DW   $+2   
05D0   00                     DB   0   
05D1   02 73 66               .PSTR   "sf"   
05D4                MAPM_1321S893:      
05D4   7B                     DB   "{"   
05D5   3A 6B 74 7B            DB   ":kt{"   
05D9   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
05E1   3A 64 74 7B            DB   ":dt{"   ; call source with tb
05E5   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
05EA   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
05F6   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
05FF   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0607   7D 3B                  DB   "};"   
0609   7D                     DB   "}"   
060A   00                     DB   0   
060B                             ; /rg rangeSrc
060B                             ; begin end step -- src
060B                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
060B                RANGESRC:      ; range source (begin end step)
060B   CD 05 0A               CALL   go   
060E   00 00                  DW   NUL   
0610   1A 06                  DW   rangeSrcM_1335S908   
0612   14 06                  DW   $+2   
0614   01                     DB   1   
0615   04 62 65 73 4C         .PSTR   "besL"   
061A                RANGESRCM_1335S908:      
061A   7B                     DB   "{"   
061B   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0626   3A 6B 74 7B            DB   ":kt{"   
062A   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0632   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0638   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
063F   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0647   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0656   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
065E   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0665   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0679   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0681   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0689   7D 3B                  DB   "};"   
068B   7D                     DB   "}"   
068C   00                     DB   0   
068D                             ;*******************************************************************
068D                             ; unused opcodes (reserved)
068D                             ;*******************************************************************
068D                BACKSLASH:      
068D                UNDERSCORE:      
068D                TILDE:       
068D                COMMA:       
068D   DD E9                  JP   (ix)   
068F                             ;*******************************************************************
068F                             ; implementations
068F                             ;*******************************************************************
068F                             ; %a .. %z
068F                             ; -- value
068F                             ; returns value of arg
068F                PERCENT:      
068F                ARG:         
068F   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0692   FD 56 05               LD   d,(iy+5)   
0695   EB                     EX   de,hl   
0696   7D                     LD   a,l   ; arg_list* == null, skip
0697   B4                     OR   h   
0698   28 1A                  JR   z,arg0a   
069A   23                     INC   hl   ; a = num_args, hl = arg_list*
069B   7E                     LD   a,(hl)   
069C   23                     INC   hl   
069D   B7                     OR   a   
069E   28 14                  JR   z,arg0a   ; num_args == 0, skip
06A0   5F                     LD   e,a   ; e = a = num_args
06A1   03                     INC   bc   ; a = next char = dollar_name
06A2   0A                     LD   a,(bc)   
06A3   C5                     PUSH   bc   ; save IP
06A4   43                     LD   b,e   ; b = e = num_args
06A5   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
06A8   FD 56 03               LD   d,(iy+3)   
06AB                ARG0:        
06AB   1B                     DEC   de   ; a = dollar_name, de = next arg*
06AC   1B                     DEC   de   
06AD   BE                     CP   (hl)   
06AE   28 09                  JR   z,arg1   
06B0   23                     INC   hl   ; hl = next arg_list*
06B1   10 F8                  DJNZ   arg0   
06B3   C1                     POP   bc   ; no match, restore IP
06B4                ARG0A:       
06B4   11 00 00               LD   de,0   ; return 0
06B7   18 08                  JR   arg1a   
06B9                ARG1:        
06B9   C1                     POP   bc   ; restore IP
06BA   EB                     EX   de,hl   ; hl = arg*
06BB   22 F4 23               LD   (vPointer),hl   ; store arg* in setter
06BE   5E                     LD   e,(hl)   
06BF   23                     INC   hl   
06C0   56                     LD   d,(hl)   ; de = arg
06C1                ARG1A:       
06C1   D5                     PUSH   de   ; push arg
06C2   DD E9                  JP   (ix)   
06C4                LBRACK:      
06C4                ARRAYSTART:      
06C4   11 00 00               LD   de,0   ; create stack frame
06C7   D5                     PUSH   de   ; push null for IP
06C8   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
06CB   FD 56 05               LD   d,(iy+5)   ; 
06CE   D5                     PUSH   de   ; 
06CF   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
06D2   FD 56 03               LD   d,(iy+3)   ; 
06D5   D5                     PUSH   de   ; 
06D6   FD E5                  PUSH   iy   ; push BP
06D8   FD 21 00 00            LD   iy,0   ; BP = SP
06DC   FD 39                  ADD   iy,sp   
06DE   DD E9                  JP   (ix)   
06E0                RBRACK:      
06E0                ARRAYEND:      
06E0   FD 54                  LD   d,iyh   ; de = BP
06E2   FD 5D                  LD   e,iyl   
06E4   ED 43 00 24            LD   (vTemp1),bc   ; save IP
06E8   62 6B                  LD   hl,de   ; hl = de = BP
06EA   B7                     OR   a   
06EB   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
06ED   CB 3C                  SRL   h   ; 
06EF   CB 1D                  RR   l   
06F1   44 4D                  LD   bc,hl   ; bc = count
06F3   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
06F6   71                     LD   (hl),c   ; write num items in length word
06F7   23                     INC   hl   
06F8   70                     LD   (hl),b   
06F9   23                     INC   hl   ; hl = array[0], bc = count
06FA                             ; de = BP, hl = array[0], bc = count
06FA   18 15                  JR   arrayEnd3   
06FC                ARRAYEND1:      
06FC   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
06FF   77                     LD   (hl),a   ; write lsb of array item
0700   23                     INC   hl   ; move to msb of array item
0701   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0704   3D                     DEC   a   
0705   28 05                  JR   z,arrayEnd2   
0707   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
070A   77                     LD   (hl),a   ; write msb of array item
070B   23                     INC   hl   ; move to next word in array
070C                ARRAYEND2:      
070C   FD 2B                  DEC   iy   ; move to next word on stack
070E   FD 2B                  DEC   iy   
0710   0B                     DEC   bc   ; dec items count
0711                ARRAYEND3:      
0711   79                     LD   a,c   ; if not zero loop
0712   B0                     OR   b   
0713   20 E7                  JR   nz,arrayEnd1   
0715   EB                     EX   de,hl   ; de = end of array, hl = BP
0716   F9                     LD   sp,hl   ; sp = BP
0717   E1                     POP   hl   ; de = end of array, hl = old BP
0718   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0719   FD 62                  LD   iyh,d   
071B   FD 6B                  LD   iyl,e   
071D   D1                     POP   de   ; pop arg_list (discard)
071E   D1                     POP   de   ; pop first_arg* (discard)
071F   D1                     POP   de   ; pop IP (discard)
0720   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0724   13                     INC   de   
0725   13                     INC   de   
0726   D5                     PUSH   de   ; return array[0]
0727   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
072A   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
072E   DD E9                  JP   (ix)   
0730                             ; index of an array, based on vDataWidth
0730                             ; array* num -- value    ; also sets vPointer to address
0730                HASH:        
0730                ARRAYINDEX:      
0730   E1                     POP   hl   ; hl = index
0731   D1                     POP   de   ; de = array
0732   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0735   3D                     DEC   a   
0736   28 01                  JR   z,arrayIndex1   
0738                ARRAYINDEX0:      
0738   29                     ADD   hl,hl   ; if data width = 2 then double
0739                ARRAYINDEX1:      
0739   19                     ADD   hl,de   ; add addr
073A   22 F4 23               LD   (vPointer),hl   ; store address in setter
073D   16 00                  LD   d,0   
073F   5E                     LD   e,(hl)   
0740   B7                     OR   a   ; check data width again
0741   28 02                  JR   z,arrayIndex2   
0743   23                     INC   hl   
0744   56                     LD   d,(hl)   
0745                ARRAYINDEX2:      
0745   D5                     PUSH   de   
0746   DD E9                  JP   (ix)   
0748                             ; arg_list - parses input (ab:c)
0748                             ; names after the : represent uninitialised locals
0748                             ; return values are the state of the stack after the block ends
0748                             ; format: numLocals totNumArgs argChars...
0748                COLON:       
0748                ARGLIST:      
0748   11 00 00               LD   de,0   ; d = count locals, e = count args ()
074B   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
074E   E5                     PUSH   hl   ; save start of arg_list
074F   23                     INC   hl   ; skip length fields to start of string
0750   23                     INC   hl   
0751   03                     INC   bc   ; point to next char
0752                ARGLIST1:      
0752   0A                     LD   a,(bc)   
0753   FE 3A                  CP   ":"   ; ":" switches from args to locals
0755   20 03                  JR   nz,arglist1a   
0757   14                     INC   d   ; non zero value local count acts as flag
0758   18 10                  JR   arglist3   
075A                ARGLIST1A:      
075A   FE 61                  CP   "a"   ; < "a" terminates arg_list
075C   38 0F                  JR   c,arglist4   
075E   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0760   30 0B                  JR   nc,arglist4   
0762                ARGLIST2:      
0762   77                     LD   (hl),a   
0763   23                     INC   hl   
0764   1C                     INC   e   ; increase arg count
0765   AF                     XOR   a   
0766   B2                     OR   d   
0767   28 01                  JR   z,arglist3   
0769   14                     INC   d   ; if d > 0 increase local count
076A                ARGLIST3:      
076A   03                     INC   bc   ; point to next char
076B   18 E5                  JR   arglist1   
076D                ARGLIST4:      
076D   0B                     DEC   bc   
076E   AF                     XOR   a   
076F   B2                     OR   d   
0770   28 01                  JR   z,arglist5   
0772   15                     DEC   d   ; remove initial inc
0773                ARGLIST5:      
0773   23                     INC   hl   
0774   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0777   E1                     POP   hl   ; hl = start of arg_list
0778   E5                     PUSH   hl   ; return start of arg_list
0779   72                     LD   (hl),d   ; write number of locals at start - 1
077A   23                     INC   hl   
077B   73                     LD   (hl),e   ; write number of args + locals at start - 2
077C   DD E9                  JP   (ix)   
077E                             ; value _oldValue --            ; uses address in vPointer
077E                ASSIGN:      
077E   E1                     POP   hl   ; discard last accessed value
077F   E1                     POP   hl   ; hl = new value
0780                ASSIGN0:      
0780   EB                     EX   de,hl   ; de = new value
0781                ASSIGNX:      
0781   2A F4 23               LD   hl,(vPointer)   
0784   73                     LD   (hl),e   
0785   3A E6 23               LD   a,(vDataWidth)   
0788   3D                     DEC   a   ; is it byte?
0789   28 02                  JR   z,assign1   
078B   23                     INC   hl   
078C   72                     LD   (hl),d   
078D                ASSIGN1:      
078D   DD E9                  JP   (ix)   
078F                LBRACE:      
078F                BLOCKSTART:      
078F   C5                     PUSH   bc   ; return pointer to first { of block
0790   03                     INC   bc   
0791   16 01                  LD   d,1   ; nesting: count first parenthesis
0793                BLOCKSTART1:      ; Skip to end of definition
0793   0A                     LD   a,(bc)   ; Get the next character
0794   03                     INC   bc   ; Point to next character
0795   FE 21                  CP   " " + 1   ; ignore whitespace
0797   38 FA                  JR   c,blockStart1   
0799   FE 29                  CP   ")"   
079B   28 2D                  JR   z,blockStart4   
079D   FE 7D                  CP   "}"   
079F   28 29                  JR   z,blockStart4   
07A1   FE 5D                  CP   "]"   
07A3   28 25                  JR   z,blockStart4   
07A5   FE 28                  CP   "("   
07A7   28 16                  JR   z,blockStart2   
07A9   FE 7B                  CP   "{"   
07AB   28 12                  JR   z,blockStart2   
07AD   FE 5B                  CP   "["   
07AF   28 0E                  JR   z,blockStart2   
07B1   FE 27                  CP   "'"   
07B3   28 0D                  JR   z,blockStart3   
07B5   FE 60                  CP   "`"   
07B7   28 09                  JR   z,blockStart3   
07B9   FE 22                  CP   DQ   
07BB   28 05                  JR   z,blockStart3   
07BD   18 D4                  JR   blockStart1   
07BF                BLOCKSTART2:      
07BF   14                     INC   d   
07C0   18 D1                  JR   blockStart1   
07C2                BLOCKSTART3:      
07C2   3E 80                  LD   a,$80   
07C4   AA                     XOR   d   
07C5   57                     LD   d,a   
07C6   20 CB                  JR   nz,blockStart1   
07C8   18 03                  JR   blockStart5   
07CA                BLOCKSTART4:      
07CA   15                     DEC   d   
07CB   20 C6                  JR   nz,blockStart1   ; get the next element
07CD                BLOCKSTART5:      
07CD   60 69                  LD   hl,bc   ; hl = IP
07CF   11 1C 24               LD   de,HEAP   ; is IP pointing to object in heap
07D2   B7                     OR   a   ; IP - HEAP
07D3   ED 52                  SBC   hl,de   
07D5   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
07D7   28 1C                  JR   z,blockStart6   
07D9   60 69                  LD   hl,bc   ; hl = IP
07DB   D1                     POP   de   ; de = block*
07DC   ED 43 00 24            LD   (vTemp1),bc   ; save IP
07E0   B7                     OR   a   ; bc = size
07E1   ED 52                  SBC   hl,de   
07E3   44 4D                  LD   bc,hl   
07E5   EB                     EX   de,hl   ; hl = block* de = heap*
07E6   ED 5B F0 23            LD   de,(vHeapPtr)   
07EA   D5                     PUSH   de   ; return hblock*
07EB   ED B0                  LDIR      ; copy size bytes from block* to hblock*
07ED   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
07F1   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
07F5                BLOCKSTART6:      
07F5   0B                     DEC   bc   ; balanced, exit
07F6   DD E9                  JP   (ix)   
07F8                RBRACE:      
07F8                BLOCKEND:      
07F8   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
07FB   FD 56 01               LD   d,(iy+1)   
07FE   ED 53 00 24            LD   (vTemp1),de   
0802   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0805   FD 56 07               LD   d,(iy+7)   
0808   ED 53 02 24            LD   (vTemp2),de   
080C   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
080F   FD 56 03               LD   d,(iy+3)   
0812   EB                     EX   de,hl   
0813   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0816   FD 56 01               LD   d,(iy+1)   
0819   13                     INC   de   ; for carry flag <=
081A   B7                     OR   a   
081B   ED 52                  SBC   hl,de   
081D   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
081F   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0821   FD 5D                  LD   e,iyl   
0823   21 08 00               LD   hl,8   
0826   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0827   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0828   18 0C                  JR   blockEnd2   
082A                BLOCKEND1:      ; same scope
082A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
082D   FD 56 03               LD   d,(iy+3)   
0830   EB                     EX   de,hl   
0831   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0833   FD 5D                  LD   e,iyl   
0835   EB                     EX   de,hl   
0836                BLOCKEND2:      
0836   44 4D                  LD   bc,hl   ; bc = hl = BP
0838   B7                     OR   a   ; hl = BP - SP = count
0839   ED 72                  SBC   hl,sp   
083B   7D                     LD   a,l   
083C   B4                     OR   h   
083D   28 09                  JR   z,blockEnd3   
083F   C5                     PUSH   bc   ; bc = count, hl = BP
0840   44 4D                  LD   bc,hl   
0842   E1                     POP   hl   
0843   2B                     DEC   hl   ; hl = BP-1
0844   1B                     DEC   de   ; de = args*-1
0845   ED B8                  LDDR      
0847   13                     INC   de   
0848                BLOCKEND3:      
0848   EB                     EX   de,hl   ; sp = de = new tos*
0849   F9                     LD   sp,hl   
084A   ED 4B 02 24            LD   bc,(vTemp2)   
084E   FD 2A 00 24            LD   iy,(vTemp1)   
0852   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0856   7B                     LD   a,e   ; check for NUL
0857   B2                     OR   d   
0858   20 02                  JR   nz,blockEnd4   
085A   DD E9                  JP   (ix)   
085C                BLOCKEND4:      
085C   21 00 00               LD   hl,0   ; clear recur vector
085F   22 F2 23               LD   (vRecur),hl   
0862   C3 06 0A               JP   go1   ; execute de
0865                             ; /br break from loop
0865                             ; --
0865                BREAK:       
0865   E1                     POP   hl   ; hl = condition, break if false
0866   7D                     LD   a,l   
0867   B4                     OR   h   
0868   28 02                  JR   z,break1   
086A   DD E9                  JP   (ix)   
086C                BREAK1:      
086C   FD 5D                  LD   e,iyl   ; get block* just under stack frame
086E   FD 54                  LD   d,iyh   
0870   21 08 00               LD   hl,8   
0873   19                     ADD   hl,de   
0874   23                     INC   hl   
0875   23                     INC   hl   
0876   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0879   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
087C   C3 F8 07               JP   blockEnd   
087F                TICK:        
087F                CHAR:        
087F   21 00 00               LD   hl,0   ; if "" is empty or null
0882                CHAR1:       
0882   03                     INC   bc   ; point to next char
0883   0A                     LD   a,(bc)   
0884   FE 27                  CP   "'"   ; ' is the terminator
0886   28 09                  JR   z,char3   
0888   FE 5C                  CP   $5c   ; \ is the escape
088A   20 02                  JR   nz,char2   
088C   03                     INC   bc   
088D   0A                     LD   a,(bc)   
088E                CHAR2:       
088E   6F                     LD   l,a   
088F   18 F1                  JR   char1   
0891                CHAR3:       
0891   E5                     PUSH   hl   
0892   DD E9                  JP   (ix)   
0894                             ; ";" createFunc
0894                             ; arg_list* block* -- func*
0894                SEMICOLON:      
0894                CREATEFUNC:      
0894   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0898   E1                     POP   hl   ; hl = block*
0899   22 02 24               LD   (vTemp2),hl   ; save block*
089C   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
089F   FD 56 05               LD   d,(iy+5)   
08A2   7B                     LD   a,e   ; if arg_list == null then make a func
08A3   B2                     OR   d   
08A4   20 09                  JR   nz,createFunc0   
08A6   21 00 00               LD   hl,0   ; partial_array = null
08A9   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
08AD   18 65                  JR   createFunc5   
08AF                CREATEFUNC0:      
08AF   E1                     POP   hl   ; hl = inner_arg_list*
08B0   E5                     PUSH   hl   ; save inner_arg_list
08B1   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
08B5   7E                     LD   a,(hl)   ; compile inner_num_locals
08B6   4F                     LD   c,a   ; b = inner_num_locals
08B7   12                     LD   (de),a   
08B8   23                     INC   hl   
08B9   13                     INC   de   
08BA   7E                     LD   a,(hl)   ; compile inner_length
08BB   12                     LD   (de),a   
08BC   91                     SUB   c   ; a = inner_num args
08BD   23                     INC   hl   
08BE   13                     INC   de   
08BF   B7                     OR   a   ; compile args if inner_length > 0
08C0   28 05                  JR   z,createFunc1   
08C2   4F                     LD   c,a   ; bc = a
08C3   06 00                  LD   b,0   
08C5   ED B0                  LDIR      
08C7                CREATEFUNC1:      
08C7   EB                     EX   de,hl   ; hl = outer_arg_list
08C8   FD 5E 04               LD   e,(iy+4)   
08CB   FD 56 05               LD   d,(iy+5)   
08CE   EB                     EX   de,hl   
08CF   23                     INC   hl   ; a = outer_length
08D0   7E                     LD   a,(hl)   
08D1   23                     INC   hl   
08D2   B7                     OR   a   
08D3   28 05                  JR   z,createFunc2   
08D5   4F                     LD   c,a   
08D6   06 00                  LD   b,0   
08D8   ED B0                  LDIR      ; append outer_args
08DA                CREATEFUNC2:      ; a = outer_length
08DA   47                     LD   b,a   ; b = a = outer_length
08DB   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
08DE   23                     INC   hl   
08DF   7E                     LD   a,(hl)   ; add outer_length to new length
08E0   80                     ADD   a,b   
08E1   77                     LD   (hl),a   
08E2   2B                     DEC   hl   
08E3   78                     LD   a,b   ; save outer_length in a'
08E4   08                     EX   af,af'   
08E5   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
08E6   7E                     LD   a,(hl)   ; c = a = inner_num_locals
08E7   B7                     OR   a   
08E8   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
08EA   4F                     LD   c,a   ; c = inner_num_locals
08EB   06 00                  LD   b,0   ; bc = inner_num_locals
08ED   23                     INC   hl   ; a = inner_length
08EE   7E                     LD   a,(hl)   
08EF   91                     SUB   c   ; a = inner_num_args
08F0   23                     INC   hl   ; hl = inner_arg_chars
08F1   85                     ADD   a,l   ; hl += a
08F2   6F                     LD   l,a   
08F3   3E 00                  LD   a,0   
08F5   84                     ADD   a,h   
08F6   67                     LD   h,a   
08F7   ED B0                  LDIR      ; append inner_locals
08F9                CREATEFUNC2A:      
08F9   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
08FA   12                     LD   (de),a   ; compile partial_array length field
08FB   13                     INC   de   
08FC   AF                     XOR   a   
08FD   12                     LD   (de),a   
08FE   13                     INC   de   
08FF   D5                     PUSH   de   ; push partial_array*
0900   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0901   FD 5E 02               LD   e,(iy+2)   
0904   FD 56 03               LD   d,(iy+3)   
0907   EB                     EX   de,hl   
0908                CREATEFUNC3:      
0908   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0909   4E                     LD   c,(hl)   
090A   2B                     DEC   hl   
090B   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
090C   12                     LD   (de),a   ; write LSB and MSB to partial_array*
090D   13                     INC   de   
090E   79                     LD   a,c   
090F   12                     LD   (de),a   
0910   13                     INC   de   
0911   10 F5                  DJNZ   createFunc3   ; b = outer_length
0913                CREATEFUNC4:      
0913   E1                     POP   hl   ; hl = partial_array*
0914                CREATEFUNC5:      
0914   C1                     POP   bc   ; bc = new_arg_list*
0915   D5                     PUSH   de   ; return new func*
0916   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0917   73                     LD   (hl),e   ; compile partial_array* to func
0918   23                     INC   hl   
0919   72                     LD   (hl),d   
091A   23                     INC   hl   
091B   ED 5B 02 24            LD   de,(vTemp2)   ; de = block*
091F   73                     LD   (hl),e   ; compile block* to func
0920   23                     INC   hl   
0921   72                     LD   (hl),d   
0922   23                     INC   hl   
0923   71                     LD   (hl),c   ; compile new_arg_list* to func
0924   23                     INC   hl   
0925   70                     LD   (hl),b   
0926   23                     INC   hl   
0927   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
092A   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
092E   DD E9                  JP   (ix)   
0930                DIV:         
0930   D1                     POP   de   
0931   E1                     POP   hl   
0932   C5                     PUSH   bc   ; preserve the IP
0933   44 4D                  LD   bc,hl   
0935   CD DF 09               CALL   divide   
0938   EB                     EX   de,hl   
0939   ED 53 F6 23            LD   (vRemain),de   
093D   C1                     POP   bc   
093E   C3 13 02               JP   add3   
0941                             ; /bd buffer decimal
0941                             ; value --
0941                BUFFERDEC:      
0941   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0945   D9                     EXX      
0946   E1                     POP   hl   ; hl = value
0947   CD 5B 09               CALL   bufferDec0   
094A   D9                     EXX      ; de = buffer*' bc = IP
094B   3E 20                  LD   a," "   ; append space to buffer
094D   12                     LD   (de),a   
094E   1C                     INC   e   ; buffer*++, wraparound
094F   CC AF 0B               CALL   z,flushBuffer   
0952   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
0955   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0959   DD E9                  JP   (ix)   
095B                             ; hl = value
095B                             ; de' = buffer*
095B                             ; a, bc, de, hl destroyed
095B                BUFFERDEC0:      
095B   CB 7C                  BIT   7,h   
095D   28 0C                  JR   z,bufferDec1   
095F   D9                     EXX      
0960   3E 2D                  LD   a,"-"   
0962   12                     LD   (de),a   
0963   13                     INC   de   
0964   D9                     EXX      
0965   AF                     XOR   a   
0966   95                     SUB   l   
0967   6F                     LD   l,a   
0968   9F                     SBC   a,a   
0969   94                     SUB   h   
096A   67                     LD   h,a   
096B                BUFFERDEC1:      
096B   0E 00                  LD   c,0   ; leading zeros flag = false
096D   11 F0 D8               LD   de,-10000   
0970   CD 8B 09               CALL   bufferDec2   
0973   11 18 FC               LD   de,-1000   
0976   CD 8B 09               CALL   bufferDec2   
0979   11 9C FF               LD   de,-100   
097C   CD 8B 09               CALL   bufferDec2   
097F   1E F6                  LD   e,-10   
0981   CD 8B 09               CALL   bufferDec2   
0984   0C                     INC   c   ; flag = true for at least digit
0985   1E FF                  LD   e,-1   
0987   CD 8B 09               CALL   bufferDec2   
098A   C9                     RET      
098B                BUFFERDEC2:      
098B   06 2F                  LD   b,"0"-1   
098D                BUFFERDEC3:      
098D   04                     INC   b   
098E   19                     ADD   hl,de   
098F   38 FC                  JR   c,bufferDec3   
0991   ED 52                  SBC   hl,de   
0993   3E 30                  LD   a,"0"   
0995   B8                     CP   b   
0996   20 05                  JR   nz,bufferDec4   
0998   AF                     XOR   a   
0999   B1                     OR   c   
099A   C8                     RET   z   
099B   18 01                  JR   bufferDec5   
099D                BUFFERDEC4:      
099D   0C                     INC   c   
099E                BUFFERDEC5:      
099E   78                     LD   a,b   
099F   D9                     EXX      
09A0   12                     LD   (de),a   
09A1   1C                     INC   e   
09A2   CC AF 0B               CALL   z,flushBuffer   
09A5   D9                     EXX      
09A6   C9                     RET      
09A7                             ; /bh buffer hex
09A7                             ; value --
09A7                BUFFERHEX:      
09A7   E1                     POP   hl   ; hl = value
09A8   ED 5B EC 23            LD   de,(vBufPtr)   
09AC   3E 24                  LD   a,"$"   ; # prefix
09AE   12                     LD   (de),a   
09AF   1C                     INC   e   ; buffer*++, wraparound
09B0   CC AF 0B               CALL   z,flushBuffer   
09B3   7C                     LD   a,h   
09B4   CD C8 09               CALL   bufferHex1   
09B7   7D                     LD   a,l   
09B8   CD C8 09               CALL   bufferHex1   
09BB   3E 20                  LD   a," "   ; append space to buffer
09BD   12                     LD   (de),a   
09BE   1C                     INC   e   ; buffer*++, wraparound
09BF   CC AF 0B               CALL   z,flushBuffer   
09C2   ED 53 EC 23            LD   (vBufPtr),de   
09C6   DD E9                  JP   (ix)   
09C8                BUFFERHEX1:      
09C8   F5                     PUSH   af   
09C9   1F                     RRA      
09CA   1F                     RRA      
09CB   1F                     RRA      
09CC   1F                     RRA      
09CD   CD D1 09               CALL   bufferHex2   
09D0   F1                     POP   af   
09D1                BUFFERHEX2:      
09D1   E6 0F                  AND   0x0F   
09D3   C6 90                  ADD   a,0x90   
09D5   27                     DAA      
09D6   CE 40                  ADC   a,0x40   
09D8   27                     DAA      
09D9   12                     LD   (de),a   
09DA   1C                     INC   e   ; buffer*++, wraparound
09DB   CC AF 0B               CALL   z,flushBuffer   
09DE   C9                     RET      
09DF                             ; division subroutine.
09DF                             ; bc: divisor, de: dividend, hl: remainder
09DF                DIVIDE:      
09DF   21 00 00               LD   hl,0   ; zero the remainder
09E2   3E 10                  LD   a,16   ; loop counter
09E4                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
09E4   CB 21                  SLA   c   
09E6   CB 10                  RL   b   
09E8   ED 6A                  ADC   hl,hl   
09EA   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
09EC   38 03                  JR   c,divide2   
09EE   0C                     INC   c   
09EF   18 01                  JR   divide3   
09F1                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
09F1   19                     ADD   hl,de   
09F2                DIVIDE3:      
09F2   3D                     DEC   a   
09F3   20 EF                  JR   nz,divide1   
09F5   50 59                  LD   de,bc   ; result from bc to de
09F7   C9                     RET      
09F8                FZ:          
09F8   21 00 21               LD   hl,STACK   
09FB   ED 72                  SBC   hl,sp   
09FD   CB 3C                  SRL   h   
09FF   CB 1D                  RR   l   
0A01   E5                     PUSH   hl   
0A02   C3 B1 04               JP   dotNumber_   
0A05                             ; execute a block of code which ends with }
0A05                             ; creates a root scope if BP == stack
0A05                             ; else uses outer scope
0A05                CARET:       
0A05                GO:          
0A05   D1                     POP   de   ; de = block*
0A06                GO1:         
0A06   7B                     LD   a,e   ; if block* == null, exit
0A07   B2                     OR   d   
0A08   20 02                  JR   nz,go2   
0A0A   DD E9                  JP   (ix)   
0A0C                GO2:         
0A0C   1A                     LD   a,(de)   
0A0D   FE 7B                  CP   "{"   
0A0F   28 06                  JR   z,goBlock   
0A11   FE 28                  CP   "("   
0A13   C2 4A 0A               JP   nz,goFunc   
0A16   D5                     PUSH   de   ; push de just before stack frame
0A17                GOBLOCK:      
0A17   ED 53 00 24            LD   (vTemp1),de   ; save de
0A1B   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0A1E   FD 54                  LD   d,iyh   
0A20   FD 5D                  LD   e,iyl   
0A22   B7                     OR   a   ; if stack* == BP then this is the root_scope
0A23   ED 52                  SBC   hl,de   
0A25   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
0A29   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0A2A   B4                     OR   h   
0A2B   3E 00                  LD   a,0   
0A2D   28 6A                  JR   z,goFunc8   
0A2F   C5                     PUSH   bc   ; push IP
0A30   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0A33   FD 46 05               LD   b,(iy+5)   
0A36   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A39   FD 66 03               LD   h,(iy+3)   
0A3C                GOBLOCK2:      
0A3C   C5                     PUSH   bc   ; arg_list*
0A3D   E5                     PUSH   hl   ; first_arg*
0A3E   FD E5                  PUSH   iy   ; push BP
0A40   FD 21 00 00            LD   iy,0   ; BP = SP
0A44   FD 39                  ADD   iy,sp   
0A46                GOBLOCK3:      
0A46   42 4B                  LD   bc,de   ; bc = de = block*-1
0A48   DD E9                  JP   (ix)   
0A4A                GOFUNC:      ; execute func
0A4A   EB                     EX   de,hl   ; hl = func*
0A4B   5E                     LD   e,(hl)   ; de = partial_array*
0A4C   23                     INC   hl   
0A4D   56                     LD   d,(hl)   
0A4E   23                     INC   hl   
0A4F   7B                     LD   a,e   ; if partial_array* == null skip
0A50   B2                     OR   d   
0A51   28 21                  JR   z,goFunc3   
0A53   ED 43 00 24            LD   (vTemp1),bc   
0A57   22 02 24               LD   (vTemp2),hl   ; save bc,hl
0A5A   EB                     EX   de,hl   ; hl = partial_array*
0A5B   2B                     DEC   hl   ; bc = count
0A5C   46                     LD   b,(hl)   
0A5D   2B                     DEC   hl   
0A5E   4E                     LD   c,(hl)   
0A5F   23                     INC   hl   ; hl = array data*
0A60   23                     INC   hl   
0A61   18 06                  JR   goFunc2   ; push each item on stack
0A63                GOFUNC1:      
0A63   5E                     LD   e,(hl)   ; de = partial item
0A64   23                     INC   hl   
0A65   56                     LD   d,(hl)   
0A66   23                     INC   hl   
0A67   D5                     PUSH   de   ; push on stack
0A68   0B                     DEC   bc   
0A69                GOFUNC2:      
0A69   79                     LD   a,c   ; if count != 0 then loop
0A6A   B0                     OR   b   
0A6B   20 F6                  JR   nz,goFunc1   
0A6D   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
0A71   2A 02 24               LD   hl,(vTemp2)   ; restore hl
0A74                GOFUNC3:      
0A74   5E                     LD   e,(hl)   ; de = block*
0A75   23                     INC   hl   
0A76   56                     LD   d,(hl)   
0A77   23                     INC   hl   
0A78   ED 53 00 24            LD   (vTemp1),de   ; save block*
0A7C   5E                     LD   e,(hl)   ; de = arg_list*
0A7D   23                     INC   hl   
0A7E   56                     LD   d,(hl)   
0A7F   23                     INC   hl   
0A80   EB                     EX   de,hl   ; hl = arg_list*
0A81   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
0A85   7D                     LD   a,l   ; if arg_list* == null a = 0
0A86   B4                     OR   h   
0A87   20 03                  JR   nz,goFunc4   
0A89   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A8A   18 0D                  JR   goFunc8   
0A8C                GOFUNC4:      ; allocate locals
0A8C   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A8D   18 03                  JR   goFunc6   
0A8F                GOFUNC5:      ; loop
0A8F   3B                     DEC   sp   
0A90   3B                     DEC   sp   
0A91   3D                     DEC   a   
0A92                GOFUNC6:      
0A92   B7                     OR   a   
0A93   20 FA                  JR   nz,goFunc5   ; end loop
0A95                GOFUNC7:      
0A95   23                     INC   hl   ; a = num_args* x 2
0A96   7E                     LD   a,(hl)   
0A97   2B                     DEC   hl   
0A98   87                     ADD   a,a   ; a *= 2
0A99                GOFUNC8:      
0A99   C5                     PUSH   bc   ; push IP
0A9A   44 4D                  LD   bc,hl   
0A9C   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A9F   85                     ADD   a,l   
0AA0   6F                     LD   l,a   
0AA1   39                     ADD   hl,sp   
0AA2   18 98                  JR   goBlock2   
0AA4                DOLLAR:      
0AA4                HEXNUM:      
0AA4   21 00 00               LD   hl,0   ; Clear hl to accept the number
0AA7                HEXNUM1:      
0AA7   03                     INC   bc   
0AA8   0A                     LD   a,(bc)   ; Get the character which is a numeral
0AA9   CB 77                  BIT   6,a   ; is it uppercase alpha?
0AAB   28 02                  JR   z,hexnum2   ; no a decimal
0AAD   D6 07                  SUB   7   ; sub 7  to make $a - $F
0AAF                HEXNUM2:      
0AAF   D6 30                  SUB   $30   ; form decimal digit
0AB1   DA 41 0B               JP   c,num2   
0AB4   FE 10                  CP   $0F+1   
0AB6   D2 41 0B               JP   nc,num2   
0AB9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0ABA   29                     ADD   hl,hl   ; 4X
0ABB   29                     ADD   hl,hl   ; 8X
0ABC   29                     ADD   hl,hl   ; 16X
0ABD   85                     ADD   a,l   ; add into bottom of hl
0ABE   6F                     LD   l,a   
0ABF   18 E6                  JR   hexnum1   
0AC1                UPCASE:      
0AC1   0A                     LD   a,(bc)   ; a = identifier char
0AC2   D6 41                  SUB   "A"   ; "A" = 0
0AC4   18 05                  JR   ident1   
0AC6                LOWCASE:      
0AC6   0A                     LD   a,(bc)   
0AC7   D6 61                  SUB   "a"   
0AC9   C6 1A                  ADD   a,26   
0ACB                IDENT1:      
0ACB   87                     ADD   a,a   ; l = a * 2
0ACC   6F                     LD   l,a   
0ACD   26 23                  LD   h,msb(vars)   
0ACF   22 F4 23               LD   (vPointer),hl   ; store address in setter
0AD2   5E                     LD   e,(hl)   
0AD3   23                     INC   hl   
0AD4   56                     LD   d,(hl)   
0AD5   D5                     PUSH   de   
0AD6   DD E9                  JP   (ix)   
0AD8                             ; if
0AD8                             ; condition then -- value
0AD8                QUESTION:      
0AD8                IF:          
0AD8   03                     INC   bc   
0AD9   0A                     LD   a,(bc)   
0ADA   FE 3F                  CP   "?"   
0ADC   28 06                  JR   z,ifte   
0ADE   0B                     DEC   bc   
0ADF   11 00 00               LD   de,NUL   ; NUL pointer for else
0AE2   18 01                  JR   ifte1   
0AE4                             ; ifte
0AE4                             ; condition then else -- value
0AE4                IFTE:        
0AE4   D1                     POP   de   ; de = else
0AE5                IFTE1:       
0AE5   E1                     POP   hl   ; hl = then
0AE6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AE7   7C                     LD   a,h   
0AE8   B5                     OR   l   
0AE9   E1                     POP   hl   ; hl = then
0AEA   CA 06 0A               JP   z,go1   ; if z de = else
0AED   EB                     EX   de,hl   ; condition = false, de = then
0AEE   C3 06 0A               JP   go1   
0AF1                KEY:         
0AF1   CD 81 00               CALL   getchar   
0AF4   26 00                  LD   h,0   
0AF6   6F                     LD   l,a   
0AF7   E5                     PUSH   hl   
0AF8   DD E9                  JP   (ix)   
0AFA                             ; Z80 port output
0AFA                             ; value port --
0AFA                OUTPUT:      
0AFA   E1                     POP   hl   
0AFB   59                     LD   e,c   ; save IP
0AFC   4D                     LD   c,l   
0AFD   E1                     POP   hl   
0AFE   ED 69                  OUT   (c),l   
0B00   4B                     LD   c,e   ; restore IP
0B01   DD E9                  JP   (ix)   
0B03                STAR:        
0B03                MUL:         
0B03   D1                     POP   de   ; get first value
0B04   E1                     POP   hl   
0B05                MUL2:        
0B05   C5                     PUSH   bc   ; Preserve the IP
0B06   44 4D                  LD   bc,hl   ; bc = 2nd value
0B08   21 00 00               LD   hl,0   
0B0B   3E 10                  LD   a,16   
0B0D                MUL3:        
0B0D   29                     ADD   hl,hl   
0B0E   CB 13                  RL   e   
0B10   CB 12                  RL   d   
0B12   30 04                  JR   nc,$+6   
0B14   09                     ADD   hl,bc   
0B15   30 01                  JR   nc,$+3   
0B17   13                     INC   de   
0B18   3D                     DEC   a   
0B19   20 F2                  JR   nz,mul3   
0B1B   C1                     POP   bc   ; Restore the IP
0B1C   C3 13 02               JP   add3   
0B1F                NUM:         
0B1F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B22   0A                     LD   a,(bc)   ; Get numeral or -
0B23   FE 2D                  CP   "-"   
0B25   20 01                  JR   nz,num0   
0B27   03                     INC   bc   ; move to next char, no flags affected
0B28                NUM0:        
0B28   08                     EX   af,af'   ; save zero flag = 0 for later
0B29                NUM1:        
0B29   0A                     LD   a,(bc)   ; read digit
0B2A   D6 30                  SUB   "0"   ; less than 0?
0B2C   38 13                  JR   c,num2   ; not a digit, exit loop
0B2E   FE 0A                  CP   10   ; greater that 9?
0B30   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B32   03                     INC   bc   ; inc IP
0B33   54 5D                  LD   de,hl   ; multiply hl * 10
0B35   29                     ADD   hl,hl   
0B36   29                     ADD   hl,hl   
0B37   19                     ADD   hl,de   
0B38   29                     ADD   hl,hl   
0B39   85                     ADD   a,l   ; add digit in a to hl
0B3A   6F                     LD   l,a   
0B3B   3E 00                  LD   a,0   
0B3D   8C                     ADC   a,h   
0B3E   67                     LD   h,a   
0B3F   18 E8                  JR   num1   
0B41                NUM2:        
0B41   0B                     DEC   bc   
0B42   08                     EX   af,af'   ; restore zero flag
0B43   20 07                  JR   nz,num3   
0B45   EB                     EX   de,hl   ; negate the value of hl
0B46   21 00 00               LD   hl,0   
0B49   B7                     OR   a   ; jump to sub2
0B4A   ED 52                  SBC   hl,de   
0B4C                NUM3:        
0B4C   E5                     PUSH   hl   ; Put the number on the stack
0B4D   DD E9                  JP   (ix)   ; and process the next character
0B4F                RPAREN:      
0B4F   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0B52   FD 46 09               LD   b,(iy+9)   
0B55   DD E9                  JP   (ix)   
0B57                             ; shiftLeft
0B57                             ; value count -- value2          shift left count places
0B57                SHIFTLEFT:      
0B57   50 59                  LD   de,bc   ; save IP
0B59   C1                     POP   bc   ; bc = count
0B5A   41                     LD   b,c   ; b = loop counter
0B5B   E1                     POP   hl   
0B5C   04                     INC   b   ; test for counter=0 case
0B5D   18 01                  JR   shiftLeft2   
0B5F                SHIFTLEFT1:      
0B5F   29                     ADD   hl,hl   ; left shift hl
0B60                SHIFTLEFT2:      
0B60   10 FD                  DJNZ   shiftLeft1   
0B62   E5                     PUSH   hl   
0B63   42 4B                  LD   bc,de   ; restore IP
0B65   DD E9                  JP   (ix)   
0B67                             ; shiftRight
0B67                             ; value count -- value2          shift left count places
0B67                SHIFTRIGHT:      
0B67   50 59                  LD   de,bc   ; save IP
0B69   C1                     POP   bc   ; bc = count
0B6A   41                     LD   b,c   ; b = loop counter
0B6B   E1                     POP   hl   
0B6C   04                     INC   b   ; test for counter=0 case
0B6D   18 04                  JR   shiftRight2   
0B6F                SHIFTRIGHT1:      
0B6F   CB 3C                  SRL   h   ; right shift hl
0B71   CB 1D                  RR   l   
0B73                SHIFTRIGHT2:      
0B73   10 FA                  DJNZ   shiftRight1   
0B75   E5                     PUSH   hl   
0B76   42 4B                  LD   bc,de   ; restore IP
0B78   DD E9                  JP   (ix)   
0B7A                             ; string
0B7A                             ; -- ptr                        ; points to start of string chars,
0B7A                             ; length is stored at start - 2 bytes
0B7A                DQUOTE:      
0B7A                STRING:      
0B7A   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0B7D   23                     INC   hl   ; skip length field to start
0B7E   23                     INC   hl   
0B7F   E5                     PUSH   hl   ; save start of string
0B80   03                     INC   bc   ; point to next char
0B81   18 03                  JR   string2   
0B83                STRING1:      
0B83   77                     LD   (hl),a   
0B84   23                     INC   hl   ; increase count
0B85   03                     INC   bc   ; point to next char
0B86                STRING2:      
0B86   0A                     LD   a,(bc)   
0B87   FE 22                  CP   DQ   ; " is the string terminator
0B89   28 04                  JR   z,string3   
0B8B   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0B8D   20 F4                  JR   nz,string1   
0B8F                STRING3:      
0B8F   AF                     XOR   a   ; write NUL to terminate string
0B90   77                     LD   (hl),a   ; hl = end of string
0B91   23                     INC   hl   
0B92   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0B95   2B                     DEC   hl   ; hl = end of string without terminator
0B96   D1                     POP   de   ; de = start of string
0B97   D5                     PUSH   de   ; return start of string
0B98   B7                     OR   a   ; hl = length bytes, de = start of string
0B99   ED 52                  SBC   hl,de   
0B9B   EB                     EX   de,hl   
0B9C   2B                     DEC   hl   ; write length bytes to length field at start - 2
0B9D   72                     LD   (hl),d   
0B9E   2B                     DEC   hl   
0B9F   73                     LD   (hl),e   
0BA0   DD E9                  JP   (ix)   
0BA2                PRINTCHARS1:      
0BA2   1A                     LD   a,(de)   ; print char at char*
0BA3   CD 85 00               CALL   putchar   
0BA6   13                     INC   de   ; char*++
0BA7   2B                     DEC   hl   ; count--
0BA8                PRINTCHARS2:      
0BA8   7D                     LD   a,l   ; count == 0?
0BA9   B4                     OR   h   
0BAA   C8                     RET   z   
0BAB   18 F5                  JR   printChars1   ; if not loop
0BAD                             ; 
0BAD                FILTER:      
0BAD                SCAN:        
0BAD   DD E9                  JP   (ix)   
0BAF                             ;*******************************************************************
0BAF                             ; general routines
0BAF                             ;*******************************************************************
0BAF                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0BAF                FLUSHBUFFER:      
0BAF   F5                     PUSH   af   
0BB0   D5                     PUSH   de   
0BB1   E5                     PUSH   hl   
0BB2   2A EC 23               LD   hl,(vBufPtr)   
0BB5   11 00 22               LD   de,BUF   
0BB8   ED 53 EC 23            LD   (vBufPtr),de   
0BBC   B7                     OR   a   
0BBD   ED 52                  SBC   hl,de   
0BBF   CD A8 0B               CALL   printChars2   
0BC2   E1                     POP   hl   
0BC3   D1                     POP   de   
0BC4   F1                     POP   af   
0BC5   C9                     RET      
0BC6                COMMANDTABLE:      
0BC6   03                     INC   bc   
0BC7   0A                     LD   a,(bc)   
0BC8   FE 7B                  CP   "z"+1   
0BCA   30 09                  JR   nc,commandTable2   
0BCC   D6 61                  SUB   "a"   
0BCE   38 05                  JR   c,commandTable2   
0BD0                COMMANDTABLE1:      
0BD0   E1                     POP   hl   
0BD1   85                     ADD   a,l   
0BD2   6F                     LD   l,a   
0BD3   6E                     LD   l,(hl)   ; must have the same msb as the table
0BD4   E9                     JP   (hl)   
0BD5                COMMANDTABLE2:      
0BD5   3E 1A                  LD   a,26   
0BD7   0B                     DEC   bc   
0BD8   18 F6                  JR   commandTable1   
0BDA                             ; followed by a table
0BDA                             ; db char
0BDA                             ; db lsb(addr)
0BDA                             ; the final item must have char == NUL
0BDA                JUMPTABLE:      
0BDA   E1                     POP   hl   
0BDB   03                     INC   bc   
0BDC                JUMPTABLE0:      
0BDC   AF                     XOR   a   
0BDD   BE                     CP   (hl)   
0BDE   28 0B                  JR   z,jumpTable2   
0BE0   0A                     LD   a,(bc)   
0BE1   BE                     CP   (hl)   
0BE2   28 04                  JR   z,jumpTable1   
0BE4   23                     INC   hl   
0BE5   23                     INC   hl   
0BE6   18 F4                  JR   jumpTable0   
0BE8                JUMPTABLE1:      
0BE8   23                     INC   hl   
0BE9   6E                     LD   l,(hl)   ; must have the same msb as the table
0BEA   E9                     JP   (hl)   
0BEB                JUMPTABLE2:      
0BEB   0B                     DEC   bc   
0BEC   23                     INC   hl   
0BED   E9                     JP   (hl)   
0BEE                PRTSTR0:      
0BEE   CD 85 00               CALL   putchar   
0BF1   23                     INC   hl   
0BF2                PRTSTR:      
0BF2   7E                     LD   a,(hl)   
0BF3   B7                     OR   a   
0BF4   20 F8                  JR   nz,prtstr0   
0BF6   C9                     RET      
0BF7                             ; **************************************************************************
0BF7                             ; calculate nesting value
0BF7                             ; a is char to be tested,
0BF7                             ; e is the nesting value (initially 0)
0BF7                             ; e is increased by ( and [
0BF7                             ; e is decreased by ) and ]
0BF7                             ; e has its bit 7 toggled by `
0BF7                             ; limited to 127 levels
0BF7                             ; **************************************************************************
0BF7                NESTING:      
0BF7   FE 22                  CP   DQ   ; quote char
0BF9   28 06                  JR   z,nesting0   
0BFB   FE 60                  CP   "`"   ; quote char
0BFD   28 02                  JR   z,nesting0   
0BFF   18 0A                  JR   nesting1   
0C01                NESTING0:      
0C01   CB 7B                  BIT   7,e   
0C03   28 03                  JR   z,nesting1a   
0C05   CB BB                  RES   7,e   
0C07   C9                     RET      
0C08                NESTING1A:      
0C08   CB FB                  SET   7,e   
0C0A   C9                     RET      
0C0B                NESTING1:      
0C0B   CB 7B                  BIT   7,e   
0C0D   C0                     RET   nz   
0C0E   FE 7B                  CP   "{"   
0C10   28 08                  JR   z,nesting2   
0C12   FE 5B                  CP   "["   
0C14   28 04                  JR   z,nesting2   
0C16   FE 28                  CP   "("   
0C18   20 02                  JR   nz,nesting3   
0C1A                NESTING2:      
0C1A   1C                     INC   e   
0C1B   C9                     RET      
0C1C                NESTING3:      
0C1C   FE 7D                  CP   "}"   
0C1E   28 07                  JR   z,nesting4   
0C20   FE 5D                  CP   "]"   
0C22   28 03                  JR   z,nesting4   
0C24   FE 29                  CP   ")"   
0C26   C0                     RET   nz   
0C27                NESTING4:      
0C27   1D                     DEC   e   
0C28   C9                     RET      
0C29                PROMPT:      
0C29   CD 39 0C               CALL   printStr   
0C2C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0C31   C9                     RET      
0C32                CRLF:        
0C32   CD 39 0C               CALL   printStr   
0C35   0D 0A 00               .CSTR   "\r\n"   
0C38   C9                     RET      
0C39                             ; prints a null teminated string
0C39                             ; the string should be immediately following the call
0C39                PRINTSTR:      
0C39   E3                     EX   (sp),hl   ; swap			
0C3A   CD F2 0B               CALL   prtstr   
0C3D   23                     INC   hl   ; inc past NUL
0C3E   E3                     EX   (sp),hl   ; put it back	
0C3F   C9                     RET      
0C40                INIT:        
0C40   21 F0 01               LD   hl,titleStr   
0C43   11 08 24               LD   de,titleBuf   
0C46   06 14                  LD   b,20   
0C48                INIT1:       
0C48   1A                     LD   a,(de)   
0C49   BE                     CP   (hl)   
0C4A   20 17                  JR   nz,coldBoot0   
0C4C   13                     INC   de   
0C4D   23                     INC   hl   
0C4E   10 F8                  DJNZ   init1   
0C50                WARMINIT:      
0C50   ED 4B F8 23            LD   bc,(vSavedIP)   ; restore IP
0C54   ED 7B FA 23            LD   sp,(vSavedSP)   ; restore SP
0C58   DD 2A FC 23            LD   ix,(vSavedNext)   ; restore Next
0C5C   FD 2A FE 23            LD   iy,(vSavedBP)   ; restore BP
0C60   C3 9A 0C               JP   start1   
0C63                COLDBOOT0:      
0C63   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0C66   11 08 24               LD   de,titleBuf   
0C69   06 14                  LD   b,20   
0C6B   ED B0                  LDIR      
0C6D                COLDINIT:      
0C6D   21 DE 01               LD   hl,isysVars   
0C70   11 E6 23               LD   de,sysVars   
0C73   01 10 00               LD   bc,8 * 2   
0C76   ED B0                  LDIR      
0C78   21 00 23               LD   hl,vars   ; 52 vars LO HI
0C7B   06 34                  LD   b,26*2   
0C7D   AF                     XOR   a   
0C7E                COLDBOOT1:      
0C7E   77                     LD   (hl),a   
0C7F   23                     INC   hl   
0C80   10 FC                  DJNZ   coldBoot1   
0C82   DD 2A EE 23            LD   ix,(vNext)   
0C86   FD 21 00 21            LD   iy,STACK   
0C8A   C9                     RET      
0C8B                COLDSTART:      
0C8B   31 00 21               LD   sp,STACK   
0C8E   CD 63 0C               CALL   coldBoot0   
0C91   C3 9A 0C               JP   start1   
0C94                START:       
0C94   31 00 21               LD   sp,STACK   ; start Monty
0C97   CD 40 0C               CALL   init   ; setups
0C9A                START1:      
0C9A   21 08 24               LD   hl,titleBuf   
0C9D   CD F2 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0CA0                INTERPRET:      
0CA0   CD AF 0B               CALL   flushBuffer   
0CA3   CD 29 0C               CALL   prompt   
0CA6   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0CA9   21 00 21               LD   hl,TIB   
0CAC   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0CAF                INTERPRET2:      ; calculate nesting
0CAF   1E 00                  LD   e,0   ; initilize nesting value
0CB1   C5                     PUSH   bc   ; save offset into TIB,
0CB2                             ; bc is also the count of chars in TIB
0CB2   21 00 21               LD   hl,TIB   ; hl is start of TIB
0CB5   18 0B                  JR   interpret4   
0CB7                INTERPRET3:      
0CB7   3E 33                  LD   a,"3"   
0CB9   CD 85 00               CALL   putchar   
0CBC   7E                     LD   a,(hl)   ; a = char in TIB
0CBD   23                     INC   hl   ; inc pointer into TIB
0CBE   0B                     DEC   bc   ; dec count of chars in TIB
0CBF   CD F7 0B               CALL   nesting   ; update nesting value
0CC2                INTERPRET4:      
0CC2   79                     LD   a,c   ; is count zero?
0CC3   B0                     OR   b   
0CC4   20 F1                  JR   nz,interpret3   ; if not loop
0CC6   C1                     POP   bc   ; restore offset into TIB
0CC7                INTERPRET5:      
0CC7   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0CCA   FE 20                  CP   $20   ; compare to space
0CCC   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0CCE   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0CD0                             ; ???? NEEDED?
0CD0   28 36                  JR   z,interpret8   
0CD2   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0CD4   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0CD6   FE 05                  CP   CTRL_E   
0CD8   CA 69 0D               JP   z,edit_   
0CDB   FE 08                  CP   CTRL_H   
0CDD   CA 59 0D               JP   z,backSpace_   
0CE0   FE 0A                  CP   CTRL_J   
0CE2   CA 81 0D               JP   z,reEdit_   
0CE5                             ; cp CTRL_S
0CE5                             ; jp z,printStack_
0CE5                             ; DB     lsb(edit_)       ; ENQ ^E  5
0CE5                             ; DB     lsb(reedit_)     ; LF  ^J 10
0CE5                             ; DB     lsb(list_)       ; FF  ^L 12
0CE5                             ; DB     lsb(printStack_) ; DLE ^P 16
0CE5                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0CE5                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0CE5                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0CE5                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0CE5                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0CE5                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0CE5                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0CE5                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0CE5                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0CE5                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0CE5                INTERPRET5A:      
0CE5                             ; ld (vTIBPtr),bc
0CE5                             ; ld bc,(vTIBPtr)
0CE5   18 C8                  JR   interpret2   
0CE7                INTERPRET6:      
0CE7   21 00 21               LD   hl,TIB   
0CEA   09                     ADD   hl,bc   
0CEB   77                     LD   (hl),a   ; store the character in textbuf
0CEC   03                     INC   bc   
0CED   CD 85 00               CALL   putchar   ; echo character to screen
0CF0   CD F7 0B               CALL   nesting   
0CF3   18 D2                  JR   interpret5   ; wait for next character
0CF5                INTERPRET7:      
0CF5   21 00 21               LD   hl,TIB   
0CF8   09                     ADD   hl,bc   
0CF9   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0CFB   23                     INC   hl   
0CFC   36 0A                  LD   (hl),"\n"   
0CFE   23                     INC   hl   
0CFF   03                     INC   bc   
0D00   03                     INC   bc   
0D01   CD 32 0C               CALL   crlf   ; echo character to screen
0D04   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0D05   B7                     OR   a   
0D06   20 BF                  JR   nz,interpret5   
0D08                INTERPRET8:      
0D08   21 00 21               LD   hl,TIB   
0D0B   09                     ADD   hl,bc   
0D0C   22 EA 23               LD   (vTIBPtr),hl   
0D0F   01 00 21               LD   bc,TIB   
0D12   ED 43 F8 23            LD   (vSavedIP),bc   ; save IP
0D16   ED 73 FA 23            LD   (vSavedSP),sp   ; save SP
0D1A   DD 22 FC 23            LD   (vSavedNext),ix   ; save Next
0D1E   FD 22 FE 23            LD   (vSavedBP),iy   ; save BP
0D22   0B                     DEC   bc   
0D23                NEXT:        
0D23   03                     INC   bc   ; Increment the IP
0D24   0A                     LD   a,(bc)   ; Get the next character and dispatch
0D25   FE 20                  CP   " "   ; whitespace?
0D27   28 FA                  JR   z,next   ; space? ignore
0D29   38 08                  JR   c,next1   
0D2B   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0D2D   6F                     LD   l,a   ; index into table
0D2E   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0D30   6E                     LD   l,(hl)   ; get low jump address
0D31   24                     INC   h   ; Load h with page after opcodes
0D32   E9                     JP   (hl)   ; Jump to routine
0D33                NEXT1:       
0D33   FE 00                  CP   NUL   ; end of input string?
0D35   28 03                  JR   z,exit   
0D37   C3 A0 0C               JP   interpret   ; no, other whitespace, macros?
0D3A                EXIT:        
0D3A   03                     INC   bc   
0D3B   60 69                  LD   hl,bc   
0D3D   E9                     JP   (hl)   
0D3E                RUN:         
0D3E   C1                     POP   bc   
0D3F   0B                     DEC   bc   
0D40   DD E9                  JP   (ix)   
0D42                ERROR1:      
0D42   21 01 00               LD   hl,1   ; error 1: unknown command
0D45   E5                     PUSH   hl   
0D46                ERROR:       
0D46   CD 3E 0D               CALL   run   
0D49   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0D56   C3 A0 0C               JP   interpret   
0D59                BACKSPACE_:      
0D59   79                     LD   a,c   
0D5A   B0                     OR   b   
0D5B   CA AF 0C               JP   z,interpret2   
0D5E   0B                     DEC   bc   
0D5F   CD 39 0C               CALL   printStr   
0D62   08 20 08 00            .CSTR   "\b \b"   
0D66   C3 AF 0C               JP   interpret2   
0D69                             ; edit
0D69                EDIT_:       
0D69   CD 3E 0D               CALL   run   
0D6C   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0D7E   C3 A0 0C               JP   interpret   
0D81                REEDIT_:      
0D81   C3 A0 0C               JP   interpret   
0D84                PRINTSTACK_:      
0D84   CD 3E 0D               CALL   run   
0D87   2F 70 6B 00            .CSTR   "/pk"   
0D8B   C3 A0 0C               JP   interpret   
0D8E                             ; editDef:
0D8E                             ;     pop hl                      ; pop ret address
0D8E                             ;     ex (sp),hl                  ; swap with TOS
0D8E                             ;     push hl                     ; dup TOS
0D8E                             ;     ld a,l                      ; a = ident
0D8E                             ;     ld de,TIB                   ; de = start of TIB
0D8E                             ;     ld (vTIBPtr),de             ; update TIB*
0D8E                             ;     push ix                     ; save NEXT
0D8E                             ;     ld ix,editDef0              ; NEXT = editDef0
0D8E                             ;     jp lookupRef                ; convert letter into address
0D8E                             ; editDef0:
0D8E                             ;     ld e,(hl)                   ; de = (hl++)
0D8E                             ;     inc hl
0D8E                             ;     ld d,(hl)
0D8E                             ;     ld a,d                      ; de == 0 ?
0D8E                             ;     or e
0D8E                             ;     jr z,editDef4
0D8E                             ;     ld ix,editDef3              ; NEXT = editDef3
0D8E                             ;     ex de,hl
0D8E                             ;     ld a,(hl)
0D8E                             ;     cp "{"
0D8E                             ;     jr nz,editDef1
0D8E                             ;     jp editBlock0               ; convert letter into address
0D8E                             ; editDef1:
0D8E                             ;     cp "("
0D8E                             ;     jr nz,editDef2
0D8E                             ;     jp editBlock0               ; convert letter into address
0D8E                             ; editDef2:
0D8E                             ;     jp editFunc
0D8E                             ; editDef3:
0D8E                             ;     ld a," "                    ; write assign
0D8E                             ;     call writeChar
0D8E                             ;     pop hl                      ; a = ident
0D8E                             ;     ld a,l
0D8E                             ;     call writeChar
0D8E                             ;     ld a,"="                    ; write assign
0D8E                             ;     call writeChar
0D8E                             ;     ld ix,editDef4              ; NEXT = editDef4
0D8E                             ;     jp printTIB
0D8E                             ; editDef4:
0D8E                             ;     pop ix                      ; restore NEXT
0D8E                             ;     jp (ix)
0D8E                             ; writeChar:
0D8E                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D8E                             ;     ld (de),a                   ; write ident
0D8E                             ;     inc de
0D8E                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D8E                             ;     ret
0D8E                             ; ; printTIB
0D8E                             ; printTIB:
0D8E                             ;     ld hl,(vTIBPtr)
0D8E                             ;     ld de,TIB
0D8E                             ;     or a
0D8E                             ;     sbc hl,de
0D8E                             ;     jp printTIB2
0D8E                             ; printTIB1:
0D8E                             ;     ld a,(de)
0D8E                             ;     call putchar
0D8E                             ; printTIB2:
0D8E                             ;     ld a,l
0D8E                             ;     or h
0D8E                             ;     jr nz,printTIB1
0D8E                             ;     jp (ix)
0D8E                             ; editBlock:
0D8E                             ;     pop hl                      ; hl = block*
0D8E                             ; editBlock0:
0D8E                             ;     push ix                     ; save next
0D8E                             ;     push hl                     ; push block*
0D8E                             ;     push hl                     ; push block*
0D8E                             ;     ld ix,(editBlock2)
0D8E                             ;     jp blockLength
0D8E                             ; editBlock1:
0D8E                             ;     pop hl                      ; bc = length, (sp) = IP
0D8E                             ;     pop de                      ; de = block*
0D8E                             ;     ld a,l
0D8E                             ;     or h
0D8E                             ;     jr z,editBlock2
0D8E                             ;     push bc
0D8E                             ;     ld bc,hl
0D8E                             ;     ex de,hl                    ; hl = block*
0D8E                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D8E                             ;     ldir                        ; copy block to TIB
0D8E                             ;     ld (vTIBPtr),de              ; save TIB*
0D8E                             ;     pop bc
0D8E                             ; editBlock2:
0D8E                             ;     pop ix                      ; restore next
0D8E                             ;     jp (ix)
0D8E                             ; editFunc:
0D8E                             ;     jp (ix)
0D8E                             ; editArray:
0D8E                             ;     jp (ix)
0D8E                             ; editArglist:
0D8E                             ;     jp (ix)
0D8E                             ; ; blockLength
0D8E                             ; ; addr1 -- length
0D8E                             ; blockLength:
0D8E                             ;     pop hl                      ; block*
0D8E                             ;     push hl                     ; save block*
0D8E                             ;     inc hl                      ; skip first char
0D8E                             ;     ld d,1                      ; increase nesting
0D8E                             ; blockLength1:                   ; Skip to end of definition
0D8E                             ;     ld a,(hl)                   ; Get the next character
0D8E                             ;     inc hl                      ; Point to next character
0D8E                             ;     cp " " + 1                  ; ignore whitespace
0D8E                             ;     jr c,blockLength1
0D8E                             ;     cp ")"
0D8E                             ;     jr z,blockLength4
0D8E                             ;     cp "}"
0D8E                             ;     jr z,blockLength4
0D8E                             ;     cp "]"
0D8E                             ;     jr z,blockLength4
0D8E                             ;     cp "("
0D8E                             ;     jr z,blockLength2
0D8E                             ;     cp "{"
0D8E                             ;     jr z,blockLength2
0D8E                             ;     cp "["
0D8E                             ;     jr z,blockLength2
0D8E                             ;     cp "'"
0D8E                             ;     jr z,blockLength3
0D8E                             ;     cp "`"
0D8E                             ;     jr z,blockLength3
0D8E                             ;     cp DQ
0D8E                             ;     jr z,blockLength3
0D8E                             ;     jr blockLength1
0D8E                             ; blockLength2:
0D8E                             ;     inc d
0D8E                             ;     jr blockLength1
0D8E                             ; blockLength4:
0D8E                             ;     dec d
0D8E                             ;     jr nz, blockLength1         ; get the next element
0D8E                             ; blockLength3:
0D8E                             ;     ld a,$80
0D8E                             ;     xor d
0D8E                             ;     ld d,a
0D8E                             ;     jr nz, blockLength1
0D8E                             ;     pop hl                      ; hl = block*
0D8E                             ;     or a
0D8E                             ;     sbc hl,de
0D8E                             ;     push hl
0D8E                             ;     jp (ix)
0D8E                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D8E                             ; \a start of stack \#3 depth \b base \$ prompt
0D8E                             ; DW dStack               ; a vS0 start of datastack			
0D8E                             ; DW FALSE                ; b vBase16
0D8E                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D8E                             ; DW 0                    ; d
0D8E                             ; DW 65                   ; e vLastDef "A" last command u defined
0D8E                             ; DW 0                    ; f
0D8E                             ; DW page6                ; g 256 bytes limits
0D8E                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D8E                F1:          
0D8E                F2:          
0D8E                F3:          
0D8E                F4:          
0D8E                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                             ; uninitialised sys variables (preserved)
23F4                VPOINTER:   DS   2   ; 
23F6                VREMAIN:   DS   2   ; 
23F8                VSAVEDIP:   DS   2   ; 
23FA                VSAVEDSP:   DS   2   ; 
23FC                VSAVEDNEXT:   DS   2   ; 
23FE                VSAVEDBP:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                TBPTR:    DS   2   ; reserved for tests
2408                TITLEBUF:   DS   20   
241C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 42 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0BAD DEFINED AT LINE 1939 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 163 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 2170 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 336 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 456 IN MAIN.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
                    > USED AT LINE 2261 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2183 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 46 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 147 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
PLUS_:              0204 DEFINED AT LINE 167 IN MAIN.asm
ADD:                0204 DEFINED AT LINE 168 IN MAIN.asm
ADD1:               020F DEFINED AT LINE 176 IN MAIN.asm
                    > USED AT LINE 172 IN MAIN.asm
ADD3:               0213 DEFINED AT LINE 181 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1436 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
ADD4:               021D DEFINED AT LINE 189 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
AMPER_:             0220 DEFINED AT LINE 192 IN MAIN.asm
AND:                0220 DEFINED AT LINE 193 IN MAIN.asm
AND1:               0227 DEFINED AT LINE 201 IN MAIN.asm
                    > USED AT LINE 215 IN MAIN.asm
PIPE_:              022B DEFINED AT LINE 206 IN MAIN.asm
OR:                 022B DEFINED AT LINE 207 IN MAIN.asm
AT_:                0234 DEFINED AT LINE 220 IN MAIN.asm
ADDR:               0234 DEFINED AT LINE 221 IN MAIN.asm
BANG_:              023E DEFINED AT LINE 226 IN MAIN.asm
NOT:                0248 DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
MINUS_:             024E DEFINED AT LINE 239 IN MAIN.asm
SUB:                0259 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SUB1:               0263 DEFINED AT LINE 254 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
NUM_:               026B DEFINED AT LINE 262 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
EQ_:                026E DEFINED AT LINE 265 IN MAIN.asm
EQ0_:               0277 DEFINED AT LINE 272 IN MAIN.asm
EQ1:                0278 DEFINED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 237 IN MAIN.asm
GT_:                027B DEFINED AT LINE 278 IN MAIN.asm
LT_:                0286 DEFINED AT LINE 286 IN MAIN.asm
LT1:                028F DEFINED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
EQUALS:             0296 DEFINED AT LINE 301 IN MAIN.asm
                    > USED AT LINE 276 IN MAIN.asm
NOTEQUALS:          029D DEFINED AT LINE 307 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
LESSTHANEQ:         02A4 DEFINED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 295 IN MAIN.asm
LESSTHAN:           02A9 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 297 IN MAIN.asm
LESSTHAN1:          02AE DEFINED AT LINE 327 IN MAIN.asm
                    > USED AT LINE 318 IN MAIN.asm
TRUE1:              02B1 DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
NULL1:              02B7 DEFINED AT LINE 334 IN MAIN.asm
FALSE1:             02B7 DEFINED AT LINE 335 IN MAIN.asm
                    > USED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 311 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
NOP_:               02BB DEFINED AT LINE 338 IN MAIN.asm
RPAREN_:            02BD DEFINED AT LINE 340 IN MAIN.asm
DOLLAR_:            02C0 DEFINED AT LINE 342 IN MAIN.asm
LBRACK_:            02C3 DEFINED AT LINE 344 IN MAIN.asm
RBRACK_:            02C6 DEFINED AT LINE 346 IN MAIN.asm
PERCENT_:           02C9 DEFINED AT LINE 348 IN MAIN.asm
LPAREN_:            02CC DEFINED AT LINE 350 IN MAIN.asm
LBRACE_:            02CC DEFINED AT LINE 351 IN MAIN.asm
RBRACE_:            02CF DEFINED AT LINE 353 IN MAIN.asm
TICK_:              02D2 DEFINED AT LINE 355 IN MAIN.asm
SEMICOLON_:         02D5 DEFINED AT LINE 357 IN MAIN.asm
DOT_:               02D8 DEFINED AT LINE 359 IN MAIN.asm
COLON_:             02DB DEFINED AT LINE 361 IN MAIN.asm
UPCASE_:            02DE DEFINED AT LINE 363 IN MAIN.asm
LOWCASE_:           02E1 DEFINED AT LINE 365 IN MAIN.asm
QUESTION_:          02E4 DEFINED AT LINE 367 IN MAIN.asm
STAR_:              02E7 DEFINED AT LINE 369 IN MAIN.asm
HASH_:              02EA DEFINED AT LINE 371 IN MAIN.asm
CARET_:             02ED DEFINED AT LINE 373 IN MAIN.asm
COMMA_:             02F0 DEFINED AT LINE 375 IN MAIN.asm
DQUOTE_:            02F3 DEFINED AT LINE 377 IN MAIN.asm
BACKSLASH_:         02F6 DEFINED AT LINE 379 IN MAIN.asm
UNDERSCORE_:        02F9 DEFINED AT LINE 381 IN MAIN.asm
TILDE_:             02FC DEFINED AT LINE 383 IN MAIN.asm
SLASH_:             02FF DEFINED AT LINE 385 IN MAIN.asm
SLASH:              0301 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
COMMAND:            0301 DEFINED AT LINE 394 IN MAIN.asm
COMMAND_A_:         0327 DEFINED AT LINE 429 IN MAIN.asm
COMMAND_B_:         0334 DEFINED AT LINE 440 IN MAIN.asm
COMMAND_F_:         033F DEFINED AT LINE 449 IN MAIN.asm
COMMAND_I_:         0342 DEFINED AT LINE 452 IN MAIN.asm
COMMAND_M_:         034B DEFINED AT LINE 459 IN MAIN.asm
COMMAND_P_:         034E DEFINED AT LINE 462 IN MAIN.asm
COMMAND_Q_:         0357 DEFINED AT LINE 469 IN MAIN.asm
COMMAND_R_:         0360 DEFINED AT LINE 476 IN MAIN.asm
COMMAND_V_:         0363 DEFINED AT LINE 479 IN MAIN.asm
COMMAND_NOP_:       0366 DEFINED AT LINE 482 IN MAIN.asm
DECIMAL_:           0368 DEFINED AT LINE 485 IN MAIN.asm
DECIMAL1:           036B DEFINED AT LINE 487 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
DIV_:               0370 DEFINED AT LINE 491 IN MAIN.asm
ERROR1_:            0374 DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 438 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 744 IN MAIN.asm
HEXADECIMAL_:       0377 DEFINED AT LINE 498 IN MAIN.asm
KEY_:               037D DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
OUTPUT_:            0380 DEFINED AT LINE 505 IN MAIN.asm
TRUE_:              0383 DEFINED AT LINE 508 IN MAIN.asm
WORDS_:             0386 DEFINED AT LINE 511 IN MAIN.asm
XOR_:               0389 DEFINED AT LINE 514 IN MAIN.asm
XOR1:               038A DEFINED AT LINE 516 IN MAIN.asm
ABSOLUTE_:          0394 DEFINED AT LINE 529 IN MAIN.asm
ADDROF_:            03A1 DEFINED AT LINE 544 IN MAIN.asm
ADDROF1:            03B5 DEFINED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 552 IN MAIN.asm
ADDROF2:            03C0 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
ARRAYSIZE_:         03C2 DEFINED AT LINE 570 IN MAIN.asm
BREAK_:             03CA DEFINED AT LINE 580 IN MAIN.asm
COLDSTART_:         03CD DEFINED AT LINE 584 IN MAIN.asm
BYTES_:             03D0 DEFINED AT LINE 587 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
BYTES1:             03D3 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
INPUT_:             03D8 DEFINED AT LINE 596 IN MAIN.asm
PRINTCHARS_:        03E3 DEFINED AT LINE 609 IN MAIN.asm
QUIT_:              03EA DEFINED AT LINE 616 IN MAIN.asm
QUIT1:              03F1 DEFINED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
WORDS:              03F4 DEFINED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
COMMENT:            03FA DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 398 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
COMMAND_F:          0403 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
FOREACH_:           041A DEFINED AT LINE 665 IN MAIN.asm
FLUSH_:             041D DEFINED AT LINE 670 IN MAIN.asm
FUNCSRC_:           0422 DEFINED AT LINE 674 IN MAIN.asm
F1_:                0425 DEFINED AT LINE 677 IN MAIN.asm
F2_:                0428 DEFINED AT LINE 680 IN MAIN.asm
F3_:                042B DEFINED AT LINE 683 IN MAIN.asm
F4_:                042E DEFINED AT LINE 686 IN MAIN.asm
FZ_:                0431 DEFINED AT LINE 689 IN MAIN.asm
FALSE_:             0434 DEFINED AT LINE 692 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
COMMAND_M:          0437 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 460 IN MAIN.asm
MAP_:               0440 DEFINED AT LINE 702 IN MAIN.asm
COMMAND_R:          0443 DEFINED AT LINE 705 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
RECUR_:             0450 DEFINED AT LINE 716 IN MAIN.asm
REMAIN_:            0456 DEFINED AT LINE 721 IN MAIN.asm
RANGESRC_:          045C DEFINED AT LINE 726 IN MAIN.asm
COMMAND_V:          045F DEFINED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
CONSTBUFSTART_:     0472 DEFINED AT LINE 746 IN MAIN.asm
CONSTHEAPSTART_:    0477 DEFINED AT LINE 750 IN MAIN.asm
CONSTTIBSTART_:     047C DEFINED AT LINE 754 IN MAIN.asm
VARBUFPTR_:         0481 DEFINED AT LINE 758 IN MAIN.asm
VARHEAPPTR_:        048A DEFINED AT LINE 763 IN MAIN.asm
VARTIBPTR_:         0493 DEFINED AT LINE 768 IN MAIN.asm
VARIABLE:           049C DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
CONSTANT:           049F DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
DOT:                04A2 DEFINED AT LINE 780 IN MAIN.asm
                    > USED AT LINE 360 IN MAIN.asm
DOTNUMBER_:         04B1 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 1578 IN MAIN.asm
DOTSTRING_:         04BC DEFINED AT LINE 803 IN MAIN.asm
DOTSTRING0:         04C3 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DOTSTRING1:         04C9 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
DOTCHAR_:           04D6 DEFINED AT LINE 822 IN MAIN.asm
DOTXCHARS_:         04DB DEFINED AT LINE 828 IN MAIN.asm
DOTXCHARS0:         04DC DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 824 IN MAIN.asm
DOTXCHARS1:         04E5 DEFINED AT LINE 836 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
DOTXCHARS2:         04ED DEFINED AT LINE 843 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
FOREACH:            04F7 DEFINED AT LINE 32
                    > USED AT LINE 666 IN MAIN.asm
FOREACHM_1289S858:  0505 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0544 DEFINED AT LINE 32
                    > USED AT LINE 675 IN MAIN.asm
FUNCSRCM_1304S874:  0550 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           057F DEFINED AT LINE 32
DOTARRAYM_1314S885: 058D DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                05C7 DEFINED AT LINE 32
                    > USED AT LINE 703 IN MAIN.asm
MAPM_1321S893:      05D4 DEFINED AT LINE 39
                    > USED AT LINE 35
RANGESRC:           060B DEFINED AT LINE 32
                    > USED AT LINE 727 IN MAIN.asm
RANGESRCM_1335S908: 061A DEFINED AT LINE 39
                    > USED AT LINE 35
BACKSLASH:          068D DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 380 IN MAIN.asm
UNDERSCORE:         068D DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
TILDE:              068D DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 384 IN MAIN.asm
COMMA:              068D DEFINED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 376 IN MAIN.asm
PERCENT:            068F DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
ARG:                068F DEFINED AT LINE 944 IN MAIN.asm
ARG0:               06AB DEFINED AT LINE 963 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
ARG0A:              06B4 DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 955 IN MAIN.asm
ARG1:               06B9 DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
ARG1A:              06C1 DEFINED AT LINE 981 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
LBRACK:             06C4 DEFINED AT LINE 985 IN MAIN.asm
                    > USED AT LINE 345 IN MAIN.asm
ARRAYSTART:         06C4 DEFINED AT LINE 986 IN MAIN.asm
RBRACK:             06E0 DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
ARRAYEND:           06E0 DEFINED AT LINE 1001 IN MAIN.asm
ARRAYEND1:          06FC DEFINED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
ARRAYEND2:          070C DEFINED AT LINE 1028 IN MAIN.asm
                    > USED AT LINE 1024 IN MAIN.asm
ARRAYEND3:          0711 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1017 IN MAIN.asm
HASH:               0730 DEFINED AT LINE 1055 IN MAIN.asm
                    > USED AT LINE 372 IN MAIN.asm
ARRAYINDEX:         0730 DEFINED AT LINE 1056 IN MAIN.asm
ARRAYINDEX0:        0738 DEFINED AT LINE 1062 IN MAIN.asm
ARRAYINDEX1:        0739 DEFINED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1061 IN MAIN.asm
ARRAYINDEX2:        0745 DEFINED AT LINE 1073 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
COLON:              0748 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
ARGLIST:            0748 DEFINED AT LINE 1082 IN MAIN.asm
ARGLIST1:           0752 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
ARGLIST1A:          075A DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
ARGLIST2:           0762 DEFINED AT LINE 1100 IN MAIN.asm
ARGLIST3:           076A DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
ARGLIST4:           076D DEFINED AT LINE 1111 IN MAIN.asm
                    > USED AT LINE 1097 IN MAIN.asm
                    > USED AT LINE 1099 IN MAIN.asm
ARGLIST5:           0773 DEFINED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
ASSIGN:             077E DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
ASSIGN0:            0780 DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
                    > USED AT LINE 253 IN MAIN.asm
ASSIGNX:            0781 DEFINED AT LINE 1133 IN MAIN.asm
ASSIGN1:            078D DEFINED AT LINE 1141 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
LBRACE:             078F DEFINED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
BLOCKSTART:         078F DEFINED AT LINE 1145 IN MAIN.asm
BLOCKSTART1:        0793 DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 1187 IN MAIN.asm
BLOCKSTART2:        07BF DEFINED AT LINE 1176 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1167 IN MAIN.asm
BLOCKSTART3:        07C2 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
BLOCKSTART4:        07CA DEFINED AT LINE 1185 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
BLOCKSTART5:        07CD DEFINED AT LINE 1188 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
BLOCKSTART6:        07F5 DEFINED AT LINE 1207 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
RBRACE:             07F8 DEFINED AT LINE 1211 IN MAIN.asm
                    > USED AT LINE 354 IN MAIN.asm
BLOCKEND:           07F8 DEFINED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
BLOCKEND1:          082A DEFINED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1227 IN MAIN.asm
BLOCKEND2:          0836 DEFINED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
BLOCKEND3:          0848 DEFINED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
BLOCKEND4:          085C DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1263 IN MAIN.asm
BREAK:              0865 DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
BREAK1:             086C DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1276 IN MAIN.asm
TICK:               087F DEFINED AT LINE 1289 IN MAIN.asm
                    > USED AT LINE 356 IN MAIN.asm
CHAR:               087F DEFINED AT LINE 1290 IN MAIN.asm
CHAR1:              0882 DEFINED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1303 IN MAIN.asm
CHAR2:              088E DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
CHAR3:              0891 DEFINED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
SEMICOLON:          0894 DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
CREATEFUNC:         0894 DEFINED AT LINE 1311 IN MAIN.asm
CREATEFUNC0:        08AF DEFINED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
CREATEFUNC1:        08C7 DEFINED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
CREATEFUNC2:        08DA DEFINED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
CREATEFUNC2A:       08F9 DEFINED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1368 IN MAIN.asm
CREATEFUNC3:        0908 DEFINED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
CREATEFUNC4:        0913 DEFINED AT LINE 1404 IN MAIN.asm
CREATEFUNC5:        0914 DEFINED AT LINE 1406 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
DIV:                0930 DEFINED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 493 IN MAIN.asm
BUFFERDEC:          0941 DEFINED AT LINE 1440 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
BUFFERDEC0:         095B DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERDEC1:         096B DEFINED AT LINE 1471 IN MAIN.asm
                    > USED AT LINE 1459 IN MAIN.asm
BUFFERDEC2:         098B DEFINED AT LINE 1485 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
BUFFERDEC3:         098D DEFINED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
BUFFERDEC4:         099D DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1494 IN MAIN.asm
BUFFERDEC5:         099E DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
BUFFERHEX:          09A7 DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 798 IN MAIN.asm
BUFFERHEX1:         09C8 DEFINED AT LINE 1530 IN MAIN.asm
                    > USED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
BUFFERHEX2:         09D1 DEFINED AT LINE 1538 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
DIVIDE:             09DF DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
DIVIDE1:            09E4 DEFINED AT LINE 1555 IN MAIN.asm
                    > USED AT LINE 1567 IN MAIN.asm
DIVIDE2:            09F1 DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
DIVIDE3:            09F2 DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
FZ:                 09F8 DEFINED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 690 IN MAIN.asm
CARET:              0A05 DEFINED AT LINE 1583 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
GO:                 0A05 DEFINED AT LINE 1584 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0A06 DEFINED AT LINE 1586 IN MAIN.asm
                    > USED AT LINE 1268 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
GO2:                0A0C DEFINED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1589 IN MAIN.asm
GOBLOCK:            0A17 DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
GOBLOCK2:           0A3C DEFINED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
GOBLOCK3:           0A46 DEFINED AT LINE 1622 IN MAIN.asm
GOFUNC:             0A4A DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1596 IN MAIN.asm
GOFUNC1:            0A63 DEFINED AT LINE 1645 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
GOFUNC2:            0A69 DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
GOFUNC3:            0A74 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1634 IN MAIN.asm
GOFUNC4:            0A8C DEFINED AT LINE 1675 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
GOFUNC5:            0A8F DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
GOFUNC6:            0A92 DEFINED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
GOFUNC7:            0A95 DEFINED AT LINE 1685 IN MAIN.asm
GOFUNC8:            0A99 DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
DOLLAR:             0AA4 DEFINED AT LINE 1699 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
HEXNUM:             0AA4 DEFINED AT LINE 1700 IN MAIN.asm
HEXNUM1:            0AA7 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1719 IN MAIN.asm
HEXNUM2:            0AAF DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
UPCASE:             0AC1 DEFINED AT LINE 1721 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
LOWCASE:            0AC6 DEFINED AT LINE 1725 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
IDENT1:             0ACB DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1724 IN MAIN.asm
QUESTION:           0AD8 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 368 IN MAIN.asm
IF:                 0AD8 DEFINED AT LINE 1743 IN MAIN.asm
IFTE:               0AE4 DEFINED AT LINE 1753 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
IFTE1:              0AE5 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
KEY:                0AF1 DEFINED AT LINE 1765 IN MAIN.asm
OUTPUT:             0AFA DEFINED AT LINE 1774 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
STAR:               0B03 DEFINED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
MUL:                0B03 DEFINED AT LINE 1784 IN MAIN.asm
MUL2:               0B05 DEFINED AT LINE 1787 IN MAIN.asm
MUL3:               0B0D DEFINED AT LINE 1792 IN MAIN.asm
                    > USED AT LINE 1801 IN MAIN.asm
NUM:                0B1F DEFINED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
NUM0:               0B28 DEFINED AT LINE 1811 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
NUM1:               0B29 DEFINED AT LINE 1813 IN MAIN.asm
                    > USED AT LINE 1830 IN MAIN.asm
NUM2:               0B41 DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1712 IN MAIN.asm
                    > USED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
NUM3:               0B4C DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
RPAREN:             0B4F DEFINED AT LINE 1843 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
SHIFTLEFT:          0B57 DEFINED AT LINE 1850 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
SHIFTLEFT1:         0B5F DEFINED AT LINE 1857 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
SHIFTLEFT2:         0B60 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
SHIFTRIGHT:         0B67 DEFINED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 282 IN MAIN.asm
SHIFTRIGHT1:        0B6F DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
SHIFTRIGHT2:        0B73 DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
DQUOTE:             0B7A DEFINED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 378 IN MAIN.asm
STRING:             0B7A DEFINED AT LINE 1887 IN MAIN.asm
STRING1:            0B83 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 1903 IN MAIN.asm
STRING2:            0B86 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
STRING3:            0B8F DEFINED AT LINE 1904 IN MAIN.asm
                    > USED AT LINE 1901 IN MAIN.asm
PRINTCHARS1:        0BA2 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
PRINTCHARS2:        0BA8 DEFINED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
FILTER:             0BAD DEFINED AT LINE 1938 IN MAIN.asm
FLUSHBUFFER:        0BAF DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
                    > USED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
COMMANDTABLE:       0BC6 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
COMMANDTABLE1:      0BD0 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
COMMANDTABLE2:      0BD5 DEFINED AT LINE 1975 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
JUMPTABLE:          0BDA DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 266 IN MAIN.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 463 IN MAIN.asm
                    > USED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 696 IN MAIN.asm
                    > USED AT LINE 706 IN MAIN.asm
                    > USED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
JUMPTABLE0:         0BDC DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
JUMPTABLE1:         0BE8 DEFINED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 1993 IN MAIN.asm
JUMPTABLE2:         0BEB DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
PRTSTR0:            0BEE DEFINED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2012 IN MAIN.asm
PRTSTR:             0BF2 DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
NESTING:            0BF7 DEFINED AT LINE 2025 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
NESTING0:           0C01 DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
NESTING1A:          0C08 DEFINED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
NESTING1:           0C0B DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
NESTING2:           0C1A DEFINED AT LINE 2048 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
NESTING3:           0C1C DEFINED AT LINE 2051 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
NESTING4:           0C27 DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
PROMPT:             0C29 DEFINED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
CRLF:               0C32 DEFINED AT LINE 2067 IN MAIN.asm
                    > USED AT LINE 2230 IN MAIN.asm
PRINTSTR:           0C39 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2063 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
INIT:               0C40 DEFINED AT LINE 2081 IN MAIN.asm
                    > USED AT LINE 2130 IN MAIN.asm
INIT1:              0C48 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
WARMINIT:           0C50 DEFINED AT LINE 2093 IN MAIN.asm
COLDBOOT0:          0C63 DEFINED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
COLDINIT:           0C6D DEFINED AT LINE 2106 IN MAIN.asm
COLDBOOT1:          0C7E DEFINED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
COLDSTART:          0C8B DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
START:              0C94 DEFINED AT LINE 2128 IN MAIN.asm
                    > USED AT LINE 7
START1:             0C9A DEFINED AT LINE 2131 IN MAIN.asm
                    > USED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2127 IN MAIN.asm
INTERPRET:          0CA0 DEFINED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2280 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
                    > USED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2303 IN MAIN.asm
INTERPRET2:         0CAF DEFINED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
INTERPRET3:         0CB7 DEFINED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
INTERPRET4:         0CC2 DEFINED AT LINE 2161 IN MAIN.asm
                    > USED AT LINE 2150 IN MAIN.asm
INTERPRET5:         0CC7 DEFINED AT LINE 2168 IN MAIN.asm
                    > USED AT LINE 2218 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
INTERPRET5A:        0CE5 DEFINED AT LINE 2205 IN MAIN.asm
INTERPRET6:         0CE7 DEFINED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
INTERPRET7:         0CF5 DEFINED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
INTERPRET8:         0D08 DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
NEXT:               0D23 DEFINED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 152 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
NEXT1:              0D33 DEFINED AT LINE 2260 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
EXIT:               0D3A DEFINED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2262 IN MAIN.asm
RUN:                0D3E DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
ERROR1:             0D42 DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
ERROR:              0D46 DEFINED AT LINE 2277 IN MAIN.asm
BACKSPACE_:         0D59 DEFINED AT LINE 2282 IN MAIN.asm
                    > USED AT LINE 2182 IN MAIN.asm
EDIT_:              0D69 DEFINED AT LINE 2292 IN MAIN.asm
                    > USED AT LINE 2180 IN MAIN.asm
REEDIT_:            0D81 DEFINED AT LINE 2297 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
PRINTSTACK_:        0D84 DEFINED AT LINE 2300 IN MAIN.asm
F1:                 0D8E DEFINED AT LINE 10
                    > USED AT LINE 678 IN MAIN.asm
F2:                 0D8E DEFINED AT LINE 11
                    > USED AT LINE 681 IN MAIN.asm
F3:                 0D8E DEFINED AT LINE 12
                    > USED AT LINE 684 IN MAIN.asm
F4:                 0D8E DEFINED AT LINE 13
                    > USED AT LINE 687 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 150 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2237 IN MAIN.asm
                    > USED AT LINE 2240 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 151 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 2112 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2108 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 590 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1136 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 488 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
                    > USED AT LINE 2239 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 759 IN MAIN.asm
                    > USED AT LINE 760 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1450 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
                    > USED AT LINE 1514 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2120 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1045 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1423 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
VPOINTER:           23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 222 IN MAIN.asm
                    > USED AT LINE 223 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
VREMAIN:            23F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
VSAVEDIP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2242 IN MAIN.asm
VSAVEDSP:           23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2095 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
VSAVEDNEXT:         23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2096 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
VSAVEDBP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2245 IN MAIN.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 1197 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1215 IN MAIN.asm
                    > USED AT LINE 1259 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1669 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
TBPTR:              2406 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           2408 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 2102 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
HEAP:               241C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
