0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 E0 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   22 24                  DW   HEAP   ; vStrPtr pointer into BUF
01E6   6C 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 23            LD   de,(vPointer)   
0208   21 F8 23               LD   hl,vPointer   
020B   C3 9B 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 4C 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 67 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 A6 04               JP   percent   
021C                RBRACE_:      
021C   C3 BA 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 7C 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 27 0C               JP   caret   
0228                COMMA_:      
0228   C3 E3 0A               JP   comma   
022B                DQUOTE_:      
022B   C3 7C 04               JP   dquote   
022E                GRAVE_:      
022E   C3 E5 0A               JP   grave   
0231                UNDERSCORE_:      
0231   C3 E3 0A               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD FF 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 23               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 23            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 8B 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 23               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 23                  LD   h,msb(vars)   
02BA   22 F8 23               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 23               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 23               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 4C 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 23               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 23               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   CD 26 0E               CALL   jumpTable   
035E   3D                     DB   "="   
035F   64                     DB   lsb(eq0_)   
0360   00                     DB   NUL   
0361   C3 3A 03               JP   assign   
0364                EQ0_:        
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 6E 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 6E 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA 28 0C               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 28 0C               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD C6 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 8B 0F               JP   error   
0416                LAMBDA2:      
0416   CD FF 0C               CALL   parseBlock   
0419   CD 6D 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ;                               32
0422                DIV:         
0422   D1                     POP   de   
0423   E1                     POP   hl   
0424   C5                     PUSH   bc   ; preserve the IP
0425   44 4D                  LD   bc,hl   
0427   CD 33 04               CALL   divide   
042A   EB                     EX   de,hl   
042B   ED 53 FA 23            LD   (vRemain),de   
042F   C1                     POP   bc   
0430   C3 E9 02               JP   add3   
0433                             ; division subroutine.
0433                             ; bc: divisor, de: dividend, hl: remainder
0433                DIVIDE:      
0433   21 00 00               LD   hl,0   ; zero the remainder
0436   3E 10                  LD   a,16   ; loop counter
0438                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0438   CB 21                  SLA   c   
043A   CB 10                  RL   b   
043C   ED 6A                  ADC   hl,hl   
043E   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0440   38 03                  JR   c,divide2   
0442   0C                     INC   c   
0443   18 01                  JR   divide3   
0445                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0445   19                     ADD   hl,de   
0446                DIVIDE3:      
0446   3D                     DEC   a   
0447   20 EF                  JR   nz,divide1   
0449   50 59                  LD   de,bc   ; result from bc to de
044B   C9                     RET      
044C                             ; 0..9 number                   37
044C                NUM:         
044C   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
044F   0A                     LD   a,(bc)   ; Get numeral or -
0450   FE 2D                  CP   "-"   
0452   20 01                  JR   nz,num0   
0454   03                     INC   bc   ; move to next char, no flags affected
0455                NUM0:        
0455   08                     EX   af,af'   ; save zero flag = 0 for later
0456                NUM1:        
0456   0A                     LD   a,(bc)   ; read digit
0457   D6 30                  SUB   "0"   ; less than 0?
0459   38 13                  JR   c,num2   ; not a digit, exit loop
045B   FE 0A                  CP   10   ; greater that 9?
045D   30 0F                  JR   nc,num2   ; not a digit, exit loop
045F   03                     INC   bc   ; inc IP
0460   54 5D                  LD   de,hl   ; multiply hl * 10
0462   29                     ADD   hl,hl   
0463   29                     ADD   hl,hl   
0464   19                     ADD   hl,de   
0465   29                     ADD   hl,hl   
0466   85                     ADD   a,l   ; add digit in a to hl
0467   6F                     LD   l,a   
0468   3E 00                  LD   a,0   
046A   8C                     ADC   a,h   
046B   67                     LD   h,a   
046C   18 E8                  JR   num1   
046E                NUM2:        
046E   0B                     DEC   bc   
046F   08                     EX   af,af'   ; restore zero flag
0470   20 07                  JR   nz,num3   
0472   EB                     EX   de,hl   ; negate the value of hl
0473   21 00 00               LD   hl,0   
0476   B7                     OR   a   ; jump to sub2
0477   ED 52                  SBC   hl,de   
0479                NUM3:        
0479   E5                     PUSH   hl   ; Put the number on the stack
047A   DD E9                  JP   (ix)   ; and process the next character
047C                             ; string                        ;38
047C                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
047C                QUOTE:       
047C                DQUOTE:      
047C                STRING:      
047C   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
047F   23                     INC   hl   ; skip length field to start
0480   23                     INC   hl   
0481   E5                     PUSH   hl   ; save start of string
0482   0A                     LD   a,(bc)   
0483   5F                     LD   e,a   ; e = matching terminator
0484   03                     INC   bc   ; point to next char
0485   18 03                  JR   string2   
0487                STRING1:      
0487   77                     LD   (hl),a   
0488   23                     INC   hl   ; increase count
0489   03                     INC   bc   ; point to next char
048A                STRING2:      
048A   0A                     LD   a,(bc)   
048B   BB                     CP   e   ; is it the string terminator
048C   28 02                  JR   z,string3   
048E   18 F7                  JR   string1   
0490                STRING3:      
0490   AF                     XOR   a   ; write NUL to terminate string
0491   77                     LD   (hl),a   ; hl = end of string
0492   23                     INC   hl   
0493   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0496   22 EC 23               LD   (vStrPtr),hl   
0499   2B                     DEC   hl   ; hl = end of string without terminator
049A   D1                     POP   de   ; de = start of string
049B   D5                     PUSH   de   ; return start of string
049C   B7                     OR   a   ; hl = length bytes, de = start of string
049D   ED 52                  SBC   hl,de   
049F   EB                     EX   de,hl   
04A0   2B                     DEC   hl   ; write length bytes to length field at start - 2
04A1   72                     LD   (hl),d   
04A2   2B                     DEC   hl   
04A3   73                     LD   (hl),e   
04A4   DD E9                  JP   (ix)   
04A6                             ; %a .. %z                      43
04A6                             ; -- value
04A6                             ; returns value of arg
04A6                PERCENT:      
04A6                ARG:         
04A6   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
04A9   FD 56 05               LD   d,(iy+5)   
04AC   EB                     EX   de,hl   
04AD   7D                     LD   a,l   ; arg_list* == null, skip
04AE   B4                     OR   h   
04AF   28 1A                  JR   z,arg0a   
04B1   23                     INC   hl   ; a = num_args, hl = arg_list*
04B2   7E                     LD   a,(hl)   
04B3   23                     INC   hl   
04B4   B7                     OR   a   
04B5   28 14                  JR   z,arg0a   ; num_args == 0, skip
04B7   5F                     LD   e,a   ; e = a = num_args
04B8   03                     INC   bc   ; a = next char = dollar_name
04B9   0A                     LD   a,(bc)   
04BA   C5                     PUSH   bc   ; save IP
04BB   43                     LD   b,e   ; b = e = num_args
04BC   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
04BF   FD 56 03               LD   d,(iy+3)   
04C2                ARG0:        
04C2   1B                     DEC   de   ; a = dollar_name, de = next arg*
04C3   1B                     DEC   de   
04C4   BE                     CP   (hl)   
04C5   28 09                  JR   z,arg1   
04C7   23                     INC   hl   ; hl = next arg_list*
04C8   10 F8                  DJNZ   arg0   
04CA   C1                     POP   bc   ; no match, restore IP
04CB                ARG0A:       
04CB   11 00 00               LD   de,0   ; return 0
04CE   18 08                  JR   arg1a   
04D0                ARG1:        
04D0   C1                     POP   bc   ; restore IP
04D1   EB                     EX   de,hl   ; hl = arg*
04D2   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
04D5   5E                     LD   e,(hl)   
04D6   23                     INC   hl   
04D7   56                     LD   d,(hl)   ; de = arg
04D8                ARG1A:       
04D8   D5                     PUSH   de   ; push arg
04D9   DD E9                  JP   (ix)   
04DB                             ;********************** PAGE 3,4 END *********************************************
04DB                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 26 0E               CALL   jumpTable   
0503   61                     DB   "a"   ; .a print array
0504   9B                     DB   lsb(dotArray)   
0505   63                     DB   "c"   ; .c print char
0506   BD                     DB   lsb(dotChar_)   
0507   73                     DB   "s"   ; .s print string
0508   A8                     DB   lsb(dotString_)   
0509   78                     DB   "x"   ; .x print x chars
050A   C2                     DB   lsb(dotXChars_)   
050B   00                     DB   NUL   ; .  print number
050C   C3 0F 05               JP   dotNumber_   
050F                             ; /bd buffer decimal
050F                             ; value --
050F                DOTNUMBER_:      
050F   3A E8 23               LD   a,(vNumBase)   
0512   FE 10                  CP   16   
0514   CA 78 05               JP   z,dotHex   ; else falls through
0517   C3 1A 05               JP   dotDec   
051A                             ; print decimal                 ; 70
051A                             ; value --
051A                DOTDEC:      
051A   ED 5B EC 23            LD   de,(vStrPtr)   ; de"= buffer* bc" = IP
051E   D9                     EXX      
051F   E1                     POP   hl   ; hl = value
0520   CD 2F 05               CALL   dotDec0   
0523   D9                     EXX      ; de = buffer*' bc = IP
0524   3E 20                  LD   a," "   ; append space to buffer
0526   12                     LD   (de),a   
0527   13                     INC   de   ; string*++,
0528   ED 53 EC 23            LD   (vStrPtr),de   ; update buffer* with buffer*'
052C   C3 FB 0A               JP   dotNext   
052F                             ; hl = value
052F                             ; de' = buffer*
052F                             ; a, bc, de, hl destroyed
052F                DOTDEC0:      
052F   CB 7C                  BIT   7,h   
0531   28 0C                  JR   z,dotDec1   
0533   D9                     EXX      
0534   3E 2D                  LD   a,"-"   
0536   12                     LD   (de),a   
0537   13                     INC   de   
0538   D9                     EXX      
0539   AF                     XOR   a   
053A   95                     SUB   l   
053B   6F                     LD   l,a   
053C   9F                     SBC   a,a   
053D   94                     SUB   h   
053E   67                     LD   h,a   
053F                DOTDEC1:      
053F   0E 00                  LD   c,0   ; leading zeros flag = false
0541   11 F0 D8               LD   de,-10000   
0544   CD 5F 05               CALL   dotDec2   
0547   11 18 FC               LD   de,-1000   
054A   CD 5F 05               CALL   dotDec2   
054D   11 9C FF               LD   de,-100   
0550   CD 5F 05               CALL   dotDec2   
0553   1E F6                  LD   e,-10   
0555   CD 5F 05               CALL   dotDec2   
0558   0C                     INC   c   ; flag = true for at least digit
0559   1E FF                  LD   e,-1   
055B   CD 5F 05               CALL   dotDec2   
055E   C9                     RET      
055F                DOTDEC2:      
055F   06 2F                  LD   b,"0"-1   
0561                DOTDEC3:      
0561   04                     INC   b   
0562   19                     ADD   hl,de   
0563   38 FC                  JR   c,dotDec3   
0565   ED 52                  SBC   hl,de   
0567   3E 30                  LD   a,"0"   
0569   B8                     CP   b   
056A   20 05                  JR   nz,dotDec4   
056C   AF                     XOR   a   
056D   B1                     OR   c   
056E   C8                     RET   z   
056F   18 01                  JR   dotDec5   
0571                DOTDEC4:      
0571   0C                     INC   c   
0572                DOTDEC5:      
0572   78                     LD   a,b   
0573   D9                     EXX      
0574   12                     LD   (de),a   
0575   13                     INC   de   
0576   D9                     EXX      
0577   C9                     RET      
0578                             ; buffer hex                    37
0578                             ; value --
0578                DOTHEX:      
0578   E1                     POP   hl   ; hl = value
0579   ED 5B EC 23            LD   de,(vStrPtr)   
057D   3E 24                  LD   a,"$"   ; # prefix
057F   12                     LD   (de),a   
0580   13                     INC   de   ; string*++,
0581   7C                     LD   a,h   
0582   CD 94 05               CALL   dotHex1   
0585   7D                     LD   a,l   
0586   CD 94 05               CALL   dotHex1   
0589   3E 20                  LD   a," "   ; append space to buffer
058B   12                     LD   (de),a   
058C   13                     INC   de   ; string*++,
058D   ED 53 EC 23            LD   (vStrPtr),de   
0591   C3 FB 0A               JP   dotNext   
0594                DOTHEX1:      
0594   F5                     PUSH   af   
0595   1F                     RRA      
0596   1F                     RRA      
0597   1F                     RRA      
0598   1F                     RRA      
0599   CD 9D 05               CALL   dotHex2   
059C   F1                     POP   af   
059D                DOTHEX2:      
059D   E6 0F                  AND   0x0F   
059F   C6 90                  ADD   a,0x90   
05A1   27                     DAA      
05A2   CE 40                  ADC   a,0x40   
05A4   27                     DAA      
05A5   12                     LD   (de),a   
05A6   13                     INC   de   ; string*++,
05A7   C9                     RET      
05A8                             ; /bs buffered string
05A8                             ; string* --
05A8                DOTSTRING_:      
05A8   E1                     POP   hl   ; hl = string*
05A9   ED 5B EC 23            LD   de,(vStrPtr)   ; de = buffer*
05AD   18 03                  JR   dotString1   
05AF                DOTSTRING0:      
05AF   12                     LD   (de),a   ; a -> buffer*
05B0   13                     INC   de   ; string*++,
05B1   23                     INC   hl   
05B2                DOTSTRING1:      
05B2   7E                     LD   a,(hl)   ; a <- string*
05B3   B7                     OR   a   ; if NUL exit loop
05B4   20 F9                  JR   nz,dotString0   
05B6   ED 53 EC 23            LD   (vStrPtr),de   ; save buffer*' in pointer
05BA   C3 FB 0A               JP   dotNext   
05BD                             ; .c print char
05BD                             ; char --
05BD                DOTCHAR_:      
05BD   21 01 00               LD   hl,1   
05C0   18 01                  JR   dotXChars0   
05C2                             ; .x print x chars
05C2                             ; char length --
05C2                DOTXCHARS_:      
05C2   E1                     POP   hl   ; hl = length
05C3                DOTXCHARS0:      
05C3   D1                     POP   de   ; a' = char
05C4   7B                     LD   a,e   
05C5   08                     EX   af,af'   
05C6   ED 5B EC 23            LD   de,(vStrPtr)   ; de = buffer*
05CA   18 05                  JR   dotXChars2   
05CC                DOTXCHARS1:      
05CC   08                     EX   af,af'   
05CD   12                     LD   (de),a   
05CE   08                     EX   af,af'   
05CF   13                     INC   de   ; string*++,
05D0   2B                     DEC   hl   
05D1                DOTXCHARS2:      
05D1   7D                     LD   a,l   
05D2   B4                     OR   h   
05D3   20 F7                  JR   nz,dotXChars1   
05D5   ED 53 EC 23            LD   (vStrPtr),de   ; save buffer*'
05D9   C3 FB 0A               JP   dotNext   
05DC                             ;********************** PAGE 5 END *********************************************
05DC                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 71 06               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 12 0E               CALL   commandTable   
060B   D8                     DB   lsb(command_a_)   
060C   8B                     DB   lsb(command_b_)   
060D   42                     DB   lsb(command_nop_)   
060E   44                     DB   lsb(decimal_)   
060F   42                     DB   lsb(command_nop_)   
0610   FF                     DB   lsb(command_f_)   
0611   42                     DB   lsb(command_nop_)   
0612   56                     DB   lsb(hexadecimal_)   
0613   82                     DB   lsb(command_i_)   
0614   42                     DB   lsb(command_nop_)   
0615   F4                     DB   lsb(key_)   
0616   42                     DB   lsb(command_nop_)   
0617   26                     DB   lsb(command_m_)   
0618   42                     DB   lsb(command_nop_)   
0619   FD                     DB   lsb(output_)   
061A   29                     DB   lsb(command_p_)   
061B   30                     DB   lsb(command_q_)   
061C   39                     DB   lsb(command_r_)   
061D   3C                     DB   lsb(command_s_)   
061E   5C                     DB   lsb(true_)   
061F   42                     DB   lsb(command_nop_)   
0620   3F                     DB   lsb(command_v_)   
0621   5F                     DB   lsb(words_)   
0622   CD                     DB   lsb(xor_)   
0623   42                     DB   lsb(command_nop_)   
0624   42                     DB   lsb(command_nop_)   
0625   4C                     DB   lsb(div_)   
0626                             ; 2
0626                COMMAND_M_:      
0626   C3 3C 07               JP   command_m   
0629                             ; 4
0629                COMMAND_P_:      
0629   CD 26 0E               CALL   jumpTable   
062C   00                     DB   NUL   
062D   C3 50 06               JP   error1_   
0630                             ; 6
0630                COMMAND_Q_:      
0630   CD 26 0E               CALL   jumpTable   
0633   74                     DB   "t"   ; /qt quit
0634   B0                     DB   lsb(quit_)   
0635   00                     DB   NUL   
0636   C3 50 06               JP   error1_   
0639                             ; 2
0639                COMMAND_R_:      
0639   C3 48 07               JP   command_r   
063C                             ; 2
063C                COMMAND_S_:      
063C   C3 61 07               JP   command_s   
063F                             ; 2
063F                COMMAND_V_:      
063F   C3 70 07               JP   command_v   
0642                             ; 2
0642                COMMAND_NOP_:      
0642   DD E9                  JP   (ix)   
0644                             ; 5
0644                DECIMAL_:      
0644   21 0A 00               LD   hl,10   
0647                DECIMAL1:      
0647   22 E8 23               LD   (vNumBase),hl   
064A   DD E9                  JP   (ix)   
064C                             ; 3
064C                DIV_:        
064C   00                     DB   NUL   
064D   C3 22 04               JP   div   
0650                             ; 3
0650                ERROR1_:      
0650   21 01 00               LD   hl,1   ; error 1: unknown command
0653   C3 8B 0F               JP   error   
0656                             ; 3
0656                HEXADECIMAL_:      
0656   21 10 00               LD   hl,16   
0659   C3 47 06               JP   decimal1   
065C                             ; 2
065C                TRUE_:       
065C   C3 9C 03               JP   true1   
065F                             ; 2
065F                WORDS_:      
065F   C3 6B 06               JP   words   
0662                             ; ; 2
0662                ADDROF_:      
0662   C3 46 0B               JP   addrOf   
0665                             ; 2
0665                ARRAYITER_:      
0665   C3 1D 08               JP   arrayIter   
0668                             ; 3
0668                             ; /by
0668                COLDSTART_:      
0668   C3 D7 0E               JP   coldStart   
066B                             ; 4
066B                             ; /w
066B                WORDS:       
066B   21 02 00               LD   hl,2   
066E   C3 7D 06               JP   bytes1   
0671                             ; 8
0671                             ; //
0671                COMMENT:      
0671   03                     INC   bc   ; point to next char
0672   0A                     LD   a,(bc)   
0673   FE 20                  CP   " "   ; terminate on any char less than SP
0675   30 FA                  JR   nc,comment   
0677   0B                     DEC   bc   
0678   DD E9                  JP   (ix)   
067A                             ; 6
067A                             ; /b
067A                BYTES_:      
067A   21 01 00               LD   hl,1   
067D                BYTES1:      
067D   22 E6 23               LD   (vDataWidth),hl   
0680   DD E9                  JP   (ix)   
0682                             ; 6
0682                COMMAND_I_:      
0682   CD 26 0E               CALL   jumpTable   
0685   6E                     DB   "n"   ; /in input
0686   BA                     DB   lsb(input_)   
0687   00                     DB   NUL   
0688   C3 50 06               JP   error1_   
068B                             ; 8
068B                COMMAND_B_:      
068B   CD 26 0E               CALL   jumpTable   
068E   72                     DB   "r"   ; /br break
068F   96                     DB   lsb(break_)   
0690   79                     DB   "y"   ; /by cold boot
0691   68                     DB   lsb(coldStart_)   
0692   00                     DB   NUL   
0693   C3 7A 06               JP   bytes_   ; /b bytes
0696                             ; 13
0696                             ; /br break from loop
0696                             ; --
0696                BREAK_:      
0696                BREAK:       
0696   E1                     POP   hl   ; hl = condition, break if false
0697   7D                     LD   a,l   
0698   B4                     OR   h   
0699   28 02                  JR   z,break1   
069B   DD E9                  JP   (ix)   
069D                BREAK1:      
069D   FD 5D                  LD   e,iyl   ; get block* just under stack frame
069F   FD 54                  LD   d,iyh   
06A1   21 08 00               LD   hl,8   
06A4   19                     ADD   hl,de   
06A5   23                     INC   hl   
06A6   23                     INC   hl   
06A7   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06AA   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06AD   C3 BA 0B               JP   blockEnd   
06B0                             ; 10
06B0                             ; /qt
06B0                             ; bool --
06B0                QUIT_:       
06B0   E1                     POP   hl   ; hl = condition, exit if true
06B1   7D                     LD   a,l   
06B2   B4                     OR   h   
06B3   20 02                  JR   nz,quit1   
06B5   DD E9                  JP   (ix)   
06B7                QUIT1:       
06B7   C3 BA 0B               JP   blockEnd   
06BA                             ; 11
06BA                             ; Z80 port input
06BA                             ; port -- value
06BA                INPUT_:      
06BA   E1                     POP   hl   
06BB   59                     LD   e,c   ; save IP
06BC   4D                     LD   c,l   
06BD   ED 68                  IN   l,(c)   
06BF   26 00                  LD   h,0   
06C1   4B                     LD   c,e   ; restore IP
06C2   E5                     PUSH   hl   
06C3   DD E9                  JP   (ix)   
06C5                             ; 10
06C5                             ; /as size of an array, num elements, ignores vDataWidth :-/
06C5                             ; array* -- num
06C5                ARRAYSIZE_:      
06C5   E1                     POP   hl   
06C6   2B                     DEC   hl   ; msb size
06C7   56                     LD   d,(hl)   
06C8   2B                     DEC   hl   ; lsb size
06C9   5E                     LD   e,(hl)   
06CA   D5                     PUSH   de   
06CB   DD E9                  JP   (ix)   
06CD                             ; 12
06CD                XOR_:        
06CD   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
06CE                XOR1:        
06CE   E1                     POP   hl   
06CF   7B                     LD   a,e   
06D0   AD                     XOR   l   
06D1   6F                     LD   l,a   
06D2   7A                     LD   a,d   
06D3   AC                     XOR   h   
06D4   67                     LD   h,a   
06D5   E5                     PUSH   hl   
06D6   DD E9                  JP   (ix)   
06D8                             ; 12
06D8                COMMAND_A_:      
06D8   CD 26 0E               CALL   jumpTable   
06DB   62                     DB   "b"   ; /ab absolute
06DC   E7                     DB   lsb(absolute_)   
06DD   64                     DB   "d"   ; /ad address of
06DE   62                     DB   lsb(addrOf_)   
06DF   69                     DB   "i"   ; /ad address of
06E0   65                     DB   lsb(arrayIter_)   
06E1   73                     DB   "s"   ; /as array size
06E2   C5                     DB   lsb(arraySize_)   
06E3   00                     DB   NUL   
06E4   C3 50 06               JP   error1_   
06E7                             ; 14
06E7                             ; /ab absolute
06E7                             ; num -- num
06E7                ABSOLUTE_:      
06E7   E1                     POP   hl   
06E8   CB 7C                  BIT   7,h   
06EA   C8                     RET   z   
06EB   AF                     XOR   a   
06EC   95                     SUB   l   
06ED   6F                     LD   l,a   
06EE   9F                     SBC   a,a   
06EF   94                     SUB   h   
06F0   67                     LD   h,a   
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; 2
06F4                             ; key_:
06F4                             ;     jr key
06F4                             ; /k                              6
06F4                KEY_:        
06F4                KEY:         
06F4   CD 81 00               CALL   getchar   
06F7   26 00                  LD   h,0   
06F9   6F                     LD   l,a   
06FA   E5                     PUSH   hl   
06FB   DD E9                  JP   (ix)   
06FD                             ; 2
06FD                OUTPUT_:      
06FD   18 02                  JR   output   
06FF                             ; 2
06FF                COMMAND_F_:      
06FF   18 09                  JR   command_f   
0701                             ;********************** PAGE 6 END *********************************************
0701                             ; .align $100
0701                             ;********************** PAGE 7 BEGIN *********************************************
0701                             ; /o Z80 port output               9
0701                             ; value port --
0701                OUTPUT:      
0701   E1                     POP   hl   
0702   59                     LD   e,c   ; save IP
0703   4D                     LD   c,l   
0704   E1                     POP   hl   
0705   ED 69                  OUT   (c),l   
0707   4B                     LD   c,e   ; restore IP
0708   DD E9                  JP   (ix)   
070A                COMMAND_F:      
070A   CD 26 0E               CALL   jumpTable   
070D   64                     DB   "d"   ; /fd fold
070E   27                     DB   lsb(fold_)   
070F   65                     DB   "e"   ; /fe forEach
0710   21                     DB   lsb(forEach_)   
0711   73                     DB   "s"   ; /fs funcSrc
0712   2A                     DB   lsb(funcSrc_)   
0713   74                     DB   "t"   ; /ft filter
0714   24                     DB   lsb(filter_)   
0715   31                     DB   "1"   
0716   2D                     DB   lsb(f1_)   
0717   32                     DB   "2"   
0718   30                     DB   lsb(f2_)   
0719   33                     DB   "3"   
071A   33                     DB   lsb(f3_)   
071B   34                     DB   "4"   
071C   36                     DB   lsb(f4_)   
071D   00                     DB   NUL   
071E   C3 39 07               JP   false_   
0721                FOREACH_:      
0721   C3 16 0A               JP   forEach   
0724                FILTER_:      
0724   C3 66 09               JP   filter   
0727                FOLD_:       
0727   C3 C4 09               JP   fold   
072A                FUNCSRC_:      
072A   C3 62 0A               JP   funcSrc   
072D                F1_:         
072D   C3 D4 0F               JP   f1   
0730                F2_:         
0730   C3 D4 0F               JP   f2   
0733                F3_:         
0733   C3 D4 0F               JP   f3   
0736                F4_:         
0736   C3 D4 0F               JP   f4   
0739                FALSE_:      
0739   C3 A2 03               JP   false1   
073C                COMMAND_M:      
073C   CD 26 0E               CALL   jumpTable   
073F   70                     DB   "p"   ; /mp map
0740   45                     DB   lsb(map_)   
0741   00                     DB   NUL   
0742   C3 50 06               JP   error1_   
0745                MAP_:        
0745   C3 24 09               JP   map   
0748                COMMAND_R:      
0748   CD 26 0E               CALL   jumpTable   
074B   63                     DB   "c"   ; /rc tail call optimisation
074C   55                     DB   lsb(recur_)   
074D   65                     DB   "e"   ; /re remainder
074E   5B                     DB   lsb(remain_)   
074F   67                     DB   "g"   ; /rg range src
0750   6D                     DB   lsb(rangeSrc_)   
0751   00                     DB   NUL   
0752   C3 50 06               JP   error1_   
0755                RECUR_:      
0755   E1                     POP   hl   
0756   22 F2 23               LD   (vRecur),hl   
0759   DD E9                  JP   (ix)   
075B                REMAIN_:      
075B   2A FA 23               LD   hl,(vRemain)   
075E   E5                     PUSH   hl   
075F   DD E9                  JP   (ix)   
0761                COMMAND_S:      
0761   CD 26 0E               CALL   jumpTable   
0764   69                     DB   "i"   
0765   6A                     DB   lsb(stringIter_)   
0766   00                     DB   NUL   
0767   C3 50 06               JP   error1_   
076A                STRINGITER_:      
076A   C3 9E 08               JP   stringIter   
076D                RANGESRC_:      
076D   C3 A1 07               JP   rangeSrc   
0770                COMMAND_V:      
0770   CD 26 0E               CALL   jumpTable   
0773   68                     DB   "h"   
0774   89                     DB   lsb(varHeapPtr_)   
0775   74                     DB   "t"   
0776   92                     DB   lsb(varTIBPtr_)   
0777   48                     DB   "H"   
0778   7F                     DB   lsb(constHeapStart_)   
0779   54                     DB   "T"   
077A   84                     DB   lsb(constTIBStart_)   
077B   00                     DB   NUL   
077C   C3 50 06               JP   error1_   
077F                CONSTHEAPSTART_:      
077F   11 22 24               LD   de,HEAP   
0782   18 1A                  JR   constant   
0784                CONSTTIBSTART_:      
0784   11 00 21               LD   de,TIB   
0787   18 15                  JR   constant   
0789                VARHEAPPTR_:      
0789   ED 5B F0 23            LD   de,(vHeapPtr)   
078D   21 F0 23               LD   hl,vHeapPtr   
0790   18 09                  JR   variable   
0792                VARTIBPTR_:      
0792   ED 5B EA 23            LD   de,(vTIBPtr)   
0796   21 EA 23               LD   hl,vTIBPtr   
0799   18 00                  JR   variable   
079B                VARIABLE:      
079B   22 F8 23               LD   (vPointer),hl   
079E                CONSTANT:      
079E   D5                     PUSH   de   
079F   DD E9                  JP   (ix)   
07A1                             ;********************** PAGE 7 END *********************************************
07A1                             ;*******************************************************************
07A1                             ; Monty implementations
07A1                             ;*******************************************************************
07A1                             ; /rg rangeSrc
07A1                             ; begin end step -- src
07A1                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07A1                RANGESRC:      ; range source: begin, end, step, local: L
07A1   CD 27 0C               CALL   go   
07A4   00 00                  DW   NUL   
07A6   B0 07                  DW   rangeSrcM_1846S1448   
07A8   AA 07                  DW   $+2   
07AA   01                     DB   1   
07AB   04 62 65 73 4C         .PSTR   "besL"   
07B0                RANGESRCM_1846S1448:      
07B0   7B                     DB   "{"   
07B1   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07BC   5C 6B 74 7B            DB   "\\kt{"   
07C0   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07C8   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
07CE   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
07D6   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
07DE   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
07E8   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
07F0   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
07F7   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
080B   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0813   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
081A   7D                     DB   "}"   
081B   7D                     DB   "}"   
081C   00                     DB   0   
081D                             ; /ai arrayIter
081D                             ; array* -- src
081D                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
081D                ARRAYITER:      
081D   CD 27 0C               CALL   go   
0820   00 00                  DW   NUL   
0822   2A 08                  DW   arrayIterM_1865S1468   
0824   26 08                  DW   $+2   
0826   01                     DB   1   
0827   02 61 4C               .PSTR   "aL"   
082A                ARRAYITERM_1865S1468:      
082A   7B                     DB   "{"   
082B   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
083B   5C 6B 74 7B            DB   "\\kt{"   
083F   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0847   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
084D   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0855   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
085D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0864   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
086C   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
0875   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
088C   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0894   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
089B   7D                     DB   "}"   
089C   7D                     DB   "}"   
089D   00                     DB   0   
089E                             ; /si stringIter
089E                             ; string* -- src
089E                          ;*Macro unroll: FUNC stringIter, 1, "sL"
089E                STRINGITER:      
089E   CD 27 0C               CALL   go   
08A1   00 00                  DW   NUL   
08A3   AB 08                  DW   stringIterM_1884S1488   
08A5   A7 08                  DW   $+2   
08A7   01                     DB   1   
08A8   02 73 4C               .PSTR   "sL"   
08AB                STRINGITERM_1884S1488:      
08AB   7B                     DB   "{"   
08AC   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08B6   5C 6B 74 7B            DB   "\\kt{"   
08BA   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08C2   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08C9   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
08D1   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
08D9   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
08E0   2F 62 20 25 73 25 69 23 20 2F 77 20 25 63 3D DB   "/b %s%i# /w %c="   ; read byte at i, store in c as word
08EF   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08F7   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
08FE   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0912   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
091A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0921   7D                     DB   "}"   
0922   7D                     DB   "}"   
0923   00                     DB   0   
0924                             ; /mp map
0924                             ; src func -- src1
0924                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
0924                MAP:         ; map: source, function
0924   CD 27 0C               CALL   go   
0927   00 00                  DW   NUL   
0929   31 09                  DW   mapM_1904S1510   
092B   2D 09                  DW   $+2   
092D   00                     DB   0   
092E   02 73 66               .PSTR   "sf"   
0931                MAPM_1904S1510:      
0931   7B                     DB   "{"   
0932   5C 6B 74 7B            DB   "\\kt{"   
0936   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
093E   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0942   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0947   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0953   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
095C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0963   7D                     DB   "}"   
0964   7D                     DB   "}"   
0965   00                     DB   0   
0966                             ; /ft filter
0966                             ; src pred -- src1
0966                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
0966                FILTER:      ; filter: source, predicate, local: T
0966   CD 27 0C               CALL   go   
0969   00 00                  DW   NUL   
096B   74 09                  DW   filterM_1918S1525   
096D   6F 09                  DW   $+2   
096F   01                     DB   1   
0970   03 73 70 54            .PSTR   "spT"   
0974                FILTERM_1918S1525:      
0974   7B                     DB   "{"   
0975   5B 30 5D 25 54 3D      DB   "[0]%T="   
097B   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
097F   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0983   5B                     DB   "["   
0984   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
0991   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
0999   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
099D   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09A2   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09B8   3F 3F                  DB   "??"   
09BA   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09C1   7D                     DB   "}"   
09C2   7D                     DB   "}"   
09C3   00                     DB   0   
09C4                             ; /fd fold
09C4                             ; reducer is a function like: \\da00bbLi4u
09C4                             ; src init reducer -- src1
09C4                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09C4                FOLD:        ; src, init, reducer
09C4   CD 27 0C               CALL   go   
09C7   00 00                  DW   NUL   
09C9   D3 09                  DW   foldM_1937S1545   
09CB   CD 09                  DW   $+2   
09CD   01                     DB   1   
09CE   04 73 69 72 41         .PSTR   "sirA"   
09D3                FOLDM_1937S1545:      
09D3   7B                     DB   "{"   ; reducer: \\da00bbLi4u
09D4   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
09DB   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09DF   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09E3   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
09E8   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A03   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A0C   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A13   7D                     DB   "}"   
0A14   7D                     DB   "}"   
0A15   00                     DB   0   
0A16                             ; /fe forEach
0A16                             ; src proc --
0A16                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A16                FOREACH:      ; forEach: source, procedure, local: T
0A16   CD 27 0C               CALL   go   
0A19   00 00                  DW   NUL   
0A1B   24 0A                  DW   forEachM_1951S1560   
0A1D   1F 0A                  DW   $+2   
0A1F   01                     DB   1   
0A20   03 73 70 54            .PSTR   "spT"   
0A24                FOREACHM_1951S1560:      
0A24   7B                     DB   "{"   
0A25   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A2B   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A2F   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A37   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A3C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A4E   3F 3F                  DB   "??"   ; ifte:
0A50   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A59   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A60   7D                     DB   "}"   
0A61   00                     DB   0   
0A62                             ; ; /fs funcSrc
0A62                             ; ; func -- src
0A62                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A62                FUNCSRC:      ; :f func or block
0A62   CD 27 0C               CALL   go   
0A65   00 00                  DW   NUL   
0A67   6E 0A                  DW   funcSrcM_1965S1575   
0A69   6B 0A                  DW   $+2   
0A6B   00                     DB   0   
0A6C   01 66                  .PSTR   "f"   
0A6E                FUNCSRCM_1965S1575:      
0A6E   7B                     DB   "{"   
0A6F   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0A73   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0A7B   5C 64 74 7B            DB   "\\dt{"   
0A7F   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0A91   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0A98   7D                     DB   "}"   
0A99   7D                     DB   "}"   
0A9A   00                     DB   0   
0A9B                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0A9B                DOTARRAY:      
0A9B   CD 27 0C               CALL   go   
0A9E   00 00                  DW   NUL   
0AA0   A9 0A                  DW   dotArrayM_1975S1586   
0AA2   A4 0A                  DW   $+2   
0AA4   02                     DB   2   
0AA5   03 61 62 63            .PSTR   "abc"   
0AA9                DOTARRAYM_1975S1586:      
0AA9   7B                     DB   "{"   
0AAA   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0AE1   7D                     DB   "}"   
0AE2   00                     DB   0   
0AE3                             ;*******************************************************************
0AE3                             ; unused opcodes (reserved)
0AE3                             ;*******************************************************************
0AE3                UNDERSCORE:      
0AE3                COMMA:       
0AE3   DD E9                  JP   (ix)   
0AE5                             ;*******************************************************************
0AE5                             ; implementations
0AE5                             ;*******************************************************************
0AE5                GRAVE:       
0AE5                PRINTSTRING:      
0AE5   E1                     POP   hl   ; hl = string*
0AE6   ED 5B EC 23            LD   de,(vStrPtr)   ; de = buffer*
0AEA   18 03                  JR   printString1   
0AEC                PRINTSTRING0:      
0AEC   12                     LD   (de),a   ; a -> buffer*
0AED   13                     INC   de   ; string*++,
0AEE   23                     INC   hl   
0AEF                PRINTSTRING1:      
0AEF   7E                     LD   a,(hl)   ; a <- string*
0AF0   FE 60                  CP   "`"   ; if ` exit loop
0AF2   20 F8                  JR   nz,printString0   
0AF4   ED 53 EC 23            LD   (vStrPtr),de   ; save buffer*' in pointer
0AF8   C3 FB 0A               JP   dotNext   
0AFB                DOTNEXT:      
0AFB   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0AFE   3C                     INC   a   
0AFF   20 02                  JR   nz,dotNext1   
0B01   DD E9                  JP   (ix)   
0B03                DOTNEXT1:      
0B03   ED 5B F0 23            LD   de,(vHeapPtr)   
0B07   2A EC 23               LD   hl,(vStrPtr)   
0B0A   B7                     OR   a   ; hl = count, de = vHeapPtr
0B0B   ED 52                  SBC   hl,de   
0B0D   C3 16 0B               JP   dotNext3   
0B10                DOTNEXT2:      
0B10   1A                     LD   a,(de)   ; print char at char*
0B11   CD 85 00               CALL   putchar   
0B14   13                     INC   de   ; char*++
0B15   2B                     DEC   hl   ; count--
0B16                DOTNEXT3:      
0B16   7D                     LD   a,l   ; count == 0?
0B17   B4                     OR   h   
0B18   20 F6                  JR   nz,dotNext2   ; if not loop
0B1A   2A F0 23               LD   hl,(vHeapPtr)   ; reset vStrPtr to vHeapPtr
0B1D   22 EC 23               LD   (vStrPtr),hl   
0B20   DD E9                  JP   (ix)   
0B22                STRINGMODEENTER:      
0B22   21 FF FF               LD   hl,TRUE   
0B25   22 F6 23               LD   (vStrMode),hl   
0B28   2A F0 23               LD   hl,(vHeapPtr)   
0B2B   18 14                  JR   stringModeExit1   
0B2D                STRINGMODEEXIT:      
0B2D   21 00 00               LD   hl,FALSE   
0B30   22 F6 23               LD   (vStrMode),hl   
0B33   2A EC 23               LD   hl,(vStrPtr)   ; append NUL to string
0B36   AF                     XOR   a   
0B37   77                     LD   (hl),a   
0B38   23                     INC   hl   ; hl = string_end*
0B39   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = string*
0B3D   D5                     PUSH   de   ; return string*
0B3E   22 F0 23               LD   (vHeapPtr),hl   ; vHeapPtr = string_end*
0B41                STRINGMODEEXIT1:      
0B41   22 EC 23               LD   (vStrPtr),hl   ; vStrPtr = vHeapPtr
0B44   DD E9                  JP   (ix)   
0B46                             ; /ad addrOf                    24
0B46                             ; char -- addr
0B46                ADDROF:      
0B46   E1                     POP   hl   ; a = char
0B47   7D                     LD   a,l   
0B48   FE 7B                  CP   "z"+1   ; if a > z then exit
0B4A   30 19                  JR   nc,addrOf2   
0B4C   D6 41                  SUB   "A"   ; a - 65
0B4E   38 15                  JR   c,addrOf2   ; if < A then exit
0B50   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0B52   38 06                  JR   c,addrOf1   
0B54   D6 06                  SUB   "a"-("Z"+1)   
0B56   FE 1A                  CP   "Z"-"A"+1   
0B58   38 0B                  JR   c,addrOf2   ; if < a then exit
0B5A                ADDROF1:      
0B5A   87                     ADD   a,a   ; double a
0B5B   21 00 23               LD   hl,VARS   ; hl = VARS + a
0B5E   85                     ADD   a,l   
0B5F   6F                     LD   l,a   
0B60   3E 00                  LD   a,0   
0B62   8C                     ADC   a,h   
0B63   67                     LD   h,a   
0B64   E5                     PUSH   hl   
0B65                ADDROF2:      
0B65   DD E9                  JP   (ix)   
0B67                             ;                               51
0B67                RBRACK:      
0B67                ARRAYEND:      
0B67   FD 54                  LD   d,iyh   ; de = BP
0B69   FD 5D                  LD   e,iyl   
0B6B   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0B6F   62 6B                  LD   hl,de   ; hl = de = BP
0B71   B7                     OR   a   
0B72   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B74   CB 3C                  SRL   h   ; 
0B76   CB 1D                  RR   l   
0B78   44 4D                  LD   bc,hl   ; bc = count
0B7A   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B7D   71                     LD   (hl),c   ; write num items in length word
0B7E   23                     INC   hl   
0B7F   70                     LD   (hl),b   
0B80   23                     INC   hl   ; hl = array[0], bc = count
0B81                             ; de = BP, hl = array[0], bc = count
0B81   18 15                  JR   arrayEnd3   
0B83                ARRAYEND1:      
0B83   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B86   77                     LD   (hl),a   ; write lsb of array item
0B87   23                     INC   hl   ; move to msb of array item
0B88   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0B8B   3D                     DEC   a   
0B8C   28 05                  JR   z,arrayEnd2   
0B8E   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B91   77                     LD   (hl),a   ; write msb of array item
0B92   23                     INC   hl   ; move to next word in array
0B93                ARRAYEND2:      
0B93   FD 2B                  DEC   iy   ; move to next word on stack
0B95   FD 2B                  DEC   iy   
0B97   0B                     DEC   bc   ; dec items count
0B98                ARRAYEND3:      
0B98   79                     LD   a,c   ; if not zero loop
0B99   B0                     OR   b   
0B9A   20 E7                  JR   nz,arrayEnd1   
0B9C   EB                     EX   de,hl   ; de = end of array, hl = BP
0B9D   F9                     LD   sp,hl   ; sp = BP
0B9E   E1                     POP   hl   ; de = end of array, hl = old BP
0B9F   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0BA0   FD 62                  LD   iyh,d   
0BA2   FD 6B                  LD   iyl,e   
0BA4   D1                     POP   de   ; pop arg_list (discard)
0BA5   D1                     POP   de   ; pop first_arg* (discard)
0BA6   D1                     POP   de   ; pop IP (discard)
0BA7   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0BAB   13                     INC   de   
0BAC   13                     INC   de   
0BAD   D5                     PUSH   de   ; return array[0]
0BAE   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0BB1   22 EC 23               LD   (vStrPtr),hl   
0BB4   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0BB8   DD E9                  JP   (ix)   
0BBA                             ;                               58
0BBA                RBRACE:      
0BBA                BLOCKEND:      
0BBA   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0BBD   FD 56 01               LD   d,(iy+1)   
0BC0   ED 53 04 24            LD   (vTemp1),de   
0BC4   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0BC7   FD 56 07               LD   d,(iy+7)   
0BCA   ED 53 06 24            LD   (vTemp2),de   
0BCE   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BD1   FD 56 03               LD   d,(iy+3)   
0BD4   EB                     EX   de,hl   
0BD5   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BD8   FD 56 01               LD   d,(iy+1)   
0BDB   13                     INC   de   ; for carry flag <=
0BDC   B7                     OR   a   
0BDD   ED 52                  SBC   hl,de   
0BDF   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BE1   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BE3   FD 5D                  LD   e,iyl   
0BE5   21 08 00               LD   hl,8   
0BE8   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BE9   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BEA   18 0C                  JR   blockEnd2   
0BEC                BLOCKEND1:      ; same scope
0BEC   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BEF   FD 56 03               LD   d,(iy+3)   
0BF2   EB                     EX   de,hl   
0BF3   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BF5   FD 5D                  LD   e,iyl   
0BF7   EB                     EX   de,hl   
0BF8                BLOCKEND2:      
0BF8   44 4D                  LD   bc,hl   ; bc = hl = BP
0BFA   B7                     OR   a   ; hl = BP - SP = count
0BFB   ED 72                  SBC   hl,sp   
0BFD   7D                     LD   a,l   
0BFE   B4                     OR   h   
0BFF   28 09                  JR   z,blockEnd3   
0C01   C5                     PUSH   bc   ; bc = count, hl = BP
0C02   44 4D                  LD   bc,hl   
0C04   E1                     POP   hl   
0C05   2B                     DEC   hl   ; hl = BP-1
0C06   1B                     DEC   de   ; de = args*-1
0C07   ED B8                  LDDR      
0C09   13                     INC   de   
0C0A                BLOCKEND3:      
0C0A   EB                     EX   de,hl   ; sp = de = new tos*
0C0B   F9                     LD   sp,hl   
0C0C   ED 4B 06 24            LD   bc,(vTemp2)   
0C10   FD 2A 04 24            LD   iy,(vTemp1)   
0C14   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0C18   7B                     LD   a,e   ; check for NUL
0C19   B2                     OR   d   
0C1A   20 02                  JR   nz,blockEnd4   
0C1C   DD E9                  JP   (ix)   
0C1E                BLOCKEND4:      
0C1E   21 00 00               LD   hl,0   ; clear recur vector
0C21   22 F2 23               LD   (vRecur),hl   
0C24   C3 28 0C               JP   go1   ; execute de
0C27                             ; execute a block of code which ends with } 116
0C27                             ; creates a root scope if BP == stack
0C27                             ; else uses outer scope
0C27                CARET:       
0C27                GO:          
0C27   D1                     POP   de   ; de = block*
0C28                GO1:         
0C28   7B                     LD   a,e   ; if block* == null, exit
0C29   B2                     OR   d   
0C2A   20 02                  JR   nz,go2   
0C2C   DD E9                  JP   (ix)   
0C2E                GO2:         
0C2E   1A                     LD   a,(de)   
0C2F   FE 7B                  CP   "{"   
0C31   28 06                  JR   z,goBlock   
0C33   FE 28                  CP   "("   
0C35   C2 6C 0C               JP   nz,goFunc   
0C38   D5                     PUSH   de   ; push de just before stack frame
0C39                GOBLOCK:      
0C39   ED 53 04 24            LD   (vTemp1),de   ; save de
0C3D   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C40   FD 54                  LD   d,iyh   
0C42   FD 5D                  LD   e,iyl   
0C44   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C45   ED 52                  SBC   hl,de   
0C47   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C4B   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C4C   B4                     OR   h   
0C4D   3E 00                  LD   a,0   
0C4F   28 6A                  JR   z,goFunc8   
0C51   C5                     PUSH   bc   ; push IP
0C52   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C55   FD 46 05               LD   b,(iy+5)   
0C58   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C5B   FD 66 03               LD   h,(iy+3)   
0C5E                GOBLOCK2:      
0C5E   C5                     PUSH   bc   ; arg_list*
0C5F   E5                     PUSH   hl   ; first_arg*
0C60   FD E5                  PUSH   iy   ; push BP
0C62   FD 21 00 00            LD   iy,0   ; BP = SP
0C66   FD 39                  ADD   iy,sp   
0C68                GOBLOCK3:      
0C68   42 4B                  LD   bc,de   ; bc = de = block*-1
0C6A   DD E9                  JP   (ix)   
0C6C                GOFUNC:      ; execute func
0C6C   EB                     EX   de,hl   ; hl = func*
0C6D   5E                     LD   e,(hl)   ; de = partial_array*
0C6E   23                     INC   hl   
0C6F   56                     LD   d,(hl)   
0C70   23                     INC   hl   
0C71   7B                     LD   a,e   ; if partial_array* == null skip
0C72   B2                     OR   d   
0C73   28 21                  JR   z,goFunc3   
0C75   ED 43 04 24            LD   (vTemp1),bc   
0C79   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C7C   EB                     EX   de,hl   ; hl = partial_array*
0C7D   2B                     DEC   hl   ; bc = count
0C7E   46                     LD   b,(hl)   
0C7F   2B                     DEC   hl   
0C80   4E                     LD   c,(hl)   
0C81   23                     INC   hl   ; hl = array data*
0C82   23                     INC   hl   
0C83   18 06                  JR   goFunc2   ; push each item on stack
0C85                GOFUNC1:      
0C85   5E                     LD   e,(hl)   ; de = partial item
0C86   23                     INC   hl   
0C87   56                     LD   d,(hl)   
0C88   23                     INC   hl   
0C89   D5                     PUSH   de   ; push on stack
0C8A   0B                     DEC   bc   
0C8B                GOFUNC2:      
0C8B   79                     LD   a,c   ; if count != 0 then loop
0C8C   B0                     OR   b   
0C8D   20 F6                  JR   nz,goFunc1   
0C8F   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C93   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C96                GOFUNC3:      
0C96   5E                     LD   e,(hl)   ; de = block*
0C97   23                     INC   hl   
0C98   56                     LD   d,(hl)   
0C99   23                     INC   hl   
0C9A   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C9E   5E                     LD   e,(hl)   ; de = arg_list*
0C9F   23                     INC   hl   
0CA0   56                     LD   d,(hl)   
0CA1   23                     INC   hl   
0CA2   EB                     EX   de,hl   ; hl = arg_list*
0CA3   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0CA7   7D                     LD   a,l   ; if arg_list* == null a = 0
0CA8   B4                     OR   h   
0CA9   20 03                  JR   nz,goFunc4   
0CAB   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0CAC   18 0D                  JR   goFunc8   
0CAE                GOFUNC4:      ; allocate locals
0CAE   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0CAF   18 03                  JR   goFunc6   
0CB1                GOFUNC5:      ; loop
0CB1   3B                     DEC   sp   
0CB2   3B                     DEC   sp   
0CB3   3D                     DEC   a   
0CB4                GOFUNC6:      
0CB4   B7                     OR   a   
0CB5   20 FA                  JR   nz,goFunc5   ; end loop
0CB7                GOFUNC7:      
0CB7   23                     INC   hl   ; a = num_args* x 2
0CB8   7E                     LD   a,(hl)   
0CB9   2B                     DEC   hl   
0CBA   87                     ADD   a,a   ; a *= 2
0CBB                GOFUNC8:      
0CBB   C5                     PUSH   bc   ; push IP
0CBC   44 4D                  LD   bc,hl   
0CBE   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0CC1   85                     ADD   a,l   
0CC2   6F                     LD   l,a   
0CC3   39                     ADD   hl,sp   
0CC4   18 98                  JR   goBlock2   
0CC6                             ; 
0CC6                             ;*******************************************************************
0CC6                             ; general routines
0CC6                             ;*******************************************************************
0CC6                             ; arg_list - parses arg_list e.g. ab:c
0CC6                             ; -- arg_list*
0CC6                PARSEARGS:      
0CC6   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CC9   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CCC   E5                     PUSH   hl   ; save start of arg_list
0CCD   23                     INC   hl   ; skip length fields to start of string
0CCE   23                     INC   hl   
0CCF   03                     INC   bc   ; point to next char
0CD0                PARSEARGS1:      
0CD0   0A                     LD   a,(bc)   
0CD1   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CD3   20 03                  JR   nz,parseArgs1a   
0CD5   14                     INC   d   ; non zero value local count acts as flag
0CD6   18 10                  JR   parseArgs3   
0CD8                PARSEARGS1A:      
0CD8   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CDA   38 0F                  JR   c,parseArgs4   
0CDC   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CDE   30 0B                  JR   nc,parseArgs4   
0CE0                PARSEARGS2:      
0CE0   77                     LD   (hl),a   
0CE1   23                     INC   hl   
0CE2   1C                     INC   e   ; increase arg count
0CE3   AF                     XOR   a   
0CE4   B2                     OR   d   
0CE5   28 01                  JR   z,parseArgs3   
0CE7   14                     INC   d   ; if d > 0 increase local count
0CE8                PARSEARGS3:      
0CE8   03                     INC   bc   ; point to next char
0CE9   18 E5                  JR   parseArgs1   
0CEB                PARSEARGS4:      
0CEB   0B                     DEC   bc   
0CEC   AF                     XOR   a   
0CED   B2                     OR   d   
0CEE   28 01                  JR   z,parseArgs5   
0CF0   15                     DEC   d   ; remove initial inc
0CF1                PARSEARGS5:      
0CF1   23                     INC   hl   
0CF2   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CF5   22 EC 23               LD   (vStrPtr),hl   
0CF8   E1                     POP   hl   ; hl = start of arg_list
0CF9   72                     LD   (hl),d   ; write number of locals at start - 1
0CFA   23                     INC   hl   
0CFB   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CFC   2B                     DEC   hl   
0CFD   E3                     EX   (sp),hl   
0CFE   E9                     JP   (hl)   
0CFF                             ; create block: parses block e.g. 00bbIC4uLi4g
0CFF                             ; -- block*
0CFF                PARSEBLOCK:      
0CFF   C5                     PUSH   bc   ; return pointer to first { of block
0D00   03                     INC   bc   
0D01   16 01                  LD   d,1   ; nesting: count first parenthesis
0D03                PARSEBLOCK1:      ; Skip to end of definition
0D03   0A                     LD   a,(bc)   ; Get the next character
0D04   03                     INC   bc   ; Point to next character
0D05   FE 21                  CP   " " + 1   ; ignore whitespace
0D07   38 FA                  JR   c,parseBlock1   
0D09   FE 29                  CP   ")"   
0D0B   28 2D                  JR   z,parseBlock4   
0D0D   FE 7D                  CP   "}"   
0D0F   28 29                  JR   z,parseBlock4   
0D11   FE 5D                  CP   "]"   
0D13   28 25                  JR   z,parseBlock4   
0D15   FE 28                  CP   "("   
0D17   28 16                  JR   z,parseBlock2   
0D19   FE 7B                  CP   "{"   
0D1B   28 12                  JR   z,parseBlock2   
0D1D   FE 5B                  CP   "["   
0D1F   28 0E                  JR   z,parseBlock2   
0D21   FE 27                  CP   "'"   
0D23   28 0D                  JR   z,parseBlock3   
0D25   FE 60                  CP   "`"   
0D27   28 09                  JR   z,parseBlock3   
0D29   FE 22                  CP   DQ   
0D2B   28 05                  JR   z,parseBlock3   
0D2D   18 D4                  JR   parseBlock1   
0D2F                PARSEBLOCK2:      
0D2F   14                     INC   d   
0D30   18 D1                  JR   parseBlock1   
0D32                PARSEBLOCK3:      
0D32   3E 80                  LD   a,$80   
0D34   AA                     XOR   d   
0D35   57                     LD   d,a   
0D36   20 CB                  JR   nz,parseBlock1   
0D38   18 03                  JR   parseBlock5   
0D3A                PARSEBLOCK4:      
0D3A   15                     DEC   d   
0D3B   20 C6                  JR   nz,parseBlock1   ; get the next element
0D3D                PARSEBLOCK5:      
0D3D   60 69                  LD   hl,bc   ; hl = IP
0D3F   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D42   B7                     OR   a   ; IP - HEAP
0D43   ED 52                  SBC   hl,de   
0D45   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D47   28 20                  JR   z,parseBlock6   
0D49   60 69                  LD   hl,bc   ; hl = IP
0D4B   D1                     POP   de   ; de = block*
0D4C   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D50   B7                     OR   a   ; bc = size
0D51   ED 52                  SBC   hl,de   
0D53   44 4D                  LD   bc,hl   
0D55   EB                     EX   de,hl   ; hl = block* de = heap*
0D56   ED 5B F0 23            LD   de,(vHeapPtr)   
0D5A   D5                     PUSH   de   ; return hblock*
0D5B   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D5D   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D61   ED 53 EC 23            LD   (vStrPtr),de   
0D65   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D69                PARSEBLOCK6:      
0D69   0B                     DEC   bc   ; balanced, exit
0D6A   E1                     POP   hl   ; hl = block*
0D6B   E3                     EX   (sp),hl   ; return to caller
0D6C   E9                     JP   (hl)   
0D6D                             ; create function
0D6D                             ; arg_list* block* -- func*
0D6D                CREATEFUNC:      
0D6D   E1                     POP   hl   ; save retrn address
0D6E   22 08 24               LD   (vTemp3),hl   
0D71   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D75   E1                     POP   hl   ; hl = block*
0D76   22 06 24               LD   (vTemp2),hl   ; save block*
0D79   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D7C   FD 56 05               LD   d,(iy+5)   
0D7F   7B                     LD   a,e   ; if arg_list == null then make a func
0D80   B2                     OR   d   
0D81   20 09                  JR   nz,createFunc0   
0D83   21 00 00               LD   hl,0   ; partial_array = null
0D86   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D8A   18 65                  JR   createFunc5   
0D8C                CREATEFUNC0:      
0D8C   E1                     POP   hl   ; hl = inner_arg_list*
0D8D   E5                     PUSH   hl   ; save inner_arg_list
0D8E   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D92   7E                     LD   a,(hl)   ; compile inner_num_locals
0D93   4F                     LD   c,a   ; b = inner_num_locals
0D94   12                     LD   (de),a   
0D95   23                     INC   hl   
0D96   13                     INC   de   
0D97   7E                     LD   a,(hl)   ; compile inner_length
0D98   12                     LD   (de),a   
0D99   91                     SUB   c   ; a = inner_num args
0D9A   23                     INC   hl   
0D9B   13                     INC   de   
0D9C   B7                     OR   a   ; compile args if inner_length > 0
0D9D   28 05                  JR   z,createFunc1   
0D9F   4F                     LD   c,a   ; bc = a
0DA0   06 00                  LD   b,0   
0DA2   ED B0                  LDIR      
0DA4                CREATEFUNC1:      
0DA4   EB                     EX   de,hl   ; hl = outer_arg_list
0DA5   FD 5E 04               LD   e,(iy+4)   
0DA8   FD 56 05               LD   d,(iy+5)   
0DAB   EB                     EX   de,hl   
0DAC   23                     INC   hl   ; a = outer_length
0DAD   7E                     LD   a,(hl)   
0DAE   23                     INC   hl   
0DAF   B7                     OR   a   
0DB0   28 05                  JR   z,createFunc2   
0DB2   4F                     LD   c,a   
0DB3   06 00                  LD   b,0   
0DB5   ED B0                  LDIR      ; append outer_args
0DB7                CREATEFUNC2:      ; a = outer_length
0DB7   47                     LD   b,a   ; b = a = outer_length
0DB8   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DBB   23                     INC   hl   
0DBC   7E                     LD   a,(hl)   ; add outer_length to new length
0DBD   80                     ADD   a,b   
0DBE   77                     LD   (hl),a   
0DBF   2B                     DEC   hl   
0DC0   78                     LD   a,b   ; save outer_length in a'
0DC1   08                     EX   af,af'   
0DC2   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DC3   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DC4   B7                     OR   a   
0DC5   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DC7   4F                     LD   c,a   ; c = inner_num_locals
0DC8   06 00                  LD   b,0   ; bc = inner_num_locals
0DCA   23                     INC   hl   ; a = inner_length
0DCB   7E                     LD   a,(hl)   
0DCC   91                     SUB   c   ; a = inner_num_args
0DCD   23                     INC   hl   ; hl = inner_arg_chars
0DCE   85                     ADD   a,l   ; hl += a
0DCF   6F                     LD   l,a   
0DD0   3E 00                  LD   a,0   
0DD2   84                     ADD   a,h   
0DD3   67                     LD   h,a   
0DD4   ED B0                  LDIR      ; append inner_locals
0DD6                CREATEFUNC2A:      
0DD6   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DD7   12                     LD   (de),a   ; compile partial_array length field
0DD8   13                     INC   de   
0DD9   AF                     XOR   a   
0DDA   12                     LD   (de),a   
0DDB   13                     INC   de   
0DDC   D5                     PUSH   de   ; push partial_array*
0DDD   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DDE   FD 5E 02               LD   e,(iy+2)   
0DE1   FD 56 03               LD   d,(iy+3)   
0DE4   EB                     EX   de,hl   
0DE5                CREATEFUNC3:      
0DE5   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DE6   4E                     LD   c,(hl)   
0DE7   2B                     DEC   hl   
0DE8   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DE9   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DEA   13                     INC   de   
0DEB   79                     LD   a,c   
0DEC   12                     LD   (de),a   
0DED   13                     INC   de   
0DEE   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DF0                CREATEFUNC4:      
0DF0   E1                     POP   hl   ; hl = partial_array*
0DF1                CREATEFUNC5:      
0DF1   C1                     POP   bc   ; bc = new_arg_list*
0DF2   D5                     PUSH   de   ; return new func*
0DF3   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DF4   73                     LD   (hl),e   ; compile partial_array* to func
0DF5   23                     INC   hl   
0DF6   72                     LD   (hl),d   
0DF7   23                     INC   hl   
0DF8   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0DFC   73                     LD   (hl),e   ; compile block* to func
0DFD   23                     INC   hl   
0DFE   72                     LD   (hl),d   
0DFF   23                     INC   hl   
0E00   71                     LD   (hl),c   ; compile new_arg_list* to func
0E01   23                     INC   hl   
0E02   70                     LD   (hl),b   
0E03   23                     INC   hl   
0E04   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E07   22 EC 23               LD   (vStrPtr),hl   
0E0A   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E0E   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E11   E9                     JP   (hl)   
0E12                             ; ; prints whatever in in buffer starting from BUF and ending at vStrPtr*
0E12                             ; flushBuffer:
0E12                             ;     push af
0E12                             ;     push de
0E12                             ;     push hl
0E12                             ;     ld hl,(vStrPtr)
0E12                             ;     ld de,BUF
0E12                             ;     ld (vStrPtr),de
0E12                             ;     or a
0E12                             ;     sbc hl,de
0E12                             ;     call printChars2
0E12                             ;     pop hl
0E12                             ;     pop de
0E12                             ;     pop af
0E12                             ;     ret
0E12                             ; printChars1:
0E12                             ;     ld a,(de)                           ; print char at char*
0E12                             ;     call putchar
0E12                             ;     inc de                              ; char*++
0E12                             ;     dec hl                              ; count--
0E12                             ; printChars2:
0E12                             ;     ld a,l                              ; count == 0?
0E12                             ;     or h
0E12                             ;     ret z
0E12                             ;     jr printChars1                      ; if not loop
0E12                COMMANDTABLE:      
0E12   03                     INC   bc   
0E13   0A                     LD   a,(bc)   
0E14   FE 7B                  CP   "z"+1   
0E16   30 09                  JR   nc,commandTable2   
0E18   D6 61                  SUB   "a"   
0E1A   38 05                  JR   c,commandTable2   
0E1C                COMMANDTABLE1:      
0E1C   E1                     POP   hl   
0E1D   85                     ADD   a,l   
0E1E   6F                     LD   l,a   
0E1F   6E                     LD   l,(hl)   ; must have the same msb as the table
0E20   E9                     JP   (hl)   
0E21                COMMANDTABLE2:      
0E21   3E 1A                  LD   a,26   
0E23   0B                     DEC   bc   
0E24   18 F6                  JR   commandTable1   
0E26                             ; followed by a table
0E26                             ; db char
0E26                             ; db lsb(addr)
0E26                             ; the final item must have char == NUL
0E26                JUMPTABLE:      
0E26   E1                     POP   hl   
0E27   03                     INC   bc   
0E28                JUMPTABLE0:      
0E28   AF                     XOR   a   
0E29   BE                     CP   (hl)   
0E2A   28 0B                  JR   z,jumpTable2   
0E2C   0A                     LD   a,(bc)   
0E2D   BE                     CP   (hl)   
0E2E   28 04                  JR   z,jumpTable1   
0E30   23                     INC   hl   
0E31   23                     INC   hl   
0E32   18 F4                  JR   jumpTable0   
0E34                JUMPTABLE1:      
0E34   23                     INC   hl   
0E35   6E                     LD   l,(hl)   ; must have the same msb as the table
0E36   E9                     JP   (hl)   
0E37                JUMPTABLE2:      
0E37   0B                     DEC   bc   
0E38   23                     INC   hl   
0E39   E9                     JP   (hl)   
0E3A                PRTSTR0:      
0E3A   CD 85 00               CALL   putchar   
0E3D   23                     INC   hl   
0E3E                PRTSTR:      
0E3E   7E                     LD   a,(hl)   
0E3F   B7                     OR   a   
0E40   20 F8                  JR   nz,prtstr0   
0E42   C9                     RET      
0E43                             ; **************************************************************************
0E43                             ; calculate nesting value
0E43                             ; a is char to be tested,
0E43                             ; e is the nesting value (initially 0)
0E43                             ; e is increased by ( and [
0E43                             ; e is decreased by ) and ]
0E43                             ; e has its bit 7 toggled by `
0E43                             ; limited to 127 levels
0E43                             ; **************************************************************************
0E43                NESTING:      
0E43   FE 22                  CP   DQ   ; quote char
0E45   28 06                  JR   z,nesting0   
0E47   FE 60                  CP   "`"   ; quote char
0E49   28 02                  JR   z,nesting0   
0E4B   18 0A                  JR   nesting1   
0E4D                NESTING0:      
0E4D   CB 7B                  BIT   7,e   
0E4F   28 03                  JR   z,nesting1a   
0E51   CB BB                  RES   7,e   
0E53   C9                     RET      
0E54                NESTING1A:      
0E54   CB FB                  SET   7,e   
0E56   C9                     RET      
0E57                NESTING1:      
0E57   CB 7B                  BIT   7,e   
0E59   C0                     RET   nz   
0E5A   FE 7B                  CP   "{"   
0E5C   28 08                  JR   z,nesting2   
0E5E   FE 5B                  CP   "["   
0E60   28 04                  JR   z,nesting2   
0E62   FE 28                  CP   "("   
0E64   20 02                  JR   nz,nesting3   
0E66                NESTING2:      
0E66   1C                     INC   e   
0E67   C9                     RET      
0E68                NESTING3:      
0E68   FE 7D                  CP   "}"   
0E6A   28 07                  JR   z,nesting4   
0E6C   FE 5D                  CP   "]"   
0E6E   28 03                  JR   z,nesting4   
0E70   FE 29                  CP   ")"   
0E72   C0                     RET   nz   
0E73                NESTING4:      
0E73   1D                     DEC   e   
0E74   C9                     RET      
0E75                PROMPT:      
0E75   CD 85 0E               CALL   printStr   
0E78   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E7D   C9                     RET      
0E7E                CRLF:        
0E7E   CD 85 0E               CALL   printStr   
0E81   0D 0A 00               .CSTR   "\r\n"   
0E84   C9                     RET      
0E85                             ; prints a null teminated string
0E85                             ; the string should be immediately following the call
0E85                PRINTSTR:      
0E85   E3                     EX   (sp),hl   ; swap			
0E86   CD 3E 0E               CALL   prtstr   
0E89   23                     INC   hl   ; inc past NUL
0E8A   E3                     EX   (sp),hl   ; put it back	
0E8B   C9                     RET      
0E8C                INIT:        
0E8C   21 F0 01               LD   hl,titleStr   
0E8F   11 0E 24               LD   de,titleBuf   
0E92   06 14                  LD   b,20   
0E94                INIT1:       
0E94   1A                     LD   a,(de)   
0E95   BE                     CP   (hl)   
0E96   20 17                  JR   nz,coldBoot0   
0E98   13                     INC   de   
0E99   23                     INC   hl   
0E9A   10 F8                  DJNZ   init1   
0E9C                WARMINIT:      
0E9C   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0EA0   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EA4   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EA8   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EAC   C3 E6 0E               JP   start1   
0EAF                COLDBOOT0:      
0EAF   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EB2   11 0E 24               LD   de,titleBuf   
0EB5   06 14                  LD   b,20   
0EB7   ED B0                  LDIR      
0EB9                COLDINIT:      
0EB9   21 DE 01               LD   hl,isysVars   
0EBC   11 E6 23               LD   de,sysVars   
0EBF   01 12 00               LD   bc,9 * 2   
0EC2   ED B0                  LDIR      
0EC4   21 00 23               LD   hl,vars   ; 52 vars LO HI
0EC7   06 34                  LD   b,26*2   
0EC9   AF                     XOR   a   
0ECA                COLDBOOT1:      
0ECA   77                     LD   (hl),a   
0ECB   23                     INC   hl   
0ECC   10 FC                  DJNZ   coldBoot1   
0ECE   DD 2A EE 23            LD   ix,(vNext)   
0ED2   FD 21 00 21            LD   iy,STACK   
0ED6   C9                     RET      
0ED7                COLDSTART:      
0ED7   31 00 21               LD   sp,STACK   
0EDA   CD AF 0E               CALL   coldBoot0   
0EDD   C3 E6 0E               JP   start1   
0EE0                START:       
0EE0   31 00 21               LD   sp,STACK   ; start Monty
0EE3   CD 8C 0E               CALL   init   ; setups
0EE6                START1:      
0EE6   21 0E 24               LD   hl,titleBuf   
0EE9   CD 3E 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EEC                INTERPRET:      
0EEC   CD 75 0E               CALL   prompt   
0EEF   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EF2   21 00 21               LD   hl,TIB   
0EF5   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EF8                INTERPRET2:      ; calculate nesting
0EF8   1E 00                  LD   e,0   ; initilize nesting value
0EFA   C5                     PUSH   bc   ; save offset into TIB,
0EFB                             ; bc is also the count of chars in TIB
0EFB   21 00 21               LD   hl,TIB   ; hl is start of TIB
0EFE   18 0B                  JR   interpret4   
0F00                INTERPRET3:      
0F00   3E 33                  LD   a,"3"   
0F02   CD 85 00               CALL   putchar   
0F05   7E                     LD   a,(hl)   ; a = char in TIB
0F06   23                     INC   hl   ; inc pointer into TIB
0F07   0B                     DEC   bc   ; dec count of chars in TIB
0F08   CD 43 0E               CALL   nesting   ; update nesting value
0F0B                INTERPRET4:      
0F0B   79                     LD   a,c   ; is count zero?
0F0C   B0                     OR   b   
0F0D   20 F1                  JR   nz,interpret3   ; if not loop
0F0F   C1                     POP   bc   ; restore offset into TIB
0F10                INTERPRET5:      
0F10   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F13   FE 20                  CP   $20   ; compare to space
0F15   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F17   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F19                             ; ???? NEEDED?
0F19   28 36                  JR   z,interpret8   
0F1B   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F1D   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F1F   FE 05                  CP   CTRL_E   
0F21   CA AF 0F               JP   z,edit_   
0F24   FE 08                  CP   CTRL_H   
0F26   CA 9F 0F               JP   z,backSpace_   
0F29   FE 0A                  CP   CTRL_J   
0F2B   CA C7 0F               JP   z,reEdit_   
0F2E                             ; cp CTRL_S
0F2E                             ; jp z,printStack_
0F2E                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F2E                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F2E                             ; DB     lsb(list_)       ; FF  ^L 12
0F2E                             ; DB     lsb(printStack_) ; DLE ^P 16
0F2E                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F2E                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F2E                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F2E                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F2E                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F2E                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F2E                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F2E                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F2E                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F2E                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F2E                INTERPRET5A:      
0F2E                             ; ld (vTIBPtr),bc
0F2E                             ; ld bc,(vTIBPtr)
0F2E   18 C8                  JR   interpret2   
0F30                INTERPRET6:      
0F30   21 00 21               LD   hl,TIB   
0F33   09                     ADD   hl,bc   
0F34   77                     LD   (hl),a   ; store the character in textbuf
0F35   03                     INC   bc   
0F36   CD 85 00               CALL   putchar   ; echo character to screen
0F39   CD 43 0E               CALL   nesting   
0F3C   18 D2                  JR   interpret5   ; wait for next character
0F3E                INTERPRET7:      
0F3E   21 00 21               LD   hl,TIB   
0F41   09                     ADD   hl,bc   
0F42   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F44   23                     INC   hl   
0F45   36 0A                  LD   (hl),"\n"   
0F47   23                     INC   hl   
0F48   03                     INC   bc   
0F49   03                     INC   bc   
0F4A   CD 7E 0E               CALL   crlf   ; echo character to screen
0F4D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F4E   B7                     OR   a   
0F4F   20 BF                  JR   nz,interpret5   
0F51                INTERPRET8:      
0F51   21 00 21               LD   hl,TIB   
0F54   09                     ADD   hl,bc   
0F55   22 EA 23               LD   (vTIBPtr),hl   
0F58   01 00 21               LD   bc,TIB   
0F5B   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F5F   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F63   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F67   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F6B   0B                     DEC   bc   
0F6C                NEXT:        
0F6C   03                     INC   bc   ; Increment the IP
0F6D   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F6E   FE 20                  CP   " "   ; whitespace?
0F70   28 FA                  JR   z,next   ; space? ignore
0F72   38 08                  JR   c,next1   
0F74   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F76   6F                     LD   l,a   ; index into table
0F77   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F79   6E                     LD   l,(hl)   ; get low jump address
0F7A   24                     INC   h   ; Load h with page after opcodes
0F7B   E9                     JP   (hl)   ; Jump to routine
0F7C                NEXT1:       
0F7C   FE 00                  CP   NUL   ; end of input string?
0F7E   28 03                  JR   z,exit   
0F80   C3 EC 0E               JP   interpret   ; no, other whitespace, macros?
0F83                EXIT:        
0F83   03                     INC   bc   
0F84   60 69                  LD   hl,bc   
0F86   E9                     JP   (hl)   
0F87                RUN:         
0F87   C1                     POP   bc   
0F88   0B                     DEC   bc   
0F89   DD E9                  JP   (ix)   
0F8B                ERROR:       
0F8B   E5                     PUSH   hl   
0F8C   CD 87 0F               CALL   run   
0F8F   60 45 72 72 6F 72 20 60 2E 73 20 2E 00 DB   "`Error `.s .",0   
0F9C   C3 EC 0E               JP   interpret   
0F9F                BACKSPACE_:      
0F9F   79                     LD   a,c   
0FA0   B0                     OR   b   
0FA1   CA F8 0E               JP   z,interpret2   
0FA4   0B                     DEC   bc   
0FA5   CD 85 0E               CALL   printStr   
0FA8   08 20 08 00            .CSTR   "\b \b"   
0FAC   C3 F8 0E               JP   interpret2   
0FAF                             ; edit
0FAF                EDIT_:       
0FAF   CD 87 0F               CALL   run   
0FB2   60 76 61 72 3F 60 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?`.s /k/ad .h",0   
0FC4   C3 EC 0E               JP   interpret   
0FC7                REEDIT_:      
0FC7   C3 EC 0E               JP   interpret   
0FCA                PRINTSTACK_:      
0FCA   CD 87 0F               CALL   run   
0FCD   2F 70 6B 00            .CSTR   "/pk"   
0FD1   C3 EC 0E               JP   interpret   
0FD4                             ; editDef:
0FD4                             ;     pop hl                      ; pop ret address
0FD4                             ;     ex (sp),hl                  ; swap with TOS
0FD4                             ;     push hl                     ; dup TOS
0FD4                             ;     ld a,l                      ; a = ident
0FD4                             ;     ld de,TIB                   ; de = start of TIB
0FD4                             ;     ld (vTIBPtr),de             ; update TIB*
0FD4                             ;     push ix                     ; save NEXT
0FD4                             ;     ld ix,editDef0              ; NEXT = editDef0
0FD4                             ;     jp lookupRef                ; convert letter into address
0FD4                             ; editDef0:
0FD4                             ;     ld e,(hl)                   ; de = (hl++)
0FD4                             ;     inc hl
0FD4                             ;     ld d,(hl)
0FD4                             ;     ld a,d                      ; de == 0 ?
0FD4                             ;     or e
0FD4                             ;     jr z,editDef4
0FD4                             ;     ld ix,editDef3              ; NEXT = editDef3
0FD4                             ;     ex de,hl
0FD4                             ;     ld a,(hl)
0FD4                             ;     cp "{"
0FD4                             ;     jr nz,editDef1
0FD4                             ;     jp editBlock0               ; convert letter into address
0FD4                             ; editDef1:
0FD4                             ;     cp "("
0FD4                             ;     jr nz,editDef2
0FD4                             ;     jp editBlock0               ; convert letter into address
0FD4                             ; editDef2:
0FD4                             ;     jp editFunc
0FD4                             ; editDef3:
0FD4                             ;     ld a," "                    ; write assign
0FD4                             ;     call writeChar
0FD4                             ;     pop hl                      ; a = ident
0FD4                             ;     ld a,l
0FD4                             ;     call writeChar
0FD4                             ;     ld a,"="                    ; write assign
0FD4                             ;     call writeChar
0FD4                             ;     ld ix,editDef4              ; NEXT = editDef4
0FD4                             ;     jp printTIB
0FD4                             ; editDef4:
0FD4                             ;     pop ix                      ; restore NEXT
0FD4                             ;     jp (ix)
0FD4                             ; writeChar:
0FD4                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FD4                             ;     ld (de),a                   ; write ident
0FD4                             ;     inc de
0FD4                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FD4                             ;     ret
0FD4                             ; ; printTIB
0FD4                             ; printTIB:
0FD4                             ;     ld hl,(vTIBPtr)
0FD4                             ;     ld de,TIB
0FD4                             ;     or a
0FD4                             ;     sbc hl,de
0FD4                             ;     jp printTIB2
0FD4                             ; printTIB1:
0FD4                             ;     ld a,(de)
0FD4                             ;     call putchar
0FD4                             ; printTIB2:
0FD4                             ;     ld a,l
0FD4                             ;     or h
0FD4                             ;     jr nz,printTIB1
0FD4                             ;     jp (ix)
0FD4                             ; editBlock:
0FD4                             ;     pop hl                      ; hl = block*
0FD4                             ; editBlock0:
0FD4                             ;     push ix                     ; save next
0FD4                             ;     push hl                     ; push block*
0FD4                             ;     push hl                     ; push block*
0FD4                             ;     ld ix,(editBlock2)
0FD4                             ;     jp blockLength
0FD4                             ; editBlock1:
0FD4                             ;     pop hl                      ; bc = length, (sp) = IP
0FD4                             ;     pop de                      ; de = block*
0FD4                             ;     ld a,l
0FD4                             ;     or h
0FD4                             ;     jr z,editBlock2
0FD4                             ;     push bc
0FD4                             ;     ld bc,hl
0FD4                             ;     ex de,hl                    ; hl = block*
0FD4                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FD4                             ;     ldir                        ; copy block to TIB
0FD4                             ;     ld (vTIBPtr),de              ; save TIB*
0FD4                             ;     pop bc
0FD4                             ; editBlock2:
0FD4                             ;     pop ix                      ; restore next
0FD4                             ;     jp (ix)
0FD4                             ; editFunc:
0FD4                             ;     jp (ix)
0FD4                             ; editArray:
0FD4                             ;     jp (ix)
0FD4                             ; editparseArgs:
0FD4                             ;     jp (ix)
0FD4                             ; ; blockLength
0FD4                             ; ; addr1 -- length
0FD4                             ; blockLength:
0FD4                             ;     pop hl                      ; block*
0FD4                             ;     push hl                     ; save block*
0FD4                             ;     inc hl                      ; skip first char
0FD4                             ;     ld d,1                      ; increase nesting
0FD4                             ; blockLength1:                   ; Skip to end of definition
0FD4                             ;     ld a,(hl)                   ; Get the next character
0FD4                             ;     inc hl                      ; Point to next character
0FD4                             ;     cp " " + 1                  ; ignore whitespace
0FD4                             ;     jr c,blockLength1
0FD4                             ;     cp ")"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "}"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "]"
0FD4                             ;     jr z,blockLength4
0FD4                             ;     cp "("
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "{"
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "["
0FD4                             ;     jr z,blockLength2
0FD4                             ;     cp "'"
0FD4                             ;     jr z,blockLength3
0FD4                             ;     cp "`"
0FD4                             ;     jr z,blockLength3
0FD4                             ;     cp DQ
0FD4                             ;     jr z,blockLength3
0FD4                             ;     jr blockLength1
0FD4                             ; blockLength2:
0FD4                             ;     inc d
0FD4                             ;     jr blockLength1
0FD4                             ; blockLength4:
0FD4                             ;     dec d
0FD4                             ;     jr nz, blockLength1         ; get the next element
0FD4                             ; blockLength3:
0FD4                             ;     ld a,$80
0FD4                             ;     xor d
0FD4                             ;     ld d,a
0FD4                             ;     jr nz, blockLength1
0FD4                             ;     pop hl                      ; hl = block*
0FD4                             ;     or a
0FD4                             ;     sbc hl,de
0FD4                             ;     push hl
0FD4                             ;     jp (ix)
0FD4                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FD4                             ; \a start of stack \#3 depth \b base \$ prompt
0FD4                             ; DW dStack               ; a vS0 start of datastack			
0FD4                             ; DW FALSE                ; b vBase16
0FD4                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FD4                             ; DW 0                    ; d
0FD4                             ; DW 65                   ; e vLastDef "A" last command u defined
0FD4                             ; DW 0                    ; f
0FD4                             ; DW page6                ; g 256 bytes limits
0FD4                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FD4                F1:          
0FD4                F2:          
0FD4                F3:          
0FD4                F4:          
0FD4                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VSTRPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1279 IN MAIN.asm
                    > USED AT LINE 2407 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1633 IN MAIN.asm
                    > USED AT LINE 2245 IN MAIN.asm
                    > USED AT LINE 2391 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1645 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 1059 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1158 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 1376 IN MAIN.asm
                    > USED AT LINE 1393 IN MAIN.asm
                    > USED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2264 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2416 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2345 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2320 IN MAIN.asm
                    > USED AT LINE 2339 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 685 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 500 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0_:               0364 DEFINED AT LINE 502 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
DIV:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
DIVIDE:             0433 DEFINED AT LINE 690 IN MAIN.asm
                    > USED AT LINE 681 IN MAIN.asm
DIVIDE1:            0438 DEFINED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
DIVIDE2:            0445 DEFINED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
DIVIDE3:            0446 DEFINED AT LINE 703 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
NUM:                044C DEFINED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               0455 DEFINED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
NUM1:               0456 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
NUM2:               046E DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
NUM3:               0479 DEFINED AT LINE 745 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
QUOTE:              047C DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             047C DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             047C DEFINED AT LINE 753 IN MAIN.asm
STRING1:            0487 DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 770 IN MAIN.asm
STRING2:            048A DEFINED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 761 IN MAIN.asm
STRING3:            0490 DEFINED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 769 IN MAIN.asm
PERCENT:            04A6 DEFINED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                04A6 DEFINED AT LINE 793 IN MAIN.asm
ARG0:               04C2 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
ARG0A:              04CB DEFINED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
ARG1:               04D0 DEFINED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
ARG1A:              04D8 DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 822 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTNUMBER_:         050F DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
DOTDEC:             051A DEFINED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
DOTDEC0:            052F DEFINED AT LINE 877 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
DOTDEC1:            053F DEFINED AT LINE 891 IN MAIN.asm
                    > USED AT LINE 879 IN MAIN.asm
DOTDEC2:            055F DEFINED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
DOTDEC3:            0561 DEFINED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
DOTDEC4:            0571 DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
DOTDEC5:            0572 DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 918 IN MAIN.asm
DOTHEX:             0578 DEFINED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 858 IN MAIN.asm
DOTHEX1:            0594 DEFINED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
DOTHEX2:            059D DEFINED AT LINE 955 IN MAIN.asm
                    > USED AT LINE 953 IN MAIN.asm
DOTSTRING_:         05A8 DEFINED AT LINE 967 IN MAIN.asm
DOTSTRING0:         05AF DEFINED AT LINE 971 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
DOTSTRING1:         05B2 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
DOTCHAR_:           05BD DEFINED AT LINE 984 IN MAIN.asm
DOTXCHARS_:         05C2 DEFINED AT LINE 990 IN MAIN.asm
DOTXCHARS0:         05C3 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
DOTXCHARS1:         05CC DEFINED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
DOTXCHARS2:         05D1 DEFINED AT LINE 1004 IN MAIN.asm
                    > USED AT LINE 997 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 1017 IN MAIN.asm
COMMAND_M_:         0626 DEFINED AT LINE 1053 IN MAIN.asm
COMMAND_P_:         0629 DEFINED AT LINE 1057 IN MAIN.asm
COMMAND_Q_:         0630 DEFINED AT LINE 1063 IN MAIN.asm
COMMAND_R_:         0639 DEFINED AT LINE 1071 IN MAIN.asm
COMMAND_S_:         063C DEFINED AT LINE 1075 IN MAIN.asm
COMMAND_V_:         063F DEFINED AT LINE 1079 IN MAIN.asm
COMMAND_NOP_:       0642 DEFINED AT LINE 1083 IN MAIN.asm
DECIMAL_:           0644 DEFINED AT LINE 1087 IN MAIN.asm
DECIMAL1:           0647 DEFINED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
DIV_:               064C DEFINED AT LINE 1094 IN MAIN.asm
ERROR1_:            0650 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
HEXADECIMAL_:       0656 DEFINED AT LINE 1104 IN MAIN.asm
TRUE_:              065C DEFINED AT LINE 1109 IN MAIN.asm
WORDS_:             065F DEFINED AT LINE 1113 IN MAIN.asm
ADDROF_:            0662 DEFINED AT LINE 1117 IN MAIN.asm
ARRAYITER_:         0665 DEFINED AT LINE 1121 IN MAIN.asm
COLDSTART_:         0668 DEFINED AT LINE 1126 IN MAIN.asm
WORDS:              066B DEFINED AT LINE 1131 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
COMMENT:            0671 DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1141 IN MAIN.asm
BYTES_:             067A DEFINED AT LINE 1147 IN MAIN.asm
                    > USED AT LINE 1169 IN MAIN.asm
BYTES1:             067D DEFINED AT LINE 1149 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
COMMAND_I_:         0682 DEFINED AT LINE 1154 IN MAIN.asm
COMMAND_B_:         068B DEFINED AT LINE 1162 IN MAIN.asm
BREAK_:             0696 DEFINED AT LINE 1174 IN MAIN.asm
BREAK:              0696 DEFINED AT LINE 1175 IN MAIN.asm
BREAK1:             069D DEFINED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
QUIT_:              06B0 DEFINED AT LINE 1195 IN MAIN.asm
QUIT1:              06B7 DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1199 IN MAIN.asm
INPUT_:             06BA DEFINED AT LINE 1207 IN MAIN.asm
ARRAYSIZE_:         06C5 DEFINED AT LINE 1220 IN MAIN.asm
XOR_:               06CD DEFINED AT LINE 1230 IN MAIN.asm
XOR1:               06CE DEFINED AT LINE 1232 IN MAIN.asm
COMMAND_A_:         06D8 DEFINED AT LINE 1244 IN MAIN.asm
ABSOLUTE_:          06E7 DEFINED AT LINE 1260 IN MAIN.asm
KEY_:               06F4 DEFINED AT LINE 1277 IN MAIN.asm
KEY:                06F4 DEFINED AT LINE 1278 IN MAIN.asm
OUTPUT_:            06FD DEFINED AT LINE 1287 IN MAIN.asm
COMMAND_F_:         06FF DEFINED AT LINE 1291 IN MAIN.asm
OUTPUT:             0701 DEFINED AT LINE 1301 IN MAIN.asm
                    > USED AT LINE 1288 IN MAIN.asm
COMMAND_F:          070A DEFINED AT LINE 1310 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
FOREACH_:           0721 DEFINED AT LINE 1331 IN MAIN.asm
FILTER_:            0724 DEFINED AT LINE 1334 IN MAIN.asm
FOLD_:              0727 DEFINED AT LINE 1337 IN MAIN.asm
FUNCSRC_:           072A DEFINED AT LINE 1340 IN MAIN.asm
F1_:                072D DEFINED AT LINE 1343 IN MAIN.asm
F2_:                0730 DEFINED AT LINE 1346 IN MAIN.asm
F3_:                0733 DEFINED AT LINE 1349 IN MAIN.asm
F4_:                0736 DEFINED AT LINE 1352 IN MAIN.asm
FALSE_:             0739 DEFINED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
COMMAND_M:          073C DEFINED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
MAP_:               0745 DEFINED AT LINE 1365 IN MAIN.asm
COMMAND_R:          0748 DEFINED AT LINE 1368 IN MAIN.asm
                    > USED AT LINE 1072 IN MAIN.asm
RECUR_:             0755 DEFINED AT LINE 1379 IN MAIN.asm
REMAIN_:            075B DEFINED AT LINE 1384 IN MAIN.asm
COMMAND_S:          0761 DEFINED AT LINE 1389 IN MAIN.asm
                    > USED AT LINE 1076 IN MAIN.asm
STRINGITER_:        076A DEFINED AT LINE 1396 IN MAIN.asm
RANGESRC_:          076D DEFINED AT LINE 1399 IN MAIN.asm
COMMAND_V:          0770 DEFINED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
CONSTHEAPSTART_:    077F DEFINED AT LINE 1415 IN MAIN.asm
CONSTTIBSTART_:     0784 DEFINED AT LINE 1419 IN MAIN.asm
VARHEAPPTR_:        0789 DEFINED AT LINE 1423 IN MAIN.asm
VARTIBPTR_:         0792 DEFINED AT LINE 1428 IN MAIN.asm
VARIABLE:           079B DEFINED AT LINE 1433 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
CONSTANT:           079E DEFINED AT LINE 1435 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
RANGESRC:           07A1 DEFINED AT LINE 32
                    > USED AT LINE 1400 IN MAIN.asm
RANGESRCM_1846S1448: 07B0 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          081D DEFINED AT LINE 32
                    > USED AT LINE 1122 IN MAIN.asm
ARRAYITERM_1865S1468: 082A DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         089E DEFINED AT LINE 32
                    > USED AT LINE 1397 IN MAIN.asm
STRINGITERM_1884S1488: 08AB DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                0924 DEFINED AT LINE 32
                    > USED AT LINE 1366 IN MAIN.asm
MAPM_1904S1510:     0931 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             0966 DEFINED AT LINE 32
                    > USED AT LINE 1335 IN MAIN.asm
FILTERM_1918S1525:  0974 DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09C4 DEFINED AT LINE 32
                    > USED AT LINE 1338 IN MAIN.asm
FOLDM_1937S1545:    09D3 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A16 DEFINED AT LINE 32
                    > USED AT LINE 1332 IN MAIN.asm
FOREACHM_1951S1560: 0A24 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A62 DEFINED AT LINE 32
                    > USED AT LINE 1341 IN MAIN.asm
FUNCSRCM_1965S1575: 0A6E DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0A9B DEFINED AT LINE 32
DOTARRAYM_1975S1586: 0AA9 DEFINED AT LINE 39
                    > USED AT LINE 35
UNDERSCORE:         0AE3 DEFINED AT LINE 1596 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0AE3 DEFINED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
GRAVE:              0AE5 DEFINED AT LINE 1604 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        0AE5 DEFINED AT LINE 1605 IN MAIN.asm
PRINTSTRING0:       0AEC DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
PRINTSTRING1:       0AEF DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
DOTNEXT:            0AFB DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 1009 IN MAIN.asm
                    > USED AT LINE 1618 IN MAIN.asm
DOTNEXT1:           0B03 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
DOTNEXT2:           0B10 DEFINED AT LINE 1631 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
DOTNEXT3:           0B16 DEFINED AT LINE 1636 IN MAIN.asm
                    > USED AT LINE 1630 IN MAIN.asm
STRINGMODEENTER:    0B22 DEFINED AT LINE 1644 IN MAIN.asm
STRINGMODEEXIT:     0B2D DEFINED AT LINE 1650 IN MAIN.asm
STRINGMODEEXIT1:    0B41 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
ADDROF:             0B46 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
ADDROF1:            0B5A DEFINED AT LINE 1678 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
ADDROF2:            0B65 DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 1670 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
RBRACK:             0B67 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B67 DEFINED AT LINE 1693 IN MAIN.asm
ARRAYEND1:          0B83 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
ARRAYEND2:          0B93 DEFINED AT LINE 1720 IN MAIN.asm
                    > USED AT LINE 1716 IN MAIN.asm
ARRAYEND3:          0B98 DEFINED AT LINE 1724 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
RBRACE:             0BBA DEFINED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0BBA DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
BLOCKEND1:          0BEC DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1763 IN MAIN.asm
BLOCKEND2:          0BF8 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1769 IN MAIN.asm
BLOCKEND3:          0C0A DEFINED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
BLOCKEND4:          0C1E DEFINED AT LINE 1801 IN MAIN.asm
                    > USED AT LINE 1799 IN MAIN.asm
CARET:              0C27 DEFINED AT LINE 1809 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0C27 DEFINED AT LINE 1810 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0C28 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
GO2:                0C2E DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
GOBLOCK:            0C39 DEFINED AT LINE 1824 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
GOBLOCK2:           0C5E DEFINED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
GOBLOCK3:           0C68 DEFINED AT LINE 1847 IN MAIN.asm
GOFUNC:             0C6C DEFINED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1822 IN MAIN.asm
GOFUNC1:            0C85 DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1880 IN MAIN.asm
GOFUNC2:            0C8B DEFINED AT LINE 1877 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
GOFUNC3:            0C96 DEFINED AT LINE 1883 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
GOFUNC4:            0CAE DEFINED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
GOFUNC5:            0CB1 DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
GOFUNC6:            0CB4 DEFINED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
GOFUNC7:            0CB7 DEFINED AT LINE 1910 IN MAIN.asm
GOFUNC8:            0CBB DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
PARSEARGS:          0CC6 DEFINED AT LINE 1932 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CD0 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
PARSEARGS1A:        0CD8 DEFINED AT LINE 1945 IN MAIN.asm
                    > USED AT LINE 1942 IN MAIN.asm
PARSEARGS2:         0CE0 DEFINED AT LINE 1950 IN MAIN.asm
PARSEARGS3:         0CE8 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1956 IN MAIN.asm
PARSEARGS4:         0CEB DEFINED AT LINE 1961 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
PARSEARGS5:         0CF1 DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 1965 IN MAIN.asm
PARSEBLOCK:         0CFF DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0D03 DEFINED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
PARSEBLOCK2:        0D2F DEFINED AT LINE 2012 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
PARSEBLOCK3:        0D32 DEFINED AT LINE 2015 IN MAIN.asm
                    > USED AT LINE 2006 IN MAIN.asm
                    > USED AT LINE 2008 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
PARSEBLOCK4:        0D3A DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
PARSEBLOCK5:        0D3D DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
PARSEBLOCK6:        0D69 DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
CREATEFUNC:         0D6D DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D8C DEFINED AT LINE 2066 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
CREATEFUNC1:        0DA4 DEFINED AT LINE 2085 IN MAIN.asm
                    > USED AT LINE 2081 IN MAIN.asm
CREATEFUNC2:        0DB7 DEFINED AT LINE 2098 IN MAIN.asm
                    > USED AT LINE 2094 IN MAIN.asm
CREATEFUNC2A:       0DD6 DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
CREATEFUNC3:        0DE5 DEFINED AT LINE 2136 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
CREATEFUNC4:        0DF0 DEFINED AT LINE 2147 IN MAIN.asm
CREATEFUNC5:        0DF1 DEFINED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2065 IN MAIN.asm
COMMANDTABLE:       0E12 DEFINED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 1023 IN MAIN.asm
COMMANDTABLE1:      0E1C DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2216 IN MAIN.asm
COMMANDTABLE2:      0E21 DEFINED AT LINE 2213 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
                    > USED AT LINE 2206 IN MAIN.asm
JUMPTABLE:          0E26 DEFINED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1155 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1390 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
JUMPTABLE0:         0E28 DEFINED AT LINE 2225 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
JUMPTABLE1:         0E34 DEFINED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2231 IN MAIN.asm
JUMPTABLE2:         0E37 DEFINED AT LINE 2239 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
PRTSTR0:            0E3A DEFINED AT LINE 2244 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
PRTSTR:             0E3E DEFINED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2314 IN MAIN.asm
                    > USED AT LINE 2371 IN MAIN.asm
NESTING:            0E43 DEFINED AT LINE 2263 IN MAIN.asm
                    > USED AT LINE 2396 IN MAIN.asm
                    > USED AT LINE 2454 IN MAIN.asm
NESTING0:           0E4D DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2265 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
NESTING1A:          0E54 DEFINED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2271 IN MAIN.asm
NESTING1:           0E57 DEFINED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2268 IN MAIN.asm
NESTING2:           0E66 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2281 IN MAIN.asm
                    > USED AT LINE 2283 IN MAIN.asm
NESTING3:           0E68 DEFINED AT LINE 2289 IN MAIN.asm
                    > USED AT LINE 2285 IN MAIN.asm
NESTING4:           0E73 DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 2291 IN MAIN.asm
                    > USED AT LINE 2293 IN MAIN.asm
PROMPT:             0E75 DEFINED AT LINE 2300 IN MAIN.asm
                    > USED AT LINE 2375 IN MAIN.asm
CRLF:               0E7E DEFINED AT LINE 2305 IN MAIN.asm
                    > USED AT LINE 2467 IN MAIN.asm
PRINTSTR:           0E85 DEFINED AT LINE 2312 IN MAIN.asm
                    > USED AT LINE 2301 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
                    > USED AT LINE 2524 IN MAIN.asm
INIT:               0E8C DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
INIT1:              0E94 DEFINED AT LINE 2323 IN MAIN.asm
                    > USED AT LINE 2329 IN MAIN.asm
WARMINIT:           0E9C DEFINED AT LINE 2331 IN MAIN.asm
COLDBOOT0:          0EAF DEFINED AT LINE 2338 IN MAIN.asm
                    > USED AT LINE 2326 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
COLDINIT:           0EB9 DEFINED AT LINE 2344 IN MAIN.asm
COLDBOOT1:          0ECA DEFINED AT LINE 2353 IN MAIN.asm
                    > USED AT LINE 2356 IN MAIN.asm
COLDSTART:          0ED7 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 1127 IN MAIN.asm
START:              0EE0 DEFINED AT LINE 2366 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EE6 DEFINED AT LINE 2369 IN MAIN.asm
                    > USED AT LINE 2336 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
INTERPRET:          0EEC DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 2500 IN MAIN.asm
                    > USED AT LINE 2515 IN MAIN.asm
                    > USED AT LINE 2532 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
INTERPRET2:         0EF8 DEFINED AT LINE 2381 IN MAIN.asm
                    > USED AT LINE 2445 IN MAIN.asm
                    > USED AT LINE 2522 IN MAIN.asm
                    > USED AT LINE 2526 IN MAIN.asm
INTERPRET3:         0F00 DEFINED AT LINE 2389 IN MAIN.asm
                    > USED AT LINE 2402 IN MAIN.asm
INTERPRET4:         0F0B DEFINED AT LINE 2398 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
INTERPRET5:         0F10 DEFINED AT LINE 2405 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
                    > USED AT LINE 2470 IN MAIN.asm
INTERPRET5A:        0F2E DEFINED AT LINE 2442 IN MAIN.asm
INTERPRET6:         0F30 DEFINED AT LINE 2447 IN MAIN.asm
                    > USED AT LINE 2409 IN MAIN.asm
INTERPRET7:         0F3E DEFINED AT LINE 2457 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
INTERPRET8:         0F51 DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
NEXT:               0F6C DEFINED AT LINE 2485 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2489 IN MAIN.asm
NEXT1:              0F7C DEFINED AT LINE 2497 IN MAIN.asm
                    > USED AT LINE 2490 IN MAIN.asm
EXIT:               0F83 DEFINED AT LINE 2502 IN MAIN.asm
                    > USED AT LINE 2499 IN MAIN.asm
RUN:                0F87 DEFINED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2513 IN MAIN.asm
                    > USED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2538 IN MAIN.asm
ERROR:              0F8B DEFINED AT LINE 2511 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1101 IN MAIN.asm
BACKSPACE_:         0F9F DEFINED AT LINE 2519 IN MAIN.asm
                    > USED AT LINE 2419 IN MAIN.asm
EDIT_:              0FAF DEFINED AT LINE 2529 IN MAIN.asm
                    > USED AT LINE 2417 IN MAIN.asm
REEDIT_:            0FC7 DEFINED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 2421 IN MAIN.asm
PRINTSTACK_:        0FCA DEFINED AT LINE 2537 IN MAIN.asm
F1:                 0FD4 DEFINED AT LINE 10
                    > USED AT LINE 1344 IN MAIN.asm
F2:                 0FD4 DEFINED AT LINE 11
                    > USED AT LINE 1347 IN MAIN.asm
F3:                 0FD4 DEFINED AT LINE 12
                    > USED AT LINE 1350 IN MAIN.asm
F4:                 0FD4 DEFINED AT LINE 13
                    > USED AT LINE 1353 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 2359 IN MAIN.asm
                    > USED AT LINE 2363 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
                    > USED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2459 IN MAIN.asm
                    > USED AT LINE 2474 IN MAIN.asm
                    > USED AT LINE 2477 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1680 IN MAIN.asm
                    > USED AT LINE 2350 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2346 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1429 IN MAIN.asm
                    > USED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 2379 IN MAIN.asm
                    > USED AT LINE 2476 IN MAIN.asm
VSTRPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
                    > USED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1607 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
                    > USED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2358 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 754 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 1424 IN MAIN.asm
                    > USED AT LINE 1425 IN MAIN.asm
                    > USED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
                    > USED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1741 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1381 IN MAIN.asm
                    > USED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 1803 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 1434 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 683 IN MAIN.asm
                    > USED AT LINE 1385 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2332 IN MAIN.asm
                    > USED AT LINE 2479 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2480 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2334 IN MAIN.asm
                    > USED AT LINE 2481 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2482 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1696 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
                    > USED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
                    > USED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 2043 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2168 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1794 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2157 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2321 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 2026 IN MAIN.asm
