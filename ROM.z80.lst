0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0B               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0B               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0B               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0B               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0B               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0B               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0B               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0B               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0B               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0B               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0A               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0B               LD   (RST08),HL   
0094   22 D2 0B               LD   (RST10),HL   
0097   22 D4 0B               LD   (RST18),HL   
009A   22 D6 0B               LD   (RST20),HL   
009D   22 D8 0B               LD   (RST28),HL   
00A0   22 DA 0B               LD   (RST30),HL   
00A3   22 DE 0B               LD   (INTVEC),HL   
00A6   22 E0 0B               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0B               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0B               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 0A               LD   SP,STACK   
00C6   CD C7 08               CALL   init   
00C9   C3 E5 08               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; ScopeBP                           -- first_arg
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   52 09                  DW   next   ; g nNext
0186   00 0E                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available , ;
0220   A5                     DB   lsb(nop_)   ; SP
0221   42                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   4A                     DB   lsb(hexnum_)   ; #
0224   0C                     DB   lsb(arg_)   ; $
0225   18                     DB   lsb(arrIndex_)   ; %
0226   09                     DB   lsb(and_)   ; &
0227   21                     DB   lsb(char_)   ; '
0228   0F                     DB   lsb(arg_list_)   ; (
0229   A5                     DB   lsb(nop_)   ; )
022A   3F                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(add_)   ; +
022C   A5                     DB   lsb(nop_)   ; ,
022D   56                     DB   lsb(sub_)   ; -
022E   27                     DB   lsb(dot_)   ; .
022F   96                     DB   lsb(div_)   ; /	
0230   47                     DB   lsb(num_)   ; 0
0231   47                     DB   lsb(num_)   ; 1
0232   47                     DB   lsb(num_)   ; 2
0233   47                     DB   lsb(num_)   ; 3
0234   47                     DB   lsb(num_)   ; 4
0235   47                     DB   lsb(num_)   ; 5
0236   47                     DB   lsb(num_)   ; 6
0237   47                     DB   lsb(num_)   ; 7
0238   47                     DB   lsb(num_)   ; 8
0239   47                     DB   lsb(num_)   ; 9
023A   2D                     DB   lsb(go_)   ; :
023B   A5                     DB   lsb(nop_)   ; ;
023C   84                     DB   lsb(lt_)   ; <
023D   6A                     DB   lsb(eq_)   ; =
023E   79                     DB   lsb(gt_)   ; >
023F   36                     DB   lsb(if_)   ; ?
0240   06                     DB   lsb(addr_)   ; @
0241   30                     DB   lsb(identU_)   ; A
0242   30                     DB   lsb(identU_)   ; B
0243   30                     DB   lsb(identU_)   ; C
0244   30                     DB   lsb(identU_)   ; D
0245   30                     DB   lsb(identU_)   ; E
0246   30                     DB   lsb(identU_)   ; F
0247   30                     DB   lsb(identU_)   ; G
0248   30                     DB   lsb(identU_)   ; h
0249   30                     DB   lsb(identU_)   ; I
024A   30                     DB   lsb(identU_)   ; J
024B   30                     DB   lsb(identU_)   ; K
024C   30                     DB   lsb(identU_)   ; L
024D   30                     DB   lsb(identU_)   ; M
024E   30                     DB   lsb(identU_)   ; N
024F   30                     DB   lsb(identU_)   ; O
0250   30                     DB   lsb(identU_)   ; p
0251   30                     DB   lsb(identU_)   ; Q
0252   30                     DB   lsb(identU_)   ; R
0253   30                     DB   lsb(identU_)   ; S
0254   30                     DB   lsb(identU_)   ; T
0255   30                     DB   lsb(identU_)   ; U
0256   30                     DB   lsb(identU_)   ; V
0257   30                     DB   lsb(identU_)   ; W
0258   30                     DB   lsb(identU_)   ; X
0259   30                     DB   lsb(identU_)   ; Y
025A   30                     DB   lsb(identU_)   ; Z
025B   12                     DB   lsb(arrBegin_)   ; [
025C   24                     DB   lsb(command_)   ; \
025D   15                     DB   lsb(arrEnd_)   ; ]
025E   50                     DB   lsb(xor_)   ; ^
025F   2A                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   33                     DB   lsb(identL_)   ; a
0262   33                     DB   lsb(identL_)   ; b
0263   33                     DB   lsb(identL_)   ; c
0264   33                     DB   lsb(identL_)   ; d
0265   33                     DB   lsb(identL_)   ; e
0266   33                     DB   lsb(identL_)   ; f
0267   33                     DB   lsb(identL_)   ; g
0268   33                     DB   lsb(identL_)   ; h
0269   33                     DB   lsb(identL_)   ; i
026A   33                     DB   lsb(identL_)   ; j
026B   33                     DB   lsb(identL_)   ; k
026C   33                     DB   lsb(identL_)   ; l
026D   33                     DB   lsb(identL_)   ; m
026E   33                     DB   lsb(identL_)   ; n
026F   33                     DB   lsb(identL_)   ; o
0270   33                     DB   lsb(identL_)   ; p
0271   33                     DB   lsb(identL_)   ; q
0272   33                     DB   lsb(identL_)   ; r
0273   33                     DB   lsb(identL_)   ; s
0274   33                     DB   lsb(identL_)   ; t
0275   33                     DB   lsb(identL_)   ; u
0276   33                     DB   lsb(identL_)   ; v
0277   33                     DB   lsb(identL_)   ; w
0278   33                     DB   lsb(identL_)   ; x
0279   33                     DB   lsb(identL_)   ; y
027A   33                     DB   lsb(identL_)   ; z
027B   1B                     DB   lsb(block_)   ; {
027C   4D                     DB   lsb(or_)   ; |
027D   1E                     DB   lsb(blockEnd_)   ; }
027E   39                     DB   lsb(inv_)   ; ~
027F   A5                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                ADD_:        ; add the top 2 members of the stack
0300   D1                     POP   de   
0301   E1                     POP   hl   
0302   19                     ADD   hl,de   
0303   E5                     PUSH   hl   
0304   DD E9                  JP   (ix)   
0306                ADDR_:       
0306   C3 A7 03               JP   addr   
0309                AND_:        
0309   C3 B3 03               JP   and   
030C                ARG_:        
030C   C3 D0 03               JP   arg   
030F                ARG_LIST_:      
030F   C3 07 04               JP   arg_list   
0312                ARRBEGIN_:      
0312   C3 39 04               JP   arrBegin   
0315                ARREND_:      
0315   C3 55 04               JP   arrEnd   
0318                ARRINDEX_:      
0318   C3 A3 04               JP   arrIndex   
031B                BLOCK_:      
031B   C3 CB 04               JP   block   
031E                BLOCKEND_:      
031E   C3 34 05               JP   blockend   
0321                CHAR_:       
0321   C3 85 05               JP   char   
0324                COMMAND_:      
0324   C3 55 07               JP   command   
0327                DOT_:        
0327   C3 9A 05               JP   dot   
032A                REMAIN_:      
032A   C3 04 07               JP   remain   
032D                GO_:         
032D   C3 FE 05               JP   go   
0330                IDENTU_:      
0330   C3 88 06               JP   identU   
0333                IDENTL_:      
0333   C3 8D 06               JP   identL   
0336                IF_:         
0336   C3 9F 06               JP   if   
0339                INV_:        ; Bitwise INVert the top member of the stack
0339   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
033C   C3 C8 03               JP   xor1   
033F                MUL_:        
033F   C3 B8 06               JP   mul   
0342                NOT_:        ; logical invert, any non zero value
0342   21 00 00               LD   hl,0   ; is considered true
0345   18 2E                  JR   eq1   
0347                NUM_:        
0347   C3 D4 06               JP   num   
034A                HEXNUM_:      
034A   C3 6B 06               JP   hexnum   
034D                OR_:         
034D   C3 BE 03               JP   or   
0350                XOR_:        
0350   C3 C7 03               JP   xor   
0353                STRING_:      
0353   C3 2D 07               JP   string   
0356                SUB_:        ; negative sign or subtract
0356   03                     INC   bc   ; check if sign of a number
0357   0A                     LD   a,(bc)   
0358   0B                     DEC   bc   
0359   FE 30                  CP   "0"   
035B   38 05                  JR   c,sub1   
035D   FE 3A                  CP   "9"+1   
035F   DA 47 03               JP   c,num_   
0362                SUB1:        ; Subtract the value 2nd on stack from top of stack
0362   D1                     POP   de   
0363   E1                     POP   hl   ; Entry point for INVert
0364                SUB2:        
0364   B7                     OR   a   ; Entry point for NEGate
0365   ED 52                  SBC   hl,de   
0367   E5                     PUSH   hl   
0368   DD E9                  JP   (ix)   
036A                EQ_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   ; is it == ?
036C   FE 3D                  CP   "="   
036E   28 04                  JR   z,eq0   ; no its equality
0370   0B                     DEC   bc   
0371   C3 BB 04               JP   assign   ; no its assignment
0374                EQ0:         
0374   E1                     POP   hl   
0375                EQ1:         
0375   D1                     POP   de   
0376   C3 DD 05               JP   equals   
0379                GT_:         
0379   03                     INC   bc   
037A   0A                     LD   a,(bc)   
037B   FE 3E                  CP   ">"   
037D   CA 1A 07               JP   z,shiftRight   
0380   D1                     POP   de   
0381   E1                     POP   hl   
0382   18 09                  JR   lt1   
0384                LT_:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 3C                  CP   "<"   
0388   CA 0A 07               JP   z,shiftLeft   
038B   E1                     POP   hl   
038C   D1                     POP   de   
038D                LT1:         
038D   FE 3D                  CP   "="   
038F   CA E5 05               JP   z,lessthaneq   
0392   0B                     DEC   bc   
0393   C3 EA 05               JP   lessthan   
0396                DIV_:        
0396   D1                     POP   de   ; get first value
0397   E1                     POP   hl   ; get 2nd value
0398   C5                     PUSH   bc   ; preserve the IP
0399   44 4D                  LD   bc,hl   
039B   CD C4 05               CALL   divide   
039E   22 F6 0B               LD   (vRemain),hl   
03A1   C1                     POP   bc   
03A2   D5                     PUSH   de   ; push result
03A3   DD E9                  JP   (ix)   
03A5                NOP_:        
03A5   DD E9                  JP   (ix)   
03A7                             ;*******************************************************************
03A7                             ; word operators
03A7                             ;*******************************************************************
03A7                             ; -- ptr
03A7                ADDR:        
03A7   2A F0 0B               LD   hl,(vPointer)   
03AA   E5                     PUSH   hl   
03AB   21 F0 0B               LD   hl,vPointer   
03AE   22 F0 0B               LD   (vPointer),hl   
03B1   DD E9                  JP   (ix)   
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                OR:          
03BE   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03BF   E1                     POP   hl   
03C0   7B                     LD   a,e   
03C1   B5                     OR   l   
03C2   6F                     LD   l,a   
03C3   7A                     LD   a,d   
03C4   B4                     OR   h   
03C5   18 F3                  JR   and1   
03C7                XOR:         
03C7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03C8                XOR1:        
03C8   E1                     POP   hl   
03C9   7B                     LD   a,e   
03CA   AD                     XOR   l   
03CB   6F                     LD   l,a   
03CC   7A                     LD   a,d   
03CD   AC                     XOR   h   
03CE   18 EA                  JR   and1   
03D0                             ; $a .. $z
03D0                             ; -- value
03D0                             ; returns value of arg
03D0                ARG:         
03D0   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03D3   FD 56 05               LD   d,(iy+5)   
03D6   EB                     EX   de,hl   
03D7   7D                     LD   a,l   ; arg_list* == null, skip
03D8   B4                     OR   h   
03D9   28 1C                  JR   z,arg0a   
03DB   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03DC   2B                     DEC   hl   
03DD   7E                     LD   a,(hl)   
03DE   23                     INC   hl   
03DF   23                     INC   hl   
03E0   B7                     OR   a   
03E1   28 14                  JR   z,arg0a   ; num_args == 0, skip
03E3   5F                     LD   e,a   ; e = a = num_args
03E4   03                     INC   bc   ; a = next char = arg_name
03E5   0A                     LD   a,(bc)   
03E6   C5                     PUSH   bc   ; save IP
03E7   43                     LD   b,e   ; b = e = num_args
03E8   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03EB   FD 56 03               LD   d,(iy+3)   
03EE                ARG0:        
03EE   1B                     DEC   de   ; a = arg_name, de = next arg*
03EF   1B                     DEC   de   
03F0   BE                     CP   (hl)   
03F1   28 09                  JR   z,arg1   
03F3   23                     INC   hl   ; hl = next arg_list*
03F4   10 F8                  DJNZ   arg0   
03F6   C1                     POP   bc   ; no match, restore IP
03F7                ARG0A:       
03F7   11 00 00               LD   de,0   ; return 0
03FA   18 08                  JR   arg1a   
03FC                ARG1:        
03FC   C1                     POP   bc   ; restore IP
03FD   EB                     EX   de,hl   ; hl = arg*
03FE   22 F0 0B               LD   (vPointer),hl   ; store arg* in setter
0401   5E                     LD   e,(hl)   
0402   23                     INC   hl   
0403   56                     LD   d,(hl)   ; de = arg
0404                ARG1A:       
0404   D5                     PUSH   de   ; push arg
0405   DD E9                  JP   (ix)   
0407                             ; arg_list - parses input (ab:c)
0407                             ; names after the : represent uninitialised locals
0407                             ; return values are the state of the stack after the block ends
0407                ARG_LIST:      
0407   11 00 00               LD   de,0   ; d = count locals, e = count args ()
040A   2A EC 0B               LD   hl,(vHeapPtr)   ; hl = heap*
040D   23                     INC   hl   ; skip length field to start
040E   23                     INC   hl   
040F   E5                     PUSH   hl   ; save start of arg_list
0410   03                     INC   bc   ; point to next char
0411                ARG_LIST1:      
0411   0A                     LD   a,(bc)   
0412   FE 29                  CP   ")"   ; ) is the arg_list terminator
0414   28 12                  JR   z,arg_list4   
0416   FE 3A                  CP   ":"   
0418   20 03                  JR   nz,arg_list2   
041A   14                     INC   d   ; non zero value local count acts as flag
041B   20 08                  JR   nz,arg_list3   
041D                ARG_LIST2:      
041D   77                     LD   (hl),a   
041E   23                     INC   hl   
041F   1C                     INC   e   ; increase arg count
0420   AF                     XOR   a   
0421   B2                     OR   d   
0422   28 01                  JR   z,arg_list3   
0424   14                     INC   d   ; if d > 0 increase local count
0425                ARG_LIST3:      
0425   03                     INC   bc   ; point to next char
0426   18 E9                  JR   arg_list1   
0428                ARG_LIST4:      
0428   AF                     XOR   a   
0429   B2                     OR   d   
042A   28 01                  JR   z,arg_list5   
042C   15                     DEC   d   ; remove initial inc
042D                ARG_LIST5:      
042D   23                     INC   hl   
042E   22 EC 0B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0431   E1                     POP   hl   ; hl = start of arg_list
0432   E5                     PUSH   hl   ; return start of string
0433   2B                     DEC   hl   ; write length bytes to length field at start - 2
0434   72                     LD   (hl),d   
0435   2B                     DEC   hl   
0436   73                     LD   (hl),e   
0437   DD E9                  JP   (ix)   
0439                             ; arrBegin:
0439                             ;     ld hl,(vHeapPtr)            ; hl = heap
0439                             ;     inc hl                      ; reserve space for size
0439                             ;     inc hl
0439                             ;     ld (vHeapPtr),hl            ; hl = array start
0439                             ;     push hl                     ; return start of array
0439                             ;     jp (ix)
0439                             ; arrEnd:
0439                             ;     pop de                      ; de = dup array start
0439                             ;     push de
0439                             ;     push bc                     ; save IP
0439                             ;     ld bc,de                    ; bc = de = array start
0439                             ;     ld hl,(vHeapPtr)            ; hl = array end
0439                             ;     or a                        ; de = array length
0439                             ;     sbc hl,de
0439                             ;     ex de,hl
0439                             ;     ld hl,bc                    ; hl = array start
0439                             ;     dec hl
0439                             ;     ld (hl),d
0439                             ;     dec hl
0439                             ;     ld (hl),e
0439                             ;     pop bc                      ; bc = IP
0439                             ;     jp (ix)
0439                             ; arrItem:
0439                             ;     pop de                      ; new value
0439                             ;     ld hl,(vHeapPtr)
0439                             ;     ld (hl),e
0439                             ;     inc hl
0439                             ;     ld a,(vDataWidth)
0439                             ;     dec a                       ; is it byte?
0439                             ;     jr z,arrItem1
0439                             ;     ld (hl),d
0439                             ;     inc hl
0439                             ; arrItem1:	
0439                             ;     ld (vHeapPtr),hl
0439                             ;     jp (ix)
0439                ARRBEGIN:      
0439   11 00 00               LD   de,0   ; create stack frame
043C   D5                     PUSH   de   ; push null for IP
043D   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0440   FD 56 05               LD   d,(iy+5)   ; 
0443   D5                     PUSH   de   ; 
0444   FD 5E 02               LD   e,(iy+2)   ; push ScopeBP from parent stack frame
0447   FD 56 03               LD   d,(iy+3)   ; 
044A   D5                     PUSH   de   ; 
044B   FD E5                  PUSH   iy   ; push BP
044D   FD 21 00 00            LD   iy,0   ; BP = SP
0451   FD 39                  ADD   iy,sp   
0453   DD E9                  JP   (ix)   
0455                ARREND:      
0455   FD 54                  LD   d,iyh   ; de = BP
0457   FD 5D                  LD   e,iyl   
0459   ED 43 F8 0B            LD   (vTemp1),bc   ; save IP
045D   62 6B                  LD   hl,de   ; hl = de = BP
045F   B7                     OR   a   
0460   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0462   CB 3C                  SRL   h   ; 
0464   CB 1D                  RR   l   
0466   44 4D                  LD   bc,hl   ; bc = count
0468   2A EC 0B               LD   hl,(vHeapPtr)   ; hl = array[-2]
046B   71                     LD   (hl),c   ; write num items in length word
046C   23                     INC   hl   
046D   70                     LD   (hl),b   
046E   23                     INC   hl   ; hl = array[0], bc = count
046F                             ; de = BP, hl = array[0], bc = count
046F                ARREND1:      
046F   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0472   77                     LD   (hl),a   ; write lsb of array item
0473   23                     INC   hl   ; move to msb of array item
0474   3A E6 0B               LD   a,(vDataWidth)   ; vDataWidth=1?
0477   3D                     DEC   a   
0478   28 05                  JR   z,arrEnd2   
047A   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
047D   77                     LD   (hl),a   ; write msb of array item
047E   23                     INC   hl   ; move to next word in array
047F                ARREND2:      
047F   FD 2B                  DEC   iy   ; move to next word on stack
0481   FD 2B                  DEC   iy   
0483   0B                     DEC   bc   ; dec items count
0484   79                     LD   a,c   ; if not zero loop
0485   B0                     OR   b   
0486   20 E7                  JR   nz,arrEnd1   
0488   EB                     EX   de,hl   ; de = end of array, hl = BP
0489   F9                     LD   sp,hl   ; sp = BP
048A   E1                     POP   hl   ; de = end of array, hl = old BP
048B   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
048C   FD 62                  LD   iyh,d   
048E   FD 6B                  LD   iyl,e   
0490   D1                     POP   de   ; pop arg_list (discard)
0491   D1                     POP   de   ; pop ScopeBP (discard)
0492   D1                     POP   de   ; pop IP (discard)
0493   ED 5B EC 0B            LD   de,(vHeapPtr)   ; de = array[-2]
0497   22 EC 0B               LD   (vHeapPtr),hl   ; move heap* to end of array
049A   ED 4B F8 0B            LD   bc,(vTemp1)   ; restore IP
049E   13                     INC   de   ; de = array[0]
049F   13                     INC   de   
04A0   D5                     PUSH   de   ; return array[0]
04A1   DD E9                  JP   (ix)   
04A3                             ; index of an array, based on vDataWidth
04A3                             ; array num -- value    ; also sets vPointer to address
04A3                ARRINDEX:      
04A3   E1                     POP   hl   ; hl = index
04A4   D1                     POP   de   ; de = array
04A5   3A E6 0B               LD   a,(vDataWidth)   ; a = data width
04A8   3D                     DEC   a   
04A9   28 01                  JR   z,arrIndex1   
04AB                ARRINDEX0:      
04AB   29                     ADD   hl,hl   ; if data width = 2 then double
04AC                ARRINDEX1:      
04AC   19                     ADD   hl,de   ; add addr
04AD   22 F0 0B               LD   (vPointer),hl   ; store address in setter
04B0   16 00                  LD   d,0   
04B2   5E                     LD   e,(hl)   
04B3   B7                     OR   a   ; check data width again
04B4   28 02                  JR   z,arrIndex2   
04B6   23                     INC   hl   
04B7   56                     LD   d,(hl)   
04B8                ARRINDEX2:      
04B8   D5                     PUSH   de   
04B9   DD E9                  JP   (ix)   
04BB                             ; value _oldValue --            ; uses address in vPointer
04BB                ASSIGN:      
04BB   E1                     POP   hl   ; discard last accessed value
04BC   D1                     POP   de   ; new value
04BD   2A F0 0B               LD   hl,(vPointer)   
04C0   73                     LD   (hl),e   
04C1   3A E6 0B               LD   a,(vDataWidth)   
04C4   3D                     DEC   a   ; is it byte?
04C5   28 02                  JR   z,assign1   
04C7   23                     INC   hl   
04C8   72                     LD   (hl),d   
04C9                ASSIGN1:      
04C9   DD E9                  JP   (ix)   
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   $22   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 0E               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 F8 0B            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EC 0B            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EC 0B            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B F8 0B            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                BLOCKEND:      
0534   D9                     EXX      
0535   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0538   FD 56 01               LD   d,(iy+1)   
053B   FD 4E 06               LD   c,(iy+6)   ; bc = IP
053E   FD 46 07               LD   b,(iy+7)   
0541   D9                     EXX      
0542   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0545   FD 56 03               LD   d,(iy+3)   
0548   EB                     EX   de,hl   
0549   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054C   FD 56 01               LD   d,(iy+1)   
054F                             ; ex de,hl                    ; de = first_arg*, hl = oldBP
054F   13                     INC   de   ; for carry flag <=
0550   B7                     OR   a   
0551   ED 52                  SBC   hl,de   
0553   38 0B                  JR   c,blockend1   ; oldBP >= first_arg, same scope skip
0555   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0557   FD 5D                  LD   e,iyl   
0559   21 08 00               LD   hl,8   
055C   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055D   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055E   18 0C                  JR   blockend2   
0560                BLOCKEND1:      ; same scope
0560   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0563   FD 56 03               LD   d,(iy+3)   
0566   EB                     EX   de,hl   
0567   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0569   FD 5D                  LD   e,iyl   
056B   EB                     EX   de,hl   
056C                BLOCKEND2:      
056C   44 4D                  LD   bc,hl   ; bc = hl = BP
056E   B7                     OR   a   ; hl = BP - SP = count
056F   ED 72                  SBC   hl,sp   
0571   C5                     PUSH   bc   ; bc = count, hl = BP
0572   44 4D                  LD   bc,hl   
0574   E1                     POP   hl   
0575   2B                     DEC   hl   ; hl = BP-1
0576   1B                     DEC   de   ; de = args*-1
0577   ED B8                  LDDR      
0579   13                     INC   de   ; hl = new tos
057A   EB                     EX   de,hl   
057B   F9                     LD   sp,hl   ; sp = new tos
057C   D9                     EXX      ; bc = IP, iy = oldBP
057D   D5                     PUSH   de   
057E   C5                     PUSH   bc   
057F   D9                     EXX      
0580   C1                     POP   bc   
0581   FD E1                  POP   iy   
0583   DD E9                  JP   (ix)   
0585                CHAR:        
0585   21 00 00               LD   hl,0   ; if "" is empty or null
0588                CHAR1:       
0588   03                     INC   bc   ; point to next char
0589   0A                     LD   a,(bc)   
058A   FE 27                  CP   "'"   ; ' is the terminator
058C   28 09                  JR   z,char3   
058E   FE 5C                  CP   $5c   ; \ is the escape
0590   20 02                  JR   nz,char2   
0592   03                     INC   bc   
0593   0A                     LD   a,(bc)   
0594                CHAR2:       
0594   6F                     LD   l,a   
0595   18 F1                  JR   char1   
0597                CHAR3:       
0597   E5                     PUSH   hl   
0598   DD E9                  JP   (ix)   
059A                             ; ; ;
059A                             ; ; block* -- hblock*
059A                             ; ; copies bytes from TOS to IP to the heap
059A                             ; compile:
059A                             ;   ld (vTemp1),bc              ; save IP
059A                             ; pop de                      ; de = block*
059A                             ; ld hl,bc                    ; hl = IP
059A                             ; or a                        ; bc = size
059A                             ; sbc hl,de
059A                             ; ld bc,hl
059A                             ; ex de,hl                    ; hl = block*
059A                             ; ld de,(vHeapPtr)            ; de = heap*
059A                             ; push de                     ; return hblock*
059A                             ; ldir                        ; copy size bytes from block* to hblock*
059A                             ; ld (vHeapPtr),de
059A                             ; ld bc,(vTemp1)              ; restore IP
059A                             ; jp (ix)
059A                DOT:         
059A   E1                     POP   hl   
059B   03                     INC   bc   
059C   0A                     LD   a,(bc)   
059D   FE 68                  CP   "h"   
059F   20 05                  JR   nz,dot1   
05A1   CD 49 08               CALL   prthex   
05A4   18 17                  JR   dot4   
05A6                DOT1:        
05A6   FE 73                  CP   "s"   
05A8   20 05                  JR   nz,dot2   
05AA   CD 6C 08               CALL   prtstr   
05AD   18 0E                  JR   dot4   
05AF                DOT2:        
05AF   FE 63                  CP   "c"   
05B1   20 06                  JR   nz,dot3   
05B3   7D                     LD   a,l   
05B4   CD 85 00               CALL   putchar   
05B7   18 04                  JR   dot4   
05B9                DOT3:        
05B9   0B                     DEC   bc   
05BA   CD 01 08               CALL   prtdec   
05BD                DOT4:        
05BD   3E 20                  LD   a," "   
05BF   CD 85 00               CALL   putchar   
05C2   DD E9                  JP   (ix)   
05C4                             ; division subroutine.
05C4                             ; bc: divisor, de: dividend, hl: remainder
05C4                DIVIDE:      
05C4   21 00 00               LD   hl,0   ; zero the remainder
05C7   3E 10                  LD   a,16   ; loop counter
05C9                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
05C9   CB 21                  SLA   c   
05CB   CB 10                  RL   b   
05CD   ED 6A                  ADC   hl,hl   
05CF   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
05D1   38 03                  JR   c,divide2   
05D3   0C                     INC   c   
05D4   18 01                  JR   divide3   
05D6                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
05D6   19                     ADD   hl,de   
05D7                DIVIDE3:      
05D7   3D                     DEC   a   
05D8   20 EF                  JR   nz,divide1   
05DA   50 59                  LD   de,bc   ; result from bc to de
05DC   C9                     RET      
05DD                             ; hl = value1, de = value2
05DD                             ; hl = result
05DD                EQUALS:      
05DD   B7                     OR   a   ; reset the carry flag
05DE   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
05E0   28 10                  JR   z,true1   
05E2   C3 F8 05               JP   false1   
05E5                             ; hl = value1 de = value2
05E5                             ; hl = result
05E5                LESSTHANEQ:      
05E5   B7                     OR   a   
05E6   ED 52                  SBC   hl,de   
05E8   18 05                  JR   lessthan1   
05EA                             ; hl = value1 de = value2
05EA                             ; hl = result
05EA                LESSTHAN:      
05EA   B7                     OR   a   
05EB   ED 52                  SBC   hl,de   
05ED   28 09                  JR   z,false1   
05EF                LESSTHAN1:      
05EF   FA F8 05               JP   m,false1   
05F2                TRUE1:       
05F2   21 FF FF               LD   hl,TRUE   
05F5   E5                     PUSH   hl   
05F6   DD E9                  JP   (ix)   
05F8                NULL1:       
05F8                FALSE1:      
05F8   21 00 00               LD   hl,FALSE   
05FB   E5                     PUSH   hl   
05FC   DD E9                  JP   (ix)   
05FE                             ; execute a block of code which ends with }
05FE                             ; creates a root scope if BP == stack
05FE                             ; else uses outer scope
05FE                GO:          
05FE   D1                     POP   de   ; de = block*
05FF                GO0:         
05FF   7B                     LD   a,e   ; if block* == null, exit
0600   B2                     OR   d   
0601   20 02                  JR   nz,go1   
0603   DD E9                  JP   (ix)   
0605                GO1:         
0605   1A                     LD   a,(de)   
0606   FE 7B                  CP   "{"   
0608   C2 3F 06               JP   nz,goFunc0   
060B   13                     INC   de   
060C   C5                     PUSH   bc   ; push IP
060D   21 80 0A               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0610   FD 44                  LD   b,iyh   
0612   FD 4D                  LD   c,iyl   
0614   B7                     OR   a   ; hl = stack - BP = root_scope
0615   ED 42                  SBC   hl,bc   
0617   7D                     LD   a,l   ; if root_scope, skip
0618   B4                     OR   h   
0619   28 11                  JR   z,go2   
061B   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
061E   FD 46 05               LD   b,(iy+5)   
0621   C5                     PUSH   bc   
0622   FD 4E 02               LD   c,(iy+2)   ; hl = first_arg* (parent)
0625   FD 46 03               LD   b,(iy+3)   
0628   60 69                  LD   hl,bc   
062A   18 05                  JR   go3   
062C                GO2:         
062C   E5                     PUSH   hl   ; push arg_list (null)
062D   21 04 00               LD   hl,4   ; hl = first_arg* (BP+8)
0630   39                     ADD   hl,sp   
0631                GO3:         
0631   1B                     DEC   de   
0632                GO4:         
0632   E5                     PUSH   hl   ; push first_arg
0633   FD E5                  PUSH   iy   ; push BP
0635   FD 21 00 00            LD   iy,0   ; BP = SP
0639   FD 39                  ADD   iy,sp   
063B   42 4B                  LD   bc,de   ; bc = de = block*-1
063D   DD E9                  JP   (ix)   
063F                GOFUNC0:      ; execute code at pointer
063F   EB                     EX   de,hl   ; hl = func*
0640   5E                     LD   e,(hl)   ; de = hblock*
0641   23                     INC   hl   
0642   56                     LD   d,(hl)   
0643   23                     INC   hl   
0644   D5                     PUSH   de   ; save hblock*
0645   5E                     LD   e,(hl)   ; de = arg_list*
0646   23                     INC   hl   
0647   56                     LD   d,(hl)   
0648   23                     INC   hl   
0649   EB                     EX   de,hl   ; hl = arg_list*
064A   D1                     POP   de   ; restore hblock*
064B   7D                     LD   a,l   ; if arg_list* != null skip
064C   B4                     OR   h   
064D   20 03                  JR   nz,goFunc1   
064F   C5                     PUSH   bc   ; push IP
0650   18 DA                  JR   go2   
0652                GOFUNC1:      
0652   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
0653   7E                     LD   a,(hl)   
0654   23                     INC   hl   
0655   B7                     OR   a   
0656   28 05                  JR   z,goFunc3   
0658                GOFUNC2:      
0658   3B                     DEC   sp   
0659   3B                     DEC   sp   
065A   3D                     DEC   a   
065B   20 FB                  JR   nz,goFunc2   
065D                GOFUNC3:      
065D   C5                     PUSH   bc   ; push IP
065E   E5                     PUSH   hl   ; push arg_list*
065F   2B                     DEC   hl   ; hl = num_args*
0660   2B                     DEC   hl   
0661   7E                     LD   a,(hl)   ; hl = num_args * 2
0662   87                     ADD   a,a   
0663   C6 04                  ADD   a,4   ; offset for IP and arg_list
0665   6F                     LD   l,a   
0666   26 00                  LD   h,$0   
0668   39                     ADD   hl,sp   ; hl = first_arg*
0669   18 C7                  JR   go4   
066B                HEXNUM:      
066B   21 00 00               LD   hl,0   ; Clear hl to accept the number
066E                HEXNUM1:      
066E   03                     INC   bc   
066F   0A                     LD   a,(bc)   ; Get the character which is a numeral
0670   CB 77                  BIT   6,a   ; is it uppercase alpha?
0672   28 02                  JR   z,hexnum2   ; no a decimal
0674   D6 07                  SUB   7   ; sub 7  to make $a - $F
0676                HEXNUM2:      
0676   D6 30                  SUB   $30   ; form decimal digit
0678   DA F6 06               JP   c,num2   
067B   FE 10                  CP   $0F+1   
067D   D2 F6 06               JP   nc,num2   
0680   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0681   29                     ADD   hl,hl   ; 4X
0682   29                     ADD   hl,hl   ; 8X
0683   29                     ADD   hl,hl   ; 16X
0684   85                     ADD   a,l   ; add into bottom of hl
0685   6F                     LD   l,a   
0686   18 E6                  JR   hexnum1   
0688                IDENTU:      
0688   0A                     LD   a,(bc)   ; a = identifier char
0689   D6 41                  SUB   "A"   ; "A" = 0
068B   18 05                  JR   ident1   
068D                IDENTL:      
068D   0A                     LD   a,(bc)   
068E   D6 61                  SUB   "a"   
0690   C6 1A                  ADD   a,26   
0692                IDENT1:      
0692   87                     ADD   a,a   ; l = a * 2
0693   6F                     LD   l,a   
0694   26 0B                  LD   h,msb(vars)   
0696   22 F0 0B               LD   (vPointer),hl   ; store address in setter
0699   5E                     LD   e,(hl)   
069A   23                     INC   hl   
069B   56                     LD   d,(hl)   
069C   D5                     PUSH   de   
069D   DD E9                  JP   (ix)   
069F                             ; if
069F                             ; condition then -- value
069F                IF:          
069F   03                     INC   bc   
06A0   0A                     LD   a,(bc)   
06A1   FE 3F                  CP   "?"   
06A3   28 06                  JR   z,ifte   
06A5   0B                     DEC   bc   
06A6   11 00 00               LD   de,0   ; NUL pointer for else
06A9   18 01                  JR   ifte1   
06AB                             ; ifte
06AB                             ; condition then else -- value
06AB                IFTE:        
06AB   D1                     POP   de   ; de = else
06AC                IFTE1:       
06AC   E1                     POP   hl   ; hl = then
06AD   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
06AE   7C                     LD   a,h   
06AF   B5                     OR   l   
06B0   E1                     POP   hl   ; hl = then
06B1   CA FF 05               JP   z,go0   ; if z de = else
06B4   EB                     EX   de,hl   ; condition = false, de = then
06B5   C3 FF 05               JP   go0   
06B8                MUL:         
06B8   D1                     POP   de   ; get first value
06B9   E1                     POP   hl   
06BA   C5                     PUSH   bc   ; Preserve the IP
06BB   44                     LD   b,h   ; bc = 2nd value
06BC   4D                     LD   c,l   
06BD   21 00 00               LD   hl,0   
06C0   3E 10                  LD   a,16   
06C2                MUL2:        
06C2   29                     ADD   hl,hl   
06C3   CB 13                  RL   e   
06C5   CB 12                  RL   d   
06C7   30 04                  JR   nc,$+6   
06C9   09                     ADD   hl,bc   
06CA   30 01                  JR   nc,$+3   
06CC   13                     INC   de   
06CD   3D                     DEC   a   
06CE   20 F2                  JR   nz,mul2   
06D0   C1                     POP   bc   ; Restore the IP
06D1   E5                     PUSH   hl   ; Put the product on the stack - stack bug fixed 2/12/21
06D2   DD E9                  JP   (ix)   
06D4                NUM:         
06D4   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
06D7   0A                     LD   a,(bc)   ; Get numeral or -
06D8   FE 2D                  CP   "-"   
06DA   20 01                  JR   nz,num0   
06DC   03                     INC   bc   ; move to next char, no flags affected
06DD                NUM0:        
06DD   08                     EX   af,af'   ; save zero flag = 0 for later
06DE                NUM1:        
06DE   0A                     LD   a,(bc)   ; read digit
06DF   D6 30                  SUB   "0"   ; less than 0?
06E1   38 13                  JR   c,num2   ; not a digit, exit loop
06E3   FE 0A                  CP   10   ; greater that 9?
06E5   30 0F                  JR   nc,num2   ; not a digit, exit loop
06E7   03                     INC   bc   ; inc IP
06E8   54 5D                  LD   de,hl   ; multiply hl * 10
06EA   29                     ADD   hl,hl   
06EB   29                     ADD   hl,hl   
06EC   19                     ADD   hl,de   
06ED   29                     ADD   hl,hl   
06EE   85                     ADD   a,l   ; add digit in a to hl
06EF   6F                     LD   l,a   
06F0   3E 00                  LD   a,0   
06F2   8C                     ADC   a,h   
06F3   67                     LD   h,a   
06F4   18 E8                  JR   num1   
06F6                NUM2:        
06F6   0B                     DEC   bc   
06F7   08                     EX   af,af'   ; restore zero flag
06F8   20 07                  JR   nz,num3   
06FA   EB                     EX   de,hl   ; negate the value of hl
06FB   21 00 00               LD   hl,0   
06FE   B7                     OR   a   ; jump to sub2
06FF   ED 52                  SBC   hl,de   
0701                NUM3:        
0701   E5                     PUSH   hl   ; Put the number on the stack
0702   DD E9                  JP   (ix)   ; and process the next character
0704                REMAIN:      
0704   2A F6 0B               LD   hl,(vRemain)   
0707   E5                     PUSH   hl   
0708   DD E9                  JP   (ix)   
070A                             ; shiftLeft
070A                             ; value count -- value2          shift left count places
070A                SHIFTLEFT:      
070A   50 59                  LD   de,bc   ; save IP
070C   C1                     POP   bc   ; bc = count
070D   41                     LD   b,c   ; b = loop counter
070E   E1                     POP   hl   
070F   04                     INC   b   ; test for counter=0 case
0710   18 01                  JR   shiftLeft2   
0712                SHIFTLEFT1:      
0712   29                     ADD   hl,hl   ; left shift hl
0713                SHIFTLEFT2:      
0713   10 FD                  DJNZ   shiftLeft1   
0715   E5                     PUSH   hl   
0716   42 4B                  LD   bc,de   ; restore IP
0718   DD E9                  JP   (ix)   
071A                             ; shiftRight
071A                             ; value count -- value2          shift left count places
071A                SHIFTRIGHT:      
071A   50 59                  LD   de,bc   ; save IP
071C   C1                     POP   bc   ; bc = count
071D   41                     LD   b,c   ; b = loop counter
071E   E1                     POP   hl   
071F   04                     INC   b   ; test for counter=0 case
0720   18 04                  JR   shiftRight2   
0722                SHIFTRIGHT1:      
0722   CB 3C                  SRL   h   ; right shift hl
0724   CB 1D                  RR   l   
0726                SHIFTRIGHT2:      
0726   10 FA                  DJNZ   shiftRight1   
0728   E5                     PUSH   hl   
0729   42 4B                  LD   bc,de   ; restore IP
072B   DD E9                  JP   (ix)   
072D                             ; string
072D                             ; -- ptr                        ; points to start of string chars,
072D                             ; length is stored at start - 2 bytes
072D                STRING:      
072D   2A EC 0B               LD   hl,(vHeapPtr)   ; hl = heap*
0730   23                     INC   hl   ; skip length field to start
0731   23                     INC   hl   
0732   E5                     PUSH   hl   ; save start of string
0733   03                     INC   bc   ; point to next char
0734   18 03                  JR   string2   
0736                STRING1:      
0736   77                     LD   (hl),a   
0737   23                     INC   hl   ; increase count
0738   03                     INC   bc   ; point to next char
0739                STRING2:      
0739   0A                     LD   a,(bc)   
073A   FE 22                  CP   DQUOTE   ; " is the string terminator
073C   20 F8                  JR   nz,string1   
073E   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0740   20 F4                  JR   nz,string1   
0742   AF                     XOR   a   ; write NUL to terminate string
0743   77                     LD   (hl),a   ; hl = end of string
0744   23                     INC   hl   
0745   22 EC 0B               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0748   2B                     DEC   hl   ; hl = end of string without terminator
0749   D1                     POP   de   ; de = start of string
074A   D5                     PUSH   de   ; return start of string
074B   B7                     OR   a   ; hl = length bytes, de = start of string
074C   ED 52                  SBC   hl,de   
074E   EB                     EX   de,hl   
074F   2B                     DEC   hl   ; write length bytes to length field at start - 2
0750   72                     LD   (hl),d   
0751   2B                     DEC   hl   
0752   73                     LD   (hl),e   
0753   DD E9                  JP   (ix)   
0755                             ;*******************************************************************
0755                             ; commands
0755                             ;*******************************************************************
0755                COMMAND:      
0755   03                     INC   bc   
0756   0A                     LD   a,(bc)   
0757   FE 5C                  CP   $5C   ; \\ comment
0759   CA A6 07               JP   z,comment   
075C   FE 61                  CP   "a"   ; \a absolute
075E   CA 99 07               JP   z,abs1   
0761   FE 62                  CP   "b"   ; \b bytes
0763   CA AF 07               JP   z,bytes   
0766   FE 66                  CP   "f"   ; \f func
0768   CA B7 07               JP   z,func   
076B   FE 46                  CP   "F"   ; \F false
076D   CA F8 05               JP   z,false1   
0770   FE 69                  CP   "i"   ; \i input
0772   CA CE 07               JP   z,input   
0775   FE 6B                  CP   "k"   ; \k key
0777   CA D9 07               JP   z,key   
077A   FE 6F                  CP   "o"   ; \o output
077C   CA E2 07               JP   z,output   
077F   FE 72                  CP   "r"   ; \r repeat
0781   CA EB 07               JP   z,repeat   
0784   FE 73                  CP   "s"   ; \s select
0786   CA ED 07               JP   z,select   
0789   FE 54                  CP   "T"   ; \T true
078B   CA F2 05               JP   z,true1   
078E   FE 77                  CP   "w"   ; \w words
0790   CA F7 07               JP   z,words   
0793   21 01 00               LD   hl,1   ; error 1: unknown command
0796   C3 6B 09               JP   error   
0799                ABS1:        
0799   E1                     POP   hl   
079A   CB 7C                  BIT   7,h   
079C   C8                     RET   z   
079D   AF                     XOR   a   
079E   95                     SUB   l   
079F   6F                     LD   l,a   
07A0   9F                     SBC   a,a   
07A1   94                     SUB   h   
07A2   67                     LD   h,a   
07A3   E5                     PUSH   hl   
07A4   DD E9                  JP   (ix)   
07A6                COMMENT:      
07A6   03                     INC   bc   ; point to next char
07A7   0A                     LD   a,(bc)   
07A8   FE 20                  CP   " "   ; terminate on any char less than SP
07AA   30 FA                  JR   nc,comment   
07AC   0B                     DEC   bc   
07AD   DD E9                  JP   (ix)   
07AF                BYTES:       
07AF   21 01 00               LD   hl,1   
07B2                BYTES1:      
07B2   22 E6 0B               LD   (vDataWidth),hl   
07B5   DD E9                  JP   (ix)   
07B7                             ; ; arg_list* block* -- ptr
07B7                             ; func:
07B7                             ;     ld hl,(vHeapPtr)                    ; hl = heap*
07B7                             ;     pop de                              ; hl = heap*, de = block
07B7                             ;     ex de,hl                            ; hl = heap*, de = arg_list*, (sp) = block*
07B7                             ;     ex (sp),hl
07B7                             ;     ex de,hl
07B7                             ;     ld (hl),e                           ; compile arg_list*
07B7                             ;     inc hl
07B7                             ;     ld (hl),d
07B7                             ;     inc hl
07B7                             ;     pop de                              ; de = block*
07B7                             ;     inc de
07B7                             ;     push bc                             ; (sp) = IP
07B7                             ;     ld b,1                              ; b = nesting
07B7                             ; func1:
07B7                             ;     ld a,(de)
07B7                             ;     inc de
07B7                             ;     ld (hl),a
07B7                             ;     inc hl
07B7                             ;     cp ")"
07B7                             ;     jr z,func4
07B7                             ;     cp "}"
07B7                             ;     jr z,func4
07B7                             ;     cp "]"
07B7                             ;     jr z,func4
07B7                             ;     cp "("
07B7                             ;     jr z,func2
07B7                             ;     cp "{"
07B7                             ;     jr z,func2
07B7                             ;     cp "["
07B7                             ;     jr z,func2
07B7                             ;     cp DQUOTE
07B7                             ;     jr z,func3
07B7                             ;     cp "'"
07B7                             ;     jr z,func3
07B7                             ;     cp "`"
07B7                             ;     jr z,func3
07B7                             ;     jr func1
07B7                             ; func2:
07B7                             ;     inc b
07B7                             ;     jr func1
07B7                             ; func3:
07B7                             ;     ld a,$80
07B7                             ;     xor b
07B7                             ;     ld b,a
07B7                             ;     jr nz,func1
07B7                             ;     jr func4a
07B7                             ; func4:
07B7                             ;     dec b
07B7                             ;     jr nz, func1                        ; get the next element
07B7                             ; func4a:
07B7                             ;     inc hl
07B7                             ;     pop bc                              ; de = defstart, hl = IP
07B7                             ;     ld de,(vHeapPtr)                    ; de = defstart
07B7                             ;     push de
07B7                             ;     ld (vHeapPtr),hl                    ; update heap* to end of definition
07B7                             ;     jp (ix)
07B7                             ; arg_list* block* -- ptr
07B7                FUNC:        
07B7   D1                     POP   de   ; de = block* hl = heap*
07B8   2A EC 0B               LD   hl,(vHeapPtr)   
07BB   73                     LD   (hl),e   ; compile block*
07BC   23                     INC   hl   
07BD   72                     LD   (hl),d   
07BE   23                     INC   hl   
07BF   D1                     POP   de   ; de = block*
07C0   73                     LD   (hl),e   ; compile arg_list*
07C1   23                     INC   hl   
07C2   72                     LD   (hl),d   
07C3   23                     INC   hl   
07C4   ED 5B EC 0B            LD   de,(vHeapPtr)   ; return func*
07C8   D5                     PUSH   de   
07C9   22 EC 0B               LD   (vHeapPtr),hl   ; heap* += 4
07CC   DD E9                  JP   (ix)   
07CE                             ; Z80 port input
07CE                             ; port -- value
07CE                INPUT:       
07CE   E1                     POP   hl   
07CF   59                     LD   e,c   ; save IP
07D0   4D                     LD   c,l   
07D1   ED 68                  IN   l,(c)   
07D3   26 00                  LD   h,0   
07D5   4B                     LD   c,e   ; restore IP
07D6   E5                     PUSH   hl   
07D7   DD E9                  JP   (ix)   
07D9                KEY:         
07D9   CD 81 00               CALL   getchar   
07DC   26 00                  LD   h,0   
07DE   6F                     LD   l,a   
07DF   E5                     PUSH   hl   
07E0   DD E9                  JP   (ix)   
07E2                             ; Z80 port output
07E2                             ; value port --
07E2                OUTPUT:      
07E2   E1                     POP   hl   
07E3   59                     LD   e,c   ; save IP
07E4   4D                     LD   c,l   
07E5   E1                     POP   hl   
07E6   ED 69                  OUT   (c),l   
07E8   4B                     LD   c,e   ; restore IP
07E9   DD E9                  JP   (ix)   
07EB                REPEAT:      
07EB   DD E9                  JP   (ix)   
07ED                             ; select
07ED                             ; index array -- value
07ED                SELECT:      
07ED   D1                     POP   de   ; de = array
07EE   E1                     POP   hl   ; hl = index
07EF   29                     ADD   hl,hl   ; if data width = 2 then double
07F0   19                     ADD   hl,de   ; add addr
07F1   5E                     LD   e,(hl)   
07F2   23                     INC   hl   
07F3   56                     LD   d,(hl)   
07F4   C3 FF 05               JP   go0   
07F7                WORDS:       
07F7   21 02 00               LD   hl,2   
07FA   C3 B2 07               JP   bytes1   
07FD                             ; 
07FD                             ; 
07FD                             ; 
07FD                             ; 
07FD                             ; c b --
07FD                             ; loops until c = 0
07FD                LOOP:        
07FD   DD E9                  JP   (ix)   
07FF                             ;     pop de                      ; de = block                    c
07FF                             ;     pop hl                      ; hl = condition
07FF                             ;     push de
07FF                             ;     push bc                     ; push IP
07FF                             ;     ld bc,de                    ; bc = block
07FF                             ;     ld e,(iy+2)                 ; get ScopeBP from parent stack frame
07FF                             ;     ld d,(iy+3)                 ; make this the old BP for this stack frame
07FF                             ;     push de                     ; push ScopeBP
07FF                             ;     push iy                     ; push BP
07FF                             ;     ld iy,0                     ; iy = sp
07FF                             ;     add iy,sp
07FF                             ; loop1:
07FF                             ;     ld a,l                      ; bc = block, hl = condition = zero?
07FF                             ;     or h
07FF                             ;     jr z,loop3
07FF                             ;     ld de,loop2-1               ; IP return address
07FF                             ;     push de
07FF                             ;     ld e,(iy+2)                 ; push parent ScopeBP
07FF                             ;     ld d,(iy+3)
07FF                             ;     push de                     ;
07FF                             ;     push iy                     ; push BP
07FF                             ;     ld iy,0                     ; iy = sp
07FF                             ;     add iy,sp
07FF                             ;     push hl                     ; push condition
07FF                             ;     dec bc
07FF                             ;     jp (ix)
07FF                             ; loop2:
07FF                             ;     db ESC                      ; escape from interpreter
07FF                             ;     ld c,(iy+6)                 ; bc = block
07FF                             ;     ld b,(iy+7)
07FF                             ;     pop hl                      ; hl = condition
07FF                             ;     jr loop1
07FF                             ; loop3:
07FF                             ;     ld d,iyh                    ; de = BP
07FF                             ;     ld e,iyl
07FF                             ;     ex de,hl                    ; hl = BP, de = result
07FF                             ;     ld sp,hl                    ; sp = BP
07FF                             ;     pop hl                      ; hl = old BP
07FF                             ;     pop bc                      ; pop ScopeBP (discard)
07FF                             ;     pop bc                      ; bc = IP
07FF                             ;     ld sp,hl                    ; sp = old BP
07FF                             ;     ld iy,0                     ; iy = sp
07FF                             ;     add iy,sp
07FF                             ;     ld ix,(vNext)                  ; needed?
07FF                             ;     jp (ix)
07FF                             ; str -- num
07FF                             ; hash:
07FF                             ; pop hl
07FF                             ; push bc
07FF                             ; ld bc,hl
07FF                             ; call hashStr
07FF                             ; pop bc
07FF                             ; push hl
07FF                             ; jp (ix)
07FF                             ; sqrt1:
07FF                             ;     pop hl
07FF                             ;     push bc
07FF                             ;     call squareRoot
07FF                             ;     ld (vRemain),bc
07FF                             ;     pop bc
07FF                             ;     push de
07FF                             ;     jp (ix)
07FF                FILTER:      
07FF                MAP:         
07FF                SCAN:        
07FF   DD E9                  JP   (ix)   
0801                             ; -------------------------------------------------------------------------------
0801                             ; ; hash C-string
0801                             ; ; BC = str
0801                             ; ; HL = hash
0801                             ; hashStr:
0801                             ;     ld (vHashStr),bc                    ; store source string
0801                             ;     ld hl,0
0801                             ; hashStr1:
0801                             ;     ld a,(bc)                           ; load next char
0801                             ;     inc bc
0801                             ;     cp 0                                ; NUL?
0801                             ;     ret z
0801                             ; hashStr2:
0801                             ;     ld d,0
0801                             ;     ld e,a
0801                             ;     add hl,de
0801                             ;     ld de,hl                            ; hl *= 193 (11000001)
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,de                           ; add
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,hl                           ; shift left
0801                             ;     add hl,de                           ; add
0801                             ;     jr hashStr1
0801                             ; ; squareroot
0801                             ; ; Input: HL = value
0801                             ; ; Result: DE = square root BC = remainder
0801                             ; squareRoot:
0801                             ;     ld bc,0800h
0801                             ;     ld e,c
0801                             ;     xor a
0801                             ; squareRoot1:
0801                             ;     add hl,hl
0801                             ;     rl c
0801                             ;     adc hl,hl
0801                             ;     rl c
0801                             ;     jr nc,$+4
0801                             ;     set 0,l
0801                             ;     ld a,e
0801                             ;     add a,a
0801                             ;     ld e,a
0801                             ;     add a,a
0801                             ;     bit 0,l
0801                             ;     jr nz,$+5
0801                             ;     sub c
0801                             ;     jr nc,squareRoot4
0801                             ;     ld a,c
0801                             ;     sub e
0801                             ;     inc e
0801                             ;     sub e
0801                             ;     ld c,a
0801                             ; squareRoot4:
0801                             ;     djnz squareRoot1
0801                             ;     bit 0,l
0801                             ;     jr z,squareRoot5
0801                             ;     inc b
0801                             ; squareRoot5:
0801                             ;     ld d,0
0801                             ;     ret
0801                             ; print decimal
0801                             ; hl = value
0801                PRTDEC:      
0801   CB 7C                  BIT   7,h   
0803   28 0B                  JR   z,prtdec0   
0805   3E 2D                  LD   a,"-"   
0807   CD 85 00               CALL   putchar   
080A   AF                     XOR   a   
080B   95                     SUB   l   
080C   6F                     LD   l,a   
080D   9F                     SBC   a,a   
080E   94                     SUB   h   
080F   67                     LD   h,a   
0810                PRTDEC0:      
0810   C5                     PUSH   bc   
0811   0E 00                  LD   c,0   ; leading zeros flag = false
0813   11 F0 D8               LD   de,-10000   
0816   CD 32 08               CALL   prtdec1   
0819   11 18 FC               LD   de,-1000   
081C   CD 32 08               CALL   prtdec1   
081F   11 9C FF               LD   de,-100   
0822   CD 32 08               CALL   prtdec1   
0825   1E F6                  LD   e,-10   
0827   CD 32 08               CALL   prtdec1   
082A   0C                     INC   c   ; flag = true for at least digit
082B   1E FF                  LD   e,-1   
082D   CD 32 08               CALL   prtdec1   
0830   C1                     POP   bc   
0831   C9                     RET      
0832                PRTDEC1:      
0832   06 2F                  LD   b,"0"-1   
0834                PRTDEC2:      
0834   04                     INC   b   
0835   19                     ADD   hl,de   
0836   38 FC                  JR   c,prtdec2   
0838   ED 52                  SBC   hl,de   
083A   3E 30                  LD   a,"0"   
083C   B8                     CP   b   
083D   20 05                  JR   nz,prtdec3   
083F   AF                     XOR   a   
0840   B1                     OR   c   
0841   C8                     RET   z   
0842   18 01                  JR   prtdec4   
0844                PRTDEC3:      
0844   0C                     INC   c   
0845                PRTDEC4:      
0845   78                     LD   a,b   
0846   C3 85 00               JP   putchar   
0849                PRTHEX:      ; display hl as a 16-bit number in hex.
0849   C5                     PUSH   bc   ; preserve the IP
084A   7C                     LD   a,h   
084B   CD 54 08               CALL   prthex2   
084E   7D                     LD   a,l   
084F   CD 54 08               CALL   prthex2   
0852   C1                     POP   bc   
0853   C9                     RET      
0854                PRTHEX2:      
0854   4F                     LD   c,a   
0855   1F                     RRA      
0856   1F                     RRA      
0857   1F                     RRA      
0858   1F                     RRA      
0859   CD 5D 08               CALL   prthex3   
085C   79                     LD   a,c   
085D                PRTHEX3:      
085D   E6 0F                  AND   0x0F   
085F   C6 90                  ADD   a,0x90   
0861   27                     DAA      
0862   CE 40                  ADC   a,0x40   
0864   27                     DAA      
0865   C3 85 00               JP   putchar   
0868                PRTSTR0:      
0868   CD 85 00               CALL   putchar   
086B   23                     INC   hl   
086C                PRTSTR:      
086C   7E                     LD   a,(hl)   
086D   B7                     OR   a   
086E   20 F8                  JR   nz,prtstr0   
0870   C9                     RET      
0871                             ; **************************************************************************
0871                             ; calculate nesting value
0871                             ; a is char to be tested,
0871                             ; e is the nesting value (initially 0)
0871                             ; e is increased by ( and [
0871                             ; e is decreased by ) and ]
0871                             ; e has its bit 7 toggled by `
0871                             ; limited to 127 levels
0871                             ; **************************************************************************
0871                NESTING:      
0871   FE 22                  CP   DQUOTE   ; quote char
0873   28 06                  JR   z,nesting0   
0875   FE 60                  CP   "`"   ; quote char
0877   28 02                  JR   z,nesting0   
0879   18 0A                  JR   nesting1   
087B                NESTING0:      
087B   CB 7B                  BIT   7,e   
087D   28 03                  JR   z,nesting1a   
087F   CB BB                  RES   7,e   
0881   C9                     RET      
0882                NESTING1A:      
0882   CB FB                  SET   7,e   
0884   C9                     RET      
0885                NESTING1:      
0885   CB 7B                  BIT   7,e   
0887   C0                     RET   nz   
0888   FE 7B                  CP   "{"   
088A   28 08                  JR   z,nesting2   
088C   FE 5B                  CP   "["   
088E   28 04                  JR   z,nesting2   
0890   FE 28                  CP   "("   
0892   20 02                  JR   nz,nesting3   
0894                NESTING2:      
0894   1C                     INC   e   
0895   C9                     RET      
0896                NESTING3:      
0896   FE 7D                  CP   "}"   
0898   28 07                  JR   z,nesting4   
089A   FE 5D                  CP   "]"   
089C   28 03                  JR   z,nesting4   
089E   FE 29                  CP   ")"   
08A0   C0                     RET   nz   
08A1                NESTING4:      
08A1   1D                     DEC   e   
08A2   C9                     RET      
08A3                PROMPT:      
08A3   CD B3 08               CALL   printStr   
08A6   0D 0A 3E 20 00         .CSTR   "\r\n> "   
08AB   C9                     RET      
08AC                CRLF:        
08AC   CD B3 08               CALL   printStr   
08AF   0D 0A 00               .CSTR   "\r\n"   
08B2   C9                     RET      
08B3                             ; prints a null teminated string
08B3                             ; the string should be immedaitely following the call
08B3                PRINTSTR:      
08B3   E3                     EX   (sp),hl   ; swap			
08B4   CD 6C 08               CALL   prtstr   
08B7   23                     INC   hl   ; inc past NUL
08B8   E3                     EX   (sp),hl   ; put it back	
08B9   C9                     RET      
08BA                             ; executes a null teminated string (null executes exit_)
08BA                             ; the string should be immedaitely following the call
08BA                EXECSTR:      ; create a root stack frame
08BA   C1                     POP   bc   ; bc = code*
08BB   0B                     DEC   bc   ; dec to prepare for next routine
08BC   11 00 00               LD   de,0   
08BF   D5                     PUSH   de   ; push fake IP
08C0   D5                     PUSH   de   ; push null arg_list*
08C1   D5                     PUSH   de   ; push null first_arg*
08C2   D5                     PUSH   de   ; push fake BP
08C3   DD E9                  JP   (ix)   
08C5                             ; arg1 .. argn func -- ?
08C5                CALL:        
08C5   E1                     POP   hl   
08C6   E9                     JP   (hl)   
08C7                INIT:        
08C7   DD 2A EA 0B            LD   ix,(vNext)   
08CB   FD 21 80 0A            LD   iy,STACK   
08CF   21 80 01               LD   hl,isysVars   
08D2   11 E6 0B               LD   de,sysVars   
08D5   01 10 00               LD   bc,8 * 2   
08D8   ED B0                  LDIR      
08DA   21 00 0B               LD   hl,vars   ; 52 vars LO HI
08DD   06 34                  LD   b,26*2   
08DF   AF                     XOR   a   
08E0                INIT0:       
08E0   77                     LD   (hl),a   
08E1   23                     INC   hl   
08E2   10 FC                  DJNZ   init0   
08E4   C9                     RET      
08E5                START:       
08E5   31 80 0A               LD   sp,STACK   ; start of monty
08E8   CD C7 08               CALL   init   ; setups
08EB   CD B3 08               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
08EE   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
08FB                INTERPRET:      
08FB   CD A3 08               CALL   prompt   
08FE   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
0901   ED 43 E8 0B            LD   (vTIBPtr),bc   
0905                INTERPRET2:      ; calc nesting (a macro might have changed it)
0905   1E 00                  LD   e,0   ; initilize nesting value
0907   C5                     PUSH   bc   ; save offset into TIB,
0908                             ; bc is also the count of chars in TIB
0908   21 00 0C               LD   hl,TIB   ; hl is start of TIB
090B   18 06                  JR   interpret4   
090D                INTERPRET3:      
090D   7E                     LD   a,(hl)   ; a = char in TIB
090E   23                     INC   hl   ; inc pointer into TIB
090F   0B                     DEC   bc   ; dec count of chars in TIB
0910   CD 71 08               CALL   nesting   ; update nesting value
0913                INTERPRET4:      
0913   79                     LD   a,c   ; is count zero?
0914   B0                     OR   b   
0915   20 F6                  JR   nz,interpret3   ; if not loop
0917   C1                     POP   bc   ; restore offset into TIB
0918                INTERPRET5:      
0918   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
091B   FE 20                  CP   $20   ; compare to space
091D   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
091F   FE 00                  CP   $0   ; is it end of string? NUL end of string
0921                             ; ???? NEEDED?
0921   28 27                  JR   z,interpret8   
0923   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0925   28 10                  JR   z,interpret7   ; if anything else its macro/control
0927                             ; macro
0927                             ;  ld (vTIBPtr),bc
0927                             ;  ld hl,ctrlCodes
0927                             ;  add a,l			            ; look up key of macros
0927                             ;  ld l,a
0927                             ;  ld e,(hl)
0927                             ;  ld a,e
0927                             ;  or a
0927                             ;  jr z,macro1
0927                             ;  ld d,msb(macros)
0927                             ;  push de
0927                             ;  call call		            ; monty exec_ operation and jump to it
0927                             ;  db DC1,0
0927                             ; macro1:
0927                             ;  ld bc,(vTIBPtr)
0927   18 DC                  JR   interpret2   
0929                INTERPRET6:      
0929   21 00 0C               LD   hl,TIB   
092C   09                     ADD   hl,bc   
092D   77                     LD   (hl),a   ; store the character in textbuf
092E   03                     INC   bc   
092F   CD 85 00               CALL   putchar   ; echo character to screen
0932   CD 71 08               CALL   nesting   
0935   18 E1                  JR   interpret5   ; wait for next character
0937                INTERPRET7:      
0937   21 00 0C               LD   hl,TIB   
093A   09                     ADD   hl,bc   
093B   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
093D   23                     INC   hl   
093E   36 0A                  LD   (hl),"\n"   
0940   23                     INC   hl   
0941   03                     INC   bc   
0942   03                     INC   bc   
0943   CD AC 08               CALL   crlf   ; echo character to screen
0946   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0947   B7                     OR   a   
0948   20 CE                  JR   nz,interpret5   
094A                INTERPRET8:      
094A   ED 43 E8 0B            LD   (vTIBPtr),bc   
094E   01 00 0C               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0951                             ; we pressed enter
0951   0B                     DEC   bc   
0952                NEXT:        
0952   03                     INC   bc   ; Increment the IP
0953   0A                     LD   a,(bc)   ; Get the next character and dispatch
0954   FE 20                  CP   " "   ; whitespace?
0956   28 FA                  JR   z,next   ; space? ignore
0958   38 07                  JR   c,next1   
095A   6F                     LD   l,a   ; index into table
095B   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
095D   6E                     LD   l,(hl)   ; get low jump address
095E   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0960   E9                     JP   (hl)   ; Jump to routine
0961                NEXT1:       
0961   FE 00                  CP   NUL   ; end of input string?
0963   28 03                  JR   z,exit_   
0965   C3 FB 08               JP   interpret   ; no, other whitespace, macros?
0968                EXIT_:       
0968   60 69                  LD   hl,bc   
096A   E9                     JP   (hl)   
096B                ERROR:       
096B   CD B3 08               CALL   printStr   
096E   45 72 72 6F 72 20 00   .CSTR   "Error "   
0975   CD 01 08               CALL   prtdec   
0978   C3 FB 08               JP   interpret   
097B                             ; .pstr "hash",0
097B                             ; dw hash \hsh
097B                             ; .pstr "input",0
097B                             ; dw input \in ?
097B                             ; call define
097B                             ; .pstr "output",0
097B                             ; dw output \out ?
097B                             ; .pstr "key",0
097B                             ; dw key \k
097B                             ; .pstr "loop",0
097B                             ; dw loop \rpt
097B                             ; .pstr "select",0
097B                             ; dw select. \sw
097B                             ; call define
097B                             ; .pstr "filter",0
097B                             ; dw filter \f ?
097B                             ; call define
097B                             ; .pstr "map",0
097B                             ; dw map \m ?
097B                             ; call define
097B                             ; .pstr "scan",0
097B                             ; dw scan.  \fold ?
097B                             ; call define
097B                             ; .pstr "sqrt",0
097B                             ; dw sqrt1 \sqt
097B                          ALIGN   $100   
0A00                             ; .org RAMSTART
0A00                          DS   DSIZE   
0A80                STACK:       
0A80                          ALIGN   $100   
0B00                VARS:        
0B00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0BD0                RESTARTS:      
0BD0                RST08:    DS   2   
0BD2                RST10:    DS   2   
0BD4                RST18:    DS   2   
0BD6                RST20:    DS   2   
0BD8                RST28:    DS   2   
0BDA                RST30:    DS   2   ; 
0BDC                BAUD:     DS   2   ; 
0BDE                INTVEC:   DS   2   ; 
0BE0                NMIVEC:   DS   2   ; 
0BE2                GETCVEC:   DS   2   ; 
0BE4                PUTCVEC:   DS   2   ; 
0BE6                SYSVARS:      
0BE6                             ; initialised sys variables
0BE6                VDATAWIDTH:   DS   2   ; 
0BE8                VTIBPTR:   DS   2   ; 
0BEA                VNEXT:    DS   2   ; 
0BEC                VHEAPPTR:   DS   2   ; 
0BEE                             ; uninitialised sys variables
0BEE                VBLOCKEND:   DS   2   ; 
0BF0                VPOINTER:   DS   2   ; 
0BF2                VHASHSTR:   DS   2   ; 
0BF4                VLASTDEF:   DS   2   ; 
0BF6                VREMAIN:   DS   2   ; 
0BF8                VTEMP1:   DS   2   ; 
0BFA                VTEMP2:   DS   2   ; 
0BFC                TBPTR:    DS   2   ; reserved for tests
0BFE                          ALIGN   $100   
0C00                TIB:      DS   TIBSIZE   
0D00                          ALIGN   $100   
0D00                PAD:      DS   $100   
0E00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               07FF DEFINED AT LINE 1410 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1294 IN monty.asm
                    > USED AT LINE 1695 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 788 IN monty.asm
                    > USED AT LINE 795 IN monty.asm
                    > USED AT LINE 1487 IN monty.asm
                    > USED AT LINE 1528 IN monty.asm
                    > USED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1555 IN monty.asm
                    > USED AT LINE 1726 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 846 IN monty.asm
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 851 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1762 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1123 IN monty.asm
                    > USED AT LINE 1574 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1650 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
ADD_:               0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0306 DEFINED AT LINE 221 IN monty.asm
AND_:               0309 DEFINED AT LINE 223 IN monty.asm
ARG_:               030C DEFINED AT LINE 225 IN monty.asm
ARG_LIST_:          030F DEFINED AT LINE 227 IN monty.asm
ARRBEGIN_:          0312 DEFINED AT LINE 229 IN monty.asm
ARREND_:            0315 DEFINED AT LINE 231 IN monty.asm
ARRINDEX_:          0318 DEFINED AT LINE 233 IN monty.asm
BLOCK_:             031B DEFINED AT LINE 235 IN monty.asm
BLOCKEND_:          031E DEFINED AT LINE 237 IN monty.asm
CHAR_:              0321 DEFINED AT LINE 239 IN monty.asm
COMMAND_:           0324 DEFINED AT LINE 241 IN monty.asm
DOT_:               0327 DEFINED AT LINE 243 IN monty.asm
REMAIN_:            032A DEFINED AT LINE 245 IN monty.asm
GO_:                032D DEFINED AT LINE 247 IN monty.asm
IDENTU_:            0330 DEFINED AT LINE 249 IN monty.asm
IDENTL_:            0333 DEFINED AT LINE 251 IN monty.asm
IF_:                0336 DEFINED AT LINE 253 IN monty.asm
INV_:               0339 DEFINED AT LINE 255 IN monty.asm
MUL_:               033F DEFINED AT LINE 258 IN monty.asm
NOT_:               0342 DEFINED AT LINE 260 IN monty.asm
NUM_:               0347 DEFINED AT LINE 263 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
HEXNUM_:            034A DEFINED AT LINE 265 IN monty.asm
OR_:                034D DEFINED AT LINE 267 IN monty.asm
XOR_:               0350 DEFINED AT LINE 269 IN monty.asm
STRING_:            0353 DEFINED AT LINE 271 IN monty.asm
SUB_:               0356 DEFINED AT LINE 273 IN monty.asm
SUB1:               0362 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
SUB2:               0364 DEFINED AT LINE 284 IN monty.asm
EQ_:                036A DEFINED AT LINE 290 IN monty.asm
EQ0:                0374 DEFINED AT LINE 297 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
EQ1:                0375 DEFINED AT LINE 299 IN monty.asm
                    > USED AT LINE 262 IN monty.asm
GT_:                0379 DEFINED AT LINE 303 IN monty.asm
LT_:                0384 DEFINED AT LINE 312 IN monty.asm
LT1:                038D DEFINED AT LINE 319 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DIV_:               0396 DEFINED AT LINE 325 IN monty.asm
NOP_:               03A5 DEFINED AT LINE 336 IN monty.asm
ADDR:               03A7 DEFINED AT LINE 344 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
AND:                03B3 DEFINED AT LINE 350 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
AND1:               03BA DEFINED AT LINE 358 IN monty.asm
                    > USED AT LINE 370 IN monty.asm
                    > USED AT LINE 380 IN monty.asm
OR:                 03BE DEFINED AT LINE 362 IN monty.asm
                    > USED AT LINE 268 IN monty.asm
XOR:                03C7 DEFINED AT LINE 371 IN monty.asm
                    > USED AT LINE 270 IN monty.asm
XOR1:               03C8 DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 257 IN monty.asm
ARG:                03D0 DEFINED AT LINE 385 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARG0:               03EE DEFINED AT LINE 406 IN monty.asm
                    > USED AT LINE 412 IN monty.asm
ARG0A:              03F7 DEFINED AT LINE 414 IN monty.asm
                    > USED AT LINE 391 IN monty.asm
                    > USED AT LINE 398 IN monty.asm
ARG1:               03FC DEFINED AT LINE 417 IN monty.asm
                    > USED AT LINE 410 IN monty.asm
ARG1A:              0404 DEFINED AT LINE 424 IN monty.asm
                    > USED AT LINE 416 IN monty.asm
ARG_LIST:           0407 DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARG_LIST1:          0411 DEFINED AT LINE 440 IN monty.asm
                    > USED AT LINE 458 IN monty.asm
ARG_LIST2:          041D DEFINED AT LINE 448 IN monty.asm
                    > USED AT LINE 445 IN monty.asm
ARG_LIST3:          0425 DEFINED AT LINE 456 IN monty.asm
                    > USED AT LINE 447 IN monty.asm
                    > USED AT LINE 454 IN monty.asm
ARG_LIST4:          0428 DEFINED AT LINE 459 IN monty.asm
                    > USED AT LINE 443 IN monty.asm
ARG_LIST5:          042D DEFINED AT LINE 464 IN monty.asm
                    > USED AT LINE 462 IN monty.asm
ARRBEGIN:           0439 DEFINED AT LINE 514 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARREND:             0455 DEFINED AT LINE 528 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARREND1:            046F DEFINED AT LINE 544 IN monty.asm
                    > USED AT LINE 560 IN monty.asm
ARREND2:            047F DEFINED AT LINE 554 IN monty.asm
                    > USED AT LINE 550 IN monty.asm
ARRINDEX:           04A3 DEFINED AT LINE 581 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
ARRINDEX0:          04AB DEFINED AT LINE 587 IN monty.asm
ARRINDEX1:          04AC DEFINED AT LINE 589 IN monty.asm
                    > USED AT LINE 586 IN monty.asm
ARRINDEX2:          04B8 DEFINED AT LINE 598 IN monty.asm
                    > USED AT LINE 595 IN monty.asm
ASSIGN:             04BB DEFINED AT LINE 604 IN monty.asm
                    > USED AT LINE 296 IN monty.asm
ASSIGN1:            04C9 DEFINED AT LINE 614 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
BLOCK:              04CB DEFINED AT LINE 617 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
BLOCK1:             04CF DEFINED AT LINE 621 IN monty.asm
                    > USED AT LINE 625 IN monty.asm
                    > USED AT LINE 647 IN monty.asm
                    > USED AT LINE 650 IN monty.asm
                    > USED AT LINE 655 IN monty.asm
                    > USED AT LINE 659 IN monty.asm
BLOCK2:             04FB DEFINED AT LINE 648 IN monty.asm
                    > USED AT LINE 635 IN monty.asm
                    > USED AT LINE 637 IN monty.asm
                    > USED AT LINE 639 IN monty.asm
BLOCK3:             04FE DEFINED AT LINE 651 IN monty.asm
                    > USED AT LINE 642 IN monty.asm
                    > USED AT LINE 644 IN monty.asm
                    > USED AT LINE 646 IN monty.asm
BLOCK4:             0506 DEFINED AT LINE 657 IN monty.asm
                    > USED AT LINE 628 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
                    > USED AT LINE 632 IN monty.asm
BLOCK5:             0509 DEFINED AT LINE 660 IN monty.asm
                    > USED AT LINE 656 IN monty.asm
BLOCK6:             0531 DEFINED AT LINE 679 IN monty.asm
                    > USED AT LINE 666 IN monty.asm
BLOCKEND:           0534 DEFINED AT LINE 684 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
BLOCKEND1:          0560 DEFINED AT LINE 707 IN monty.asm
                    > USED AT LINE 700 IN monty.asm
BLOCKEND2:          056C DEFINED AT LINE 714 IN monty.asm
                    > USED AT LINE 706 IN monty.asm
CHAR:               0585 DEFINED AT LINE 735 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
CHAR1:              0588 DEFINED AT LINE 737 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
CHAR2:              0594 DEFINED AT LINE 746 IN monty.asm
                    > USED AT LINE 743 IN monty.asm
CHAR3:              0597 DEFINED AT LINE 749 IN monty.asm
                    > USED AT LINE 741 IN monty.asm
DOT:                059A DEFINED AT LINE 771 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               05A6 DEFINED AT LINE 779 IN monty.asm
                    > USED AT LINE 776 IN monty.asm
DOT2:               05AF DEFINED AT LINE 784 IN monty.asm
                    > USED AT LINE 781 IN monty.asm
DOT3:               05B9 DEFINED AT LINE 790 IN monty.asm
                    > USED AT LINE 786 IN monty.asm
DOT4:               05BD DEFINED AT LINE 793 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 783 IN monty.asm
                    > USED AT LINE 789 IN monty.asm
DIVIDE:             05C4 DEFINED AT LINE 801 IN monty.asm
                    > USED AT LINE 330 IN monty.asm
DIVIDE1:            05C9 DEFINED AT LINE 804 IN monty.asm
                    > USED AT LINE 816 IN monty.asm
DIVIDE2:            05D6 DEFINED AT LINE 812 IN monty.asm
                    > USED AT LINE 809 IN monty.asm
DIVIDE3:            05D7 DEFINED AT LINE 814 IN monty.asm
                    > USED AT LINE 811 IN monty.asm
EQUALS:             05DD DEFINED AT LINE 822 IN monty.asm
                    > USED AT LINE 301 IN monty.asm
LESSTHANEQ:         05E5 DEFINED AT LINE 830 IN monty.asm
                    > USED AT LINE 321 IN monty.asm
LESSTHAN:           05EA DEFINED AT LINE 837 IN monty.asm
                    > USED AT LINE 323 IN monty.asm
LESSTHAN1:          05EF DEFINED AT LINE 842 IN monty.asm
                    > USED AT LINE 833 IN monty.asm
TRUE1:              05F2 DEFINED AT LINE 845 IN monty.asm
                    > USED AT LINE 825 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
NULL1:              05F8 DEFINED AT LINE 849 IN monty.asm
FALSE1:             05F8 DEFINED AT LINE 850 IN monty.asm
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 840 IN monty.asm
                    > USED AT LINE 843 IN monty.asm
                    > USED AT LINE 1158 IN monty.asm
GO:                 05FE DEFINED AT LINE 859 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
GO0:                05FF DEFINED AT LINE 861 IN monty.asm
                    > USED AT LINE 1002 IN monty.asm
                    > USED AT LINE 1004 IN monty.asm
                    > USED AT LINE 1324 IN monty.asm
GO1:                0605 DEFINED AT LINE 866 IN monty.asm
                    > USED AT LINE 864 IN monty.asm
GO2:                062C DEFINED AT LINE 887 IN monty.asm
                    > USED AT LINE 879 IN monty.asm
                    > USED AT LINE 918 IN monty.asm
GO3:                0631 DEFINED AT LINE 891 IN monty.asm
                    > USED AT LINE 886 IN monty.asm
GO4:                0632 DEFINED AT LINE 893 IN monty.asm
                    > USED AT LINE 941 IN monty.asm
GOFUNC0:            063F DEFINED AT LINE 901 IN monty.asm
                    > USED AT LINE 869 IN monty.asm
GOFUNC1:            0652 DEFINED AT LINE 919 IN monty.asm
                    > USED AT LINE 916 IN monty.asm
GOFUNC2:            0658 DEFINED AT LINE 925 IN monty.asm
                    > USED AT LINE 929 IN monty.asm
GOFUNC3:            065D DEFINED AT LINE 930 IN monty.asm
                    > USED AT LINE 924 IN monty.asm
HEXNUM:             066B DEFINED AT LINE 943 IN monty.asm
                    > USED AT LINE 266 IN monty.asm
HEXNUM1:            066E DEFINED AT LINE 945 IN monty.asm
                    > USED AT LINE 962 IN monty.asm
HEXNUM2:            0676 DEFINED AT LINE 951 IN monty.asm
                    > USED AT LINE 949 IN monty.asm
IDENTU:             0688 DEFINED AT LINE 963 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENTL:             068D DEFINED AT LINE 967 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IDENT1:             0692 DEFINED AT LINE 971 IN monty.asm
                    > USED AT LINE 966 IN monty.asm
IF:                 069F DEFINED AT LINE 984 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
IFTE:               06AB DEFINED AT LINE 994 IN monty.asm
                    > USED AT LINE 988 IN monty.asm
IFTE1:              06AC DEFINED AT LINE 996 IN monty.asm
                    > USED AT LINE 991 IN monty.asm
MUL:                06B8 DEFINED AT LINE 1006 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
MUL2:               06C2 DEFINED AT LINE 1015 IN monty.asm
                    > USED AT LINE 1024 IN monty.asm
NUM:                06D4 DEFINED AT LINE 1029 IN monty.asm
                    > USED AT LINE 264 IN monty.asm
NUM0:               06DD DEFINED AT LINE 1035 IN monty.asm
                    > USED AT LINE 1033 IN monty.asm
NUM1:               06DE DEFINED AT LINE 1037 IN monty.asm
                    > USED AT LINE 1054 IN monty.asm
NUM2:               06F6 DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 953 IN monty.asm
                    > USED AT LINE 955 IN monty.asm
                    > USED AT LINE 1040 IN monty.asm
                    > USED AT LINE 1042 IN monty.asm
NUM3:               0701 DEFINED AT LINE 1063 IN monty.asm
                    > USED AT LINE 1058 IN monty.asm
REMAIN:             0704 DEFINED AT LINE 1067 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
SHIFTLEFT:          070A DEFINED AT LINE 1074 IN monty.asm
                    > USED AT LINE 316 IN monty.asm
SHIFTLEFT1:         0712 DEFINED AT LINE 1081 IN monty.asm
                    > USED AT LINE 1084 IN monty.asm
SHIFTLEFT2:         0713 DEFINED AT LINE 1083 IN monty.asm
                    > USED AT LINE 1080 IN monty.asm
SHIFTRIGHT:         071A DEFINED AT LINE 1091 IN monty.asm
                    > USED AT LINE 307 IN monty.asm
SHIFTRIGHT1:        0722 DEFINED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1102 IN monty.asm
SHIFTRIGHT2:        0726 DEFINED AT LINE 1101 IN monty.asm
                    > USED AT LINE 1097 IN monty.asm
STRING:             072D DEFINED AT LINE 1110 IN monty.asm
                    > USED AT LINE 272 IN monty.asm
STRING1:            0736 DEFINED AT LINE 1117 IN monty.asm
                    > USED AT LINE 1124 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
STRING2:            0739 DEFINED AT LINE 1121 IN monty.asm
                    > USED AT LINE 1116 IN monty.asm
COMMAND:            0755 DEFINED AT LINE 1146 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
ABS1:               0799 DEFINED AT LINE 1177 IN monty.asm
                    > USED AT LINE 1152 IN monty.asm
COMMENT:            07A6 DEFINED AT LINE 1190 IN monty.asm
                    > USED AT LINE 1150 IN monty.asm
                    > USED AT LINE 1194 IN monty.asm
BYTES:              07AF DEFINED AT LINE 1198 IN monty.asm
                    > USED AT LINE 1154 IN monty.asm
BYTES1:             07B2 DEFINED AT LINE 1200 IN monty.asm
                    > USED AT LINE 1328 IN monty.asm
FUNC:               07B7 DEFINED AT LINE 1264 IN monty.asm
                    > USED AT LINE 1156 IN monty.asm
INPUT:              07CE DEFINED AT LINE 1283 IN monty.asm
                    > USED AT LINE 1160 IN monty.asm
KEY:                07D9 DEFINED AT LINE 1293 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
OUTPUT:             07E2 DEFINED AT LINE 1302 IN monty.asm
                    > USED AT LINE 1164 IN monty.asm
REPEAT:             07EB DEFINED AT LINE 1311 IN monty.asm
                    > USED AT LINE 1166 IN monty.asm
SELECT:             07ED DEFINED AT LINE 1316 IN monty.asm
                    > USED AT LINE 1168 IN monty.asm
WORDS:              07F7 DEFINED AT LINE 1326 IN monty.asm
                    > USED AT LINE 1172 IN monty.asm
LOOP:               07FD DEFINED AT LINE 1339 IN monty.asm
FILTER:             07FF DEFINED AT LINE 1408 IN monty.asm
MAP:                07FF DEFINED AT LINE 1409 IN monty.asm
PRTDEC:             0801 DEFINED AT LINE 1483 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
                    > USED AT LINE 1772 IN monty.asm
PRTDEC0:            0810 DEFINED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1485 IN monty.asm
PRTDEC1:            0832 DEFINED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1500 IN monty.asm
                    > USED AT LINE 1502 IN monty.asm
                    > USED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1507 IN monty.asm
PRTDEC2:            0834 DEFINED AT LINE 1512 IN monty.asm
                    > USED AT LINE 1515 IN monty.asm
PRTDEC3:            0844 DEFINED AT LINE 1524 IN monty.asm
                    > USED AT LINE 1519 IN monty.asm
PRTDEC4:            0845 DEFINED AT LINE 1526 IN monty.asm
                    > USED AT LINE 1523 IN monty.asm
PRTHEX:             0849 DEFINED AT LINE 1530 IN monty.asm
                    > USED AT LINE 777 IN monty.asm
PRTHEX2:            0854 DEFINED AT LINE 1538 IN monty.asm
                    > USED AT LINE 1533 IN monty.asm
                    > USED AT LINE 1535 IN monty.asm
PRTHEX3:            085D DEFINED AT LINE 1546 IN monty.asm
                    > USED AT LINE 1544 IN monty.asm
PRTSTR0:            0868 DEFINED AT LINE 1554 IN monty.asm
                    > USED AT LINE 1560 IN monty.asm
PRTSTR:             086C DEFINED AT LINE 1557 IN monty.asm
                    > USED AT LINE 782 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
NESTING:            0871 DEFINED AT LINE 1573 IN monty.asm
                    > USED AT LINE 1686 IN monty.asm
                    > USED AT LINE 1727 IN monty.asm
NESTING0:           087B DEFINED AT LINE 1579 IN monty.asm
                    > USED AT LINE 1575 IN monty.asm
                    > USED AT LINE 1577 IN monty.asm
NESTING1A:          0882 DEFINED AT LINE 1584 IN monty.asm
                    > USED AT LINE 1581 IN monty.asm
NESTING1:           0885 DEFINED AT LINE 1587 IN monty.asm
                    > USED AT LINE 1578 IN monty.asm
NESTING2:           0894 DEFINED AT LINE 1596 IN monty.asm
                    > USED AT LINE 1591 IN monty.asm
                    > USED AT LINE 1593 IN monty.asm
NESTING3:           0896 DEFINED AT LINE 1599 IN monty.asm
                    > USED AT LINE 1595 IN monty.asm
NESTING4:           08A1 DEFINED AT LINE 1606 IN monty.asm
                    > USED AT LINE 1601 IN monty.asm
                    > USED AT LINE 1603 IN monty.asm
PROMPT:             08A3 DEFINED AT LINE 1610 IN monty.asm
                    > USED AT LINE 1670 IN monty.asm
CRLF:               08AC DEFINED AT LINE 1615 IN monty.asm
                    > USED AT LINE 1739 IN monty.asm
PRINTSTR:           08B3 DEFINED AT LINE 1622 IN monty.asm
                    > USED AT LINE 1611 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
                    > USED AT LINE 1666 IN monty.asm
                    > USED AT LINE 1770 IN monty.asm
EXECSTR:            08BA DEFINED AT LINE 1631 IN monty.asm
CALL:               08C5 DEFINED AT LINE 1642 IN monty.asm
INIT:               08C7 DEFINED AT LINE 1647 IN monty.asm
                    > USED AT LINE 7
                    > USED AT LINE 1665 IN monty.asm
INIT0:              08E0 DEFINED AT LINE 1657 IN monty.asm
                    > USED AT LINE 1660 IN monty.asm
START:              08E5 DEFINED AT LINE 1663 IN monty.asm
                    > USED AT LINE 8
INTERPRET:          08FB DEFINED AT LINE 1669 IN monty.asm
                    > USED AT LINE 1764 IN monty.asm
                    > USED AT LINE 1773 IN monty.asm
INTERPRET2:         0905 DEFINED AT LINE 1675 IN monty.asm
                    > USED AT LINE 1719 IN monty.asm
INTERPRET3:         090D DEFINED AT LINE 1682 IN monty.asm
                    > USED AT LINE 1691 IN monty.asm
INTERPRET4:         0913 DEFINED AT LINE 1688 IN monty.asm
                    > USED AT LINE 1680 IN monty.asm
INTERPRET5:         0918 DEFINED AT LINE 1694 IN monty.asm
                    > USED AT LINE 1728 IN monty.asm
                    > USED AT LINE 1742 IN monty.asm
INTERPRET6:         0929 DEFINED AT LINE 1721 IN monty.asm
                    > USED AT LINE 1697 IN monty.asm
INTERPRET7:         0937 DEFINED AT LINE 1730 IN monty.asm
                    > USED AT LINE 1702 IN monty.asm
INTERPRET8:         094A DEFINED AT LINE 1744 IN monty.asm
                    > USED AT LINE 1700 IN monty.asm
NEXT:               0952 DEFINED AT LINE 1750 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1754 IN monty.asm
NEXT1:              0961 DEFINED AT LINE 1761 IN monty.asm
                    > USED AT LINE 1755 IN monty.asm
EXIT_:              0968 DEFINED AT LINE 1765 IN monty.asm
                    > USED AT LINE 1763 IN monty.asm
ERROR:              096B DEFINED AT LINE 1769 IN monty.asm
                    > USED AT LINE 1175 IN monty.asm
STACK:              0A80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 872 IN monty.asm
                    > USED AT LINE 1649 IN monty.asm
                    > USED AT LINE 1664 IN monty.asm
VARS:               0B00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1654 IN monty.asm
RESTARTS:           0BD0 DEFINED AT LINE 11 IN ram.asm
RST08:              0BD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0BD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0BD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0BD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0BD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0BDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0BDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0BDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0BE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0BE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            0BE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0BE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1651 IN monty.asm
VDATAWIDTH:         0BE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 548 IN monty.asm
                    > USED AT LINE 584 IN monty.asm
                    > USED AT LINE 609 IN monty.asm
                    > USED AT LINE 1201 IN monty.asm
VTIBPTR:            0BE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1673 IN monty.asm
                    > USED AT LINE 1745 IN monty.asm
VNEXT:              0BEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1648 IN monty.asm
VHEAPPTR:           0BEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 435 IN monty.asm
                    > USED AT LINE 466 IN monty.asm
                    > USED AT LINE 538 IN monty.asm
                    > USED AT LINE 570 IN monty.asm
                    > USED AT LINE 571 IN monty.asm
                    > USED AT LINE 674 IN monty.asm
                    > USED AT LINE 677 IN monty.asm
                    > USED AT LINE 1111 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
                    > USED AT LINE 1266 IN monty.asm
                    > USED AT LINE 1276 IN monty.asm
                    > USED AT LINE 1278 IN monty.asm
VBLOCKEND:          0BEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           0BF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 345 IN monty.asm
                    > USED AT LINE 347 IN monty.asm
                    > USED AT LINE 348 IN monty.asm
                    > USED AT LINE 420 IN monty.asm
                    > USED AT LINE 591 IN monty.asm
                    > USED AT LINE 607 IN monty.asm
                    > USED AT LINE 975 IN monty.asm
VHASHSTR:           0BF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           0BF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            0BF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 331 IN monty.asm
                    > USED AT LINE 1068 IN monty.asm
VTEMP1:             0BF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 531 IN monty.asm
                    > USED AT LINE 572 IN monty.asm
                    > USED AT LINE 669 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
VTEMP2:             0BFA DEFINED AT LINE 42 IN ram.asm
TBPTR:              0BFC DEFINED AT LINE 43 IN ram.asm
TIB:                0C00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1679 IN monty.asm
                    > USED AT LINE 1722 IN monty.asm
                    > USED AT LINE 1731 IN monty.asm
                    > USED AT LINE 1746 IN monty.asm
PAD:                0D00 DEFINED AT LINE 49 IN ram.asm
HEAP:               0E00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 662 IN monty.asm
