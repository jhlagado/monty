0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 DD 0E               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   F9                     DB   lsb(bang_)   ; !
0181   2B                     DB   lsb(dquote_)   ; "
0182   C3                     DB   lsb(hash_)   ; #
0183   37                     DB   lsb(dollar_)   ; $
0184   19                     DB   lsb(percent_)   ; %
0185   A1                     DB   lsb(amper_)   ; &
0186   1F                     DB   lsb(quote_)   ; '
0187   45                     DB   lsb(lparen_)   ; (
0188   3D                     DB   lsb(rparen_)   ; )
0189   F5                     DB   lsb(star_)   ; *
018A   DB                     DB   lsb(plus_)   ; +
018B   28                     DB   lsb(comma_)   ; ,
018C   F7                     DB   lsb(minus_)   ; -
018D   22                     DB   lsb(dot_)   ; .
018E   34                     DB   lsb(slash_)   ; /	
018F   11                     DB   lsb(num_)   ; 0
0190   11                     DB   lsb(num_)   ; 1
0191   11                     DB   lsb(num_)   ; 2
0192   11                     DB   lsb(num_)   ; 3
0193   11                     DB   lsb(num_)   ; 4
0194   11                     DB   lsb(num_)   ; 5
0195   11                     DB   lsb(num_)   ; 6
0196   11                     DB   lsb(num_)   ; 7
0197   11                     DB   lsb(num_)   ; 8
0198   11                     DB   lsb(num_)   ; 9
0199   6F                     DB   lsb(colon_)   ; :
019A   5B                     DB   lsb(semicolon_)   ; ;
019B   FF                     DB   lsb(lt_)   ; <
019C   FB                     DB   lsb(eq_)   ; =
019D   FD                     DB   lsb(gt_)   ; >
019E   3A                     DB   lsb(question_)   ; ?
019F   04                     DB   lsb(at_)   ; @
01A0   AC                     DB   lsb(upcase_)   ; A
01A1   AC                     DB   lsb(upcase_)   ; B
01A2   AC                     DB   lsb(upcase_)   ; C
01A3   AC                     DB   lsb(upcase_)   ; D
01A4   AC                     DB   lsb(upcase_)   ; E
01A5   AC                     DB   lsb(upcase_)   ; F
01A6   AC                     DB   lsb(upcase_)   ; G
01A7   AC                     DB   lsb(upcase_)   ; h
01A8   AC                     DB   lsb(upcase_)   ; I
01A9   AC                     DB   lsb(upcase_)   ; J
01AA   AC                     DB   lsb(upcase_)   ; K
01AB   AC                     DB   lsb(upcase_)   ; L
01AC   AC                     DB   lsb(upcase_)   ; M
01AD   AC                     DB   lsb(upcase_)   ; N
01AE   AC                     DB   lsb(upcase_)   ; O
01AF   AC                     DB   lsb(upcase_)   ; p
01B0   AC                     DB   lsb(upcase_)   ; Q
01B1   AC                     DB   lsb(upcase_)   ; R
01B2   AC                     DB   lsb(upcase_)   ; S
01B3   AC                     DB   lsb(upcase_)   ; T
01B4   AC                     DB   lsb(upcase_)   ; U
01B5   AC                     DB   lsb(upcase_)   ; V
01B6   AC                     DB   lsb(upcase_)   ; W
01B7   AC                     DB   lsb(upcase_)   ; X
01B8   AC                     DB   lsb(upcase_)   ; Y
01B9   AC                     DB   lsb(upcase_)   ; Z
01BA   85                     DB   lsb(lbrack_)   ; [
01BB   0E                     DB   lsb(backslash_)   ; \
01BC   16                     DB   lsb(rbrack_)   ; ]
01BD   25                     DB   lsb(caret_)   ; ^
01BE   31                     DB   lsb(underscore_)   ; _
01BF   2E                     DB   lsb(grave_)   ; `     used for testing string   	
01C0   B1                     DB   lsb(lowcase_)   ; a
01C1   B1                     DB   lsb(lowcase_)   ; b
01C2   B1                     DB   lsb(lowcase_)   ; c
01C3   B1                     DB   lsb(lowcase_)   ; d
01C4   B1                     DB   lsb(lowcase_)   ; e
01C5   B1                     DB   lsb(lowcase_)   ; f
01C6   B1                     DB   lsb(lowcase_)   ; g
01C7   B1                     DB   lsb(lowcase_)   ; h
01C8   B1                     DB   lsb(lowcase_)   ; i
01C9   B1                     DB   lsb(lowcase_)   ; j
01CA   B1                     DB   lsb(lowcase_)   ; k
01CB   B1                     DB   lsb(lowcase_)   ; l
01CC   B1                     DB   lsb(lowcase_)   ; m
01CD   B1                     DB   lsb(lowcase_)   ; n
01CE   B1                     DB   lsb(lowcase_)   ; o
01CF   B1                     DB   lsb(lowcase_)   ; p
01D0   B1                     DB   lsb(lowcase_)   ; q
01D1   B1                     DB   lsb(lowcase_)   ; r
01D2   B1                     DB   lsb(lowcase_)   ; s
01D3   B1                     DB   lsb(lowcase_)   ; t
01D4   B1                     DB   lsb(lowcase_)   ; u
01D5   B1                     DB   lsb(lowcase_)   ; v
01D6   B1                     DB   lsb(lowcase_)   ; w
01D7   B1                     DB   lsb(lowcase_)   ; x
01D8   B1                     DB   lsb(lowcase_)   ; y
01D9   B1                     DB   lsb(lowcase_)   ; z
01DA   45                     DB   lsb(lbrace_)   ; {
01DB   52                     DB   lsb(pipe_)   ; |
01DC   1C                     DB   lsb(rbrace_)   ; }
01DD   4A                     DB   lsb(tilde_)   ; ~
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E0   0A 00                  DW   10   ; vNumBase = 10
01E2   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E4   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E6   69 0F                  DW   next   ; nNext
01E8   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01EA   00 00                  DW   0   ; vRecur
01EC   00 00                  DW   0   ; vDefine
01EE   00 00                  DW   0   ; vStrMode
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                             ; @ addr
0204                             ; -- ptr
0204                AT_:         
0204                ADDR:        
0204   ED 5B F8 23            LD   de,(vPointer)   
0208   21 F8 23               LD   hl,vPointer   
020B   C3 BE 07               JP   variable   
020E                BACKSLASH_:      
020E   C3 01 04               JP   backslash   
0211                NUM_:        
0211   C3 22 04               JP   num   
0214                NOP_:        
0214   DD E9                  JP   (ix)   
0216                RBRACK_:      
0216   C3 41 0B               JP   rbrack   
0219                PERCENT_:      
0219   C3 82 04               JP   percent   
021C                RBRACE_:      
021C   C3 91 0B               JP   rbrace   
021F                QUOTE_:      
021F   C3 68 04               JP   quote   
0222                DOT_:        
0222   C3 00 05               JP   dot   
0225                CARET_:      
0225   C3 FE 0B               JP   caret   
0228                COMMA_:      
0228   C3 3F 0B               JP   comma   
022B                DQUOTE_:      
022B   C3 68 04               JP   dquote   
022E                GRAVE_:      
022E   C3 52 04               JP   grave   
0231                UNDERSCORE_:      
0231   C3 3F 0B               JP   underscore   
0234                SLASH_:      
0234   C3 00 06               JP   slash   
0237                DOLLAR_:      
0237   C3 CB 03               JP   dollar   
023A                QUESTION_:      
023A   C3 E8 03               JP   question   
023D                             ;                               4
023D                RPAREN_:      
023D                RPAREN:      
023D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0240   FD 46 09               LD   b,(iy+9)   
0243   DD E9                  JP   (ix)   
0245                             ; { block start                 ; 4
0245                             ; -- block*
0245                LPAREN_:      
0245                LBRACE_:      
0245                LBRACE:      
0245   CD FD 0C               CALL   parseBlock   
0248   DD E9                  JP   (ix)   
024A                             ; ~ char                        8
024A                TILDE_:      
024A                TILDE:       
024A                CHAR:        
024A   03                     INC   bc   ; point to next char
024B   0A                     LD   a,(bc)   
024C   6F                     LD   l,a   
024D   26 00                  LD   h,0   
024F   E5                     PUSH   hl   
0250   DD E9                  JP   (ix)   
0252                             ; & and                          11
0252                             ; a b -- c
0252                PIPE_:       
0252                PIPE:        
0252                OR:          
0252   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
0253   E1                     POP   hl   
0254   7B                     LD   a,e   
0255   B5                     OR   l   
0256   6F                     LD   l,a   
0257   7A                     LD   a,d   
0258   B4                     OR   h   
0259   18 4D                  JR   and1   
025B                             ; := define                     12
025B                SEMICOLON_:      
025B                SEMICOLON:      
025B                DEFINEEND:      
025B   2A F4 23               LD   hl,(vDefine)   ; hl = define*
025E   7D                     LD   a,l   
025F   B4                     OR   h   
0260   28 0B                  JR   z,defineEnd1   
0262   11 00 00               LD   de,NUL   ; set vDefine=NUL
0265   ED 53 F4 23            LD   (vDefine),de   
0269   D1                     POP   de   ; de = value
026A   C3 40 03               JP   assign1   
026D                DEFINEEND1:      
026D   DD E9                  JP   (ix)   
026F                             ; _ func                        14
026F                             ; -- func*
026F                COLON_:      
026F                COLON:       
026F   03                     INC   bc   ; arg_list must ve immediately followed by {
0270   0A                     LD   a,(bc)   
0271   FE 3D                  CP   "="   ; := definition
0273   28 07                  JR   z,defineStart   
0275   0B                     DEC   bc   
0276   21 01 00               LD   hl,1   
0279   C3 88 0F               JP   error   
027C                DEFINESTART:      
027C   E1                     POP   hl   ; discard variable value
027D   2A F8 23               LD   hl,(vPointer)   ; vDefine = vPointer
0280   22 F4 23               LD   (vDefine),hl   
0283   DD E9                  JP   (ix)   
0285                             ; [                             14
0285                LBRACK_:      
0285                LBRACK:      
0285                ARRAYSTART:      
0285   11 00 00               LD   de,0   ; create stack frame
0288   D5                     PUSH   de   ; push null for IP
0289   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
028C   FD 56 05               LD   d,(iy+5)   ; 
028F   D5                     PUSH   de   ; 
0290   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0293   FD 56 03               LD   d,(iy+3)   ; 
0296   D5                     PUSH   de   ; 
0297   FD E5                  PUSH   iy   ; push BP
0299   FD 21 00 00            LD   iy,0   ; BP = SP
029D   FD 39                  ADD   iy,sp   
029F   DD E9                  JP   (ix)   
02A1                             ; & and                          14
02A1                             ; a b -- c
02A1                AMPER_:      
02A1                AMPER:       
02A1                AND:         
02A1   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
02A2   E1                     POP   hl   
02A3   7B                     LD   a,e   
02A4   A5                     AND   l   
02A5   6F                     LD   l,a   
02A6   7A                     LD   a,d   
02A7   A4                     AND   h   
02A8                AND1:        
02A8   67                     LD   h,a   
02A9   E5                     PUSH   hl   
02AA   DD E9                  JP   (ix)   
02AC                             ;                               18
02AC                UPCASE_:      
02AC                UPCASE:      
02AC   0A                     LD   a,(bc)   ; a = identifier char
02AD   D6 41                  SUB   "A"   ; "A" = 0
02AF   18 05                  JR   ident1   
02B1                LOWCASE_:      
02B1                LOWCASE:      
02B1   0A                     LD   a,(bc)   
02B2   D6 61                  SUB   "a"   
02B4   C6 1A                  ADD   a,26   
02B6                IDENT1:      
02B6   87                     ADD   a,a   ; l = a * 2
02B7   6F                     LD   l,a   
02B8   26 23                  LD   h,msb(vars)   
02BA   22 F8 23               LD   (vPointer),hl   ; store address in setter
02BD   5E                     LD   e,(hl)   
02BE   23                     INC   hl   
02BF   56                     LD   d,(hl)   
02C0   D5                     PUSH   de   
02C1   DD E9                  JP   (ix)   
02C3                             ; index of an array, based on vDataWidth 22
02C3                             ; array* num -- value    ; also sets vPointer to address
02C3                HASH_:       
02C3                HASH:        
02C3                ARRAYINDEX:      
02C3   E1                     POP   hl   ; hl = index
02C4   D1                     POP   de   ; de = array
02C5   3A E6 23               LD   a,(vDataWidth)   ; a = data width
02C8   3D                     DEC   a   
02C9   28 01                  JR   z,arrayIndex1   
02CB                ARRAYINDEX0:      
02CB   29                     ADD   hl,hl   ; if data width = 2 then double
02CC                ARRAYINDEX1:      
02CC   19                     ADD   hl,de   ; add addr
02CD   22 F8 23               LD   (vPointer),hl   ; store address in setter
02D0   16 00                  LD   d,0   
02D2   5E                     LD   e,(hl)   
02D3   B7                     OR   a   ; check data width again
02D4   28 02                  JR   z,arrayIndex2   
02D6   23                     INC   hl   
02D7   56                     LD   d,(hl)   
02D8                ARRAYINDEX2:      
02D8   D5                     PUSH   de   
02D9   DD E9                  JP   (ix)   
02DB                PLUS_:       
02DB                             ; + add                         25
02DB                             ; a b -- c
02DB                PLUS:        
02DB                ADD:         
02DB   03                     INC   bc   
02DC   0A                     LD   a,(bc)   
02DD   FE 2B                  CP   "+"   ; ++ increment variable
02DF   20 04                  JR   nz,add1   
02E1   E1                     POP   hl   
02E2   23                     INC   hl   
02E3   18 57                  JR   assign0   
02E5                ADD1:        
02E5   0B                     DEC   bc   
02E6   D1                     POP   de   ; second term
02E7   E1                     POP   hl   ; first term
02E8   19                     ADD   hl,de   
02E9                ADD3:        
02E9   03                     INC   bc   
02EA   0A                     LD   a,(bc)   
02EB   FE 3D                  CP   "="   
02ED   28 04                  JR   z,add4   
02EF   0B                     DEC   bc   
02F0   E5                     PUSH   hl   
02F1   DD E9                  JP   (ix)   
02F3                ADD4:        
02F3   18 47                  JR   assign0   
02F5                STAR_:       
02F5   18 0A                  JR   star   
02F7                MINUS_:      
02F7   18 24                  JR   minus   
02F9                BANG_:       
02F9   18 50                  JR   bang   
02FB                EQ_:         
02FB   18 5E                  JR   eq   
02FD                GT_:         
02FD   18 69                  JR   gt   
02FF                LT_:         
02FF   18 71                  JR   lt   
0301                             ;********************** PAGE 2 END *********************************************
0301                             ;********************** PAGE 3,4 BEGIN (shorter ops) *****************************
0301                             ;                               21
0301                STAR:        
0301                MUL:         
0301   D1                     POP   de   ; get first value
0302   E1                     POP   hl   
0303                MUL2:        
0303   C5                     PUSH   bc   ; Preserve the IP
0304   44 4D                  LD   bc,hl   ; bc = 2nd value
0306   21 00 00               LD   hl,0   
0309   3E 10                  LD   a,16   
030B                MUL3:        
030B   29                     ADD   hl,hl   
030C   CB 13                  RL   e   
030E   CB 12                  RL   d   
0310   30 04                  JR   nc,$+6   
0312   09                     ADD   hl,bc   
0313   30 01                  JR   nc,$+3   
0315   13                     INC   de   
0316   3D                     DEC   a   
0317   20 F2                  JR   nz,mul3   
0319   C1                     POP   bc   ; Restore the IP
031A   C3 E9 02               JP   add3   
031D                             ; - sub                          23
031D                             ; a b -- c
031D                MINUS:       
031D   03                     INC   bc   ; check if sign of a number
031E   0A                     LD   a,(bc)   
031F   0B                     DEC   bc   
0320   FE 30                  CP   "0"   
0322   38 05                  JR   c,sub   
0324   FE 3A                  CP   "9"+1   
0326   DA 22 04               JP   c,num   
0329                SUB:         ; Subtract the value 2nd on stack from top of stack
0329   03                     INC   bc   
032A   FE 2D                  CP   "-"   
032C   20 04                  JR   nz,sub1   
032E   E1                     POP   hl   
032F   2B                     DEC   hl   
0330   18 0A                  JR   assign0   
0332                SUB1:        
0332   0B                     DEC   bc   
0333   D1                     POP   de   
0334   E1                     POP   hl   
0335   B7                     OR   a   
0336   ED 52                  SBC   hl,de   
0338   18 AF                  JR   add3   
033A                             ; value _oldValue --            ; uses address in vPointer 15
033A                ASSIGN:      
033A   E1                     POP   hl   ; discard last accessed value
033B   E1                     POP   hl   ; hl = new value
033C                ASSIGN0:      
033C   EB                     EX   de,hl   ; de = new value
033D   2A F8 23               LD   hl,(vPointer)   
0340                ASSIGN1:      ; entry point from defineEnd
0340   73                     LD   (hl),e   
0341   3A E6 23               LD   a,(vDataWidth)   
0344   3D                     DEC   a   ; is it byte?
0345   28 02                  JR   z,assign2   
0347   23                     INC   hl   
0348   72                     LD   (hl),d   
0349                ASSIGN2:      
0349   DD E9                  JP   (ix)   
034B                BANG:        ; logical invert, any non zero value
034B   03                     INC   bc   
034C   0A                     LD   a,(bc)   
034D   FE 3D                  CP   "="   
034F   20 04                  JR   nz,not   
0351   E1                     POP   hl   
0352   D1                     POP   de   
0353   18 33                  JR   notequals   
0355                NOT:         
0355   0B                     DEC   bc   
0356   21 00 00               LD   hl,0   ; is considered true
0359   18 0A                  JR   eq1   
035B                EQ:          
035B   03                     INC   bc   
035C   0A                     LD   a,(bc)   
035D   FE 3D                  CP   "="   
035F   28 03                  JR   z,eq0   
0361   0B                     DEC   bc   
0362   18 D6                  JR   assign   
0364                EQ0:         
0364   E1                     POP   hl   
0365                EQ1:         
0365   D1                     POP   de   
0366   18 19                  JR   equals   
0368                GT:          
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   28 4A                  JR   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 08                  JR   lt1   
0372                LT:          
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   28 30                  JR   z,shiftLeft   
0378   E1                     POP   hl   
0379   D1                     POP   de   
037A                LT1:         
037A   FE 3D                  CP   "="   
037C   28 11                  JR   z,lessthaneq   
037E   0B                     DEC   bc   
037F   18 13                  JR   lessthan   
0381                             ; hl = value1, de = value2
0381                             ; hl = result
0381                EQUALS:      
0381   B7                     OR   a   ; reset the carry flag
0382   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0384   28 16                  JR   z,true1   
0386   18 1A                  JR   false1   
0388                NOTEQUALS:      
0388   B7                     OR   a   ; reset the carry flag
0389   ED 52                  SBC   hl,de   
038B   20 0F                  JR   nz,true1   
038D   18 13                  JR   false1   
038F                             ; hl = value1 de = value2
038F                             ; hl = result
038F                LESSTHANEQ:      
038F   B7                     OR   a   
0390   ED 52                  SBC   hl,de   
0392   18 05                  JR   lessthan1   
0394                             ; hl = value1 de = value2
0394                             ; hl = result
0394                LESSTHAN:      
0394   B7                     OR   a   
0395   ED 52                  SBC   hl,de   
0397   28 09                  JR   z,false1   
0399                LESSTHAN1:      
0399   FA A2 03               JP   m,false1   
039C                TRUE1:       
039C   21 FF FF               LD   hl,TRUE   
039F   E5                     PUSH   hl   
03A0   DD E9                  JP   (ix)   
03A2                NULL1:       
03A2                FALSE1:      
03A2   21 00 00               LD   hl,FALSE   
03A5   E5                     PUSH   hl   
03A6   DD E9                  JP   (ix)   
03A8                             ; shiftLeft                     15
03A8                             ; value count -- value2          shift left count places
03A8                SHIFTLEFT:      
03A8   50 59                  LD   de,bc   ; save IP
03AA   C1                     POP   bc   ; bc = count
03AB   41                     LD   b,c   ; b = loop counter
03AC   E1                     POP   hl   
03AD   04                     INC   b   ; test for counter=0 case
03AE   18 01                  JR   shiftLeft2   
03B0                SHIFTLEFT1:      
03B0   29                     ADD   hl,hl   ; left shift hl
03B1                SHIFTLEFT2:      
03B1   10 FD                  DJNZ   shiftLeft1   
03B3   E5                     PUSH   hl   
03B4   42 4B                  LD   bc,de   ; restore IP
03B6   DD E9                  JP   (ix)   
03B8                             ; shiftRight                    16
03B8                             ; value count -- value2          shift left count places
03B8                SHIFTRIGHT:      
03B8   50 59                  LD   de,bc   ; save IP
03BA   C1                     POP   bc   ; bc = count
03BB   41                     LD   b,c   ; b = loop counter
03BC   E1                     POP   hl   
03BD   04                     INC   b   ; test for counter=0 case
03BE   18 04                  JR   shiftRight2   
03C0                SHIFTRIGHT1:      
03C0   CB 3C                  SRL   h   ; right shift hl
03C2   CB 1D                  RR   l   
03C4                SHIFTRIGHT2:      
03C4   10 FA                  DJNZ   shiftRight1   
03C6   E5                     PUSH   hl   
03C7   42 4B                  LD   bc,de   ; restore IP
03C9   DD E9                  JP   (ix)   
03CB                             ; $ hex                         ; 22
03CB                DOLLAR:      
03CB                HEXNUM:      
03CB   21 00 00               LD   hl,0   ; Clear hl to accept the number
03CE                HEXNUM1:      
03CE   03                     INC   bc   
03CF   0A                     LD   a,(bc)   ; Get the character which is a numeral
03D0   CB 77                  BIT   6,a   ; is it uppercase alpha?
03D2   28 02                  JR   z,hexnum2   ; no a decimal
03D4   D6 07                  SUB   7   ; sub 7  to make $a - $F
03D6                HEXNUM2:      
03D6   D6 30                  SUB   $30   ; form decimal digit
03D8   DA 44 04               JP   c,num2   
03DB   FE 10                  CP   $0F+1   
03DD   D2 44 04               JP   nc,num2   
03E0   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
03E1   29                     ADD   hl,hl   ; 4X
03E2   29                     ADD   hl,hl   ; 8X
03E3   29                     ADD   hl,hl   ; 16X
03E4   85                     ADD   a,l   ; add into bottom of hl
03E5   6F                     LD   l,a   
03E6   18 E6                  JR   hexnum1   
03E8                             ; if                            23
03E8                             ; condition then -- value
03E8                QUESTION:      
03E8                IF:          
03E8   03                     INC   bc   
03E9   0A                     LD   a,(bc)   
03EA   FE 3F                  CP   "?"   
03EC   28 06                  JR   z,ifte   
03EE   0B                     DEC   bc   
03EF   11 00 00               LD   de,NUL   ; NUL pointer for else
03F2   18 01                  JR   ifte1   
03F4                             ; ifte
03F4                             ; condition then else -- value
03F4                IFTE:        
03F4   D1                     POP   de   ; de = else
03F5                IFTE1:       
03F5   E1                     POP   hl   ; hl = then
03F6   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
03F7   7C                     LD   a,h   
03F8   B5                     OR   l   
03F9   E1                     POP   hl   ; hl = then
03FA   CA FF 0B               JP   z,go1   ; if z de = else
03FD   EB                     EX   de,hl   ; condition = false, de = then
03FE   C3 FF 0B               JP   go1   
0401                             ; \                             19
0401                BACKSLASH:      
0401                LAMBDA:      
0401   DD E5                  PUSH   ix   
0403   CD C7 0C               CALL   parseArgs   
0406                LAMBDA1:      
0406   03                     INC   bc   ; arg_list must ve immediately followed by {
0407   0A                     LD   a,(bc)   
0408   FE 21                  CP   " "+1   ; skip white space
040A   38 FA                  JR   c,lambda1   
040C   FE 7B                  CP   "{"   
040E   28 06                  JR   z,lambda2   
0410   21 02 00               LD   hl,2   ; error 2: parse error
0413   C3 88 0F               JP   error   
0416                LAMBDA2:      
0416   CD FD 0C               CALL   parseBlock   
0419   CD 67 0D               CALL   createFunc   
041C   E1                     POP   hl   
041D   DD E1                  POP   ix   
041F   E5                     PUSH   hl   
0420   DD E9                  JP   (ix)   
0422                             ; 0..9 number                   37
0422                NUM:         
0422   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0425   0A                     LD   a,(bc)   ; Get numeral or -
0426   FE 2D                  CP   "-"   
0428   20 01                  JR   nz,num0   
042A   03                     INC   bc   ; move to next char, no flags affected
042B                NUM0:        
042B   08                     EX   af,af'   ; save zero flag = 0 for later
042C                NUM1:        
042C   0A                     LD   a,(bc)   ; read digit
042D   D6 30                  SUB   "0"   ; less than 0?
042F   38 13                  JR   c,num2   ; not a digit, exit loop
0431   FE 0A                  CP   10   ; greater that 9?
0433   30 0F                  JR   nc,num2   ; not a digit, exit loop
0435   03                     INC   bc   ; inc IP
0436   54 5D                  LD   de,hl   ; multiply hl * 10
0438   29                     ADD   hl,hl   
0439   29                     ADD   hl,hl   
043A   19                     ADD   hl,de   
043B   29                     ADD   hl,hl   
043C   85                     ADD   a,l   ; add digit in a to hl
043D   6F                     LD   l,a   
043E   3E 00                  LD   a,0   
0440   8C                     ADC   a,h   
0441   67                     LD   h,a   
0442   18 E8                  JR   num1   
0444                NUM2:        
0444   0B                     DEC   bc   
0445   08                     EX   af,af'   ; restore zero flag
0446   20 07                  JR   nz,num3   
0448   EB                     EX   de,hl   ; negate the value of hl
0449   21 00 00               LD   hl,0   
044C   B7                     OR   a   ; jump to sub2
044D   ED 52                  SBC   hl,de   
044F                NUM3:        
044F   E5                     PUSH   hl   ; Put the number on the stack
0450   DD E9                  JP   (ix)   ; and process the next character
0452                GRAVE:       
0452                PRINTSTRING:      
0452   03                     INC   bc   ; move to first char
0453   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0457   18 03                  JR   printString1   
0459                PRINTSTRING0:      
0459   12                     LD   (de),a   ; a -> buffer*
045A   13                     INC   de   ; string*++,
045B   03                     INC   bc   
045C                PRINTSTRING1:      
045C   0A                     LD   a,(bc)   ; a <- string*
045D   FE 60                  CP   "`"   ; if ` exit loop
045F   20 F8                  JR   nz,printString0   
0461                             ; inc bc
0461   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0465   C3 19 0B               JP   dotNext   
0468                             ; string                        ;38
0468                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0468                QUOTE:       
0468                DQUOTE:      
0468                STRING:      
0468   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
046B   E5                     PUSH   hl   ; save start of string
046C   0A                     LD   a,(bc)   
046D   5F                     LD   e,a   ; e = matching terminator
046E   03                     INC   bc   ; point to next char
046F   18 03                  JR   string2   
0471                STRING1:      
0471   77                     LD   (hl),a   
0472   23                     INC   hl   ; increase count
0473   03                     INC   bc   ; point to next char
0474                STRING2:      
0474   0A                     LD   a,(bc)   
0475   BB                     CP   e   ; is it the string terminator
0476   28 02                  JR   z,string3   
0478   18 F7                  JR   string1   
047A                STRING3:      
047A   AF                     XOR   a   ; write NUL to terminate string
047B   77                     LD   (hl),a   ; hl = end of string
047C   23                     INC   hl   
047D   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0480   DD E9                  JP   (ix)   
0482                             ; %a .. %z                      43
0482                             ; -- value
0482                             ; returns value of arg
0482                PERCENT:      
0482                ARG:         
0482   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0485   FD 56 05               LD   d,(iy+5)   
0488   EB                     EX   de,hl   
0489   7D                     LD   a,l   ; arg_list* == null, skip
048A   B4                     OR   h   
048B   28 1A                  JR   z,arg0a   
048D   23                     INC   hl   ; a = num_args, hl = arg_list*
048E   7E                     LD   a,(hl)   
048F   23                     INC   hl   
0490   B7                     OR   a   
0491   28 14                  JR   z,arg0a   ; num_args == 0, skip
0493   5F                     LD   e,a   ; e = a = num_args
0494   03                     INC   bc   ; a = next char = dollar_name
0495   0A                     LD   a,(bc)   
0496   C5                     PUSH   bc   ; save IP
0497   43                     LD   b,e   ; b = e = num_args
0498   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
049B   FD 56 03               LD   d,(iy+3)   
049E                ARG0:        
049E   1B                     DEC   de   ; a = dollar_name, de = next arg*
049F   1B                     DEC   de   
04A0   BE                     CP   (hl)   
04A1   28 09                  JR   z,arg1   
04A3   23                     INC   hl   ; hl = next arg_list*
04A4   10 F8                  DJNZ   arg0   
04A6   C1                     POP   bc   ; no match, restore IP
04A7                ARG0A:       
04A7   11 00 00               LD   de,0   ; return 0
04AA   18 08                  JR   arg1a   
04AC                ARG1:        
04AC   C1                     POP   bc   ; restore IP
04AD   EB                     EX   de,hl   ; hl = arg*
04AE   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
04B1   5E                     LD   e,(hl)   
04B2   23                     INC   hl   
04B3   56                     LD   d,(hl)   ; de = arg
04B4                ARG1A:       
04B4   D5                     PUSH   de   ; push arg
04B5   DD E9                  JP   (ix)   
04B7                             ;********************** PAGE 3,4 END *********************************************
04B7                          ALIGN   $100   
0500                             ;********************** PAGE 5X BEGIN *********************************************
0500                             ;                               67
0500                DOT:         
0500   CD 1F 0E               CALL   jumpTable   
0503   61                     DB   "a"   ; .a print array
0504   D1 0A                  DW   dotArray   
0506   63                     DB   "c"   ; .c print char
0507   0F 05                  DW   dotChar   
0509   73                     DB   "s"   ; .s print string
050A   1E 05                  DW   dotString_   
050C   00                     DB   NUL   ; .  print number, fall through
050D   33 05                  DW   dotNumber_   
050F                             ; .c print char
050F                             ; char --
050F                DOTCHAR:      
050F   E1                     POP   hl   ; a = char
0510   7D                     LD   a,l   
0511   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0515   12                     LD   (de),a   
0516   13                     INC   de   
0517   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
051B   C3 19 0B               JP   dotNext   
051E                             ; .s print string
051E                             ; string* --
051E                DOTSTRING_:      
051E   E1                     POP   hl   ; hl = string*
051F   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0523   18 03                  JR   dotString1   
0525                DOTSTRING0:      
0525   12                     LD   (de),a   ; a -> buffer*
0526   13                     INC   de   ; string*++,
0527   23                     INC   hl   
0528                DOTSTRING1:      
0528   7E                     LD   a,(hl)   ; a <- string*
0529   B7                     OR   a   ; if NUL exit loop
052A   20 F9                  JR   nz,dotString0   
052C   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0530   C3 19 0B               JP   dotNext   
0533                             ; . print decimal
0533                             ; value --
0533                DOTNUMBER_:      
0533   3A E8 23               LD   a,(vNumBase)   
0536   FE 10                  CP   16   
0538   CA A4 05               JP   z,dotHex   ; else falls through
053B   C3 3E 05               JP   dotDec   
053E                             ; print decimal                 ; 70
053E                             ; value --
053E                DOTDEC:      
053E   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0542   D9                     EXX      
0543   E1                     POP   hl   ; hl = value
0544   3A E6 23               LD   a,(vDataWidth)   
0547   3D                     DEC   a   
0548   20 02                  JR   nz,dotDecX   
054A   26 00                  LD   h,0   
054C                DOTDECX:      
054C   CD 5B 05               CALL   dotDec0   
054F   D9                     EXX      ; de = buffer*' bc = IP
0550   3E 20                  LD   a," "   ; append space to buffer
0552   12                     LD   (de),a   
0553   13                     INC   de   ; string*++,
0554   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0558   C3 19 0B               JP   dotNext   
055B                             ; hl = value
055B                             ; de' = buffer*
055B                             ; a, bc, de, hl destroyed
055B                DOTDEC0:      
055B   CB 7C                  BIT   7,h   
055D   28 0C                  JR   z,dotDec1   
055F   D9                     EXX      
0560   3E 2D                  LD   a,"-"   
0562   12                     LD   (de),a   
0563   13                     INC   de   
0564   D9                     EXX      
0565   AF                     XOR   a   
0566   95                     SUB   l   
0567   6F                     LD   l,a   
0568   9F                     SBC   a,a   
0569   94                     SUB   h   
056A   67                     LD   h,a   
056B                DOTDEC1:      
056B   0E 00                  LD   c,0   ; leading zeros flag = false
056D   11 F0 D8               LD   de,-10000   
0570   CD 8B 05               CALL   dotDec2   
0573   11 18 FC               LD   de,-1000   
0576   CD 8B 05               CALL   dotDec2   
0579   11 9C FF               LD   de,-100   
057C   CD 8B 05               CALL   dotDec2   
057F   1E F6                  LD   e,-10   
0581   CD 8B 05               CALL   dotDec2   
0584   0C                     INC   c   ; flag = true for at least digit
0585   1E FF                  LD   e,-1   
0587   CD 8B 05               CALL   dotDec2   
058A   C9                     RET      
058B                DOTDEC2:      
058B   06 2F                  LD   b,"0"-1   
058D                DOTDEC3:      
058D   04                     INC   b   
058E   19                     ADD   hl,de   
058F   38 FC                  JR   c,dotDec3   
0591   ED 52                  SBC   hl,de   
0593   3E 30                  LD   a,"0"   
0595   B8                     CP   b   
0596   20 05                  JR   nz,dotDec4   
0598   AF                     XOR   a   
0599   B1                     OR   c   
059A   C8                     RET   z   
059B   18 01                  JR   dotDec5   
059D                DOTDEC4:      
059D   0C                     INC   c   
059E                DOTDEC5:      
059E   78                     LD   a,b   
059F   D9                     EXX      
05A0   12                     LD   (de),a   
05A1   13                     INC   de   
05A2   D9                     EXX      
05A3   C9                     RET      
05A4                             ; buffer hex                    37
05A4                             ; value --
05A4                DOTHEX:      
05A4   E1                     POP   hl   ; hl = value
05A5   ED 5B EC 23            LD   de,(vBufPtr)   
05A9   3E 24                  LD   a,"$"   ; # prefix
05AB   12                     LD   (de),a   
05AC   13                     INC   de   ; string*++,
05AD   3A E6 23               LD   a,(vDataWidth)   
05B0   3D                     DEC   a   
05B1   28 04                  JR   z,dotHex0   
05B3   7C                     LD   a,h   
05B4   CD C6 05               CALL   dotHex1   
05B7                DOTHEX0:      
05B7   7D                     LD   a,l   
05B8   CD C6 05               CALL   dotHex1   
05BB   3E 20                  LD   a," "   ; append space to buffer
05BD   12                     LD   (de),a   
05BE   13                     INC   de   ; string*++,
05BF   ED 53 EC 23            LD   (vBufPtr),de   
05C3   C3 19 0B               JP   dotNext   
05C6                DOTHEX1:      
05C6   F5                     PUSH   af   
05C7   1F                     RRA      
05C8   1F                     RRA      
05C9   1F                     RRA      
05CA   1F                     RRA      
05CB   CD CF 05               CALL   dotHex2   
05CE   F1                     POP   af   
05CF                DOTHEX2:      
05CF   E6 0F                  AND   0x0F   
05D1   C6 90                  ADD   a,0x90   
05D3   27                     DAA      
05D4   CE 40                  ADC   a,0x40   
05D6   27                     DAA      
05D7   12                     LD   (de),a   
05D8   13                     INC   de   ; string*++,
05D9   C9                     RET      
05DA                             ;********************** PAGE 5 END *********************************************
05DA                          ALIGN   $100   
0600                             ;********************** PAGE 6 BEGIN *********************************************
0600                SLASH:       
0600                COMMAND:      
0600   03                     INC   bc   
0601   0A                     LD   a,(bc)   
0602   FE 2F                  CP   "/"   ; // comment
0604   CA 17 07               JP   z,comment   
0607   0B                     DEC   bc   
0608   CD 09 0E               CALL   commandTable   
060B   26                     DB   lsb(command_a_)   
060C   35                     DB   lsb(command_b_)   
060D   B9                     DB   lsb(command_nop_)   
060E   41                     DB   lsb(command_d_)   
060F   B9                     DB   lsb(command_nop_)   
0610   47                     DB   lsb(command_f_)   
0611   B9                     DB   lsb(command_nop_)   
0612   62                     DB   lsb(command_h_)   
0613   68                     DB   lsb(command_i_)   
0614   B9                     DB   lsb(command_nop_)   
0615   6E                     DB   lsb(key_)   
0616   B9                     DB   lsb(command_nop_)   
0617   71                     DB   lsb(command_m_)   
0618   B9                     DB   lsb(command_nop_)   
0619   77                     DB   lsb(output_)   
061A   7A                     DB   lsb(command_p_)   
061B   7D                     DB   lsb(command_q_)   
061C   83                     DB   lsb(command_r_)   
061D   8F                     DB   lsb(command_s_)   
061E   9E                     DB   lsb(true_)   
061F   B9                     DB   lsb(command_nop_)   
0620   A1                     DB   lsb(command_v_)   
0621   B0                     DB   lsb(command_w_)   
0622   B6                     DB   lsb(xor_)   
0623   B9                     DB   lsb(command_nop_)   
0624   B9                     DB   lsb(command_nop_)   
0625   BC                     DB   lsb(command_default_)   
0626                             ; 12
0626                COMMAND_A_:      
0626   62                     DB   "b"   ; /ab absolute
0627   BF 06                  DW   absolute   
0629   64                     DB   "d"   ; /ad address of
062A   CC 06                  DW   addrOf   
062C   69                     DB   "i"   ; /ad address of
062D   51 08                  DW   arrayIter   
062F   73                     DB   "s"   ; /as array size
0630   ED 06                  DW   arraySize   
0632   00                     DB   NUL   
0633   34 07                  DW   error1   
0635                COMMAND_B_:      
0635   62                     DB   "b"   ; /bb bye bye cold boot
0636   D4 0E                  DW   coldStart   
0638   6D                     DB   "m"   ; /bm byte mode
0639   0F 07                  DW   byteMode   
063B   72                     DB   "r"   ; /br break from loop
063C   F5 06                  DW   break   
063E   00                     DB   NUL   
063F   34 07                  DW   error1   
0641                COMMAND_D_:      
0641   62                     DB   "b"   ; /db decimal base
0642   2C 07                  DW   decBase   
0644   00                     DB   NUL   
0645   2C 07                  DW   decBase   ; /d decimal
0647                COMMAND_F_:      
0647   64                     DB   "d"   ; /fd fold
0648   FA 09                  DW   fold   
064A   65                     DB   "e"   ; /fe forEach
064B   4C 0A                  DW   forEach   
064D   73                     DB   "s"   ; /fs funcSrc
064E   98 0A                  DW   funcSrc   
0650   74                     DB   "t"   ; /ft filter
0651   9C 09                  DW   filter   
0653   31                     DB   "1"   
0654   CD 0F                  DW   f1   
0656   32                     DB   "2"   
0657   CD 0F                  DW   f2   
0659   33                     DB   "3"   
065A   CD 0F                  DW   f3   
065C   34                     DB   "4"   
065D   CD 0F                  DW   f4   
065F   00                     DB   NUL   
0660   A2 03                  DW   false1   
0662                COMMAND_H_:      
0662   62                     DB   "b"   ; /hb hex base
0663   3A 07                  DW   hexBase   
0665   00                     DB   NUL   
0666   34 07                  DW   error1   
0668                             ; 6
0668                COMMAND_I_:      
0668   6E                     DB   "n"   ; /in input
0669   40 07                  DW   input   
066B   00                     DB   NUL   
066C   34 07                  DW   error1   
066E                KEY_:        
066E   00                     DB   NUL   
066F   4B 07                  DW   key   
0671                COMMAND_M_:      
0671   70                     DB   "p"   ; /mp map
0672   5A 09                  DW   map   
0674   00                     DB   NUL   
0675   34 07                  DW   error1   
0677                OUTPUT_:      
0677   00                     DB   NUL   
0678   54 07                  DW   output   
067A                             ; 4
067A                COMMAND_P_:      
067A   00                     DB   NUL   
067B   34 07                  DW   error1   
067D                             ; 6
067D                COMMAND_Q_:      
067D   74                     DB   "t"   ; /qt quit
067E   5D 07                  DW   quit   
0680   00                     DB   NUL   
0681   34 07                  DW   error1   
0683                COMMAND_R_:      
0683   63                     DB   "c"   ; /rc tail call optimisation
0684   67 07                  DW   recur   
0686   65                     DB   "e"   ; /re remainder
0687   6D 07                  DW   remain   
0689   67                     DB   "g"   ; /rg range src
068A   D5 07                  DW   rangeSrc   
068C   00                     DB   NUL   
068D   34 07                  DW   error1   
068F                COMMAND_S_:      
068F   62                     DB   "b"   
0690   73 07                  DW   stringBegin   
0692   65                     DB   "e"   
0693   7B 07                  DW   stringEnd   
0695   69                     DB   "i"   
0696   D2 08                  DW   stringIter   
0698   73                     DB   "s"   
0699   AA 07                  DW   stringSize   
069B   00                     DB   NUL   
069C   34 07                  DW   error1   
069E                TRUE_:       
069E   00                     DB   NUL   
069F   9C 03                  DW   true1   
06A1                COMMAND_V_:      
06A1   68                     DB   "h"   
06A2   AC 07                  DW   varHeapPtr   
06A4   74                     DB   "t"   
06A5   B5 07                  DW   varTIBPtr   
06A7   48                     DB   "H"   
06A8   20 07                  DW   constHeapStart   
06AA   54                     DB   "T"   
06AB   26 07                  DW   constTIBStart   
06AD   00                     DB   NUL   
06AE   34 07                  DW   error1   
06B0                COMMAND_W_:      
06B0   6D                     DB   "m"   ; /wm word mode
06B1   C4 07                  DW   wordMode   
06B3   00                     DB   NUL   
06B4   34 07                  DW   error1   
06B6                XOR_:        
06B6   00                     DB   NUL   
06B7   CA 07                  DW   xor   
06B9                             ; 2
06B9                COMMAND_NOP_:      
06B9   00                     DB   NUL   
06BA   14 02                  DW   nop_   
06BC                             ; 3
06BC                COMMAND_DEFAULT_:      
06BC   00                     DB   NUL   
06BD   9D 0C                  DW   div   
06BF                             ;********************** PAGE 6 END *********************************************
06BF                             ; /ab absolute
06BF                             ; num -- num
06BF                ABSOLUTE:      
06BF   E1                     POP   hl   
06C0   CB 7C                  BIT   7,h   
06C2   C8                     RET   z   
06C3   AF                     XOR   a   
06C4   95                     SUB   l   
06C5   6F                     LD   l,a   
06C6   9F                     SBC   a,a   
06C7   94                     SUB   h   
06C8   67                     LD   h,a   
06C9   E5                     PUSH   hl   
06CA   DD E9                  JP   (ix)   
06CC                             ; /ad addrOf                    24
06CC                             ; char -- addr
06CC                ADDROF:      
06CC   E1                     POP   hl   ; a = char
06CD   7D                     LD   a,l   
06CE   FE 7B                  CP   "z"+1   ; if a > z then exit
06D0   30 19                  JR   nc,addrOf2   
06D2   D6 41                  SUB   "A"   ; a - 65
06D4   38 15                  JR   c,addrOf2   ; if < A then exit
06D6   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
06D8   38 06                  JR   c,addrOf1   
06DA   D6 06                  SUB   "a"-("Z"+1)   
06DC   FE 1A                  CP   "Z"-"A"+1   
06DE   38 0B                  JR   c,addrOf2   ; if < a then exit
06E0                ADDROF1:      
06E0   87                     ADD   a,a   ; double a
06E1   21 00 23               LD   hl,VARS   ; hl = VARS + a
06E4   85                     ADD   a,l   
06E5   6F                     LD   l,a   
06E6   3E 00                  LD   a,0   
06E8   8C                     ADC   a,h   
06E9   67                     LD   h,a   
06EA   E5                     PUSH   hl   
06EB                ADDROF2:      
06EB   DD E9                  JP   (ix)   
06ED                             ; /as size of an array, num elements, ignores vDataWidth :-/
06ED                             ; array* -- num
06ED                ARRAYSIZE:      
06ED   E1                     POP   hl   
06EE   2B                     DEC   hl   ; msb size
06EF   56                     LD   d,(hl)   
06F0   2B                     DEC   hl   ; lsb size
06F1   5E                     LD   e,(hl)   
06F2   D5                     PUSH   de   
06F3   DD E9                  JP   (ix)   
06F5                             ; 13
06F5                             ; /br break from loop
06F5                             ; --
06F5                BREAK:       
06F5   E1                     POP   hl   ; hl = condition, break if false
06F6   7D                     LD   a,l   
06F7   B4                     OR   h   
06F8   28 02                  JR   z,break1   
06FA   DD E9                  JP   (ix)   
06FC                BREAK1:      
06FC   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06FE   FD 54                  LD   d,iyh   
0700   21 08 00               LD   hl,8   
0703   19                     ADD   hl,de   
0704   23                     INC   hl   
0705   23                     INC   hl   
0706   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0709   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
070C   C3 91 0B               JP   blockEnd   
070F                             ; /b
070F                BYTEMODE:      
070F   21 01 00               LD   hl,1   
0712                BYTEMODE1:      
0712   22 E6 23               LD   (vDataWidth),hl   
0715   DD E9                  JP   (ix)   
0717                             ; //
0717                COMMENT:      
0717   03                     INC   bc   ; point to next char
0718   0A                     LD   a,(bc)   
0719   FE 20                  CP   " "   ; terminate on any char less than SP
071B   30 FA                  JR   nc,comment   
071D   0B                     DEC   bc   
071E   DD E9                  JP   (ix)   
0720                CONSTHEAPSTART:      
0720   11 22 24               LD   de,HEAP   
0723   C3 C1 07               JP   constant   
0726                CONSTTIBSTART:      
0726   11 00 21               LD   de,TIB   
0729   C3 C1 07               JP   constant   
072C                DECBASE:      
072C   21 0A 00               LD   hl,10   
072F                DECBASE1:      
072F   22 E8 23               LD   (vNumBase),hl   
0732   DD E9                  JP   (ix)   
0734                ERROR1:      
0734   21 01 00               LD   hl,1   ; error 1: unknown command
0737   C3 88 0F               JP   error   
073A                HEXBASE:      
073A   21 10 00               LD   hl,16   
073D   C3 2F 07               JP   decBase1   
0740                             ; Z80 port input
0740                             ; port -- value
0740                INPUT:       
0740   E1                     POP   hl   
0741   59                     LD   e,c   ; save IP
0742   4D                     LD   c,l   
0743   ED 68                  IN   l,(c)   
0745   26 00                  LD   h,0   
0747   4B                     LD   c,e   ; restore IP
0748   E5                     PUSH   hl   
0749   DD E9                  JP   (ix)   
074B                             ; /k                              6
074B                KEY:         
074B   CD 81 00               CALL   getchar   
074E   26 00                  LD   h,0   
0750   6F                     LD   l,a   
0751   E5                     PUSH   hl   
0752   DD E9                  JP   (ix)   
0754                             ; /o Z80 port output
0754                             ; value port --
0754                OUTPUT:      
0754   E1                     POP   hl   
0755   59                     LD   e,c   ; save IP
0756   4D                     LD   c,l   
0757   E1                     POP   hl   
0758   ED 69                  OUT   (c),l   
075A   4B                     LD   c,e   ; restore IP
075B   DD E9                  JP   (ix)   
075D                             ; /qt
075D                             ; bool --
075D                QUIT:        
075D   E1                     POP   hl   ; hl = condition, exit if true
075E   7D                     LD   a,l   
075F   B4                     OR   h   
0760   20 02                  JR   nz,quit1   
0762   DD E9                  JP   (ix)   
0764                QUIT1:       
0764   C3 91 0B               JP   blockEnd   
0767                RECUR:       
0767   E1                     POP   hl   
0768   22 F2 23               LD   (vRecur),hl   
076B   DD E9                  JP   (ix)   
076D                REMAIN:      
076D   2A FA 23               LD   hl,(vRemain)   
0770   E5                     PUSH   hl   
0771   DD E9                  JP   (ix)   
0773                STRINGBEGIN:      
0773   21 FF FF               LD   hl,TRUE   ; string mode = true
0776   22 F6 23               LD   (vStrMode),hl   
0779   18 27                  JR   stringEnd1   ; save hl in vBufPtr
077B                STRINGEND:      
077B   21 00 00               LD   hl,FALSE   ; string mode = false
077E   22 F6 23               LD   (vStrMode),hl   
0781   2A EC 23               LD   hl,(vBufPtr)   ; append NUL to string
0784   AF                     XOR   a   
0785   77                     LD   (hl),a   
0786   23                     INC   hl   ; hl = string_end*
0787   ED 43 04 24            LD   (vTemp1),bc   ; save IP
078B   11 00 22               LD   de,BUFFER   ; de = string*
078E   B7                     OR   a   ; bc = size
078F   ED 52                  SBC   hl,de   
0791   44 4D                  LD   bc,hl   
0793   2A F0 23               LD   hl,(vHeapPtr)   ; hl = hstring*
0796   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
0797   D5                     PUSH   de   ; return hstring*
0798   ED B0                  LDIR      ; copy size bytes from string* to hstring*
079A   ED 53 F0 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
079E   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
07A2                STRINGEND1:      
07A2   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
07A5   22 EC 23               LD   (vBufPtr),hl   
07A8   DD E9                  JP   (ix)   
07AA                STRINGSIZE:      
07AA   DD E9                  JP   (ix)   
07AC                VARHEAPPTR:      
07AC   ED 5B F0 23            LD   de,(vHeapPtr)   
07B0   21 F0 23               LD   hl,vHeapPtr   
07B3   18 09                  JR   variable   
07B5                VARTIBPTR:      
07B5   ED 5B EA 23            LD   de,(vTIBPtr)   
07B9   21 EA 23               LD   hl,vTIBPtr   
07BC   18 00                  JR   variable   
07BE                VARIABLE:      
07BE   22 F8 23               LD   (vPointer),hl   
07C1                CONSTANT:      
07C1   D5                     PUSH   de   
07C2   DD E9                  JP   (ix)   
07C4                             ; /wm
07C4                WORDMODE:      
07C4   21 02 00               LD   hl,2   
07C7   C3 12 07               JP   byteMode1   
07CA                XOR:         
07CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07CB                XOR1:        
07CB   E1                     POP   hl   
07CC   7B                     LD   a,e   
07CD   AD                     XOR   l   
07CE   6F                     LD   l,a   
07CF   7A                     LD   a,d   
07D0   AC                     XOR   h   
07D1   67                     LD   h,a   
07D2   E5                     PUSH   hl   
07D3   DD E9                  JP   (ix)   
07D5                             ;*******************************************************************
07D5                             ; Monty implementations
07D5                             ;*******************************************************************
07D5                             ; /rg rangeSrc
07D5                             ; begin end step -- src
07D5                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07D5                RANGESRC:      ; range source: begin, end, step, local: L
07D5   CD FE 0B               CALL   go   
07D8   00 00                  DW   NUL   
07DA   E4 07                  DW   rangeSrcM_1810S1392   
07DC   DE 07                  DW   $+2   
07DE   01                     DB   1   
07DF   04 62 65 73 4C         .PSTR   "besL"   
07E4                RANGESRCM_1810S1392:      
07E4   7B                     DB   "{"   
07E5   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
07F0   5C 6B 74 7B            DB   "\\kt{"   
07F4   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
07FC   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0802   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
080A   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0812   25 73 20 25 4C 30 23 20 2B 3D DB   "%s %L0# +="   ; inc value of index by step
081C   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0824   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
082B   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: /t index, /f active = false, quit
083F   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
0847   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
084E   7D                     DB   "}"   
084F   7D                     DB   "}"   
0850   00                     DB   0   
0851                             ; /ai arrayIter
0851                             ; array* -- src
0851                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0851                ARRAYITER:      
0851   CD FE 0B               CALL   go   
0854   00 00                  DW   NUL   
0856   5E 08                  DW   arrayIterM_1829S1412   
0858   5A 08                  DW   $+2   
085A   01                     DB   1   
085B   02 61 4C               .PSTR   "aL"   
085E                ARRAYITERM_1829S1412:      
085E   7B                     DB   "{"   
085F   5B 30 20 2F 74 20 25 61 2F 61 73 5D 20 25 4C 3D DB   "[0 /t %a/as] %L="   ; init mutable L [index active size]
086F   5C 6B 74 7B            DB   "\\kt{"   
0873   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
087B   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0881   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0889   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in i
0891   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index
0898   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08A0   25 69 20 25 4C 32 23 20 3C DB   "%i %L2# <"   ; ifte: index < size
08A9   7B 25 61 25 69 23 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a%i# 1}{/f %L1#= 0 2}"   ; ifte: /t value, /f active = false, quit
08C0   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: send to sink note: /rc recur
08C8   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08CF   7D                     DB   "}"   
08D0   7D                     DB   "}"   
08D1   00                     DB   0   
08D2                             ; /si stringIter
08D2                             ; string* -- src
08D2                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08D2                STRINGITER:      
08D2   CD FE 0B               CALL   go   
08D5   00 00                  DW   NUL   
08D7   DF 08                  DW   stringIterM_1848S1432   
08D9   DB 08                  DW   $+2   
08DB   01                     DB   1   
08DC   02 73 4C               .PSTR   "sL"   
08DF                STRINGITERM_1848S1432:      
08DF   7B                     DB   "{"   
08E0   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08EA   5C 6B 74 7B            DB   "\\kt{"   
08EE   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
08F6   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
08FD   25 4C 31 23 21 2F 71 74 DB   "%L1#!/qt"   ; if not active don't send
0905   25 4C 30 23 20 25 69 3D DB   "%L0# %i="   ; store current index in A
090D   25 4C 30 23 20 2B 2B   DB   "%L0# ++"   ; inc value of index by step
0914   2F 62 6D 20 25 73 25 69 23 20 2F 77 6D 20 25 63 3D DB   "/bm %s%i# /wm %c="   ; read byte at i, store in c as word
0925   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
092D   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0934   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1#= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
0948   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0950   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0957   7D                     DB   "}"   
0958   7D                     DB   "}"   
0959   00                     DB   0   
095A                             ; /mp map
095A                             ; src func -- src1
095A                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
095A                MAP:         ; map: source, function
095A   CD FE 0B               CALL   go   
095D   00 00                  DW   NUL   
095F   67 09                  DW   mapM_1868S1454   
0961   63 09                  DW   $+2   
0963   00                     DB   0   
0964   02 73 66               .PSTR   "sf"   
0967                MAPM_1868S1454:      
0967   7B                     DB   "{"   
0968   5C 6B 74 7B            DB   "\\kt{"   
096C   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0974   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0978   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
097D   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0989   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0992   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0999   7D                     DB   "}"   
099A   7D                     DB   "}"   
099B   00                     DB   0   
099C                             ; /ft filter
099C                             ; src pred -- src1
099C                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
099C                FILTER:      ; filter: source, predicate, local: T
099C   CD FE 0B               CALL   go   
099F   00 00                  DW   NUL   
09A1   AA 09                  DW   filterM_1882S1469   
09A3   A5 09                  DW   $+2   
09A5   01                     DB   1   
09A6   03 73 70 54            .PSTR   "spT"   
09AA                FILTERM_1882S1469:      
09AA   7B                     DB   "{"   
09AB   5B 30 5D 25 54 3D      DB   "[0]%T="   
09B1   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09B5   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09B9   5B                     DB   "["   
09BA   7B 25 64 20 25 54 30 23 3D 20 2F 74 7D DB   "{%d %T0#= /t}"   ; case 0: store talkback in T[0], return true
09C7   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09CF   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09D3   5D 25 74 23 5E         DB   "]%t#^"   ; select on %t
09D8   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 23 5E 7D DB   "{%d %t %k^}{0 1 %T0#^}"   ; ifte: true send d to sink, false send 1 to talkback
09EE   3F 3F                  DB   "??"   
09F0   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09F7   7D                     DB   "}"   
09F8   7D                     DB   "}"   
09F9   00                     DB   0   
09FA                             ; /fd fold
09FA                             ; reducer is a function like: \\da00bbLi4u
09FA                             ; src init reducer -- src1
09FA                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
09FA                FOLD:        ; src, init, reducer
09FA   CD FE 0B               CALL   go   
09FD   00 00                  DW   NUL   
09FF   09 0A                  DW   foldM_1901S1489   
0A01   03 0A                  DW   $+2   
0A03   01                     DB   1   
0A04   04 73 69 72 41         .PSTR   "sirA"   
0A09                FOLDM_1901S1489:      
0A09   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A0A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A11   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A15   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A19   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A1E   7B 25 64 20 25 41 30 23 20 25 72 5E 25 41 30 23 3D 20 25 41 30 23 7D 7B 25 64 7D DB   "{%d %A0# %r^%A0#= %A0#}{%d}"   ; ifte: reduce -> acc, acc or data
0A39   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0A42   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A49   7D                     DB   "}"   
0A4A   7D                     DB   "}"   
0A4B   00                     DB   0   
0A4C                             ; /fe forEach
0A4C                             ; src proc --
0A4C                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A4C                FOREACH:      ; forEach: source, procedure, local: T
0A4C   CD FE 0B               CALL   go   
0A4F   00 00                  DW   NUL   
0A51   5A 0A                  DW   forEachM_1915S1504   
0A53   55 0A                  DW   $+2   
0A55   01                     DB   1   
0A56   03 73 70 54            .PSTR   "spT"   
0A5A                FOREACHM_1915S1504:      
0A5A   7B                     DB   "{"   
0A5B   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A61   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A65   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A6D   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A72   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A84   3F 3F                  DB   "??"   ; ifte:
0A86   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0A8F   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A96   7D                     DB   "}"   
0A97   00                     DB   0   
0A98                             ; ; /fs funcSrc
0A98                             ; ; func -- src
0A98                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0A98                FUNCSRC:      ; :f func or block
0A98   CD FE 0B               CALL   go   
0A9B   00 00                  DW   NUL   
0A9D   A4 0A                  DW   funcSrcM_1929S1519   
0A9F   A1 0A                  DW   $+2   
0AA1   00                     DB   0   
0AA2   01 66                  .PSTR   "f"   
0AA4                FUNCSRCM_1929S1519:      
0AA4   7B                     DB   "{"   
0AA5   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AA9   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
0AB1   5C 64 74 7B            DB   "\\dt{"   
0AB5   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
0AC7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0ACE   7D                     DB   "}"   
0ACF   7D                     DB   "}"   
0AD0   00                     DB   0   
0AD1                          ;*Macro unroll: FUNC dotArray, 2, "abc"
0AD1                DOTARRAY:      
0AD1   CD FE 0B               CALL   go   
0AD4   00 00                  DW   NUL   
0AD6   DF 0A                  DW   dotArrayM_1939S1530   
0AD8   DA 0A                  DW   $+2   
0ADA   02                     DB   2   
0ADB   03 61 62 63            .PSTR   "abc"   
0ADF                DOTARRAYM_1939S1530:      
0ADF   7B                     DB   "{"   
0AE0   27 5B 20 27 2E 73 20 25 61 2F 61 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/as%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ']'.s"   
0B17   7D                     DB   "}"   
0B18   00                     DB   0   
0B19                DOTNEXT:      
0B19   3A F6 23               LD   a,(vStrMode)   ; if string mode then exit
0B1C   3C                     INC   a   
0B1D   20 02                  JR   nz,dotNext1   
0B1F   DD E9                  JP   (ix)   
0B21                DOTNEXT1:      
0B21   11 00 22               LD   de,BUFFER   
0B24   2A EC 23               LD   hl,(vBufPtr)   
0B27   B7                     OR   a   ; hl = count, de = vHeapPtr
0B28   ED 52                  SBC   hl,de   
0B2A   C3 33 0B               JP   dotNext3   
0B2D                DOTNEXT2:      
0B2D   1A                     LD   a,(de)   ; print char at char*
0B2E   CD 85 00               CALL   putchar   
0B31   13                     INC   de   ; char*++
0B32   2B                     DEC   hl   ; count--
0B33                DOTNEXT3:      
0B33   7D                     LD   a,l   ; count == 0?
0B34   B4                     OR   h   
0B35   20 F6                  JR   nz,dotNext2   ; if not loop
0B37   21 00 22               LD   hl,BUFFER   ; reset vBufPtr to vHeapPtr
0B3A   22 EC 23               LD   (vBufPtr),hl   
0B3D   DD E9                  JP   (ix)   
0B3F                             ;*******************************************************************
0B3F                             ; unused opcodes (reserved)
0B3F                             ;*******************************************************************
0B3F                UNDERSCORE:      
0B3F                COMMA:       
0B3F   DD E9                  JP   (ix)   
0B41                             ;*******************************************************************
0B41                             ; opcodes continued
0B41                             ;*******************************************************************
0B41                RBRACK:      
0B41                ARRAYEND:      
0B41   FD 54                  LD   d,iyh   ; de = BP
0B43   FD 5D                  LD   e,iyl   
0B45   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0B49   62 6B                  LD   hl,de   ; hl = de = BP
0B4B   B7                     OR   a   
0B4C   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0B4E   CB 3C                  SRL   h   ; 
0B50   CB 1D                  RR   l   
0B52   44 4D                  LD   bc,hl   ; bc = count
0B54   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0B57   71                     LD   (hl),c   ; write num items in length word
0B58   23                     INC   hl   
0B59   70                     LD   (hl),b   
0B5A   23                     INC   hl   ; hl = array[0], bc = count
0B5B                             ; de = BP, hl = array[0], bc = count
0B5B   18 15                  JR   arrayEnd3   
0B5D                ARRAYEND1:      
0B5D   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0B60   77                     LD   (hl),a   ; write lsb of array item
0B61   23                     INC   hl   ; move to msb of array item
0B62   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0B65   3D                     DEC   a   
0B66   28 05                  JR   z,arrayEnd2   
0B68   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0B6B   77                     LD   (hl),a   ; write msb of array item
0B6C   23                     INC   hl   ; move to next word in array
0B6D                ARRAYEND2:      
0B6D   FD 2B                  DEC   iy   ; move to next word on stack
0B6F   FD 2B                  DEC   iy   
0B71   0B                     DEC   bc   ; dec items count
0B72                ARRAYEND3:      
0B72   79                     LD   a,c   ; if not zero loop
0B73   B0                     OR   b   
0B74   20 E7                  JR   nz,arrayEnd1   
0B76   EB                     EX   de,hl   ; de = end of array, hl = BP
0B77   F9                     LD   sp,hl   ; sp = BP
0B78   E1                     POP   hl   ; de = end of array, hl = old BP
0B79   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0B7A   FD 62                  LD   iyh,d   
0B7C   FD 6B                  LD   iyl,e   
0B7E   D1                     POP   de   ; pop arg_list (discard)
0B7F   D1                     POP   de   ; pop first_arg* (discard)
0B80   D1                     POP   de   ; pop IP (discard)
0B81   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0B85   13                     INC   de   
0B86   13                     INC   de   
0B87   D5                     PUSH   de   ; return array[0]
0B88   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0B8B   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0B8F   DD E9                  JP   (ix)   
0B91                             ;                               58
0B91                RBRACE:      
0B91                BLOCKEND:      
0B91   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0B94   FD 56 01               LD   d,(iy+1)   
0B97   ED 53 04 24            LD   (vTemp1),de   
0B9B   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0B9E   FD 56 07               LD   d,(iy+7)   
0BA1   ED 53 06 24            LD   (vTemp2),de   
0BA5   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0BA8   FD 56 03               LD   d,(iy+3)   
0BAB   EB                     EX   de,hl   
0BAC   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0BAF   FD 56 01               LD   d,(iy+1)   
0BB2   13                     INC   de   ; for carry flag <=
0BB3   B7                     OR   a   
0BB4   ED 52                  SBC   hl,de   
0BB6   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0BB8   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0BBA   FD 5D                  LD   e,iyl   
0BBC   21 08 00               LD   hl,8   
0BBF   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0BC0   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0BC1   18 0C                  JR   blockEnd2   
0BC3                BLOCKEND1:      ; same scope
0BC3   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0BC6   FD 56 03               LD   d,(iy+3)   
0BC9   EB                     EX   de,hl   
0BCA   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0BCC   FD 5D                  LD   e,iyl   
0BCE   EB                     EX   de,hl   
0BCF                BLOCKEND2:      
0BCF   44 4D                  LD   bc,hl   ; bc = hl = BP
0BD1   B7                     OR   a   ; hl = BP - SP = count
0BD2   ED 72                  SBC   hl,sp   
0BD4   7D                     LD   a,l   
0BD5   B4                     OR   h   
0BD6   28 09                  JR   z,blockEnd3   
0BD8   C5                     PUSH   bc   ; bc = count, hl = BP
0BD9   44 4D                  LD   bc,hl   
0BDB   E1                     POP   hl   
0BDC   2B                     DEC   hl   ; hl = BP-1
0BDD   1B                     DEC   de   ; de = args*-1
0BDE   ED B8                  LDDR      
0BE0   13                     INC   de   
0BE1                BLOCKEND3:      
0BE1   EB                     EX   de,hl   ; sp = de = new tos*
0BE2   F9                     LD   sp,hl   
0BE3   ED 4B 06 24            LD   bc,(vTemp2)   
0BE7   FD 2A 04 24            LD   iy,(vTemp1)   
0BEB   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
0BEF   7B                     LD   a,e   ; check for NUL
0BF0   B2                     OR   d   
0BF1   20 02                  JR   nz,blockEnd4   
0BF3   DD E9                  JP   (ix)   
0BF5                BLOCKEND4:      
0BF5   21 00 00               LD   hl,0   ; clear recur vector
0BF8   22 F2 23               LD   (vRecur),hl   
0BFB   C3 FF 0B               JP   go1   ; execute de
0BFE                             ; execute a block of code which ends with } 116
0BFE                             ; creates a root scope if BP == stack
0BFE                             ; else uses outer scope
0BFE                CARET:       
0BFE                GO:          
0BFE   D1                     POP   de   ; de = block*
0BFF                GO1:         
0BFF   7B                     LD   a,e   ; if block* == null, exit
0C00   B2                     OR   d   
0C01   20 02                  JR   nz,go2   
0C03   DD E9                  JP   (ix)   
0C05                GO2:         
0C05   1A                     LD   a,(de)   
0C06   FE 7B                  CP   "{"   
0C08   28 06                  JR   z,goBlock   
0C0A   FE 28                  CP   "("   
0C0C   C2 43 0C               JP   nz,goFunc   
0C0F   D5                     PUSH   de   ; push de just before stack frame
0C10                GOBLOCK:      
0C10   ED 53 04 24            LD   (vTemp1),de   ; save de
0C14   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0C17   FD 54                  LD   d,iyh   
0C19   FD 5D                  LD   e,iyl   
0C1B   B7                     OR   a   ; if stack* == BP then this is the root_scope
0C1C   ED 52                  SBC   hl,de   
0C1E   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0C22   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0C23   B4                     OR   h   
0C24   3E 00                  LD   a,0   
0C26   28 6A                  JR   z,goFunc8   
0C28   C5                     PUSH   bc   ; push IP
0C29   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0C2C   FD 46 05               LD   b,(iy+5)   
0C2F   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0C32   FD 66 03               LD   h,(iy+3)   
0C35                GOBLOCK2:      
0C35   C5                     PUSH   bc   ; arg_list*
0C36   E5                     PUSH   hl   ; first_arg*
0C37   FD E5                  PUSH   iy   ; push BP
0C39   FD 21 00 00            LD   iy,0   ; BP = SP
0C3D   FD 39                  ADD   iy,sp   
0C3F                GOBLOCK3:      
0C3F   42 4B                  LD   bc,de   ; bc = de = block*-1
0C41   DD E9                  JP   (ix)   
0C43                GOFUNC:      ; execute func
0C43   EB                     EX   de,hl   ; hl = func*
0C44   5E                     LD   e,(hl)   ; de = partial_array*
0C45   23                     INC   hl   
0C46   56                     LD   d,(hl)   
0C47   23                     INC   hl   
0C48   7B                     LD   a,e   ; if partial_array* == null skip
0C49   B2                     OR   d   
0C4A   28 21                  JR   z,goFunc3   
0C4C   ED 43 04 24            LD   (vTemp1),bc   
0C50   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0C53   EB                     EX   de,hl   ; hl = partial_array*
0C54   2B                     DEC   hl   ; bc = count
0C55   46                     LD   b,(hl)   
0C56   2B                     DEC   hl   
0C57   4E                     LD   c,(hl)   
0C58   23                     INC   hl   ; hl = array data*
0C59   23                     INC   hl   
0C5A   18 06                  JR   goFunc2   ; push each item on stack
0C5C                GOFUNC1:      
0C5C   5E                     LD   e,(hl)   ; de = partial item
0C5D   23                     INC   hl   
0C5E   56                     LD   d,(hl)   
0C5F   23                     INC   hl   
0C60   D5                     PUSH   de   ; push on stack
0C61   0B                     DEC   bc   
0C62                GOFUNC2:      
0C62   79                     LD   a,c   ; if count != 0 then loop
0C63   B0                     OR   b   
0C64   20 F6                  JR   nz,goFunc1   
0C66   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0C6A   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0C6D                GOFUNC3:      
0C6D   5E                     LD   e,(hl)   ; de = block*
0C6E   23                     INC   hl   
0C6F   56                     LD   d,(hl)   
0C70   23                     INC   hl   
0C71   ED 53 04 24            LD   (vTemp1),de   ; save block*
0C75   5E                     LD   e,(hl)   ; de = arg_list*
0C76   23                     INC   hl   
0C77   56                     LD   d,(hl)   
0C78   23                     INC   hl   
0C79   EB                     EX   de,hl   ; hl = arg_list*
0C7A   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0C7E   7D                     LD   a,l   ; if arg_list* == null a = 0
0C7F   B4                     OR   h   
0C80   20 03                  JR   nz,goFunc4   
0C82   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0C83   18 0D                  JR   goFunc8   
0C85                GOFUNC4:      ; allocate locals
0C85   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0C86   18 03                  JR   goFunc6   
0C88                GOFUNC5:      ; loop
0C88   3B                     DEC   sp   
0C89   3B                     DEC   sp   
0C8A   3D                     DEC   a   
0C8B                GOFUNC6:      
0C8B   B7                     OR   a   
0C8C   20 FA                  JR   nz,goFunc5   ; end loop
0C8E                GOFUNC7:      
0C8E   23                     INC   hl   ; a = num_args* x 2
0C8F   7E                     LD   a,(hl)   
0C90   2B                     DEC   hl   
0C91   87                     ADD   a,a   ; a *= 2
0C92                GOFUNC8:      
0C92   C5                     PUSH   bc   ; push IP
0C93   44 4D                  LD   bc,hl   
0C95   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0C98   85                     ADD   a,l   
0C99   6F                     LD   l,a   
0C9A   39                     ADD   hl,sp   
0C9B   18 98                  JR   goBlock2   
0C9D                             ;                               32
0C9D                DIV:         
0C9D   D1                     POP   de   
0C9E   E1                     POP   hl   
0C9F   C5                     PUSH   bc   ; preserve the IP
0CA0   44 4D                  LD   bc,hl   
0CA2   CD AE 0C               CALL   divide   
0CA5   EB                     EX   de,hl   
0CA6   ED 53 FA 23            LD   (vRemain),de   
0CAA   C1                     POP   bc   
0CAB   C3 E9 02               JP   add3   
0CAE                             ; division subroutine.
0CAE                             ; bc: divisor, de: dividend, hl: remainder
0CAE                DIVIDE:      
0CAE   21 00 00               LD   hl,0   ; zero the remainder
0CB1   3E 10                  LD   a,16   ; loop counter
0CB3                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0CB3   CB 21                  SLA   c   
0CB5   CB 10                  RL   b   
0CB7   ED 6A                  ADC   hl,hl   
0CB9   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0CBB   38 03                  JR   c,divide2   
0CBD   0C                     INC   c   
0CBE   18 01                  JR   divide3   
0CC0                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0CC0   19                     ADD   hl,de   
0CC1                DIVIDE3:      
0CC1   3D                     DEC   a   
0CC2   20 EF                  JR   nz,divide1   
0CC4   50 59                  LD   de,bc   ; result from bc to de
0CC6   C9                     RET      
0CC7                             ; arg_list - parses arg_list e.g. ab:c
0CC7                             ; -- arg_list*
0CC7                PARSEARGS:      
0CC7   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0CCA   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0CCD   E5                     PUSH   hl   ; save start of arg_list
0CCE   23                     INC   hl   ; skip length fields to start of string
0CCF   23                     INC   hl   
0CD0   03                     INC   bc   ; point to next char
0CD1                PARSEARGS1:      
0CD1   0A                     LD   a,(bc)   
0CD2   FE 3A                  CP   ":"   ; ":" switches from args to locals
0CD4   20 03                  JR   nz,parseArgs1a   
0CD6   14                     INC   d   ; non zero value local count acts as flag
0CD7   18 10                  JR   parseArgs3   
0CD9                PARSEARGS1A:      
0CD9   FE 61                  CP   "a"   ; < "a" terminates arg_list
0CDB   38 0F                  JR   c,parseArgs4   
0CDD   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0CDF   30 0B                  JR   nc,parseArgs4   
0CE1                PARSEARGS2:      
0CE1   77                     LD   (hl),a   
0CE2   23                     INC   hl   
0CE3   1C                     INC   e   ; increase arg count
0CE4   AF                     XOR   a   
0CE5   B2                     OR   d   
0CE6   28 01                  JR   z,parseArgs3   
0CE8   14                     INC   d   ; if d > 0 increase local count
0CE9                PARSEARGS3:      
0CE9   03                     INC   bc   ; point to next char
0CEA   18 E5                  JR   parseArgs1   
0CEC                PARSEARGS4:      
0CEC   0B                     DEC   bc   
0CED   AF                     XOR   a   
0CEE   B2                     OR   d   
0CEF   28 01                  JR   z,parseArgs5   
0CF1   15                     DEC   d   ; remove initial inc
0CF2                PARSEARGS5:      
0CF2   23                     INC   hl   
0CF3   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0CF6   E1                     POP   hl   ; hl = start of arg_list
0CF7   72                     LD   (hl),d   ; write number of locals at start - 1
0CF8   23                     INC   hl   
0CF9   73                     LD   (hl),e   ; write number of args + locals at start - 2
0CFA   2B                     DEC   hl   
0CFB   E3                     EX   (sp),hl   
0CFC   E9                     JP   (hl)   
0CFD                             ; create block: parses block e.g. 00bbIC4uLi4g
0CFD                             ; -- block*
0CFD                PARSEBLOCK:      
0CFD   C5                     PUSH   bc   ; return pointer to first { of block
0CFE   03                     INC   bc   
0CFF   16 01                  LD   d,1   ; nesting: count first parenthesis
0D01                PARSEBLOCK1:      ; Skip to end of definition
0D01   0A                     LD   a,(bc)   ; Get the next character
0D02   03                     INC   bc   ; Point to next character
0D03   FE 21                  CP   " " + 1   ; ignore whitespace
0D05   38 FA                  JR   c,parseBlock1   
0D07   FE 29                  CP   ")"   
0D09   28 2D                  JR   z,parseBlock4   
0D0B   FE 7D                  CP   "}"   
0D0D   28 29                  JR   z,parseBlock4   
0D0F   FE 5D                  CP   "]"   
0D11   28 25                  JR   z,parseBlock4   
0D13   FE 28                  CP   "("   
0D15   28 16                  JR   z,parseBlock2   
0D17   FE 7B                  CP   "{"   
0D19   28 12                  JR   z,parseBlock2   
0D1B   FE 5B                  CP   "["   
0D1D   28 0E                  JR   z,parseBlock2   
0D1F   FE 27                  CP   "'"   
0D21   28 0D                  JR   z,parseBlock3   
0D23   FE 60                  CP   "`"   
0D25   28 09                  JR   z,parseBlock3   
0D27   FE 22                  CP   DQ   
0D29   28 05                  JR   z,parseBlock3   
0D2B   18 D4                  JR   parseBlock1   
0D2D                PARSEBLOCK2:      
0D2D   14                     INC   d   
0D2E   18 D1                  JR   parseBlock1   
0D30                PARSEBLOCK3:      
0D30   3E 80                  LD   a,$80   
0D32   AA                     XOR   d   
0D33   57                     LD   d,a   
0D34   20 CB                  JR   nz,parseBlock1   
0D36   18 03                  JR   parseBlock5   
0D38                PARSEBLOCK4:      
0D38   15                     DEC   d   
0D39   20 C6                  JR   nz,parseBlock1   ; get the next element
0D3B                PARSEBLOCK5:      
0D3B   60 69                  LD   hl,bc   ; hl = IP
0D3D   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0D40   B7                     OR   a   ; IP - HEAP
0D41   ED 52                  SBC   hl,de   
0D43   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0D45   28 1C                  JR   z,parseBlock6   
0D47   60 69                  LD   hl,bc   ; hl = IP
0D49   D1                     POP   de   ; de = block*
0D4A   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D4E   B7                     OR   a   ; bc = size
0D4F   ED 52                  SBC   hl,de   
0D51   44 4D                  LD   bc,hl   
0D53   EB                     EX   de,hl   ; hl = block* de = heap*
0D54   ED 5B F0 23            LD   de,(vHeapPtr)   
0D58   D5                     PUSH   de   ; return hblock*
0D59   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0D5B   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0D5F   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0D63                PARSEBLOCK6:      
0D63   0B                     DEC   bc   ; balanced, exit
0D64   E1                     POP   hl   ; hl = block*
0D65   E3                     EX   (sp),hl   ; return to caller
0D66   E9                     JP   (hl)   
0D67                             ; create function
0D67                             ; arg_list* block* -- func*
0D67                CREATEFUNC:      
0D67   E1                     POP   hl   ; save retrn address
0D68   22 08 24               LD   (vTemp3),hl   
0D6B   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0D6F   E1                     POP   hl   ; hl = block*
0D70   22 06 24               LD   (vTemp2),hl   ; save block*
0D73   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0D76   FD 56 05               LD   d,(iy+5)   
0D79   7B                     LD   a,e   ; if arg_list == null then make a func
0D7A   B2                     OR   d   
0D7B   20 09                  JR   nz,createFunc0   
0D7D   21 00 00               LD   hl,0   ; partial_array = null
0D80   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D84   18 65                  JR   createFunc5   
0D86                CREATEFUNC0:      
0D86   E1                     POP   hl   ; hl = inner_arg_list*
0D87   E5                     PUSH   hl   ; save inner_arg_list
0D88   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0D8C   7E                     LD   a,(hl)   ; compile inner_num_locals
0D8D   4F                     LD   c,a   ; b = inner_num_locals
0D8E   12                     LD   (de),a   
0D8F   23                     INC   hl   
0D90   13                     INC   de   
0D91   7E                     LD   a,(hl)   ; compile inner_length
0D92   12                     LD   (de),a   
0D93   91                     SUB   c   ; a = inner_num args
0D94   23                     INC   hl   
0D95   13                     INC   de   
0D96   B7                     OR   a   ; compile args if inner_length > 0
0D97   28 05                  JR   z,createFunc1   
0D99   4F                     LD   c,a   ; bc = a
0D9A   06 00                  LD   b,0   
0D9C   ED B0                  LDIR      
0D9E                CREATEFUNC1:      
0D9E   EB                     EX   de,hl   ; hl = outer_arg_list
0D9F   FD 5E 04               LD   e,(iy+4)   
0DA2   FD 56 05               LD   d,(iy+5)   
0DA5   EB                     EX   de,hl   
0DA6   23                     INC   hl   ; a = outer_length
0DA7   7E                     LD   a,(hl)   
0DA8   23                     INC   hl   
0DA9   B7                     OR   a   
0DAA   28 05                  JR   z,createFunc2   
0DAC   4F                     LD   c,a   
0DAD   06 00                  LD   b,0   
0DAF   ED B0                  LDIR      ; append outer_args
0DB1                CREATEFUNC2:      ; a = outer_length
0DB1   47                     LD   b,a   ; b = a = outer_length
0DB2   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0DB5   23                     INC   hl   
0DB6   7E                     LD   a,(hl)   ; add outer_length to new length
0DB7   80                     ADD   a,b   
0DB8   77                     LD   (hl),a   
0DB9   2B                     DEC   hl   
0DBA   78                     LD   a,b   ; save outer_length in a'
0DBB   08                     EX   af,af'   
0DBC   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0DBD   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0DBE   B7                     OR   a   
0DBF   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0DC1   4F                     LD   c,a   ; c = inner_num_locals
0DC2   06 00                  LD   b,0   ; bc = inner_num_locals
0DC4   23                     INC   hl   ; a = inner_length
0DC5   7E                     LD   a,(hl)   
0DC6   91                     SUB   c   ; a = inner_num_args
0DC7   23                     INC   hl   ; hl = inner_arg_chars
0DC8   85                     ADD   a,l   ; hl += a
0DC9   6F                     LD   l,a   
0DCA   3E 00                  LD   a,0   
0DCC   84                     ADD   a,h   
0DCD   67                     LD   h,a   
0DCE   ED B0                  LDIR      ; append inner_locals
0DD0                CREATEFUNC2A:      
0DD0   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0DD1   12                     LD   (de),a   ; compile partial_array length field
0DD2   13                     INC   de   
0DD3   AF                     XOR   a   
0DD4   12                     LD   (de),a   
0DD5   13                     INC   de   
0DD6   D5                     PUSH   de   ; push partial_array*
0DD7   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0DD8   FD 5E 02               LD   e,(iy+2)   
0DDB   FD 56 03               LD   d,(iy+3)   
0DDE   EB                     EX   de,hl   
0DDF                CREATEFUNC3:      
0DDF   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0DE0   4E                     LD   c,(hl)   
0DE1   2B                     DEC   hl   
0DE2   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0DE3   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0DE4   13                     INC   de   
0DE5   79                     LD   a,c   
0DE6   12                     LD   (de),a   
0DE7   13                     INC   de   
0DE8   10 F5                  DJNZ   createFunc3   ; b = outer_length
0DEA                CREATEFUNC4:      
0DEA   E1                     POP   hl   ; hl = partial_array*
0DEB                CREATEFUNC5:      
0DEB   C1                     POP   bc   ; bc = new_arg_list*
0DEC   D5                     PUSH   de   ; return new func*
0DED   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0DEE   73                     LD   (hl),e   ; compile partial_array* to func
0DEF   23                     INC   hl   
0DF0   72                     LD   (hl),d   
0DF1   23                     INC   hl   
0DF2   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0DF6   73                     LD   (hl),e   ; compile block* to func
0DF7   23                     INC   hl   
0DF8   72                     LD   (hl),d   
0DF9   23                     INC   hl   
0DFA   71                     LD   (hl),c   ; compile new_arg_list* to func
0DFB   23                     INC   hl   
0DFC   70                     LD   (hl),b   
0DFD   23                     INC   hl   
0DFE   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0E01   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0E05   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0E08   E9                     JP   (hl)   
0E09                             ;*******************************************************************
0E09                             ; general routines
0E09                             ;*******************************************************************
0E09                             ; followed by a table
0E09                             ; indexed on the 0-25 lowercase letter
0E09                             ; db lsb(addr)
0E09                             ; the final item index 26 matches any other char
0E09                COMMANDTABLE:      
0E09   03                     INC   bc   
0E0A   0A                     LD   a,(bc)   
0E0B   FE 7B                  CP   "z"+1   
0E0D   30 0B                  JR   nc,commandTable2   
0E0F   D6 61                  SUB   "a"   
0E11   38 07                  JR   c,commandTable2   
0E13                COMMANDTABLE1:      
0E13   E1                     POP   hl   
0E14   85                     ADD   a,l   
0E15   6F                     LD   l,a   
0E16   6E                     LD   l,(hl)   ; must have the same msb as the table
0E17   C3 20 0E               JP   jumpTable1   
0E1A                COMMANDTABLE2:      
0E1A   3E 1A                  LD   a,26   
0E1C   0B                     DEC   bc   
0E1D   18 F4                  JR   commandTable1   
0E1F                             ; followed by a table
0E1F                             ; db char
0E1F                             ; dw addr
0E1F                             ; the final item must have char == NUL
0E1F                JUMPTABLE:      
0E1F   E1                     POP   hl   
0E20                JUMPTABLE1:      
0E20   03                     INC   bc   
0E21                JUMPTABLE2:      
0E21   AF                     XOR   a   
0E22   BE                     CP   (hl)   
0E23   20 03                  JR   nz,jumpTable3   
0E25   0B                     DEC   bc   
0E26   18 09                  JR   jumpTable4   
0E28                JUMPTABLE3:      
0E28   0A                     LD   a,(bc)   
0E29   BE                     CP   (hl)   
0E2A   28 05                  JR   z,jumpTable4   
0E2C   23                     INC   hl   
0E2D   23                     INC   hl   
0E2E   23                     INC   hl   
0E2F   18 F0                  JR   jumpTable2   
0E31                JUMPTABLE4:      
0E31   23                     INC   hl   
0E32   5E                     LD   e,(hl)   
0E33   23                     INC   hl   
0E34   56                     LD   d,(hl)   
0E35   EB                     EX   de,hl   
0E36   E9                     JP   (hl)   
0E37                PRTSTR0:      
0E37   CD 85 00               CALL   putchar   
0E3A   23                     INC   hl   
0E3B                PRTSTR:      
0E3B   7E                     LD   a,(hl)   
0E3C   B7                     OR   a   
0E3D   20 F8                  JR   nz,prtstr0   
0E3F   C9                     RET      
0E40                             ; **************************************************************************
0E40                             ; calculate nesting value
0E40                             ; a is char to be tested,
0E40                             ; e is the nesting value (initially 0)
0E40                             ; e is increased by ( and [
0E40                             ; e is decreased by ) and ]
0E40                             ; e has its bit 7 toggled by `
0E40                             ; limited to 127 levels
0E40                             ; **************************************************************************
0E40                NESTING:      
0E40   FE 22                  CP   DQ   ; quote char
0E42   28 06                  JR   z,nesting0   
0E44   FE 60                  CP   "`"   ; quote char
0E46   28 02                  JR   z,nesting0   
0E48   18 0A                  JR   nesting1   
0E4A                NESTING0:      
0E4A   CB 7B                  BIT   7,e   
0E4C   28 03                  JR   z,nesting1a   
0E4E   CB BB                  RES   7,e   
0E50   C9                     RET      
0E51                NESTING1A:      
0E51   CB FB                  SET   7,e   
0E53   C9                     RET      
0E54                NESTING1:      
0E54   CB 7B                  BIT   7,e   
0E56   C0                     RET   nz   
0E57   FE 7B                  CP   "{"   
0E59   28 08                  JR   z,nesting2   
0E5B   FE 5B                  CP   "["   
0E5D   28 04                  JR   z,nesting2   
0E5F   FE 28                  CP   "("   
0E61   20 02                  JR   nz,nesting3   
0E63                NESTING2:      
0E63   1C                     INC   e   
0E64   C9                     RET      
0E65                NESTING3:      
0E65   FE 7D                  CP   "}"   
0E67   28 07                  JR   z,nesting4   
0E69   FE 5D                  CP   "]"   
0E6B   28 03                  JR   z,nesting4   
0E6D   FE 29                  CP   ")"   
0E6F   C0                     RET   nz   
0E70                NESTING4:      
0E70   1D                     DEC   e   
0E71   C9                     RET      
0E72                PROMPT:      
0E72   CD 82 0E               CALL   printStr   
0E75   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0E7A   C9                     RET      
0E7B                CRLF:        
0E7B   CD 82 0E               CALL   printStr   
0E7E   0D 0A 00               .CSTR   "\r\n"   
0E81   C9                     RET      
0E82                             ; prints a null teminated string
0E82                             ; the string should be immediately following the call
0E82                PRINTSTR:      
0E82   E3                     EX   (sp),hl   ; swap			
0E83   CD 3B 0E               CALL   prtstr   
0E86   23                     INC   hl   ; inc past NUL
0E87   E3                     EX   (sp),hl   ; put it back	
0E88   C9                     RET      
0E89                INIT:        
0E89   21 F0 01               LD   hl,titleStr   
0E8C   11 0E 24               LD   de,titleBuf   
0E8F   06 14                  LD   b,20   
0E91                INIT1:       
0E91   1A                     LD   a,(de)   
0E92   BE                     CP   (hl)   
0E93   20 17                  JR   nz,coldBoot0   
0E95   13                     INC   de   
0E96   23                     INC   hl   
0E97   10 F8                  DJNZ   init1   
0E99                WARMINIT:      
0E99   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
0E9D   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
0EA1   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
0EA5   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
0EA9   C3 E3 0E               JP   start1   
0EAC                COLDBOOT0:      
0EAC   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
0EAF   11 0E 24               LD   de,titleBuf   
0EB2   06 14                  LD   b,20   
0EB4   ED B0                  LDIR      
0EB6                COLDINIT:      
0EB6   21 DE 01               LD   hl,isysVars   
0EB9   11 E6 23               LD   de,sysVars   
0EBC   01 12 00               LD   bc,9 * 2   
0EBF   ED B0                  LDIR      
0EC1   21 00 23               LD   hl,vars   ; 52 vars LO HI
0EC4   06 34                  LD   b,26*2   
0EC6   AF                     XOR   a   
0EC7                COLDBOOT1:      
0EC7   77                     LD   (hl),a   
0EC8   23                     INC   hl   
0EC9   10 FC                  DJNZ   coldBoot1   
0ECB   DD 2A EE 23            LD   ix,(vNext)   
0ECF   FD 21 00 21            LD   iy,STACK   
0ED3   C9                     RET      
0ED4                COLDSTART:      
0ED4   31 00 21               LD   sp,STACK   
0ED7   CD AC 0E               CALL   coldBoot0   
0EDA   C3 E3 0E               JP   start1   
0EDD                START:       
0EDD   31 00 21               LD   sp,STACK   ; start Monty
0EE0   CD 89 0E               CALL   init   ; setups
0EE3                START1:      
0EE3   21 0E 24               LD   hl,titleBuf   
0EE6   CD 3B 0E               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0EE9                INTERPRET:      
0EE9   CD 72 0E               CALL   prompt   
0EEC   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0EEF   21 00 21               LD   hl,TIB   
0EF2   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0EF5                INTERPRET2:      ; calculate nesting
0EF5   1E 00                  LD   e,0   ; initilize nesting value
0EF7   C5                     PUSH   bc   ; save offset into TIB,
0EF8                             ; bc is also the count of chars in TIB
0EF8   21 00 21               LD   hl,TIB   ; hl is start of TIB
0EFB   18 0B                  JR   interpret4   
0EFD                INTERPRET3:      
0EFD   3E 33                  LD   a,"3"   
0EFF   CD 85 00               CALL   putchar   
0F02   7E                     LD   a,(hl)   ; a = char in TIB
0F03   23                     INC   hl   ; inc pointer into TIB
0F04   0B                     DEC   bc   ; dec count of chars in TIB
0F05   CD 40 0E               CALL   nesting   ; update nesting value
0F08                INTERPRET4:      
0F08   79                     LD   a,c   ; is count zero?
0F09   B0                     OR   b   
0F0A   20 F1                  JR   nz,interpret3   ; if not loop
0F0C   C1                     POP   bc   ; restore offset into TIB
0F0D                INTERPRET5:      
0F0D   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0F10   FE 20                  CP   $20   ; compare to space
0F12   30 19                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0F14   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0F16                             ; ???? NEEDED?
0F16   28 36                  JR   z,interpret8   
0F18   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0F1A   28 1F                  JR   z,interpret7   ; if anything else its macro/control
0F1C   FE 05                  CP   CTRL_E   
0F1E   CA AA 0F               JP   z,edit_   
0F21   FE 08                  CP   CTRL_H   
0F23   CA 9A 0F               JP   z,backSpace_   
0F26   FE 0A                  CP   CTRL_J   
0F28   CA C0 0F               JP   z,reEdit_   
0F2B                             ; cp CTRL_S
0F2B                             ; jp z,printStack_
0F2B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0F2B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0F2B                             ; DB     lsb(list_)       ; FF  ^L 12
0F2B                             ; DB     lsb(printStack_) ; DLE ^P 16
0F2B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0F2B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0F2B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0F2B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0F2B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0F2B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0F2B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0F2B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0F2B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0F2B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0F2B                INTERPRET5A:      
0F2B                             ; ld (vTIBPtr),bc
0F2B                             ; ld bc,(vTIBPtr)
0F2B   18 C8                  JR   interpret2   
0F2D                INTERPRET6:      
0F2D   21 00 21               LD   hl,TIB   
0F30   09                     ADD   hl,bc   
0F31   77                     LD   (hl),a   ; store the character in textbuf
0F32   03                     INC   bc   
0F33   CD 85 00               CALL   putchar   ; echo character to screen
0F36   CD 40 0E               CALL   nesting   
0F39   18 D2                  JR   interpret5   ; wait for next character
0F3B                INTERPRET7:      
0F3B   21 00 21               LD   hl,TIB   
0F3E   09                     ADD   hl,bc   
0F3F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0F41   23                     INC   hl   
0F42   36 0A                  LD   (hl),"\n"   
0F44   23                     INC   hl   
0F45   03                     INC   bc   
0F46   03                     INC   bc   
0F47   CD 7B 0E               CALL   crlf   ; echo character to screen
0F4A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0F4B   B7                     OR   a   
0F4C   20 BF                  JR   nz,interpret5   
0F4E                INTERPRET8:      
0F4E   21 00 21               LD   hl,TIB   
0F51   09                     ADD   hl,bc   
0F52   22 EA 23               LD   (vTIBPtr),hl   
0F55   01 00 21               LD   bc,TIB   
0F58   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
0F5C   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
0F60   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
0F64   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
0F68   0B                     DEC   bc   
0F69                NEXT:        
0F69   03                     INC   bc   ; Increment the IP
0F6A   0A                     LD   a,(bc)   ; Get the next character and dispatch
0F6B   FE 20                  CP   " "   ; whitespace?
0F6D   28 FA                  JR   z,next   ; space? ignore
0F6F   38 08                  JR   c,next1   
0F71   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
0F73   6F                     LD   l,a   ; index into table
0F74   26 01                  LD   h,msb(opcodes)   ; start address of jump table
0F76   6E                     LD   l,(hl)   ; get low jump address
0F77   24                     INC   h   ; Load h with page after opcodes
0F78   E9                     JP   (hl)   ; Jump to routine
0F79                NEXT1:       
0F79   FE 00                  CP   NUL   ; end of input string?
0F7B   28 03                  JR   z,exit   
0F7D   C3 E9 0E               JP   interpret   ; no, other whitespace, macros?
0F80                EXIT:        
0F80   03                     INC   bc   
0F81   60 69                  LD   hl,bc   
0F83   E9                     JP   (hl)   
0F84                RUN:         
0F84   C1                     POP   bc   
0F85   0B                     DEC   bc   
0F86   DD E9                  JP   (ix)   
0F88                ERROR:       
0F88   E5                     PUSH   hl   
0F89   CD 84 0F               CALL   run   
0F8C   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
0F97   C3 E9 0E               JP   interpret   
0F9A                BACKSPACE_:      
0F9A   79                     LD   a,c   
0F9B   B0                     OR   b   
0F9C   CA F5 0E               JP   z,interpret2   
0F9F   0B                     DEC   bc   
0FA0   CD 82 0E               CALL   printStr   
0FA3   08 20 08 00            .CSTR   "\b \b"   
0FA7   C3 F5 0E               JP   interpret2   
0FAA                             ; edit
0FAA                EDIT_:       
0FAA   CD 84 0F               CALL   run   
0FAD   60 76 61 72 3F 60 20 2F 6B 2F 61 64 20 2E 68 00 DB   "`var?` /k/ad .h",0   
0FBD   C3 E9 0E               JP   interpret   
0FC0                REEDIT_:      
0FC0   C3 E9 0E               JP   interpret   
0FC3                PRINTSTACK_:      
0FC3   CD 84 0F               CALL   run   
0FC6   2F 70 6B 00            .CSTR   "/pk"   
0FCA   C3 E9 0E               JP   interpret   
0FCD                             ; editDef:
0FCD                             ;     pop hl                      ; pop ret address
0FCD                             ;     ex (sp),hl                  ; swap with TOS
0FCD                             ;     push hl                     ; dup TOS
0FCD                             ;     ld a,l                      ; a = ident
0FCD                             ;     ld de,TIB                   ; de = start of TIB
0FCD                             ;     ld (vTIBPtr),de             ; update TIB*
0FCD                             ;     push ix                     ; save NEXT
0FCD                             ;     ld ix,editDef0              ; NEXT = editDef0
0FCD                             ;     jp lookupRef                ; convert letter into address
0FCD                             ; editDef0:
0FCD                             ;     ld e,(hl)                   ; de = (hl++)
0FCD                             ;     inc hl
0FCD                             ;     ld d,(hl)
0FCD                             ;     ld a,d                      ; de == 0 ?
0FCD                             ;     or e
0FCD                             ;     jr z,editDef4
0FCD                             ;     ld ix,editDef3              ; NEXT = editDef3
0FCD                             ;     ex de,hl
0FCD                             ;     ld a,(hl)
0FCD                             ;     cp "{"
0FCD                             ;     jr nz,editDef1
0FCD                             ;     jp editBlock0               ; convert letter into address
0FCD                             ; editDef1:
0FCD                             ;     cp "("
0FCD                             ;     jr nz,editDef2
0FCD                             ;     jp editBlock0               ; convert letter into address
0FCD                             ; editDef2:
0FCD                             ;     jp editFunc
0FCD                             ; editDef3:
0FCD                             ;     ld a," "                    ; write assign
0FCD                             ;     call writeChar
0FCD                             ;     pop hl                      ; a = ident
0FCD                             ;     ld a,l
0FCD                             ;     call writeChar
0FCD                             ;     ld a,"="                    ; write assign
0FCD                             ;     call writeChar
0FCD                             ;     ld ix,editDef4              ; NEXT = editDef4
0FCD                             ;     jp printTIB
0FCD                             ; editDef4:
0FCD                             ;     pop ix                      ; restore NEXT
0FCD                             ;     jp (ix)
0FCD                             ; writeChar:
0FCD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0FCD                             ;     ld (de),a                   ; write ident
0FCD                             ;     inc de
0FCD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0FCD                             ;     ret
0FCD                             ; ; printTIB
0FCD                             ; printTIB:
0FCD                             ;     ld hl,(vTIBPtr)
0FCD                             ;     ld de,TIB
0FCD                             ;     or a
0FCD                             ;     sbc hl,de
0FCD                             ;     jp printTIB2
0FCD                             ; printTIB1:
0FCD                             ;     ld a,(de)
0FCD                             ;     call putchar
0FCD                             ; printTIB2:
0FCD                             ;     ld a,l
0FCD                             ;     or h
0FCD                             ;     jr nz,printTIB1
0FCD                             ;     jp (ix)
0FCD                             ; editBlock:
0FCD                             ;     pop hl                      ; hl = block*
0FCD                             ; editBlock0:
0FCD                             ;     push ix                     ; save next
0FCD                             ;     push hl                     ; push block*
0FCD                             ;     push hl                     ; push block*
0FCD                             ;     ld ix,(editBlock2)
0FCD                             ;     jp blockLength
0FCD                             ; editBlock1:
0FCD                             ;     pop hl                      ; bc = length, (sp) = IP
0FCD                             ;     pop de                      ; de = block*
0FCD                             ;     ld a,l
0FCD                             ;     or h
0FCD                             ;     jr z,editBlock2
0FCD                             ;     push bc
0FCD                             ;     ld bc,hl
0FCD                             ;     ex de,hl                    ; hl = block*
0FCD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0FCD                             ;     ldir                        ; copy block to TIB
0FCD                             ;     ld (vTIBPtr),de              ; save TIB*
0FCD                             ;     pop bc
0FCD                             ; editBlock2:
0FCD                             ;     pop ix                      ; restore next
0FCD                             ;     jp (ix)
0FCD                             ; editFunc:
0FCD                             ;     jp (ix)
0FCD                             ; editArray:
0FCD                             ;     jp (ix)
0FCD                             ; editparseArgs:
0FCD                             ;     jp (ix)
0FCD                             ; ; blockLength
0FCD                             ; ; addr1 -- length
0FCD                             ; blockLength:
0FCD                             ;     pop hl                      ; block*
0FCD                             ;     push hl                     ; save block*
0FCD                             ;     inc hl                      ; skip first char
0FCD                             ;     ld d,1                      ; increase nesting
0FCD                             ; blockLength1:                   ; Skip to end of definition
0FCD                             ;     ld a,(hl)                   ; Get the next character
0FCD                             ;     inc hl                      ; Point to next character
0FCD                             ;     cp " " + 1                  ; ignore whitespace
0FCD                             ;     jr c,blockLength1
0FCD                             ;     cp ")"
0FCD                             ;     jr z,blockLength4
0FCD                             ;     cp "}"
0FCD                             ;     jr z,blockLength4
0FCD                             ;     cp "]"
0FCD                             ;     jr z,blockLength4
0FCD                             ;     cp "("
0FCD                             ;     jr z,blockLength2
0FCD                             ;     cp "{"
0FCD                             ;     jr z,blockLength2
0FCD                             ;     cp "["
0FCD                             ;     jr z,blockLength2
0FCD                             ;     cp "'"
0FCD                             ;     jr z,blockLength3
0FCD                             ;     cp "`"
0FCD                             ;     jr z,blockLength3
0FCD                             ;     cp DQ
0FCD                             ;     jr z,blockLength3
0FCD                             ;     jr blockLength1
0FCD                             ; blockLength2:
0FCD                             ;     inc d
0FCD                             ;     jr blockLength1
0FCD                             ; blockLength4:
0FCD                             ;     dec d
0FCD                             ;     jr nz, blockLength1         ; get the next element
0FCD                             ; blockLength3:
0FCD                             ;     ld a,$80
0FCD                             ;     xor d
0FCD                             ;     ld d,a
0FCD                             ;     jr nz, blockLength1
0FCD                             ;     pop hl                      ; hl = block*
0FCD                             ;     or a
0FCD                             ;     sbc hl,de
0FCD                             ;     push hl
0FCD                             ;     jp (ix)
0FCD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0FCD                             ; \a start of stack \#3 depth \b base \$ prompt
0FCD                             ; DW dStack               ; a vS0 start of datastack			
0FCD                             ; DW FALSE                ; b vBase16
0FCD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0FCD                             ; DW 0                    ; d
0FCD                             ; DW 65                   ; e vLastDef "A" last command u defined
0FCD                             ; DW 0                    ; f
0FCD                             ; DW page6                ; g 256 bytes limits
0FCD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0FCD                F1:          
0FCD                F2:          
0FCD                F3:          
0FCD                F4:          
0FCD                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                VDEFINE:   DS   2   ; 
23F6                VSTRMODE:   DS   2   ; 
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                VLASTDEF:   DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 169 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 2295 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2279 IN MAIN.asm
                    > USED AT LINE 2341 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 1327 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 817 IN MAIN.asm
                    > USED AT LINE 1021 IN MAIN.asm
                    > USED AT LINE 1031 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
                    > USED AT LINE 1057 IN MAIN.asm
                    > USED AT LINE 1063 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1080 IN MAIN.asm
                    > USED AT LINE 1084 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
                    > USED AT LINE 1133 IN MAIN.asm
                    > USED AT LINE 1139 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
                    > USED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2298 IN MAIN.asm
                    > USED AT LINE 2386 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2304 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2306 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2233 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 168 IN MAIN.asm
                    > USED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2227 IN MAIN.asm
AT_:                0204 DEFINED AT LINE 176 IN MAIN.asm
ADDR:               0204 DEFINED AT LINE 177 IN MAIN.asm
BACKSLASH_:         020E DEFINED AT LINE 182 IN MAIN.asm
NUM_:               0211 DEFINED AT LINE 185 IN MAIN.asm
NOP_:               0214 DEFINED AT LINE 188 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
RBRACK_:            0216 DEFINED AT LINE 190 IN MAIN.asm
PERCENT_:           0219 DEFINED AT LINE 192 IN MAIN.asm
RBRACE_:            021C DEFINED AT LINE 194 IN MAIN.asm
QUOTE_:             021F DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0222 DEFINED AT LINE 198 IN MAIN.asm
CARET_:             0225 DEFINED AT LINE 200 IN MAIN.asm
COMMA_:             0228 DEFINED AT LINE 202 IN MAIN.asm
DQUOTE_:            022B DEFINED AT LINE 204 IN MAIN.asm
GRAVE_:             022E DEFINED AT LINE 206 IN MAIN.asm
UNDERSCORE_:        0231 DEFINED AT LINE 209 IN MAIN.asm
SLASH_:             0234 DEFINED AT LINE 212 IN MAIN.asm
DOLLAR_:            0237 DEFINED AT LINE 215 IN MAIN.asm
QUESTION_:          023A DEFINED AT LINE 218 IN MAIN.asm
RPAREN_:            023D DEFINED AT LINE 222 IN MAIN.asm
RPAREN:             023D DEFINED AT LINE 223 IN MAIN.asm
LPAREN_:            0245 DEFINED AT LINE 230 IN MAIN.asm
LBRACE_:            0245 DEFINED AT LINE 231 IN MAIN.asm
LBRACE:             0245 DEFINED AT LINE 232 IN MAIN.asm
TILDE_:             024A DEFINED AT LINE 237 IN MAIN.asm
TILDE:              024A DEFINED AT LINE 238 IN MAIN.asm
CHAR:               024A DEFINED AT LINE 239 IN MAIN.asm
PIPE_:              0252 DEFINED AT LINE 249 IN MAIN.asm
PIPE:               0252 DEFINED AT LINE 250 IN MAIN.asm
OR:                 0252 DEFINED AT LINE 251 IN MAIN.asm
SEMICOLON_:         025B DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025B DEFINED AT LINE 263 IN MAIN.asm
DEFINEEND:          025B DEFINED AT LINE 264 IN MAIN.asm
DEFINEEND1:         026D DEFINED AT LINE 273 IN MAIN.asm
                    > USED AT LINE 268 IN MAIN.asm
COLON_:             026F DEFINED AT LINE 278 IN MAIN.asm
COLON:              026F DEFINED AT LINE 279 IN MAIN.asm
DEFINESTART:        027C DEFINED AT LINE 287 IN MAIN.asm
                    > USED AT LINE 283 IN MAIN.asm
LBRACK_:            0285 DEFINED AT LINE 294 IN MAIN.asm
LBRACK:             0285 DEFINED AT LINE 295 IN MAIN.asm
ARRAYSTART:         0285 DEFINED AT LINE 296 IN MAIN.asm
AMPER_:             02A1 DEFINED AT LINE 312 IN MAIN.asm
AMPER:              02A1 DEFINED AT LINE 313 IN MAIN.asm
AND:                02A1 DEFINED AT LINE 314 IN MAIN.asm
AND1:               02A8 DEFINED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
UPCASE_:            02AC DEFINED AT LINE 328 IN MAIN.asm
UPCASE:             02AC DEFINED AT LINE 329 IN MAIN.asm
LOWCASE_:           02B1 DEFINED AT LINE 333 IN MAIN.asm
LOWCASE:            02B1 DEFINED AT LINE 334 IN MAIN.asm
IDENT1:             02B6 DEFINED AT LINE 338 IN MAIN.asm
                    > USED AT LINE 332 IN MAIN.asm
HASH_:              02C3 DEFINED AT LINE 351 IN MAIN.asm
HASH:               02C3 DEFINED AT LINE 352 IN MAIN.asm
ARRAYINDEX:         02C3 DEFINED AT LINE 353 IN MAIN.asm
ARRAYINDEX0:        02CB DEFINED AT LINE 359 IN MAIN.asm
ARRAYINDEX1:        02CC DEFINED AT LINE 361 IN MAIN.asm
                    > USED AT LINE 358 IN MAIN.asm
ARRAYINDEX2:        02D8 DEFINED AT LINE 370 IN MAIN.asm
                    > USED AT LINE 367 IN MAIN.asm
PLUS_:              02DB DEFINED AT LINE 374 IN MAIN.asm
PLUS:               02DB DEFINED AT LINE 377 IN MAIN.asm
ADD:                02DB DEFINED AT LINE 378 IN MAIN.asm
ADD1:               02E5 DEFINED AT LINE 386 IN MAIN.asm
                    > USED AT LINE 382 IN MAIN.asm
ADD3:               02E9 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 1813 IN MAIN.asm
ADD4:               02F3 DEFINED AT LINE 399 IN MAIN.asm
                    > USED AT LINE 395 IN MAIN.asm
STAR_:              02F5 DEFINED AT LINE 402 IN MAIN.asm
MINUS_:             02F7 DEFINED AT LINE 404 IN MAIN.asm
BANG_:              02F9 DEFINED AT LINE 406 IN MAIN.asm
EQ_:                02FB DEFINED AT LINE 408 IN MAIN.asm
GT_:                02FD DEFINED AT LINE 410 IN MAIN.asm
LT_:                02FF DEFINED AT LINE 412 IN MAIN.asm
STAR:               0301 DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 403 IN MAIN.asm
MUL:                0301 DEFINED AT LINE 420 IN MAIN.asm
MUL2:               0303 DEFINED AT LINE 423 IN MAIN.asm
MUL3:               030B DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 437 IN MAIN.asm
MINUS:              031D DEFINED AT LINE 443 IN MAIN.asm
                    > USED AT LINE 405 IN MAIN.asm
SUB:                0329 DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
SUB1:               0332 DEFINED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ASSIGN:             033A DEFINED AT LINE 467 IN MAIN.asm
                    > USED AT LINE 501 IN MAIN.asm
ASSIGN0:            033C DEFINED AT LINE 470 IN MAIN.asm
                    > USED AT LINE 385 IN MAIN.asm
                    > USED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
ASSIGN1:            0340 DEFINED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
ASSIGN2:            0349 DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
BANG:               034B DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 407 IN MAIN.asm
NOT:                0355 DEFINED AT LINE 491 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
EQ:                 035B DEFINED AT LINE 495 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
EQ0:                0364 DEFINED AT LINE 502 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
EQ1:                0365 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 494 IN MAIN.asm
GT:                 0368 DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 411 IN MAIN.asm
LT:                 0372 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 413 IN MAIN.asm
LT1:                037A DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 515 IN MAIN.asm
EQUALS:             0381 DEFINED AT LINE 531 IN MAIN.asm
                    > USED AT LINE 506 IN MAIN.asm
NOTEQUALS:          0388 DEFINED AT LINE 537 IN MAIN.asm
                    > USED AT LINE 490 IN MAIN.asm
LESSTHANEQ:         038F DEFINED AT LINE 545 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
LESSTHAN:           0394 DEFINED AT LINE 552 IN MAIN.asm
                    > USED AT LINE 527 IN MAIN.asm
LESSTHAN1:          0399 DEFINED AT LINE 557 IN MAIN.asm
                    > USED AT LINE 548 IN MAIN.asm
TRUE1:              039C DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 1122 IN MAIN.asm
NULL1:              03A2 DEFINED AT LINE 564 IN MAIN.asm
FALSE1:             03A2 DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 535 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 1058 IN MAIN.asm
SHIFTLEFT:          03A8 DEFINED AT LINE 572 IN MAIN.asm
                    > USED AT LINE 520 IN MAIN.asm
SHIFTLEFT1:         03B0 DEFINED AT LINE 579 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
SHIFTLEFT2:         03B1 DEFINED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
SHIFTRIGHT:         03B8 DEFINED AT LINE 589 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
SHIFTRIGHT1:        03C0 DEFINED AT LINE 596 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
SHIFTRIGHT2:        03C4 DEFINED AT LINE 599 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
DOLLAR:             03CB DEFINED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
HEXNUM:             03CB DEFINED AT LINE 607 IN MAIN.asm
HEXNUM1:            03CE DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
HEXNUM2:            03D6 DEFINED AT LINE 615 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
QUESTION:           03E8 DEFINED AT LINE 630 IN MAIN.asm
                    > USED AT LINE 219 IN MAIN.asm
IF:                 03E8 DEFINED AT LINE 631 IN MAIN.asm
IFTE:               03F4 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
IFTE1:              03F5 DEFINED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
BACKSLASH:          0401 DEFINED AT LINE 654 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
LAMBDA:             0401 DEFINED AT LINE 655 IN MAIN.asm
LAMBDA1:            0406 DEFINED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 662 IN MAIN.asm
LAMBDA2:            0416 DEFINED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 664 IN MAIN.asm
NUM:                0422 DEFINED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
NUM0:               042B DEFINED AT LINE 682 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
NUM1:               042C DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
NUM2:               0444 DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
NUM3:               044F DEFINED AT LINE 710 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
GRAVE:              0452 DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
PRINTSTRING:        0452 DEFINED AT LINE 715 IN MAIN.asm
PRINTSTRING0:       0459 DEFINED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 726 IN MAIN.asm
PRINTSTRING1:       045C DEFINED AT LINE 723 IN MAIN.asm
                    > USED AT LINE 718 IN MAIN.asm
QUOTE:              0468 DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
DQUOTE:             0468 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
STRING:             0468 DEFINED AT LINE 735 IN MAIN.asm
STRING1:            0471 DEFINED AT LINE 742 IN MAIN.asm
                    > USED AT LINE 750 IN MAIN.asm
STRING2:            0474 DEFINED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 741 IN MAIN.asm
STRING3:            047A DEFINED AT LINE 751 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
PERCENT:            0482 DEFINED AT LINE 761 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
ARG:                0482 DEFINED AT LINE 762 IN MAIN.asm
ARG0:               049E DEFINED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
ARG0A:              04A7 DEFINED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
ARG1:               04AC DEFINED AT LINE 792 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
ARG1A:              04B4 DEFINED AT LINE 799 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
DOT:                0500 DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DOTCHAR:            050F DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
DOTSTRING_:         051E DEFINED AT LINE 833 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
DOTSTRING0:         0525 DEFINED AT LINE 837 IN MAIN.asm
                    > USED AT LINE 844 IN MAIN.asm
DOTSTRING1:         0528 DEFINED AT LINE 841 IN MAIN.asm
                    > USED AT LINE 836 IN MAIN.asm
DOTNUMBER_:         0533 DEFINED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
DOTDEC:             053E DEFINED AT LINE 858 IN MAIN.asm
                    > USED AT LINE 854 IN MAIN.asm
DOTDECX:            054C DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
DOTDEC0:            055B DEFINED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
DOTDEC1:            056B DEFINED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
DOTDEC2:            058B DEFINED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 897 IN MAIN.asm
                    > USED AT LINE 899 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
DOTDEC3:            058D DEFINED AT LINE 908 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
DOTDEC4:            059D DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
DOTDEC5:            059E DEFINED AT LINE 922 IN MAIN.asm
                    > USED AT LINE 919 IN MAIN.asm
DOTHEX:             05A4 DEFINED AT LINE 932 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
DOTHEX0:            05B7 DEFINED AT LINE 943 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
DOTHEX1:            05C6 DEFINED AT LINE 952 IN MAIN.asm
                    > USED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
DOTHEX2:            05CF DEFINED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 958 IN MAIN.asm
SLASH:              0600 DEFINED AT LINE 975 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
COMMAND:            0600 DEFINED AT LINE 976 IN MAIN.asm
COMMAND_A_:         0626 DEFINED AT LINE 1012 IN MAIN.asm
COMMAND_B_:         0635 DEFINED AT LINE 1024 IN MAIN.asm
COMMAND_D_:         0641 DEFINED AT LINE 1034 IN MAIN.asm
COMMAND_F_:         0647 DEFINED AT LINE 1040 IN MAIN.asm
COMMAND_H_:         0662 DEFINED AT LINE 1060 IN MAIN.asm
COMMAND_I_:         0668 DEFINED AT LINE 1067 IN MAIN.asm
KEY_:               066E DEFINED AT LINE 1073 IN MAIN.asm
COMMAND_M_:         0671 DEFINED AT LINE 1077 IN MAIN.asm
OUTPUT_:            0677 DEFINED AT LINE 1083 IN MAIN.asm
COMMAND_P_:         067A DEFINED AT LINE 1087 IN MAIN.asm
COMMAND_Q_:         067D DEFINED AT LINE 1092 IN MAIN.asm
COMMAND_R_:         0683 DEFINED AT LINE 1098 IN MAIN.asm
COMMAND_S_:         068F DEFINED AT LINE 1108 IN MAIN.asm
TRUE_:              069E DEFINED AT LINE 1120 IN MAIN.asm
COMMAND_V_:         06A1 DEFINED AT LINE 1124 IN MAIN.asm
COMMAND_W_:         06B0 DEFINED AT LINE 1136 IN MAIN.asm
XOR_:               06B6 DEFINED AT LINE 1142 IN MAIN.asm
COMMAND_NOP_:       06B9 DEFINED AT LINE 1147 IN MAIN.asm
COMMAND_DEFAULT_:   06BC DEFINED AT LINE 1152 IN MAIN.asm
ABSOLUTE:           06BF DEFINED AT LINE 1160 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
ADDROF:             06CC DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
ADDROF1:            06E0 DEFINED AT LINE 1187 IN MAIN.asm
                    > USED AT LINE 1183 IN MAIN.asm
ADDROF2:            06EB DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 1181 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
ARRAYSIZE:          06ED DEFINED AT LINE 1201 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
BREAK:              06F5 DEFINED AT LINE 1213 IN MAIN.asm
                    > USED AT LINE 1030 IN MAIN.asm
BREAK1:             06FC DEFINED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
BYTEMODE:           070F DEFINED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
BYTEMODE1:          0712 DEFINED AT LINE 1233 IN MAIN.asm
                    > USED AT LINE 1371 IN MAIN.asm
COMMENT:            0717 DEFINED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
CONSTHEAPSTART:     0720 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
CONSTTIBSTART:      0726 DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
DECBASE:            072C DEFINED AT LINE 1254 IN MAIN.asm
                    > USED AT LINE 1036 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
DECBASE1:           072F DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1266 IN MAIN.asm
ERROR1:             0734 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1064 IN MAIN.asm
                    > USED AT LINE 1071 IN MAIN.asm
                    > USED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1089 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1106 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1134 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
HEXBASE:            073A DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 1062 IN MAIN.asm
INPUT:              0740 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1069 IN MAIN.asm
KEY:                074B DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1075 IN MAIN.asm
OUTPUT:             0754 DEFINED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
QUIT:               075D DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1094 IN MAIN.asm
QUIT1:              0764 DEFINED AT LINE 1308 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
RECUR:              0767 DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
REMAIN:             076D DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
STRINGBEGIN:        0773 DEFINED AT LINE 1321 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
STRINGEND:          077B DEFINED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1112 IN MAIN.asm
STRINGEND1:         07A2 DEFINED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1324 IN MAIN.asm
STRINGSIZE:         07AA DEFINED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
VARHEAPPTR:         07AC DEFINED AT LINE 1352 IN MAIN.asm
                    > USED AT LINE 1126 IN MAIN.asm
VARTIBPTR:          07B5 DEFINED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
VARIABLE:           07BE DEFINED AT LINE 1362 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
                    > USED AT LINE 1355 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
CONSTANT:           07C1 DEFINED AT LINE 1364 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
WORDMODE:           07C4 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1138 IN MAIN.asm
XOR:                07CA DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
XOR1:               07CB DEFINED AT LINE 1375 IN MAIN.asm
RANGESRC:           07D5 DEFINED AT LINE 32
                    > USED AT LINE 1104 IN MAIN.asm
RANGESRCM_1810S1392: 07E4 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0851 DEFINED AT LINE 32
                    > USED AT LINE 1018 IN MAIN.asm
ARRAYITERM_1829S1412: 085E DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08D2 DEFINED AT LINE 32
                    > USED AT LINE 1114 IN MAIN.asm
STRINGITERM_1848S1432: 08DF DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                095A DEFINED AT LINE 32
                    > USED AT LINE 1079 IN MAIN.asm
MAPM_1868S1454:     0967 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             099C DEFINED AT LINE 32
                    > USED AT LINE 1048 IN MAIN.asm
FILTERM_1882S1469:  09AA DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               09FA DEFINED AT LINE 32
                    > USED AT LINE 1042 IN MAIN.asm
FOLDM_1901S1489:    0A09 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A4C DEFINED AT LINE 32
                    > USED AT LINE 1044 IN MAIN.asm
FOREACHM_1915S1504: 0A5A DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0A98 DEFINED AT LINE 32
                    > USED AT LINE 1046 IN MAIN.asm
FUNCSRCM_1929S1519: 0AA4 DEFINED AT LINE 39
                    > USED AT LINE 35
DOTARRAY:           0AD1 DEFINED AT LINE 32
                    > USED AT LINE 812 IN MAIN.asm
DOTARRAYM_1939S1530: 0ADF DEFINED AT LINE 39
                    > USED AT LINE 35
DOTNEXT:            0B19 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
DOTNEXT1:           0B21 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
DOTNEXT2:           0B2D DEFINED AT LINE 1547 IN MAIN.asm
                    > USED AT LINE 1555 IN MAIN.asm
DOTNEXT3:           0B33 DEFINED AT LINE 1552 IN MAIN.asm
                    > USED AT LINE 1546 IN MAIN.asm
UNDERSCORE:         0B3F DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 210 IN MAIN.asm
COMMA:              0B3F DEFINED AT LINE 1565 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
RBRACK:             0B41 DEFINED AT LINE 1571 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
ARRAYEND:           0B41 DEFINED AT LINE 1572 IN MAIN.asm
ARRAYEND1:          0B5D DEFINED AT LINE 1589 IN MAIN.asm
                    > USED AT LINE 1606 IN MAIN.asm
ARRAYEND2:          0B6D DEFINED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
ARRAYEND3:          0B72 DEFINED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1588 IN MAIN.asm
RBRACE:             0B91 DEFINED AT LINE 1625 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
BLOCKEND:           0B91 DEFINED AT LINE 1626 IN MAIN.asm
                    > USED AT LINE 1228 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
BLOCKEND1:          0BC3 DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1641 IN MAIN.asm
BLOCKEND2:          0BCF DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
BLOCKEND3:          0BE1 DEFINED AT LINE 1669 IN MAIN.asm
                    > USED AT LINE 1661 IN MAIN.asm
BLOCKEND4:          0BF5 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1677 IN MAIN.asm
CARET:              0BFE DEFINED AT LINE 1687 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
GO:                 0BFE DEFINED AT LINE 1688 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0BFF DEFINED AT LINE 1690 IN MAIN.asm
                    > USED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
GO2:                0C05 DEFINED AT LINE 1695 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
GOBLOCK:            0C10 DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1698 IN MAIN.asm
GOBLOCK2:           0C35 DEFINED AT LINE 1719 IN MAIN.asm
                    > USED AT LINE 1800 IN MAIN.asm
GOBLOCK3:           0C3F DEFINED AT LINE 1725 IN MAIN.asm
GOFUNC:             0C43 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
GOFUNC1:            0C5C DEFINED AT LINE 1748 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
GOFUNC2:            0C62 DEFINED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
GOFUNC3:            0C6D DEFINED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 1737 IN MAIN.asm
GOFUNC4:            0C85 DEFINED AT LINE 1778 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
GOFUNC5:            0C88 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1787 IN MAIN.asm
GOFUNC6:            0C8B DEFINED AT LINE 1785 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
GOFUNC7:            0C8E DEFINED AT LINE 1788 IN MAIN.asm
GOFUNC8:            0C92 DEFINED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 1777 IN MAIN.asm
DIV:                0C9D DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 1154 IN MAIN.asm
DIVIDE:             0CAE DEFINED AT LINE 1818 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
DIVIDE1:            0CB3 DEFINED AT LINE 1821 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
DIVIDE2:            0CC0 DEFINED AT LINE 1829 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
DIVIDE3:            0CC1 DEFINED AT LINE 1831 IN MAIN.asm
                    > USED AT LINE 1828 IN MAIN.asm
PARSEARGS:          0CC7 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
PARSEARGS1:         0CD1 DEFINED AT LINE 1846 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
PARSEARGS1A:        0CD9 DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1849 IN MAIN.asm
PARSEARGS2:         0CE1 DEFINED AT LINE 1857 IN MAIN.asm
PARSEARGS3:         0CE9 DEFINED AT LINE 1865 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
PARSEARGS4:         0CEC DEFINED AT LINE 1868 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
                    > USED AT LINE 1856 IN MAIN.asm
PARSEARGS5:         0CF2 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
PARSEBLOCK:         0CFD DEFINED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
PARSEBLOCK1:        0D01 DEFINED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1917 IN MAIN.asm
                    > USED AT LINE 1920 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
PARSEBLOCK2:        0D2D DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 1909 IN MAIN.asm
PARSEBLOCK3:        0D30 DEFINED AT LINE 1921 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
                    > USED AT LINE 1914 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
PARSEBLOCK4:        0D38 DEFINED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
PARSEBLOCK5:        0D3B DEFINED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
PARSEBLOCK6:        0D63 DEFINED AT LINE 1949 IN MAIN.asm
                    > USED AT LINE 1936 IN MAIN.asm
CREATEFUNC:         0D67 DEFINED AT LINE 1957 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CREATEFUNC0:        0D86 DEFINED AT LINE 1971 IN MAIN.asm
                    > USED AT LINE 1967 IN MAIN.asm
CREATEFUNC1:        0D9E DEFINED AT LINE 1990 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
CREATEFUNC2:        0DB1 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
CREATEFUNC2A:       0DD0 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 2016 IN MAIN.asm
CREATEFUNC3:        0DDF DEFINED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
CREATEFUNC4:        0DEA DEFINED AT LINE 2052 IN MAIN.asm
CREATEFUNC5:        0DEB DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
COMMANDTABLE:       0E09 DEFINED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
COMMANDTABLE1:      0E13 DEFINED AT LINE 2091 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
COMMANDTABLE2:      0E1A DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
                    > USED AT LINE 2090 IN MAIN.asm
JUMPTABLE:          0E1F DEFINED AT LINE 2106 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
JUMPTABLE1:         0E20 DEFINED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
JUMPTABLE2:         0E21 DEFINED AT LINE 2110 IN MAIN.asm
                    > USED AT LINE 2123 IN MAIN.asm
JUMPTABLE3:         0E28 DEFINED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
JUMPTABLE4:         0E31 DEFINED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
PRTSTR0:            0E37 DEFINED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
PRTSTR:             0E3B DEFINED AT LINE 2135 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
NESTING:            0E40 DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 2284 IN MAIN.asm
                    > USED AT LINE 2342 IN MAIN.asm
NESTING0:           0E4A DEFINED AT LINE 2157 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
NESTING1A:          0E51 DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 2159 IN MAIN.asm
NESTING1:           0E54 DEFINED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
NESTING2:           0E63 DEFINED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
NESTING3:           0E65 DEFINED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2173 IN MAIN.asm
NESTING4:           0E70 DEFINED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
PROMPT:             0E72 DEFINED AT LINE 2188 IN MAIN.asm
                    > USED AT LINE 2263 IN MAIN.asm
CRLF:               0E7B DEFINED AT LINE 2193 IN MAIN.asm
                    > USED AT LINE 2355 IN MAIN.asm
PRINTSTR:           0E82 DEFINED AT LINE 2200 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2412 IN MAIN.asm
INIT:               0E89 DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
INIT1:              0E91 DEFINED AT LINE 2211 IN MAIN.asm
                    > USED AT LINE 2217 IN MAIN.asm
WARMINIT:           0E99 DEFINED AT LINE 2219 IN MAIN.asm
COLDBOOT0:          0EAC DEFINED AT LINE 2226 IN MAIN.asm
                    > USED AT LINE 2214 IN MAIN.asm
                    > USED AT LINE 2252 IN MAIN.asm
COLDINIT:           0EB6 DEFINED AT LINE 2232 IN MAIN.asm
COLDBOOT1:          0EC7 DEFINED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2244 IN MAIN.asm
COLDSTART:          0ED4 DEFINED AT LINE 2250 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
START:              0EDD DEFINED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 7
START1:             0EE3 DEFINED AT LINE 2257 IN MAIN.asm
                    > USED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2253 IN MAIN.asm
INTERPRET:          0EE9 DEFINED AT LINE 2261 IN MAIN.asm
                    > USED AT LINE 2388 IN MAIN.asm
                    > USED AT LINE 2403 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
                    > USED AT LINE 2423 IN MAIN.asm
                    > USED AT LINE 2428 IN MAIN.asm
INTERPRET2:         0EF5 DEFINED AT LINE 2269 IN MAIN.asm
                    > USED AT LINE 2333 IN MAIN.asm
                    > USED AT LINE 2410 IN MAIN.asm
                    > USED AT LINE 2414 IN MAIN.asm
INTERPRET3:         0EFD DEFINED AT LINE 2277 IN MAIN.asm
                    > USED AT LINE 2290 IN MAIN.asm
INTERPRET4:         0F08 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 2275 IN MAIN.asm
INTERPRET5:         0F0D DEFINED AT LINE 2293 IN MAIN.asm
                    > USED AT LINE 2343 IN MAIN.asm
                    > USED AT LINE 2358 IN MAIN.asm
INTERPRET5A:        0F2B DEFINED AT LINE 2330 IN MAIN.asm
INTERPRET6:         0F2D DEFINED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2297 IN MAIN.asm
INTERPRET7:         0F3B DEFINED AT LINE 2345 IN MAIN.asm
                    > USED AT LINE 2302 IN MAIN.asm
INTERPRET8:         0F4E DEFINED AT LINE 2360 IN MAIN.asm
                    > USED AT LINE 2300 IN MAIN.asm
NEXT:               0F69 DEFINED AT LINE 2373 IN MAIN.asm
                    > USED AT LINE 158 IN MAIN.asm
                    > USED AT LINE 2377 IN MAIN.asm
NEXT1:              0F79 DEFINED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2378 IN MAIN.asm
EXIT:               0F80 DEFINED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2387 IN MAIN.asm
RUN:                0F84 DEFINED AT LINE 2394 IN MAIN.asm
                    > USED AT LINE 2401 IN MAIN.asm
                    > USED AT LINE 2418 IN MAIN.asm
                    > USED AT LINE 2426 IN MAIN.asm
ERROR:              0F88 DEFINED AT LINE 2399 IN MAIN.asm
                    > USED AT LINE 286 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 1262 IN MAIN.asm
BACKSPACE_:         0F9A DEFINED AT LINE 2407 IN MAIN.asm
                    > USED AT LINE 2307 IN MAIN.asm
EDIT_:              0FAA DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2305 IN MAIN.asm
REEDIT_:            0FC0 DEFINED AT LINE 2422 IN MAIN.asm
                    > USED AT LINE 2309 IN MAIN.asm
PRINTSTACK_:        0FC3 DEFINED AT LINE 2425 IN MAIN.asm
F1:                 0FCD DEFINED AT LINE 10
                    > USED AT LINE 1050 IN MAIN.asm
F2:                 0FCD DEFINED AT LINE 11
                    > USED AT LINE 1052 IN MAIN.asm
F3:                 0FCD DEFINED AT LINE 12
                    > USED AT LINE 1054 IN MAIN.asm
F4:                 0FCD DEFINED AT LINE 13
                    > USED AT LINE 1056 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1704 IN MAIN.asm
                    > USED AT LINE 2247 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2255 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
                    > USED AT LINE 2266 IN MAIN.asm
                    > USED AT LINE 2274 IN MAIN.asm
                    > USED AT LINE 2337 IN MAIN.asm
                    > USED AT LINE 2347 IN MAIN.asm
                    > USED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 2365 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 1334 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1189 IN MAIN.asm
                    > USED AT LINE 2238 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2234 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 356 IN MAIN.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1593 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 1257 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1359 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
                    > USED AT LINE 2364 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 717 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
                    > USED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
                    > USED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2246 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
                    > USED AT LINE 1338 IN MAIN.asm
                    > USED AT LINE 1342 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 1313 IN MAIN.asm
                    > USED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
VDEFINE:            23F4 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 265 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 290 IN MAIN.asm
VSTRMODE:           23F6 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1323 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
                    > USED AT LINE 1537 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 178 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
                    > USED AT LINE 289 IN MAIN.asm
                    > USED AT LINE 342 IN MAIN.asm
                    > USED AT LINE 363 IN MAIN.asm
                    > USED AT LINE 472 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 1363 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2220 IN MAIN.asm
                    > USED AT LINE 2367 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2221 IN MAIN.asm
                    > USED AT LINE 2368 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2369 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 2223 IN MAIN.asm
                    > USED AT LINE 2370 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1575 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 2072 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 1959 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
VLASTDEF:           240A DEFINED AT LINE 61 IN ram.asm
TBPTR:              240C DEFINED AT LINE 62 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 2209 IN MAIN.asm
                    > USED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 2258 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 66 IN ram.asm
                    > USED AT LINE 159 IN MAIN.asm
                    > USED AT LINE 1247 IN MAIN.asm
                    > USED AT LINE 1932 IN MAIN.asm
