0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0E               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0E               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0E               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0E               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0E               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0E               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0E               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0E               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0E               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0E               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0D               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0E               LD   (RST08),HL   
0094   22 D2 0E               LD   (RST10),HL   
0097   22 D4 0E               LD   (RST18),HL   
009A   22 D6 0E               LD   (RST20),HL   
009D   22 D8 0E               LD   (RST28),HL   
00A0   22 DA 0E               LD   (RST30),HL   
00A3   22 DE 0E               LD   (INTVEC),HL   
00A6   22 E0 0E               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0E               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0E               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 0D               LD   sp,STACK   
00C6   CD C6 0B               CALL   init   
00C9   C3 E4 0B               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                BUFSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                NUL:      EQU   0   ; exit code
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                CTRL_C:   EQU   3   
00CC                CTRL_E:   EQU   5   
00CC                CTRL_H:   EQU   8   
00CC                CTRL_J:   EQU   10   
00CC                CTRL_L:   EQU   12   
00CC                CTRL_P:   EQU   16   
00CC                CTRL_S:   EQU   19   
00CC                ESC:      EQU   27   
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   00 10                  DW   TIB   ; vTIBPtr pointer into TIB
0184   00 11                  DW   BUF   ; vBUFPtr pointer into BUF
0186   6A 0C                  DW   next   ; nNext
0188   00 13                  DW   HEAP   ; vHeapPtr \h start of the free mem
018A                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   0   ; ^@  0 NUL
0201   00                     DB   0   ; ^A  1 SOH
0202   00                     DB   0   ; ^B  2 STX
0203   00                     DB   0   ; ^C  3 ETX
0204   00                     DB   0   ; ^D  4 EOT
0205   00                     DB   0   ; ^E  5 ENQ
0206   00                     DB   0   ; ^F  6 ACK
0207   00                     DB   0   ; ^G  7 BEL
0208   00                     DB   0   ; ^H  8 BS
0209   00                     DB   0   ; ^I  9 TAB
020A   00                     DB   0   ; ^J 10 LF
020B   00                     DB   0   ; ^K 11 VT
020C   00                     DB   0   ; ^L 12 FF
020D   00                     DB   0   ; ^M 13 CR
020E   00                     DB   0   ; ^N 14 SO
020F   00                     DB   0   ; ^O 15 SI
0210   00                     DB   0   ; ^P 16 DLE
0211   00                     DB   0   ; ^Q 17 DC1
0212   00                     DB   0   ; ^R 18 DC2
0213   00                     DB   0   ; ^S 19 DC3
0214   00                     DB   0   ; ^T 20 DC4
0215   00                     DB   0   ; ^U 21 NAK
0216   00                     DB   0   ; ^V 22 SYN
0217   00                     DB   0   ; ^W 23 ETB
0218   00                     DB   0   ; ^X 24 CAN
0219   00                     DB   0   ; ^Y 25 EM
021A   00                     DB   0   ; ^Z 26 SUB
021B   00                     DB   0   ; ^[ 27 ESC
021C   00                     DB   0   ; ^\ 28 FS
021D   00                     DB   0   ; ^] 29 GS
021E   00                     DB   0   ; ^^ 30 RS
021F   00                     DB   0   ; ^_ 31 US
0220                OPCODES:      ; still available ~ `
0220   85                     DB   lsb(nop_)   ; SP
0221   39                     DB   lsb(bang_)   ; !
0222   4D                     DB   lsb(dblquote_)   ; "
0223   41                     DB   lsb(hash_)   ; #
0224   09                     DB   lsb(dollar_)   ; $
0225   12                     DB   lsb(percent_)   ; %
0226   06                     DB   lsb(amper_)   ; &
0227   1E                     DB   lsb(tick_)   ; '
0228   6D                     DB   lsb(lparen_)   ; (
0229   87                     DB   lsb(rparen_)   ; )
022A   36                     DB   lsb(star_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   4A                     DB   lsb(comma_)   ; ,
022D   50                     DB   lsb(minus_)   ; -
022E   24                     DB   lsb(dot_)   ; .
022F   82                     DB   lsb(slash_)   ; /	
0230   3E                     DB   lsb(num_)   ; 0
0231   3E                     DB   lsb(num_)   ; 1
0232   3E                     DB   lsb(num_)   ; 2
0233   3E                     DB   lsb(num_)   ; 3
0234   3E                     DB   lsb(num_)   ; 4
0235   3E                     DB   lsb(num_)   ; 5
0236   3E                     DB   lsb(num_)   ; 6
0237   3E                     DB   lsb(num_)   ; 7
0238   3E                     DB   lsb(num_)   ; 8
0239   3E                     DB   lsb(num_)   ; 9
023A   2A                     DB   lsb(colon_)   ; :
023B   21                     DB   lsb(semicolon_)   ; ;
023C   70                     DB   lsb(lt_)   ; <
023D   53                     DB   lsb(eq_)   ; =
023E   62                     DB   lsb(gt_)   ; >
023F   33                     DB   lsb(question_)   ; ?
0240   03                     DB   lsb(at_)   ; @
0241   2D                     DB   lsb(upcase_)   ; A
0242   2D                     DB   lsb(upcase_)   ; B
0243   2D                     DB   lsb(upcase_)   ; C
0244   2D                     DB   lsb(upcase_)   ; D
0245   2D                     DB   lsb(upcase_)   ; E
0246   2D                     DB   lsb(upcase_)   ; F
0247   2D                     DB   lsb(upcase_)   ; G
0248   2D                     DB   lsb(upcase_)   ; h
0249   2D                     DB   lsb(upcase_)   ; I
024A   2D                     DB   lsb(upcase_)   ; J
024B   2D                     DB   lsb(upcase_)   ; K
024C   2D                     DB   lsb(upcase_)   ; L
024D   2D                     DB   lsb(upcase_)   ; M
024E   2D                     DB   lsb(upcase_)   ; N
024F   2D                     DB   lsb(upcase_)   ; O
0250   2D                     DB   lsb(upcase_)   ; p
0251   2D                     DB   lsb(upcase_)   ; Q
0252   2D                     DB   lsb(upcase_)   ; R
0253   2D                     DB   lsb(upcase_)   ; S
0254   2D                     DB   lsb(upcase_)   ; T
0255   2D                     DB   lsb(upcase_)   ; U
0256   2D                     DB   lsb(upcase_)   ; V
0257   2D                     DB   lsb(upcase_)   ; W
0258   2D                     DB   lsb(upcase_)   ; X
0259   2D                     DB   lsb(upcase_)   ; Y
025A   2D                     DB   lsb(upcase_)   ; Z
025B   0C                     DB   lsb(lbrack_)   ; [
025C   15                     DB   lsb(backslash_)   ; \
025D   0F                     DB   lsb(rbrack_)   ; ]
025E   47                     DB   lsb(caret_)   ; ^
025F   27                     DB   lsb(underscore_)   ; _
0260   4D                     DB   lsb(dblquote_)   ; `     used for testing string   	
0261   30                     DB   lsb(lowcase_)   ; a
0262   30                     DB   lsb(lowcase_)   ; b
0263   30                     DB   lsb(lowcase_)   ; c
0264   30                     DB   lsb(lowcase_)   ; d
0265   30                     DB   lsb(lowcase_)   ; e
0266   30                     DB   lsb(lowcase_)   ; f
0267   30                     DB   lsb(lowcase_)   ; g
0268   30                     DB   lsb(lowcase_)   ; h
0269   30                     DB   lsb(lowcase_)   ; i
026A   30                     DB   lsb(lowcase_)   ; j
026B   30                     DB   lsb(lowcase_)   ; k
026C   30                     DB   lsb(lowcase_)   ; l
026D   30                     DB   lsb(lowcase_)   ; m
026E   30                     DB   lsb(lowcase_)   ; n
026F   30                     DB   lsb(lowcase_)   ; o
0270   30                     DB   lsb(lowcase_)   ; p
0271   30                     DB   lsb(lowcase_)   ; q
0272   30                     DB   lsb(lowcase_)   ; r
0273   30                     DB   lsb(lowcase_)   ; s
0274   30                     DB   lsb(lowcase_)   ; t
0275   30                     DB   lsb(lowcase_)   ; u
0276   30                     DB   lsb(lowcase_)   ; v
0277   30                     DB   lsb(lowcase_)   ; w
0278   30                     DB   lsb(lowcase_)   ; x
0279   30                     DB   lsb(lowcase_)   ; y
027A   30                     DB   lsb(lowcase_)   ; z
027B   18                     DB   lsb(lbrace_)   ; {
027C   44                     DB   lsb(pipe_)   ; |
027D   1B                     DB   lsb(rbrace_)   ; }
027E   85                     DB   lsb(nop_)   ; ~
027F   85                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8A 03               JP   plus   
0303                AT_:         
0303   C3 9C 03               JP   at   
0306                AMPER_:      
0306   C3 A6 03               JP   amper   
0309                DOLLAR_:      
0309   C3 CA 03               JP   dollar   
030C                LBRACK_:      
030C   C3 01 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 1D 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 6B 04               JP   arrIndex   
0315                BACKSLASH_:      
0315   C3 A5 05               JP   backslash   
0318                LBRACE_:      
0318   C3 CB 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 34 05               JP   rbrace   
031E                TICK_:       
031E   C3 90 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 B1 07               JP   semicolon   
0324                DOT_:        
0324   C3 D4 05               JP   dot   
0327                UNDERSCORE_:      
0327   C3 A3 07               JP   underscore   
032A                COLON_:      
032A   C3 94 04               JP   colon   
032D                UPCASE_:      
032D   C3 27 07               JP   upcase   
0330                LOWCASE_:      
0330   C3 2C 07               JP   lowcase   
0333                QUESTION_:      
0333   C3 3E 07               JP   question   
0336                STAR_:       
0336   C3 57 07               JP   star   
0339                BANG_:       ; logical invert, any non zero value
0339   21 00 00               LD   hl,0   ; is considered true
033C   18 20                  JR   eq1   
033E                NUM_:        
033E   C3 73 07               JP   num   
0341                HASH_:       
0341   C3 0A 07               JP   hash   
0344                PIPE_:       
0344   C3 B1 03               JP   pipe   
0347                CARET_:      
0347   C3 68 06               JP   caret   
034A                COMMA_:      
034A   C3 A7 05               JP   comma   
034D                DBLQUOTE_:      
034D   C3 F0 07               JP   dblquote   
0350                MINUS_:      
0350   C3 18 08               JP   minus   
0353                EQ_:         
0353   03                     INC   bc   
0354   0A                     LD   a,(bc)   ; is it == ?
0355   FE 3D                  CP   "="   
0357   28 04                  JR   z,eq0   ; no its equality
0359   0B                     DEC   bc   
035A   C3 83 04               JP   assign   ; no its assignment
035D                EQ0:         
035D   E1                     POP   hl   
035E                EQ1:         
035E   D1                     POP   de   
035F   C3 44 06               JP   equals   
0362                GT_:         
0362   03                     INC   bc   
0363   0A                     LD   a,(bc)   
0364   FE 3E                  CP   ">"   
0366   CA DD 07               JP   z,shiftRight   
0369   D1                     POP   de   
036A   E1                     POP   hl   
036B   18 0C                  JR   lt1   
036D                LPAREN_:      
036D   C3 65 06               JP   lparen   
0370                LT_:         
0370   03                     INC   bc   
0371   0A                     LD   a,(bc)   
0372   FE 3C                  CP   "<"   
0374   CA CD 07               JP   z,shiftLeft   
0377   E1                     POP   hl   
0378   D1                     POP   de   
0379                LT1:         
0379   FE 3D                  CP   "="   
037B   CA 4C 06               JP   z,lessthaneq   
037E   0B                     DEC   bc   
037F   C3 51 06               JP   lessthan   
0382                SLASH_:      
0382   C3 B6 05               JP   slash   
0385                NOP_:        
0385   DD E9                  JP   (ix)   
0387                RPAREN_:      
0387   C3 A9 07               JP   rparen   
038A                             ;*******************************************************************
038A                             ; word operators
038A                             ;*******************************************************************
038A                PLUS:        
038A                ADD:         
038A   03                     INC   bc   
038B   0A                     LD   a,(bc)   
038C   FE 2B                  CP   "+"   ; ++ increment variable
038E   20 05                  JR   nz,add1   
0390   E1                     POP   hl   
0391   23                     INC   hl   
0392   C3 85 04               JP   assign0   
0395                ADD1:        
0395   0B                     DEC   bc   
0396   D1                     POP   de   ; second term
0397   E1                     POP   hl   ; first term
0398   19                     ADD   hl,de   
0399                ADD3:        
0399                             ; inc bc
0399                             ; ld a,(bc)
0399                             ; cp "="                      ; += add to variable
0399                             ; jp z,assign0
0399   E5                     PUSH   hl   
039A                             ; dec bc
039A   DD E9                  JP   (ix)   
039C                             ; @ addr
039C                             ; -- ptr
039C                AT:          
039C                ADDR:        
039C   ED 5B F0 0E            LD   de,(vPointer)   
03A0   21 F0 0E               LD   hl,vPointer   
03A3   C3 AE 0A               JP   variable   
03A6                AMPER:       
03A6                AND:         
03A6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A7   E1                     POP   hl   
03A8   7B                     LD   a,e   
03A9   A5                     AND   l   
03AA   6F                     LD   l,a   
03AB   7A                     LD   a,d   
03AC   A4                     AND   h   
03AD                AND1:        
03AD   67                     LD   h,a   
03AE   E5                     PUSH   hl   
03AF   DD E9                  JP   (ix)   
03B1                PIPE:        
03B1                OR:          
03B1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03B2   E1                     POP   hl   
03B3   7B                     LD   a,e   
03B4   B5                     OR   l   
03B5   6F                     LD   l,a   
03B6   7A                     LD   a,d   
03B7   B4                     OR   h   
03B8   18 F3                  JR   and1   
03BA                XOR:         
03BA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03BB                XOR1:        
03BB   E1                     POP   hl   
03BC   7B                     LD   a,e   
03BD   AD                     XOR   l   
03BE   6F                     LD   l,a   
03BF   7A                     LD   a,d   
03C0   AC                     XOR   h   
03C1   67                     LD   h,a   
03C2   E5                     PUSH   hl   
03C3   DD E9                  JP   (ix)   
03C5                INVERT:      ; Bitwise INVert the top member of the stack
03C5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C8   18 F1                  JR   xor1   
03CA                             ; $a .. $z
03CA                             ; -- value
03CA                             ; returns value of arg
03CA                DOLLAR:      
03CA                ARG:         
03CA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03CD   FD 56 05               LD   d,(iy+5)   
03D0   EB                     EX   de,hl   
03D1   7D                     LD   a,l   ; arg_list* == null, skip
03D2   B4                     OR   h   
03D3   28 1C                  JR   z,arg0a   
03D5   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03D6   2B                     DEC   hl   
03D7   7E                     LD   a,(hl)   
03D8   23                     INC   hl   
03D9   23                     INC   hl   
03DA   B7                     OR   a   
03DB   28 14                  JR   z,arg0a   ; num_args == 0, skip
03DD   5F                     LD   e,a   ; e = a = num_args
03DE   03                     INC   bc   ; a = next char = dollar_name
03DF   0A                     LD   a,(bc)   
03E0   C5                     PUSH   bc   ; save IP
03E1   43                     LD   b,e   ; b = e = num_args
03E2   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03E5   FD 56 03               LD   d,(iy+3)   
03E8                ARG0:        
03E8   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E9   1B                     DEC   de   
03EA   BE                     CP   (hl)   
03EB   28 09                  JR   z,arg1   
03ED   23                     INC   hl   ; hl = next arg_list*
03EE   10 F8                  DJNZ   arg0   
03F0   C1                     POP   bc   ; no match, restore IP
03F1                ARG0A:       
03F1   11 00 00               LD   de,0   ; return 0
03F4   18 08                  JR   arg1a   
03F6                ARG1:        
03F6   C1                     POP   bc   ; restore IP
03F7   EB                     EX   de,hl   ; hl = arg*
03F8   22 F0 0E               LD   (vPointer),hl   ; store arg* in setter
03FB   5E                     LD   e,(hl)   
03FC   23                     INC   hl   
03FD   56                     LD   d,(hl)   ; de = arg
03FE                ARG1A:       
03FE   D5                     PUSH   de   ; push arg
03FF   DD E9                  JP   (ix)   
0401                LBRACK:      
0401                ARRBEGIN:      
0401   11 00 00               LD   de,0   ; create stack frame
0404   D5                     PUSH   de   ; push null for IP
0405   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0408   FD 56 05               LD   d,(iy+5)   ; 
040B   D5                     PUSH   de   ; 
040C   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
040F   FD 56 03               LD   d,(iy+3)   ; 
0412   D5                     PUSH   de   ; 
0413   FD E5                  PUSH   iy   ; push BP
0415   FD 21 00 00            LD   iy,0   ; BP = SP
0419   FD 39                  ADD   iy,sp   
041B   DD E9                  JP   (ix)   
041D                RBRACK:      
041D                ARREND:      
041D   FD 54                  LD   d,iyh   ; de = BP
041F   FD 5D                  LD   e,iyl   
0421   ED 43 FC 0E            LD   (vTemp1),bc   ; save IP
0425   62 6B                  LD   hl,de   ; hl = de = BP
0427   B7                     OR   a   
0428   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
042A   CB 3C                  SRL   h   ; 
042C   CB 1D                  RR   l   
042E   44 4D                  LD   bc,hl   ; bc = count
0430   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = array[-2]
0433   71                     LD   (hl),c   ; write num items in length word
0434   23                     INC   hl   
0435   70                     LD   (hl),b   
0436   23                     INC   hl   ; hl = array[0], bc = count
0437                             ; de = BP, hl = array[0], bc = count
0437                ARREND1:      
0437   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
043A   77                     LD   (hl),a   ; write lsb of array item
043B   23                     INC   hl   ; move to msb of array item
043C   3A E6 0E               LD   a,(vDataWidth)   ; vDataWidth=1?
043F   3D                     DEC   a   
0440   28 05                  JR   z,arrEnd2   
0442   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0445   77                     LD   (hl),a   ; write msb of array item
0446   23                     INC   hl   ; move to next word in array
0447                ARREND2:      
0447   FD 2B                  DEC   iy   ; move to next word on stack
0449   FD 2B                  DEC   iy   
044B   0B                     DEC   bc   ; dec items count
044C   79                     LD   a,c   ; if not zero loop
044D   B0                     OR   b   
044E   20 E7                  JR   nz,arrEnd1   
0450   EB                     EX   de,hl   ; de = end of array, hl = BP
0451   F9                     LD   sp,hl   ; sp = BP
0452   E1                     POP   hl   ; de = end of array, hl = old BP
0453   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0454   FD 62                  LD   iyh,d   
0456   FD 6B                  LD   iyl,e   
0458   D1                     POP   de   ; pop arg_list (discard)
0459   D1                     POP   de   ; pop first_arg* (discard)
045A   D1                     POP   de   ; pop IP (discard)
045B   ED 5B EE 0E            LD   de,(vHeapPtr)   ; de = array[-2]
045F   22 EE 0E               LD   (vHeapPtr),hl   ; move heap* to end of array
0462   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore IP
0466   13                     INC   de   ; de = array[0]
0467   13                     INC   de   
0468   D5                     PUSH   de   ; return array[0]
0469   DD E9                  JP   (ix)   
046B                             ; index of an array, based on vDataWidth
046B                             ; array num -- value    ; also sets vPointer to address
046B                ARRINDEX:      
046B   E1                     POP   hl   ; hl = index
046C   D1                     POP   de   ; de = array
046D   3A E6 0E               LD   a,(vDataWidth)   ; a = data width
0470   3D                     DEC   a   
0471   28 01                  JR   z,arrIndex1   
0473                ARRINDEX0:      
0473   29                     ADD   hl,hl   ; if data width = 2 then double
0474                ARRINDEX1:      
0474   19                     ADD   hl,de   ; add addr
0475   22 F0 0E               LD   (vPointer),hl   ; store address in setter
0478   16 00                  LD   d,0   
047A   5E                     LD   e,(hl)   
047B   B7                     OR   a   ; check data width again
047C   28 02                  JR   z,arrIndex2   
047E   23                     INC   hl   
047F   56                     LD   d,(hl)   
0480                ARRINDEX2:      
0480   D5                     PUSH   de   
0481   DD E9                  JP   (ix)   
0483                             ; value _oldValue --            ; uses address in vPointer
0483                ASSIGN:      
0483   E1                     POP   hl   ; discard last accessed value
0484   E1                     POP   hl   ; hl = new value
0485                ASSIGN0:      
0485   EB                     EX   de,hl   ; de = new value
0486                ASSIGNX:      
0486   2A F0 0E               LD   hl,(vPointer)   
0489   73                     LD   (hl),e   
048A   3A E6 0E               LD   a,(vDataWidth)   
048D   3D                     DEC   a   ; is it byte?
048E   28 02                  JR   z,assign1   
0490   23                     INC   hl   
0491   72                     LD   (hl),d   
0492                ASSIGN1:      
0492   DD E9                  JP   (ix)   
0494                             ; arg_list - parses input (ab:c)
0494                             ; names after the : represent uninitialised locals
0494                             ; return values are the state of the stack after the block ends
0494                COLON:       
0494                ARGLIST:      
0494   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0497   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = heap*
049A   23                     INC   hl   ; skip length field to start
049B   23                     INC   hl   
049C   E5                     PUSH   hl   ; save start of arg_list
049D   03                     INC   bc   ; point to next char
049E                ARGLIST1:      
049E   0A                     LD   a,(bc)   
049F   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A1   20 03                  JR   nz,arglist1a   
04A3   14                     INC   d   ; non zero value local count acts as flag
04A4   18 10                  JR   arglist3   
04A6                ARGLIST1A:      
04A6   FE 41                  CP   "A"   ; < "A" terminates arg_list
04A8   38 0F                  JR   c,arglist4   
04AA   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AC   30 0B                  JR   nc,arglist4   
04AE                ARGLIST2:      
04AE   77                     LD   (hl),a   
04AF   23                     INC   hl   
04B0   1C                     INC   e   ; increase arg count
04B1   AF                     XOR   a   
04B2   B2                     OR   d   
04B3   28 01                  JR   z,arglist3   
04B5   14                     INC   d   ; if d > 0 increase local count
04B6                ARGLIST3:      
04B6   03                     INC   bc   ; point to next char
04B7   18 E5                  JR   arglist1   
04B9                ARGLIST4:      
04B9   0B                     DEC   bc   
04BA   AF                     XOR   a   
04BB   B2                     OR   d   
04BC   28 01                  JR   z,arglist5   
04BE   15                     DEC   d   ; remove initial inc
04BF                ARGLIST5:      
04BF   23                     INC   hl   
04C0   22 EE 0E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C3   E1                     POP   hl   ; hl = start of arg_list
04C4   E5                     PUSH   hl   ; return start of arg_list
04C5   2B                     DEC   hl   ; write number of locals at start - 1
04C6   72                     LD   (hl),d   
04C7   2B                     DEC   hl   ; write number of args + locals at start - 2
04C8   73                     LD   (hl),e   
04C9   DD E9                  JP   (ix)   
04CB                LBRACE:      
04CB                BLOCK:       
04CB   C5                     PUSH   bc   ; return pointer to first { of block
04CC   03                     INC   bc   
04CD   16 01                  LD   d,1   ; nesting: count first parenthesis
04CF                BLOCK1:      ; Skip to end of definition
04CF   0A                     LD   a,(bc)   ; Get the next character
04D0   03                     INC   bc   ; Point to next character
04D1   FE 21                  CP   " " + 1   ; ignore whitespace
04D3   38 FA                  JR   c,block1   
04D5   FE 29                  CP   ")"   
04D7   28 2D                  JR   z,block4   
04D9   FE 7D                  CP   "}"   
04DB   28 29                  JR   z,block4   
04DD   FE 5D                  CP   "]"   
04DF   28 25                  JR   z,block4   
04E1   FE 28                  CP   "("   
04E3   28 16                  JR   z,block2   
04E5   FE 7B                  CP   "{"   
04E7   28 12                  JR   z,block2   
04E9   FE 5B                  CP   "["   
04EB   28 0E                  JR   z,block2   
04ED   FE 27                  CP   "'"   
04EF   28 0D                  JR   z,block3   
04F1   FE 60                  CP   "`"   
04F3   28 09                  JR   z,block3   
04F5   FE 22                  CP   DQUOTE   
04F7   28 05                  JR   z,block3   
04F9   18 D4                  JR   block1   
04FB                BLOCK2:      
04FB   14                     INC   d   
04FC   18 D1                  JR   block1   
04FE                BLOCK3:      
04FE   3E 80                  LD   a,$80   
0500   AA                     XOR   d   
0501   47                     LD   b,a   
0502   20 CB                  JR   nz,block1   
0504   18 03                  JR   block5   
0506                BLOCK4:      
0506   15                     DEC   d   
0507   20 C6                  JR   nz,block1   ; get the next element
0509                BLOCK5:      
0509   60 69                  LD   hl,bc   ; hl = IP
050B   11 00 13               LD   de,HEAP   ; is IP pointing to object in heap
050E   B7                     OR   a   ; IP - HEAP
050F   ED 52                  SBC   hl,de   
0511   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0513   28 1C                  JR   z,block6   
0515   60 69                  LD   hl,bc   ; hl = IP
0517   D1                     POP   de   ; de = block*
0518   ED 43 FC 0E            LD   (vTemp1),bc   ; save IP
051C   B7                     OR   a   ; bc = size
051D   ED 52                  SBC   hl,de   
051F   44 4D                  LD   bc,hl   
0521   EB                     EX   de,hl   ; hl = block* de = heap*
0522   ED 5B EE 0E            LD   de,(vHeapPtr)   
0526   D5                     PUSH   de   ; return hblock*
0527   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0529   ED 53 EE 0E            LD   (vHeapPtr),de   ; heap* += size
052D   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore IP
0531                BLOCK6:      
0531   0B                     DEC   bc   ; balanced, exit
0532   DD E9                  JP   (ix)   
0534                RBRACE:      
0534                BLOCKEND:      
0534   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0537   FD 56 01               LD   d,(iy+1)   
053A   ED 53 FC 0E            LD   (vTemp1),de   
053E   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0541   FD 56 07               LD   d,(iy+7)   
0544   ED 53 FE 0E            LD   (vTemp2),de   
0548   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
054B   FD 56 03               LD   d,(iy+3)   
054E   EB                     EX   de,hl   
054F   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0552   FD 56 01               LD   d,(iy+1)   
0555   13                     INC   de   ; for carry flag <=
0556   B7                     OR   a   
0557   ED 52                  SBC   hl,de   
0559   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
055B   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
055D   FD 5D                  LD   e,iyl   
055F   21 08 00               LD   hl,8   
0562   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0563   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0564   18 0C                  JR   blockEnd2   
0566                BLOCKEND1:      ; same scope
0566   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0569   FD 56 03               LD   d,(iy+3)   
056C   EB                     EX   de,hl   
056D   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
056F   FD 5D                  LD   e,iyl   
0571   EB                     EX   de,hl   
0572                BLOCKEND2:      
0572   44 4D                  LD   bc,hl   ; bc = hl = BP
0574   B7                     OR   a   ; hl = BP - SP = count
0575   ED 72                  SBC   hl,sp   
0577   7D                     LD   a,l   
0578   B4                     OR   h   
0579   28 09                  JR   z,blockEnd3   
057B   C5                     PUSH   bc   ; bc = count, hl = BP
057C   44 4D                  LD   bc,hl   
057E   E1                     POP   hl   
057F   2B                     DEC   hl   ; hl = BP-1
0580   1B                     DEC   de   ; de = args*-1
0581   ED B8                  LDDR      
0583   13                     INC   de   
0584                BLOCKEND3:      
0584   EB                     EX   de,hl   ; sp = de = new tos*
0585   F9                     LD   sp,hl   
0586   ED 4B FE 0E            LD   bc,(vTemp2)   
058A   FD 2A FC 0E            LD   iy,(vTemp1)   
058E   DD E9                  JP   (ix)   
0590                TICK:        
0590                CHAR:        
0590   21 00 00               LD   hl,0   ; if "" is empty or null
0593                CHAR1:       
0593   03                     INC   bc   ; point to next char
0594   0A                     LD   a,(bc)   
0595   FE 27                  CP   "'"   ; ' is the terminator
0597   28 09                  JR   z,char3   
0599   FE 5C                  CP   $5c   ; \ is the escape
059B   20 02                  JR   nz,char2   
059D   03                     INC   bc   
059E   0A                     LD   a,(bc)   
059F                CHAR2:       
059F   6F                     LD   l,a   
05A0   18 F1                  JR   char1   
05A2                CHAR3:       
05A2   E5                     PUSH   hl   
05A3   DD E9                  JP   (ix)   
05A5                BACKSLASH:      
05A5   DD E9                  JP   (ix)   
05A7                             ; , discard stack item
05A7                             ; x y -- x
05A7                COMMA:       
05A7                DISCARD:      
05A7   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A9   FD 5D                  LD   e,iyl   
05AB   EB                     EX   de,hl   
05AC   B7                     OR   a   
05AD   ED 72                  SBC   hl,sp   
05AF   CB 7C                  BIT   7,h   
05B1   20 01                  JR   nz,discard1   
05B3   E1                     POP   hl   
05B4                DISCARD1:      
05B4   DD E9                  JP   (ix)   
05B6                SLASH:       
05B6   03                     INC   bc   
05B7   0A                     LD   a,(bc)   
05B8   FE 5C                  CP   $5C   
05BA   CA F5 08               JP   z,comment   
05BD   FE 41                  CP   "A"   
05BF   D2 37 08               JP   nc,command   
05C2   0B                     DEC   bc   
05C3   D1                     POP   de   
05C4   E1                     POP   hl   
05C5   C5                     PUSH   bc   ; preserve the IP
05C6   44 4D                  LD   bc,hl   
05C8   CD 2B 06               CALL   divide   
05CB   EB                     EX   de,hl   
05CC   ED 53 F2 0E            LD   (vRemain),de   
05D0   C1                     POP   bc   
05D1   C3 99 03               JP   add3   
05D4                DOT:         
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   E1                     POP   hl   
05D7   FE 68                  CP   "h"   
05D9   20 05                  JR   nz,dot1   
05DB   CD 55 0B               CALL   prthex   
05DE   18 16                  JR   dot5   
05E0                DOT1:        
05E0   FE 73                  CP   "s"   
05E2   20 05                  JR   nz,dot2   
05E4   CD 78 0B               CALL   prtstr   
05E7   18 0D                  JR   dot5   
05E9                DOT2:        
05E9   FE 63                  CP   "c"   
05EB   20 04                  JR   nz,dot3   
05ED                             ; ld a,l
05ED                             ; call putchar
05ED                             ; jr dot5
05ED   E5                     PUSH   hl   
05EE   C3 FD 05               JP   dotChar   
05F1                DOT3:        
05F1   0B                     DEC   bc   
05F2   E5                     PUSH   hl   
05F3   C3 14 06               JP   dotDec   
05F6                DOT5:        
05F6   3E 20                  LD   a," "   
05F8   CD 85 00               CALL   putchar   
05FB   DD E9                  JP   (ix)   
05FD                DOTCHAR:      
05FD   CD 68 06               CALL   go   
0600   00 00                  DW   NUL   ; closure
0602   09 06                  DW   dotChar_block   
0604   08 06                  DW   dotChar_args   
0606   01                     DB   1   ; num args + locals
0607   00                     DB   0   ; num locals
0608                DOTCHAR_ARGS:      
0608   63                     DB   "c"   
0609                DOTCHAR_BLOCK:      
0609   7B 24 63 2F 62 63 2F 70 78 7D 00 .CSTR   "{$c/bc/px}"   ; block
0614                DOTDEC:      
0614   CD 68 06               CALL   go   
0617   00 00                  DW   NUL   ; closure
0619   20 06                  DW   dotDec_block   
061B   1F 06                  DW   dotDec_args   
061D   01                     DB   1   ; num args + locals
061E   00                     DB   0   ; num locals
061F                DOTDEC_ARGS:      
061F   6E                     DB   "n"   
0620                DOTDEC_BLOCK:      
0620   7B 24 6E 2F 62 64 2F 70 78 7D 00 .CSTR   "{$n/bd/px}"   ; block
062B                             ; division subroutine.
062B                             ; bc: divisor, de: dividend, hl: remainder
062B                DIVIDE:      
062B   21 00 00               LD   hl,0   ; zero the remainder
062E   3E 10                  LD   a,16   ; loop counter
0630                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0630   CB 21                  SLA   c   
0632   CB 10                  RL   b   
0634   ED 6A                  ADC   hl,hl   
0636   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0638   38 03                  JR   c,divide2   
063A   0C                     INC   c   
063B   18 01                  JR   divide3   
063D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
063D   19                     ADD   hl,de   
063E                DIVIDE3:      
063E   3D                     DEC   a   
063F   20 EF                  JR   nz,divide1   
0641   50 59                  LD   de,bc   ; result from bc to de
0643   C9                     RET      
0644                             ; hl = value1, de = value2
0644                             ; hl = result
0644                EQUALS:      
0644   B7                     OR   a   ; reset the carry flag
0645   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0647   28 10                  JR   z,true1   
0649   C3 5F 06               JP   false1   
064C                             ; hl = value1 de = value2
064C                             ; hl = result
064C                LESSTHANEQ:      
064C   B7                     OR   a   
064D   ED 52                  SBC   hl,de   
064F   18 05                  JR   lessthan1   
0651                             ; hl = value1 de = value2
0651                             ; hl = result
0651                LESSTHAN:      
0651   B7                     OR   a   
0652   ED 52                  SBC   hl,de   
0654   28 09                  JR   z,false1   
0656                LESSTHAN1:      
0656   FA 5F 06               JP   m,false1   
0659                TRUE1:       
0659   21 FF FF               LD   hl,TRUE   
065C   E5                     PUSH   hl   
065D   DD E9                  JP   (ix)   
065F                NULL1:       
065F                FALSE1:      
065F   21 00 00               LD   hl,FALSE   
0662   E5                     PUSH   hl   
0663   DD E9                  JP   (ix)   
0665                LPAREN:      
0665   C3 CB 04               JP   block   
0668                             ; execute a block of code which ends with }
0668                             ; creates a root scope if BP == stack
0668                             ; else uses outer scope
0668                CARET:       
0668                GO:          
0668   D1                     POP   de   ; de = block*
0669                GO1:         
0669   7B                     LD   a,e   ; if block* == null, exit
066A   B2                     OR   d   
066B   20 02                  JR   nz,go2   
066D   DD E9                  JP   (ix)   
066F                GO2:         
066F   1A                     LD   a,(de)   
0670   FE 7B                  CP   "{"   
0672   28 07                  JR   z,goBlock1   
0674   FE 28                  CP   "("   
0676   C2 AE 06               JP   nz,goFunc   
0679   13                     INC   de   ; de is the address to jump back to
067A   D5                     PUSH   de   ; push de just before stack frame
067B                GOBLOCK:      
067B                GOBLOCK1:      
067B   ED 53 FC 0E            LD   (vTemp1),de   ; save de
067F   21 80 0D               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0682   FD 54                  LD   d,iyh   
0684   FD 5D                  LD   e,iyl   
0686   B7                     OR   a   ; if stack* == BP then this is the root_scope
0687   ED 52                  SBC   hl,de   
0689   ED 5B FC 0E            LD   de,(vTemp1)   ; restore de
068D   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
068E   B4                     OR   h   
068F   3E 00                  LD   a,0   
0691   28 6C                  JR   z,goFunc8   
0693   C5                     PUSH   bc   ; push IP
0694   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0697   FD 46 05               LD   b,(iy+5)   
069A   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
069D   FD 66 03               LD   h,(iy+3)   
06A0                GOBLOCK2:      
06A0   C5                     PUSH   bc   ; arg_list*
06A1   E5                     PUSH   hl   ; first_arg*
06A2   FD E5                  PUSH   iy   ; push BP
06A4   FD 21 00 00            LD   iy,0   ; BP = SP
06A8   FD 39                  ADD   iy,sp   
06AA   42 4B                  LD   bc,de   ; bc = de = block*-1
06AC   DD E9                  JP   (ix)   
06AE                GOFUNC:      ; execute function
06AE   EB                     EX   de,hl   ; hl = func*
06AF   5E                     LD   e,(hl)   ; de = partial_array*
06B0   23                     INC   hl   
06B1   56                     LD   d,(hl)   
06B2   23                     INC   hl   
06B3   7B                     LD   a,e   ; if partial_array* == null skip
06B4   B2                     OR   d   
06B5   28 21                  JR   z,goFunc3   
06B7   ED 43 FC 0E            LD   (vTemp1),bc   
06BB   22 FE 0E               LD   (vTemp2),hl   ; save bc,hl
06BE   EB                     EX   de,hl   ; hl = partial_array*
06BF   2B                     DEC   hl   ; bc = count
06C0   46                     LD   b,(hl)   
06C1   2B                     DEC   hl   
06C2   4E                     LD   c,(hl)   
06C3   23                     INC   hl   ; push each item on stack
06C4   23                     INC   hl   
06C5   18 06                  JR   goFunc2   
06C7                GOFUNC1:      
06C7   5E                     LD   e,(hl)   ; de = partial item
06C8   23                     INC   hl   
06C9   56                     LD   d,(hl)   
06CA   23                     INC   hl   
06CB   D5                     PUSH   de   ; push on stack
06CC   0B                     DEC   bc   
06CD                GOFUNC2:      
06CD   79                     LD   a,c   ; if count != 0 then loop
06CE   B0                     OR   b   
06CF   20 F6                  JR   nz,goFunc1   
06D1   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore bc
06D5   2A FE 0E               LD   hl,(vTemp2)   ; restore hl
06D8                GOFUNC3:      
06D8   5E                     LD   e,(hl)   ; de = block*
06D9   23                     INC   hl   
06DA   56                     LD   d,(hl)   
06DB   23                     INC   hl   
06DC   ED 53 FC 0E            LD   (vTemp1),de   ; save block*
06E0   5E                     LD   e,(hl)   ; de = arg_list*
06E1   23                     INC   hl   
06E2   56                     LD   d,(hl)   
06E3   23                     INC   hl   
06E4   EB                     EX   de,hl   ; hl = arg_list*
06E5   ED 5B FC 0E            LD   de,(vTemp1)   ; restore de = block*
06E9   7D                     LD   a,l   ; if arg_list* == null a = 0
06EA   B4                     OR   h   
06EB   20 03                  JR   nz,goFunc4   
06ED   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06EE   18 0F                  JR   goFunc8   
06F0                GOFUNC4:      ; allocate locals
06F0   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06F1   7E                     LD   a,(hl)   
06F2   18 03                  JR   goFunc6   
06F4                GOFUNC5:      ; loop
06F4   3B                     DEC   sp   
06F5   3B                     DEC   sp   
06F6   3D                     DEC   a   
06F7                GOFUNC6:      
06F7   B7                     OR   a   
06F8   20 FA                  JR   nz,goFunc5   ; end loop
06FA                GOFUNC7:      
06FA   2B                     DEC   hl   ; a = num_args* x 2
06FB   7E                     LD   a,(hl)   
06FC   23                     INC   hl   
06FD   23                     INC   hl   
06FE   87                     ADD   a,a   ; a *= 2
06FF                GOFUNC8:      
06FF   C5                     PUSH   bc   ; push IP
0700   44 4D                  LD   bc,hl   
0702   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0705   85                     ADD   a,l   
0706   6F                     LD   l,a   
0707   39                     ADD   hl,sp   
0708   18 96                  JR   goBlock2   
070A                HASH:        
070A                HEXNUM:      
070A   21 00 00               LD   hl,0   ; Clear hl to accept the number
070D                HEXNUM1:      
070D   03                     INC   bc   
070E   0A                     LD   a,(bc)   ; Get the character which is a numeral
070F   CB 77                  BIT   6,a   ; is it uppercase alpha?
0711   28 02                  JR   z,hexnum2   ; no a decimal
0713   D6 07                  SUB   7   ; sub 7  to make $a - $F
0715                HEXNUM2:      
0715   D6 30                  SUB   $30   ; form decimal digit
0717   DA 95 07               JP   c,num2   
071A   FE 10                  CP   $0F+1   
071C   D2 95 07               JP   nc,num2   
071F   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0720   29                     ADD   hl,hl   ; 4X
0721   29                     ADD   hl,hl   ; 8X
0722   29                     ADD   hl,hl   ; 16X
0723   85                     ADD   a,l   ; add into bottom of hl
0724   6F                     LD   l,a   
0725   18 E6                  JR   hexnum1   
0727                UPCASE:      
0727   0A                     LD   a,(bc)   ; a = identifier char
0728   D6 41                  SUB   "A"   ; "A" = 0
072A   18 05                  JR   ident1   
072C                LOWCASE:      
072C   0A                     LD   a,(bc)   
072D   D6 61                  SUB   "a"   
072F   C6 1A                  ADD   a,26   
0731                IDENT1:      
0731   87                     ADD   a,a   ; l = a * 2
0732   6F                     LD   l,a   
0733   26 0E                  LD   h,msb(vars)   
0735   22 F0 0E               LD   (vPointer),hl   ; store address in setter
0738   5E                     LD   e,(hl)   
0739   23                     INC   hl   
073A   56                     LD   d,(hl)   
073B   D5                     PUSH   de   
073C   DD E9                  JP   (ix)   
073E                             ; if
073E                             ; condition then -- value
073E                QUESTION:      
073E                IF:          
073E   03                     INC   bc   
073F   0A                     LD   a,(bc)   
0740   FE 3F                  CP   "?"   
0742   28 06                  JR   z,ifte   
0744   0B                     DEC   bc   
0745   11 00 00               LD   de,NUL   ; NUL pointer for else
0748   18 01                  JR   ifte1   
074A                             ; ifte
074A                             ; condition then else -- value
074A                IFTE:        
074A   D1                     POP   de   ; de = else
074B                IFTE1:       
074B   E1                     POP   hl   ; hl = then
074C   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
074D   7C                     LD   a,h   
074E   B5                     OR   l   
074F   E1                     POP   hl   ; hl = then
0750   CA 69 06               JP   z,go1   ; if z de = else
0753   EB                     EX   de,hl   ; condition = false, de = then
0754   C3 69 06               JP   go1   
0757                STAR:        
0757                MUL:         
0757   D1                     POP   de   ; get first value
0758   E1                     POP   hl   
0759                MUL2:        
0759   C5                     PUSH   bc   ; Preserve the IP
075A   44 4D                  LD   bc,hl   ; bc = 2nd value
075C   21 00 00               LD   hl,0   
075F   3E 10                  LD   a,16   
0761                MUL3:        
0761   29                     ADD   hl,hl   
0762   CB 13                  RL   e   
0764   CB 12                  RL   d   
0766   30 04                  JR   nc,$+6   
0768   09                     ADD   hl,bc   
0769   30 01                  JR   nc,$+3   
076B   13                     INC   de   
076C   3D                     DEC   a   
076D   20 F2                  JR   nz,mul3   
076F   C1                     POP   bc   ; Restore the IP
0770   C3 99 03               JP   add3   
0773                NUM:         
0773   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0776   0A                     LD   a,(bc)   ; Get numeral or -
0777   FE 2D                  CP   "-"   
0779   20 01                  JR   nz,num0   
077B   03                     INC   bc   ; move to next char, no flags affected
077C                NUM0:        
077C   08                     EX   af,af'   ; save zero flag = 0 for later
077D                NUM1:        
077D   0A                     LD   a,(bc)   ; read digit
077E   D6 30                  SUB   "0"   ; less than 0?
0780   38 13                  JR   c,num2   ; not a digit, exit loop
0782   FE 0A                  CP   10   ; greater that 9?
0784   30 0F                  JR   nc,num2   ; not a digit, exit loop
0786   03                     INC   bc   ; inc IP
0787   54 5D                  LD   de,hl   ; multiply hl * 10
0789   29                     ADD   hl,hl   
078A   29                     ADD   hl,hl   
078B   19                     ADD   hl,de   
078C   29                     ADD   hl,hl   
078D   85                     ADD   a,l   ; add digit in a to hl
078E   6F                     LD   l,a   
078F   3E 00                  LD   a,0   
0791   8C                     ADC   a,h   
0792   67                     LD   h,a   
0793   18 E8                  JR   num1   
0795                NUM2:        
0795   0B                     DEC   bc   
0796   08                     EX   af,af'   ; restore zero flag
0797   20 07                  JR   nz,num3   
0799   EB                     EX   de,hl   ; negate the value of hl
079A   21 00 00               LD   hl,0   
079D   B7                     OR   a   ; jump to sub2
079E   ED 52                  SBC   hl,de   
07A0                NUM3:        
07A0   E5                     PUSH   hl   ; Put the number on the stack
07A1   DD E9                  JP   (ix)   ; and process the next character
07A3                UNDERSCORE:      
07A3                REMAIN:      
07A3   2A F2 0E               LD   hl,(vRemain)   
07A6   E5                     PUSH   hl   
07A7   DD E9                  JP   (ix)   
07A9                RPAREN:      
07A9   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
07AC   FD 46 09               LD   b,(iy+9)   
07AF   DD E9                  JP   (ix)   
07B1                             ; arg_list* block* -- ptr
07B1                SEMICOLON:      
07B1   D1                     POP   de   ; de = block* hl = heap*
07B2   2A EE 0E               LD   hl,(vHeapPtr)   
07B5   AF                     XOR   a   
07B6   77                     LD   (hl),a   ; compile null partial_array*
07B7   23                     INC   hl   
07B8   77                     LD   (hl),a   
07B9   23                     INC   hl   
07BA   73                     LD   (hl),e   ; compile block*
07BB   23                     INC   hl   
07BC   72                     LD   (hl),d   
07BD   23                     INC   hl   
07BE   D1                     POP   de   ; de = block*
07BF   73                     LD   (hl),e   ; compile arg_list*
07C0   23                     INC   hl   
07C1   72                     LD   (hl),d   
07C2   23                     INC   hl   
07C3   ED 5B EE 0E            LD   de,(vHeapPtr)   ; return func*
07C7   D5                     PUSH   de   
07C8   22 EE 0E               LD   (vHeapPtr),hl   ; heap* += 4
07CB   DD E9                  JP   (ix)   
07CD                             ; shiftLeft
07CD                             ; value count -- value2          shift left count places
07CD                SHIFTLEFT:      
07CD   50 59                  LD   de,bc   ; save IP
07CF   C1                     POP   bc   ; bc = count
07D0   41                     LD   b,c   ; b = loop counter
07D1   E1                     POP   hl   
07D2   04                     INC   b   ; test for counter=0 case
07D3   18 01                  JR   shiftLeft2   
07D5                SHIFTLEFT1:      
07D5   29                     ADD   hl,hl   ; left shift hl
07D6                SHIFTLEFT2:      
07D6   10 FD                  DJNZ   shiftLeft1   
07D8   E5                     PUSH   hl   
07D9   42 4B                  LD   bc,de   ; restore IP
07DB   DD E9                  JP   (ix)   
07DD                             ; shiftRight
07DD                             ; value count -- value2          shift left count places
07DD                SHIFTRIGHT:      
07DD   50 59                  LD   de,bc   ; save IP
07DF   C1                     POP   bc   ; bc = count
07E0   41                     LD   b,c   ; b = loop counter
07E1   E1                     POP   hl   
07E2   04                     INC   b   ; test for counter=0 case
07E3   18 04                  JR   shiftRight2   
07E5                SHIFTRIGHT1:      
07E5   CB 3C                  SRL   h   ; right shift hl
07E7   CB 1D                  RR   l   
07E9                SHIFTRIGHT2:      
07E9   10 FA                  DJNZ   shiftRight1   
07EB   E5                     PUSH   hl   
07EC   42 4B                  LD   bc,de   ; restore IP
07EE   DD E9                  JP   (ix)   
07F0                             ; string
07F0                             ; -- ptr                        ; points to start of string chars,
07F0                             ; length is stored at start - 2 bytes
07F0                DBLQUOTE:      
07F0                STRING:      
07F0   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = heap*
07F3   23                     INC   hl   ; skip length field to start
07F4   23                     INC   hl   
07F5   E5                     PUSH   hl   ; save start of string
07F6   03                     INC   bc   ; point to next char
07F7   18 03                  JR   string2   
07F9                STRING1:      
07F9   77                     LD   (hl),a   
07FA   23                     INC   hl   ; increase count
07FB   03                     INC   bc   ; point to next char
07FC                STRING2:      
07FC   0A                     LD   a,(bc)   
07FD   FE 22                  CP   DQUOTE   ; " is the string terminator
07FF   28 04                  JR   z,string3   
0801   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0803   20 F4                  JR   nz,string1   
0805                STRING3:      
0805   AF                     XOR   a   ; write NUL to terminate string
0806   77                     LD   (hl),a   ; hl = end of string
0807   23                     INC   hl   
0808   22 EE 0E               LD   (vHeapPtr),hl   ; bump heap* to after end of string
080B   2B                     DEC   hl   ; hl = end of string without terminator
080C   D1                     POP   de   ; de = start of string
080D   D5                     PUSH   de   ; return start of string
080E   B7                     OR   a   ; hl = length bytes, de = start of string
080F   ED 52                  SBC   hl,de   
0811   EB                     EX   de,hl   
0812   2B                     DEC   hl   ; write length bytes to length field at start - 2
0813   72                     LD   (hl),d   
0814   2B                     DEC   hl   
0815   73                     LD   (hl),e   
0816   DD E9                  JP   (ix)   
0818                MINUS:       ; negative sign or subtract
0818   03                     INC   bc   ; check if sign of a number
0819   0A                     LD   a,(bc)   
081A   0B                     DEC   bc   
081B   FE 30                  CP   "0"   
081D   38 05                  JR   c,sub   
081F   FE 3A                  CP   "9"+1   
0821   DA 3E 03               JP   c,num_   
0824                SUB:         ; Subtract the value 2nd on stack from top of stack
0824   03                     INC   bc   
0825   FE 2D                  CP   "-"   
0827   20 05                  JR   nz,sub1   
0829   E1                     POP   hl   
082A   2B                     DEC   hl   
082B   C3 85 04               JP   assign0   
082E                SUB1:        
082E   0B                     DEC   bc   
082F   D1                     POP   de   
0830   E1                     POP   hl   
0831   B7                     OR   a   
0832   ED 52                  SBC   hl,de   
0834   C3 99 03               JP   add3   
0837                             ;*******************************************************************
0837                             ; commands
0837                             ; a contains command letter
0837                             ; bc points to command letter
0837                             ;*******************************************************************
0837                COMMAND:      
0837   FE 2F                  CP   "/"   ; // comment
0839   CA F5 08               JP   z,comment   
083C   FE 61                  CP   "a"   ; /ab absolute /ad address of
083E   28 42                  JR   z,command_a   
0840   FE 62                  CP   "b"   ; /ba buf array /bb buf block
0842                             ; /bd buf decimal /bp buf params
0842                             ; /bs buf string /br break
0842   CA 90 08               JP   z,command_b   
0845   FE 63                  CP   "c"   ; /c chars
0847   CA 7C 0A               JP   z,chars   
084A   FE 66                  CP   "f"   ; /f false
084C   CA 5F 06               JP   z,false1   
084F   FE 69                  CP   "i"   ; /in input iv invert
0851   CA AD 08               JP   z,command_i   
0854   FE 6B                  CP   "k"   ; /k key
0856   CA BF 0A               JP   z,key   
0859   FE 6E                  CP   "n"   ; /n numbers
085B   CA D1 0A               JP   z,numbers   
085E   FE 6F                  CP   "o"   ; /o output
0860   CA C8 0A               JP   z,output   
0863   FE 70                  CP   "p"   ; /pa partial /pc print chars /pk print stack
0865   CA BB 08               JP   z,command_p   
0868   FE 74                  CP   "t"   ; /t true
086A   CA 59 06               JP   z,true1   
086D   FE 76                  CP   "v"   ; /vH heap start vT TIB start /vh heapPtr /vb TIBPtr
086F   CA D3 08               JP   z,command_v   
0872   FE 78                  CP   "x"   ; /x xor
0874   CA BA 03               JP   z,xor   
0877   FE 7A                  CP   "z"   ; /z
0879   CA D9 0A               JP   z,zprt   
087C                ERROR1:      
087C   21 01 00               LD   hl,1   ; error 1: unknown command
087F   C3 88 0C               JP   error   
0882                COMMAND_A:      
0882   03                     INC   bc   
0883   0A                     LD   a,(bc)   
0884   FE 62                  CP   "b"   
0886   CA FE 08               JP   z,absolute   
0889   FE 64                  CP   "d"   
088B   CA 0B 09               JP   z,addrOf   
088E   18 EC                  JR   error1   
0890                COMMAND_B:      
0890   03                     INC   bc   
0891   0A                     LD   a,(bc)   
0892   FE 63                  CP   "c"   ; /bc buffer char
0894   CA 2C 09               JP   z,bufferChar   
0897   FE 64                  CP   "d"   ; /bd buffer decimal
0899   CA 57 09               JP   z,bufferDec   
089C   FE 72                  CP   "r"   ; /br break
089E   CA B8 09               JP   z,break   
08A1   FE 73                  CP   "s"   ; /bs buffer string
08A3   CA 3B 09               JP   z,bufferString   
08A6   FE 78                  CP   "x"   ; /bx buffer x spaces
08A8   CA D2 09               JP   z,bufferXSpaces   
08AB   18 CF                  JR   error1   
08AD                COMMAND_I:      
08AD   03                     INC   bc   
08AE   0A                     LD   a,(bc)   
08AF   FE 6E                  CP   "n"   ; /in input
08B1   CA B4 0A               JP   z,input   
08B4   FE 76                  CP   "v"   ; /iv invert
08B6   CA C5 03               JP   z,invert   
08B9   18 C1                  JR   error1   
08BB                COMMAND_P:      
08BB   03                     INC   bc   
08BC   0A                     LD   a,(bc)   
08BD   FE 61                  CP   "a"   
08BF   CA E6 09               JP   z,partial   
08C2   FE 63                  CP   "c"   
08C4   CA 06 0A               JP   z,printChars   
08C7   FE 6B                  CP   "k"   
08C9   CA 17 0A               JP   z,printStack   
08CC   FE 78                  CP   "x"   
08CE   CA 4E 0A               JP   z,printX   
08D1   18 A9                  JR   error1   
08D3                COMMAND_V:      
08D3   03                     INC   bc   
08D4   0A                     LD   a,(bc)   
08D5   FE 62                  CP   "b"   
08D7   CA 93 0A               JP   z,varBufPtr   
08DA   FE 68                  CP   "h"   
08DC   CA 9C 0A               JP   z,varHeapPtr   
08DF   FE 74                  CP   "t"   
08E1   CA A5 0A               JP   z,varTIBPtr   
08E4   FE 42                  CP   "B"   
08E6   CA 84 0A               JP   z,constBufStart   
08E9   FE 48                  CP   "H"   
08EB   CA 89 0A               JP   z,constHeapStart   
08EE   FE 54                  CP   "T"   
08F0   CA 8E 0A               JP   z,constTIBStart   
08F3   18 87                  JR   error1   
08F5                COMMENT:      
08F5   03                     INC   bc   ; point to next char
08F6   0A                     LD   a,(bc)   
08F7   FE 20                  CP   " "   ; terminate on any char less than SP
08F9   30 FA                  JR   nc,comment   
08FB   0B                     DEC   bc   
08FC   DD E9                  JP   (ix)   
08FE                             ; /ab absolute
08FE                             ; num -- num
08FE                ABSOLUTE:      
08FE   E1                     POP   hl   
08FF   CB 7C                  BIT   7,h   
0901   C8                     RET   z   
0902   AF                     XOR   a   
0903   95                     SUB   l   
0904   6F                     LD   l,a   
0905   9F                     SBC   a,a   
0906   94                     SUB   h   
0907   67                     LD   h,a   
0908   E5                     PUSH   hl   
0909   DD E9                  JP   (ix)   
090B                             ; /ad addrOf
090B                             ; char -- addr
090B                ADDROF:      
090B   E1                     POP   hl   ; a = char
090C   7D                     LD   a,l   
090D   FE 7B                  CP   "z"+1   ; if a > z then exit
090F   30 19                  JR   nc,addrOf2   
0911   D6 41                  SUB   "A"   ; a - 65
0913   38 15                  JR   c,addrOf2   ; if < A then exit
0915   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0917   38 06                  JR   c,addrOf1   
0919   D6 06                  SUB   "a"-("Z"+1)   
091B   FE 1A                  CP   "Z"-"A"+1   
091D   38 0B                  JR   c,addrOf2   ; if < a then exit
091F                ADDROF1:      
091F   87                     ADD   a,a   ; double a
0920   21 00 0E               LD   hl,VARS   ; hl = VARS + a
0923   85                     ADD   a,l   
0924   6F                     LD   l,a   
0925   3E 00                  LD   a,0   
0927   8C                     ADC   a,h   
0928   67                     LD   h,a   
0929   E5                     PUSH   hl   
092A                ADDROF2:      
092A   DD E9                  JP   (ix)   
092C                             ; /bc buffer char
092C                             ; char -- length
092C                BUFFERCHAR:      
092C   D1                     POP   de   ; e = char
092D   2A EA 0E               LD   hl,(vBufPtr)   ; hl = buffer*
0930   73                     LD   (hl),e   ; e -> buffer*
0931   23                     INC   hl   ; buffer*++
0932   22 EA 0E               LD   (vBufPtr),hl   ; save buffer*' in pointer
0935   11 01 00               LD   de,1   ; return 1 byte
0938   D5                     PUSH   de   
0939   DD E9                  JP   (ix)   
093B                             ; /bs buffered string
093B                             ; string* -- length
093B                BUFFERSTRING:      
093B   E1                     POP   hl   ; hl = string*
093C   ED 5B EA 0E            LD   de,(vBufPtr)   ; de = buffer*
0940   18 03                  JR   bufferString1   
0942                BUFFERSTRING0:      
0942   12                     LD   (de),a   ; a -> buffer*
0943   13                     INC   de   ; string*++ buffer++
0944   23                     INC   hl   
0945                BUFFERSTRING1:      
0945   7E                     LD   a,(hl)   ; a <- string*
0946   B7                     OR   a   ; if NUL exit loop
0947   20 F9                  JR   nz,bufferString0   
0949   2A EA 0E               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
094C   ED 53 EA 0E            LD   (vBufPtr),de   ; save buffer*' in pointer
0950   EB                     EX   de,hl   ; hl = length
0951   B7                     OR   a   
0952   ED 52                  SBC   hl,de   
0954   E5                     PUSH   hl   ; return length
0955   DD E9                  JP   (ix)   
0957                             ; /bd buffer decimal
0957                             ; value -- length               ; length can be used to rewind buffer*
0957                BUFFERDEC:      
0957   ED 5B EA 0E            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
095B   D9                     EXX      
095C   E1                     POP   hl   ; hl = value
095D   CD 6F 09               CALL   bufferDec0   
0960   D9                     EXX      ; de = buffer*' bc = IP
0961   2A EA 0E               LD   hl,(vBufPtr)   ; hl = buffer*
0964   ED 53 EA 0E            LD   (vBufPtr),de   ; update buffer* with buffer*'
0968   EB                     EX   de,hl   ; hl = length
0969   B7                     OR   a   
096A   ED 52                  SBC   hl,de   
096C   E5                     PUSH   hl   ; return length
096D   DD E9                  JP   (ix)   
096F                             ; hl = value
096F                             ; de' = buffer*
096F                             ; a, bc, de, hl destroyed
096F                BUFFERDEC0:      
096F   CB 7C                  BIT   7,h   
0971   28 0C                  JR   z,bufferDec1   
0973   D9                     EXX      
0974   3E 2D                  LD   a,"-"   
0976   12                     LD   (de),a   
0977   13                     INC   de   
0978   D9                     EXX      
0979   AF                     XOR   a   
097A   95                     SUB   l   
097B   6F                     LD   l,a   
097C   9F                     SBC   a,a   
097D   94                     SUB   h   
097E   67                     LD   h,a   
097F                BUFFERDEC1:      
097F   0E 00                  LD   c,0   ; leading zeros flag = false
0981   11 F0 D8               LD   de,-10000   
0984   CD 9F 09               CALL   bufferDec2   
0987   11 18 FC               LD   de,-1000   
098A   CD 9F 09               CALL   bufferDec2   
098D   11 9C FF               LD   de,-100   
0990   CD 9F 09               CALL   bufferDec2   
0993   1E F6                  LD   e,-10   
0995   CD 9F 09               CALL   bufferDec2   
0998   0C                     INC   c   ; flag = true for at least digit
0999   1E FF                  LD   e,-1   
099B   CD 9F 09               CALL   bufferDec2   
099E   C9                     RET      
099F                BUFFERDEC2:      
099F   06 2F                  LD   b,"0"-1   
09A1                BUFFERDEC3:      
09A1   04                     INC   b   
09A2   19                     ADD   hl,de   
09A3   38 FC                  JR   c,bufferDec3   
09A5   ED 52                  SBC   hl,de   
09A7   3E 30                  LD   a,"0"   
09A9   B8                     CP   b   
09AA   20 05                  JR   nz,bufferDec4   
09AC   AF                     XOR   a   
09AD   B1                     OR   c   
09AE   C8                     RET   z   
09AF   18 01                  JR   bufferDec5   
09B1                BUFFERDEC4:      
09B1   0C                     INC   c   
09B2                BUFFERDEC5:      
09B2   78                     LD   a,b   
09B3   D9                     EXX      
09B4   12                     LD   (de),a   
09B5   13                     INC   de   
09B6   D9                     EXX      
09B7   C9                     RET      
09B8                BREAK:       
09B8   E1                     POP   hl   
09B9   7D                     LD   a,l   
09BA   B4                     OR   h   
09BB   28 02                  JR   z,break1   
09BD   DD E9                  JP   (ix)   
09BF                BREAK1:      
09BF   FD 5D                  LD   e,iyl   ; get block* just under stack frame
09C1   FD 54                  LD   d,iyh   
09C3   21 08 00               LD   hl,8   
09C6   19                     ADD   hl,de   
09C7   23                     INC   hl   
09C8   23                     INC   hl   
09C9   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
09CC   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
09CF   C3 34 05               JP   blockEnd   
09D2                             ; /bx buffered x spaces
09D2                             ; length -- length
09D2                BUFFERXSPACES:      
09D2   D1                     POP   de   ; bc = length
09D3   D5                     PUSH   de   ; return length
09D4   2A EA 0E               LD   hl,(vBufPtr)   ; hl = buffer*
09D7   18 04                  JR   bufferXSpaces2   
09D9                BUFFERXSPACES1:      
09D9   36 20                  LD   (hl)," "   
09DB   23                     INC   hl   
09DC   1B                     DEC   de   
09DD                BUFFERXSPACES2:      
09DD   7B                     LD   a,e   
09DE   B2                     OR   d   
09DF   20 F8                  JR   nz,bufferXSpaces1   
09E1   22 EA 0E               LD   (vBufPtr),hl   ; save buffer*'
09E4   DD E9                  JP   (ix)   
09E6                             ; partial
09E6                             ; array* func* -- func1*
09E6                PARTIAL:      
09E6   E1                     POP   hl   ; h1 = func*
09E7   ED 5B EE 0E            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09EB   ED 43 FC 0E            LD   (vTemp1),bc   ; save IP
09EF   01 06 00               LD   bc,6   ; bc = count
09F2   ED B0                  LDIR      ; clone func
09F4   ED 4B FC 0E            LD   bc,(vTemp1)   ; restore IP
09F8   2A EE 0E               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09FB   ED 53 EE 0E            LD   (vHeapPtr),de   ; heap* += 6
09FF   D1                     POP   de   ; de = array*
0A00   E5                     PUSH   hl   ; return partial_array*
0A01   73                     LD   (hl),e   ; compile array*
0A02   23                     INC   hl   
0A03   72                     LD   (hl),d   
0A04   DD E9                  JP   (ix)   
0A06                             ; printChars
0A06                             ; char* len --
0A06                             ; prints whatever in in buffer starting from TIB and ending at vTIBPtr*
0A06                PRINTCHARS:      
0A06   E1                     POP   hl   
0A07   D1                     POP   de   
0A08   C3 0D 0A               JP   printChars2   
0A0B                PRINTCHARS1:      
0A0B   13                     INC   de   
0A0C   2B                     DEC   hl   
0A0D                PRINTCHARS2:      
0A0D   1A                     LD   a,(de)   
0A0E   CD 85 00               CALL   putchar   
0A11   7D                     LD   a,l   
0A12   B4                     OR   h   
0A13   20 F6                  JR   nz,printChars1   
0A15   DD E9                  JP   (ix)   
0A17                             ; /pk print stack
0A17                             ; --
0A17                PRINTSTACK:      
0A17   ED 43 FC 0E            LD   (vTemp1),bc   
0A1B   CD BF 0B               CALL   printStr   
0A1E   3D 3E 20 00            .CSTR   "=> "   
0A22   21 80 0D               LD   hl,STACK   
0A25   ED 72                  SBC   hl,sp   
0A27   CB 3C                  SRL   h   
0A29   CB 1D                  RR   l   
0A2B   44 4D                  LD   bc,hl   
0A2D   21 80 0D               LD   hl,STACK   
0A30   18 0F                  JR   printStack2   
0A32                PRINTSTACK1:      
0A32   0B                     DEC   bc   
0A33   2B                     DEC   hl   
0A34   56                     LD   d,(hl)   
0A35   2B                     DEC   hl   
0A36   5E                     LD   e,(hl)   
0A37   EB                     EX   de,hl   
0A38   CD 55 0B               CALL   prthex   
0A3B   EB                     EX   de,hl   
0A3C   3E 20                  LD   a," "   
0A3E   CD 85 00               CALL   putchar   
0A41                PRINTSTACK2:      
0A41   79                     LD   a,c   
0A42   B0                     OR   b   
0A43   20 ED                  JR   nz,printStack1   
0A45   CD AF 0B               CALL   prompt   
0A48   ED 4B FC 0E            LD   bc,(vTemp1)   
0A4C   DD E9                  JP   (ix)   
0A4E                PRINTX:      
0A4E   CD 68 06               CALL   go   
0A51   00 00                  DW   NUL   ; closure
0A53   5A 0A                  DW   printX_block   
0A55   59 0A                  DW   printX_args   
0A57   01                     DB   1   ; num args + locals
0A58   00                     DB   0   ; num locals
0A59                PRINTX_ARGS:      
0A59   73                     DB   "s"   
0A5A                PRINTX_BLOCK:      
0A5A   7B 24 73 20 31 2F 62 78 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$s 1/bx+$s= /vb$s-/vb= /vb$s/pc}"   ; block
0A7C                CHARS:       
0A7C   21 01 00               LD   hl,1   
0A7F                CHARS1:      
0A7F   22 E6 0E               LD   (vDataWidth),hl   
0A82   DD E9                  JP   (ix)   
0A84                CONSTBUFSTART:      
0A84   11 00 11               LD   de,BUF   
0A87   18 28                  JR   constant   
0A89                CONSTHEAPSTART:      
0A89   11 00 13               LD   de,HEAP   
0A8C   18 23                  JR   constant   
0A8E                CONSTTIBSTART:      
0A8E   11 00 10               LD   de,TIB   
0A91   18 1E                  JR   constant   
0A93                VARBUFPTR:      
0A93   ED 5B EA 0E            LD   de,(vBufPtr)   
0A97   21 EA 0E               LD   hl,vBufPtr   
0A9A   18 12                  JR   variable   
0A9C                VARHEAPPTR:      
0A9C   ED 5B EE 0E            LD   de,(vHeapPtr)   
0AA0   21 EE 0E               LD   hl,vHeapPtr   
0AA3   18 09                  JR   variable   
0AA5                VARTIBPTR:      
0AA5   ED 5B E8 0E            LD   de,(vTIBPtr)   
0AA9   21 E8 0E               LD   hl,vTIBPtr   
0AAC   18 00                  JR   variable   
0AAE                VARIABLE:      
0AAE   22 F0 0E               LD   (vPointer),hl   
0AB1                CONSTANT:      
0AB1   D5                     PUSH   de   
0AB2   DD E9                  JP   (ix)   
0AB4                             ; Z80 port input
0AB4                             ; port -- value
0AB4                INPUT:       
0AB4   E1                     POP   hl   
0AB5   59                     LD   e,c   ; save IP
0AB6   4D                     LD   c,l   
0AB7   ED 68                  IN   l,(c)   
0AB9   26 00                  LD   h,0   
0ABB   4B                     LD   c,e   ; restore IP
0ABC   E5                     PUSH   hl   
0ABD   DD E9                  JP   (ix)   
0ABF                KEY:         
0ABF   CD 81 00               CALL   getchar   
0AC2   26 00                  LD   h,0   
0AC4   6F                     LD   l,a   
0AC5   E5                     PUSH   hl   
0AC6   DD E9                  JP   (ix)   
0AC8                             ; Z80 port output
0AC8                             ; value port --
0AC8                OUTPUT:      
0AC8   E1                     POP   hl   
0AC9   59                     LD   e,c   ; save IP
0ACA   4D                     LD   c,l   
0ACB   E1                     POP   hl   
0ACC   ED 69                  OUT   (c),l   
0ACE   4B                     LD   c,e   ; restore IP
0ACF   DD E9                  JP   (ix)   
0AD1                NUMBERS:      
0AD1   21 02 00               LD   hl,2   
0AD4   C3 7F 0A               JP   chars1   
0AD7                             ; 
0AD7                             ; 
0AD7                             ; 
0AD7                             ; 
0AD7                FILTER:      
0AD7                MAP:         
0AD7                SCAN:        
0AD7   DD E9                  JP   (ix)   
0AD9                             ; zprt:
0AD9                             ;     call go
0AD9                             ;     dw NUL                      ; closure
0AD9                             ;     dw zprt_block
0AD9                             ;     dw zprt_args
0AD9                             ;     db 2                        ; num args + locals
0AD9                             ;     db 0                        ; num locals
0AD9                             ; zprt_args:
0AD9                             ;     db "ab"
0AD9                             ; zprt_block:
0AD9                             ;     .cstr "{`sum:`.s $a $b + .}"   ; block
0AD9                             ; 
0AD9                             ; :a:s00bbJG4vYmQkcz0gL3ZiJHMtL3ZiPSAvdmIkcy9wYw==;
0AD9                ZPRT:        
0AD9   CD 68 06               CALL   go   
0ADC   00 00                  DW   NUL   ; closure
0ADE   E6 0A                  DW   zprt_block   
0AE0   E4 0A                  DW   zprt_args   
0AE2   02                     DB   2   ; num args + locals
0AE3   01                     DB   1   ; num locals
0AE4                ZPRT_ARGS:      
0AE4   6E 73                  DB   "ns"   
0AE6                ZPRT_BLOCK:      
0AE6   7B 24 6E 2F 62 64 60 20 60 2F 62 73 20 2B 24 73 3D 20 2F 76 62 24 73 2D 2F 76 62 3D 20 2F 76 62 24 73 2F 70 63 7D 00 .CSTR   "{$n/bd` `/bs +$s= /vb$s-/vb= /vb$s/pc}"   ; block
0B0D                             ; print decimal
0B0D                             ; hl = value
0B0D                PRTDEC:      
0B0D   CB 7C                  BIT   7,h   
0B0F   28 0B                  JR   z,prtdec0   
0B11   3E 2D                  LD   a,"-"   
0B13   CD 85 00               CALL   putchar   
0B16   AF                     XOR   a   
0B17   95                     SUB   l   
0B18   6F                     LD   l,a   
0B19   9F                     SBC   a,a   
0B1A   94                     SUB   h   
0B1B   67                     LD   h,a   
0B1C                PRTDEC0:      
0B1C   C5                     PUSH   bc   
0B1D   0E 00                  LD   c,0   ; leading zeros flag = false
0B1F   11 F0 D8               LD   de,-10000   
0B22   CD 3E 0B               CALL   prtdec1   
0B25   11 18 FC               LD   de,-1000   
0B28   CD 3E 0B               CALL   prtdec1   
0B2B   11 9C FF               LD   de,-100   
0B2E   CD 3E 0B               CALL   prtdec1   
0B31   1E F6                  LD   e,-10   
0B33   CD 3E 0B               CALL   prtdec1   
0B36   0C                     INC   c   ; flag = true for at least digit
0B37   1E FF                  LD   e,-1   
0B39   CD 3E 0B               CALL   prtdec1   
0B3C   C1                     POP   bc   
0B3D   C9                     RET      
0B3E                PRTDEC1:      
0B3E   06 2F                  LD   b,"0"-1   
0B40                PRTDEC2:      
0B40   04                     INC   b   
0B41   19                     ADD   hl,de   
0B42   38 FC                  JR   c,prtdec2   
0B44   ED 52                  SBC   hl,de   
0B46   3E 30                  LD   a,"0"   
0B48   B8                     CP   b   
0B49   20 05                  JR   nz,prtdec3   
0B4B   AF                     XOR   a   
0B4C   B1                     OR   c   
0B4D   C8                     RET   z   
0B4E   18 01                  JR   prtdec4   
0B50                PRTDEC3:      
0B50   0C                     INC   c   
0B51                PRTDEC4:      
0B51   78                     LD   a,b   
0B52   C3 85 00               JP   putchar   
0B55                PRTHEX:      ; display hl as a 16-bit number in hex.
0B55   C5                     PUSH   bc   ; preserve the IP
0B56   7C                     LD   a,h   
0B57   CD 60 0B               CALL   prthex2   
0B5A   7D                     LD   a,l   
0B5B   CD 60 0B               CALL   prthex2   
0B5E   C1                     POP   bc   
0B5F   C9                     RET      
0B60                PRTHEX2:      
0B60   4F                     LD   c,a   
0B61   1F                     RRA      
0B62   1F                     RRA      
0B63   1F                     RRA      
0B64   1F                     RRA      
0B65   CD 69 0B               CALL   prthex3   
0B68   79                     LD   a,c   
0B69                PRTHEX3:      
0B69   E6 0F                  AND   0x0F   
0B6B   C6 90                  ADD   a,0x90   
0B6D   27                     DAA      
0B6E   CE 40                  ADC   a,0x40   
0B70   27                     DAA      
0B71   C3 85 00               JP   putchar   
0B74                PRTSTR0:      
0B74   CD 85 00               CALL   putchar   
0B77   23                     INC   hl   
0B78                PRTSTR:      
0B78   7E                     LD   a,(hl)   
0B79   B7                     OR   a   
0B7A   20 F8                  JR   nz,prtstr0   
0B7C   C9                     RET      
0B7D                             ; **************************************************************************
0B7D                             ; calculate nesting value
0B7D                             ; a is char to be tested,
0B7D                             ; e is the nesting value (initially 0)
0B7D                             ; e is increased by ( and [
0B7D                             ; e is decreased by ) and ]
0B7D                             ; e has its bit 7 toggled by `
0B7D                             ; limited to 127 levels
0B7D                             ; **************************************************************************
0B7D                NESTING:      
0B7D   FE 22                  CP   DQUOTE   ; quote char
0B7F   28 06                  JR   z,nesting0   
0B81   FE 60                  CP   "`"   ; quote char
0B83   28 02                  JR   z,nesting0   
0B85   18 0A                  JR   nesting1   
0B87                NESTING0:      
0B87   CB 7B                  BIT   7,e   
0B89   28 03                  JR   z,nesting1a   
0B8B   CB BB                  RES   7,e   
0B8D   C9                     RET      
0B8E                NESTING1A:      
0B8E   CB FB                  SET   7,e   
0B90   C9                     RET      
0B91                NESTING1:      
0B91   CB 7B                  BIT   7,e   
0B93   C0                     RET   nz   
0B94   FE 7B                  CP   "{"   
0B96   28 08                  JR   z,nesting2   
0B98   FE 5B                  CP   "["   
0B9A   28 04                  JR   z,nesting2   
0B9C   FE 28                  CP   "("   
0B9E   20 02                  JR   nz,nesting3   
0BA0                NESTING2:      
0BA0   1C                     INC   e   
0BA1   C9                     RET      
0BA2                NESTING3:      
0BA2   FE 7D                  CP   "}"   
0BA4   28 07                  JR   z,nesting4   
0BA6   FE 5D                  CP   "]"   
0BA8   28 03                  JR   z,nesting4   
0BAA   FE 29                  CP   ")"   
0BAC   C0                     RET   nz   
0BAD                NESTING4:      
0BAD   1D                     DEC   e   
0BAE   C9                     RET      
0BAF                PROMPT:      
0BAF   CD BF 0B               CALL   printStr   
0BB2   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0BB7   C9                     RET      
0BB8                CRLF:        
0BB8   CD BF 0B               CALL   printStr   
0BBB   0D 0A 00               .CSTR   "\r\n"   
0BBE   C9                     RET      
0BBF                             ; prints a null teminated string
0BBF                             ; the string should be immedaitely following the call
0BBF                PRINTSTR:      
0BBF   E3                     EX   (sp),hl   ; swap			
0BC0   CD 78 0B               CALL   prtstr   
0BC3   23                     INC   hl   ; inc past NUL
0BC4   E3                     EX   (sp),hl   ; put it back	
0BC5   C9                     RET      
0BC6                INIT:        
0BC6   DD 2A EC 0E            LD   ix,(vNext)   
0BCA   FD 21 80 0D            LD   iy,STACK   
0BCE   21 80 01               LD   hl,isysVars   
0BD1   11 E6 0E               LD   de,sysVars   
0BD4   01 10 00               LD   bc,8 * 2   
0BD7   ED B0                  LDIR      
0BD9   21 00 0E               LD   hl,vars   ; 52 vars LO HI
0BDC   06 34                  LD   b,26*2   
0BDE   AF                     XOR   a   
0BDF                INIT0:       
0BDF   77                     LD   (hl),a   
0BE0   23                     INC   hl   
0BE1   10 FC                  DJNZ   init0   
0BE3   C9                     RET      
0BE4                START:       
0BE4   31 80 0D               LD   sp,STACK   ; start of monty
0BE7   CD C6 0B               CALL   init   ; setups
0BEA   CD BF 0B               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0BED   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
0BFA                INTERPRET:      
0BFA   CD AF 0B               CALL   prompt   
0BFD   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C00   21 00 10               LD   hl,TIB   
0C03   22 E8 0E               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C06                INTERPRET2:      ; calculate nesting
0C06   1E 00                  LD   e,0   ; initilize nesting value
0C08   C5                     PUSH   bc   ; save offset into TIB,
0C09                             ; bc is also the count of chars in TIB
0C09   21 00 10               LD   hl,TIB   ; hl is start of TIB
0C0C   18 06                  JR   interpret4   
0C0E                INTERPRET3:      
0C0E   7E                     LD   a,(hl)   ; a = char in TIB
0C0F   23                     INC   hl   ; inc pointer into TIB
0C10   0B                     DEC   bc   ; dec count of chars in TIB
0C11   CD 7D 0B               CALL   nesting   ; update nesting value
0C14                INTERPRET4:      
0C14   79                     LD   a,c   ; is count zero?
0C15   B0                     OR   b   
0C16   20 F6                  JR   nz,interpret3   ; if not loop
0C18   C1                     POP   bc   ; restore offset into TIB
0C19                INTERPRET5:      
0C19   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C1C   FE 20                  CP   $20   ; compare to space
0C1E   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C20   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C22                             ; ???? NEEDED?
0C22   28 3B                  JR   z,interpret8   
0C24   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C26   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C28   FE 05                  CP   CTRL_E   
0C2A   CA A8 0C               JP   z,edit_   
0C2D   FE 08                  CP   CTRL_H   
0C2F   CA 98 0C               JP   z,backSpace_   
0C32   FE 0A                  CP   CTRL_J   
0C34   CA C0 0C               JP   z,reEdit_   
0C37   FE 13                  CP   CTRL_S   
0C39   CA C3 0C               JP   z,printStack_   
0C3C                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C3C                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C3C                             ; DB     lsb(list_)       ; FF  ^L 12
0C3C                             ; DB     lsb(printStack_) ; DLE ^P 16
0C3C                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C3C                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C3C                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C3C                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C3C                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C3C                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C3C                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C3C                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C3C                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C3C                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C3C                INTERPRET5A:      
0C3C                             ; ld (vTIBPtr),bc
0C3C                             ; ld bc,(vTIBPtr)
0C3C   18 C8                  JR   interpret2   
0C3E                INTERPRET6:      
0C3E   21 00 10               LD   hl,TIB   
0C41   09                     ADD   hl,bc   
0C42   77                     LD   (hl),a   ; store the character in textbuf
0C43   03                     INC   bc   
0C44   CD 85 00               CALL   putchar   ; echo character to screen
0C47   CD 7D 0B               CALL   nesting   
0C4A   18 CD                  JR   interpret5   ; wait for next character
0C4C                INTERPRET7:      
0C4C   21 00 10               LD   hl,TIB   
0C4F   09                     ADD   hl,bc   
0C50   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C52   23                     INC   hl   
0C53   36 0A                  LD   (hl),"\n"   
0C55   23                     INC   hl   
0C56   03                     INC   bc   
0C57   03                     INC   bc   
0C58   CD B8 0B               CALL   crlf   ; echo character to screen
0C5B   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C5C   B7                     OR   a   
0C5D   20 BA                  JR   nz,interpret5   
0C5F                INTERPRET8:      
0C5F   21 00 10               LD   hl,TIB   
0C62   09                     ADD   hl,bc   
0C63   22 E8 0E               LD   (vTIBPtr),hl   
0C66   01 00 10               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0C69                             ; we pressed enter
0C69   0B                     DEC   bc   
0C6A                NEXT:        
0C6A   03                     INC   bc   ; Increment the IP
0C6B   0A                     LD   a,(bc)   ; Get the next character and dispatch
0C6C   FE 20                  CP   " "   ; whitespace?
0C6E   28 FA                  JR   z,next   ; space? ignore
0C70   38 07                  JR   c,next1   
0C72   6F                     LD   l,a   ; index into table
0C73   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0C75   6E                     LD   l,(hl)   ; get low jump address
0C76   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0C78   E9                     JP   (hl)   ; Jump to routine
0C79                NEXT1:       
0C79   FE 00                  CP   NUL   ; end of input string?
0C7B   28 03                  JR   z,exit   
0C7D   C3 FA 0B               JP   interpret   ; no, other whitespace, macros?
0C80                EXIT:        
0C80   03                     INC   bc   
0C81   60 69                  LD   hl,bc   
0C83   E9                     JP   (hl)   
0C84                RUN:         
0C84   C1                     POP   bc   
0C85   0B                     DEC   bc   
0C86   DD E9                  JP   (ix)   
0C88                ERROR:       
0C88   CD BF 0B               CALL   printStr   
0C8B   45 72 72 6F 72 20 00   .CSTR   "Error "   
0C92   CD 0D 0B               CALL   prtdec   
0C95   C3 FA 0B               JP   interpret   
0C98                BACKSPACE_:      
0C98   79                     LD   a,c   
0C99   B0                     OR   b   
0C9A   CA 06 0C               JP   z,interpret2   
0C9D   0B                     DEC   bc   
0C9E   CD BF 0B               CALL   printStr   
0CA1   08 20 08 00            .CSTR   "\b \b"   
0CA5   C3 06 0C               JP   interpret2   
0CA8                             ; edit
0CA8                EDIT_:       
0CA8   CD 84 0C               CALL   run   
0CAB   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0CBD   C3 FA 0B               JP   interpret   
0CC0                REEDIT_:      
0CC0   C3 FA 0B               JP   interpret   
0CC3                PRINTSTACK_:      
0CC3   CD 84 0C               CALL   run   
0CC6   2F 70 6B 00            .CSTR   "/pk"   
0CCA   C3 FA 0B               JP   interpret   
0CCD                             ; editDef:
0CCD                             ;     pop hl                      ; pop ret address
0CCD                             ;     ex (sp),hl                  ; swap with TOS
0CCD                             ;     push hl                     ; dup TOS
0CCD                             ;     ld a,l                      ; a = ident
0CCD                             ;     ld de,TIB                   ; de = start of TIB
0CCD                             ;     ld (vTIBPtr),de             ; update TIB*
0CCD                             ;     push ix                     ; save NEXT
0CCD                             ;     ld ix,editDef0              ; NEXT = editDef0
0CCD                             ;     jp lookupRef                ; convert letter into address
0CCD                             ; editDef0:
0CCD                             ;     ld e,(hl)                   ; de = (hl++)
0CCD                             ;     inc hl
0CCD                             ;     ld d,(hl)
0CCD                             ;     ld a,d                      ; de == 0 ?
0CCD                             ;     or e
0CCD                             ;     jr z,editDef4
0CCD                             ;     ld ix,editDef3              ; NEXT = editDef3
0CCD                             ;     ex de,hl
0CCD                             ;     ld a,(hl)
0CCD                             ;     cp "{"
0CCD                             ;     jr nz,editDef1
0CCD                             ;     jp editBlock0               ; convert letter into address
0CCD                             ; editDef1:
0CCD                             ;     cp "("
0CCD                             ;     jr nz,editDef2
0CCD                             ;     jp editBlock0               ; convert letter into address
0CCD                             ; editDef2:
0CCD                             ;     jp editFunc
0CCD                             ; editDef3:
0CCD                             ;     ld a," "                    ; write assign
0CCD                             ;     call writeChar
0CCD                             ;     pop hl                      ; a = ident
0CCD                             ;     ld a,l
0CCD                             ;     call writeChar
0CCD                             ;     ld a,"="                    ; write assign
0CCD                             ;     call writeChar
0CCD                             ;     ld ix,editDef4              ; NEXT = editDef4
0CCD                             ;     jp printTIB
0CCD                             ; editDef4:
0CCD                             ;     pop ix                      ; restore NEXT
0CCD                             ;     jp (ix)
0CCD                             ; writeChar:
0CCD                             ;     ld de,(vTIBPtr)             ; de = TIB*
0CCD                             ;     ld (de),a                   ; write ident
0CCD                             ;     inc de
0CCD                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0CCD                             ;     ret
0CCD                             ; ; printTIB
0CCD                             ; printTIB:
0CCD                             ;     ld hl,(vTIBPtr)
0CCD                             ;     ld de,TIB
0CCD                             ;     or a
0CCD                             ;     sbc hl,de
0CCD                             ;     jp printTIB2
0CCD                             ; printTIB1:
0CCD                             ;     ld a,(de)
0CCD                             ;     call putchar
0CCD                             ; printTIB2:
0CCD                             ;     ld a,l
0CCD                             ;     or h
0CCD                             ;     jr nz,printTIB1
0CCD                             ;     jp (ix)
0CCD                             ; editBlock:
0CCD                             ;     pop hl                      ; hl = block*
0CCD                             ; editBlock0:
0CCD                             ;     push ix                     ; save next
0CCD                             ;     push hl                     ; push block*
0CCD                             ;     push hl                     ; push block*
0CCD                             ;     ld ix,(editBlock2)
0CCD                             ;     jp blockLength
0CCD                             ; editBlock1:
0CCD                             ;     pop hl                      ; bc = length, (sp) = IP
0CCD                             ;     pop de                      ; de = block*
0CCD                             ;     ld a,l
0CCD                             ;     or h
0CCD                             ;     jr z,editBlock2
0CCD                             ;     push bc
0CCD                             ;     ld bc,hl
0CCD                             ;     ex de,hl                    ; hl = block*
0CCD                             ;     ld de,(vTIBPtr)              ; de = TIB*
0CCD                             ;     ldir                        ; copy block to TIB
0CCD                             ;     ld (vTIBPtr),de              ; save TIB*
0CCD                             ;     pop bc
0CCD                             ; editBlock2:
0CCD                             ;     pop ix                      ; restore next
0CCD                             ;     jp (ix)
0CCD                             ; editFunc:
0CCD                             ;     jp (ix)
0CCD                             ; editArray:
0CCD                             ;     jp (ix)
0CCD                             ; editArglist:
0CCD                             ;     jp (ix)
0CCD                             ; ; blockLength
0CCD                             ; ; addr1 -- length
0CCD                             ; blockLength:
0CCD                             ;     pop hl                      ; block*
0CCD                             ;     push hl                     ; save block*
0CCD                             ;     inc hl                      ; skip first char
0CCD                             ;     ld d,1                      ; increase nesting
0CCD                             ; blockLength1:                   ; Skip to end of definition
0CCD                             ;     ld a,(hl)                   ; Get the next character
0CCD                             ;     inc hl                      ; Point to next character
0CCD                             ;     cp " " + 1                  ; ignore whitespace
0CCD                             ;     jr c,blockLength1
0CCD                             ;     cp ")"
0CCD                             ;     jr z,blockLength4
0CCD                             ;     cp "}"
0CCD                             ;     jr z,blockLength4
0CCD                             ;     cp "]"
0CCD                             ;     jr z,blockLength4
0CCD                             ;     cp "("
0CCD                             ;     jr z,blockLength2
0CCD                             ;     cp "{"
0CCD                             ;     jr z,blockLength2
0CCD                             ;     cp "["
0CCD                             ;     jr z,blockLength2
0CCD                             ;     cp "'"
0CCD                             ;     jr z,blockLength3
0CCD                             ;     cp "`"
0CCD                             ;     jr z,blockLength3
0CCD                             ;     cp DQUOTE
0CCD                             ;     jr z,blockLength3
0CCD                             ;     jr blockLength1
0CCD                             ; blockLength2:
0CCD                             ;     inc d
0CCD                             ;     jr blockLength1
0CCD                             ; blockLength4:
0CCD                             ;     dec d
0CCD                             ;     jr nz, blockLength1         ; get the next element
0CCD                             ; blockLength3:
0CCD                             ;     ld a,$80
0CCD                             ;     xor d
0CCD                             ;     ld d,a
0CCD                             ;     jr nz, blockLength1
0CCD                             ;     pop hl                      ; hl = block*
0CCD                             ;     or a
0CCD                             ;     sbc hl,de
0CCD                             ;     push hl
0CCD                             ;     jp (ix)
0CCD                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0CCD                             ; \a start of stack \#3 depth \b base \$ prompt
0CCD                             ; DW dStack               ; a vS0 start of datastack			
0CCD                             ; DW FALSE                ; b vBase16
0CCD                             ; DW 0                    ; c vTIBPtr an offset to the tib
0CCD                             ; DW 0                    ; d
0CCD                             ; DW 65                   ; e vLastDef "A" last command u defined
0CCD                             ; DW 0                    ; f
0CCD                             ; DW page6                ; g 256 bytes limits
0CCD                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0CCD                          ALIGN   $100   
0D00                             ; .org RAMSTART
0D00                          DS   DSIZE   
0D80                STACK:       
0D80                          ALIGN   $100   
0E00                VARS:        
0E00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0ED0                RESTARTS:      
0ED0                RST08:    DS   2   
0ED2                RST10:    DS   2   
0ED4                RST18:    DS   2   
0ED6                RST20:    DS   2   
0ED8                RST28:    DS   2   
0EDA                RST30:    DS   2   ; 
0EDC                BAUD:     DS   2   ; 
0EDE                INTVEC:   DS   2   ; 
0EE0                NMIVEC:   DS   2   ; 
0EE2                GETCVEC:   DS   2   ; 
0EE4                PUTCVEC:   DS   2   ; 
0EE6                SYSVARS:      
0EE6                             ; initialised sys variables (preserved)
0EE6                VDATAWIDTH:   DS   2   ; 
0EE8                VTIBPTR:   DS   2   ; 
0EEA                VBUFPTR:   DS   2   ; 
0EEC                VNEXT:    DS   2   ; 
0EEE                VHEAPPTR:   DS   2   ; 
0EF0                             ; uninitialised sys variables (preserved)
0EF0                VPOINTER:   DS   2   ; 
0EF2                VREMAIN:   DS   2   ; 
0EF4                VSAVEDIP:   DS   2   ; 
0EF6                VSAVEDSP:   DS   2   ; 
0EF8                VSAVEDBP:   DS   2   ; 
0EFA                VCHECKSUM:   DS   2   ; 
0EFC                             ; uninitialised sys variables (unpreserved)
0EFC                VTEMP1:   DS   2   ; 
0EFE                VTEMP2:   DS   2   ; 
0F00                VLASTDEF:   DS   2   ; 
0F02                VHASHSTR:   DS   2   ; 
0F04                TBPTR:    DS   2   ; reserved for tests
0F06                          ALIGN   $100   
1000                TIB:      DS   TIBSIZE   
1100                BUF:      DS   BUFSIZE   
1200                          ALIGN   $100   
1200                PAD:      DS   $100   
1300                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 59 IN MAIN.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0AD7 DEFINED AT LINE 1712 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 30 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1684 IN MAIN.asm
                    > USED AT LINE 1938 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 797 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1611 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
                    > USED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 54 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 55 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 20 IN MAIN.asm
                    > USED AT LINE 877 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 802 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 1054 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 1216 IN MAIN.asm
                    > USED AT LINE 1834 IN MAIN.asm
                    > USED AT LINE 2051 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 23 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 24 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 25 IN MAIN.asm
                    > USED AT LINE 1949 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 27 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 28 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 29 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
Z80_RST8:           00CF DEFINED AT LINE 32 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 64 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 69 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
OPCODESBASE:        0200 DEFINED AT LINE 78 IN MAIN.asm
CTRLCODES:          0200 DEFINED AT LINE 80 IN MAIN.asm
OPCODES:            0220 DEFINED AT LINE 114 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 217 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 219 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 221 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 223 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 225 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 227 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 229 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 231 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 233 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 235 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 237 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 239 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 241 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 243 IN MAIN.asm
UNDERSCORE_:        0327 DEFINED AT LINE 245 IN MAIN.asm
COLON_:             032A DEFINED AT LINE 247 IN MAIN.asm
UPCASE_:            032D DEFINED AT LINE 249 IN MAIN.asm
LOWCASE_:           0330 DEFINED AT LINE 251 IN MAIN.asm
QUESTION_:          0333 DEFINED AT LINE 253 IN MAIN.asm
STAR_:              0336 DEFINED AT LINE 255 IN MAIN.asm
BANG_:              0339 DEFINED AT LINE 257 IN MAIN.asm
NUM_:               033E DEFINED AT LINE 260 IN MAIN.asm
                    > USED AT LINE 1244 IN MAIN.asm
HASH_:              0341 DEFINED AT LINE 262 IN MAIN.asm
PIPE_:              0344 DEFINED AT LINE 264 IN MAIN.asm
CARET_:             0347 DEFINED AT LINE 266 IN MAIN.asm
COMMA_:             034A DEFINED AT LINE 268 IN MAIN.asm
DBLQUOTE_:          034D DEFINED AT LINE 270 IN MAIN.asm
MINUS_:             0350 DEFINED AT LINE 272 IN MAIN.asm
EQ_:                0353 DEFINED AT LINE 274 IN MAIN.asm
EQ0:                035D DEFINED AT LINE 281 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
EQ1:                035E DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
GT_:                0362 DEFINED AT LINE 287 IN MAIN.asm
LPAREN_:            036D DEFINED AT LINE 295 IN MAIN.asm
LT_:                0370 DEFINED AT LINE 297 IN MAIN.asm
LT1:                0379 DEFINED AT LINE 304 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
SLASH_:             0382 DEFINED AT LINE 309 IN MAIN.asm
NOP_:               0385 DEFINED AT LINE 311 IN MAIN.asm
RPAREN_:            0387 DEFINED AT LINE 313 IN MAIN.asm
PLUS:               038A DEFINED AT LINE 320 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
ADD:                038A DEFINED AT LINE 321 IN MAIN.asm
ADD1:               0395 DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 325 IN MAIN.asm
ADD3:               0399 DEFINED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 768 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1258 IN MAIN.asm
AT:                 039C DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
ADDR:               039C DEFINED AT LINE 346 IN MAIN.asm
AMPER:              03A6 DEFINED AT LINE 351 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
AND:                03A6 DEFINED AT LINE 352 IN MAIN.asm
AND1:               03AD DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
PIPE:               03B1 DEFINED AT LINE 365 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
OR:                 03B1 DEFINED AT LINE 366 IN MAIN.asm
XOR:                03BA DEFINED AT LINE 376 IN MAIN.asm
                    > USED AT LINE 1293 IN MAIN.asm
XOR1:               03BB DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 390 IN MAIN.asm
INVERT:             03C5 DEFINED AT LINE 388 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
DOLLAR:             03CA DEFINED AT LINE 395 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
ARG:                03CA DEFINED AT LINE 396 IN MAIN.asm
ARG0:               03E8 DEFINED AT LINE 417 IN MAIN.asm
                    > USED AT LINE 423 IN MAIN.asm
ARG0A:              03F1 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 402 IN MAIN.asm
                    > USED AT LINE 409 IN MAIN.asm
ARG1:               03F6 DEFINED AT LINE 428 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARG1A:              03FE DEFINED AT LINE 435 IN MAIN.asm
                    > USED AT LINE 427 IN MAIN.asm
LBRACK:             0401 DEFINED AT LINE 439 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
ARRBEGIN:           0401 DEFINED AT LINE 440 IN MAIN.asm
RBRACK:             041D DEFINED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
ARREND:             041D DEFINED AT LINE 455 IN MAIN.asm
ARREND1:            0437 DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 487 IN MAIN.asm
ARREND2:            0447 DEFINED AT LINE 481 IN MAIN.asm
                    > USED AT LINE 477 IN MAIN.asm
ARRINDEX:           046B DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
ARRINDEX0:          0473 DEFINED AT LINE 514 IN MAIN.asm
ARRINDEX1:          0474 DEFINED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
ARRINDEX2:          0480 DEFINED AT LINE 525 IN MAIN.asm
                    > USED AT LINE 522 IN MAIN.asm
ASSIGN:             0483 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 280 IN MAIN.asm
ASSIGN0:            0485 DEFINED AT LINE 533 IN MAIN.asm
                    > USED AT LINE 328 IN MAIN.asm
                    > USED AT LINE 1251 IN MAIN.asm
ASSIGNX:            0486 DEFINED AT LINE 535 IN MAIN.asm
ASSIGN1:            0492 DEFINED AT LINE 543 IN MAIN.asm
                    > USED AT LINE 540 IN MAIN.asm
COLON:              0494 DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 248 IN MAIN.asm
ARGLIST:            0494 DEFINED AT LINE 551 IN MAIN.asm
ARGLIST1:           049E DEFINED AT LINE 558 IN MAIN.asm
                    > USED AT LINE 579 IN MAIN.asm
ARGLIST1A:          04A6 DEFINED AT LINE 564 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
ARGLIST2:           04AE DEFINED AT LINE 569 IN MAIN.asm
ARGLIST3:           04B6 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 575 IN MAIN.asm
ARGLIST4:           04B9 DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 566 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
ARGLIST5:           04BF DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
LBRACE:             04CB DEFINED AT LINE 597 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
BLOCK:              04CB DEFINED AT LINE 598 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
BLOCK1:             04CF DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 606 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
BLOCK2:             04FB DEFINED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 618 IN MAIN.asm
                    > USED AT LINE 620 IN MAIN.asm
BLOCK3:             04FE DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
                    > USED AT LINE 627 IN MAIN.asm
BLOCK4:             0506 DEFINED AT LINE 638 IN MAIN.asm
                    > USED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
BLOCK5:             0509 DEFINED AT LINE 641 IN MAIN.asm
                    > USED AT LINE 637 IN MAIN.asm
BLOCK6:             0531 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
RBRACE:             0534 DEFINED AT LINE 664 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
BLOCKEND:           0534 DEFINED AT LINE 665 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
BLOCKEND1:          0566 DEFINED AT LINE 687 IN MAIN.asm
                    > USED AT LINE 680 IN MAIN.asm
BLOCKEND2:          0572 DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 686 IN MAIN.asm
BLOCKEND3:          0584 DEFINED AT LINE 708 IN MAIN.asm
                    > USED AT LINE 700 IN MAIN.asm
TICK:               0590 DEFINED AT LINE 715 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
CHAR:               0590 DEFINED AT LINE 716 IN MAIN.asm
CHAR1:              0593 DEFINED AT LINE 718 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
CHAR2:              059F DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
CHAR3:              05A2 DEFINED AT LINE 730 IN MAIN.asm
                    > USED AT LINE 722 IN MAIN.asm
BACKSLASH:          05A5 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
COMMA:              05A7 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
DISCARD:            05A7 DEFINED AT LINE 740 IN MAIN.asm
DISCARD1:           05B4 DEFINED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
SLASH:              05B6 DEFINED AT LINE 752 IN MAIN.asm
                    > USED AT LINE 310 IN MAIN.asm
DOT:                05D4 DEFINED AT LINE 770 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
DOT1:               05E0 DEFINED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
DOT2:               05E9 DEFINED AT LINE 783 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
DOT3:               05F1 DEFINED AT LINE 791 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DOT5:               05F6 DEFINED AT LINE 795 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 782 IN MAIN.asm
DOTCHAR:            05FD DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 790 IN MAIN.asm
DOTCHAR_ARGS:       0608 DEFINED AT LINE 807 IN MAIN.asm
                    > USED AT LINE 804 IN MAIN.asm
DOTCHAR_BLOCK:      0609 DEFINED AT LINE 809 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
DOTDEC:             0614 DEFINED AT LINE 812 IN MAIN.asm
                    > USED AT LINE 794 IN MAIN.asm
DOTDEC_ARGS:        061F DEFINED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
DOTDEC_BLOCK:       0620 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
DIVIDE:             062B DEFINED AT LINE 827 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
DIVIDE1:            0630 DEFINED AT LINE 830 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
DIVIDE2:            063D DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
DIVIDE3:            063E DEFINED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
EQUALS:             0644 DEFINED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 285 IN MAIN.asm
LESSTHANEQ:         064C DEFINED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
LESSTHAN:           0651 DEFINED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 308 IN MAIN.asm
LESSTHAN1:          0656 DEFINED AT LINE 868 IN MAIN.asm
                    > USED AT LINE 859 IN MAIN.asm
TRUE1:              0659 DEFINED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 1289 IN MAIN.asm
NULL1:              065F DEFINED AT LINE 875 IN MAIN.asm
FALSE1:             065F DEFINED AT LINE 876 IN MAIN.asm
                    > USED AT LINE 852 IN MAIN.asm
                    > USED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 869 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
LPAREN:             0665 DEFINED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 296 IN MAIN.asm
CARET:              0668 DEFINED AT LINE 887 IN MAIN.asm
                    > USED AT LINE 267 IN MAIN.asm
GO:                 0668 DEFINED AT LINE 888 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 1621 IN MAIN.asm
                    > USED AT LINE 1730 IN MAIN.asm
GO1:                0669 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
                    > USED AT LINE 1068 IN MAIN.asm
GO2:                066F DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOBLOCK:            067B DEFINED AT LINE 903 IN MAIN.asm
GOBLOCK1:           067B DEFINED AT LINE 904 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
GOBLOCK2:           06A0 DEFINED AT LINE 921 IN MAIN.asm
                    > USED AT LINE 1003 IN MAIN.asm
GOFUNC:             06AE DEFINED AT LINE 930 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
GOFUNC1:            06C7 DEFINED AT LINE 949 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
GOFUNC2:            06CD DEFINED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
GOFUNC3:            06D8 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
GOFUNC4:            06F0 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
GOFUNC5:            06F4 DEFINED AT LINE 983 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
GOFUNC6:            06F7 DEFINED AT LINE 987 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
GOFUNC7:            06FA DEFINED AT LINE 990 IN MAIN.asm
GOFUNC8:            06FF DEFINED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 978 IN MAIN.asm
HASH:               070A DEFINED AT LINE 1005 IN MAIN.asm
                    > USED AT LINE 263 IN MAIN.asm
HEXNUM:             070A DEFINED AT LINE 1006 IN MAIN.asm
HEXNUM1:            070D DEFINED AT LINE 1008 IN MAIN.asm
                    > USED AT LINE 1025 IN MAIN.asm
HEXNUM2:            0715 DEFINED AT LINE 1014 IN MAIN.asm
                    > USED AT LINE 1012 IN MAIN.asm
UPCASE:             0727 DEFINED AT LINE 1026 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
LOWCASE:            072C DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
IDENT1:             0731 DEFINED AT LINE 1034 IN MAIN.asm
                    > USED AT LINE 1029 IN MAIN.asm
QUESTION:           073E DEFINED AT LINE 1047 IN MAIN.asm
                    > USED AT LINE 254 IN MAIN.asm
IF:                 073E DEFINED AT LINE 1048 IN MAIN.asm
IFTE:               074A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1052 IN MAIN.asm
IFTE1:              074B DEFINED AT LINE 1060 IN MAIN.asm
                    > USED AT LINE 1055 IN MAIN.asm
STAR:               0757 DEFINED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 256 IN MAIN.asm
MUL:                0757 DEFINED AT LINE 1071 IN MAIN.asm
MUL2:               0759 DEFINED AT LINE 1074 IN MAIN.asm
MUL3:               0761 DEFINED AT LINE 1079 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
NUM:                0773 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
NUM0:               077C DEFINED AT LINE 1098 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
NUM1:               077D DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
NUM2:               0795 DEFINED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1018 IN MAIN.asm
                    > USED AT LINE 1103 IN MAIN.asm
                    > USED AT LINE 1105 IN MAIN.asm
NUM3:               07A0 DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 1121 IN MAIN.asm
UNDERSCORE:         07A3 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 246 IN MAIN.asm
REMAIN:             07A3 DEFINED AT LINE 1131 IN MAIN.asm
RPAREN:             07A9 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
SEMICOLON:          07B1 DEFINED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 242 IN MAIN.asm
SHIFTLEFT:          07CD DEFINED AT LINE 1166 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
SHIFTLEFT1:         07D5 DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 1176 IN MAIN.asm
SHIFTLEFT2:         07D6 DEFINED AT LINE 1175 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
SHIFTRIGHT:         07DD DEFINED AT LINE 1183 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
SHIFTRIGHT1:        07E5 DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
SHIFTRIGHT2:        07E9 DEFINED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
DBLQUOTE:           07F0 DEFINED AT LINE 1202 IN MAIN.asm
                    > USED AT LINE 271 IN MAIN.asm
STRING:             07F0 DEFINED AT LINE 1203 IN MAIN.asm
STRING1:            07F9 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
STRING2:            07FC DEFINED AT LINE 1214 IN MAIN.asm
                    > USED AT LINE 1209 IN MAIN.asm
STRING3:            0805 DEFINED AT LINE 1220 IN MAIN.asm
                    > USED AT LINE 1217 IN MAIN.asm
MINUS:              0818 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 273 IN MAIN.asm
SUB:                0824 DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
SUB1:               082E DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
COMMAND:            0837 DEFINED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
ERROR1:             087C DEFINED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 1331 IN MAIN.asm
                    > USED AT LINE 1344 IN MAIN.asm
                    > USED AT LINE 1361 IN MAIN.asm
COMMAND_A:          0882 DEFINED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1269 IN MAIN.asm
COMMAND_B:          0890 DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1273 IN MAIN.asm
COMMAND_I:          08AD DEFINED AT LINE 1324 IN MAIN.asm
                    > USED AT LINE 1279 IN MAIN.asm
COMMAND_P:          08BB DEFINED AT LINE 1333 IN MAIN.asm
                    > USED AT LINE 1287 IN MAIN.asm
COMMAND_V:          08D3 DEFINED AT LINE 1346 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
COMMENT:            08F5 DEFINED AT LINE 1363 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
ABSOLUTE:           08FE DEFINED AT LINE 1373 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
ADDROF:             090B DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1306 IN MAIN.asm
ADDROF1:            091F DEFINED AT LINE 1400 IN MAIN.asm
                    > USED AT LINE 1396 IN MAIN.asm
ADDROF2:            092A DEFINED AT LINE 1409 IN MAIN.asm
                    > USED AT LINE 1392 IN MAIN.asm
                    > USED AT LINE 1394 IN MAIN.asm
                    > USED AT LINE 1399 IN MAIN.asm
BUFFERCHAR:         092C DEFINED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
BUFFERSTRING:       093B DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 1319 IN MAIN.asm
BUFFERSTRING0:      0942 DEFINED AT LINE 1430 IN MAIN.asm
                    > USED AT LINE 1437 IN MAIN.asm
BUFFERSTRING1:      0945 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1429 IN MAIN.asm
BUFFERDEC:          0957 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
BUFFERDEC0:         096F DEFINED AT LINE 1465 IN MAIN.asm
                    > USED AT LINE 1452 IN MAIN.asm
BUFFERDEC1:         097F DEFINED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
BUFFERDEC2:         099F DEFINED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
BUFFERDEC3:         09A1 DEFINED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
BUFFERDEC4:         09B1 DEFINED AT LINE 1507 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
BUFFERDEC5:         09B2 DEFINED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
BREAK:              09B8 DEFINED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1317 IN MAIN.asm
BREAK1:             09BF DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1521 IN MAIN.asm
BUFFERXSPACES:      09D2 DEFINED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERXSPACES1:     09D9 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1548 IN MAIN.asm
BUFFERXSPACES2:     09DD DEFINED AT LINE 1545 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
PARTIAL:            09E6 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
PRINTCHARS:         0A06 DEFINED AT LINE 1573 IN MAIN.asm
                    > USED AT LINE 1339 IN MAIN.asm
PRINTCHARS1:        0A0B DEFINED AT LINE 1577 IN MAIN.asm
                    > USED AT LINE 1585 IN MAIN.asm
PRINTCHARS2:        0A0D DEFINED AT LINE 1580 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
PRINTSTACK:         0A17 DEFINED AT LINE 1590 IN MAIN.asm
                    > USED AT LINE 1341 IN MAIN.asm
PRINTSTACK1:        0A32 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 1615 IN MAIN.asm
PRINTSTACK2:        0A41 DEFINED AT LINE 1612 IN MAIN.asm
                    > USED AT LINE 1600 IN MAIN.asm
PRINTX:             0A4E DEFINED AT LINE 1620 IN MAIN.asm
                    > USED AT LINE 1343 IN MAIN.asm
PRINTX_ARGS:        0A59 DEFINED AT LINE 1627 IN MAIN.asm
                    > USED AT LINE 1624 IN MAIN.asm
PRINTX_BLOCK:       0A5A DEFINED AT LINE 1629 IN MAIN.asm
                    > USED AT LINE 1623 IN MAIN.asm
CHARS:              0A7C DEFINED AT LINE 1632 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
CHARS1:             0A7F DEFINED AT LINE 1634 IN MAIN.asm
                    > USED AT LINE 1703 IN MAIN.asm
CONSTBUFSTART:      0A84 DEFINED AT LINE 1638 IN MAIN.asm
                    > USED AT LINE 1356 IN MAIN.asm
CONSTHEAPSTART:     0A89 DEFINED AT LINE 1642 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
CONSTTIBSTART:      0A8E DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 1360 IN MAIN.asm
VARBUFPTR:          0A93 DEFINED AT LINE 1650 IN MAIN.asm
                    > USED AT LINE 1350 IN MAIN.asm
VARHEAPPTR:         0A9C DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1352 IN MAIN.asm
VARTIBPTR:          0AA5 DEFINED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1354 IN MAIN.asm
VARIABLE:           0AAE DEFINED AT LINE 1665 IN MAIN.asm
                    > USED AT LINE 349 IN MAIN.asm
                    > USED AT LINE 1653 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1663 IN MAIN.asm
CONSTANT:           0AB1 DEFINED AT LINE 1667 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
                    > USED AT LINE 1644 IN MAIN.asm
                    > USED AT LINE 1648 IN MAIN.asm
INPUT:              0AB4 DEFINED AT LINE 1673 IN MAIN.asm
                    > USED AT LINE 1328 IN MAIN.asm
KEY:                0ABF DEFINED AT LINE 1683 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
OUTPUT:             0AC8 DEFINED AT LINE 1692 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
NUMBERS:            0AD1 DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
FILTER:             0AD7 DEFINED AT LINE 1710 IN MAIN.asm
MAP:                0AD7 DEFINED AT LINE 1711 IN MAIN.asm
ZPRT:               0AD9 DEFINED AT LINE 1729 IN MAIN.asm
                    > USED AT LINE 1295 IN MAIN.asm
ZPRT_ARGS:          0AE4 DEFINED AT LINE 1736 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
ZPRT_BLOCK:         0AE6 DEFINED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
PRTDEC:             0B0D DEFINED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
PRTDEC0:            0B1C DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1745 IN MAIN.asm
PRTDEC1:            0B3E DEFINED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
                    > USED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
PRTDEC2:            0B40 DEFINED AT LINE 1772 IN MAIN.asm
                    > USED AT LINE 1775 IN MAIN.asm
PRTDEC3:            0B50 DEFINED AT LINE 1784 IN MAIN.asm
                    > USED AT LINE 1779 IN MAIN.asm
PRTDEC4:            0B51 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
PRTHEX:             0B55 DEFINED AT LINE 1790 IN MAIN.asm
                    > USED AT LINE 776 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
PRTHEX2:            0B60 DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 1793 IN MAIN.asm
                    > USED AT LINE 1795 IN MAIN.asm
PRTHEX3:            0B69 DEFINED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
PRTSTR0:            0B74 DEFINED AT LINE 1814 IN MAIN.asm
                    > USED AT LINE 1820 IN MAIN.asm
PRTSTR:             0B78 DEFINED AT LINE 1817 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
                    > USED AT LINE 1884 IN MAIN.asm
NESTING:            0B7D DEFINED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
                    > USED AT LINE 1984 IN MAIN.asm
NESTING0:           0B87 DEFINED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1835 IN MAIN.asm
                    > USED AT LINE 1837 IN MAIN.asm
NESTING1A:          0B8E DEFINED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1841 IN MAIN.asm
NESTING1:           0B91 DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1838 IN MAIN.asm
NESTING2:           0BA0 DEFINED AT LINE 1856 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
                    > USED AT LINE 1853 IN MAIN.asm
NESTING3:           0BA2 DEFINED AT LINE 1859 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
NESTING4:           0BAD DEFINED AT LINE 1866 IN MAIN.asm
                    > USED AT LINE 1861 IN MAIN.asm
                    > USED AT LINE 1863 IN MAIN.asm
PROMPT:             0BAF DEFINED AT LINE 1870 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
CRLF:               0BB8 DEFINED AT LINE 1875 IN MAIN.asm
                    > USED AT LINE 1996 IN MAIN.asm
PRINTSTR:           0BBF DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 1592 IN MAIN.asm
                    > USED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 1908 IN MAIN.asm
                    > USED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
INIT:               0BC6 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 7
                    > USED AT LINE 1907 IN MAIN.asm
INIT0:              0BDF DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1902 IN MAIN.asm
START:              0BE4 DEFINED AT LINE 1905 IN MAIN.asm
                    > USED AT LINE 8
INTERPRET:          0BFA DEFINED AT LINE 1911 IN MAIN.asm
                    > USED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
INTERPRET2:         0C06 DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2046 IN MAIN.asm
INTERPRET3:         0C0E DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 1934 IN MAIN.asm
INTERPRET4:         0C14 DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
INTERPRET5:         0C19 DEFINED AT LINE 1937 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
INTERPRET5A:        0C3C DEFINED AT LINE 1973 IN MAIN.asm
INTERPRET6:         0C3E DEFINED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1940 IN MAIN.asm
INTERPRET7:         0C4C DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
INTERPRET8:         0C5F DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
NEXT:               0C6A DEFINED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 73 IN MAIN.asm
                    > USED AT LINE 2013 IN MAIN.asm
NEXT1:              0C79 DEFINED AT LINE 2020 IN MAIN.asm
                    > USED AT LINE 2014 IN MAIN.asm
EXIT:               0C80 DEFINED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2022 IN MAIN.asm
RUN:                0C84 DEFINED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
                    > USED AT LINE 2058 IN MAIN.asm
ERROR:              0C88 DEFINED AT LINE 2033 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
BACKSPACE_:         0C98 DEFINED AT LINE 2039 IN MAIN.asm
                    > USED AT LINE 1950 IN MAIN.asm
EDIT_:              0CA8 DEFINED AT LINE 2049 IN MAIN.asm
                    > USED AT LINE 1948 IN MAIN.asm
REEDIT_:            0CC0 DEFINED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 1952 IN MAIN.asm
PRINTSTACK_:        0CC3 DEFINED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
STACK:              0D80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 906 IN MAIN.asm
                    > USED AT LINE 1594 IN MAIN.asm
                    > USED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
VARS:               0E00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1402 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
RESTARTS:           0ED0 DEFINED AT LINE 11 IN ram.asm
RST08:              0ED0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0ED2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0ED4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0ED6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0ED8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0EDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0EDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0EDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0EE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0EE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            0EE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0EE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1893 IN MAIN.asm
VDATAWIDTH:         0EE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 475 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
VTIBPTR:            0EE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1661 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
VBUFPTR:            0EEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1416 IN MAIN.asm
                    > USED AT LINE 1419 IN MAIN.asm
                    > USED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1438 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1539 IN MAIN.asm
                    > USED AT LINE 1549 IN MAIN.asm
                    > USED AT LINE 1651 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
VNEXT:              0EEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 1890 IN MAIN.asm
VHEAPPTR:           0EEE DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 465 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
                    > USED AT LINE 498 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 1161 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1556 IN MAIN.asm
                    > USED AT LINE 1561 IN MAIN.asm
                    > USED AT LINE 1562 IN MAIN.asm
                    > USED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1657 IN MAIN.asm
VPOINTER:           0EF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 348 IN MAIN.asm
                    > USED AT LINE 431 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
                    > USED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 1038 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
VREMAIN:            0EF2 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 766 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
VSAVEDIP:           0EF4 DEFINED AT LINE 40 IN ram.asm
VSAVEDSP:           0EF6 DEFINED AT LINE 41 IN ram.asm
VSAVEDBP:           0EF8 DEFINED AT LINE 42 IN ram.asm
VCHECKSUM:          0EFA DEFINED AT LINE 43 IN ram.asm
VTEMP1:             0EFC DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 458 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 650 IN MAIN.asm
                    > USED AT LINE 659 IN MAIN.asm
                    > USED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 712 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
                    > USED AT LINE 960 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
                    > USED AT LINE 1557 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
                    > USED AT LINE 1591 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
VTEMP2:             0EFE DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 671 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
VLASTDEF:           0F00 DEFINED AT LINE 49 IN ram.asm
VHASHSTR:           0F02 DEFINED AT LINE 50 IN ram.asm
TBPTR:              0F04 DEFINED AT LINE 51 IN ram.asm
TIB:                1000 DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 71 IN MAIN.asm
                    > USED AT LINE 1647 IN MAIN.asm
                    > USED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1922 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
BUF:                1100 DEFINED AT LINE 55 IN ram.asm
                    > USED AT LINE 72 IN MAIN.asm
                    > USED AT LINE 1639 IN MAIN.asm
PAD:                1200 DEFINED AT LINE 58 IN ram.asm
HEAP:               1300 DEFINED AT LINE 60 IN ram.asm
                    > USED AT LINE 74 IN MAIN.asm
                    > USED AT LINE 643 IN MAIN.asm
                    > USED AT LINE 1643 IN MAIN.asm
