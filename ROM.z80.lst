0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 15 0C               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQUOTE:   EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   A9 0C                  DW   next   ; nNext
018A   1E 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C                          ALIGN   $100   
0200                OPCODES:      ; still available ~ ` _
0200   7F                     DB   lsb(nop_)   ; SP
0201   36                     DB   lsb(bang_)   ; !
0202   4A                     DB   lsb(dblquote_)   ; "
0203   3E                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1E                     DB   lsb(tick_)   ; '
0208   18                     DB   lsb(lparen_)   ; (
0209   81                     DB   lsb(rparen_)   ; )
020A   33                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   47                     DB   lsb(comma_)   ; ,
020D   4D                     DB   lsb(minus_)   ; -
020E   24                     DB   lsb(dot_)   ; .
020F   7C                     DB   lsb(slash_)   ; /	
0210   3B                     DB   lsb(num_)   ; 0
0211   3B                     DB   lsb(num_)   ; 1
0212   3B                     DB   lsb(num_)   ; 2
0213   3B                     DB   lsb(num_)   ; 3
0214   3B                     DB   lsb(num_)   ; 4
0215   3B                     DB   lsb(num_)   ; 5
0216   3B                     DB   lsb(num_)   ; 6
0217   3B                     DB   lsb(num_)   ; 7
0218   3B                     DB   lsb(num_)   ; 8
0219   3B                     DB   lsb(num_)   ; 9
021A   27                     DB   lsb(colon_)   ; :
021B   21                     DB   lsb(semicolon_)   ; ;
021C   6A                     DB   lsb(lt_)   ; <
021D   50                     DB   lsb(eq_)   ; =
021E   5F                     DB   lsb(gt_)   ; >
021F   30                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   2A                     DB   lsb(upcase_)   ; A
0222   2A                     DB   lsb(upcase_)   ; B
0223   2A                     DB   lsb(upcase_)   ; C
0224   2A                     DB   lsb(upcase_)   ; D
0225   2A                     DB   lsb(upcase_)   ; E
0226   2A                     DB   lsb(upcase_)   ; F
0227   2A                     DB   lsb(upcase_)   ; G
0228   2A                     DB   lsb(upcase_)   ; h
0229   2A                     DB   lsb(upcase_)   ; I
022A   2A                     DB   lsb(upcase_)   ; J
022B   2A                     DB   lsb(upcase_)   ; K
022C   2A                     DB   lsb(upcase_)   ; L
022D   2A                     DB   lsb(upcase_)   ; M
022E   2A                     DB   lsb(upcase_)   ; N
022F   2A                     DB   lsb(upcase_)   ; O
0230   2A                     DB   lsb(upcase_)   ; p
0231   2A                     DB   lsb(upcase_)   ; Q
0232   2A                     DB   lsb(upcase_)   ; R
0233   2A                     DB   lsb(upcase_)   ; S
0234   2A                     DB   lsb(upcase_)   ; T
0235   2A                     DB   lsb(upcase_)   ; U
0236   2A                     DB   lsb(upcase_)   ; V
0237   2A                     DB   lsb(upcase_)   ; W
0238   2A                     DB   lsb(upcase_)   ; X
0239   2A                     DB   lsb(upcase_)   ; Y
023A   2A                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   15                     DB   lsb(backslash_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   44                     DB   lsb(caret_)   ; ^
023F   7F                     DB   lsb(nop_)   ; _
0240   4A                     DB   lsb(dblquote_)   ; `     used for testing string   	
0241   2D                     DB   lsb(lowcase_)   ; a
0242   2D                     DB   lsb(lowcase_)   ; b
0243   2D                     DB   lsb(lowcase_)   ; c
0244   2D                     DB   lsb(lowcase_)   ; d
0245   2D                     DB   lsb(lowcase_)   ; e
0246   2D                     DB   lsb(lowcase_)   ; f
0247   2D                     DB   lsb(lowcase_)   ; g
0248   2D                     DB   lsb(lowcase_)   ; h
0249   2D                     DB   lsb(lowcase_)   ; i
024A   2D                     DB   lsb(lowcase_)   ; j
024B   2D                     DB   lsb(lowcase_)   ; k
024C   2D                     DB   lsb(lowcase_)   ; l
024D   2D                     DB   lsb(lowcase_)   ; m
024E   2D                     DB   lsb(lowcase_)   ; n
024F   2D                     DB   lsb(lowcase_)   ; o
0250   2D                     DB   lsb(lowcase_)   ; p
0251   2D                     DB   lsb(lowcase_)   ; q
0252   2D                     DB   lsb(lowcase_)   ; r
0253   2D                     DB   lsb(lowcase_)   ; s
0254   2D                     DB   lsb(lowcase_)   ; t
0255   2D                     DB   lsb(lowcase_)   ; u
0256   2D                     DB   lsb(lowcase_)   ; v
0257   2D                     DB   lsb(lowcase_)   ; w
0258   2D                     DB   lsb(lowcase_)   ; x
0259   2D                     DB   lsb(lowcase_)   ; y
025A   2D                     DB   lsb(lowcase_)   ; z
025B   18                     DB   lsb(lbrace_)   ; {
025C   41                     DB   lsb(pipe_)   ; |
025D   1B                     DB   lsb(rbrace_)   ; }
025E   7F                     DB   lsb(nop_)   ; ~
025F   7F                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 84 03               JP   plus   
0303                AT_:         
0303   C3 96 03               JP   at   
0306                AMPER_:      
0306   C3 A0 03               JP   amper   
0309                DOLLAR_:      
0309   C3 E4 06               JP   dollar   
030C                LBRACK_:      
030C   C3 F9 03               JP   lbrack   
030F                RBRACK_:      
030F   C3 15 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 C4 03               JP   percent   
0315                BACKSLASH_:      
0315   C3 9E 05               JP   backslash   
0318                LPAREN_:      
0318                LBRACE_:      
0318   C3 C4 04               JP   lbrace   
031B                RBRACE_:      
031B   C3 2D 05               JP   rbrace   
031E                TICK_:       
031E   C3 89 05               JP   tick   
0321                SEMICOLON_:      
0321   C3 85 07               JP   semicolon   
0324                DOT_:        
0324   C3 F9 05               JP   dot   
0327                COLON_:      
0327   C3 8E 04               JP   colon   
032A                UPCASE_:      
032A   C3 01 07               JP   upcase   
032D                LOWCASE_:      
032D   C3 06 07               JP   lowcase   
0330                QUESTION_:      
0330   C3 18 07               JP   question   
0333                STAR_:       
0333   C3 31 07               JP   star   
0336                BANG_:       ; logical invert, any non zero value
0336   21 00 00               LD   hl,0   ; is considered true
0339   18 20                  JR   eq1   
033B                NUM_:        
033B   C3 4D 07               JP   num   
033E                HASH_:       
033E   C3 65 04               JP   hash   
0341                PIPE_:       
0341   C3 AB 03               JP   pipe   
0344                CARET_:      
0344   C3 45 06               JP   caret   
0347                COMMA_:      
0347   C3 A0 05               JP   comma   
034A                DBLQUOTE_:      
034A   C3 C4 07               JP   dblquote   
034D                MINUS_:      
034D   C3 EC 07               JP   minus   
0350                EQ_:         
0350   03                     INC   bc   
0351   0A                     LD   a,(bc)   ; is it == ?
0352   FE 3D                  CP   "="   
0354   28 04                  JR   z,eq0   ; no its equality
0356   0B                     DEC   bc   
0357   C3 7D 04               JP   assign   ; no its assignment
035A                EQ0:         
035A   E1                     POP   hl   
035B                EQ1:         
035B   D1                     POP   de   
035C   C3 24 06               JP   equals   
035F                GT_:         
035F   03                     INC   bc   
0360   0A                     LD   a,(bc)   
0361   FE 3E                  CP   ">"   
0363   CA B1 07               JP   z,shiftRight   
0366   D1                     POP   de   
0367   E1                     POP   hl   
0368   18 09                  JR   lt1   
036A                LT_:         
036A   03                     INC   bc   
036B   0A                     LD   a,(bc)   
036C   FE 3C                  CP   "<"   
036E   CA A1 07               JP   z,shiftLeft   
0371   E1                     POP   hl   
0372   D1                     POP   de   
0373                LT1:         
0373   FE 3D                  CP   "="   
0375   CA 2C 06               JP   z,lessthaneq   
0378   0B                     DEC   bc   
0379   C3 31 06               JP   lessthan   
037C                SLASH_:      
037C   C3 AF 05               JP   slash   
037F                NOP_:        
037F   DD E9                  JP   (ix)   
0381                RPAREN_:      
0381   C3 7D 07               JP   rparen   
0384                             ;*******************************************************************
0384                             ; implementations
0384                             ;*******************************************************************
0384                PLUS:        
0384                ADD:         
0384   03                     INC   bc   
0385   0A                     LD   a,(bc)   
0386   FE 2B                  CP   "+"   ; ++ increment variable
0388   20 05                  JR   nz,add1   
038A   E1                     POP   hl   
038B   23                     INC   hl   
038C   C3 7F 04               JP   assign0   
038F                ADD1:        
038F   0B                     DEC   bc   
0390   D1                     POP   de   ; second term
0391   E1                     POP   hl   ; first term
0392   19                     ADD   hl,de   
0393                ADD3:        
0393   E5                     PUSH   hl   
0394   DD E9                  JP   (ix)   
0396                             ; @ addr
0396                             ; -- ptr
0396                AT:          
0396                ADDR:        
0396   ED 5B F2 23            LD   de,(vPointer)   
039A   21 F2 23               LD   hl,vPointer   
039D   C3 E5 0A               JP   variable   
03A0                AMPER:       
03A0                AND:         
03A0   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03A1   E1                     POP   hl   
03A2   7B                     LD   a,e   
03A3   A5                     AND   l   
03A4   6F                     LD   l,a   
03A5   7A                     LD   a,d   
03A6   A4                     AND   h   
03A7                AND1:        
03A7   67                     LD   h,a   
03A8   E5                     PUSH   hl   
03A9   DD E9                  JP   (ix)   
03AB                PIPE:        
03AB                OR:          
03AB   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03AC   E1                     POP   hl   
03AD   7B                     LD   a,e   
03AE   B5                     OR   l   
03AF   6F                     LD   l,a   
03B0   7A                     LD   a,d   
03B1   B4                     OR   h   
03B2   18 F3                  JR   and1   
03B4                XOR:         
03B4   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03B5                XOR1:        
03B5   E1                     POP   hl   
03B6   7B                     LD   a,e   
03B7   AD                     XOR   l   
03B8   6F                     LD   l,a   
03B9   7A                     LD   a,d   
03BA   AC                     XOR   h   
03BB   67                     LD   h,a   
03BC   E5                     PUSH   hl   
03BD   DD E9                  JP   (ix)   
03BF                INVERT:      ; Bitwise INVert the top member of the stack
03BF   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03C2   18 F1                  JR   xor1   
03C4                             ; %a .. %z
03C4                             ; -- value
03C4                             ; returns value of arg
03C4                PERCENT:      
03C4                ARG:         
03C4   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03C7   FD 56 05               LD   d,(iy+5)   
03CA   EB                     EX   de,hl   
03CB   7D                     LD   a,l   ; arg_list* == null, skip
03CC   B4                     OR   h   
03CD   28 1A                  JR   z,arg0a   
03CF   23                     INC   hl   ; a = num_args, hl = arg_list*
03D0   7E                     LD   a,(hl)   
03D1   23                     INC   hl   
03D2   B7                     OR   a   
03D3   28 14                  JR   z,arg0a   ; num_args == 0, skip
03D5   5F                     LD   e,a   ; e = a = num_args
03D6   03                     INC   bc   ; a = next char = dollar_name
03D7   0A                     LD   a,(bc)   
03D8   C5                     PUSH   bc   ; save IP
03D9   43                     LD   b,e   ; b = e = num_args
03DA   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03DD   FD 56 03               LD   d,(iy+3)   
03E0                ARG0:        
03E0   1B                     DEC   de   ; a = dollar_name, de = next arg*
03E1   1B                     DEC   de   
03E2   BE                     CP   (hl)   
03E3   28 09                  JR   z,arg1   
03E5   23                     INC   hl   ; hl = next arg_list*
03E6   10 F8                  DJNZ   arg0   
03E8   C1                     POP   bc   ; no match, restore IP
03E9                ARG0A:       
03E9   11 00 00               LD   de,0   ; return 0
03EC   18 08                  JR   arg1a   
03EE                ARG1:        
03EE   C1                     POP   bc   ; restore IP
03EF   EB                     EX   de,hl   ; hl = arg*
03F0   22 F2 23               LD   (vPointer),hl   ; store arg* in setter
03F3   5E                     LD   e,(hl)   
03F4   23                     INC   hl   
03F5   56                     LD   d,(hl)   ; de = arg
03F6                ARG1A:       
03F6   D5                     PUSH   de   ; push arg
03F7   DD E9                  JP   (ix)   
03F9                LBRACK:      
03F9                ARRAYSTART:      
03F9   11 00 00               LD   de,0   ; create stack frame
03FC   D5                     PUSH   de   ; push null for IP
03FD   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0400   FD 56 05               LD   d,(iy+5)   ; 
0403   D5                     PUSH   de   ; 
0404   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0407   FD 56 03               LD   d,(iy+3)   ; 
040A   D5                     PUSH   de   ; 
040B   FD E5                  PUSH   iy   ; push BP
040D   FD 21 00 00            LD   iy,0   ; BP = SP
0411   FD 39                  ADD   iy,sp   
0413   DD E9                  JP   (ix)   
0415                RBRACK:      
0415                ARRAYEND:      
0415   FD 54                  LD   d,iyh   ; de = BP
0417   FD 5D                  LD   e,iyl   
0419   ED 43 00 24            LD   (vTemp1),bc   ; save IP
041D   62 6B                  LD   hl,de   ; hl = de = BP
041F   B7                     OR   a   
0420   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0422   CB 3C                  SRL   h   ; 
0424   CB 1D                  RR   l   
0426   44 4D                  LD   bc,hl   ; bc = count
0428   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
042B   71                     LD   (hl),c   ; write num items in length word
042C   23                     INC   hl   
042D   70                     LD   (hl),b   
042E   23                     INC   hl   ; hl = array[0], bc = count
042F                             ; de = BP, hl = array[0], bc = count
042F   18 15                  JR   arrayEnd3   
0431                ARRAYEND1:      
0431   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
0434   77                     LD   (hl),a   ; write lsb of array item
0435   23                     INC   hl   ; move to msb of array item
0436   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0439   3D                     DEC   a   
043A   28 05                  JR   z,arrayEnd2   
043C   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
043F   77                     LD   (hl),a   ; write msb of array item
0440   23                     INC   hl   ; move to next word in array
0441                ARRAYEND2:      
0441   FD 2B                  DEC   iy   ; move to next word on stack
0443   FD 2B                  DEC   iy   
0445   0B                     DEC   bc   ; dec items count
0446                ARRAYEND3:      
0446   79                     LD   a,c   ; if not zero loop
0447   B0                     OR   b   
0448   20 E7                  JR   nz,arrayEnd1   
044A   EB                     EX   de,hl   ; de = end of array, hl = BP
044B   F9                     LD   sp,hl   ; sp = BP
044C   E1                     POP   hl   ; de = end of array, hl = old BP
044D   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
044E   FD 62                  LD   iyh,d   
0450   FD 6B                  LD   iyl,e   
0452   D1                     POP   de   ; pop arg_list (discard)
0453   D1                     POP   de   ; pop first_arg* (discard)
0454   D1                     POP   de   ; pop IP (discard)
0455   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
0459   13                     INC   de   
045A   13                     INC   de   
045B   D5                     PUSH   de   ; return array[0]
045C   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
045F   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0463   DD E9                  JP   (ix)   
0465                             ; index of an array, based on vDataWidth
0465                             ; array num -- value    ; also sets vPointer to address
0465                HASH:        
0465                ARRAYINDEX:      
0465   E1                     POP   hl   ; hl = index
0466   D1                     POP   de   ; de = array
0467   3A E6 23               LD   a,(vDataWidth)   ; a = data width
046A   3D                     DEC   a   
046B   28 01                  JR   z,arrayIndex1   
046D                ARRAYINDEX0:      
046D   29                     ADD   hl,hl   ; if data width = 2 then double
046E                ARRAYINDEX1:      
046E   19                     ADD   hl,de   ; add addr
046F   22 F2 23               LD   (vPointer),hl   ; store address in setter
0472   16 00                  LD   d,0   
0474   5E                     LD   e,(hl)   
0475   B7                     OR   a   ; check data width again
0476   28 02                  JR   z,arrayIndex2   
0478   23                     INC   hl   
0479   56                     LD   d,(hl)   
047A                ARRAYINDEX2:      
047A   D5                     PUSH   de   
047B   DD E9                  JP   (ix)   
047D                             ; value _oldValue --            ; uses address in vPointer
047D                ASSIGN:      
047D   E1                     POP   hl   ; discard last accessed value
047E   E1                     POP   hl   ; hl = new value
047F                ASSIGN0:      
047F   EB                     EX   de,hl   ; de = new value
0480                ASSIGNX:      
0480   2A F2 23               LD   hl,(vPointer)   
0483   73                     LD   (hl),e   
0484   3A E6 23               LD   a,(vDataWidth)   
0487   3D                     DEC   a   ; is it byte?
0488   28 02                  JR   z,assign1   
048A   23                     INC   hl   
048B   72                     LD   (hl),d   
048C                ASSIGN1:      
048C   DD E9                  JP   (ix)   
048E                             ; arg_list - parses input (ab:c)
048E                             ; names after the : represent uninitialised locals
048E                             ; return values are the state of the stack after the block ends
048E                             ; format: numLocals totNumArgs argChars...
048E                COLON:       
048E                ARGLIST:      
048E   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0491   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0494   E5                     PUSH   hl   ; save start of arg_list
0495   23                     INC   hl   ; skip length fields to start of string
0496   23                     INC   hl   
0497   03                     INC   bc   ; point to next char
0498                ARGLIST1:      
0498   0A                     LD   a,(bc)   
0499   FE 3A                  CP   ":"   ; ":" switches from args to locals
049B   20 03                  JR   nz,arglist1a   
049D   14                     INC   d   ; non zero value local count acts as flag
049E   18 10                  JR   arglist3   
04A0                ARGLIST1A:      
04A0   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A2   38 0F                  JR   c,arglist4   
04A4   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04A6   30 0B                  JR   nc,arglist4   
04A8                ARGLIST2:      
04A8   77                     LD   (hl),a   
04A9   23                     INC   hl   
04AA   1C                     INC   e   ; increase arg count
04AB   AF                     XOR   a   
04AC   B2                     OR   d   
04AD   28 01                  JR   z,arglist3   
04AF   14                     INC   d   ; if d > 0 increase local count
04B0                ARGLIST3:      
04B0   03                     INC   bc   ; point to next char
04B1   18 E5                  JR   arglist1   
04B3                ARGLIST4:      
04B3   0B                     DEC   bc   
04B4   AF                     XOR   a   
04B5   B2                     OR   d   
04B6   28 01                  JR   z,arglist5   
04B8   15                     DEC   d   ; remove initial inc
04B9                ARGLIST5:      
04B9   23                     INC   hl   
04BA   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04BD   E1                     POP   hl   ; hl = start of arg_list
04BE   E5                     PUSH   hl   ; return start of arg_list
04BF   72                     LD   (hl),d   ; write number of locals at start - 1
04C0   23                     INC   hl   
04C1   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C2   DD E9                  JP   (ix)   
04C4                LBRACE:      
04C4                BLOCKSTART:      
04C4   C5                     PUSH   bc   ; return pointer to first { of block
04C5   03                     INC   bc   
04C6   16 01                  LD   d,1   ; nesting: count first parenthesis
04C8                BLOCKSTART1:      ; Skip to end of definition
04C8   0A                     LD   a,(bc)   ; Get the next character
04C9   03                     INC   bc   ; Point to next character
04CA   FE 21                  CP   " " + 1   ; ignore whitespace
04CC   38 FA                  JR   c,blockStart1   
04CE   FE 29                  CP   ")"   
04D0   28 2D                  JR   z,blockStart4   
04D2   FE 7D                  CP   "}"   
04D4   28 29                  JR   z,blockStart4   
04D6   FE 5D                  CP   "]"   
04D8   28 25                  JR   z,blockStart4   
04DA   FE 28                  CP   "("   
04DC   28 16                  JR   z,blockStart2   
04DE   FE 7B                  CP   "{"   
04E0   28 12                  JR   z,blockStart2   
04E2   FE 5B                  CP   "["   
04E4   28 0E                  JR   z,blockStart2   
04E6   FE 27                  CP   "'"   
04E8   28 0D                  JR   z,blockStart3   
04EA   FE 60                  CP   "`"   
04EC   28 09                  JR   z,blockStart3   
04EE   FE 22                  CP   DQUOTE   
04F0   28 05                  JR   z,blockStart3   
04F2   18 D4                  JR   blockStart1   
04F4                BLOCKSTART2:      
04F4   14                     INC   d   
04F5   18 D1                  JR   blockStart1   
04F7                BLOCKSTART3:      
04F7   3E 80                  LD   a,$80   
04F9   AA                     XOR   d   
04FA   57                     LD   d,a   
04FB   20 CB                  JR   nz,blockStart1   
04FD   18 03                  JR   blockStart5   
04FF                BLOCKSTART4:      
04FF   15                     DEC   d   
0500   20 C6                  JR   nz,blockStart1   ; get the next element
0502                BLOCKSTART5:      
0502   60 69                  LD   hl,bc   ; hl = IP
0504   11 1E 24               LD   de,HEAP   ; is IP pointing to object in heap
0507   B7                     OR   a   ; IP - HEAP
0508   ED 52                  SBC   hl,de   
050A   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
050C   28 1C                  JR   z,blockStart6   
050E   60 69                  LD   hl,bc   ; hl = IP
0510   D1                     POP   de   ; de = block*
0511   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0515   B7                     OR   a   ; bc = size
0516   ED 52                  SBC   hl,de   
0518   44 4D                  LD   bc,hl   
051A   EB                     EX   de,hl   ; hl = block* de = heap*
051B   ED 5B F0 23            LD   de,(vHeapPtr)   
051F   D5                     PUSH   de   ; return hblock*
0520   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0522   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
0526   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
052A                BLOCKSTART6:      
052A   0B                     DEC   bc   ; balanced, exit
052B   DD E9                  JP   (ix)   
052D                RBRACE:      
052D                BLOCKEND:      
052D   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0530   FD 56 01               LD   d,(iy+1)   
0533   ED 53 00 24            LD   (vTemp1),de   
0537   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
053A   FD 56 07               LD   d,(iy+7)   
053D   ED 53 02 24            LD   (vTemp2),de   
0541   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0544   FD 56 03               LD   d,(iy+3)   
0547   EB                     EX   de,hl   
0548   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
054B   FD 56 01               LD   d,(iy+1)   
054E   13                     INC   de   ; for carry flag <=
054F   B7                     OR   a   
0550   ED 52                  SBC   hl,de   
0552   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0554   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0556   FD 5D                  LD   e,iyl   
0558   21 08 00               LD   hl,8   
055B   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
055C   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
055D   18 0C                  JR   blockEnd2   
055F                BLOCKEND1:      ; same scope
055F   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0562   FD 56 03               LD   d,(iy+3)   
0565   EB                     EX   de,hl   
0566   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0568   FD 5D                  LD   e,iyl   
056A   EB                     EX   de,hl   
056B                BLOCKEND2:      
056B   44 4D                  LD   bc,hl   ; bc = hl = BP
056D   B7                     OR   a   ; hl = BP - SP = count
056E   ED 72                  SBC   hl,sp   
0570   7D                     LD   a,l   
0571   B4                     OR   h   
0572   28 09                  JR   z,blockEnd3   
0574   C5                     PUSH   bc   ; bc = count, hl = BP
0575   44 4D                  LD   bc,hl   
0577   E1                     POP   hl   
0578   2B                     DEC   hl   ; hl = BP-1
0579   1B                     DEC   de   ; de = args*-1
057A   ED B8                  LDDR      
057C   13                     INC   de   
057D                BLOCKEND3:      
057D   EB                     EX   de,hl   ; sp = de = new tos*
057E   F9                     LD   sp,hl   
057F   ED 4B 02 24            LD   bc,(vTemp2)   
0583   FD 2A 00 24            LD   iy,(vTemp1)   
0587   DD E9                  JP   (ix)   
0589                TICK:        
0589                CHAR:        
0589   21 00 00               LD   hl,0   ; if "" is empty or null
058C                CHAR1:       
058C   03                     INC   bc   ; point to next char
058D   0A                     LD   a,(bc)   
058E   FE 27                  CP   "'"   ; ' is the terminator
0590   28 09                  JR   z,char3   
0592   FE 5C                  CP   $5c   ; \ is the escape
0594   20 02                  JR   nz,char2   
0596   03                     INC   bc   
0597   0A                     LD   a,(bc)   
0598                CHAR2:       
0598   6F                     LD   l,a   
0599   18 F1                  JR   char1   
059B                CHAR3:       
059B   E5                     PUSH   hl   
059C   DD E9                  JP   (ix)   
059E                BACKSLASH:      
059E   DD E9                  JP   (ix)   
05A0                             ; , discard stack item
05A0                             ; x y -- x
05A0                COMMA:       
05A0                DISCARD:      
05A0   FD 54                  LD   d,iyh   ; limit this to SP <= BP
05A2   FD 5D                  LD   e,iyl   
05A4   EB                     EX   de,hl   
05A5   B7                     OR   a   
05A6   ED 72                  SBC   hl,sp   
05A8   CB 7C                  BIT   7,h   
05AA   20 01                  JR   nz,discard1   
05AC   E1                     POP   hl   
05AD                DISCARD1:      
05AD   DD E9                  JP   (ix)   
05AF                SLASH:       
05AF                COMMAND:      
05AF   CD 45 0B               CALL   jumpTable   
05B2   2F                     DB   "/"   
05B3   12 08                  DW   comment   
05B5   61                     DB   "a"   
05B6   1B 08                  DW   command_a   
05B8   62                     DB   "b"   
05B9   55 08                  DW   command_b   
05BB   63                     DB   "c"   
05BC   EB 0A                  DW   chars   
05BE   64                     DB   "d"   
05BF   F3 0A                  DW   decimal   
05C1   66                     DB   "f"   
05C2   3F 06                  DW   false1   
05C4   68                     DB   "h"   
05C5   FB 0A                  DW   hexadecimal   
05C7   69                     DB   "i"   
05C8   A4 09                  DW   command_i   
05CA   6B                     DB   "k"   
05CB   0C 0B                  DW   key   
05CD   6E                     DB   "n"   
05CE   1E 0B                  DW   numbers   
05D0   6F                     DB   "o"   
05D1   15 0B                  DW   output   
05D3   70                     DB   "p"   
05D4   B0 09                  DW   command_p   
05D6   72                     DB   "r"   
05D7   8F 0A                  DW   command_r   
05D9   73                     DB   "s"   
05DA   9E 0A                  DW   size   
05DC   74                     DB   "t"   
05DD   39 06                  DW   true1   
05DF   76                     DB   "v"   
05E0   A6 0A                  DW   command_v   
05E2   78                     DB   "x"   
05E3   B4 03                  DW   xor   
05E5   00                     DB   NUL   
05E6   E8 05                  DW   div   
05E8                DIV:         
05E8   D1                     POP   de   
05E9   E1                     POP   hl   
05EA   C5                     PUSH   bc   ; preserve the IP
05EB   44 4D                  LD   bc,hl   
05ED   CD 0B 06               CALL   divide   
05F0   EB                     EX   de,hl   
05F1   ED 53 F4 23            LD   (vRemain),de   
05F5   C1                     POP   bc   
05F6   C3 93 03               JP   add3   
05F9                DOT:         
05F9   CD 45 0B               CALL   jumpTable   
05FC   61                     DB   "a"   
05FD   61 08                  DW   bufferArray   
05FF   63                     DB   "c"   
0600   83 09                  DW   bufferChar   
0602   73                     DB   "s"   
0603   69 09                  DW   bufferString   
0605   78                     DB   "x"   
0606   88 09                  DW   bufferXChars   
0608   00                     DB   NUL   
0609   AA 08                  DW   bufferNumber   
060B                             ; division subroutine.
060B                             ; bc: divisor, de: dividend, hl: remainder
060B                DIVIDE:      
060B   21 00 00               LD   hl,0   ; zero the remainder
060E   3E 10                  LD   a,16   ; loop counter
0610                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0610   CB 21                  SLA   c   
0612   CB 10                  RL   b   
0614   ED 6A                  ADC   hl,hl   
0616   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0618   38 03                  JR   c,divide2   
061A   0C                     INC   c   
061B   18 01                  JR   divide3   
061D                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
061D   19                     ADD   hl,de   
061E                DIVIDE3:      
061E   3D                     DEC   a   
061F   20 EF                  JR   nz,divide1   
0621   50 59                  LD   de,bc   ; result from bc to de
0623   C9                     RET      
0624                             ; hl = value1, de = value2
0624                             ; hl = result
0624                EQUALS:      
0624   B7                     OR   a   ; reset the carry flag
0625   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0627   28 10                  JR   z,true1   
0629   C3 3F 06               JP   false1   
062C                             ; hl = value1 de = value2
062C                             ; hl = result
062C                LESSTHANEQ:      
062C   B7                     OR   a   
062D   ED 52                  SBC   hl,de   
062F   18 05                  JR   lessthan1   
0631                             ; hl = value1 de = value2
0631                             ; hl = result
0631                LESSTHAN:      
0631   B7                     OR   a   
0632   ED 52                  SBC   hl,de   
0634   28 09                  JR   z,false1   
0636                LESSTHAN1:      
0636   FA 3F 06               JP   m,false1   
0639                TRUE1:       
0639   21 FF FF               LD   hl,TRUE   
063C   E5                     PUSH   hl   
063D   DD E9                  JP   (ix)   
063F                NULL1:       
063F                FALSE1:      
063F   21 00 00               LD   hl,FALSE   
0642   E5                     PUSH   hl   
0643   DD E9                  JP   (ix)   
0645                             ; execute a block of code which ends with }
0645                             ; creates a root scope if BP == stack
0645                             ; else uses outer scope
0645                CARET:       
0645                GO:          
0645   D1                     POP   de   ; de = block*
0646                GO1:         
0646   7B                     LD   a,e   ; if block* == null, exit
0647   B2                     OR   d   
0648   20 02                  JR   nz,go2   
064A   DD E9                  JP   (ix)   
064C                GO2:         
064C   1A                     LD   a,(de)   
064D   FE 7B                  CP   "{"   
064F   28 06                  JR   z,goBlock1   
0651   FE 28                  CP   "("   
0653   C2 8A 06               JP   nz,goLambda   
0656                             ; inc de                      ; de is the address to jump back to
0656   D5                     PUSH   de   ; push de just before stack frame
0657                GOBLOCK:      
0657                GOBLOCK1:      
0657   ED 53 00 24            LD   (vTemp1),de   ; save de
065B   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
065E   FD 54                  LD   d,iyh   
0660   FD 5D                  LD   e,iyl   
0662   B7                     OR   a   ; if stack* == BP then this is the root_scope
0663   ED 52                  SBC   hl,de   
0665   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
0669   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
066A   B4                     OR   h   
066B   3E 00                  LD   a,0   
066D   28 6A                  JR   z,goLambda8   
066F   C5                     PUSH   bc   ; push IP
0670   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0673   FD 46 05               LD   b,(iy+5)   
0676   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0679   FD 66 03               LD   h,(iy+3)   
067C                GOBLOCK2:      
067C   C5                     PUSH   bc   ; arg_list*
067D   E5                     PUSH   hl   ; first_arg*
067E   FD E5                  PUSH   iy   ; push BP
0680   FD 21 00 00            LD   iy,0   ; BP = SP
0684   FD 39                  ADD   iy,sp   
0686   42 4B                  LD   bc,de   ; bc = de = block*-1
0688   DD E9                  JP   (ix)   
068A                GOLAMBDA:      ; execute lambda
068A   EB                     EX   de,hl   ; hl = lambda*
068B   5E                     LD   e,(hl)   ; de = partial_array*
068C   23                     INC   hl   
068D   56                     LD   d,(hl)   
068E   23                     INC   hl   
068F   7B                     LD   a,e   ; if partial_array* == null skip
0690   B2                     OR   d   
0691   28 21                  JR   z,goLambda3   
0693   ED 43 00 24            LD   (vTemp1),bc   
0697   22 02 24               LD   (vTemp2),hl   ; save bc,hl
069A   EB                     EX   de,hl   ; hl = partial_array*
069B   2B                     DEC   hl   ; bc = count
069C   46                     LD   b,(hl)   
069D   2B                     DEC   hl   
069E   4E                     LD   c,(hl)   
069F   23                     INC   hl   ; hl = array data*
06A0   23                     INC   hl   
06A1   18 06                  JR   goLambda2   ; push each item on stack
06A3                GOLAMBDA1:      
06A3   5E                     LD   e,(hl)   ; de = partial item
06A4   23                     INC   hl   
06A5   56                     LD   d,(hl)   
06A6   23                     INC   hl   
06A7   D5                     PUSH   de   ; push on stack
06A8   0B                     DEC   bc   
06A9                GOLAMBDA2:      
06A9   79                     LD   a,c   ; if count != 0 then loop
06AA   B0                     OR   b   
06AB   20 F6                  JR   nz,goLambda1   
06AD   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
06B1   2A 02 24               LD   hl,(vTemp2)   ; restore hl
06B4                GOLAMBDA3:      
06B4   5E                     LD   e,(hl)   ; de = block*
06B5   23                     INC   hl   
06B6   56                     LD   d,(hl)   
06B7   23                     INC   hl   
06B8   ED 53 00 24            LD   (vTemp1),de   ; save block*
06BC   5E                     LD   e,(hl)   ; de = arg_list*
06BD   23                     INC   hl   
06BE   56                     LD   d,(hl)   
06BF   23                     INC   hl   
06C0   EB                     EX   de,hl   ; hl = arg_list*
06C1   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
06C5   7D                     LD   a,l   ; if arg_list* == null a = 0
06C6   B4                     OR   h   
06C7   20 03                  JR   nz,goLambda4   
06C9   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06CA   18 0D                  JR   goLambda8   
06CC                GOLAMBDA4:      ; allocate locals
06CC   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
06CD   18 03                  JR   goLambda6   
06CF                GOLAMBDA5:      ; loop
06CF   3B                     DEC   sp   
06D0   3B                     DEC   sp   
06D1   3D                     DEC   a   
06D2                GOLAMBDA6:      
06D2   B7                     OR   a   
06D3   20 FA                  JR   nz,goLambda5   ; end loop
06D5                GOLAMBDA7:      
06D5   23                     INC   hl   ; a = num_args* x 2
06D6   7E                     LD   a,(hl)   
06D7   2B                     DEC   hl   
06D8   87                     ADD   a,a   ; a *= 2
06D9                GOLAMBDA8:      
06D9   C5                     PUSH   bc   ; push IP
06DA   44 4D                  LD   bc,hl   
06DC   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06DF   85                     ADD   a,l   
06E0   6F                     LD   l,a   
06E1   39                     ADD   hl,sp   
06E2   18 98                  JR   goBlock2   
06E4                DOLLAR:      
06E4                HEXNUM:      
06E4   21 00 00               LD   hl,0   ; Clear hl to accept the number
06E7                HEXNUM1:      
06E7   03                     INC   bc   
06E8   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E9   CB 77                  BIT   6,a   ; is it uppercase alpha?
06EB   28 02                  JR   z,hexnum2   ; no a decimal
06ED   D6 07                  SUB   7   ; sub 7  to make $a - $F
06EF                HEXNUM2:      
06EF   D6 30                  SUB   $30   ; form decimal digit
06F1   DA 6F 07               JP   c,num2   
06F4   FE 10                  CP   $0F+1   
06F6   D2 6F 07               JP   nc,num2   
06F9   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06FA   29                     ADD   hl,hl   ; 4X
06FB   29                     ADD   hl,hl   ; 8X
06FC   29                     ADD   hl,hl   ; 16X
06FD   85                     ADD   a,l   ; add into bottom of hl
06FE   6F                     LD   l,a   
06FF   18 E6                  JR   hexnum1   
0701                UPCASE:      
0701   0A                     LD   a,(bc)   ; a = identifier char
0702   D6 41                  SUB   "A"   ; "A" = 0
0704   18 05                  JR   ident1   
0706                LOWCASE:      
0706   0A                     LD   a,(bc)   
0707   D6 61                  SUB   "a"   
0709   C6 1A                  ADD   a,26   
070B                IDENT1:      
070B   87                     ADD   a,a   ; l = a * 2
070C   6F                     LD   l,a   
070D   26 23                  LD   h,msb(vars)   
070F   22 F2 23               LD   (vPointer),hl   ; store address in setter
0712   5E                     LD   e,(hl)   
0713   23                     INC   hl   
0714   56                     LD   d,(hl)   
0715   D5                     PUSH   de   
0716   DD E9                  JP   (ix)   
0718                             ; if
0718                             ; condition then -- value
0718                QUESTION:      
0718                IF:          
0718   03                     INC   bc   
0719   0A                     LD   a,(bc)   
071A   FE 3F                  CP   "?"   
071C   28 06                  JR   z,ifte   
071E   0B                     DEC   bc   
071F   11 00 00               LD   de,NUL   ; NUL pointer for else
0722   18 01                  JR   ifte1   
0724                             ; ifte
0724                             ; condition then else -- value
0724                IFTE:        
0724   D1                     POP   de   ; de = else
0725                IFTE1:       
0725   E1                     POP   hl   ; hl = then
0726   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0727   7C                     LD   a,h   
0728   B5                     OR   l   
0729   E1                     POP   hl   ; hl = then
072A   CA 46 06               JP   z,go1   ; if z de = else
072D   EB                     EX   de,hl   ; condition = false, de = then
072E   C3 46 06               JP   go1   
0731                STAR:        
0731                MUL:         
0731   D1                     POP   de   ; get first value
0732   E1                     POP   hl   
0733                MUL2:        
0733   C5                     PUSH   bc   ; Preserve the IP
0734   44 4D                  LD   bc,hl   ; bc = 2nd value
0736   21 00 00               LD   hl,0   
0739   3E 10                  LD   a,16   
073B                MUL3:        
073B   29                     ADD   hl,hl   
073C   CB 13                  RL   e   
073E   CB 12                  RL   d   
0740   30 04                  JR   nc,$+6   
0742   09                     ADD   hl,bc   
0743   30 01                  JR   nc,$+3   
0745   13                     INC   de   
0746   3D                     DEC   a   
0747   20 F2                  JR   nz,mul3   
0749   C1                     POP   bc   ; Restore the IP
074A   C3 93 03               JP   add3   
074D                NUM:         
074D   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0750   0A                     LD   a,(bc)   ; Get numeral or -
0751   FE 2D                  CP   "-"   
0753   20 01                  JR   nz,num0   
0755   03                     INC   bc   ; move to next char, no flags affected
0756                NUM0:        
0756   08                     EX   af,af'   ; save zero flag = 0 for later
0757                NUM1:        
0757   0A                     LD   a,(bc)   ; read digit
0758   D6 30                  SUB   "0"   ; less than 0?
075A   38 13                  JR   c,num2   ; not a digit, exit loop
075C   FE 0A                  CP   10   ; greater that 9?
075E   30 0F                  JR   nc,num2   ; not a digit, exit loop
0760   03                     INC   bc   ; inc IP
0761   54 5D                  LD   de,hl   ; multiply hl * 10
0763   29                     ADD   hl,hl   
0764   29                     ADD   hl,hl   
0765   19                     ADD   hl,de   
0766   29                     ADD   hl,hl   
0767   85                     ADD   a,l   ; add digit in a to hl
0768   6F                     LD   l,a   
0769   3E 00                  LD   a,0   
076B   8C                     ADC   a,h   
076C   67                     LD   h,a   
076D   18 E8                  JR   num1   
076F                NUM2:        
076F   0B                     DEC   bc   
0770   08                     EX   af,af'   ; restore zero flag
0771   20 07                  JR   nz,num3   
0773   EB                     EX   de,hl   ; negate the value of hl
0774   21 00 00               LD   hl,0   
0777   B7                     OR   a   ; jump to sub2
0778   ED 52                  SBC   hl,de   
077A                NUM3:        
077A   E5                     PUSH   hl   ; Put the number on the stack
077B   DD E9                  JP   (ix)   ; and process the next character
077D                RPAREN:      
077D   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0780   FD 46 09               LD   b,(iy+9)   
0783   DD E9                  JP   (ix)   
0785                             ; arg_list* block* -- ptr
0785                SEMICOLON:      
0785   D1                     POP   de   ; de = block* hl = heap*
0786   2A F0 23               LD   hl,(vHeapPtr)   
0789   AF                     XOR   a   
078A   77                     LD   (hl),a   ; compile null partial_array*
078B   23                     INC   hl   
078C   77                     LD   (hl),a   
078D   23                     INC   hl   
078E   73                     LD   (hl),e   ; compile block*
078F   23                     INC   hl   
0790   72                     LD   (hl),d   
0791   23                     INC   hl   
0792   D1                     POP   de   ; de = block*
0793   73                     LD   (hl),e   ; compile arg_list*
0794   23                     INC   hl   
0795   72                     LD   (hl),d   
0796   23                     INC   hl   
0797   ED 5B F0 23            LD   de,(vHeapPtr)   ; return lambda*
079B   D5                     PUSH   de   
079C   22 F0 23               LD   (vHeapPtr),hl   ; heap* += 4
079F   DD E9                  JP   (ix)   
07A1                             ; shiftLeft
07A1                             ; value count -- value2          shift left count places
07A1                SHIFTLEFT:      
07A1   50 59                  LD   de,bc   ; save IP
07A3   C1                     POP   bc   ; bc = count
07A4   41                     LD   b,c   ; b = loop counter
07A5   E1                     POP   hl   
07A6   04                     INC   b   ; test for counter=0 case
07A7   18 01                  JR   shiftLeft2   
07A9                SHIFTLEFT1:      
07A9   29                     ADD   hl,hl   ; left shift hl
07AA                SHIFTLEFT2:      
07AA   10 FD                  DJNZ   shiftLeft1   
07AC   E5                     PUSH   hl   
07AD   42 4B                  LD   bc,de   ; restore IP
07AF   DD E9                  JP   (ix)   
07B1                             ; shiftRight
07B1                             ; value count -- value2          shift left count places
07B1                SHIFTRIGHT:      
07B1   50 59                  LD   de,bc   ; save IP
07B3   C1                     POP   bc   ; bc = count
07B4   41                     LD   b,c   ; b = loop counter
07B5   E1                     POP   hl   
07B6   04                     INC   b   ; test for counter=0 case
07B7   18 04                  JR   shiftRight2   
07B9                SHIFTRIGHT1:      
07B9   CB 3C                  SRL   h   ; right shift hl
07BB   CB 1D                  RR   l   
07BD                SHIFTRIGHT2:      
07BD   10 FA                  DJNZ   shiftRight1   
07BF   E5                     PUSH   hl   
07C0   42 4B                  LD   bc,de   ; restore IP
07C2   DD E9                  JP   (ix)   
07C4                             ; string
07C4                             ; -- ptr                        ; points to start of string chars,
07C4                             ; length is stored at start - 2 bytes
07C4                DBLQUOTE:      
07C4                STRING:      
07C4   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
07C7   23                     INC   hl   ; skip length field to start
07C8   23                     INC   hl   
07C9   E5                     PUSH   hl   ; save start of string
07CA   03                     INC   bc   ; point to next char
07CB   18 03                  JR   string2   
07CD                STRING1:      
07CD   77                     LD   (hl),a   
07CE   23                     INC   hl   ; increase count
07CF   03                     INC   bc   ; point to next char
07D0                STRING2:      
07D0   0A                     LD   a,(bc)   
07D1   FE 22                  CP   DQUOTE   ; " is the string terminator
07D3   28 04                  JR   z,string3   
07D5   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D7   20 F4                  JR   nz,string1   
07D9                STRING3:      
07D9   AF                     XOR   a   ; write NUL to terminate string
07DA   77                     LD   (hl),a   ; hl = end of string
07DB   23                     INC   hl   
07DC   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DF   2B                     DEC   hl   ; hl = end of string without terminator
07E0   D1                     POP   de   ; de = start of string
07E1   D5                     PUSH   de   ; return start of string
07E2   B7                     OR   a   ; hl = length bytes, de = start of string
07E3   ED 52                  SBC   hl,de   
07E5   EB                     EX   de,hl   
07E6   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E7   72                     LD   (hl),d   
07E8   2B                     DEC   hl   
07E9   73                     LD   (hl),e   
07EA   DD E9                  JP   (ix)   
07EC                MINUS:       ; negative sign or subtract
07EC   03                     INC   bc   ; check if sign of a number
07ED   0A                     LD   a,(bc)   
07EE   0B                     DEC   bc   
07EF   FE 30                  CP   "0"   
07F1   38 05                  JR   c,sub   
07F3   FE 3A                  CP   "9"+1   
07F5   DA 3B 03               JP   c,num_   
07F8                SUB:         ; Subtract the value 2nd on stack from top of stack
07F8   03                     INC   bc   
07F9   FE 2D                  CP   "-"   
07FB   20 05                  JR   nz,sub1   
07FD   E1                     POP   hl   
07FE   2B                     DEC   hl   
07FF   C3 7F 04               JP   assign0   
0802                SUB1:        
0802   0B                     DEC   bc   
0803   D1                     POP   de   
0804   E1                     POP   hl   
0805   B7                     OR   a   
0806   ED 52                  SBC   hl,de   
0808   C3 93 03               JP   add3   
080B                ERROR1:      
080B   21 01 00               LD   hl,1   ; error 1: unknown command
080E   E5                     PUSH   hl   
080F   C3 C9 0C               JP   error   
0812                COMMENT:      
0812   03                     INC   bc   ; point to next char
0813   0A                     LD   a,(bc)   
0814   FE 20                  CP   " "   ; terminate on any char less than SP
0816   30 FA                  JR   nc,comment   
0818   0B                     DEC   bc   
0819   DD E9                  JP   (ix)   
081B                COMMAND_A:      
081B   CD 45 0B               CALL   jumpTable   
081E   62                     DB   "b"   
081F   27 08                  DW   absolute   
0821   64                     DB   "d"   
0822   34 08                  DW   addrOf   
0824   00                     DB   NUL   
0825   0B 08                  DW   error1   
0827                             ; /ab absolute
0827                             ; num -- num
0827                ABSOLUTE:      
0827   E1                     POP   hl   
0828   CB 7C                  BIT   7,h   
082A   C8                     RET   z   
082B   AF                     XOR   a   
082C   95                     SUB   l   
082D   6F                     LD   l,a   
082E   9F                     SBC   a,a   
082F   94                     SUB   h   
0830   67                     LD   h,a   
0831   E5                     PUSH   hl   
0832   DD E9                  JP   (ix)   
0834                             ; /ad addrOf
0834                             ; char -- addr
0834                ADDROF:      
0834   E1                     POP   hl   ; a = char
0835   7D                     LD   a,l   
0836   FE 7B                  CP   "z"+1   ; if a > z then exit
0838   30 19                  JR   nc,addrOf2   
083A   D6 41                  SUB   "A"   ; a - 65
083C   38 15                  JR   c,addrOf2   ; if < A then exit
083E   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0840   38 06                  JR   c,addrOf1   
0842   D6 06                  SUB   "a"-("Z"+1)   
0844   FE 1A                  CP   "Z"-"A"+1   
0846   38 0B                  JR   c,addrOf2   ; if < a then exit
0848                ADDROF1:      
0848   87                     ADD   a,a   ; double a
0849   21 00 23               LD   hl,VARS   ; hl = VARS + a
084C   85                     ADD   a,l   
084D   6F                     LD   l,a   
084E   3E 00                  LD   a,0   
0850   8C                     ADC   a,h   
0851   67                     LD   h,a   
0852   E5                     PUSH   hl   
0853                ADDROF2:      
0853   DD E9                  JP   (ix)   
0855                COMMAND_B:      
0855   CD 45 0B               CALL   jumpTable   
0858   72                     DB   "r"   
0859   4F 09                  DW   break   
085B   79                     DB   "y"   
085C   0C 0C                  DW   coldStart   
085E   00                     DB   NUL   
085F   0B 08                  DW   error1   
0861                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
0861                BUFFERARRAY:      
0861   CD 45 06               CALL   go   
0864   00 00                  DW   NUL   
0866   6F 08                  DW   bufferArrayM_1725S1258   
0868   6A 08                  DW   $+2   
086A   02                     DB   2   
086B   03 61 62 63            .PSTR   "abc"   
086F                BUFFERARRAYM_1725S1258:      
086F   7B 60 5B 20 60 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 60 5D 60 2E 73 7D 00 00 .CSTR   "{`[ `.s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ `]`.s}",0   
08AA                             ; .cstr "{$a/s$c= 0$b=( $a$b%/bd $b++ $b $c</br )^}" ; block
08AA                             ; /bd buffer decimal
08AA                             ; value --
08AA                BUFFERNUMBER:      
08AA   3A E8 23               LD   a,(vNumBase)   
08AD   FE 10                  CP   16   
08AF   28 66                  JR   z,bufferHex   ; else falls through
08B1                             ; /bd buffer decimal
08B1                             ; value --
08B1                BUFFERDEC:      
08B1   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
08B5   D9                     EXX      
08B6   E1                     POP   hl   ; hl = value
08B7   CD CB 08               CALL   bufferDec0   
08BA   D9                     EXX      ; de = buffer*' bc = IP
08BB   3E 20                  LD   a," "   ; append space to buffer
08BD   12                     LD   (de),a   
08BE   1C                     INC   e   ; buffer*++, wraparound
08BF   CC 2E 0B               CALL   z,flushBuffer   
08C2   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
08C5   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
08C9   DD E9                  JP   (ix)   
08CB                             ; hl = value
08CB                             ; de' = buffer*
08CB                             ; a, bc, de, hl destroyed
08CB                BUFFERDEC0:      
08CB   CB 7C                  BIT   7,h   
08CD   28 0C                  JR   z,bufferDec1   
08CF   D9                     EXX      
08D0   3E 2D                  LD   a,"-"   
08D2   12                     LD   (de),a   
08D3   13                     INC   de   
08D4   D9                     EXX      
08D5   AF                     XOR   a   
08D6   95                     SUB   l   
08D7   6F                     LD   l,a   
08D8   9F                     SBC   a,a   
08D9   94                     SUB   h   
08DA   67                     LD   h,a   
08DB                BUFFERDEC1:      
08DB   0E 00                  LD   c,0   ; leading zeros flag = false
08DD   11 F0 D8               LD   de,-10000   
08E0   CD FB 08               CALL   bufferDec2   
08E3   11 18 FC               LD   de,-1000   
08E6   CD FB 08               CALL   bufferDec2   
08E9   11 9C FF               LD   de,-100   
08EC   CD FB 08               CALL   bufferDec2   
08EF   1E F6                  LD   e,-10   
08F1   CD FB 08               CALL   bufferDec2   
08F4   0C                     INC   c   ; flag = true for at least digit
08F5   1E FF                  LD   e,-1   
08F7   CD FB 08               CALL   bufferDec2   
08FA   C9                     RET      
08FB                BUFFERDEC2:      
08FB   06 2F                  LD   b,"0"-1   
08FD                BUFFERDEC3:      
08FD   04                     INC   b   
08FE   19                     ADD   hl,de   
08FF   38 FC                  JR   c,bufferDec3   
0901   ED 52                  SBC   hl,de   
0903   3E 30                  LD   a,"0"   
0905   B8                     CP   b   
0906   20 05                  JR   nz,bufferDec4   
0908   AF                     XOR   a   
0909   B1                     OR   c   
090A   C8                     RET   z   
090B   18 01                  JR   bufferDec5   
090D                BUFFERDEC4:      
090D   0C                     INC   c   
090E                BUFFERDEC5:      
090E   78                     LD   a,b   
090F   D9                     EXX      
0910   12                     LD   (de),a   
0911   1C                     INC   e   
0912   CC 2E 0B               CALL   z,flushBuffer   
0915   D9                     EXX      
0916   C9                     RET      
0917                             ; /bh buffer hex
0917                             ; value --
0917                BUFFERHEX:      
0917   E1                     POP   hl   ; hl = value
0918   ED 5B EC 23            LD   de,(vBufPtr)   
091C   3E 24                  LD   a,"$"   ; # prefix
091E   12                     LD   (de),a   
091F   1C                     INC   e   ; buffer*++, wraparound
0920   CC 2E 0B               CALL   z,flushBuffer   
0923   7C                     LD   a,h   
0924   CD 38 09               CALL   bufferHex1   
0927   7D                     LD   a,l   
0928   CD 38 09               CALL   bufferHex1   
092B   3E 20                  LD   a," "   ; append space to buffer
092D   12                     LD   (de),a   
092E   1C                     INC   e   ; buffer*++, wraparound
092F   CC 2E 0B               CALL   z,flushBuffer   
0932   ED 53 EC 23            LD   (vBufPtr),de   
0936   DD E9                  JP   (ix)   
0938                BUFFERHEX1:      
0938   F5                     PUSH   af   
0939   1F                     RRA      
093A   1F                     RRA      
093B   1F                     RRA      
093C   1F                     RRA      
093D   CD 41 09               CALL   bufferHex2   
0940   F1                     POP   af   
0941                BUFFERHEX2:      
0941   E6 0F                  AND   0x0F   
0943   C6 90                  ADD   a,0x90   
0945   27                     DAA      
0946   CE 40                  ADC   a,0x40   
0948   27                     DAA      
0949   12                     LD   (de),a   
094A   1C                     INC   e   ; buffer*++, wraparound
094B   CC 2E 0B               CALL   z,flushBuffer   
094E   C9                     RET      
094F                             ; /br break from loop
094F                             ; --
094F                BREAK:       
094F   E1                     POP   hl   
0950   7D                     LD   a,l   
0951   B4                     OR   h   
0952   28 02                  JR   z,break1   
0954   DD E9                  JP   (ix)   
0956                BREAK1:      
0956   FD 5D                  LD   e,iyl   ; get block* just under stack frame
0958   FD 54                  LD   d,iyh   
095A   21 08 00               LD   hl,8   
095D   19                     ADD   hl,de   
095E   23                     INC   hl   
095F   23                     INC   hl   
0960   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
0963   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
0966   C3 2D 05               JP   blockEnd   
0969                             ; /bs buffered string
0969                             ; string* --
0969                BUFFERSTRING:      
0969   E1                     POP   hl   ; hl = string*
096A   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
096E   18 06                  JR   bufferString1   
0970                BUFFERSTRING0:      
0970   12                     LD   (de),a   ; a -> buffer*
0971   1C                     INC   e   ; buffer*++, wraparound
0972   CC 2E 0B               CALL   z,flushBuffer   
0975   23                     INC   hl   
0976                BUFFERSTRING1:      
0976   7E                     LD   a,(hl)   ; a <- string*
0977   B7                     OR   a   ; if NUL exit loop
0978   20 F6                  JR   nz,bufferString0   
097A   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
097D   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0981   DD E9                  JP   (ix)   
0983                             ; /bc buffer char
0983                             ; char --
0983                BUFFERCHAR:      
0983   21 01 00               LD   hl,1   
0986   18 01                  JR   bufferXChars0   
0988                             ; /bx buffered x chars
0988                             ; char length --
0988                BUFFERXCHARS:      
0988   E1                     POP   hl   ; hl = length
0989                BUFFERXCHARS0:      
0989   D1                     POP   de   ; a' = char
098A   7B                     LD   a,e   
098B   08                     EX   af,af'   
098C   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
0990   18 08                  JR   bufferXChars2   
0992                BUFFERXCHARS1:      
0992   08                     EX   af,af'   
0993   12                     LD   (de),a   
0994   08                     EX   af,af'   
0995   1C                     INC   e   ; buffer*++, wraparound
0996   CC 2E 0B               CALL   z,flushBuffer   
0999   2B                     DEC   hl   
099A                BUFFERXCHARS2:      
099A   7D                     LD   a,l   
099B   B4                     OR   h   
099C   20 F4                  JR   nz,bufferXChars1   
099E   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
09A2   DD E9                  JP   (ix)   
09A4                COMMAND_I:      
09A4   CD 45 0B               CALL   jumpTable   
09A7   6E                     DB   "n"   
09A8   01 0B                  DW   input   
09AA   76                     DB   "v"   
09AB   BF 03                  DW   invert   
09AD   00                     DB   NUL   
09AE   0B 08                  DW   error1   
09B0                COMMAND_P:      
09B0   CD 45 0B               CALL   jumpTable   
09B3   61                     DB   "a"   
09B4   C2 09                  DW   partial   
09B6   62                     DB   "b"   
09B7   55 0A                  DW   printBuffer   
09B9   63                     DB   "c"   
09BA   7B 0A                  DW   printChars   
09BC   6B                     DB   "k"   
09BD   8D 0A                  DW   printStack   
09BF   00                     DB   NUL   
09C0   0B 08                  DW   error1   
09C2                             ; partial
09C2                             ; array* lambda* -- lambda1*
09C2                PARTIAL:      
09C2   E1                     POP   hl   ; h1 = lambda*
09C3   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
09C7   ED 43 00 24            LD   (vTemp1),bc   ; save IP
09CB   01 06 00               LD   bc,6   ; bc = count
09CE   ED B0                  LDIR      ; clone lambda
09D0   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
09D4   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
09D7   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += 6
09DB   D1                     POP   de   ; de = array*
09DC   E5                     PUSH   hl   ; return partial_array*
09DD   73                     LD   (hl),e   ; compile array*
09DE   23                     INC   hl   
09DF   72                     LD   (hl),d   
09E0   DD E9                  JP   (ix)   
09E2                             ; xpartial
09E2                             ; arg_list* block* -- lambda*
09E2                XPARTIAL:      
09E2   ED 43 00 24            LD   (vTemp1),bc   ; save IP
09E6   E1                     POP   hl   ; hl = block*
09E7   22 02 24               LD   (vTemp2),hl   ; save block*
09EA   E1                     POP   hl   ; hl = inner arg_list*
09EB   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
09EF   D5                     PUSH   de   ; push new arglist*
09F0   7E                     LD   a,(hl)   ; compile num locals
09F1   12                     LD   (de),a   
09F2   23                     INC   hl   
09F3   13                     INC   de   
09F4   7E                     LD   a,(hl)   ; compile inner length
09F5   12                     LD   (de),a   
09F6   23                     INC   hl   
09F7   13                     INC   de   
09F8   B7                     OR   a   ; compile args if inner length > 0
09F9   28 05                  JR   z,xpartial1   
09FB   4F                     LD   c,a   
09FC   06 00                  LD   b,0   
09FE   ED B0                  LDIR      
0A00                XPARTIAL1:      
0A00   EB                     EX   de,hl   ; hl = outer arg_list
0A01   FD 5E 04               LD   e,(iy+4)   
0A04   FD 56 05               LD   d,(iy+5)   
0A07   EB                     EX   de,hl   
0A08   7B                     LD   a,e   ; skip if null
0A09   B2                     OR   d   
0A0A   28 0B                  JR   z,xpartial2   
0A0C   23                     INC   hl   ; a = outer length
0A0D   7E                     LD   a,(hl)   
0A0E   23                     INC   hl   
0A0F   B7                     OR   a   
0A10   28 05                  JR   z,xpartial2   
0A12   4F                     LD   c,a   
0A13   06 00                  LD   b,0   
0A15   ED B0                  LDIR      ; append outer args
0A17                XPARTIAL2:      
0A17   D5                     PUSH   de   ; push partial_array*
0A18   28 1E                  JR   z,xpartial4   ; z flag hasn't changed yet
0A1A   2A F0 23               LD   hl,(vHeapPtr)   ; hl = start of cloned arg_list
0A1D   47                     LD   b,a   ; b = a = outer length and b > 0
0A1E   7E                     LD   a,(hl)   ; a = new num locals
0A1F   80                     ADD   a,b   ; add all of outer length to new locals
0A20   77                     LD   (hl),a   
0A21   23                     INC   hl   
0A22   7E                     LD   a,(hl)   
0A23   80                     ADD   a,b   ; add outer length to new length
0A24   77                     LD   (hl),a   
0A25   EB                     EX   de,hl   ; hl = first_arg
0A26   FD 5E 02               LD   e,(iy+2)   
0A29   FD 56 03               LD   d,(iy+3)   
0A2C   EB                     EX   de,hl   
0A2D                XPARTIAL3:      
0A2D   2B                     DEC   hl   ; c = MSB arg or local from stack
0A2E   4E                     LD   c,(hl)   
0A2F   2B                     DEC   hl   
0A30   7E                     LD   a,(hl)   ; a = LSB arg or local from stack
0A31   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0A32   13                     INC   de   
0A33   79                     LD   a,c   
0A34   12                     LD   (de),a   
0A35   13                     INC   de   
0A36   10 F5                  DJNZ   xpartial3   ; b = outer length
0A38                XPARTIAL4:      
0A38   E1                     POP   hl   ; hl = partial_array*
0A39   C1                     POP   bc   ; bc = new arg_list*
0A3A   D5                     PUSH   de   ; return new lambda*
0A3B   EB                     EX   de,hl   ; hl = new lambda*, de = partial_array*
0A3C   73                     LD   (hl),e   ; compile partial_array* to lambda
0A3D   23                     INC   hl   
0A3E   72                     LD   (hl),d   
0A3F   23                     INC   hl   
0A40   ED 5B 02 24            LD   de,(vTemp2)   ; de = block*
0A44   73                     LD   (hl),e   ; compile block* to lambda
0A45   23                     INC   hl   
0A46   72                     LD   (hl),d   
0A47   23                     INC   hl   
0A48   71                     LD   (hl),c   ; compile new arg_list* to lambda
0A49   23                     INC   hl   
0A4A   70                     LD   (hl),b   
0A4B   23                     INC   hl   
0A4C   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
0A4F   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0A53   DD E9                  JP   (ix)   
0A55                             ; ; arg_list* block* -- ptr
0A55                             ; semicolon:
0A55                             ;     pop de                      ; de = block* hl = heap*
0A55                             ;     ld hl,(vHeapPtr)
0A55                             ;     xor a
0A55                             ;     ld (hl),a                   ; compile null partial_array*
0A55                             ;     inc hl
0A55                             ;     ld (hl),a
0A55                             ;     inc hl
0A55                             ;     ld (hl),e                   ; compile block*
0A55                             ;     inc hl
0A55                             ;     ld (hl),d
0A55                             ;     inc hl
0A55                             ;     pop de                      ; de = block*
0A55                             ;     ld (hl),e                   ; compile arg_list*
0A55                             ;     inc hl
0A55                             ;     ld (hl),d
0A55                             ;     inc hl
0A55                             ;     ld de,(vHeapPtr)            ; return lambda*
0A55                             ;     push de
0A55                             ;     ld (vHeapPtr),hl            ; heap* += 4
0A55                             ;     jp (ix)
0A55                             ; arg:
0A55                             ;     ld e,(iy+4)                 ; hl = arg_list*
0A55                             ;     ld d,(iy+5)
0A55                             ;     ex de,hl
0A55                             ;     ld a,l                      ; arg_list* == null, skip
0A55                             ;     or h
0A55                             ;     jr z,arg0a
0A55                             ;     inc hl                      ; a = num_args, hl = arg_list*
0A55                             ;     ld a,(hl)
0A55                             ;     inc hl
0A55                             ;     or a
0A55                             ;     jr z,arg0a                  ; num_args == 0, skip
0A55                             ;     ld e,a                      ; e = a = num_args
0A55                             ;     inc bc                      ; a = next char = dollar_name
0A55                             ;     ld a,(bc)
0A55                             ;     push bc                     ; save IP
0A55                             ;     ld b,e                      ; b = e = num_args
0A55                             ;     ld e,(iy+2)                 ; de = first_arg*, hl = argslist*
0A55                             ;     ld d,(iy+3)
0A55                             ; arg0:
0A55                             ;     dec de                      ; a = dollar_name, de = next arg*
0A55                             ;     dec de
0A55                             ;     cp (hl)
0A55                             ;     jr z,arg1
0A55                             ;     inc hl                      ; hl = next arg_list*
0A55                             ;     djnz arg0
0A55                             ;     pop bc                      ; no match, restore IP
0A55                             ; arg0a:
0A55                             ;     ld de,0                     ; return 0
0A55                             ;     jr arg1a
0A55                             ; arg1:
0A55                             ;     pop bc                      ; restore IP
0A55                             ;     ex de,hl                    ; hl = arg*
0A55                             ;     ld (vPointer),hl            ; store arg* in setter
0A55                             ;     ld e,(hl)
0A55                             ;     inc hl
0A55                             ;     ld d,(hl)                   ; de = arg
0A55                             ; arg1a:
0A55                             ;     push de                     ; push arg
0A55                             ;     jp (ix)
0A55                             ; /pb printBuffer
0A55                             ; --
0A55                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0A55                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0A55                PRINTBUFFER:      
0A55   CD 45 06               CALL   go   
0A58   00 00                  DW   NUL   
0A5A   61 0A                  DW   printBufferM_2093S1647   
0A5C   5E 0A                  DW   $+2   
0A5E   00                     DB   0   
0A5F   01 61                  .PSTR   "a"   
0A61                PRINTBUFFERM_2093S1647:      
0A61   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0A7B                             ; printChars
0A7B                             ; char* len --
0A7B                PRINTCHARS:      
0A7B   E1                     POP   hl   ; hl = count
0A7C   D1                     POP   de   ; de = char*
0A7D   CD 88 0A               CALL   printChars2   
0A80   DD E9                  JP   (ix)   
0A82                PRINTCHARS1:      
0A82   1A                     LD   a,(de)   ; print char at char*
0A83   CD 85 00               CALL   putchar   
0A86   13                     INC   de   ; char*++
0A87   2B                     DEC   hl   ; count--
0A88                PRINTCHARS2:      
0A88   7D                     LD   a,l   ; count == 0?
0A89   B4                     OR   h   
0A8A   C8                     RET   z   
0A8B   18 F5                  JR   printChars1   ; if not loop
0A8D                             ; /pk print stack
0A8D                             ; --
0A8D                PRINTSTACK:      
0A8D                             ;     ld (vTemp1),bc
0A8D                             ;     call printStr
0A8D                             ;     .cstr "=> "
0A8D                             ;     ld hl,STACK
0A8D                             ;     sbc hl,sp
0A8D                             ;     srl h
0A8D                             ;     rr l
0A8D                             ;     ld bc,hl
0A8D                             ;     ld hl,STACK
0A8D                             ;     jr printStack2
0A8D                             ; printStack1:
0A8D                             ;     dec bc
0A8D                             ;     dec hl
0A8D                             ;     ld d,(hl)
0A8D                             ;     dec hl
0A8D                             ;     ld e,(hl)
0A8D                             ;     ex de,hl
0A8D                             ;     call prthex
0A8D                             ;     ex de,hl
0A8D                             ;     ld a," "
0A8D                             ;     call putchar
0A8D                             ; printStack2:
0A8D                             ;     ld a,c
0A8D                             ;     or b
0A8D                             ;     jr nz,printStack1
0A8D                             ;     call prompt
0A8D                             ;     ld bc,(vTemp1)
0A8D   DD E9                  JP   (ix)   
0A8F                COMMAND_R:      
0A8F   CD 45 0B               CALL   jumpTable   
0A92   65                     DB   "e"   
0A93   98 0A                  DW   remain   
0A95   00                     DB   NUL   
0A96   0B 08                  DW   error1   
0A98                REMAIN:      
0A98   2A F4 23               LD   hl,(vRemain)   
0A9B   E5                     PUSH   hl   
0A9C   DD E9                  JP   (ix)   
0A9E                SIZE:        
0A9E   E1                     POP   hl   
0A9F   2B                     DEC   hl   ; msb size
0AA0   56                     LD   d,(hl)   
0AA1   2B                     DEC   hl   ; lsb size
0AA2   5E                     LD   e,(hl)   
0AA3   D5                     PUSH   de   
0AA4   DD E9                  JP   (ix)   
0AA6                COMMAND_V:      
0AA6   CD 45 0B               CALL   jumpTable   
0AA9   62                     DB   "b"   
0AAA   CA 0A                  DW   varBufPtr   
0AAC   68                     DB   "h"   
0AAD   D3 0A                  DW   varHeapPtr   
0AAF   74                     DB   "t"   
0AB0   DC 0A                  DW   varTIBPtr   
0AB2   42                     DB   "B"   
0AB3   BB 0A                  DW   constBufStart   
0AB5   54                     DB   "T"   
0AB6   C5 0A                  DW   constTIBStart   
0AB8   00                     DB   NUL   
0AB9   0B 08                  DW   error1   
0ABB                CONSTBUFSTART:      
0ABB   11 00 22               LD   de,BUF   
0ABE   18 28                  JR   constant   
0AC0                CONSTHEAPSTART:      
0AC0   11 1E 24               LD   de,HEAP   
0AC3   18 23                  JR   constant   
0AC5                CONSTTIBSTART:      
0AC5   11 00 21               LD   de,TIB   
0AC8   18 1E                  JR   constant   
0ACA                VARBUFPTR:      
0ACA   ED 5B EC 23            LD   de,(vBufPtr)   
0ACE   21 EC 23               LD   hl,vBufPtr   
0AD1   18 12                  JR   variable   
0AD3                VARHEAPPTR:      
0AD3   ED 5B F0 23            LD   de,(vHeapPtr)   
0AD7   21 F0 23               LD   hl,vHeapPtr   
0ADA   18 09                  JR   variable   
0ADC                VARTIBPTR:      
0ADC   ED 5B EA 23            LD   de,(vTIBPtr)   
0AE0   21 EA 23               LD   hl,vTIBPtr   
0AE3   18 00                  JR   variable   
0AE5                VARIABLE:      
0AE5   22 F2 23               LD   (vPointer),hl   
0AE8                CONSTANT:      
0AE8   D5                     PUSH   de   
0AE9   DD E9                  JP   (ix)   
0AEB                CHARS:       
0AEB   21 01 00               LD   hl,1   
0AEE                CHARS1:      
0AEE   22 E6 23               LD   (vDataWidth),hl   
0AF1   DD E9                  JP   (ix)   
0AF3                DECIMAL:      
0AF3   21 0A 00               LD   hl,10   
0AF6                DECIMAL1:      
0AF6   22 E8 23               LD   (vNumBase),hl   
0AF9   DD E9                  JP   (ix)   
0AFB                HEXADECIMAL:      
0AFB   21 10 00               LD   hl,16   
0AFE   C3 F6 0A               JP   decimal1   
0B01                             ; Z80 port input
0B01                             ; port -- value
0B01                INPUT:       
0B01   E1                     POP   hl   
0B02   59                     LD   e,c   ; save IP
0B03   4D                     LD   c,l   
0B04   ED 68                  IN   l,(c)   
0B06   26 00                  LD   h,0   
0B08   4B                     LD   c,e   ; restore IP
0B09   E5                     PUSH   hl   
0B0A   DD E9                  JP   (ix)   
0B0C                KEY:         
0B0C   CD 81 00               CALL   getchar   
0B0F   26 00                  LD   h,0   
0B11   6F                     LD   l,a   
0B12   E5                     PUSH   hl   
0B13   DD E9                  JP   (ix)   
0B15                             ; Z80 port output
0B15                             ; value port --
0B15                OUTPUT:      
0B15   E1                     POP   hl   
0B16   59                     LD   e,c   ; save IP
0B17   4D                     LD   c,l   
0B18   E1                     POP   hl   
0B19   ED 69                  OUT   (c),l   
0B1B   4B                     LD   c,e   ; restore IP
0B1C   DD E9                  JP   (ix)   
0B1E                NUMBERS:      
0B1E   21 02 00               LD   hl,2   
0B21   C3 EE 0A               JP   chars1   
0B24                             ; 
0B24                             ; keyIter:
0B24                             ;     call go
0B24                             ;     .cstr "{/k /t}"             ; block
0B24                             ; fromIter:
0B24                             ;     call go
0B24                             ;     dw NUL                      ; NUL closure
0B24                             ;     dw $+4
0B24                             ;     dw args1A0L
0B24                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B24                             ; fromIter1:
0B24                             ;     call go
0B24                             ;     dw NUL                      ; NUL closure
0B24                             ;     dw $+4
0B24                             ;     dw args2A0L
0B24                             ;     .cstr "{[$a [/f /f /f 0]] fromIter1 /pa}"                  ; block
0B24                FILTER:      
0B24                MAP:         
0B24                SCAN:        
0B24   DD E9                  JP   (ix)   
0B26                             ;*******************************************************************
0B26                             ; reusable arglists
0B26                             ;*******************************************************************
0B26                ARGS1A0L:      ; one arg zero locals
0B26   00                     DB   0   
0B27   01 61                  .PSTR   "a"   
0B29                ARGS1A2L:      ; one arg two locals
0B29   02                     DB   2   
0B2A   03 61 62 63            .PSTR   "abc"   
0B2E                             ;*******************************************************************
0B2E                             ; general routines
0B2E                             ;*******************************************************************
0B2E                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0B2E                FLUSHBUFFER:      
0B2E   F5                     PUSH   af   
0B2F   D5                     PUSH   de   
0B30   E5                     PUSH   hl   
0B31   2A EC 23               LD   hl,(vBufPtr)   
0B34   11 00 22               LD   de,BUF   
0B37   ED 53 EC 23            LD   (vBufPtr),de   
0B3B   B7                     OR   a   
0B3C   ED 52                  SBC   hl,de   
0B3E   CD 88 0A               CALL   printChars2   
0B41   E1                     POP   hl   
0B42   D1                     POP   de   
0B43   F1                     POP   af   
0B44   C9                     RET      
0B45                             ; followed by a table
0B45                             ; db char
0B45                             ; dw addr
0B45                             ; the final item must have char == NUL
0B45                JUMPTABLE:      
0B45   03                     INC   bc   
0B46   E1                     POP   hl   
0B47                JUMPTABLE0:      
0B47   AF                     XOR   a   
0B48   BE                     CP   (hl)   
0B49   28 09                  JR   z,jumpTable1   
0B4B   0A                     LD   a,(bc)   
0B4C   BE                     CP   (hl)   
0B4D   28 06                  JR   z,jumpTable2   
0B4F   23                     INC   hl   
0B50   23                     INC   hl   
0B51   23                     INC   hl   
0B52   18 F3                  JR   jumpTable0   
0B54                JUMPTABLE1:      
0B54   0B                     DEC   bc   
0B55                JUMPTABLE2:      
0B55   23                     INC   hl   
0B56   5E                     LD   e,(hl)   
0B57   23                     INC   hl   
0B58   56                     LD   d,(hl)   
0B59   EB                     EX   de,hl   
0B5A   E9                     JP   (hl)   
0B5B                PRTSTR0:      
0B5B   CD 85 00               CALL   putchar   
0B5E   23                     INC   hl   
0B5F                PRTSTR:      
0B5F   7E                     LD   a,(hl)   
0B60   B7                     OR   a   
0B61   20 F8                  JR   nz,prtstr0   
0B63   C9                     RET      
0B64                             ; **************************************************************************
0B64                             ; calculate nesting value
0B64                             ; a is char to be tested,
0B64                             ; e is the nesting value (initially 0)
0B64                             ; e is increased by ( and [
0B64                             ; e is decreased by ) and ]
0B64                             ; e has its bit 7 toggled by `
0B64                             ; limited to 127 levels
0B64                             ; **************************************************************************
0B64                NESTING:      
0B64   FE 22                  CP   DQUOTE   ; quote char
0B66   28 06                  JR   z,nesting0   
0B68   FE 60                  CP   "`"   ; quote char
0B6A   28 02                  JR   z,nesting0   
0B6C   18 0A                  JR   nesting1   
0B6E                NESTING0:      
0B6E   CB 7B                  BIT   7,e   
0B70   28 03                  JR   z,nesting1a   
0B72   CB BB                  RES   7,e   
0B74   C9                     RET      
0B75                NESTING1A:      
0B75   CB FB                  SET   7,e   
0B77   C9                     RET      
0B78                NESTING1:      
0B78   CB 7B                  BIT   7,e   
0B7A   C0                     RET   nz   
0B7B   FE 7B                  CP   "{"   
0B7D   28 08                  JR   z,nesting2   
0B7F   FE 5B                  CP   "["   
0B81   28 04                  JR   z,nesting2   
0B83   FE 28                  CP   "("   
0B85   20 02                  JR   nz,nesting3   
0B87                NESTING2:      
0B87   1C                     INC   e   
0B88   C9                     RET      
0B89                NESTING3:      
0B89   FE 7D                  CP   "}"   
0B8B   28 07                  JR   z,nesting4   
0B8D   FE 5D                  CP   "]"   
0B8F   28 03                  JR   z,nesting4   
0B91   FE 29                  CP   ")"   
0B93   C0                     RET   nz   
0B94                NESTING4:      
0B94   1D                     DEC   e   
0B95   C9                     RET      
0B96                PROMPT:      
0B96   CD A6 0B               CALL   printStr   
0B99   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0B9E   C9                     RET      
0B9F                CRLF:        
0B9F   CD A6 0B               CALL   printStr   
0BA2   0D 0A 00               .CSTR   "\r\n"   
0BA5   C9                     RET      
0BA6                             ; prints a null teminated string
0BA6                             ; the string should be immediately following the call
0BA6                PRINTSTR:      
0BA6   E3                     EX   (sp),hl   ; swap			
0BA7   CD 5F 0B               CALL   prtstr   
0BAA   23                     INC   hl   ; inc past NUL
0BAB   E3                     EX   (sp),hl   ; put it back	
0BAC   C9                     RET      
0BAD                TITLESTR:      
0BAD   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0BC1                INIT:        
0BC1   21 AD 0B               LD   hl,titleStr   
0BC4   11 0A 24               LD   de,titleBuf   
0BC7   06 14                  LD   b,20   
0BC9                INIT1:       
0BC9   1A                     LD   a,(de)   
0BCA   BE                     CP   (hl)   
0BCB   20 17                  JR   nz,coldBoot0   
0BCD   13                     INC   de   
0BCE   23                     INC   hl   
0BCF   10 F8                  DJNZ   init1   
0BD1                WARMINIT:      
0BD1   ED 4B F6 23            LD   bc,(vSavedIP)   ; restore IP
0BD5   ED 7B F8 23            LD   sp,(vSavedSP)   ; restore SP
0BD9   DD 2A FA 23            LD   ix,(vSavedNext)   ; restore Next
0BDD   FD 2A FC 23            LD   iy,(vSavedBP)   ; restore BP
0BE1   C3 1B 0C               JP   start1   
0BE4                COLDBOOT0:      
0BE4   21 AD 0B               LD   hl,titleStr   ; copy titleStr to titleBuf
0BE7   11 0A 24               LD   de,titleBuf   
0BEA   06 14                  LD   b,20   
0BEC   ED B0                  LDIR      
0BEE                COLDINIT:      
0BEE   21 80 01               LD   hl,isysVars   
0BF1   11 E6 23               LD   de,sysVars   
0BF4   01 10 00               LD   bc,8 * 2   
0BF7   ED B0                  LDIR      
0BF9   21 00 23               LD   hl,vars   ; 52 vars LO HI
0BFC   06 34                  LD   b,26*2   
0BFE   AF                     XOR   a   
0BFF                COLDBOOT1:      
0BFF   77                     LD   (hl),a   
0C00   23                     INC   hl   
0C01   10 FC                  DJNZ   coldBoot1   
0C03   DD 2A EE 23            LD   ix,(vNext)   
0C07   FD 21 00 21            LD   iy,STACK   
0C0B   C9                     RET      
0C0C                COLDSTART:      
0C0C   31 00 21               LD   sp,STACK   
0C0F   CD E4 0B               CALL   coldBoot0   
0C12   C3 1B 0C               JP   start1   
0C15                START:       
0C15   31 00 21               LD   sp,STACK   ; start Monty
0C18   CD C1 0B               CALL   init   ; setups
0C1B                START1:      
0C1B   21 0A 24               LD   hl,titleBuf   
0C1E   CD 5F 0B               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0C21                INTERPRET:      
0C21   CD 2E 0B               CALL   flushBuffer   
0C24   CD 96 0B               CALL   prompt   
0C27   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0C2A   21 00 21               LD   hl,TIB   
0C2D   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0C30                INTERPRET2:      ; calculate nesting
0C30   1E 00                  LD   e,0   ; initilize nesting value
0C32   C5                     PUSH   bc   ; save offset into TIB,
0C33                             ; bc is also the count of chars in TIB
0C33   21 00 21               LD   hl,TIB   ; hl is start of TIB
0C36   18 0B                  JR   interpret4   
0C38                INTERPRET3:      
0C38   3E 33                  LD   a,"3"   
0C3A   CD 85 00               CALL   putchar   
0C3D   7E                     LD   a,(hl)   ; a = char in TIB
0C3E   23                     INC   hl   ; inc pointer into TIB
0C3F   0B                     DEC   bc   ; dec count of chars in TIB
0C40   CD 64 0B               CALL   nesting   ; update nesting value
0C43                INTERPRET4:      
0C43   79                     LD   a,c   ; is count zero?
0C44   B0                     OR   b   
0C45   20 F1                  JR   nz,interpret3   ; if not loop
0C47   C1                     POP   bc   ; restore offset into TIB
0C48                INTERPRET5:      
0C48   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0C4B   FE 20                  CP   $20   ; compare to space
0C4D   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0C4F   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0C51                             ; ???? NEEDED?
0C51   28 3B                  JR   z,interpret8   
0C53   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0C55   28 24                  JR   z,interpret7   ; if anything else its macro/control
0C57   FE 05                  CP   CTRL_E   
0C59   CA EC 0C               JP   z,edit_   
0C5C   FE 08                  CP   CTRL_H   
0C5E   CA DC 0C               JP   z,backSpace_   
0C61   FE 0A                  CP   CTRL_J   
0C63   CA 04 0D               JP   z,reEdit_   
0C66   FE 13                  CP   CTRL_S   
0C68   CA 07 0D               JP   z,printStack_   
0C6B                             ; DB     lsb(edit_)       ; ENQ ^E  5
0C6B                             ; DB     lsb(reedit_)     ; LF  ^J 10
0C6B                             ; DB     lsb(list_)       ; FF  ^L 12
0C6B                             ; DB     lsb(printStack_) ; DLE ^P 16
0C6B                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0C6B                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0C6B                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0C6B                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0C6B                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0C6B                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0C6B                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0C6B                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0C6B                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0C6B                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0C6B                INTERPRET5A:      
0C6B                             ; ld (vTIBPtr),bc
0C6B                             ; ld bc,(vTIBPtr)
0C6B   18 C3                  JR   interpret2   
0C6D                INTERPRET6:      
0C6D   21 00 21               LD   hl,TIB   
0C70   09                     ADD   hl,bc   
0C71   77                     LD   (hl),a   ; store the character in textbuf
0C72   03                     INC   bc   
0C73   CD 85 00               CALL   putchar   ; echo character to screen
0C76   CD 64 0B               CALL   nesting   
0C79   18 CD                  JR   interpret5   ; wait for next character
0C7B                INTERPRET7:      
0C7B   21 00 21               LD   hl,TIB   
0C7E   09                     ADD   hl,bc   
0C7F   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0C81   23                     INC   hl   
0C82   36 0A                  LD   (hl),"\n"   
0C84   23                     INC   hl   
0C85   03                     INC   bc   
0C86   03                     INC   bc   
0C87   CD 9F 0B               CALL   crlf   ; echo character to screen
0C8A   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0C8B   B7                     OR   a   
0C8C   20 BA                  JR   nz,interpret5   
0C8E                INTERPRET8:      
0C8E   21 00 21               LD   hl,TIB   
0C91   09                     ADD   hl,bc   
0C92   22 EA 23               LD   (vTIBPtr),hl   
0C95   01 00 21               LD   bc,TIB   
0C98   ED 43 F6 23            LD   (vSavedIP),bc   ; save IP
0C9C   ED 73 F8 23            LD   (vSavedSP),sp   ; save SP
0CA0   DD 22 FA 23            LD   (vSavedNext),ix   ; save Next
0CA4   FD 22 FC 23            LD   (vSavedBP),iy   ; save BP
0CA8   0B                     DEC   bc   
0CA9                NEXT:        
0CA9   03                     INC   bc   ; Increment the IP
0CAA   0A                     LD   a,(bc)   ; Get the next character and dispatch
0CAB   FE 20                  CP   " "   ; whitespace?
0CAD   28 FA                  JR   z,next   ; space? ignore
0CAF   38 09                  JR   c,next1   
0CB1   D6 20                  SUB   " "   
0CB3   6F                     LD   l,a   ; index into table
0CB4   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0CB6   6E                     LD   l,(hl)   ; get low jump address
0CB7   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0CB9   E9                     JP   (hl)   ; Jump to routine
0CBA                NEXT1:       
0CBA   FE 00                  CP   NUL   ; end of input string?
0CBC   28 03                  JR   z,exit   
0CBE   C3 21 0C               JP   interpret   ; no, other whitespace, macros?
0CC1                EXIT:        
0CC1   03                     INC   bc   
0CC2   60 69                  LD   hl,bc   
0CC4   E9                     JP   (hl)   
0CC5                RUN:         
0CC5   C1                     POP   bc   
0CC6   0B                     DEC   bc   
0CC7   DD E9                  JP   (ix)   
0CC9                ERROR:       
0CC9   CD C5 0C               CALL   run   
0CCC   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQUOTE,"Error ",DQUOTE,".s .",0   
0CD9   C3 21 0C               JP   interpret   
0CDC                BACKSPACE_:      
0CDC   79                     LD   a,c   
0CDD   B0                     OR   b   
0CDE   CA 30 0C               JP   z,interpret2   
0CE1   0B                     DEC   bc   
0CE2   CD A6 0B               CALL   printStr   
0CE5   08 20 08 00            .CSTR   "\b \b"   
0CE9   C3 30 0C               JP   interpret2   
0CEC                             ; edit
0CEC                EDIT_:       
0CEC   CD C5 0C               CALL   run   
0CEF   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQUOTE,"var?",DQUOTE,".s /k/ad .h",0   
0D01   C3 21 0C               JP   interpret   
0D04                REEDIT_:      
0D04   C3 21 0C               JP   interpret   
0D07                PRINTSTACK_:      
0D07   CD C5 0C               CALL   run   
0D0A   2F 70 6B 00            .CSTR   "/pk"   
0D0E   C3 21 0C               JP   interpret   
0D11                             ; editDef:
0D11                             ;     pop hl                      ; pop ret address
0D11                             ;     ex (sp),hl                  ; swap with TOS
0D11                             ;     push hl                     ; dup TOS
0D11                             ;     ld a,l                      ; a = ident
0D11                             ;     ld de,TIB                   ; de = start of TIB
0D11                             ;     ld (vTIBPtr),de             ; update TIB*
0D11                             ;     push ix                     ; save NEXT
0D11                             ;     ld ix,editDef0              ; NEXT = editDef0
0D11                             ;     jp lookupRef                ; convert letter into address
0D11                             ; editDef0:
0D11                             ;     ld e,(hl)                   ; de = (hl++)
0D11                             ;     inc hl
0D11                             ;     ld d,(hl)
0D11                             ;     ld a,d                      ; de == 0 ?
0D11                             ;     or e
0D11                             ;     jr z,editDef4
0D11                             ;     ld ix,editDef3              ; NEXT = editDef3
0D11                             ;     ex de,hl
0D11                             ;     ld a,(hl)
0D11                             ;     cp "{"
0D11                             ;     jr nz,editDef1
0D11                             ;     jp editBlock0               ; convert letter into address
0D11                             ; editDef1:
0D11                             ;     cp "("
0D11                             ;     jr nz,editDef2
0D11                             ;     jp editBlock0               ; convert letter into address
0D11                             ; editDef2:
0D11                             ;     jp editLambda
0D11                             ; editDef3:
0D11                             ;     ld a," "                    ; write assign
0D11                             ;     call writeChar
0D11                             ;     pop hl                      ; a = ident
0D11                             ;     ld a,l
0D11                             ;     call writeChar
0D11                             ;     ld a,"="                    ; write assign
0D11                             ;     call writeChar
0D11                             ;     ld ix,editDef4              ; NEXT = editDef4
0D11                             ;     jp printTIB
0D11                             ; editDef4:
0D11                             ;     pop ix                      ; restore NEXT
0D11                             ;     jp (ix)
0D11                             ; writeChar:
0D11                             ;     ld de,(vTIBPtr)             ; de = TIB*
0D11                             ;     ld (de),a                   ; write ident
0D11                             ;     inc de
0D11                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0D11                             ;     ret
0D11                             ; ; printTIB
0D11                             ; printTIB:
0D11                             ;     ld hl,(vTIBPtr)
0D11                             ;     ld de,TIB
0D11                             ;     or a
0D11                             ;     sbc hl,de
0D11                             ;     jp printTIB2
0D11                             ; printTIB1:
0D11                             ;     ld a,(de)
0D11                             ;     call putchar
0D11                             ; printTIB2:
0D11                             ;     ld a,l
0D11                             ;     or h
0D11                             ;     jr nz,printTIB1
0D11                             ;     jp (ix)
0D11                             ; editBlock:
0D11                             ;     pop hl                      ; hl = block*
0D11                             ; editBlock0:
0D11                             ;     push ix                     ; save next
0D11                             ;     push hl                     ; push block*
0D11                             ;     push hl                     ; push block*
0D11                             ;     ld ix,(editBlock2)
0D11                             ;     jp blockLength
0D11                             ; editBlock1:
0D11                             ;     pop hl                      ; bc = length, (sp) = IP
0D11                             ;     pop de                      ; de = block*
0D11                             ;     ld a,l
0D11                             ;     or h
0D11                             ;     jr z,editBlock2
0D11                             ;     push bc
0D11                             ;     ld bc,hl
0D11                             ;     ex de,hl                    ; hl = block*
0D11                             ;     ld de,(vTIBPtr)              ; de = TIB*
0D11                             ;     ldir                        ; copy block to TIB
0D11                             ;     ld (vTIBPtr),de              ; save TIB*
0D11                             ;     pop bc
0D11                             ; editBlock2:
0D11                             ;     pop ix                      ; restore next
0D11                             ;     jp (ix)
0D11                             ; editLambda:
0D11                             ;     jp (ix)
0D11                             ; editArray:
0D11                             ;     jp (ix)
0D11                             ; editArglist:
0D11                             ;     jp (ix)
0D11                             ; ; blockLength
0D11                             ; ; addr1 -- length
0D11                             ; blockLength:
0D11                             ;     pop hl                      ; block*
0D11                             ;     push hl                     ; save block*
0D11                             ;     inc hl                      ; skip first char
0D11                             ;     ld d,1                      ; increase nesting
0D11                             ; blockLength1:                   ; Skip to end of definition
0D11                             ;     ld a,(hl)                   ; Get the next character
0D11                             ;     inc hl                      ; Point to next character
0D11                             ;     cp " " + 1                  ; ignore whitespace
0D11                             ;     jr c,blockLength1
0D11                             ;     cp ")"
0D11                             ;     jr z,blockLength4
0D11                             ;     cp "}"
0D11                             ;     jr z,blockLength4
0D11                             ;     cp "]"
0D11                             ;     jr z,blockLength4
0D11                             ;     cp "("
0D11                             ;     jr z,blockLength2
0D11                             ;     cp "{"
0D11                             ;     jr z,blockLength2
0D11                             ;     cp "["
0D11                             ;     jr z,blockLength2
0D11                             ;     cp "'"
0D11                             ;     jr z,blockLength3
0D11                             ;     cp "`"
0D11                             ;     jr z,blockLength3
0D11                             ;     cp DQUOTE
0D11                             ;     jr z,blockLength3
0D11                             ;     jr blockLength1
0D11                             ; blockLength2:
0D11                             ;     inc d
0D11                             ;     jr blockLength1
0D11                             ; blockLength4:
0D11                             ;     dec d
0D11                             ;     jr nz, blockLength1         ; get the next element
0D11                             ; blockLength3:
0D11                             ;     ld a,$80
0D11                             ;     xor d
0D11                             ;     ld d,a
0D11                             ;     jr nz, blockLength1
0D11                             ;     pop hl                      ; hl = block*
0D11                             ;     or a
0D11                             ;     sbc hl,de
0D11                             ;     push hl
0D11                             ;     jp (ix)
0D11                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0D11                             ; \a start of stack \#3 depth \b base \$ prompt
0D11                             ; DW dStack               ; a vS0 start of datastack			
0D11                             ; DW FALSE                ; b vBase16
0D11                             ; DW 0                    ; c vTIBPtr an offset to the tib
0D11                             ; DW 0                    ; d
0D11                             ; DW 65                   ; e vLastDef "A" last command u defined
0D11                             ; DW 0                    ; f
0D11                             ; DW page6                ; g 256 bytes limits
0D11                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0D11                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                             ; uninitialised sys variables (preserved)
23F2                VPOINTER:   DS   2   ; 
23F4                VREMAIN:   DS   2   ; 
23F6                VSAVEDIP:   DS   2   ; 
23F8                VSAVEDSP:   DS   2   ; 
23FA                VSAVEDNEXT:   DS   2   ; 
23FC                VSAVEDBP:   DS   2   ; 
23FE                VCHECKSUM:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                VHASHSTR:   DS   2   ; 
2408                TBPTR:    DS   2   ; reserved for tests
240A                TITLEBUF:   DS   20   
241E                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 11
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0B24 DEFINED AT LINE 1843 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1799 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1660 IN MAIN.asm
                    > USED AT LINE 1907 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2119 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 1205 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1454 IN MAIN.asm
                    > USED AT LINE 1467 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1734 IN MAIN.asm
                    > USED AT LINE 2076 IN MAIN.asm
                    > USED AT LINE 2164 IN MAIN.asm
DQUOTE:             0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1926 IN MAIN.asm
                    > USED AT LINE 2178 IN MAIN.asm
                    > USED AT LINE 2193 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2010 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 68 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 171 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 173 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 175 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 177 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 179 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 181 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 183 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 185 IN MAIN.asm
BACKSLASH_:         0315 DEFINED AT LINE 187 IN MAIN.asm
LPAREN_:            0318 DEFINED AT LINE 189 IN MAIN.asm
LBRACE_:            0318 DEFINED AT LINE 190 IN MAIN.asm
RBRACE_:            031B DEFINED AT LINE 192 IN MAIN.asm
TICK_:              031E DEFINED AT LINE 194 IN MAIN.asm
SEMICOLON_:         0321 DEFINED AT LINE 196 IN MAIN.asm
DOT_:               0324 DEFINED AT LINE 198 IN MAIN.asm
COLON_:             0327 DEFINED AT LINE 200 IN MAIN.asm
UPCASE_:            032A DEFINED AT LINE 202 IN MAIN.asm
LOWCASE_:           032D DEFINED AT LINE 204 IN MAIN.asm
QUESTION_:          0330 DEFINED AT LINE 206 IN MAIN.asm
STAR_:              0333 DEFINED AT LINE 208 IN MAIN.asm
BANG_:              0336 DEFINED AT LINE 210 IN MAIN.asm
NUM_:               033B DEFINED AT LINE 213 IN MAIN.asm
                    > USED AT LINE 1170 IN MAIN.asm
HASH_:              033E DEFINED AT LINE 215 IN MAIN.asm
PIPE_:              0341 DEFINED AT LINE 217 IN MAIN.asm
CARET_:             0344 DEFINED AT LINE 219 IN MAIN.asm
COMMA_:             0347 DEFINED AT LINE 221 IN MAIN.asm
DBLQUOTE_:          034A DEFINED AT LINE 223 IN MAIN.asm
MINUS_:             034D DEFINED AT LINE 225 IN MAIN.asm
EQ_:                0350 DEFINED AT LINE 227 IN MAIN.asm
EQ0:                035A DEFINED AT LINE 234 IN MAIN.asm
                    > USED AT LINE 231 IN MAIN.asm
EQ1:                035B DEFINED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 212 IN MAIN.asm
GT_:                035F DEFINED AT LINE 240 IN MAIN.asm
LT_:                036A DEFINED AT LINE 248 IN MAIN.asm
LT1:                0373 DEFINED AT LINE 255 IN MAIN.asm
                    > USED AT LINE 247 IN MAIN.asm
SLASH_:             037C DEFINED AT LINE 260 IN MAIN.asm
NOP_:               037F DEFINED AT LINE 262 IN MAIN.asm
RPAREN_:            0381 DEFINED AT LINE 264 IN MAIN.asm
PLUS:               0384 DEFINED AT LINE 270 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
ADD:                0384 DEFINED AT LINE 271 IN MAIN.asm
ADD1:               038F DEFINED AT LINE 279 IN MAIN.asm
                    > USED AT LINE 275 IN MAIN.asm
ADD3:               0393 DEFINED AT LINE 284 IN MAIN.asm
                    > USED AT LINE 746 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
AT:                 0396 DEFINED AT LINE 290 IN MAIN.asm
                    > USED AT LINE 176 IN MAIN.asm
ADDR:               0396 DEFINED AT LINE 291 IN MAIN.asm
AMPER:              03A0 DEFINED AT LINE 296 IN MAIN.asm
                    > USED AT LINE 178 IN MAIN.asm
AND:                03A0 DEFINED AT LINE 297 IN MAIN.asm
AND1:               03A7 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 319 IN MAIN.asm
PIPE:               03AB DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 218 IN MAIN.asm
OR:                 03AB DEFINED AT LINE 311 IN MAIN.asm
XOR:                03B4 DEFINED AT LINE 321 IN MAIN.asm
                    > USED AT LINE 733 IN MAIN.asm
XOR1:               03B5 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 335 IN MAIN.asm
INVERT:             03BF DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 1453 IN MAIN.asm
PERCENT:            03C4 DEFINED AT LINE 340 IN MAIN.asm
                    > USED AT LINE 186 IN MAIN.asm
ARG:                03C4 DEFINED AT LINE 341 IN MAIN.asm
ARG0:               03E0 DEFINED AT LINE 360 IN MAIN.asm
                    > USED AT LINE 366 IN MAIN.asm
ARG0A:              03E9 DEFINED AT LINE 368 IN MAIN.asm
                    > USED AT LINE 347 IN MAIN.asm
                    > USED AT LINE 352 IN MAIN.asm
ARG1:               03EE DEFINED AT LINE 371 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
ARG1A:              03F6 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 370 IN MAIN.asm
LBRACK:             03F9 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
ARRAYSTART:         03F9 DEFINED AT LINE 383 IN MAIN.asm
RBRACK:             0415 DEFINED AT LINE 397 IN MAIN.asm
                    > USED AT LINE 184 IN MAIN.asm
ARRAYEND:           0415 DEFINED AT LINE 398 IN MAIN.asm
ARRAYEND1:          0431 DEFINED AT LINE 415 IN MAIN.asm
                    > USED AT LINE 432 IN MAIN.asm
ARRAYEND2:          0441 DEFINED AT LINE 425 IN MAIN.asm
                    > USED AT LINE 421 IN MAIN.asm
ARRAYEND3:          0446 DEFINED AT LINE 429 IN MAIN.asm
                    > USED AT LINE 414 IN MAIN.asm
HASH:               0465 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
ARRAYINDEX:         0465 DEFINED AT LINE 454 IN MAIN.asm
ARRAYINDEX0:        046D DEFINED AT LINE 460 IN MAIN.asm
ARRAYINDEX1:        046E DEFINED AT LINE 462 IN MAIN.asm
                    > USED AT LINE 459 IN MAIN.asm
ARRAYINDEX2:        047A DEFINED AT LINE 471 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
ASSIGN:             047D DEFINED AT LINE 476 IN MAIN.asm
                    > USED AT LINE 233 IN MAIN.asm
ASSIGN0:            047F DEFINED AT LINE 479 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
                    > USED AT LINE 1177 IN MAIN.asm
ASSIGNX:            0480 DEFINED AT LINE 481 IN MAIN.asm
ASSIGN1:            048C DEFINED AT LINE 489 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
COLON:              048E DEFINED AT LINE 496 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
ARGLIST:            048E DEFINED AT LINE 497 IN MAIN.asm
ARGLIST1:           0498 DEFINED AT LINE 504 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST1A:          04A0 DEFINED AT LINE 510 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
ARGLIST2:           04A8 DEFINED AT LINE 515 IN MAIN.asm
ARGLIST3:           04B0 DEFINED AT LINE 523 IN MAIN.asm
                    > USED AT LINE 509 IN MAIN.asm
                    > USED AT LINE 521 IN MAIN.asm
ARGLIST4:           04B3 DEFINED AT LINE 526 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 514 IN MAIN.asm
ARGLIST5:           04B9 DEFINED AT LINE 532 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
LBRACE:             04C4 DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 191 IN MAIN.asm
BLOCKSTART:         04C4 DEFINED AT LINE 543 IN MAIN.asm
BLOCKSTART1:        04C8 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 573 IN MAIN.asm
                    > USED AT LINE 576 IN MAIN.asm
                    > USED AT LINE 581 IN MAIN.asm
                    > USED AT LINE 585 IN MAIN.asm
BLOCKSTART2:        04F4 DEFINED AT LINE 574 IN MAIN.asm
                    > USED AT LINE 561 IN MAIN.asm
                    > USED AT LINE 563 IN MAIN.asm
                    > USED AT LINE 565 IN MAIN.asm
BLOCKSTART3:        04F7 DEFINED AT LINE 577 IN MAIN.asm
                    > USED AT LINE 568 IN MAIN.asm
                    > USED AT LINE 570 IN MAIN.asm
                    > USED AT LINE 572 IN MAIN.asm
BLOCKSTART4:        04FF DEFINED AT LINE 583 IN MAIN.asm
                    > USED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 556 IN MAIN.asm
                    > USED AT LINE 558 IN MAIN.asm
BLOCKSTART5:        0502 DEFINED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 582 IN MAIN.asm
BLOCKSTART6:        052A DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
RBRACE:             052D DEFINED AT LINE 609 IN MAIN.asm
                    > USED AT LINE 193 IN MAIN.asm
BLOCKEND:           052D DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 1397 IN MAIN.asm
BLOCKEND1:          055F DEFINED AT LINE 632 IN MAIN.asm
                    > USED AT LINE 625 IN MAIN.asm
BLOCKEND2:          056B DEFINED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
BLOCKEND3:          057D DEFINED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
TICK:               0589 DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
CHAR:               0589 DEFINED AT LINE 661 IN MAIN.asm
CHAR1:              058C DEFINED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
CHAR2:              0598 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 669 IN MAIN.asm
CHAR3:              059B DEFINED AT LINE 675 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
BACKSLASH:          059E DEFINED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 188 IN MAIN.asm
COMMA:              05A0 DEFINED AT LINE 684 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
DISCARD:            05A0 DEFINED AT LINE 685 IN MAIN.asm
DISCARD1:           05AD DEFINED AT LINE 694 IN MAIN.asm
                    > USED AT LINE 692 IN MAIN.asm
SLASH:              05AF DEFINED AT LINE 697 IN MAIN.asm
                    > USED AT LINE 261 IN MAIN.asm
COMMAND:            05AF DEFINED AT LINE 698 IN MAIN.asm
DIV:                05E8 DEFINED AT LINE 737 IN MAIN.asm
                    > USED AT LINE 735 IN MAIN.asm
DOT:                05F9 DEFINED AT LINE 748 IN MAIN.asm
                    > USED AT LINE 199 IN MAIN.asm
DIVIDE:             060B DEFINED AT LINE 764 IN MAIN.asm
                    > USED AT LINE 742 IN MAIN.asm
DIVIDE1:            0610 DEFINED AT LINE 767 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
DIVIDE2:            061D DEFINED AT LINE 775 IN MAIN.asm
                    > USED AT LINE 772 IN MAIN.asm
DIVIDE3:            061E DEFINED AT LINE 777 IN MAIN.asm
                    > USED AT LINE 774 IN MAIN.asm
EQUALS:             0624 DEFINED AT LINE 785 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
LESSTHANEQ:         062C DEFINED AT LINE 793 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN:           0631 DEFINED AT LINE 800 IN MAIN.asm
                    > USED AT LINE 259 IN MAIN.asm
LESSTHAN1:          0636 DEFINED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 796 IN MAIN.asm
TRUE1:              0639 DEFINED AT LINE 808 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 788 IN MAIN.asm
NULL1:              063F DEFINED AT LINE 812 IN MAIN.asm
FALSE1:             063F DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 711 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
                    > USED AT LINE 806 IN MAIN.asm
CARET:              0645 DEFINED AT LINE 821 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GO:                 0645 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                0646 DEFINED AT LINE 824 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
                    > USED AT LINE 1000 IN MAIN.asm
GO2:                064C DEFINED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
GOBLOCK:            0657 DEFINED AT LINE 837 IN MAIN.asm
GOBLOCK1:           0657 DEFINED AT LINE 838 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
GOBLOCK2:           067C DEFINED AT LINE 855 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
GOLAMBDA:           068A DEFINED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 834 IN MAIN.asm
GOLAMBDA1:          06A3 DEFINED AT LINE 883 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
GOLAMBDA2:          06A9 DEFINED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
GOLAMBDA3:          06B4 DEFINED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 872 IN MAIN.asm
GOLAMBDA4:          06CC DEFINED AT LINE 913 IN MAIN.asm
                    > USED AT LINE 910 IN MAIN.asm
GOLAMBDA5:          06CF DEFINED AT LINE 916 IN MAIN.asm
                    > USED AT LINE 922 IN MAIN.asm
GOLAMBDA6:          06D2 DEFINED AT LINE 920 IN MAIN.asm
                    > USED AT LINE 915 IN MAIN.asm
GOLAMBDA7:          06D5 DEFINED AT LINE 923 IN MAIN.asm
GOLAMBDA8:          06D9 DEFINED AT LINE 928 IN MAIN.asm
                    > USED AT LINE 849 IN MAIN.asm
                    > USED AT LINE 912 IN MAIN.asm
DOLLAR:             06E4 DEFINED AT LINE 937 IN MAIN.asm
                    > USED AT LINE 180 IN MAIN.asm
HEXNUM:             06E4 DEFINED AT LINE 938 IN MAIN.asm
HEXNUM1:            06E7 DEFINED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
HEXNUM2:            06EF DEFINED AT LINE 946 IN MAIN.asm
                    > USED AT LINE 944 IN MAIN.asm
UPCASE:             0701 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 203 IN MAIN.asm
LOWCASE:            0706 DEFINED AT LINE 962 IN MAIN.asm
                    > USED AT LINE 205 IN MAIN.asm
IDENT1:             070B DEFINED AT LINE 966 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
QUESTION:           0718 DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
IF:                 0718 DEFINED AT LINE 980 IN MAIN.asm
IFTE:               0724 DEFINED AT LINE 990 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
IFTE1:              0725 DEFINED AT LINE 992 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
STAR:               0731 DEFINED AT LINE 1002 IN MAIN.asm
                    > USED AT LINE 209 IN MAIN.asm
MUL:                0731 DEFINED AT LINE 1003 IN MAIN.asm
MUL2:               0733 DEFINED AT LINE 1006 IN MAIN.asm
MUL3:               073B DEFINED AT LINE 1011 IN MAIN.asm
                    > USED AT LINE 1020 IN MAIN.asm
NUM:                074D DEFINED AT LINE 1024 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
NUM0:               0756 DEFINED AT LINE 1030 IN MAIN.asm
                    > USED AT LINE 1028 IN MAIN.asm
NUM1:               0757 DEFINED AT LINE 1032 IN MAIN.asm
                    > USED AT LINE 1049 IN MAIN.asm
NUM2:               076F DEFINED AT LINE 1050 IN MAIN.asm
                    > USED AT LINE 948 IN MAIN.asm
                    > USED AT LINE 950 IN MAIN.asm
                    > USED AT LINE 1035 IN MAIN.asm
                    > USED AT LINE 1037 IN MAIN.asm
NUM3:               077A DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1053 IN MAIN.asm
RPAREN:             077D DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SEMICOLON:          0785 DEFINED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 197 IN MAIN.asm
SHIFTLEFT:          07A1 DEFINED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 252 IN MAIN.asm
SHIFTLEFT1:         07A9 DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
SHIFTLEFT2:         07AA DEFINED AT LINE 1101 IN MAIN.asm
                    > USED AT LINE 1098 IN MAIN.asm
SHIFTRIGHT:         07B1 DEFINED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
SHIFTRIGHT1:        07B9 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1120 IN MAIN.asm
SHIFTRIGHT2:        07BD DEFINED AT LINE 1119 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
DBLQUOTE:           07C4 DEFINED AT LINE 1128 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
STRING:             07C4 DEFINED AT LINE 1129 IN MAIN.asm
STRING1:            07CD DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 1145 IN MAIN.asm
STRING2:            07D0 DEFINED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1135 IN MAIN.asm
STRING3:            07D9 DEFINED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1143 IN MAIN.asm
MINUS:              07EC DEFINED AT LINE 1163 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
SUB:                07F8 DEFINED AT LINE 1171 IN MAIN.asm
                    > USED AT LINE 1168 IN MAIN.asm
SUB1:               0802 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
ERROR1:             080B DEFINED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
                    > USED AT LINE 1468 IN MAIN.asm
                    > USED AT LINE 1706 IN MAIN.asm
                    > USED AT LINE 1735 IN MAIN.asm
COMMENT:            0812 DEFINED AT LINE 1191 IN MAIN.asm
                    > USED AT LINE 701 IN MAIN.asm
                    > USED AT LINE 1195 IN MAIN.asm
COMMAND_A:          081B DEFINED AT LINE 1199 IN MAIN.asm
                    > USED AT LINE 703 IN MAIN.asm
ABSOLUTE:           0827 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
ADDROF:             0834 DEFINED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1204 IN MAIN.asm
ADDROF1:            0848 DEFINED AT LINE 1237 IN MAIN.asm
                    > USED AT LINE 1233 IN MAIN.asm
ADDROF2:            0853 DEFINED AT LINE 1246 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1236 IN MAIN.asm
COMMAND_B:          0855 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
BUFFERARRAY:        0861 DEFINED AT LINE 32
                    > USED AT LINE 751 IN MAIN.asm
BUFFERARRAYM_1725S1258: 086F DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       08AA DEFINED AT LINE 1264 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
BUFFERDEC:          08B1 DEFINED AT LINE 1271 IN MAIN.asm
BUFFERDEC0:         08CB DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
BUFFERDEC1:         08DB DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 1290 IN MAIN.asm
BUFFERDEC2:         08FB DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
                    > USED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 1314 IN MAIN.asm
BUFFERDEC3:         08FD DEFINED AT LINE 1318 IN MAIN.asm
                    > USED AT LINE 1321 IN MAIN.asm
BUFFERDEC4:         090D DEFINED AT LINE 1330 IN MAIN.asm
                    > USED AT LINE 1325 IN MAIN.asm
BUFFERDEC5:         090E DEFINED AT LINE 1332 IN MAIN.asm
                    > USED AT LINE 1329 IN MAIN.asm
BUFFERHEX:          0917 DEFINED AT LINE 1343 IN MAIN.asm
                    > USED AT LINE 1267 IN MAIN.asm
BUFFERHEX1:         0938 DEFINED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1351 IN MAIN.asm
                    > USED AT LINE 1353 IN MAIN.asm
BUFFERHEX2:         0941 DEFINED AT LINE 1369 IN MAIN.asm
                    > USED AT LINE 1367 IN MAIN.asm
BREAK:              094F DEFINED AT LINE 1382 IN MAIN.asm
                    > USED AT LINE 1252 IN MAIN.asm
BREAK1:             0956 DEFINED AT LINE 1388 IN MAIN.asm
                    > USED AT LINE 1386 IN MAIN.asm
BUFFERSTRING:       0969 DEFINED AT LINE 1401 IN MAIN.asm
                    > USED AT LINE 755 IN MAIN.asm
BUFFERSTRING0:      0970 DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 1413 IN MAIN.asm
BUFFERSTRING1:      0976 DEFINED AT LINE 1410 IN MAIN.asm
                    > USED AT LINE 1404 IN MAIN.asm
BUFFERCHAR:         0983 DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 753 IN MAIN.asm
BUFFERXCHARS:       0988 DEFINED AT LINE 1426 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
BUFFERXCHARS0:      0989 DEFINED AT LINE 1428 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
BUFFERXCHARS1:      0992 DEFINED AT LINE 1434 IN MAIN.asm
                    > USED AT LINE 1444 IN MAIN.asm
BUFFERXCHARS2:      099A DEFINED AT LINE 1441 IN MAIN.asm
                    > USED AT LINE 1433 IN MAIN.asm
COMMAND_I:          09A4 DEFINED AT LINE 1448 IN MAIN.asm
                    > USED AT LINE 715 IN MAIN.asm
COMMAND_P:          09B0 DEFINED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 723 IN MAIN.asm
PARTIAL:            09C2 DEFINED AT LINE 1472 IN MAIN.asm
                    > USED AT LINE 1460 IN MAIN.asm
XPARTIAL:           09E2 DEFINED AT LINE 1490 IN MAIN.asm
XPARTIAL1:          0A00 DEFINED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 1506 IN MAIN.asm
XPARTIAL2:          0A17 DEFINED AT LINE 1526 IN MAIN.asm
                    > USED AT LINE 1517 IN MAIN.asm
                    > USED AT LINE 1522 IN MAIN.asm
XPARTIAL3:          0A2D DEFINED AT LINE 1543 IN MAIN.asm
                    > USED AT LINE 1553 IN MAIN.asm
XPARTIAL4:          0A38 DEFINED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
PRINTBUFFER:        0A55 DEFINED AT LINE 32
                    > USED AT LINE 1462 IN MAIN.asm
PRINTBUFFERM_2093S1647: 0A61 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0A7B DEFINED AT LINE 1652 IN MAIN.asm
                    > USED AT LINE 1464 IN MAIN.asm
PRINTCHARS1:        0A82 DEFINED AT LINE 1658 IN MAIN.asm
                    > USED AT LINE 1667 IN MAIN.asm
PRINTCHARS2:        0A88 DEFINED AT LINE 1663 IN MAIN.asm
                    > USED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1872 IN MAIN.asm
PRINTSTACK:         0A8D DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 1466 IN MAIN.asm
COMMAND_R:          0A8F DEFINED AT LINE 1701 IN MAIN.asm
                    > USED AT LINE 725 IN MAIN.asm
REMAIN:             0A98 DEFINED AT LINE 1708 IN MAIN.asm
                    > USED AT LINE 1704 IN MAIN.asm
SIZE:               0A9E DEFINED AT LINE 1713 IN MAIN.asm
                    > USED AT LINE 727 IN MAIN.asm
COMMAND_V:          0AA6 DEFINED AT LINE 1722 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
CONSTBUFSTART:      0ABB DEFINED AT LINE 1737 IN MAIN.asm
                    > USED AT LINE 1731 IN MAIN.asm
CONSTHEAPSTART:     0AC0 DEFINED AT LINE 1741 IN MAIN.asm
CONSTTIBSTART:      0AC5 DEFINED AT LINE 1745 IN MAIN.asm
                    > USED AT LINE 1733 IN MAIN.asm
VARBUFPTR:          0ACA DEFINED AT LINE 1749 IN MAIN.asm
                    > USED AT LINE 1725 IN MAIN.asm
VARHEAPPTR:         0AD3 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1727 IN MAIN.asm
VARTIBPTR:          0ADC DEFINED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1729 IN MAIN.asm
VARIABLE:           0AE5 DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 294 IN MAIN.asm
                    > USED AT LINE 1752 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
CONSTANT:           0AE8 DEFINED AT LINE 1766 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
                    > USED AT LINE 1747 IN MAIN.asm
CHARS:              0AEB DEFINED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 707 IN MAIN.asm
CHARS1:             0AEE DEFINED AT LINE 1773 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
DECIMAL:            0AF3 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
DECIMAL1:           0AF6 DEFINED AT LINE 1779 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
HEXADECIMAL:        0AFB DEFINED AT LINE 1782 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
INPUT:              0B01 DEFINED AT LINE 1788 IN MAIN.asm
                    > USED AT LINE 1451 IN MAIN.asm
KEY:                0B0C DEFINED AT LINE 1798 IN MAIN.asm
                    > USED AT LINE 717 IN MAIN.asm
OUTPUT:             0B15 DEFINED AT LINE 1807 IN MAIN.asm
                    > USED AT LINE 721 IN MAIN.asm
NUMBERS:            0B1E DEFINED AT LINE 1816 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
FILTER:             0B24 DEFINED AT LINE 1841 IN MAIN.asm
MAP:                0B24 DEFINED AT LINE 1842 IN MAIN.asm
ARGS1A0L:           0B26 DEFINED AT LINE 1850 IN MAIN.asm
ARGS1A2L:           0B29 DEFINED AT LINE 1854 IN MAIN.asm
FLUSHBUFFER:        0B2E DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1337 IN MAIN.asm
                    > USED AT LINE 1349 IN MAIN.asm
                    > USED AT LINE 1357 IN MAIN.asm
                    > USED AT LINE 1377 IN MAIN.asm
                    > USED AT LINE 1408 IN MAIN.asm
                    > USED AT LINE 1439 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
JUMPTABLE:          0B45 DEFINED AT LINE 1882 IN MAIN.asm
                    > USED AT LINE 699 IN MAIN.asm
                    > USED AT LINE 749 IN MAIN.asm
                    > USED AT LINE 1200 IN MAIN.asm
                    > USED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1449 IN MAIN.asm
                    > USED AT LINE 1458 IN MAIN.asm
                    > USED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1723 IN MAIN.asm
JUMPTABLE0:         0B47 DEFINED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1895 IN MAIN.asm
JUMPTABLE1:         0B54 DEFINED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 1888 IN MAIN.asm
JUMPTABLE2:         0B55 DEFINED AT LINE 1898 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
PRTSTR0:            0B5B DEFINED AT LINE 1906 IN MAIN.asm
                    > USED AT LINE 1912 IN MAIN.asm
PRTSTR:             0B5F DEFINED AT LINE 1909 IN MAIN.asm
                    > USED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
NESTING:            0B64 DEFINED AT LINE 1925 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
NESTING0:           0B6E DEFINED AT LINE 1931 IN MAIN.asm
                    > USED AT LINE 1927 IN MAIN.asm
                    > USED AT LINE 1929 IN MAIN.asm
NESTING1A:          0B75 DEFINED AT LINE 1936 IN MAIN.asm
                    > USED AT LINE 1933 IN MAIN.asm
NESTING1:           0B78 DEFINED AT LINE 1939 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
NESTING2:           0B87 DEFINED AT LINE 1948 IN MAIN.asm
                    > USED AT LINE 1943 IN MAIN.asm
                    > USED AT LINE 1945 IN MAIN.asm
NESTING3:           0B89 DEFINED AT LINE 1951 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
NESTING4:           0B94 DEFINED AT LINE 1958 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
                    > USED AT LINE 1955 IN MAIN.asm
PROMPT:             0B96 DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
CRLF:               0B9F DEFINED AT LINE 1967 IN MAIN.asm
                    > USED AT LINE 2133 IN MAIN.asm
PRINTSTR:           0BA6 DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
                    > USED AT LINE 2186 IN MAIN.asm
TITLESTR:           0BAD DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
INIT:               0BC1 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 2033 IN MAIN.asm
INIT1:              0BC9 DEFINED AT LINE 1988 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
WARMINIT:           0BD1 DEFINED AT LINE 1996 IN MAIN.asm
COLDBOOT0:          0BE4 DEFINED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 1991 IN MAIN.asm
                    > USED AT LINE 2029 IN MAIN.asm
COLDINIT:           0BEE DEFINED AT LINE 2009 IN MAIN.asm
COLDBOOT1:          0BFF DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2021 IN MAIN.asm
COLDSTART:          0C0C DEFINED AT LINE 2027 IN MAIN.asm
                    > USED AT LINE 1254 IN MAIN.asm
START:              0C15 DEFINED AT LINE 2031 IN MAIN.asm
                    > USED AT LINE 7
START1:             0C1B DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
INTERPRET:          0C21 DEFINED AT LINE 2038 IN MAIN.asm
                    > USED AT LINE 2166 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2197 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
INTERPRET2:         0C30 DEFINED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2184 IN MAIN.asm
                    > USED AT LINE 2188 IN MAIN.asm
INTERPRET3:         0C38 DEFINED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2068 IN MAIN.asm
INTERPRET4:         0C43 DEFINED AT LINE 2064 IN MAIN.asm
                    > USED AT LINE 2053 IN MAIN.asm
INTERPRET5:         0C48 DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2121 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
INTERPRET5A:        0C6B DEFINED AT LINE 2108 IN MAIN.asm
INTERPRET6:         0C6D DEFINED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2075 IN MAIN.asm
INTERPRET7:         0C7B DEFINED AT LINE 2123 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
INTERPRET8:         0C8E DEFINED AT LINE 2138 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
NEXT:               0CA9 DEFINED AT LINE 2151 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2155 IN MAIN.asm
NEXT1:              0CBA DEFINED AT LINE 2163 IN MAIN.asm
                    > USED AT LINE 2156 IN MAIN.asm
EXIT:               0CC1 DEFINED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
RUN:                0CC5 DEFINED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
                    > USED AT LINE 2200 IN MAIN.asm
ERROR:              0CC9 DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
BACKSPACE_:         0CDC DEFINED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
EDIT_:              0CEC DEFINED AT LINE 2191 IN MAIN.asm
                    > USED AT LINE 2083 IN MAIN.asm
REEDIT_:            0D04 DEFINED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 2087 IN MAIN.asm
PRINTSTACK_:        0D07 DEFINED AT LINE 2199 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 840 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2028 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
                    > USED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2125 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1738 IN MAIN.asm
                    > USED AT LINE 1868 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 2015 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2011 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 457 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 1774 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1265 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
                    > USED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1345 IN MAIN.asm
                    > USED AT LINE 1358 IN MAIN.asm
                    > USED AT LINE 1403 IN MAIN.asm
                    > USED AT LINE 1414 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
                    > USED AT LINE 1432 IN MAIN.asm
                    > USED AT LINE 1445 IN MAIN.asm
                    > USED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 1751 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
                    > USED AT LINE 1869 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2023 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 408 IN MAIN.asm
                    > USED AT LINE 442 IN MAIN.asm
                    > USED AT LINE 446 IN MAIN.asm
                    > USED AT LINE 499 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
                    > USED AT LINE 600 IN MAIN.asm
                    > USED AT LINE 603 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1085 IN MAIN.asm
                    > USED AT LINE 1087 IN MAIN.asm
                    > USED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 1150 IN MAIN.asm
                    > USED AT LINE 1474 IN MAIN.asm
                    > USED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1480 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
                    > USED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1755 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
VPOINTER:           23F2 DEFINED AT LINE 45 IN ram.asm
                    > USED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 293 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 482 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
                    > USED AT LINE 1765 IN MAIN.asm
VREMAIN:            23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 744 IN MAIN.asm
                    > USED AT LINE 1709 IN MAIN.asm
VSAVEDIP:           23F6 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 1997 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
VSAVEDSP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2146 IN MAIN.asm
VSAVEDNEXT:         23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2147 IN MAIN.asm
VSAVEDBP:           23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2000 IN MAIN.asm
                    > USED AT LINE 2148 IN MAIN.asm
VCHECKSUM:          23FE DEFINED AT LINE 52 IN ram.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 401 IN MAIN.asm
                    > USED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 595 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
                    > USED AT LINE 613 IN MAIN.asm
                    > USED AT LINE 657 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 845 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 894 IN MAIN.asm
                    > USED AT LINE 901 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1475 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
                    > USED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1573 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
                    > USED AT LINE 1563 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
VHASHSTR:           2406 DEFINED AT LINE 59 IN ram.asm
TBPTR:              2408 DEFINED AT LINE 60 IN ram.asm
TITLEBUF:           240A DEFINED AT LINE 62 IN ram.asm
                    > USED AT LINE 1986 IN MAIN.asm
                    > USED AT LINE 2005 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
HEAP:               241E DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
                    > USED AT LINE 1742 IN MAIN.asm
