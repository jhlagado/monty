0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 C8 0D               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                             ; z80_RST8    equ     $CF
00C9                             ; **************************************************************************
00C9                             ; Page 0  Initialisation
00C9                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; vDataWidth in bytes of array operations (default 1 byte)
0182   0A 00                  DW   10   ; vNumBase = 10
0184   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
0186   00 22                  DW   BUF   ; vBUFPtr pointer into BUF
0188   5C 0E                  DW   next   ; nNext
018A   1C 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
018C   00 00                  DW   0   ; vRecur
018E   00 00                  DW   0   ; unused
0190                          ALIGN   $100   
0200                OPCODES:      ; still available ` ~ _ \
0200   87                     DB   lsb(nop_)   ; SP
0201   33                     DB   lsb(bang_)   ; !
0202   53                     DB   lsb(dquote_)   ; "
0203   47                     DB   lsb(hash_)   ; #
0204   09                     DB   lsb(dollar_)   ; $
0205   12                     DB   lsb(percent_)   ; %
0206   06                     DB   lsb(amper_)   ; &
0207   1B                     DB   lsb(tick_)   ; '
0208   15                     DB   lsb(lparen_)   ; (
0209   89                     DB   lsb(rparen_)   ; )
020A   30                     DB   lsb(star_)   ; *
020B   00                     DB   lsb(plus_)   ; +
020C   50                     DB   lsb(comma_)   ; ,
020D   56                     DB   lsb(minus_)   ; -
020E   21                     DB   lsb(dot_)   ; .
020F   84                     DB   lsb(slash_)   ; /	
0210   44                     DB   lsb(num_)   ; 0
0211   44                     DB   lsb(num_)   ; 1
0212   44                     DB   lsb(num_)   ; 2
0213   44                     DB   lsb(num_)   ; 3
0214   44                     DB   lsb(num_)   ; 4
0215   44                     DB   lsb(num_)   ; 5
0216   44                     DB   lsb(num_)   ; 6
0217   44                     DB   lsb(num_)   ; 7
0218   44                     DB   lsb(num_)   ; 8
0219   44                     DB   lsb(num_)   ; 9
021A   24                     DB   lsb(colon_)   ; :
021B   1E                     DB   lsb(semicolon_)   ; ;
021C   72                     DB   lsb(lt_)   ; <
021D   59                     DB   lsb(eq_)   ; =
021E   67                     DB   lsb(gt_)   ; >
021F   2D                     DB   lsb(question_)   ; ?
0220   03                     DB   lsb(at_)   ; @
0221   27                     DB   lsb(upcase_)   ; A
0222   27                     DB   lsb(upcase_)   ; B
0223   27                     DB   lsb(upcase_)   ; C
0224   27                     DB   lsb(upcase_)   ; D
0225   27                     DB   lsb(upcase_)   ; E
0226   27                     DB   lsb(upcase_)   ; F
0227   27                     DB   lsb(upcase_)   ; G
0228   27                     DB   lsb(upcase_)   ; h
0229   27                     DB   lsb(upcase_)   ; I
022A   27                     DB   lsb(upcase_)   ; J
022B   27                     DB   lsb(upcase_)   ; K
022C   27                     DB   lsb(upcase_)   ; L
022D   27                     DB   lsb(upcase_)   ; M
022E   27                     DB   lsb(upcase_)   ; N
022F   27                     DB   lsb(upcase_)   ; O
0230   27                     DB   lsb(upcase_)   ; p
0231   27                     DB   lsb(upcase_)   ; Q
0232   27                     DB   lsb(upcase_)   ; R
0233   27                     DB   lsb(upcase_)   ; S
0234   27                     DB   lsb(upcase_)   ; T
0235   27                     DB   lsb(upcase_)   ; U
0236   27                     DB   lsb(upcase_)   ; V
0237   27                     DB   lsb(upcase_)   ; W
0238   27                     DB   lsb(upcase_)   ; X
0239   27                     DB   lsb(upcase_)   ; Y
023A   27                     DB   lsb(upcase_)   ; Z
023B   0C                     DB   lsb(lbrack_)   ; [
023C   87                     DB   lsb(nop_)   ; \
023D   0F                     DB   lsb(rbrack_)   ; ]
023E   4D                     DB   lsb(caret_)   ; ^
023F   87                     DB   lsb(nop_)   ; _
0240   53                     DB   lsb(dquote_)   ; `     used for testing string   	
0241   2A                     DB   lsb(lowcase_)   ; a
0242   2A                     DB   lsb(lowcase_)   ; b
0243   2A                     DB   lsb(lowcase_)   ; c
0244   2A                     DB   lsb(lowcase_)   ; d
0245   2A                     DB   lsb(lowcase_)   ; e
0246   2A                     DB   lsb(lowcase_)   ; f
0247   2A                     DB   lsb(lowcase_)   ; g
0248   2A                     DB   lsb(lowcase_)   ; h
0249   2A                     DB   lsb(lowcase_)   ; i
024A   2A                     DB   lsb(lowcase_)   ; j
024B   2A                     DB   lsb(lowcase_)   ; k
024C   2A                     DB   lsb(lowcase_)   ; l
024D   2A                     DB   lsb(lowcase_)   ; m
024E   2A                     DB   lsb(lowcase_)   ; n
024F   2A                     DB   lsb(lowcase_)   ; o
0250   2A                     DB   lsb(lowcase_)   ; p
0251   2A                     DB   lsb(lowcase_)   ; q
0252   2A                     DB   lsb(lowcase_)   ; r
0253   2A                     DB   lsb(lowcase_)   ; s
0254   2A                     DB   lsb(lowcase_)   ; t
0255   2A                     DB   lsb(lowcase_)   ; u
0256   2A                     DB   lsb(lowcase_)   ; v
0257   2A                     DB   lsb(lowcase_)   ; w
0258   2A                     DB   lsb(lowcase_)   ; x
0259   2A                     DB   lsb(lowcase_)   ; y
025A   2A                     DB   lsb(lowcase_)   ; z
025B   15                     DB   lsb(lbrace_)   ; {
025C   4A                     DB   lsb(pipe_)   ; |
025D   18                     DB   lsb(rbrace_)   ; }
025E   87                     DB   lsb(nop_)   ; ~
025F   87                     DB   lsb(nop_)   ; DEL	
0260                             ; **********************************************************************			
0260                             ; opcode landing page
0260                             ; **********************************************************************
0260                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 8C 03               JP   plus   
0303                AT_:         
0303   C3 A9 03               JP   at   
0306                AMPER_:      
0306   C3 B3 03               JP   amper   
0309                DOLLAR_:      
0309   C3 6C 0A               JP   dollar   
030C                LBRACK_:      
030C   C3 0F 04               JP   lbrack   
030F                RBRACK_:      
030F   C3 2B 04               JP   rbrack   
0312                PERCENT_:      
0312   C3 DA 03               JP   percent   
0315                LPAREN_:      
0315                LBRACE_:      
0315   C3 08 05               JP   lbrace   
0318                RBRACE_:      
0318   C3 71 05               JP   rbrace   
031B                TICK_:       
031B   C3 F8 05               JP   tick   
031E                SEMICOLON_:      
031E   C3 E7 06               JP   semicolon   
0321                DOT_:        
0321   C3 B1 07               JP   dot   
0324                COLON_:      
0324   C3 93 04               JP   colon   
0327                UPCASE_:      
0327   C3 89 0A               JP   upcase   
032A                LOWCASE_:      
032A   C3 8E 0A               JP   lowcase   
032D                QUESTION_:      
032D   C3 A0 0A               JP   question   
0330                STAR_:       
0330   C3 23 0B               JP   star   
0333                BANG_:       ; logical invert, any non zero value
0333   03                     INC   bc   
0334   0A                     LD   a,(bc)   
0335   FE 3D                  CP   "="   
0337   20 05                  JR   nz,not   
0339   E1                     POP   hl   
033A   D1                     POP   de   
033B   C3 0D 09               JP   notequals   
033E                NOT:         
033E   0B                     DEC   bc   
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 1F                  JR   eq1   
0344                NUM_:        
0344   C3 3F 0B               JP   num   
0347                HASH_:       
0347   C3 7B 04               JP   hash   
034A                PIPE_:       
034A   C3 BE 03               JP   pipe   
034D                CARET_:      
034D   C3 CD 09               JP   caret   
0350                COMMA_:      
0350   C3 83 07               JP   comma   
0353                DQUOTE_:      
0353   C3 1C 0C               JP   dquote   
0356                MINUS_:      
0356   C3 44 0C               JP   minus   
0359                EQ_:         
0359   CD F8 0C               CALL   jumpTable   
035C   3D                     DB   "="   
035D   62 03                  DW   eq0   
035F   00                     DB   NUL   
0360   C9 04                  DW   assign   
0362                             ; inc bc
0362                             ; ld a,(bc)                   ; is it == ?
0362                             ; cp "="
0362                             ; jr z,eq0                    ; no its equality
0362                             ; dec bc
0362                             ; jp assign                   ; no its assignment
0362                EQ0:         
0362   E1                     POP   hl   
0363                EQ1:         
0363   D1                     POP   de   
0364   C3 05 09               JP   equals   
0367                GT_:         
0367   03                     INC   bc   
0368   0A                     LD   a,(bc)   
0369   FE 3E                  CP   ">"   
036B   CA 09 0C               JP   z,shiftRight   
036E   D1                     POP   de   
036F   E1                     POP   hl   
0370   18 09                  JR   lt1   
0372                LT_:         
0372   03                     INC   bc   
0373   0A                     LD   a,(bc)   
0374   FE 3C                  CP   "<"   
0376   CA F9 0B               JP   z,shiftLeft   
0379   E1                     POP   hl   
037A   D1                     POP   de   
037B                LT1:         
037B   FE 3D                  CP   "="   
037D   CA 16 09               JP   z,lessthaneq   
0380   0B                     DEC   bc   
0381   C3 1B 09               JP   lessthan   
0384                SLASH_:      
0384   C3 0D 06               JP   slash   
0387                NOP_:        
0387   DD E9                  JP   (ix)   
0389                RPAREN_:      
0389   C3 F1 0B               JP   rparen   
038C                             ;*******************************************************************
038C                             ; implementations
038C                             ;*******************************************************************
038C                PLUS:        
038C                ADD:         
038C   03                     INC   bc   
038D   0A                     LD   a,(bc)   
038E   FE 2B                  CP   "+"   ; ++ increment variable
0390   20 05                  JR   nz,add1   
0392   E1                     POP   hl   
0393   23                     INC   hl   
0394   C3 CB 04               JP   assign0   
0397                ADD1:        
0397   0B                     DEC   bc   
0398   D1                     POP   de   ; second term
0399   E1                     POP   hl   ; first term
039A   19                     ADD   hl,de   
039B                ADD3:        
039B   03                     INC   bc   
039C   0A                     LD   a,(bc)   
039D   FE 3D                  CP   "="   
039F   CA A6 03               JP   z,add4   
03A2   0B                     DEC   bc   
03A3   E5                     PUSH   hl   
03A4   DD E9                  JP   (ix)   
03A6                ADD4:        
03A6   C3 CB 04               JP   assign0   
03A9                             ; @ addr
03A9                             ; -- ptr
03A9                AT:          
03A9                ADDR:        
03A9   ED 5B F4 23            LD   de,(vPointer)   
03AD   21 F4 23               LD   hl,vPointer   
03B0   C3 D9 0C               JP   variable   
03B3                AMPER:       
03B3                AND:         
03B3   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B4   E1                     POP   hl   
03B5   7B                     LD   a,e   
03B6   A5                     AND   l   
03B7   6F                     LD   l,a   
03B8   7A                     LD   a,d   
03B9   A4                     AND   h   
03BA                AND1:        
03BA   67                     LD   h,a   
03BB   E5                     PUSH   hl   
03BC   DD E9                  JP   (ix)   
03BE                PIPE:        
03BE   C3 C1 03               JP   or   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F0                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   67                     LD   h,a   
03D2   E5                     PUSH   hl   
03D3   DD E9                  JP   (ix)   
03D5                INVERT:      ; Bitwise INVert the top member of the stack
03D5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D8   18 F1                  JR   xor1   
03DA                             ; %a .. %z
03DA                             ; -- value
03DA                             ; returns value of arg
03DA                PERCENT:      
03DA                ARG:         
03DA   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DD   FD 56 05               LD   d,(iy+5)   
03E0   EB                     EX   de,hl   
03E1   7D                     LD   a,l   ; arg_list* == null, skip
03E2   B4                     OR   h   
03E3   28 1A                  JR   z,arg0a   
03E5   23                     INC   hl   ; a = num_args, hl = arg_list*
03E6   7E                     LD   a,(hl)   
03E7   23                     INC   hl   
03E8   B7                     OR   a   
03E9   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EB   5F                     LD   e,a   ; e = a = num_args
03EC   03                     INC   bc   ; a = next char = dollar_name
03ED   0A                     LD   a,(bc)   
03EE   C5                     PUSH   bc   ; save IP
03EF   43                     LD   b,e   ; b = e = num_args
03F0   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F3   FD 56 03               LD   d,(iy+3)   
03F6                ARG0:        
03F6   1B                     DEC   de   ; a = dollar_name, de = next arg*
03F7   1B                     DEC   de   
03F8   BE                     CP   (hl)   
03F9   28 09                  JR   z,arg1   
03FB   23                     INC   hl   ; hl = next arg_list*
03FC   10 F8                  DJNZ   arg0   
03FE   C1                     POP   bc   ; no match, restore IP
03FF                ARG0A:       
03FF   11 00 00               LD   de,0   ; return 0
0402   18 08                  JR   arg1a   
0404                ARG1:        
0404   C1                     POP   bc   ; restore IP
0405   EB                     EX   de,hl   ; hl = arg*
0406   22 F4 23               LD   (vPointer),hl   ; store arg* in setter
0409   5E                     LD   e,(hl)   
040A   23                     INC   hl   
040B   56                     LD   d,(hl)   ; de = arg
040C                ARG1A:       
040C   D5                     PUSH   de   ; push arg
040D   DD E9                  JP   (ix)   
040F                LBRACK:      
040F                ARRAYSTART:      
040F   11 00 00               LD   de,0   ; create stack frame
0412   D5                     PUSH   de   ; push null for IP
0413   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0416   FD 56 05               LD   d,(iy+5)   ; 
0419   D5                     PUSH   de   ; 
041A   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
041D   FD 56 03               LD   d,(iy+3)   ; 
0420   D5                     PUSH   de   ; 
0421   FD E5                  PUSH   iy   ; push BP
0423   FD 21 00 00            LD   iy,0   ; BP = SP
0427   FD 39                  ADD   iy,sp   
0429   DD E9                  JP   (ix)   
042B                RBRACK:      
042B                ARRAYEND:      
042B   FD 54                  LD   d,iyh   ; de = BP
042D   FD 5D                  LD   e,iyl   
042F   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0433   62 6B                  LD   hl,de   ; hl = de = BP
0435   B7                     OR   a   
0436   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
0438   CB 3C                  SRL   h   ; 
043A   CB 1D                  RR   l   
043C   44 4D                  LD   bc,hl   ; bc = count
043E   2A F0 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0441   71                     LD   (hl),c   ; write num items in length word
0442   23                     INC   hl   
0443   70                     LD   (hl),b   
0444   23                     INC   hl   ; hl = array[0], bc = count
0445                             ; de = BP, hl = array[0], bc = count
0445   18 15                  JR   arrayEnd3   
0447                ARRAYEND1:      
0447   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
044A   77                     LD   (hl),a   ; write lsb of array item
044B   23                     INC   hl   ; move to msb of array item
044C   3A E6 23               LD   a,(vDataWidth)   ; vDataWidth=1?
044F   3D                     DEC   a   
0450   28 05                  JR   z,arrayEnd2   
0452   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0455   77                     LD   (hl),a   ; write msb of array item
0456   23                     INC   hl   ; move to next word in array
0457                ARRAYEND2:      
0457   FD 2B                  DEC   iy   ; move to next word on stack
0459   FD 2B                  DEC   iy   
045B   0B                     DEC   bc   ; dec items count
045C                ARRAYEND3:      
045C   79                     LD   a,c   ; if not zero loop
045D   B0                     OR   b   
045E   20 E7                  JR   nz,arrayEnd1   
0460   EB                     EX   de,hl   ; de = end of array, hl = BP
0461   F9                     LD   sp,hl   ; sp = BP
0462   E1                     POP   hl   ; de = end of array, hl = old BP
0463   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0464   FD 62                  LD   iyh,d   
0466   FD 6B                  LD   iyl,e   
0468   D1                     POP   de   ; pop arg_list (discard)
0469   D1                     POP   de   ; pop first_arg* (discard)
046A   D1                     POP   de   ; pop IP (discard)
046B   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = array[-2]
046F   13                     INC   de   
0470   13                     INC   de   
0471   D5                     PUSH   de   ; return array[0]
0472   22 F0 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0475   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0479   DD E9                  JP   (ix)   
047B                             ; index of an array, based on vDataWidth
047B                             ; array num -- value    ; also sets vPointer to address
047B                HASH:        
047B                ARRAYINDEX:      
047B   E1                     POP   hl   ; hl = index
047C   D1                     POP   de   ; de = array
047D   3A E6 23               LD   a,(vDataWidth)   ; a = data width
0480   3D                     DEC   a   
0481   28 01                  JR   z,arrayIndex1   
0483                ARRAYINDEX0:      
0483   29                     ADD   hl,hl   ; if data width = 2 then double
0484                ARRAYINDEX1:      
0484   19                     ADD   hl,de   ; add addr
0485   22 F4 23               LD   (vPointer),hl   ; store address in setter
0488   16 00                  LD   d,0   
048A   5E                     LD   e,(hl)   
048B   B7                     OR   a   ; check data width again
048C   28 02                  JR   z,arrayIndex2   
048E   23                     INC   hl   
048F   56                     LD   d,(hl)   
0490                ARRAYINDEX2:      
0490   D5                     PUSH   de   
0491   DD E9                  JP   (ix)   
0493                             ; arg_list - parses input (ab:c)
0493                             ; names after the : represent uninitialised locals
0493                             ; return values are the state of the stack after the block ends
0493                             ; format: numLocals totNumArgs argChars...
0493                COLON:       
0493                ARGLIST:      
0493   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0496   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0499   E5                     PUSH   hl   ; save start of arg_list
049A   23                     INC   hl   ; skip length fields to start of string
049B   23                     INC   hl   
049C   03                     INC   bc   ; point to next char
049D                ARGLIST1:      
049D   0A                     LD   a,(bc)   
049E   FE 3A                  CP   ":"   ; ":" switches from args to locals
04A0   20 03                  JR   nz,arglist1a   
04A2   14                     INC   d   ; non zero value local count acts as flag
04A3   18 10                  JR   arglist3   
04A5                ARGLIST1A:      
04A5   FE 61                  CP   "a"   ; < "a" terminates arg_list
04A7   38 0F                  JR   c,arglist4   
04A9   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04AB   30 0B                  JR   nc,arglist4   
04AD                ARGLIST2:      
04AD   77                     LD   (hl),a   
04AE   23                     INC   hl   
04AF   1C                     INC   e   ; increase arg count
04B0   AF                     XOR   a   
04B1   B2                     OR   d   
04B2   28 01                  JR   z,arglist3   
04B4   14                     INC   d   ; if d > 0 increase local count
04B5                ARGLIST3:      
04B5   03                     INC   bc   ; point to next char
04B6   18 E5                  JR   arglist1   
04B8                ARGLIST4:      
04B8   0B                     DEC   bc   
04B9   AF                     XOR   a   
04BA   B2                     OR   d   
04BB   28 01                  JR   z,arglist5   
04BD   15                     DEC   d   ; remove initial inc
04BE                ARGLIST5:      
04BE   23                     INC   hl   
04BF   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04C2   E1                     POP   hl   ; hl = start of arg_list
04C3   E5                     PUSH   hl   ; return start of arg_list
04C4   72                     LD   (hl),d   ; write number of locals at start - 1
04C5   23                     INC   hl   
04C6   73                     LD   (hl),e   ; write number of args + locals at start - 2
04C7   DD E9                  JP   (ix)   
04C9                             ; value _oldValue --            ; uses address in vPointer
04C9                ASSIGN:      
04C9   E1                     POP   hl   ; discard last accessed value
04CA   E1                     POP   hl   ; hl = new value
04CB                ASSIGN0:      
04CB   EB                     EX   de,hl   ; de = new value
04CC                ASSIGNX:      
04CC   2A F4 23               LD   hl,(vPointer)   
04CF   73                     LD   (hl),e   
04D0   3A E6 23               LD   a,(vDataWidth)   
04D3   3D                     DEC   a   ; is it byte?
04D4   28 02                  JR   z,assign1   
04D6   23                     INC   hl   
04D7   72                     LD   (hl),d   
04D8                ASSIGN1:      
04D8   DD E9                  JP   (ix)   
04DA                             ; /ab absolute
04DA                             ; num -- num
04DA                ABSOLUTE:      
04DA   E1                     POP   hl   
04DB   CB 7C                  BIT   7,h   
04DD   C8                     RET   z   
04DE   AF                     XOR   a   
04DF   95                     SUB   l   
04E0   6F                     LD   l,a   
04E1   9F                     SBC   a,a   
04E2   94                     SUB   h   
04E3   67                     LD   h,a   
04E4   E5                     PUSH   hl   
04E5   DD E9                  JP   (ix)   
04E7                             ; /ad addrOf
04E7                             ; char -- addr
04E7                ADDROF:      
04E7   E1                     POP   hl   ; a = char
04E8   7D                     LD   a,l   
04E9   FE 7B                  CP   "z"+1   ; if a > z then exit
04EB   30 19                  JR   nc,addrOf2   
04ED   D6 41                  SUB   "A"   ; a - 65
04EF   38 15                  JR   c,addrOf2   ; if < A then exit
04F1   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
04F3   38 06                  JR   c,addrOf1   
04F5   D6 06                  SUB   "a"-("Z"+1)   
04F7   FE 1A                  CP   "Z"-"A"+1   
04F9   38 0B                  JR   c,addrOf2   ; if < a then exit
04FB                ADDROF1:      
04FB   87                     ADD   a,a   ; double a
04FC   21 00 23               LD   hl,VARS   ; hl = VARS + a
04FF   85                     ADD   a,l   
0500   6F                     LD   l,a   
0501   3E 00                  LD   a,0   
0503   8C                     ADC   a,h   
0504   67                     LD   h,a   
0505   E5                     PUSH   hl   
0506                ADDROF2:      
0506   DD E9                  JP   (ix)   
0508                LBRACE:      
0508                BLOCKSTART:      
0508   C5                     PUSH   bc   ; return pointer to first { of block
0509   03                     INC   bc   
050A   16 01                  LD   d,1   ; nesting: count first parenthesis
050C                BLOCKSTART1:      ; Skip to end of definition
050C   0A                     LD   a,(bc)   ; Get the next character
050D   03                     INC   bc   ; Point to next character
050E   FE 21                  CP   " " + 1   ; ignore whitespace
0510   38 FA                  JR   c,blockStart1   
0512   FE 29                  CP   ")"   
0514   28 2D                  JR   z,blockStart4   
0516   FE 7D                  CP   "}"   
0518   28 29                  JR   z,blockStart4   
051A   FE 5D                  CP   "]"   
051C   28 25                  JR   z,blockStart4   
051E   FE 28                  CP   "("   
0520   28 16                  JR   z,blockStart2   
0522   FE 7B                  CP   "{"   
0524   28 12                  JR   z,blockStart2   
0526   FE 5B                  CP   "["   
0528   28 0E                  JR   z,blockStart2   
052A   FE 27                  CP   "'"   
052C   28 0D                  JR   z,blockStart3   
052E   FE 60                  CP   "`"   
0530   28 09                  JR   z,blockStart3   
0532   FE 22                  CP   DQ   
0534   28 05                  JR   z,blockStart3   
0536   18 D4                  JR   blockStart1   
0538                BLOCKSTART2:      
0538   14                     INC   d   
0539   18 D1                  JR   blockStart1   
053B                BLOCKSTART3:      
053B   3E 80                  LD   a,$80   
053D   AA                     XOR   d   
053E   57                     LD   d,a   
053F   20 CB                  JR   nz,blockStart1   
0541   18 03                  JR   blockStart5   
0543                BLOCKSTART4:      
0543   15                     DEC   d   
0544   20 C6                  JR   nz,blockStart1   ; get the next element
0546                BLOCKSTART5:      
0546   60 69                  LD   hl,bc   ; hl = IP
0548   11 1C 24               LD   de,HEAP   ; is IP pointing to object in heap
054B   B7                     OR   a   ; IP - HEAP
054C   ED 52                  SBC   hl,de   
054E   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0550   28 1C                  JR   z,blockStart6   
0552   60 69                  LD   hl,bc   ; hl = IP
0554   D1                     POP   de   ; de = block*
0555   ED 43 00 24            LD   (vTemp1),bc   ; save IP
0559   B7                     OR   a   ; bc = size
055A   ED 52                  SBC   hl,de   
055C   44 4D                  LD   bc,hl   
055E   EB                     EX   de,hl   ; hl = block* de = heap*
055F   ED 5B F0 23            LD   de,(vHeapPtr)   
0563   D5                     PUSH   de   ; return hblock*
0564   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0566   ED 53 F0 23            LD   (vHeapPtr),de   ; heap* += size
056A   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
056E                BLOCKSTART6:      
056E   0B                     DEC   bc   ; balanced, exit
056F   DD E9                  JP   (ix)   
0571                RBRACE:      
0571                BLOCKEND:      
0571   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0574   FD 56 01               LD   d,(iy+1)   
0577   ED 53 00 24            LD   (vTemp1),de   
057B   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
057E   FD 56 07               LD   d,(iy+7)   
0581   ED 53 02 24            LD   (vTemp2),de   
0585   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0588   FD 56 03               LD   d,(iy+3)   
058B   EB                     EX   de,hl   
058C   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
058F   FD 56 01               LD   d,(iy+1)   
0592   13                     INC   de   ; for carry flag <=
0593   B7                     OR   a   
0594   ED 52                  SBC   hl,de   
0596   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0598   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
059A   FD 5D                  LD   e,iyl   
059C   21 08 00               LD   hl,8   
059F   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
05A0   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
05A1   18 0C                  JR   blockEnd2   
05A3                BLOCKEND1:      ; same scope
05A3   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
05A6   FD 56 03               LD   d,(iy+3)   
05A9   EB                     EX   de,hl   
05AA   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
05AC   FD 5D                  LD   e,iyl   
05AE   EB                     EX   de,hl   
05AF                BLOCKEND2:      
05AF   44 4D                  LD   bc,hl   ; bc = hl = BP
05B1   B7                     OR   a   ; hl = BP - SP = count
05B2   ED 72                  SBC   hl,sp   
05B4   7D                     LD   a,l   
05B5   B4                     OR   h   
05B6   28 09                  JR   z,blockEnd3   
05B8   C5                     PUSH   bc   ; bc = count, hl = BP
05B9   44 4D                  LD   bc,hl   
05BB   E1                     POP   hl   
05BC   2B                     DEC   hl   ; hl = BP-1
05BD   1B                     DEC   de   ; de = args*-1
05BE   ED B8                  LDDR      
05C0   13                     INC   de   
05C1                BLOCKEND3:      
05C1   EB                     EX   de,hl   ; sp = de = new tos*
05C2   F9                     LD   sp,hl   
05C3   ED 4B 02 24            LD   bc,(vTemp2)   
05C7   FD 2A 00 24            LD   iy,(vTemp1)   
05CB   ED 5B F2 23            LD   de,(vRecur)   ; de = recur vector
05CF   7B                     LD   a,e   ; check for NUL
05D0   B2                     OR   d   
05D1   20 02                  JR   nz,blockEnd4   
05D3   DD E9                  JP   (ix)   
05D5                BLOCKEND4:      
05D5   21 00 00               LD   hl,0   ; clear recur vector
05D8   22 F2 23               LD   (vRecur),hl   
05DB   C3 CE 09               JP   go1   ; execute de
05DE                             ; /br break from loop
05DE                             ; --
05DE                BREAK:       
05DE   E1                     POP   hl   
05DF   7D                     LD   a,l   
05E0   B4                     OR   h   
05E1   28 02                  JR   z,break1   
05E3   DD E9                  JP   (ix)   
05E5                BREAK1:      
05E5   FD 5D                  LD   e,iyl   ; get block* just under stack frame
05E7   FD 54                  LD   d,iyh   
05E9   21 08 00               LD   hl,8   
05EC   19                     ADD   hl,de   
05ED   23                     INC   hl   
05EE   23                     INC   hl   
05EF   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
05F2   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
05F5   C3 71 05               JP   blockEnd   
05F8                TICK:        
05F8                CHAR:        
05F8   21 00 00               LD   hl,0   ; if "" is empty or null
05FB                CHAR1:       
05FB   03                     INC   bc   ; point to next char
05FC   0A                     LD   a,(bc)   
05FD   FE 27                  CP   "'"   ; ' is the terminator
05FF   28 09                  JR   z,char3   
0601   FE 5C                  CP   $5c   ; \ is the escape
0603   20 02                  JR   nz,char2   
0605   03                     INC   bc   
0606   0A                     LD   a,(bc)   
0607                CHAR2:       
0607   6F                     LD   l,a   
0608   18 F1                  JR   char1   
060A                CHAR3:       
060A   E5                     PUSH   hl   
060B   DD E9                  JP   (ix)   
060D                SLASH:       
060D                COMMAND:      
060D   CD F8 0C               CALL   jumpTable   
0610   2F                     DB   "/"   ; // comment
0611   DE 06                  DW   comment   
0613   61                     DB   "a"   
0614   4C 06                  DW   command_a   
0616   62                     DB   "b"   
0617   58 06                  DW   command_b   
0619   63                     DB   "c"   ; /c chars
061A   D0 06                  DW   chars   
061C   64                     DB   "d"   ; /d decimal
061D   A3 07                  DW   decimal   
061F   66                     DB   "f"   
0620   64 06                  DW   command_f   
0622   68                     DB   "h"   ; /h hexadecimal
0623   AB 07                  DW   hexadecimal   
0625   69                     DB   "i"   
0626   7F 06                  DW   command_i   
0628   6B                     DB   "k"   ; /k key
0629   C4 0A                  DW   key   
062B   6C                     DB   "l"   
062C   8B 06                  DW   command_l   
062E   6D                     DB   "m"   
062F   94 06                  DW   command_m   
0631   6E                     DB   "n"   ; /n numbers
0632   D8 06                  DW   numbers   
0634   6F                     DB   "o"   ; /o output
0635   D6 0A                  DW   output   
0637   70                     DB   "p"   
0638   9D 06                  DW   command_p   
063A   72                     DB   "r"   
063B   AC 06                  DW   command_r   
063D   73                     DB   "s"   ; /s size
063E   A7 0C                  DW   size   
0640   74                     DB   "t"   ; /t true
0641   23 09                  DW   true1   
0643   76                     DB   "v"   
0644   BB 06                  DW   command_v   
0646   78                     DB   "x"   ; /x xor
0647   CA 03                  DW   xor   
0649   00                     DB   NUL   
064A   92 07                  DW   div   
064C                COMMAND_A:      
064C   CD F8 0C               CALL   jumpTable   
064F   62                     DB   "b"   ; /ab absolute
0650   DA 04                  DW   absolute   
0652   64                     DB   "d"   ; /ad address of
0653   E7 04                  DW   addrOf   
0655   00                     DB   NUL   
0656   2F 09                  DW   error1   
0658                COMMAND_B:      
0658   CD F8 0C               CALL   jumpTable   
065B   72                     DB   "r"   ; /br break
065C   DE 05                  DW   break   
065E   79                     DB   "y"   ; /by cold boot
065F   BF 0D                  DW   coldStart   
0661   00                     DB   NUL   
0662   2F 09                  DW   error1   
0664                COMMAND_F:      
0664   CD F8 0C               CALL   jumpTable   
0667   65                     DB   "e"   ; /fe forEach
0668   36 09                  DW   forEach   
066A   73                     DB   "s"   ; /fs funcSrc
066B   83 09                  DW   funcSrc   
066D   31                     DB   "1"   
066E   C4 0E                  DW   f1   
0670   32                     DB   "2"   
0671   C4 0E                  DW   f2   
0673   33                     DB   "3"   
0674   C4 0E                  DW   f3   
0676   34                     DB   "4"   
0677   C4 0E                  DW   f4   
0679   7A                     DB   "z"   
067A   BE 09                  DW   fz   
067C   00                     DB   NUL   
067D   29 09                  DW   false1   
067F                COMMAND_I:      
067F   CD F8 0C               CALL   jumpTable   
0682   6E                     DB   "n"   ; /in input
0683   B9 0A                  DW   input   
0685   76                     DB   "v"   ; /iv invert
0686   D5 03                  DW   invert   
0688   00                     DB   NUL   
0689   2F 09                  DW   error1   
068B                COMMAND_L:      
068B   CD F8 0C               CALL   jumpTable   
068E   69                     DB   "i"   ; /li literal
068F   CD 0A                  DW   literal   
0691   00                     DB   NUL   
0692   2F 09                  DW   error1   
0694                COMMAND_M:      
0694   CD F8 0C               CALL   jumpTable   
0697   70                     DB   "p"   ; /mp map
0698   DF 0A                  DW   map   
069A   00                     DB   NUL   
069B   2F 09                  DW   error1   
069D                COMMAND_P:      
069D   CD F8 0C               CALL   jumpTable   
06A0   62                     DB   "b"   ; /pb print buffer
06A1   63 0C                  DW   printBuffer   
06A3   63                     DB   "c"   ; /pc print chars
06A4   89 0C                  DW   printChars   
06A6   6B                     DB   "k"   ; /pk print stack
06A7   CB 09                  DW   printStack   
06A9   00                     DB   NUL   
06AA   2F 09                  DW   error1   
06AC                COMMAND_R:      
06AC   CD F8 0C               CALL   jumpTable   
06AF   63                     DB   "c"   ; /rc tail call optimisation
06B0   9B 0C                  DW   recur   
06B2   65                     DB   "e"   ; /re remainder
06B3   A1 0C                  DW   remain   
06B5   67                     DB   "g"   
06B6   6F 0B                  DW   rangeSrc   
06B8   00                     DB   NUL   
06B9   2F 09                  DW   error1   
06BB                COMMAND_V:      
06BB   CD F8 0C               CALL   jumpTable   
06BE   62                     DB   "b"   
06BF   BE 0C                  DW   varBufPtr   
06C1   68                     DB   "h"   
06C2   C7 0C                  DW   varHeapPtr   
06C4   74                     DB   "t"   
06C5   D0 0C                  DW   varTIBPtr   
06C7   42                     DB   "B"   
06C8   AF 0C                  DW   constBufStart   
06CA   54                     DB   "T"   
06CB   B9 0C                  DW   constTIBStart   
06CD   00                     DB   NUL   
06CE   2F 09                  DW   error1   
06D0                CHARS:       
06D0   21 01 00               LD   hl,1   
06D3                CHARS1:      
06D3   22 E6 23               LD   (vDataWidth),hl   
06D6   DD E9                  JP   (ix)   
06D8                NUMBERS:      
06D8   21 02 00               LD   hl,2   
06DB   C3 D3 06               JP   chars1   
06DE                COMMENT:      
06DE   03                     INC   bc   ; point to next char
06DF   0A                     LD   a,(bc)   
06E0   FE 20                  CP   " "   ; terminate on any char less than SP
06E2   30 FA                  JR   nc,comment   
06E4   0B                     DEC   bc   
06E5   DD E9                  JP   (ix)   
06E7                             ; ";" createFunc
06E7                             ; arg_list* block* -- func*
06E7                SEMICOLON:      
06E7                CREATEFUNC:      
06E7   ED 43 00 24            LD   (vTemp1),bc   ; save IP
06EB   E1                     POP   hl   ; hl = block*
06EC   22 02 24               LD   (vTemp2),hl   ; save block*
06EF   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
06F2   FD 56 05               LD   d,(iy+5)   
06F5   7B                     LD   a,e   ; if arg_list == null then make a func
06F6   B2                     OR   d   
06F7   20 09                  JR   nz,createFunc0   
06F9   21 00 00               LD   hl,0   ; partial_array = null
06FC   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0700   18 65                  JR   createFunc5   
0702                CREATEFUNC0:      
0702   E1                     POP   hl   ; hl = inner_arg_list*
0703   E5                     PUSH   hl   ; save inner_arg_list
0704   ED 5B F0 23            LD   de,(vHeapPtr)   ; de = compile*
0708   7E                     LD   a,(hl)   ; compile inner_num_locals
0709   4F                     LD   c,a   ; b = inner_num_locals
070A   12                     LD   (de),a   
070B   23                     INC   hl   
070C   13                     INC   de   
070D   7E                     LD   a,(hl)   ; compile inner_length
070E   12                     LD   (de),a   
070F   91                     SUB   c   ; a = inner_num args
0710   23                     INC   hl   
0711   13                     INC   de   
0712   B7                     OR   a   ; compile args if inner_length > 0
0713   28 05                  JR   z,createFunc1   
0715   4F                     LD   c,a   ; bc = a
0716   06 00                  LD   b,0   
0718   ED B0                  LDIR      
071A                CREATEFUNC1:      
071A   EB                     EX   de,hl   ; hl = outer_arg_list
071B   FD 5E 04               LD   e,(iy+4)   
071E   FD 56 05               LD   d,(iy+5)   
0721   EB                     EX   de,hl   
0722   23                     INC   hl   ; a = outer_length
0723   7E                     LD   a,(hl)   
0724   23                     INC   hl   
0725   B7                     OR   a   
0726   28 05                  JR   z,createFunc2   
0728   4F                     LD   c,a   
0729   06 00                  LD   b,0   
072B   ED B0                  LDIR      ; append outer_args
072D                CREATEFUNC2:      ; a = outer_length
072D   47                     LD   b,a   ; b = a = outer_length
072E   2A F0 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0731   23                     INC   hl   
0732   7E                     LD   a,(hl)   ; add outer_length to new length
0733   80                     ADD   a,b   
0734   77                     LD   (hl),a   
0735   2B                     DEC   hl   
0736   78                     LD   a,b   ; save outer_length in a'
0737   08                     EX   af,af'   
0738   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0739   7E                     LD   a,(hl)   ; c = a = inner_num_locals
073A   B7                     OR   a   
073B   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
073D   4F                     LD   c,a   ; c = inner_num_locals
073E   06 00                  LD   b,0   ; bc = inner_num_locals
0740   23                     INC   hl   ; a = inner_length
0741   7E                     LD   a,(hl)   
0742   91                     SUB   c   ; a = inner_num_args
0743   23                     INC   hl   ; hl = inner_arg_chars
0744   85                     ADD   a,l   ; hl += a
0745   6F                     LD   l,a   
0746   3E 00                  LD   a,0   
0748   84                     ADD   a,h   
0749   67                     LD   h,a   
074A   ED B0                  LDIR      ; append inner_locals
074C                CREATEFUNC2A:      
074C   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
074D   12                     LD   (de),a   ; compile partial_array length field
074E   13                     INC   de   
074F   AF                     XOR   a   
0750   12                     LD   (de),a   
0751   13                     INC   de   
0752   D5                     PUSH   de   ; push partial_array*
0753   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0754   FD 5E 02               LD   e,(iy+2)   
0757   FD 56 03               LD   d,(iy+3)   
075A   EB                     EX   de,hl   
075B                CREATEFUNC3:      
075B   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
075C   4E                     LD   c,(hl)   
075D   2B                     DEC   hl   
075E   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
075F   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0760   13                     INC   de   
0761   79                     LD   a,c   
0762   12                     LD   (de),a   
0763   13                     INC   de   
0764   10 F5                  DJNZ   createFunc3   ; b = outer_length
0766                CREATEFUNC4:      
0766   E1                     POP   hl   ; hl = partial_array*
0767                CREATEFUNC5:      
0767   C1                     POP   bc   ; bc = new_arg_list*
0768   D5                     PUSH   de   ; return new func*
0769   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
076A   73                     LD   (hl),e   ; compile partial_array* to func
076B   23                     INC   hl   
076C   72                     LD   (hl),d   
076D   23                     INC   hl   
076E   ED 5B 02 24            LD   de,(vTemp2)   ; de = block*
0772   73                     LD   (hl),e   ; compile block* to func
0773   23                     INC   hl   
0774   72                     LD   (hl),d   
0775   23                     INC   hl   
0776   71                     LD   (hl),c   ; compile new_arg_list* to func
0777   23                     INC   hl   
0778   70                     LD   (hl),b   
0779   23                     INC   hl   
077A   22 F0 23               LD   (vHeapPtr),hl   ; bump heap ptr
077D   ED 4B 00 24            LD   bc,(vTemp1)   ; restore IP
0781   DD E9                  JP   (ix)   
0783                             ; , discard stack item
0783                             ; x y -- x
0783                COMMA:       
0783                DISCARD:      
0783   FD 54                  LD   d,iyh   ; limit this to SP <= BP
0785   FD 5D                  LD   e,iyl   
0787   EB                     EX   de,hl   
0788   B7                     OR   a   
0789   ED 72                  SBC   hl,sp   
078B   CB 7C                  BIT   7,h   
078D   20 01                  JR   nz,discard1   
078F   E1                     POP   hl   
0790                DISCARD1:      
0790   DD E9                  JP   (ix)   
0792                DIV:         
0792   D1                     POP   de   
0793   E1                     POP   hl   
0794   C5                     PUSH   bc   ; preserve the IP
0795   44 4D                  LD   bc,hl   
0797   CD EC 08               CALL   divide   
079A   EB                     EX   de,hl   
079B   ED 53 F6 23            LD   (vRemain),de   
079F   C1                     POP   bc   
07A0   C3 9B 03               JP   add3   
07A3                DECIMAL:      
07A3   21 0A 00               LD   hl,10   
07A6                DECIMAL1:      
07A6   22 E8 23               LD   (vNumBase),hl   
07A9   DD E9                  JP   (ix)   
07AB                HEXADECIMAL:      
07AB   21 10 00               LD   hl,16   
07AE   C3 A6 07               JP   decimal1   
07B1                DOT:         
07B1   CD F8 0C               CALL   jumpTable   
07B4   61                     DB   "a"   ; .a print array
07B5   C3 07                  DW   bufferArray   
07B7   63                     DB   "c"   ; .c print char
07B8   CB 08                  DW   bufferChar   
07BA   73                     DB   "s"   ; .s print string
07BB   B1 08                  DW   bufferString   
07BD   78                     DB   "x"   ; .x print x chars
07BE   D0 08                  DW   bufferXChars   
07C0   00                     DB   NUL   ; .  print number
07C1   0C 08                  DW   bufferNumber   
07C3                          ;*Macro unroll: FUNC bufferArray, 2, "abc"
07C3                BUFFERARRAY:      
07C3   CD CD 09               CALL   go   
07C6   00 00                  DW   NUL   
07C8   D1 07                  DW   bufferArrayM_1571S1094   
07CA   CC 07                  DW   $+2   
07CC   02                     DB   2   
07CD   03 61 62 63            .PSTR   "abc"   
07D1                BUFFERARRAYM_1571S1094:      
07D1   7B 22 5B 20 22 2E 73 20 25 61 20 2F 73 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 23 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 62 72 29 5E 20 22 5D 22 2E 73 7D 00 00 .CSTR   "{",DQ,"[ ",DQ,".s %a /s%c= 0%b= (%a %b #. %b ++ %b %c </br)^ ",DQ,"]",DQ,".s}",0   
080C                             ; /bd buffer decimal
080C                             ; value --
080C                BUFFERNUMBER:      
080C   3A E8 23               LD   a,(vNumBase)   
080F   FE 10                  CP   16   
0811   28 66                  JR   z,bufferHex   ; else falls through
0813                             ; /bd buffer decimal
0813                             ; value --
0813                BUFFERDEC:      
0813   ED 5B EC 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0817   D9                     EXX      
0818   E1                     POP   hl   ; hl = value
0819   CD 2D 08               CALL   bufferDec0   
081C   D9                     EXX      ; de = buffer*' bc = IP
081D   3E 20                  LD   a," "   ; append space to buffer
081F   12                     LD   (de),a   
0820   1C                     INC   e   ; buffer*++, wraparound
0821   CC E1 0C               CALL   z,flushBuffer   
0824   2A EC 23               LD   hl,(vBufPtr)   ; hl = buffer*
0827   ED 53 EC 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
082B   DD E9                  JP   (ix)   
082D                             ; hl = value
082D                             ; de' = buffer*
082D                             ; a, bc, de, hl destroyed
082D                BUFFERDEC0:      
082D   CB 7C                  BIT   7,h   
082F   28 0C                  JR   z,bufferDec1   
0831   D9                     EXX      
0832   3E 2D                  LD   a,"-"   
0834   12                     LD   (de),a   
0835   13                     INC   de   
0836   D9                     EXX      
0837   AF                     XOR   a   
0838   95                     SUB   l   
0839   6F                     LD   l,a   
083A   9F                     SBC   a,a   
083B   94                     SUB   h   
083C   67                     LD   h,a   
083D                BUFFERDEC1:      
083D   0E 00                  LD   c,0   ; leading zeros flag = false
083F   11 F0 D8               LD   de,-10000   
0842   CD 5D 08               CALL   bufferDec2   
0845   11 18 FC               LD   de,-1000   
0848   CD 5D 08               CALL   bufferDec2   
084B   11 9C FF               LD   de,-100   
084E   CD 5D 08               CALL   bufferDec2   
0851   1E F6                  LD   e,-10   
0853   CD 5D 08               CALL   bufferDec2   
0856   0C                     INC   c   ; flag = true for at least digit
0857   1E FF                  LD   e,-1   
0859   CD 5D 08               CALL   bufferDec2   
085C   C9                     RET      
085D                BUFFERDEC2:      
085D   06 2F                  LD   b,"0"-1   
085F                BUFFERDEC3:      
085F   04                     INC   b   
0860   19                     ADD   hl,de   
0861   38 FC                  JR   c,bufferDec3   
0863   ED 52                  SBC   hl,de   
0865   3E 30                  LD   a,"0"   
0867   B8                     CP   b   
0868   20 05                  JR   nz,bufferDec4   
086A   AF                     XOR   a   
086B   B1                     OR   c   
086C   C8                     RET   z   
086D   18 01                  JR   bufferDec5   
086F                BUFFERDEC4:      
086F   0C                     INC   c   
0870                BUFFERDEC5:      
0870   78                     LD   a,b   
0871   D9                     EXX      
0872   12                     LD   (de),a   
0873   1C                     INC   e   
0874   CC E1 0C               CALL   z,flushBuffer   
0877   D9                     EXX      
0878   C9                     RET      
0879                             ; /bh buffer hex
0879                             ; value --
0879                BUFFERHEX:      
0879   E1                     POP   hl   ; hl = value
087A   ED 5B EC 23            LD   de,(vBufPtr)   
087E   3E 24                  LD   a,"$"   ; # prefix
0880   12                     LD   (de),a   
0881   1C                     INC   e   ; buffer*++, wraparound
0882   CC E1 0C               CALL   z,flushBuffer   
0885   7C                     LD   a,h   
0886   CD 9A 08               CALL   bufferHex1   
0889   7D                     LD   a,l   
088A   CD 9A 08               CALL   bufferHex1   
088D   3E 20                  LD   a," "   ; append space to buffer
088F   12                     LD   (de),a   
0890   1C                     INC   e   ; buffer*++, wraparound
0891   CC E1 0C               CALL   z,flushBuffer   
0894   ED 53 EC 23            LD   (vBufPtr),de   
0898   DD E9                  JP   (ix)   
089A                BUFFERHEX1:      
089A   F5                     PUSH   af   
089B   1F                     RRA      
089C   1F                     RRA      
089D   1F                     RRA      
089E   1F                     RRA      
089F   CD A3 08               CALL   bufferHex2   
08A2   F1                     POP   af   
08A3                BUFFERHEX2:      
08A3   E6 0F                  AND   0x0F   
08A5   C6 90                  ADD   a,0x90   
08A7   27                     DAA      
08A8   CE 40                  ADC   a,0x40   
08AA   27                     DAA      
08AB   12                     LD   (de),a   
08AC   1C                     INC   e   ; buffer*++, wraparound
08AD   CC E1 0C               CALL   z,flushBuffer   
08B0   C9                     RET      
08B1                             ; /bs buffered string
08B1                             ; string* --
08B1                BUFFERSTRING:      
08B1   E1                     POP   hl   ; hl = string*
08B2   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
08B6   18 06                  JR   bufferString1   
08B8                BUFFERSTRING0:      
08B8   12                     LD   (de),a   ; a -> buffer*
08B9   1C                     INC   e   ; buffer*++, wraparound
08BA   CC E1 0C               CALL   z,flushBuffer   
08BD   23                     INC   hl   
08BE                BUFFERSTRING1:      
08BE   7E                     LD   a,(hl)   ; a <- string*
08BF   B7                     OR   a   ; if NUL exit loop
08C0   20 F6                  JR   nz,bufferString0   
08C2   2A EC 23               LD   hl,(vBufPtr)   ; de = buffer*' hl = buffer*
08C5   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*' in pointer
08C9   DD E9                  JP   (ix)   
08CB                             ; /bc buffer char
08CB                             ; char --
08CB                BUFFERCHAR:      
08CB   21 01 00               LD   hl,1   
08CE   18 01                  JR   bufferXChars0   
08D0                             ; /bx buffered x chars
08D0                             ; char length --
08D0                BUFFERXCHARS:      
08D0   E1                     POP   hl   ; hl = length
08D1                BUFFERXCHARS0:      
08D1   D1                     POP   de   ; a' = char
08D2   7B                     LD   a,e   
08D3   08                     EX   af,af'   
08D4   ED 5B EC 23            LD   de,(vBufPtr)   ; de = buffer*
08D8   18 08                  JR   bufferXChars2   
08DA                BUFFERXCHARS1:      
08DA   08                     EX   af,af'   
08DB   12                     LD   (de),a   
08DC   08                     EX   af,af'   
08DD   1C                     INC   e   ; buffer*++, wraparound
08DE   CC E1 0C               CALL   z,flushBuffer   
08E1   2B                     DEC   hl   
08E2                BUFFERXCHARS2:      
08E2   7D                     LD   a,l   
08E3   B4                     OR   h   
08E4   20 F4                  JR   nz,bufferXChars1   
08E6   ED 53 EC 23            LD   (vBufPtr),de   ; save buffer*'
08EA   DD E9                  JP   (ix)   
08EC                             ; division subroutine.
08EC                             ; bc: divisor, de: dividend, hl: remainder
08EC                DIVIDE:      
08EC   21 00 00               LD   hl,0   ; zero the remainder
08EF   3E 10                  LD   a,16   ; loop counter
08F1                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
08F1   CB 21                  SLA   c   
08F3   CB 10                  RL   b   
08F5   ED 6A                  ADC   hl,hl   
08F7   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
08F9   38 03                  JR   c,divide2   
08FB   0C                     INC   c   
08FC   18 01                  JR   divide3   
08FE                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
08FE   19                     ADD   hl,de   
08FF                DIVIDE3:      
08FF   3D                     DEC   a   
0900   20 EF                  JR   nz,divide1   
0902   50 59                  LD   de,bc   ; result from bc to de
0904   C9                     RET      
0905                             ; hl = value1, de = value2
0905                             ; hl = result
0905                EQUALS:      
0905   B7                     OR   a   ; reset the carry flag
0906   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0908   28 19                  JR   z,true1   
090A   C3 29 09               JP   false1   
090D                NOTEQUALS:      
090D   B7                     OR   a   ; reset the carry flag
090E   ED 52                  SBC   hl,de   
0910   C2 23 09               JP   nz,true1   
0913   C3 29 09               JP   false1   
0916                             ; hl = value1 de = value2
0916                             ; hl = result
0916                LESSTHANEQ:      
0916   B7                     OR   a   
0917   ED 52                  SBC   hl,de   
0919   18 05                  JR   lessthan1   
091B                             ; hl = value1 de = value2
091B                             ; hl = result
091B                LESSTHAN:      
091B   B7                     OR   a   
091C   ED 52                  SBC   hl,de   
091E   28 09                  JR   z,false1   
0920                LESSTHAN1:      
0920   FA 29 09               JP   m,false1   
0923                TRUE1:       
0923   21 FF FF               LD   hl,TRUE   
0926   E5                     PUSH   hl   
0927   DD E9                  JP   (ix)   
0929                NULL1:       
0929                FALSE1:      
0929   21 00 00               LD   hl,FALSE   
092C   E5                     PUSH   hl   
092D   DD E9                  JP   (ix)   
092F                ERROR1:      
092F   21 01 00               LD   hl,1   ; error 1: unknown command
0932   E5                     PUSH   hl   
0933   C3 7C 0E               JP   error   
0936                             ; /fe forEach
0936                             ; src proc --
0936                          ;*Macro unroll: FUNC forEach, 1, "spT"
0936                FOREACH:      
0936   CD CD 09               CALL   go   
0939   00 00                  DW   NUL   
093B   44 09                  DW   forEachM_1793S1334   
093D   3F 09                  DW   $+2   
093F   01                     DB   1   
0940   03 73 70 54            .PSTR   "spT"   
0944                FOREACHM_1793S1334:      
0944   7B                     DB   "{"   
0945   5B 30 5D 25 54 3D      DB   "[0]%T="   
094B   3A 64 74 7B            DB   ":dt{"   ; return talkback to receive data
094F   32 25 74 21 3D 2F 62 72 DB   "2%t!=/br"   ; break if type = 2
0957   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
095C   7B 25 64 20 25 54 30 23 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0#=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
096E   3F 3F                  DB   "??"   ; ifte:
0970   30 20 31 20 25 54 30 23 5E DB   "0 1 %T0#^"   ; 0 or 1: get next src data item
0979   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0981   7D                     DB   "}"   
0982   00                     DB   0   
0983                             ; ; /fs funcSrc
0983                             ; ; func -- src
0983                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0983                FUNCSRC:      ; :f func or block
0983   CD CD 09               CALL   go   
0986   00 00                  DW   NUL   
0988   8F 09                  DW   funcSrcM_1807S1349   
098A   8C 09                  DW   $+2   
098C   00                     DB   0   
098D   01 66                  .PSTR   "f"   
098F                FUNCSRCM_1807S1349:      
098F   7B                     DB   "{"   
0990   3A 6B 74 7B            DB   ":kt{"   ; :kt sink, type
0994   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if t != 0
099C   3A 64 74 7B            DB   ":dt{"   
09A0   31 25 74 3D 3D 2F 62 72 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/br %f^ 1 %k^"   ; if t == 1 send data to sink
09B2   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
09BA   7D 3B                  DB   "};"   
09BC   7D                     DB   "}"   
09BD   00                     DB   0   
09BE                FZ:          
09BE   21 00 21               LD   hl,STACK   
09C1   ED 72                  SBC   hl,sp   
09C3   CB 3C                  SRL   h   
09C5   CB 1D                  RR   l   
09C7   E5                     PUSH   hl   
09C8   C3 0C 08               JP   bufferNumber   
09CB                             ; /pk print stack
09CB                             ; --
09CB                PRINTSTACK:      
09CB                             ;     ld (vTemp1),bc
09CB                             ;     call printStr
09CB                             ;     .cstr "=> "
09CB                             ;     ld hl,STACK
09CB                             ;     sbc hl,sp
09CB                             ;     srl h
09CB                             ;     rr l
09CB                             ;     ld bc,hl
09CB                             ;     ld hl,STACK
09CB                             ;     jr printStack2
09CB                             ; printStack1:
09CB                             ;     dec bc
09CB                             ;     dec hl
09CB                             ;     ld d,(hl)
09CB                             ;     dec hl
09CB                             ;     ld e,(hl)
09CB                             ;     ex de,hl
09CB                             ;     call prthex
09CB                             ;     ex de,hl
09CB                             ;     ld a," "
09CB                             ;     call putchar
09CB                             ; printStack2:
09CB                             ;     ld a,c
09CB                             ;     or b
09CB                             ;     jr nz,printStack1
09CB                             ;     call prompt
09CB                             ;     ld bc,(vTemp1)
09CB   DD E9                  JP   (ix)   
09CD                             ; execute a block of code which ends with }
09CD                             ; creates a root scope if BP == stack
09CD                             ; else uses outer scope
09CD                CARET:       
09CD                GO:          
09CD   D1                     POP   de   ; de = block*
09CE                GO1:         
09CE   7B                     LD   a,e   ; if block* == null, exit
09CF   B2                     OR   d   
09D0   20 02                  JR   nz,go2   
09D2   DD E9                  JP   (ix)   
09D4                GO2:         
09D4   1A                     LD   a,(de)   
09D5   FE 7B                  CP   "{"   
09D7   28 06                  JR   z,goBlock   
09D9   FE 28                  CP   "("   
09DB   C2 12 0A               JP   nz,goFunc   
09DE   D5                     PUSH   de   ; push de just before stack frame
09DF                GOBLOCK:      
09DF   ED 53 00 24            LD   (vTemp1),de   ; save de
09E3   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
09E6   FD 54                  LD   d,iyh   
09E8   FD 5D                  LD   e,iyl   
09EA   B7                     OR   a   ; if stack* == BP then this is the root_scope
09EB   ED 52                  SBC   hl,de   
09ED   ED 5B 00 24            LD   de,(vTemp1)   ; restore de
09F1   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
09F2   B4                     OR   h   
09F3   3E 00                  LD   a,0   
09F5   28 6A                  JR   z,goFunc8   
09F7   C5                     PUSH   bc   ; push IP
09F8   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
09FB   FD 46 05               LD   b,(iy+5)   
09FE   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0A01   FD 66 03               LD   h,(iy+3)   
0A04                GOBLOCK2:      
0A04   C5                     PUSH   bc   ; arg_list*
0A05   E5                     PUSH   hl   ; first_arg*
0A06   FD E5                  PUSH   iy   ; push BP
0A08   FD 21 00 00            LD   iy,0   ; BP = SP
0A0C   FD 39                  ADD   iy,sp   
0A0E                GOBLOCK3:      
0A0E   42 4B                  LD   bc,de   ; bc = de = block*-1
0A10   DD E9                  JP   (ix)   
0A12                GOFUNC:      ; execute func
0A12   EB                     EX   de,hl   ; hl = func*
0A13   5E                     LD   e,(hl)   ; de = partial_array*
0A14   23                     INC   hl   
0A15   56                     LD   d,(hl)   
0A16   23                     INC   hl   
0A17   7B                     LD   a,e   ; if partial_array* == null skip
0A18   B2                     OR   d   
0A19   28 21                  JR   z,goFunc3   
0A1B   ED 43 00 24            LD   (vTemp1),bc   
0A1F   22 02 24               LD   (vTemp2),hl   ; save bc,hl
0A22   EB                     EX   de,hl   ; hl = partial_array*
0A23   2B                     DEC   hl   ; bc = count
0A24   46                     LD   b,(hl)   
0A25   2B                     DEC   hl   
0A26   4E                     LD   c,(hl)   
0A27   23                     INC   hl   ; hl = array data*
0A28   23                     INC   hl   
0A29   18 06                  JR   goFunc2   ; push each item on stack
0A2B                GOFUNC1:      
0A2B   5E                     LD   e,(hl)   ; de = partial item
0A2C   23                     INC   hl   
0A2D   56                     LD   d,(hl)   
0A2E   23                     INC   hl   
0A2F   D5                     PUSH   de   ; push on stack
0A30   0B                     DEC   bc   
0A31                GOFUNC2:      
0A31   79                     LD   a,c   ; if count != 0 then loop
0A32   B0                     OR   b   
0A33   20 F6                  JR   nz,goFunc1   
0A35   ED 4B 00 24            LD   bc,(vTemp1)   ; restore bc
0A39   2A 02 24               LD   hl,(vTemp2)   ; restore hl
0A3C                GOFUNC3:      
0A3C   5E                     LD   e,(hl)   ; de = block*
0A3D   23                     INC   hl   
0A3E   56                     LD   d,(hl)   
0A3F   23                     INC   hl   
0A40   ED 53 00 24            LD   (vTemp1),de   ; save block*
0A44   5E                     LD   e,(hl)   ; de = arg_list*
0A45   23                     INC   hl   
0A46   56                     LD   d,(hl)   
0A47   23                     INC   hl   
0A48   EB                     EX   de,hl   ; hl = arg_list*
0A49   ED 5B 00 24            LD   de,(vTemp1)   ; restore de = block*
0A4D   7D                     LD   a,l   ; if arg_list* == null a = 0
0A4E   B4                     OR   h   
0A4F   20 03                  JR   nz,goFunc4   
0A51   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0A52   18 0D                  JR   goFunc8   
0A54                GOFUNC4:      ; allocate locals
0A54   7E                     LD   a,(hl)   ; a = num_locals*, de = hblock* hl = arg_list*
0A55   18 03                  JR   goFunc6   
0A57                GOFUNC5:      ; loop
0A57   3B                     DEC   sp   
0A58   3B                     DEC   sp   
0A59   3D                     DEC   a   
0A5A                GOFUNC6:      
0A5A   B7                     OR   a   
0A5B   20 FA                  JR   nz,goFunc5   ; end loop
0A5D                GOFUNC7:      
0A5D   23                     INC   hl   ; a = num_args* x 2
0A5E   7E                     LD   a,(hl)   
0A5F   2B                     DEC   hl   
0A60   87                     ADD   a,a   ; a *= 2
0A61                GOFUNC8:      
0A61   C5                     PUSH   bc   ; push IP
0A62   44 4D                  LD   bc,hl   
0A64   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0A67   85                     ADD   a,l   
0A68   6F                     LD   l,a   
0A69   39                     ADD   hl,sp   
0A6A   18 98                  JR   goBlock2   
0A6C                DOLLAR:      
0A6C                HEXNUM:      
0A6C   21 00 00               LD   hl,0   ; Clear hl to accept the number
0A6F                HEXNUM1:      
0A6F   03                     INC   bc   
0A70   0A                     LD   a,(bc)   ; Get the character which is a numeral
0A71   CB 77                  BIT   6,a   ; is it uppercase alpha?
0A73   28 02                  JR   z,hexnum2   ; no a decimal
0A75   D6 07                  SUB   7   ; sub 7  to make $a - $F
0A77                HEXNUM2:      
0A77   D6 30                  SUB   $30   ; form decimal digit
0A79   DA 61 0B               JP   c,num2   
0A7C   FE 10                  CP   $0F+1   
0A7E   D2 61 0B               JP   nc,num2   
0A81   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0A82   29                     ADD   hl,hl   ; 4X
0A83   29                     ADD   hl,hl   ; 8X
0A84   29                     ADD   hl,hl   ; 16X
0A85   85                     ADD   a,l   ; add into bottom of hl
0A86   6F                     LD   l,a   
0A87   18 E6                  JR   hexnum1   
0A89                UPCASE:      
0A89   0A                     LD   a,(bc)   ; a = identifier char
0A8A   D6 41                  SUB   "A"   ; "A" = 0
0A8C   18 05                  JR   ident1   
0A8E                LOWCASE:      
0A8E   0A                     LD   a,(bc)   
0A8F   D6 61                  SUB   "a"   
0A91   C6 1A                  ADD   a,26   
0A93                IDENT1:      
0A93   87                     ADD   a,a   ; l = a * 2
0A94   6F                     LD   l,a   
0A95   26 23                  LD   h,msb(vars)   
0A97   22 F4 23               LD   (vPointer),hl   ; store address in setter
0A9A   5E                     LD   e,(hl)   
0A9B   23                     INC   hl   
0A9C   56                     LD   d,(hl)   
0A9D   D5                     PUSH   de   
0A9E   DD E9                  JP   (ix)   
0AA0                             ; if
0AA0                             ; condition then -- value
0AA0                QUESTION:      
0AA0                IF:          
0AA0   03                     INC   bc   
0AA1   0A                     LD   a,(bc)   
0AA2   FE 3F                  CP   "?"   
0AA4   28 06                  JR   z,ifte   
0AA6   0B                     DEC   bc   
0AA7   11 00 00               LD   de,NUL   ; NUL pointer for else
0AAA   18 01                  JR   ifte1   
0AAC                             ; ifte
0AAC                             ; condition then else -- value
0AAC                IFTE:        
0AAC   D1                     POP   de   ; de = else
0AAD                IFTE1:       
0AAD   E1                     POP   hl   ; hl = then
0AAE   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0AAF   7C                     LD   a,h   
0AB0   B5                     OR   l   
0AB1   E1                     POP   hl   ; hl = then
0AB2   CA CE 09               JP   z,go1   ; if z de = else
0AB5   EB                     EX   de,hl   ; condition = false, de = then
0AB6   C3 CE 09               JP   go1   
0AB9                             ; Z80 port input
0AB9                             ; port -- value
0AB9                INPUT:       
0AB9   E1                     POP   hl   
0ABA   59                     LD   e,c   ; save IP
0ABB   4D                     LD   c,l   
0ABC   ED 68                  IN   l,(c)   
0ABE   26 00                  LD   h,0   
0AC0   4B                     LD   c,e   ; restore IP
0AC1   E5                     PUSH   hl   
0AC2   DD E9                  JP   (ix)   
0AC4                KEY:         
0AC4   CD 81 00               CALL   getchar   
0AC7   26 00                  LD   h,0   
0AC9   6F                     LD   l,a   
0ACA   E5                     PUSH   hl   
0ACB   DD E9                  JP   (ix)   
0ACD                             ; /li literal
0ACD                             ; low level operation
0ACD                             ; reads the next two bytes and
0ACD                             ; pushes a word on the stack
0ACD                             ; -- value
0ACD                LITERAL:      
0ACD   03                     INC   bc   
0ACE   0A                     LD   a,(bc)   
0ACF   6F                     LD   l,a   
0AD0   03                     INC   bc   
0AD1   0A                     LD   a,(bc)   
0AD2   67                     LD   h,a   
0AD3   E5                     PUSH   hl   
0AD4   DD E9                  JP   (ix)   
0AD6                             ; Z80 port output
0AD6                             ; value port --
0AD6                OUTPUT:      
0AD6   E1                     POP   hl   
0AD7   59                     LD   e,c   ; save IP
0AD8   4D                     LD   c,l   
0AD9   E1                     POP   hl   
0ADA   ED 69                  OUT   (c),l   
0ADC   4B                     LD   c,e   ; restore IP
0ADD   DD E9                  JP   (ix)   
0ADF                             ; /mp map
0ADF                             ; src func -- src1
0ADF                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map
0ADF                MAP:         ; map
0ADF   CD CD 09               CALL   go   
0AE2   00 00                  DW   NUL   
0AE4   EC 0A                  DW   mapM_2077S1633   
0AE6   E8 0A                  DW   $+2   
0AE8   00                     DB   0   
0AE9   02 73 66               .PSTR   "sf"   
0AEC                MAPM_2077S1633:      
0AEC   7B                     DB   "{"   
0AED   3A 6B 74 7B            DB   ":kt{"   
0AF1   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0AF9   3A 64 74 7B            DB   ":dt{"   ; call source with tb
0AFD   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0B02   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
0B0E   3F 3F 20 25 74 20 25 6B 5E DB   "?? %t %k^"   ; ifte: send to sink
0B17   7D 3B 20 30 20 25 73 5E DB   "}; 0 %s^"   
0B1F   7D 3B                  DB   "};"   
0B21   7D                     DB   "}"   
0B22   00                     DB   0   
0B23                STAR:        
0B23                MUL:         
0B23   D1                     POP   de   ; get first value
0B24   E1                     POP   hl   
0B25                MUL2:        
0B25   C5                     PUSH   bc   ; Preserve the IP
0B26   44 4D                  LD   bc,hl   ; bc = 2nd value
0B28   21 00 00               LD   hl,0   
0B2B   3E 10                  LD   a,16   
0B2D                MUL3:        
0B2D   29                     ADD   hl,hl   
0B2E   CB 13                  RL   e   
0B30   CB 12                  RL   d   
0B32   30 04                  JR   nc,$+6   
0B34   09                     ADD   hl,bc   
0B35   30 01                  JR   nc,$+3   
0B37   13                     INC   de   
0B38   3D                     DEC   a   
0B39   20 F2                  JR   nz,mul3   
0B3B   C1                     POP   bc   ; Restore the IP
0B3C   C3 9B 03               JP   add3   
0B3F                NUM:         
0B3F   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0B42   0A                     LD   a,(bc)   ; Get numeral or -
0B43   FE 2D                  CP   "-"   
0B45   20 01                  JR   nz,num0   
0B47   03                     INC   bc   ; move to next char, no flags affected
0B48                NUM0:        
0B48   08                     EX   af,af'   ; save zero flag = 0 for later
0B49                NUM1:        
0B49   0A                     LD   a,(bc)   ; read digit
0B4A   D6 30                  SUB   "0"   ; less than 0?
0B4C   38 13                  JR   c,num2   ; not a digit, exit loop
0B4E   FE 0A                  CP   10   ; greater that 9?
0B50   30 0F                  JR   nc,num2   ; not a digit, exit loop
0B52   03                     INC   bc   ; inc IP
0B53   54 5D                  LD   de,hl   ; multiply hl * 10
0B55   29                     ADD   hl,hl   
0B56   29                     ADD   hl,hl   
0B57   19                     ADD   hl,de   
0B58   29                     ADD   hl,hl   
0B59   85                     ADD   a,l   ; add digit in a to hl
0B5A   6F                     LD   l,a   
0B5B   3E 00                  LD   a,0   
0B5D   8C                     ADC   a,h   
0B5E   67                     LD   h,a   
0B5F   18 E8                  JR   num1   
0B61                NUM2:        
0B61   0B                     DEC   bc   
0B62   08                     EX   af,af'   ; restore zero flag
0B63   20 07                  JR   nz,num3   
0B65   EB                     EX   de,hl   ; negate the value of hl
0B66   21 00 00               LD   hl,0   
0B69   B7                     OR   a   ; jump to sub2
0B6A   ED 52                  SBC   hl,de   
0B6C                NUM3:        
0B6C   E5                     PUSH   hl   ; Put the number on the stack
0B6D   DD E9                  JP   (ix)   ; and process the next character
0B6F                             ; /rs rangeSrc
0B6F                             ; begin end step -- src
0B6F                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source (begin end step)
0B6F                RANGESRC:      ; range source (begin end step)
0B6F   CD CD 09               CALL   go   
0B72   00 00                  DW   NUL   
0B74   7E 0B                  DW   rangeSrcM_2149S1708   
0B76   78 0B                  DW   $+2   
0B78   01                     DB   1   
0B79   04 62 65 73 4C         .PSTR   "besL"   
0B7E                RANGESRCM_2149S1708:      
0B7E   7B                     DB   "{"   
0B7F   5B 25 62 20 2F 74 5D 20 25 4C 3D DB   "[%b /t] %L="   ; init mutable L [index active]
0B8A   3A 6B 74 7B            DB   ":kt{"   
0B8E   30 25 74 3D 3D 2F 62 72 DB   "0%t==/br"   ; break if type != 0
0B96   3A 64 74 3A 61 7B      DB   ":dt:a{"   ; return talkback to receive data
0B9C   25 4C 31 23 2F 62 72   DB   "%L1#/br"   ; if not active don't send
0BA3   25 4C 30 23 20 25 61 3D DB   "%L0# %a="   ; store current index in A
0BAB   25 73 20 25 4C 30 23 20 2B 20 25 4C 30 23 3D DB   "%s %L0# + %L0#="   ; inc value of index by step
0BBA   31 25 74 3D 3D 2F 62 72 DB   "1%t==/br"   ; break if type != 0
0BC2   25 61 20 25 65 20 3C   DB   "%a %e <"   ; ifte: in range?
0BC9   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 23 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1#= 0 2}"   ; ifte: 1: send index, 2: active = false, send quit
0BDD   3F 3F 20 25 6B 2F 72 63 DB   "?? %k/rc"   ; ifte: call sink note: /rc recur
0BE5   7D 3B 20 30 20 25 6B 5E DB   "}; 0 %k^"   ; init sink
0BED   7D 3B                  DB   "};"   
0BEF   7D                     DB   "}"   
0BF0   00                     DB   0   
0BF1                RPAREN:      
0BF1   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
0BF4   FD 46 09               LD   b,(iy+9)   
0BF7   DD E9                  JP   (ix)   
0BF9                             ; shiftLeft
0BF9                             ; value count -- value2          shift left count places
0BF9                SHIFTLEFT:      
0BF9   50 59                  LD   de,bc   ; save IP
0BFB   C1                     POP   bc   ; bc = count
0BFC   41                     LD   b,c   ; b = loop counter
0BFD   E1                     POP   hl   
0BFE   04                     INC   b   ; test for counter=0 case
0BFF   18 01                  JR   shiftLeft2   
0C01                SHIFTLEFT1:      
0C01   29                     ADD   hl,hl   ; left shift hl
0C02                SHIFTLEFT2:      
0C02   10 FD                  DJNZ   shiftLeft1   
0C04   E5                     PUSH   hl   
0C05   42 4B                  LD   bc,de   ; restore IP
0C07   DD E9                  JP   (ix)   
0C09                             ; shiftRight
0C09                             ; value count -- value2          shift left count places
0C09                SHIFTRIGHT:      
0C09   50 59                  LD   de,bc   ; save IP
0C0B   C1                     POP   bc   ; bc = count
0C0C   41                     LD   b,c   ; b = loop counter
0C0D   E1                     POP   hl   
0C0E   04                     INC   b   ; test for counter=0 case
0C0F   18 04                  JR   shiftRight2   
0C11                SHIFTRIGHT1:      
0C11   CB 3C                  SRL   h   ; right shift hl
0C13   CB 1D                  RR   l   
0C15                SHIFTRIGHT2:      
0C15   10 FA                  DJNZ   shiftRight1   
0C17   E5                     PUSH   hl   
0C18   42 4B                  LD   bc,de   ; restore IP
0C1A   DD E9                  JP   (ix)   
0C1C                             ; string
0C1C                             ; -- ptr                        ; points to start of string chars,
0C1C                             ; length is stored at start - 2 bytes
0C1C                DQUOTE:      
0C1C                STRING:      
0C1C   2A F0 23               LD   hl,(vHeapPtr)   ; hl = heap*
0C1F   23                     INC   hl   ; skip length field to start
0C20   23                     INC   hl   
0C21   E5                     PUSH   hl   ; save start of string
0C22   03                     INC   bc   ; point to next char
0C23   18 03                  JR   string2   
0C25                STRING1:      
0C25   77                     LD   (hl),a   
0C26   23                     INC   hl   ; increase count
0C27   03                     INC   bc   ; point to next char
0C28                STRING2:      
0C28   0A                     LD   a,(bc)   
0C29   FE 22                  CP   DQ   ; " is the string terminator
0C2B   28 04                  JR   z,string3   
0C2D   FE 60                  CP   "`"   ; ` is the string terminator used in testing
0C2F   20 F4                  JR   nz,string1   
0C31                STRING3:      
0C31   AF                     XOR   a   ; write NUL to terminate string
0C32   77                     LD   (hl),a   ; hl = end of string
0C33   23                     INC   hl   
0C34   22 F0 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0C37   2B                     DEC   hl   ; hl = end of string without terminator
0C38   D1                     POP   de   ; de = start of string
0C39   D5                     PUSH   de   ; return start of string
0C3A   B7                     OR   a   ; hl = length bytes, de = start of string
0C3B   ED 52                  SBC   hl,de   
0C3D   EB                     EX   de,hl   
0C3E   2B                     DEC   hl   ; write length bytes to length field at start - 2
0C3F   72                     LD   (hl),d   
0C40   2B                     DEC   hl   
0C41   73                     LD   (hl),e   
0C42   DD E9                  JP   (ix)   
0C44                MINUS:       ; negative sign or subtract
0C44   03                     INC   bc   ; check if sign of a number
0C45   0A                     LD   a,(bc)   
0C46   0B                     DEC   bc   
0C47   FE 30                  CP   "0"   
0C49   38 05                  JR   c,sub   
0C4B   FE 3A                  CP   "9"+1   
0C4D   DA 44 03               JP   c,num_   
0C50                SUB:         ; Subtract the value 2nd on stack from top of stack
0C50   03                     INC   bc   
0C51   FE 2D                  CP   "-"   
0C53   20 05                  JR   nz,sub1   
0C55   E1                     POP   hl   
0C56   2B                     DEC   hl   
0C57   C3 CB 04               JP   assign0   
0C5A                SUB1:        
0C5A   0B                     DEC   bc   
0C5B   D1                     POP   de   
0C5C   E1                     POP   hl   
0C5D   B7                     OR   a   
0C5E   ED 52                  SBC   hl,de   
0C60   C3 9B 03               JP   add3   
0C63                             ; /pb printBuffer
0C63                             ; --
0C63                             ; prints chars in buffer from /vB to /vb. Resets /vb to /vB
0C63                          ;*Macro unroll: FUNC printBuffer, 0, "a"
0C63                PRINTBUFFER:      
0C63   CD CD 09               CALL   go   
0C66   00 00                  DW   NUL   
0C68   6F 0C                  DW   printBufferM_2265S1831   
0C6A   6C 0C                  DW   $+2   
0C6C   00                     DB   0   
0C6D   01 61                  .PSTR   "a"   
0C6F                PRINTBUFFERM_2265S1831:      
0C6F   7B 2F 76 42 20 2F 76 62 2F 76 42 2D 20 2F 70 63 20 2F 76 42 2F 76 62 3D 7D 00 .CSTR   "{/vB /vb/vB- /pc /vB/vb=}"   ; block
0C89                             ; printChars
0C89                             ; char* len --
0C89                PRINTCHARS:      
0C89   E1                     POP   hl   ; hl = count
0C8A   D1                     POP   de   ; de = char*
0C8B   CD 96 0C               CALL   printChars2   
0C8E   DD E9                  JP   (ix)   
0C90                PRINTCHARS1:      
0C90   1A                     LD   a,(de)   ; print char at char*
0C91   CD 85 00               CALL   putchar   
0C94   13                     INC   de   ; char*++
0C95   2B                     DEC   hl   ; count--
0C96                PRINTCHARS2:      
0C96   7D                     LD   a,l   ; count == 0?
0C97   B4                     OR   h   
0C98   C8                     RET   z   
0C99   18 F5                  JR   printChars1   ; if not loop
0C9B                RECUR:       
0C9B   E1                     POP   hl   
0C9C   22 F2 23               LD   (vRecur),hl   
0C9F   DD E9                  JP   (ix)   
0CA1                REMAIN:      
0CA1   2A F6 23               LD   hl,(vRemain)   
0CA4   E5                     PUSH   hl   
0CA5   DD E9                  JP   (ix)   
0CA7                SIZE:        
0CA7   E1                     POP   hl   
0CA8   2B                     DEC   hl   ; msb size
0CA9   56                     LD   d,(hl)   
0CAA   2B                     DEC   hl   ; lsb size
0CAB   5E                     LD   e,(hl)   
0CAC   D5                     PUSH   de   
0CAD   DD E9                  JP   (ix)   
0CAF                CONSTBUFSTART:      
0CAF   11 00 22               LD   de,BUF   
0CB2   18 28                  JR   constant   
0CB4                CONSTHEAPSTART:      
0CB4   11 1C 24               LD   de,HEAP   
0CB7   18 23                  JR   constant   
0CB9                CONSTTIBSTART:      
0CB9   11 00 21               LD   de,TIB   
0CBC   18 1E                  JR   constant   
0CBE                VARBUFPTR:      
0CBE   ED 5B EC 23            LD   de,(vBufPtr)   
0CC2   21 EC 23               LD   hl,vBufPtr   
0CC5   18 12                  JR   variable   
0CC7                VARHEAPPTR:      
0CC7   ED 5B F0 23            LD   de,(vHeapPtr)   
0CCB   21 F0 23               LD   hl,vHeapPtr   
0CCE   18 09                  JR   variable   
0CD0                VARTIBPTR:      
0CD0   ED 5B EA 23            LD   de,(vTIBPtr)   
0CD4   21 EA 23               LD   hl,vTIBPtr   
0CD7   18 00                  JR   variable   
0CD9                VARIABLE:      
0CD9   22 F4 23               LD   (vPointer),hl   
0CDC                CONSTANT:      
0CDC   D5                     PUSH   de   
0CDD   DD E9                  JP   (ix)   
0CDF                             ; 
0CDF                FILTER:      
0CDF                SCAN:        
0CDF   DD E9                  JP   (ix)   
0CE1                             ;*******************************************************************
0CE1                             ; general routines
0CE1                             ;*******************************************************************
0CE1                             ; prints whatever in in buffer starting from BUF and ending at vBufPtr*
0CE1                FLUSHBUFFER:      
0CE1   F5                     PUSH   af   
0CE2   D5                     PUSH   de   
0CE3   E5                     PUSH   hl   
0CE4   2A EC 23               LD   hl,(vBufPtr)   
0CE7   11 00 22               LD   de,BUF   
0CEA   ED 53 EC 23            LD   (vBufPtr),de   
0CEE   B7                     OR   a   
0CEF   ED 52                  SBC   hl,de   
0CF1   CD 96 0C               CALL   printChars2   
0CF4   E1                     POP   hl   
0CF5   D1                     POP   de   
0CF6   F1                     POP   af   
0CF7   C9                     RET      
0CF8                             ; followed by a table
0CF8                             ; db char
0CF8                             ; dw addr
0CF8                             ; the final item must have char == NUL
0CF8                JUMPTABLE:      
0CF8   03                     INC   bc   
0CF9   E1                     POP   hl   
0CFA                JUMPTABLE0:      
0CFA   AF                     XOR   a   
0CFB   BE                     CP   (hl)   
0CFC   28 09                  JR   z,jumpTable1   
0CFE   0A                     LD   a,(bc)   
0CFF   BE                     CP   (hl)   
0D00   28 06                  JR   z,jumpTable2   
0D02   23                     INC   hl   
0D03   23                     INC   hl   
0D04   23                     INC   hl   
0D05   18 F3                  JR   jumpTable0   
0D07                JUMPTABLE1:      
0D07   0B                     DEC   bc   
0D08                JUMPTABLE2:      
0D08   23                     INC   hl   
0D09   5E                     LD   e,(hl)   
0D0A   23                     INC   hl   
0D0B   56                     LD   d,(hl)   
0D0C   EB                     EX   de,hl   
0D0D   E9                     JP   (hl)   
0D0E                PRTSTR0:      
0D0E   CD 85 00               CALL   putchar   
0D11   23                     INC   hl   
0D12                PRTSTR:      
0D12   7E                     LD   a,(hl)   
0D13   B7                     OR   a   
0D14   20 F8                  JR   nz,prtstr0   
0D16   C9                     RET      
0D17                             ; **************************************************************************
0D17                             ; calculate nesting value
0D17                             ; a is char to be tested,
0D17                             ; e is the nesting value (initially 0)
0D17                             ; e is increased by ( and [
0D17                             ; e is decreased by ) and ]
0D17                             ; e has its bit 7 toggled by `
0D17                             ; limited to 127 levels
0D17                             ; **************************************************************************
0D17                NESTING:      
0D17   FE 22                  CP   DQ   ; quote char
0D19   28 06                  JR   z,nesting0   
0D1B   FE 60                  CP   "`"   ; quote char
0D1D   28 02                  JR   z,nesting0   
0D1F   18 0A                  JR   nesting1   
0D21                NESTING0:      
0D21   CB 7B                  BIT   7,e   
0D23   28 03                  JR   z,nesting1a   
0D25   CB BB                  RES   7,e   
0D27   C9                     RET      
0D28                NESTING1A:      
0D28   CB FB                  SET   7,e   
0D2A   C9                     RET      
0D2B                NESTING1:      
0D2B   CB 7B                  BIT   7,e   
0D2D   C0                     RET   nz   
0D2E   FE 7B                  CP   "{"   
0D30   28 08                  JR   z,nesting2   
0D32   FE 5B                  CP   "["   
0D34   28 04                  JR   z,nesting2   
0D36   FE 28                  CP   "("   
0D38   20 02                  JR   nz,nesting3   
0D3A                NESTING2:      
0D3A   1C                     INC   e   
0D3B   C9                     RET      
0D3C                NESTING3:      
0D3C   FE 7D                  CP   "}"   
0D3E   28 07                  JR   z,nesting4   
0D40   FE 5D                  CP   "]"   
0D42   28 03                  JR   z,nesting4   
0D44   FE 29                  CP   ")"   
0D46   C0                     RET   nz   
0D47                NESTING4:      
0D47   1D                     DEC   e   
0D48   C9                     RET      
0D49                PROMPT:      
0D49   CD 59 0D               CALL   printStr   
0D4C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0D51   C9                     RET      
0D52                CRLF:        
0D52   CD 59 0D               CALL   printStr   
0D55   0D 0A 00               .CSTR   "\r\n"   
0D58   C9                     RET      
0D59                             ; prints a null teminated string
0D59                             ; the string should be immediately following the call
0D59                PRINTSTR:      
0D59   E3                     EX   (sp),hl   ; swap			
0D5A   CD 12 0D               CALL   prtstr   
0D5D   23                     INC   hl   ; inc past NUL
0D5E   E3                     EX   (sp),hl   ; put it back	
0D5F   C9                     RET      
0D60                TITLESTR:      
0D60   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0D74                INIT:        
0D74   21 60 0D               LD   hl,titleStr   
0D77   11 08 24               LD   de,titleBuf   
0D7A   06 14                  LD   b,20   
0D7C                INIT1:       
0D7C   1A                     LD   a,(de)   
0D7D   BE                     CP   (hl)   
0D7E   20 17                  JR   nz,coldBoot0   
0D80   13                     INC   de   
0D81   23                     INC   hl   
0D82   10 F8                  DJNZ   init1   
0D84                WARMINIT:      
0D84   ED 4B F8 23            LD   bc,(vSavedIP)   ; restore IP
0D88   ED 7B FA 23            LD   sp,(vSavedSP)   ; restore SP
0D8C   DD 2A FC 23            LD   ix,(vSavedNext)   ; restore Next
0D90   FD 2A FE 23            LD   iy,(vSavedBP)   ; restore BP
0D94   C3 CE 0D               JP   start1   
0D97                COLDBOOT0:      
0D97   21 60 0D               LD   hl,titleStr   ; copy titleStr to titleBuf
0D9A   11 08 24               LD   de,titleBuf   
0D9D   06 14                  LD   b,20   
0D9F   ED B0                  LDIR      
0DA1                COLDINIT:      
0DA1   21 80 01               LD   hl,isysVars   
0DA4   11 E6 23               LD   de,sysVars   
0DA7   01 10 00               LD   bc,8 * 2   
0DAA   ED B0                  LDIR      
0DAC   21 00 23               LD   hl,vars   ; 52 vars LO HI
0DAF   06 34                  LD   b,26*2   
0DB1   AF                     XOR   a   
0DB2                COLDBOOT1:      
0DB2   77                     LD   (hl),a   
0DB3   23                     INC   hl   
0DB4   10 FC                  DJNZ   coldBoot1   
0DB6   DD 2A EE 23            LD   ix,(vNext)   
0DBA   FD 21 00 21            LD   iy,STACK   
0DBE   C9                     RET      
0DBF                COLDSTART:      
0DBF   31 00 21               LD   sp,STACK   
0DC2   CD 97 0D               CALL   coldBoot0   
0DC5   C3 CE 0D               JP   start1   
0DC8                START:       
0DC8   31 00 21               LD   sp,STACK   ; start Monty
0DCB   CD 74 0D               CALL   init   ; setups
0DCE                START1:      
0DCE   21 08 24               LD   hl,titleBuf   
0DD1   CD 12 0D               CALL   prtstr   ; prog count to stack, put code line 235 on stack then call print
0DD4                INTERPRET:      
0DD4   CD E1 0C               CALL   flushBuffer   
0DD7   CD 49 0D               CALL   prompt   
0DDA   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
0DDD   21 00 21               LD   hl,TIB   
0DE0   22 EA 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
0DE3                INTERPRET2:      ; calculate nesting
0DE3   1E 00                  LD   e,0   ; initilize nesting value
0DE5   C5                     PUSH   bc   ; save offset into TIB,
0DE6                             ; bc is also the count of chars in TIB
0DE6   21 00 21               LD   hl,TIB   ; hl is start of TIB
0DE9   18 0B                  JR   interpret4   
0DEB                INTERPRET3:      
0DEB   3E 33                  LD   a,"3"   
0DED   CD 85 00               CALL   putchar   
0DF0   7E                     LD   a,(hl)   ; a = char in TIB
0DF1   23                     INC   hl   ; inc pointer into TIB
0DF2   0B                     DEC   bc   ; dec count of chars in TIB
0DF3   CD 17 0D               CALL   nesting   ; update nesting value
0DF6                INTERPRET4:      
0DF6   79                     LD   a,c   ; is count zero?
0DF7   B0                     OR   b   
0DF8   20 F1                  JR   nz,interpret3   ; if not loop
0DFA   C1                     POP   bc   ; restore offset into TIB
0DFB                INTERPRET5:      
0DFB   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
0DFE   FE 20                  CP   $20   ; compare to space
0E00   30 1E                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
0E02   FE 00                  CP   NUL   ; is it end of string? NUL end of string
0E04                             ; ???? NEEDED?
0E04   28 3B                  JR   z,interpret8   
0E06   FE 0D                  CP   "\r"   ; carriage return? ascii 13
0E08   28 24                  JR   z,interpret7   ; if anything else its macro/control
0E0A   FE 05                  CP   CTRL_E   
0E0C   CA 9F 0E               JP   z,edit_   
0E0F   FE 08                  CP   CTRL_H   
0E11   CA 8F 0E               JP   z,backSpace_   
0E14   FE 0A                  CP   CTRL_J   
0E16   CA B7 0E               JP   z,reEdit_   
0E19   FE 13                  CP   CTRL_S   
0E1B   CA BA 0E               JP   z,printStack_   
0E1E                             ; DB     lsb(edit_)       ; ENQ ^E  5
0E1E                             ; DB     lsb(reedit_)     ; LF  ^J 10
0E1E                             ; DB     lsb(list_)       ; FF  ^L 12
0E1E                             ; DB     lsb(printStack_) ; DLE ^P 16
0E1E                             ; DB lsb(depth_)      ;\#3    ( -- val )    depth of data stack
0E1E                             ; DB lsb(printStack_)   ;\#4    ( -- )        non-destructively prints stack
0E1E                             ; DB lsb(prompt_)     ;\#5    ( -- )        print MINT prompt
0E1E                             ; DB lsb(editDef_)    ;\#6    ( char -- )   edit command
0E1E                             ; DB lsb(aDup_)       ;\#7    ( adr -- )    dupe (used in asm tests)
0E1E                             ; DB     lsb(newln_)      ;a4    \$  prints a newline to output	
0E1E                             ; reedit_: DB "\\e\\@\\#6;"			; lastDef, edit. remembers last line edited
0E1E                             ; edit_: .cstr "`?`?\\#5\\#6;"      ; ?,key,prompt,edit
0E1E                             ; list_: .cstr "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;" newln, loop 26 (index + "A", edit tib* > 0, newln),prompt
0E1E                             ; printStack_: .cstr "\\#4\\#5;"  ; print stack, prompt
0E1E                INTERPRET5A:      
0E1E                             ; ld (vTIBPtr),bc
0E1E                             ; ld bc,(vTIBPtr)
0E1E   18 C3                  JR   interpret2   
0E20                INTERPRET6:      
0E20   21 00 21               LD   hl,TIB   
0E23   09                     ADD   hl,bc   
0E24   77                     LD   (hl),a   ; store the character in textbuf
0E25   03                     INC   bc   
0E26   CD 85 00               CALL   putchar   ; echo character to screen
0E29   CD 17 0D               CALL   nesting   
0E2C   18 CD                  JR   interpret5   ; wait for next character
0E2E                INTERPRET7:      
0E2E   21 00 21               LD   hl,TIB   
0E31   09                     ADD   hl,bc   
0E32   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0E34   23                     INC   hl   
0E35   36 0A                  LD   (hl),"\n"   
0E37   23                     INC   hl   
0E38   03                     INC   bc   
0E39   03                     INC   bc   
0E3A   CD 52 0D               CALL   crlf   ; echo character to screen
0E3D   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0E3E   B7                     OR   a   
0E3F   20 BA                  JR   nz,interpret5   
0E41                INTERPRET8:      
0E41   21 00 21               LD   hl,TIB   
0E44   09                     ADD   hl,bc   
0E45   22 EA 23               LD   (vTIBPtr),hl   
0E48   01 00 21               LD   bc,TIB   
0E4B   ED 43 F8 23            LD   (vSavedIP),bc   ; save IP
0E4F   ED 73 FA 23            LD   (vSavedSP),sp   ; save SP
0E53   DD 22 FC 23            LD   (vSavedNext),ix   ; save Next
0E57   FD 22 FE 23            LD   (vSavedBP),iy   ; save BP
0E5B   0B                     DEC   bc   
0E5C                NEXT:        
0E5C   03                     INC   bc   ; Increment the IP
0E5D   0A                     LD   a,(bc)   ; Get the next character and dispatch
0E5E   FE 20                  CP   " "   ; whitespace?
0E60   28 FA                  JR   z,next   ; space? ignore
0E62   38 09                  JR   c,next1   
0E64   D6 20                  SUB   " "   
0E66   6F                     LD   l,a   ; index into table
0E67   26 02                  LD   h,msb(opcodes)   ; start address of jump table
0E69   6E                     LD   l,(hl)   ; get low jump address
0E6A   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0E6C   E9                     JP   (hl)   ; Jump to routine
0E6D                NEXT1:       
0E6D   FE 00                  CP   NUL   ; end of input string?
0E6F   28 03                  JR   z,exit   
0E71   C3 D4 0D               JP   interpret   ; no, other whitespace, macros?
0E74                EXIT:        
0E74   03                     INC   bc   
0E75   60 69                  LD   hl,bc   
0E77   E9                     JP   (hl)   
0E78                RUN:         
0E78   C1                     POP   bc   
0E79   0B                     DEC   bc   
0E7A   DD E9                  JP   (ix)   
0E7C                ERROR:       
0E7C   CD 78 0E               CALL   run   
0E7F   22 45 72 72 6F 72 20 22 2E 73 20 2E 00 DB   DQ,"Error ",DQ,".s .",0   
0E8C   C3 D4 0D               JP   interpret   
0E8F                BACKSPACE_:      
0E8F   79                     LD   a,c   
0E90   B0                     OR   b   
0E91   CA E3 0D               JP   z,interpret2   
0E94   0B                     DEC   bc   
0E95   CD 59 0D               CALL   printStr   
0E98   08 20 08 00            .CSTR   "\b \b"   
0E9C   C3 E3 0D               JP   interpret2   
0E9F                             ; edit
0E9F                EDIT_:       
0E9F   CD 78 0E               CALL   run   
0EA2   22 76 61 72 3F 22 2E 73 20 2F 6B 2F 61 64 20 2E 68 00 DB   DQ,"var?",DQ,".s /k/ad .h",0   
0EB4   C3 D4 0D               JP   interpret   
0EB7                REEDIT_:      
0EB7   C3 D4 0D               JP   interpret   
0EBA                PRINTSTACK_:      
0EBA   CD 78 0E               CALL   run   
0EBD   2F 70 6B 00            .CSTR   "/pk"   
0EC1   C3 D4 0D               JP   interpret   
0EC4                             ; editDef:
0EC4                             ;     pop hl                      ; pop ret address
0EC4                             ;     ex (sp),hl                  ; swap with TOS
0EC4                             ;     push hl                     ; dup TOS
0EC4                             ;     ld a,l                      ; a = ident
0EC4                             ;     ld de,TIB                   ; de = start of TIB
0EC4                             ;     ld (vTIBPtr),de             ; update TIB*
0EC4                             ;     push ix                     ; save NEXT
0EC4                             ;     ld ix,editDef0              ; NEXT = editDef0
0EC4                             ;     jp lookupRef                ; convert letter into address
0EC4                             ; editDef0:
0EC4                             ;     ld e,(hl)                   ; de = (hl++)
0EC4                             ;     inc hl
0EC4                             ;     ld d,(hl)
0EC4                             ;     ld a,d                      ; de == 0 ?
0EC4                             ;     or e
0EC4                             ;     jr z,editDef4
0EC4                             ;     ld ix,editDef3              ; NEXT = editDef3
0EC4                             ;     ex de,hl
0EC4                             ;     ld a,(hl)
0EC4                             ;     cp "{"
0EC4                             ;     jr nz,editDef1
0EC4                             ;     jp editBlock0               ; convert letter into address
0EC4                             ; editDef1:
0EC4                             ;     cp "("
0EC4                             ;     jr nz,editDef2
0EC4                             ;     jp editBlock0               ; convert letter into address
0EC4                             ; editDef2:
0EC4                             ;     jp editFunc
0EC4                             ; editDef3:
0EC4                             ;     ld a," "                    ; write assign
0EC4                             ;     call writeChar
0EC4                             ;     pop hl                      ; a = ident
0EC4                             ;     ld a,l
0EC4                             ;     call writeChar
0EC4                             ;     ld a,"="                    ; write assign
0EC4                             ;     call writeChar
0EC4                             ;     ld ix,editDef4              ; NEXT = editDef4
0EC4                             ;     jp printTIB
0EC4                             ; editDef4:
0EC4                             ;     pop ix                      ; restore NEXT
0EC4                             ;     jp (ix)
0EC4                             ; writeChar:
0EC4                             ;     ld de,(vTIBPtr)             ; de = TIB*
0EC4                             ;     ld (de),a                   ; write ident
0EC4                             ;     inc de
0EC4                             ;     ld (vTIBPtr),de             ; update TIB* to point to end of string
0EC4                             ;     ret
0EC4                             ; ; printTIB
0EC4                             ; printTIB:
0EC4                             ;     ld hl,(vTIBPtr)
0EC4                             ;     ld de,TIB
0EC4                             ;     or a
0EC4                             ;     sbc hl,de
0EC4                             ;     jp printTIB2
0EC4                             ; printTIB1:
0EC4                             ;     ld a,(de)
0EC4                             ;     call putchar
0EC4                             ; printTIB2:
0EC4                             ;     ld a,l
0EC4                             ;     or h
0EC4                             ;     jr nz,printTIB1
0EC4                             ;     jp (ix)
0EC4                             ; editBlock:
0EC4                             ;     pop hl                      ; hl = block*
0EC4                             ; editBlock0:
0EC4                             ;     push ix                     ; save next
0EC4                             ;     push hl                     ; push block*
0EC4                             ;     push hl                     ; push block*
0EC4                             ;     ld ix,(editBlock2)
0EC4                             ;     jp blockLength
0EC4                             ; editBlock1:
0EC4                             ;     pop hl                      ; bc = length, (sp) = IP
0EC4                             ;     pop de                      ; de = block*
0EC4                             ;     ld a,l
0EC4                             ;     or h
0EC4                             ;     jr z,editBlock2
0EC4                             ;     push bc
0EC4                             ;     ld bc,hl
0EC4                             ;     ex de,hl                    ; hl = block*
0EC4                             ;     ld de,(vTIBPtr)              ; de = TIB*
0EC4                             ;     ldir                        ; copy block to TIB
0EC4                             ;     ld (vTIBPtr),de              ; save TIB*
0EC4                             ;     pop bc
0EC4                             ; editBlock2:
0EC4                             ;     pop ix                      ; restore next
0EC4                             ;     jp (ix)
0EC4                             ; editFunc:
0EC4                             ;     jp (ix)
0EC4                             ; editArray:
0EC4                             ;     jp (ix)
0EC4                             ; editArglist:
0EC4                             ;     jp (ix)
0EC4                             ; ; blockLength
0EC4                             ; ; addr1 -- length
0EC4                             ; blockLength:
0EC4                             ;     pop hl                      ; block*
0EC4                             ;     push hl                     ; save block*
0EC4                             ;     inc hl                      ; skip first char
0EC4                             ;     ld d,1                      ; increase nesting
0EC4                             ; blockLength1:                   ; Skip to end of definition
0EC4                             ;     ld a,(hl)                   ; Get the next character
0EC4                             ;     inc hl                      ; Point to next character
0EC4                             ;     cp " " + 1                  ; ignore whitespace
0EC4                             ;     jr c,blockLength1
0EC4                             ;     cp ")"
0EC4                             ;     jr z,blockLength4
0EC4                             ;     cp "}"
0EC4                             ;     jr z,blockLength4
0EC4                             ;     cp "]"
0EC4                             ;     jr z,blockLength4
0EC4                             ;     cp "("
0EC4                             ;     jr z,blockLength2
0EC4                             ;     cp "{"
0EC4                             ;     jr z,blockLength2
0EC4                             ;     cp "["
0EC4                             ;     jr z,blockLength2
0EC4                             ;     cp "'"
0EC4                             ;     jr z,blockLength3
0EC4                             ;     cp "`"
0EC4                             ;     jr z,blockLength3
0EC4                             ;     cp DQ
0EC4                             ;     jr z,blockLength3
0EC4                             ;     jr blockLength1
0EC4                             ; blockLength2:
0EC4                             ;     inc d
0EC4                             ;     jr blockLength1
0EC4                             ; blockLength4:
0EC4                             ;     dec d
0EC4                             ;     jr nz, blockLength1         ; get the next element
0EC4                             ; blockLength3:
0EC4                             ;     ld a,$80
0EC4                             ;     xor d
0EC4                             ;     ld d,a
0EC4                             ;     jr nz, blockLength1
0EC4                             ;     pop hl                      ; hl = block*
0EC4                             ;     or a
0EC4                             ;     sbc hl,de
0EC4                             ;     push hl
0EC4                             ;     jp (ix)
0EC4                             ; "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"
0EC4                             ; \a start of stack \#3 depth \b base \$ prompt
0EC4                             ; DW dStack               ; a vS0 start of datastack			
0EC4                             ; DW FALSE                ; b vBase16
0EC4                             ; DW 0                    ; c vTIBPtr an offset to the tib
0EC4                             ; DW 0                    ; d
0EC4                             ; DW 65                   ; e vLastDef "A" last command u defined
0EC4                             ; DW 0                    ; f
0EC4                             ; DW page6                ; g 256 bytes limits
0EC4                             ; DW HEAP                 ; h vHeapPtr \h start of the free mem
0EC4                F1:          
0EC4                F2:          
0EC4                F3:          
0EC4                F4:          
0EC4                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUF:      DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VDATAWIDTH:   DS   2   ; 
23E8                VNUMBASE:   DS   2   ; 
23EA                VTIBPTR:   DS   2   ; 
23EC                VBUFPTR:   DS   2   ; 
23EE                VNEXT:    DS   2   ; 
23F0                VHEAPPTR:   DS   2   ; 
23F2                VRECUR:   DS   2   ; 
23F4                             ; uninitialised sys variables (preserved)
23F4                VPOINTER:   DS   2   ; 
23F6                VREMAIN:   DS   2   ; 
23F8                VSAVEDIP:   DS   2   ; 
23FA                VSAVEDSP:   DS   2   ; 
23FC                VSAVEDNEXT:   DS   2   ; 
23FE                VSAVEDBP:   DS   2   ; 
2400                             ; uninitialised sys variables (unpreserved)
2400                VTEMP1:   DS   2   ; 
2402                VTEMP2:   DS   2   ; 
2404                VLASTDEF:   DS   2   ; 
2406                TBPTR:    DS   2   ; reserved for tests
2408                TITLEBUF:   DS   20   
241C                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0CDF DEFINED AT LINE 1911 IN MAIN.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1599 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1844 IN MAIN.asm
                    > USED AT LINE 1963 IN MAIN.asm
                    > USED AT LINE 2113 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 1318 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 1323 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 239 IN MAIN.asm
                    > USED AT LINE 810 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
                    > USED AT LINE 847 IN MAIN.asm
                    > USED AT LINE 856 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 870 IN MAIN.asm
                    > USED AT LINE 881 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
                    > USED AT LINE 1091 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1570 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2220 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 634 IN MAIN.asm
                    > USED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1783 IN MAIN.asm
                    > USED AT LINE 1982 IN MAIN.asm
                    > USED AT LINE 2235 IN MAIN.asm
                    > USED AT LINE 2250 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
                    > USED AT LINE 2138 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2140 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2142 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
MACROS:             0180 DEFINED AT LINE 53 IN MAIN.asm
ISYSVARS:           0180 DEFINED AT LINE 58 IN MAIN.asm
                    > USED AT LINE 2066 IN MAIN.asm
OPCODES:            0200 DEFINED AT LINE 69 IN MAIN.asm
PAGE4:              0300 DEFINED AT LINE 172 IN MAIN.asm
PLUS_:              0300 DEFINED AT LINE 174 IN MAIN.asm
AT_:                0303 DEFINED AT LINE 176 IN MAIN.asm
AMPER_:             0306 DEFINED AT LINE 178 IN MAIN.asm
DOLLAR_:            0309 DEFINED AT LINE 180 IN MAIN.asm
LBRACK_:            030C DEFINED AT LINE 182 IN MAIN.asm
RBRACK_:            030F DEFINED AT LINE 184 IN MAIN.asm
PERCENT_:           0312 DEFINED AT LINE 186 IN MAIN.asm
LPAREN_:            0315 DEFINED AT LINE 188 IN MAIN.asm
LBRACE_:            0315 DEFINED AT LINE 189 IN MAIN.asm
RBRACE_:            0318 DEFINED AT LINE 191 IN MAIN.asm
TICK_:              031B DEFINED AT LINE 193 IN MAIN.asm
SEMICOLON_:         031E DEFINED AT LINE 195 IN MAIN.asm
DOT_:               0321 DEFINED AT LINE 197 IN MAIN.asm
COLON_:             0324 DEFINED AT LINE 199 IN MAIN.asm
UPCASE_:            0327 DEFINED AT LINE 201 IN MAIN.asm
LOWCASE_:           032A DEFINED AT LINE 203 IN MAIN.asm
QUESTION_:          032D DEFINED AT LINE 205 IN MAIN.asm
STAR_:              0330 DEFINED AT LINE 207 IN MAIN.asm
BANG_:              0333 DEFINED AT LINE 209 IN MAIN.asm
NOT:                033E DEFINED AT LINE 217 IN MAIN.asm
                    > USED AT LINE 213 IN MAIN.asm
NUM_:               0344 DEFINED AT LINE 221 IN MAIN.asm
                    > USED AT LINE 1811 IN MAIN.asm
HASH_:              0347 DEFINED AT LINE 223 IN MAIN.asm
PIPE_:              034A DEFINED AT LINE 225 IN MAIN.asm
CARET_:             034D DEFINED AT LINE 227 IN MAIN.asm
COMMA_:             0350 DEFINED AT LINE 229 IN MAIN.asm
DQUOTE_:            0353 DEFINED AT LINE 231 IN MAIN.asm
MINUS_:             0356 DEFINED AT LINE 233 IN MAIN.asm
EQ_:                0359 DEFINED AT LINE 235 IN MAIN.asm
EQ0:                0362 DEFINED AT LINE 247 IN MAIN.asm
                    > USED AT LINE 238 IN MAIN.asm
EQ1:                0363 DEFINED AT LINE 249 IN MAIN.asm
                    > USED AT LINE 220 IN MAIN.asm
GT_:                0367 DEFINED AT LINE 253 IN MAIN.asm
LT_:                0372 DEFINED AT LINE 261 IN MAIN.asm
LT1:                037B DEFINED AT LINE 268 IN MAIN.asm
                    > USED AT LINE 260 IN MAIN.asm
SLASH_:             0384 DEFINED AT LINE 273 IN MAIN.asm
NOP_:               0387 DEFINED AT LINE 275 IN MAIN.asm
RPAREN_:            0389 DEFINED AT LINE 277 IN MAIN.asm
PLUS:               038C DEFINED AT LINE 283 IN MAIN.asm
                    > USED AT LINE 175 IN MAIN.asm
ADD:                038C DEFINED AT LINE 284 IN MAIN.asm
ADD1:               0397 DEFINED AT LINE 292 IN MAIN.asm
                    > USED AT LINE 288 IN MAIN.asm
ADD3:               039B DEFINED AT LINE 297 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
                    > USED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
ADD4:               03A6 DEFINED AT LINE 305 IN MAIN.asm
                    > USED AT LINE 301 IN MAIN.asm
AT:                 03A9 DEFINED AT LINE 310 IN MAIN.asm
                    > USED AT LINE 177 IN MAIN.asm
ADDR:               03A9 DEFINED AT LINE 311 IN MAIN.asm
AMPER:              03B3 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 179 IN MAIN.asm
AND:                03B3 DEFINED AT LINE 317 IN MAIN.asm
AND1:               03BA DEFINED AT LINE 325 IN MAIN.asm
                    > USED AT LINE 341 IN MAIN.asm
PIPE:               03BE DEFINED AT LINE 330 IN MAIN.asm
                    > USED AT LINE 226 IN MAIN.asm
OR:                 03C1 DEFINED AT LINE 333 IN MAIN.asm
                    > USED AT LINE 331 IN MAIN.asm
XOR:                03CA DEFINED AT LINE 343 IN MAIN.asm
                    > USED AT LINE 809 IN MAIN.asm
XOR1:               03CB DEFINED AT LINE 345 IN MAIN.asm
                    > USED AT LINE 357 IN MAIN.asm
INVERT:             03D5 DEFINED AT LINE 355 IN MAIN.asm
                    > USED AT LINE 855 IN MAIN.asm
PERCENT:            03DA DEFINED AT LINE 362 IN MAIN.asm
                    > USED AT LINE 187 IN MAIN.asm
ARG:                03DA DEFINED AT LINE 363 IN MAIN.asm
ARG0:               03F6 DEFINED AT LINE 382 IN MAIN.asm
                    > USED AT LINE 388 IN MAIN.asm
ARG0A:              03FF DEFINED AT LINE 390 IN MAIN.asm
                    > USED AT LINE 369 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ARG1:               0404 DEFINED AT LINE 393 IN MAIN.asm
                    > USED AT LINE 386 IN MAIN.asm
ARG1A:              040C DEFINED AT LINE 400 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
LBRACK:             040F DEFINED AT LINE 404 IN MAIN.asm
                    > USED AT LINE 183 IN MAIN.asm
ARRAYSTART:         040F DEFINED AT LINE 405 IN MAIN.asm
RBRACK:             042B DEFINED AT LINE 419 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
ARRAYEND:           042B DEFINED AT LINE 420 IN MAIN.asm
ARRAYEND1:          0447 DEFINED AT LINE 437 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
ARRAYEND2:          0457 DEFINED AT LINE 447 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
ARRAYEND3:          045C DEFINED AT LINE 451 IN MAIN.asm
                    > USED AT LINE 436 IN MAIN.asm
HASH:               047B DEFINED AT LINE 474 IN MAIN.asm
                    > USED AT LINE 224 IN MAIN.asm
ARRAYINDEX:         047B DEFINED AT LINE 475 IN MAIN.asm
ARRAYINDEX0:        0483 DEFINED AT LINE 481 IN MAIN.asm
ARRAYINDEX1:        0484 DEFINED AT LINE 483 IN MAIN.asm
                    > USED AT LINE 480 IN MAIN.asm
ARRAYINDEX2:        0490 DEFINED AT LINE 492 IN MAIN.asm
                    > USED AT LINE 489 IN MAIN.asm
COLON:              0493 DEFINED AT LINE 500 IN MAIN.asm
                    > USED AT LINE 200 IN MAIN.asm
ARGLIST:            0493 DEFINED AT LINE 501 IN MAIN.asm
ARGLIST1:           049D DEFINED AT LINE 508 IN MAIN.asm
                    > USED AT LINE 529 IN MAIN.asm
ARGLIST1A:          04A5 DEFINED AT LINE 514 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
ARGLIST2:           04AD DEFINED AT LINE 519 IN MAIN.asm
ARGLIST3:           04B5 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 513 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
ARGLIST4:           04B8 DEFINED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 516 IN MAIN.asm
                    > USED AT LINE 518 IN MAIN.asm
ARGLIST5:           04BE DEFINED AT LINE 536 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
ASSIGN:             04C9 DEFINED AT LINE 547 IN MAIN.asm
                    > USED AT LINE 240 IN MAIN.asm
ASSIGN0:            04CB DEFINED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 291 IN MAIN.asm
                    > USED AT LINE 306 IN MAIN.asm
                    > USED AT LINE 1818 IN MAIN.asm
ASSIGNX:            04CC DEFINED AT LINE 552 IN MAIN.asm
ASSIGN1:            04D8 DEFINED AT LINE 560 IN MAIN.asm
                    > USED AT LINE 557 IN MAIN.asm
ABSOLUTE:           04DA DEFINED AT LINE 565 IN MAIN.asm
                    > USED AT LINE 816 IN MAIN.asm
ADDROF:             04E7 DEFINED AT LINE 580 IN MAIN.asm
                    > USED AT LINE 818 IN MAIN.asm
ADDROF1:            04FB DEFINED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 588 IN MAIN.asm
ADDROF2:            0506 DEFINED AT LINE 601 IN MAIN.asm
                    > USED AT LINE 584 IN MAIN.asm
                    > USED AT LINE 586 IN MAIN.asm
                    > USED AT LINE 591 IN MAIN.asm
LBRACE:             0508 DEFINED AT LINE 605 IN MAIN.asm
                    > USED AT LINE 190 IN MAIN.asm
BLOCKSTART:         0508 DEFINED AT LINE 606 IN MAIN.asm
BLOCKSTART1:        050C DEFINED AT LINE 610 IN MAIN.asm
                    > USED AT LINE 614 IN MAIN.asm
                    > USED AT LINE 636 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
BLOCKSTART2:        0538 DEFINED AT LINE 637 IN MAIN.asm
                    > USED AT LINE 624 IN MAIN.asm
                    > USED AT LINE 626 IN MAIN.asm
                    > USED AT LINE 628 IN MAIN.asm
BLOCKSTART3:        053B DEFINED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 633 IN MAIN.asm
                    > USED AT LINE 635 IN MAIN.asm
BLOCKSTART4:        0543 DEFINED AT LINE 646 IN MAIN.asm
                    > USED AT LINE 617 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 621 IN MAIN.asm
BLOCKSTART5:        0546 DEFINED AT LINE 649 IN MAIN.asm
                    > USED AT LINE 645 IN MAIN.asm
BLOCKSTART6:        056E DEFINED AT LINE 668 IN MAIN.asm
                    > USED AT LINE 655 IN MAIN.asm
RBRACE:             0571 DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
BLOCKEND:           0571 DEFINED AT LINE 673 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
BLOCKEND1:          05A3 DEFINED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 688 IN MAIN.asm
BLOCKEND2:          05AF DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 694 IN MAIN.asm
BLOCKEND3:          05C1 DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 708 IN MAIN.asm
BLOCKEND4:          05D5 DEFINED AT LINE 726 IN MAIN.asm
                    > USED AT LINE 724 IN MAIN.asm
BREAK:              05DE DEFINED AT LINE 733 IN MAIN.asm
                    > USED AT LINE 825 IN MAIN.asm
BREAK1:             05E5 DEFINED AT LINE 739 IN MAIN.asm
                    > USED AT LINE 737 IN MAIN.asm
TICK:               05F8 DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 194 IN MAIN.asm
CHAR:               05F8 DEFINED AT LINE 751 IN MAIN.asm
CHAR1:              05FB DEFINED AT LINE 753 IN MAIN.asm
                    > USED AT LINE 764 IN MAIN.asm
CHAR2:              0607 DEFINED AT LINE 762 IN MAIN.asm
                    > USED AT LINE 759 IN MAIN.asm
CHAR3:              060A DEFINED AT LINE 765 IN MAIN.asm
                    > USED AT LINE 757 IN MAIN.asm
SLASH:              060D DEFINED AT LINE 769 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
COMMAND:            060D DEFINED AT LINE 770 IN MAIN.asm
COMMAND_A:          064C DEFINED AT LINE 813 IN MAIN.asm
                    > USED AT LINE 775 IN MAIN.asm
COMMAND_B:          0658 DEFINED AT LINE 822 IN MAIN.asm
                    > USED AT LINE 777 IN MAIN.asm
COMMAND_F:          0664 DEFINED AT LINE 831 IN MAIN.asm
                    > USED AT LINE 783 IN MAIN.asm
COMMAND_I:          067F DEFINED AT LINE 850 IN MAIN.asm
                    > USED AT LINE 787 IN MAIN.asm
COMMAND_L:          068B DEFINED AT LINE 859 IN MAIN.asm
                    > USED AT LINE 791 IN MAIN.asm
COMMAND_M:          0694 DEFINED AT LINE 866 IN MAIN.asm
                    > USED AT LINE 793 IN MAIN.asm
COMMAND_P:          069D DEFINED AT LINE 873 IN MAIN.asm
                    > USED AT LINE 799 IN MAIN.asm
COMMAND_R:          06AC DEFINED AT LINE 884 IN MAIN.asm
                    > USED AT LINE 801 IN MAIN.asm
COMMAND_V:          06BB DEFINED AT LINE 895 IN MAIN.asm
                    > USED AT LINE 807 IN MAIN.asm
CHARS:              06D0 DEFINED AT LINE 910 IN MAIN.asm
                    > USED AT LINE 779 IN MAIN.asm
CHARS1:             06D3 DEFINED AT LINE 912 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
NUMBERS:            06D8 DEFINED AT LINE 915 IN MAIN.asm
                    > USED AT LINE 795 IN MAIN.asm
COMMENT:            06DE DEFINED AT LINE 919 IN MAIN.asm
                    > USED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
SEMICOLON:          06E7 DEFINED AT LINE 929 IN MAIN.asm
                    > USED AT LINE 196 IN MAIN.asm
CREATEFUNC:         06E7 DEFINED AT LINE 930 IN MAIN.asm
CREATEFUNC0:        0702 DEFINED AT LINE 942 IN MAIN.asm
                    > USED AT LINE 938 IN MAIN.asm
CREATEFUNC1:        071A DEFINED AT LINE 961 IN MAIN.asm
                    > USED AT LINE 957 IN MAIN.asm
CREATEFUNC2:        072D DEFINED AT LINE 974 IN MAIN.asm
                    > USED AT LINE 970 IN MAIN.asm
CREATEFUNC2A:       074C DEFINED AT LINE 1000 IN MAIN.asm
                    > USED AT LINE 987 IN MAIN.asm
CREATEFUNC3:        075B DEFINED AT LINE 1012 IN MAIN.asm
                    > USED AT LINE 1022 IN MAIN.asm
CREATEFUNC4:        0766 DEFINED AT LINE 1023 IN MAIN.asm
CREATEFUNC5:        0767 DEFINED AT LINE 1025 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
COMMA:              0783 DEFINED AT LINE 1048 IN MAIN.asm
                    > USED AT LINE 230 IN MAIN.asm
DISCARD:            0783 DEFINED AT LINE 1049 IN MAIN.asm
DISCARD1:           0790 DEFINED AT LINE 1058 IN MAIN.asm
                    > USED AT LINE 1056 IN MAIN.asm
DIV:                0792 DEFINED AT LINE 1061 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
DECIMAL:            07A3 DEFINED AT LINE 1072 IN MAIN.asm
                    > USED AT LINE 781 IN MAIN.asm
DECIMAL1:           07A6 DEFINED AT LINE 1074 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
HEXADECIMAL:        07AB DEFINED AT LINE 1077 IN MAIN.asm
                    > USED AT LINE 785 IN MAIN.asm
DOT:                07B1 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
BUFFERARRAY:        07C3 DEFINED AT LINE 32
                    > USED AT LINE 1084 IN MAIN.asm
BUFFERARRAYM_1571S1094: 07D1 DEFINED AT LINE 39
                    > USED AT LINE 35
BUFFERNUMBER:       080C DEFINED AT LINE 1099 IN MAIN.asm
                    > USED AT LINE 1092 IN MAIN.asm
                    > USED AT LINE 1366 IN MAIN.asm
BUFFERDEC:          0813 DEFINED AT LINE 1106 IN MAIN.asm
BUFFERDEC0:         082D DEFINED AT LINE 1123 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
BUFFERDEC1:         083D DEFINED AT LINE 1137 IN MAIN.asm
                    > USED AT LINE 1125 IN MAIN.asm
BUFFERDEC2:         085D DEFINED AT LINE 1151 IN MAIN.asm
                    > USED AT LINE 1140 IN MAIN.asm
                    > USED AT LINE 1142 IN MAIN.asm
                    > USED AT LINE 1144 IN MAIN.asm
                    > USED AT LINE 1146 IN MAIN.asm
                    > USED AT LINE 1149 IN MAIN.asm
BUFFERDEC3:         085F DEFINED AT LINE 1153 IN MAIN.asm
                    > USED AT LINE 1156 IN MAIN.asm
BUFFERDEC4:         086F DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1160 IN MAIN.asm
BUFFERDEC5:         0870 DEFINED AT LINE 1167 IN MAIN.asm
                    > USED AT LINE 1164 IN MAIN.asm
BUFFERHEX:          0879 DEFINED AT LINE 1178 IN MAIN.asm
                    > USED AT LINE 1102 IN MAIN.asm
BUFFERHEX1:         089A DEFINED AT LINE 1196 IN MAIN.asm
                    > USED AT LINE 1186 IN MAIN.asm
                    > USED AT LINE 1188 IN MAIN.asm
BUFFERHEX2:         08A3 DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1202 IN MAIN.asm
BUFFERSTRING:       08B1 DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 1088 IN MAIN.asm
BUFFERSTRING0:      08B8 DEFINED AT LINE 1221 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
BUFFERSTRING1:      08BE DEFINED AT LINE 1226 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
BUFFERCHAR:         08CB DEFINED AT LINE 1236 IN MAIN.asm
                    > USED AT LINE 1086 IN MAIN.asm
BUFFERXCHARS:       08D0 DEFINED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
BUFFERXCHARS0:      08D1 DEFINED AT LINE 1244 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
BUFFERXCHARS1:      08DA DEFINED AT LINE 1250 IN MAIN.asm
                    > USED AT LINE 1260 IN MAIN.asm
BUFFERXCHARS2:      08E2 DEFINED AT LINE 1257 IN MAIN.asm
                    > USED AT LINE 1249 IN MAIN.asm
DIVIDE:             08EC DEFINED AT LINE 1267 IN MAIN.asm
                    > USED AT LINE 1066 IN MAIN.asm
DIVIDE1:            08F1 DEFINED AT LINE 1270 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
DIVIDE2:            08FE DEFINED AT LINE 1278 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
DIVIDE3:            08FF DEFINED AT LINE 1280 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
EQUALS:             0905 DEFINED AT LINE 1288 IN MAIN.asm
                    > USED AT LINE 251 IN MAIN.asm
NOTEQUALS:          090D DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 216 IN MAIN.asm
LESSTHANEQ:         0916 DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 270 IN MAIN.asm
LESSTHAN:           091B DEFINED AT LINE 1309 IN MAIN.asm
                    > USED AT LINE 272 IN MAIN.asm
LESSTHAN1:          0920 DEFINED AT LINE 1314 IN MAIN.asm
                    > USED AT LINE 1305 IN MAIN.asm
TRUE1:              0923 DEFINED AT LINE 1317 IN MAIN.asm
                    > USED AT LINE 805 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 1297 IN MAIN.asm
NULL1:              0929 DEFINED AT LINE 1321 IN MAIN.asm
FALSE1:             0929 DEFINED AT LINE 1322 IN MAIN.asm
                    > USED AT LINE 848 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 1312 IN MAIN.asm
                    > USED AT LINE 1315 IN MAIN.asm
ERROR1:             092F DEFINED AT LINE 1327 IN MAIN.asm
                    > USED AT LINE 820 IN MAIN.asm
                    > USED AT LINE 829 IN MAIN.asm
                    > USED AT LINE 857 IN MAIN.asm
                    > USED AT LINE 864 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 893 IN MAIN.asm
                    > USED AT LINE 908 IN MAIN.asm
FOREACH:            0936 DEFINED AT LINE 32
                    > USED AT LINE 834 IN MAIN.asm
FOREACHM_1793S1334: 0944 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0983 DEFINED AT LINE 32
                    > USED AT LINE 836 IN MAIN.asm
FUNCSRCM_1807S1349: 098F DEFINED AT LINE 39
                    > USED AT LINE 35
FZ:                 09BE DEFINED AT LINE 1360 IN MAIN.asm
                    > USED AT LINE 846 IN MAIN.asm
PRINTSTACK:         09CB DEFINED AT LINE 1370 IN MAIN.asm
                    > USED AT LINE 880 IN MAIN.asm
CARET:              09CD DEFINED AT LINE 1404 IN MAIN.asm
                    > USED AT LINE 228 IN MAIN.asm
GO:                 09CD DEFINED AT LINE 1405 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                09CE DEFINED AT LINE 1407 IN MAIN.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1582 IN MAIN.asm
                    > USED AT LINE 1584 IN MAIN.asm
GO2:                09D4 DEFINED AT LINE 1412 IN MAIN.asm
                    > USED AT LINE 1410 IN MAIN.asm
GOBLOCK:            09DF DEFINED AT LINE 1420 IN MAIN.asm
                    > USED AT LINE 1415 IN MAIN.asm
GOBLOCK2:           0A04 DEFINED AT LINE 1437 IN MAIN.asm
                    > USED AT LINE 1518 IN MAIN.asm
GOBLOCK3:           0A0E DEFINED AT LINE 1443 IN MAIN.asm
GOFUNC:             0A12 DEFINED AT LINE 1447 IN MAIN.asm
                    > USED AT LINE 1417 IN MAIN.asm
GOFUNC1:            0A2B DEFINED AT LINE 1466 IN MAIN.asm
                    > USED AT LINE 1476 IN MAIN.asm
GOFUNC2:            0A31 DEFINED AT LINE 1473 IN MAIN.asm
                    > USED AT LINE 1465 IN MAIN.asm
GOFUNC3:            0A3C DEFINED AT LINE 1479 IN MAIN.asm
                    > USED AT LINE 1455 IN MAIN.asm
GOFUNC4:            0A54 DEFINED AT LINE 1496 IN MAIN.asm
                    > USED AT LINE 1493 IN MAIN.asm
GOFUNC5:            0A57 DEFINED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1505 IN MAIN.asm
GOFUNC6:            0A5A DEFINED AT LINE 1503 IN MAIN.asm
                    > USED AT LINE 1498 IN MAIN.asm
GOFUNC7:            0A5D DEFINED AT LINE 1506 IN MAIN.asm
GOFUNC8:            0A61 DEFINED AT LINE 1511 IN MAIN.asm
                    > USED AT LINE 1431 IN MAIN.asm
                    > USED AT LINE 1495 IN MAIN.asm
DOLLAR:             0A6C DEFINED AT LINE 1520 IN MAIN.asm
                    > USED AT LINE 181 IN MAIN.asm
HEXNUM:             0A6C DEFINED AT LINE 1521 IN MAIN.asm
HEXNUM1:            0A6F DEFINED AT LINE 1523 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
HEXNUM2:            0A77 DEFINED AT LINE 1529 IN MAIN.asm
                    > USED AT LINE 1527 IN MAIN.asm
UPCASE:             0A89 DEFINED AT LINE 1542 IN MAIN.asm
                    > USED AT LINE 202 IN MAIN.asm
LOWCASE:            0A8E DEFINED AT LINE 1546 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
IDENT1:             0A93 DEFINED AT LINE 1550 IN MAIN.asm
                    > USED AT LINE 1545 IN MAIN.asm
QUESTION:           0AA0 DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 206 IN MAIN.asm
IF:                 0AA0 DEFINED AT LINE 1564 IN MAIN.asm
IFTE:               0AAC DEFINED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1568 IN MAIN.asm
IFTE1:              0AAD DEFINED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1571 IN MAIN.asm
INPUT:              0AB9 DEFINED AT LINE 1588 IN MAIN.asm
                    > USED AT LINE 853 IN MAIN.asm
KEY:                0AC4 DEFINED AT LINE 1598 IN MAIN.asm
                    > USED AT LINE 789 IN MAIN.asm
LITERAL:            0ACD DEFINED AT LINE 1610 IN MAIN.asm
                    > USED AT LINE 862 IN MAIN.asm
OUTPUT:             0AD6 DEFINED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 797 IN MAIN.asm
MAP:                0ADF DEFINED AT LINE 32
                    > USED AT LINE 869 IN MAIN.asm
MAPM_2077S1633:     0AEC DEFINED AT LINE 39
                    > USED AT LINE 35
STAR:               0B23 DEFINED AT LINE 1646 IN MAIN.asm
                    > USED AT LINE 208 IN MAIN.asm
MUL:                0B23 DEFINED AT LINE 1647 IN MAIN.asm
MUL2:               0B25 DEFINED AT LINE 1650 IN MAIN.asm
MUL3:               0B2D DEFINED AT LINE 1655 IN MAIN.asm
                    > USED AT LINE 1664 IN MAIN.asm
NUM:                0B3F DEFINED AT LINE 1668 IN MAIN.asm
                    > USED AT LINE 222 IN MAIN.asm
NUM0:               0B48 DEFINED AT LINE 1674 IN MAIN.asm
                    > USED AT LINE 1672 IN MAIN.asm
NUM1:               0B49 DEFINED AT LINE 1676 IN MAIN.asm
                    > USED AT LINE 1693 IN MAIN.asm
NUM2:               0B61 DEFINED AT LINE 1694 IN MAIN.asm
                    > USED AT LINE 1531 IN MAIN.asm
                    > USED AT LINE 1533 IN MAIN.asm
                    > USED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1681 IN MAIN.asm
NUM3:               0B6C DEFINED AT LINE 1702 IN MAIN.asm
                    > USED AT LINE 1697 IN MAIN.asm
RANGESRC:           0B6F DEFINED AT LINE 32
                    > USED AT LINE 891 IN MAIN.asm
RANGESRCM_2149S1708: 0B7E DEFINED AT LINE 39
                    > USED AT LINE 35
RPAREN:             0BF1 DEFINED AT LINE 1726 IN MAIN.asm
                    > USED AT LINE 278 IN MAIN.asm
SHIFTLEFT:          0BF9 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 265 IN MAIN.asm
SHIFTLEFT1:         0C01 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1743 IN MAIN.asm
SHIFTLEFT2:         0C02 DEFINED AT LINE 1742 IN MAIN.asm
                    > USED AT LINE 1739 IN MAIN.asm
SHIFTRIGHT:         0C09 DEFINED AT LINE 1750 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
SHIFTRIGHT1:        0C11 DEFINED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1761 IN MAIN.asm
SHIFTRIGHT2:        0C15 DEFINED AT LINE 1760 IN MAIN.asm
                    > USED AT LINE 1756 IN MAIN.asm
DQUOTE:             0C1C DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 232 IN MAIN.asm
STRING:             0C1C DEFINED AT LINE 1770 IN MAIN.asm
STRING1:            0C25 DEFINED AT LINE 1777 IN MAIN.asm
                    > USED AT LINE 1786 IN MAIN.asm
STRING2:            0C28 DEFINED AT LINE 1781 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
STRING3:            0C31 DEFINED AT LINE 1787 IN MAIN.asm
                    > USED AT LINE 1784 IN MAIN.asm
MINUS:              0C44 DEFINED AT LINE 1804 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
SUB:                0C50 DEFINED AT LINE 1812 IN MAIN.asm
                    > USED AT LINE 1809 IN MAIN.asm
SUB1:               0C5A DEFINED AT LINE 1819 IN MAIN.asm
                    > USED AT LINE 1815 IN MAIN.asm
PRINTBUFFER:        0C63 DEFINED AT LINE 32
                    > USED AT LINE 876 IN MAIN.asm
PRINTBUFFERM_2265S1831: 0C6F DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTCHARS:         0C89 DEFINED AT LINE 1836 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
PRINTCHARS1:        0C90 DEFINED AT LINE 1842 IN MAIN.asm
                    > USED AT LINE 1851 IN MAIN.asm
PRINTCHARS2:        0C96 DEFINED AT LINE 1847 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1928 IN MAIN.asm
RECUR:              0C9B DEFINED AT LINE 1853 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
REMAIN:             0CA1 DEFINED AT LINE 1858 IN MAIN.asm
                    > USED AT LINE 889 IN MAIN.asm
SIZE:               0CA7 DEFINED AT LINE 1863 IN MAIN.asm
                    > USED AT LINE 803 IN MAIN.asm
CONSTBUFSTART:      0CAF DEFINED AT LINE 1872 IN MAIN.asm
                    > USED AT LINE 904 IN MAIN.asm
CONSTHEAPSTART:     0CB4 DEFINED AT LINE 1876 IN MAIN.asm
CONSTTIBSTART:      0CB9 DEFINED AT LINE 1880 IN MAIN.asm
                    > USED AT LINE 906 IN MAIN.asm
VARBUFPTR:          0CBE DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
VARHEAPPTR:         0CC7 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
VARTIBPTR:          0CD0 DEFINED AT LINE 1894 IN MAIN.asm
                    > USED AT LINE 902 IN MAIN.asm
VARIABLE:           0CD9 DEFINED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 314 IN MAIN.asm
                    > USED AT LINE 1887 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1897 IN MAIN.asm
CONSTANT:           0CDC DEFINED AT LINE 1901 IN MAIN.asm
                    > USED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 1878 IN MAIN.asm
                    > USED AT LINE 1882 IN MAIN.asm
FILTER:             0CDF DEFINED AT LINE 1910 IN MAIN.asm
FLUSHBUFFER:        0CE1 DEFINED AT LINE 1919 IN MAIN.asm
                    > USED AT LINE 1115 IN MAIN.asm
                    > USED AT LINE 1172 IN MAIN.asm
                    > USED AT LINE 1184 IN MAIN.asm
                    > USED AT LINE 1192 IN MAIN.asm
                    > USED AT LINE 1212 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
                    > USED AT LINE 2096 IN MAIN.asm
JUMPTABLE:          0CF8 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 236 IN MAIN.asm
                    > USED AT LINE 771 IN MAIN.asm
                    > USED AT LINE 814 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 851 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 874 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 1082 IN MAIN.asm
JUMPTABLE0:         0CFA DEFINED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 1951 IN MAIN.asm
JUMPTABLE1:         0D07 DEFINED AT LINE 1952 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
JUMPTABLE2:         0D08 DEFINED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1947 IN MAIN.asm
PRTSTR0:            0D0E DEFINED AT LINE 1962 IN MAIN.asm
                    > USED AT LINE 1968 IN MAIN.asm
PRTSTR:             0D12 DEFINED AT LINE 1965 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
                    > USED AT LINE 2092 IN MAIN.asm
NESTING:            0D17 DEFINED AT LINE 1981 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2176 IN MAIN.asm
NESTING0:           0D21 DEFINED AT LINE 1987 IN MAIN.asm
                    > USED AT LINE 1983 IN MAIN.asm
                    > USED AT LINE 1985 IN MAIN.asm
NESTING1A:          0D28 DEFINED AT LINE 1992 IN MAIN.asm
                    > USED AT LINE 1989 IN MAIN.asm
NESTING1:           0D2B DEFINED AT LINE 1995 IN MAIN.asm
                    > USED AT LINE 1986 IN MAIN.asm
NESTING2:           0D3A DEFINED AT LINE 2004 IN MAIN.asm
                    > USED AT LINE 1999 IN MAIN.asm
                    > USED AT LINE 2001 IN MAIN.asm
NESTING3:           0D3C DEFINED AT LINE 2007 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
NESTING4:           0D47 DEFINED AT LINE 2014 IN MAIN.asm
                    > USED AT LINE 2009 IN MAIN.asm
                    > USED AT LINE 2011 IN MAIN.asm
PROMPT:             0D49 DEFINED AT LINE 2018 IN MAIN.asm
                    > USED AT LINE 2097 IN MAIN.asm
CRLF:               0D52 DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2189 IN MAIN.asm
PRINTSTR:           0D59 DEFINED AT LINE 2030 IN MAIN.asm
                    > USED AT LINE 2019 IN MAIN.asm
                    > USED AT LINE 2024 IN MAIN.asm
                    > USED AT LINE 2243 IN MAIN.asm
TITLESTR:           0D60 DEFINED AT LINE 2037 IN MAIN.asm
                    > USED AT LINE 2041 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
INIT:               0D74 DEFINED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2089 IN MAIN.asm
INIT1:              0D7C DEFINED AT LINE 2044 IN MAIN.asm
                    > USED AT LINE 2050 IN MAIN.asm
WARMINIT:           0D84 DEFINED AT LINE 2052 IN MAIN.asm
COLDBOOT0:          0D97 DEFINED AT LINE 2059 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2085 IN MAIN.asm
COLDINIT:           0DA1 DEFINED AT LINE 2065 IN MAIN.asm
COLDBOOT1:          0DB2 DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2077 IN MAIN.asm
COLDSTART:          0DBF DEFINED AT LINE 2083 IN MAIN.asm
                    > USED AT LINE 827 IN MAIN.asm
START:              0DC8 DEFINED AT LINE 2087 IN MAIN.asm
                    > USED AT LINE 7
START1:             0DCE DEFINED AT LINE 2090 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2086 IN MAIN.asm
INTERPRET:          0DD4 DEFINED AT LINE 2094 IN MAIN.asm
                    > USED AT LINE 2222 IN MAIN.asm
                    > USED AT LINE 2236 IN MAIN.asm
                    > USED AT LINE 2251 IN MAIN.asm
                    > USED AT LINE 2254 IN MAIN.asm
                    > USED AT LINE 2259 IN MAIN.asm
INTERPRET2:         0DE3 DEFINED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2241 IN MAIN.asm
                    > USED AT LINE 2245 IN MAIN.asm
INTERPRET3:         0DEB DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
INTERPRET4:         0DF6 DEFINED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
INTERPRET5:         0DFB DEFINED AT LINE 2127 IN MAIN.asm
                    > USED AT LINE 2177 IN MAIN.asm
                    > USED AT LINE 2192 IN MAIN.asm
INTERPRET5A:        0E1E DEFINED AT LINE 2164 IN MAIN.asm
INTERPRET6:         0E20 DEFINED AT LINE 2169 IN MAIN.asm
                    > USED AT LINE 2131 IN MAIN.asm
INTERPRET7:         0E2E DEFINED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2136 IN MAIN.asm
INTERPRET8:         0E41 DEFINED AT LINE 2194 IN MAIN.asm
                    > USED AT LINE 2134 IN MAIN.asm
NEXT:               0E5C DEFINED AT LINE 2207 IN MAIN.asm
                    > USED AT LINE 63 IN MAIN.asm
                    > USED AT LINE 2211 IN MAIN.asm
NEXT1:              0E6D DEFINED AT LINE 2219 IN MAIN.asm
                    > USED AT LINE 2212 IN MAIN.asm
EXIT:               0E74 DEFINED AT LINE 2224 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
RUN:                0E78 DEFINED AT LINE 2228 IN MAIN.asm
                    > USED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2249 IN MAIN.asm
                    > USED AT LINE 2257 IN MAIN.asm
ERROR:              0E7C DEFINED AT LINE 2233 IN MAIN.asm
                    > USED AT LINE 1330 IN MAIN.asm
BACKSPACE_:         0E8F DEFINED AT LINE 2238 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
EDIT_:              0E9F DEFINED AT LINE 2248 IN MAIN.asm
                    > USED AT LINE 2139 IN MAIN.asm
REEDIT_:            0EB7 DEFINED AT LINE 2253 IN MAIN.asm
                    > USED AT LINE 2143 IN MAIN.asm
PRINTSTACK_:        0EBA DEFINED AT LINE 2256 IN MAIN.asm
                    > USED AT LINE 2145 IN MAIN.asm
F1:                 0EC4 DEFINED AT LINE 10
                    > USED AT LINE 838 IN MAIN.asm
F2:                 0EC4 DEFINED AT LINE 11
                    > USED AT LINE 840 IN MAIN.asm
F3:                 0EC4 DEFINED AT LINE 12
                    > USED AT LINE 842 IN MAIN.asm
F4:                 0EC4 DEFINED AT LINE 13
                    > USED AT LINE 844 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1361 IN MAIN.asm
                    > USED AT LINE 1422 IN MAIN.asm
                    > USED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2084 IN MAIN.asm
                    > USED AT LINE 2088 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 61 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
                    > USED AT LINE 2100 IN MAIN.asm
                    > USED AT LINE 2108 IN MAIN.asm
                    > USED AT LINE 2171 IN MAIN.asm
                    > USED AT LINE 2181 IN MAIN.asm
                    > USED AT LINE 2196 IN MAIN.asm
                    > USED AT LINE 2199 IN MAIN.asm
BUF:                2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 62 IN MAIN.asm
                    > USED AT LINE 1873 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 2071 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2067 IN MAIN.asm
VDATAWIDTH:         23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 441 IN MAIN.asm
                    > USED AT LINE 478 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
                    > USED AT LINE 913 IN MAIN.asm
VNUMBASE:           23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 1100 IN MAIN.asm
VTIBPTR:            23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 1896 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2198 IN MAIN.asm
VBUFPTR:            23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1107 IN MAIN.asm
                    > USED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1180 IN MAIN.asm
                    > USED AT LINE 1193 IN MAIN.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1231 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
                    > USED AT LINE 1261 IN MAIN.asm
                    > USED AT LINE 1885 IN MAIN.asm
                    > USED AT LINE 1886 IN MAIN.asm
                    > USED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 1925 IN MAIN.asm
VNEXT:              23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 2079 IN MAIN.asm
VHEAPPTR:           23F0 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 430 IN MAIN.asm
                    > USED AT LINE 464 IN MAIN.asm
                    > USED AT LINE 468 IN MAIN.asm
                    > USED AT LINE 503 IN MAIN.asm
                    > USED AT LINE 538 IN MAIN.asm
                    > USED AT LINE 663 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 940 IN MAIN.asm
                    > USED AT LINE 945 IN MAIN.asm
                    > USED AT LINE 976 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 1791 IN MAIN.asm
                    > USED AT LINE 1890 IN MAIN.asm
                    > USED AT LINE 1891 IN MAIN.asm
VRECUR:             23F2 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 721 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 1855 IN MAIN.asm
VPOINTER:           23F4 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 312 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
                    > USED AT LINE 396 IN MAIN.asm
                    > USED AT LINE 485 IN MAIN.asm
                    > USED AT LINE 553 IN MAIN.asm
                    > USED AT LINE 1554 IN MAIN.asm
                    > USED AT LINE 1900 IN MAIN.asm
VREMAIN:            23F6 DEFINED AT LINE 47 IN ram.asm
                    > USED AT LINE 1068 IN MAIN.asm
                    > USED AT LINE 1859 IN MAIN.asm
VSAVEDIP:           23F8 DEFINED AT LINE 49 IN ram.asm
                    > USED AT LINE 2053 IN MAIN.asm
                    > USED AT LINE 2201 IN MAIN.asm
VSAVEDSP:           23FA DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 2054 IN MAIN.asm
                    > USED AT LINE 2202 IN MAIN.asm
VSAVEDNEXT:         23FC DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 2055 IN MAIN.asm
                    > USED AT LINE 2203 IN MAIN.asm
VSAVEDBP:           23FE DEFINED AT LINE 52 IN ram.asm
                    > USED AT LINE 2056 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
VTEMP1:             2400 DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 423 IN MAIN.asm
                    > USED AT LINE 469 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 676 IN MAIN.asm
                    > USED AT LINE 720 IN MAIN.asm
                    > USED AT LINE 931 IN MAIN.asm
                    > USED AT LINE 1043 IN MAIN.asm
                    > USED AT LINE 1421 IN MAIN.asm
                    > USED AT LINE 1427 IN MAIN.asm
                    > USED AT LINE 1456 IN MAIN.asm
                    > USED AT LINE 1477 IN MAIN.asm
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1490 IN MAIN.asm
VTEMP2:             2402 DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 679 IN MAIN.asm
                    > USED AT LINE 719 IN MAIN.asm
                    > USED AT LINE 933 IN MAIN.asm
                    > USED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1457 IN MAIN.asm
                    > USED AT LINE 1478 IN MAIN.asm
VLASTDEF:           2404 DEFINED AT LINE 58 IN ram.asm
TBPTR:              2406 DEFINED AT LINE 59 IN ram.asm
TITLEBUF:           2408 DEFINED AT LINE 61 IN ram.asm
                    > USED AT LINE 2042 IN MAIN.asm
                    > USED AT LINE 2061 IN MAIN.asm
                    > USED AT LINE 2091 IN MAIN.asm
HEAP:               241C DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 64 IN MAIN.asm
                    > USED AT LINE 651 IN MAIN.asm
                    > USED AT LINE 1877 IN MAIN.asm
