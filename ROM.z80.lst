0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $2000   ; TODO: set this to TEC 1G
0000                ROMSIZE:   EQU   $2000   
0000                RAMSIZE:   EQU   $2000   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 23               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 23               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 23               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 23               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 23               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 23               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 23               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 23               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 23               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 23               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 00 21               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 23               LD   (RST08),HL   
0094   22 D2 23               LD   (RST10),HL   
0097   22 D4 23               LD   (RST18),HL   
009A   22 D6 23               LD   (RST20),HL   
009D   22 D8 23               LD   (RST28),HL   
00A0   22 DA 23               LD   (RST30),HL   
00A3   22 DE 23               LD   (INTVEC),HL   
00A6   22 E0 23               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 23               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 23               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 00 21               LD   sp,STACK   ; start Monty
00C6   C3 87 10               JP   start   
00C9                             ; 
00C9                             ; *************************************************************************
00C9                             ; 
00C9                             ;  Monty programming language for the Z80
00C9                             ; 
00C9                             ;  by John Hardy 2023
00C9                             ; 
00C9                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00C9                             ; 
00C9                             ;  see the LICENSE file in this repo for more information
00C9                             ; 
00C9                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00C9                             ;  Inspiration from Charles H. Moore, Peter Jakacki and André Staltz
00C9                             ; 
00C9                             ; *****************************************************************************
00C9                TRUE:     EQU   -1   ; C-style true
00C9                FALSE:    EQU   0   
00C9                NUL:      EQU   0   ; exit code
00C9                DQ:       EQU   $22   ; " double quote char
00C9                CTRL_C:   EQU   3   
00C9                CTRL_E:   EQU   5   
00C9                CTRL_H:   EQU   8   
00C9                CTRL_J:   EQU   10   
00C9                CTRL_L:   EQU   12   
00C9                CTRL_P:   EQU   16   
00C9                CTRL_S:   EQU   19   
00C9                ESC:      EQU   27   
00C9                             ; macros for inlining a onty function in assembly
00C9                             ; follow immediately with a null terminated block of Monty code
00C9                .macro FUNC,name,numLocals,argsStr
00C9                             ; 
00C9                name:
00C9                 call go
00C9                 dw NUL                      ; NUL closure
00C9                 dw name%%M
00C9                 dw $+2
00C9                 db numLocals                ; num_locals
00C9                 .pstr argsStr
00C9                name%%M:
00C9                .endm
00C9                 
00C9                .macro PERFORM,name
00C9                             ; 
00C9                 ld ix,perform%%M
00C9                 jp name
00C9                perform%%M:
00C9                .endm
00C9                 
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ;********************** PAGE 1 BEGIN *********************************************
0180                OPCODES:      
0180   21                     DB   lsb(bang_)   ; !     1
0181   0C                     DB   lsb(dquote_)   ; "     2
0182   5E                     DB   lsb(hash_)   ; #     1
0183   09                     DB   lsb(dollar_)   ; $     1
0184   12                     DB   lsb(percent_)   ; %     1
0185   73                     DB   lsb(amper_)   ; &     1
0186   0C                     DB   lsb(quote_)   ; '     2
0187   18                     DB   lsb(lparen_)   ; (     1
0188   6B                     DB   lsb(rparen_)   ; )     1
0189   A5                     DB   lsb(star_)   ; *     1
018A   C9                     DB   lsb(plus_)   ; +     1
018B   06                     DB   lsb(comma_)   ; ,     2
018C   7D                     DB   lsb(minus_)   ; -     1
018D   0F                     DB   lsb(dot_)   ; .     2
018E   1B                     DB   lsb(slash_)   ; /	    1
018F   1E                     DB   lsb(num_)   ; 0     1
0190   1E                     DB   lsb(num_)   ; 1
0191   1E                     DB   lsb(num_)   ; 2
0192   1E                     DB   lsb(num_)   ; 3
0193   1E                     DB   lsb(num_)   ; 4
0194   1E                     DB   lsb(num_)   ; 5
0195   1E                     DB   lsb(num_)   ; 6
0196   1E                     DB   lsb(num_)   ; 7
0197   1E                     DB   lsb(num_)   ; 8
0198   1E                     DB   lsb(num_)   ; 9
0199   04                     DB   lsb(colon_)   ; :     2
019A   5E                     DB   lsb(semicolon_)   ; ;     2
019B   4C                     DB   lsb(lt_)   ; <     1
019C   32                     DB   lsb(eq_)   ; =     1
019D   41                     DB   lsb(gt_)   ; >     1
019E   15                     DB   lsb(question_)   ; ?     1
019F   E9                     DB   lsb(at_)   ; @     2
01A0   E5                     DB   lsb(upcase_)   ; A     1
01A1   E5                     DB   lsb(upcase_)   ; B
01A2   E5                     DB   lsb(upcase_)   ; C
01A3   E5                     DB   lsb(upcase_)   ; D
01A4   E5                     DB   lsb(upcase_)   ; E
01A5   E5                     DB   lsb(upcase_)   ; F
01A6   E5                     DB   lsb(upcase_)   ; G
01A7   E5                     DB   lsb(upcase_)   ; h
01A8   E5                     DB   lsb(upcase_)   ; I
01A9   E5                     DB   lsb(upcase_)   ; J
01AA   E5                     DB   lsb(upcase_)   ; K
01AB   E5                     DB   lsb(upcase_)   ; L
01AC   E5                     DB   lsb(upcase_)   ; M
01AD   E5                     DB   lsb(upcase_)   ; N
01AE   E5                     DB   lsb(upcase_)   ; O
01AF   E5                     DB   lsb(upcase_)   ; p
01B0   E5                     DB   lsb(upcase_)   ; Q
01B1   E5                     DB   lsb(upcase_)   ; R
01B2   E5                     DB   lsb(upcase_)   ; S
01B3   E5                     DB   lsb(upcase_)   ; T
01B4   E5                     DB   lsb(upcase_)   ; U
01B5   E5                     DB   lsb(upcase_)   ; V
01B6   E5                     DB   lsb(upcase_)   ; W
01B7   E5                     DB   lsb(upcase_)   ; X
01B8   E5                     DB   lsb(upcase_)   ; Y
01B9   E5                     DB   lsb(upcase_)   ; Z
01BA   12                     DB   lsb(lbrack_)   ; [     2
01BB   2E                     DB   lsb(backslash_)   ; \     2
01BC   4F                     DB   lsb(rbrack_)   ; ]     2
01BD   9F                     DB   lsb(caret_)   ; ^     1
01BE   E1                     DB   lsb(underscore_)   ; _     2
01BF   B5                     DB   lsb(grave_)   ; `     2   	
01C0   00                     DB   lsb(lowcase_)   ; a     1
01C1   00                     DB   lsb(lowcase_)   ; b
01C2   00                     DB   lsb(lowcase_)   ; c
01C3   00                     DB   lsb(lowcase_)   ; d
01C4   00                     DB   lsb(lowcase_)   ; e
01C5   00                     DB   lsb(lowcase_)   ; f
01C6   00                     DB   lsb(lowcase_)   ; g
01C7   00                     DB   lsb(lowcase_)   ; h
01C8   00                     DB   lsb(lowcase_)   ; i
01C9   00                     DB   lsb(lowcase_)   ; j
01CA   00                     DB   lsb(lowcase_)   ; k
01CB   00                     DB   lsb(lowcase_)   ; l
01CC   00                     DB   lsb(lowcase_)   ; m
01CD   00                     DB   lsb(lowcase_)   ; n
01CE   00                     DB   lsb(lowcase_)   ; o
01CF   00                     DB   lsb(lowcase_)   ; p
01D0   00                     DB   lsb(lowcase_)   ; q
01D1   00                     DB   lsb(lowcase_)   ; r
01D2   00                     DB   lsb(lowcase_)   ; s
01D3   00                     DB   lsb(lowcase_)   ; t
01D4   00                     DB   lsb(lowcase_)   ; u
01D5   00                     DB   lsb(lowcase_)   ; v
01D6   00                     DB   lsb(lowcase_)   ; w
01D7   00                     DB   lsb(lowcase_)   ; x
01D8   00                     DB   lsb(lowcase_)   ; y
01D9   00                     DB   lsb(lowcase_)   ; z
01DA   CB                     DB   lsb(lbrace_)   ; {     1
01DB   D0                     DB   lsb(pipe_)   ; |     1
01DC   DB                     DB   lsb(rbrace_)   ; }     1
01DD   DE                     DB   lsb(tilde_)   ; ~     1
01DE                             ;********************** PAGE 1 END *********************************************
01DE                             ; ***********************************************************************
01DE                             ; Initial values for system vars		
01DE                             ; ***********************************************************************		
01DE                ISYSVARS:      
01DE   00 21                  DW   TIB   ; vTIBPtr pointer into TIB
01E0   00 22                  DW   BUFFER   ; vBufPtr pointer into BUF
01E2   22 24                  DW   HEAP   ; vHeapPtr \h start of the free mem
01E4   00 00                  DW   NUL   ; vRecurPtr
01E6   02                     DB   2   ; vDataWidth in bytes of array operations (default 1 byte)
01E7   0A                     DB   10   ; vNumBase = 10
01E8   24                     DB   "$"   ; vHexPrefix
01E9   FF                     DB   TRUE   ; vEcho
01EA   00                     DB   FALSE   ; vStrMode
01EB   00                     DB   0   
01EC   00                     DB   0   
01ED   00                     DB   0   
01EE   00                     DB   0   
01EF   00                     DB   0   
01F0                             ; **********************************************************************			
01F0                             ; title string (also used by warm boot)
01F0                             ; **********************************************************************
01F0                TITLESTR:      
01F0   1B 5B 32 4A 4D 6F 6E 74 79 20 56 30 2E 31 0D 0A 00 00 00 00 .CSTR   ESC,"[2JMonty V0.1\r\n",0,0,0   
0204                             ;********************** PAGE 2 BEGIN ***********************************
0204                COLON_:      
0204   DD E9                  JP   (ix)   
0206                COMMA_:      
0206   C3 2A 0B               JP   comma   
0209                DOLLAR_:      
0209   C3 AD 0B               JP   dollar   
020C                DQUOTE_:      
020C                QUOTE_:      
020C   C3 D7 0B               JP   quote   
020F                DOT_:        
020F   C3 00 04               JP   dot   
0212                PERCENT_:      
0212   C3 F1 0B               JP   percent   
0215                QUESTION_:      
0215   C3 CA 0B               JP   question   
0218                LPAREN_:      
0218   C3 CB 03               JP   lbrace   
021B                SLASH_:      
021B   C3 00 05               JP   slash   
021E                NUM_:        
021E   C3 26 0C               JP   num   
0221                BANG_:       
0221                BANG:        ; logical invert, any non zero value
0221   03                     INC   bc   
0222   0A                     LD   a,(bc)   
0223   FE 3D                  CP   "="   
0225   20 05                  JR   nz,not   
0227   E1                     POP   hl   
0228   D1                     POP   de   
0229   C3 68 0D               JP   notequals   
022C                NOT:         
022C   0B                     DEC   bc   
022D   21 00 00               LD   hl,0   ; is considered true
0230   18 0B                  JR   eq1   
0232                EQ_:         
0232                EQ:          
0232   03                     INC   bc   
0233   0A                     LD   a,(bc)   
0234   FE 3D                  CP   "="   
0236   28 04                  JR   z,eq0   
0238   0B                     DEC   bc   
0239   C3 50 0D               JP   assign   
023C                EQ0:         
023C   E1                     POP   hl   
023D                EQ1:         
023D   D1                     POP   de   
023E   C3 61 0D               JP   equals   
0241                GT_:         
0241                GT:          
0241   03                     INC   bc   
0242   0A                     LD   a,(bc)   
0243   FE 3E                  CP   ">"   
0245   CA C8 0D               JP   z,shiftRight   
0248   D1                     POP   de   
0249   E1                     POP   hl   
024A   18 09                  JR   lt1   
024C                LT_:         
024C                LT:          
024C   03                     INC   bc   
024D   0A                     LD   a,(bc)   
024E   FE 3C                  CP   "<"   
0250   CA AC 0D               JP   z,shiftLeft   
0253   E1                     POP   hl   
0254   D1                     POP   de   
0255                LT1:         
0255   FE 3D                  CP   "="   
0257   CA 6F 0D               JP   z,lessthaneq   
025A   0B                     DEC   bc   
025B   C3 74 0D               JP   lessthan   
025E                             ; index of an array, based on vDataWidth 22
025E                             ; array* num -- value    ; also sets vPointer to address
025E                HASH_:       
025E                SEMICOLON_:      
025E                SEMICOLON:      
025E                ARRAYINDEX:      
025E   E1                     POP   hl   ; hl = index
025F   D1                     POP   de   ; de = array
0260   3A EE 23               LD   a,(vDataWidth)   ; a = data width
0263   3D                     DEC   a   
0264   28 01                  JR   z,arrayIndex1   
0266                ARRAYINDEX0:      
0266   29                     ADD   hl,hl   ; if data width = 2 then double
0267                ARRAYINDEX1:      
0267   19                     ADD   hl,de   ; add addr
0268   C3 61 0F               JP   variable   
026B                             ;                               4
026B                RPAREN_:      
026B                             ; jp rparen
026B                RPAREN:      
026B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
026E   FD 46 09               LD   b,(iy+9)   
0271   DD E9                  JP   (ix)   
0273                             ; & and                          14
0273                             ; a b -- c
0273                AMPER_:      
0273                AMPER:       
0273                AND:         
0273   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
0274   E1                     POP   hl   
0275   7B                     LD   a,e   
0276   A5                     AND   l   
0277   6F                     LD   l,a   
0278   7A                     LD   a,d   
0279   A4                     AND   h   
027A   67                     LD   h,a   
027B   18 5B                  JR   add3   
027D                             ; - sub
027D                             ; a b -- c
027D                             ; -- sub
027D                             ; b1 -- b2
027D                             ; -= sub
027D                             ; a b1 -- b2
027D                MINUS_:      
027D                MINUS:       
027D   03                     INC   bc   ; check if sign of a number
027E   0A                     LD   a,(bc)   
027F   0B                     DEC   bc   
0280   FE 30                  CP   "0"   
0282   38 05                  JR   c,sub   
0284   FE 3A                  CP   "9"+1   
0286   DA 26 0C               JP   c,num   
0289                SUB:         ; Subtract the value 2nd on stack from top of stack
0289   E1                     POP   hl   ; hl = arg_b
028A   03                     INC   bc   
028B   FE 2D                  CP   "-"   
028D   20 04                  JR   nz,sub1   
028F   2B                     DEC   hl   ; --
0290   C3 52 0D               JP   assign0   
0293                SUB1:        
0293   D1                     POP   de   ; de = arg_a
0294   FE 3D                  CP   "="   
0296   28 02                  JR   z,sub2   
0298   0B                     DEC   bc   ; -
0299   EB                     EX   de,hl   
029A                SUB2:        
029A   B7                     OR   a   ; -=
029B   ED 52                  SBC   hl,de   
029D                SUB3:        
029D   FE 3D                  CP   "="   
029F   CA 52 0D               JP   z,assign0   
02A2   E5                     PUSH   hl   
02A3   DD E9                  JP   (ix)   
02A5                STAR_:       ; 21
02A5                STAR:        
02A5   03                     INC   bc   ; check for ** spread
02A6   0A                     LD   a,(bc)   
02A7   FE 2A                  CP   "*"   
02A9   CA 88 0D               JP   z,spread   
02AC   0B                     DEC   bc   
02AD                MUL:         
02AD   D1                     POP   de   ; get first value
02AE   E1                     POP   hl   
02AF                MUL2:        
02AF   C5                     PUSH   bc   ; Preserve the IP
02B0   44 4D                  LD   bc,hl   ; bc = 2nd value
02B2   21 00 00               LD   hl,0   
02B5   3E 10                  LD   a,16   
02B7                MUL3:        
02B7   29                     ADD   hl,hl   
02B8   CB 13                  RL   e   
02BA   CB 12                  RL   d   
02BC   30 04                  JR   nc,$+6   
02BE   09                     ADD   hl,bc   
02BF   30 01                  JR   nc,$+3   
02C1   13                     INC   de   
02C2   3D                     DEC   a   
02C3   20 F2                  JR   nz,mul3   
02C5   C1                     POP   bc   ; Restore the IP
02C6   C3 D8 02               JP   add3   
02C9                             ; + add                         25
02C9                             ; a b -- c
02C9                PLUS_:       
02C9                PLUS:        
02C9                ADD:         
02C9   03                     INC   bc   
02CA   0A                     LD   a,(bc)   
02CB   FE 2B                  CP   "+"   ; ++ increment variable
02CD   20 05                  JR   nz,add1   
02CF   E1                     POP   hl   
02D0   23                     INC   hl   
02D1   C3 52 0D               JP   assign0   
02D4                ADD1:        
02D4   0B                     DEC   bc   
02D5   D1                     POP   de   ; second term
02D6   E1                     POP   hl   ; first term
02D7   19                     ADD   hl,de   
02D8                ADD3:        
02D8   03                     INC   bc   
02D9   0A                     LD   a,(bc)   
02DA   FE 3D                  CP   "="   
02DC   28 04                  JR   z,add4   
02DE   0B                     DEC   bc   
02DF   E5                     PUSH   hl   
02E0   DD E9                  JP   (ix)   
02E2                ADD4:        
02E2   C3 52 0D               JP   assign0   
02E5                             ;                               18
02E5                UPCASE_:      
02E5                UPCASE:      
02E5   0A                     LD   a,(bc)   ; a = identifier char
02E6   D6 41                  SUB   "A"   ; "A" = 0
02E8   18 1B                  JR   ident1   
02EA                             ;********************** PAGE 2 END *********************************************
02EA                          ALIGN   $100   
0300                             ;********************** PAGE 3 BEGIN *********************************************
0300                LOWCASE_:      
0300                LOWCASE:      
0300   0A                     LD   a,(bc)   
0301   D6 61                  SUB   "a"   
0303   C6 1A                  ADD   a,26   
0305                IDENT1:      
0305   87                     ADD   a,a   ; l = a * 2
0306   6F                     LD   l,a   
0307   26 23                  LD   h,msb(VARS)   
0309   22 F8 23               LD   (vPointer),hl   ; store address in setter
030C   5E                     LD   e,(hl)   
030D   23                     INC   hl   
030E   56                     LD   d,(hl)   
030F   D5                     PUSH   de   
0310   DD E9                  JP   (ix)   
0312                             ; [                             14
0312                LBRACK_:      
0312                LBRACK:      
0312                ARRAYSTART:      
0312   11 00 00               LD   de,0   ; create stack frame
0315   D5                     PUSH   de   ; push null for IP
0316   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
0319   FD 56 05               LD   d,(iy+5)   ; 
031C   D5                     PUSH   de   ; 
031D   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0320   FD 56 03               LD   d,(iy+3)   ; 
0323   D5                     PUSH   de   ; 
0324   FD E5                  PUSH   iy   ; push BP
0326   FD 21 00 00            LD   iy,0   ; BP = SP
032A   FD 39                  ADD   iy,sp   
032C   DD E9                  JP   (ix)   
032E                             ; \                             19
032E                BACKSLASH_:      
032E                BACKSLASH:      
032E                LAMBDA:      
032E   DD E5                  PUSH   ix   
0330   CD 1A 0E               CALL   parseArgs   
0333                LAMBDA1:      
0333   03                     INC   bc   ; arg_list must ve immediately followed by {
0334   0A                     LD   a,(bc)   
0335   FE 21                  CP   " "+1   ; skip white space
0337   38 FA                  JR   c,lambda1   
0339   FE 7B                  CP   "{"   
033B   28 06                  JR   z,lambda2   
033D   21 02 00               LD   hl,2   ; error 2: parse error
0340   C3 2D 11               JP   error   
0343                LAMBDA2:      
0343   CD 50 0E               CALL   parseBlock   
0346   CD BF 0E               CALL   createFunc   
0349   E1                     POP   hl   
034A   DD E1                  POP   ix   
034C   E5                     PUSH   hl   
034D   DD E9                  JP   (ix)   
034F                RBRACK_:      
034F                RBRACK:      
034F                ARRAYEND:      ; 53
034F   FD 54                  LD   d,iyh   ; de = BP
0351   FD 5D                  LD   e,iyl   
0353   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0357   62 6B                  LD   hl,de   ; hl = de = BP
0359   B7                     OR   a   
035A   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
035C   CB 3C                  SRL   h   ; 
035E   CB 1D                  RR   l   
0360   44 4D                  LD   bc,hl   ; bc = count
0362   2A EA 23               LD   hl,(vHeapPtr)   ; hl = array[-4]
0365   71                     LD   (hl),c   ; write num items in length word
0366   23                     INC   hl   
0367   70                     LD   (hl),b   
0368   23                     INC   hl   ; hl = array[0], bc = count
0369                             ; de = BP, hl = array[0], bc = count
0369   18 15                  JR   arrayEnd3   
036B                ARRAYEND1:      
036B   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
036E   77                     LD   (hl),a   ; write lsb of array item
036F   23                     INC   hl   ; move to msb of array item
0370   3A EE 23               LD   a,(vDataWidth)   ; vDataWidth=1?
0373   3D                     DEC   a   
0374   28 05                  JR   z,arrayEnd2   
0376   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0379   77                     LD   (hl),a   ; write msb of array item
037A   23                     INC   hl   ; move to next word in array
037B                ARRAYEND2:      
037B   FD 2B                  DEC   iy   ; move to next word on stack
037D   FD 2B                  DEC   iy   
037F   0B                     DEC   bc   ; dec items count
0380                ARRAYEND3:      
0380   79                     LD   a,c   ; if not zero loop
0381   B0                     OR   b   
0382   20 E7                  JR   nz,arrayEnd1   
0384   EB                     EX   de,hl   ; de = end of array, hl = BP
0385   F9                     LD   sp,hl   ; sp = BP
0386   E1                     POP   hl   ; de = end of array, hl = old BP
0387   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0388   FD 62                  LD   iyh,d   
038A   FD 6B                  LD   iyl,e   
038C   D1                     POP   de   ; pop arg_list (discard)
038D   D1                     POP   de   ; pop first_arg* (discard)
038E   D1                     POP   de   ; pop IP (discard)
038F   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = array[-2]
0393   13                     INC   de   
0394   13                     INC   de   
0395   D5                     PUSH   de   ; return array[0]
0396   22 EA 23               LD   (vHeapPtr),hl   ; move heap* to end of array
0399   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
039D   DD E9                  JP   (ix)   
039F                CARET_:      
039F                             ; execute a block of code which ends with } 116
039F                             ; creates a root scope if BP == stack
039F                             ; else uses outer scope
039F                CARET:       
039F                GO:          
039F   D1                     POP   de   ; de = block*
03A0                GO1:         
03A0   7B                     LD   a,e   ; if block* == null, exit
03A1   B2                     OR   d   
03A2   20 02                  JR   nz,go2   
03A4   DD E9                  JP   (ix)   
03A6                GO2:         
03A6   1A                     LD   a,(de)   
03A7   FE 7B                  CP   "{"   
03A9   CA C3 0C               JP   z,goBlock   
03AC   FE 28                  CP   "("   
03AE   C2 F6 0C               JP   nz,goFunc   
03B1   D5                     PUSH   de   ; push de just before stack frame
03B2   CA C3 0C               JP   z,goBlock   
03B5                GRAVE_:      
03B5                GRAVE:       
03B5                PRINTLITERAL:      
03B5   03                     INC   bc   ; move to first char
03B6   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
03BA   18 03                  JR   printLiteral1   
03BC                PRINTLITERAL0:      
03BC   12                     LD   (de),a   ; a -> buffer*
03BD   13                     INC   de   ; string*++,
03BE   03                     INC   bc   
03BF                PRINTLITERAL1:      
03BF   0A                     LD   a,(bc)   ; a <- string*
03C0   FE 60                  CP   "`"   ; if ` exit loop
03C2   20 F8                  JR   nz,printLiteral0   
03C4   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
03C8   C3 00 0E               JP   dotNext   
03CB                LBRACE_:      
03CB                LBRACE:      
03CB   CD 50 0E               CALL   parseBlock   
03CE   DD E9                  JP   (ix)   
03D0                             ; | or                          11
03D0                             ; a b -- c
03D0                PIPE_:       
03D0                PIPE:        
03D0                OR:          
03D0   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03D1   E1                     POP   hl   
03D2   7B                     LD   a,e   
03D3   B5                     OR   l   
03D4   6F                     LD   l,a   
03D5   7A                     LD   a,d   
03D6   B4                     OR   h   
03D7   67                     LD   h,a   
03D8   C3 D8 02               JP   add3   
03DB                RBRACE_:      
03DB   C3 56 0C               JP   rbrace   
03DE                             ; ~ char                        8
03DE                TILDE_:      
03DE   C3 A3 0B               JP   tilde   
03E1                UNDERSCORE_:      
03E1                CHAR:        
03E1   03                     INC   bc   ; point to next char
03E2   0A                     LD   a,(bc)   
03E3   6F                     LD   l,a   
03E4   26 00                  LD   h,0   
03E6   E5                     PUSH   hl   
03E7   DD E9                  JP   (ix)   
03E9                AT_:         
03E9                AT:          
03E9                ADDR:        
03E9   ED 5B F8 23            LD   de,(vPointer)   
03ED   21 F8 23               LD   hl,vPointer   
03F0   C3 61 0F               JP   variable   
03F3                             ;********************** PAGE 3 END *********************************************
03F3                          ALIGN   $100   
0400                             ;********************** PAGE 4 BEGIN *********************************************
0400                             ;                               67
0400                DOT:         
0400                PRINT:       
0400   CD 8D 0F               CALL   commandTable   
0403   61                     DB   "a"   ; .a print array
0404   E1 0A                  DW   printArray   
0406   63                     DB   "c"   ; .c print char
0407   0F 04                  DW   printChar   
0409   73                     DB   "s"   ; .s print string
040A   1E 04                  DW   printString   
040C   00                     DB   NUL   ; .  print number, fall through
040D   33 04                  DW   printNumber   
040F                             ; .c print char
040F                             ; char --
040F                PRINTCHAR:      
040F   E1                     POP   hl   ; a = char
0410   7D                     LD   a,l   
0411   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0415   12                     LD   (de),a   
0416   13                     INC   de   
0417   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*'
041B   C3 00 0E               JP   dotNext   
041E                             ; .s print string
041E                             ; string* --
041E                PRINTSTRING:      
041E   E1                     POP   hl   ; hl = string*
041F   ED 5B E8 23            LD   de,(vBufPtr)   ; de = buffer*
0423   18 03                  JR   printString1   
0425                PRINTSTRING0:      
0425   12                     LD   (de),a   ; a -> buffer*
0426   13                     INC   de   ; string*++,
0427   23                     INC   hl   
0428                PRINTSTRING1:      
0428   7E                     LD   a,(hl)   ; a <- string*
0429   B7                     OR   a   ; if NUL exit loop
042A   20 F9                  JR   nz,printString0   
042C   ED 53 E8 23            LD   (vBufPtr),de   ; save buffer*' in pointer
0430   C3 00 0E               JP   dotNext   
0433                             ; . print decimal
0433                             ; value --
0433                PRINTNUMBER:      
0433   3A EF 23               LD   a,(vNumBase)   
0436   FE 10                  CP   16   
0438   CA A4 04               JP   z,printHex   ; else falls through
043B   C3 3E 04               JP   printDec   
043E                             ; print decimal                 ; 70
043E                             ; value --
043E                PRINTDEC:      
043E   ED 5B E8 23            LD   de,(vBufPtr)   ; de"= buffer* bc" = IP
0442   D9                     EXX      
0443   E1                     POP   hl   ; hl = value
0444   3A EE 23               LD   a,(vDataWidth)   
0447   3D                     DEC   a   
0448   20 02                  JR   nz,printDec1   
044A   26 00                  LD   h,0   
044C                PRINTDEC1:      
044C   CD 5B 04               CALL   printDec2   
044F   D9                     EXX      ; de = buffer*' bc = IP
0450   3E 20                  LD   a," "   ; append space to buffer
0452   12                     LD   (de),a   
0453   13                     INC   de   ; string*++,
0454   ED 53 E8 23            LD   (vBufPtr),de   ; update buffer* with buffer*'
0458   C3 00 0E               JP   dotNext   
045B                             ; hl = value
045B                             ; de' = buffer*
045B                             ; a, bc, de, hl destroyed
045B                PRINTDEC2:      
045B   CB 7C                  BIT   7,h   
045D   28 0C                  JR   z,printDec3   
045F   D9                     EXX      
0460   3E 2D                  LD   a,"-"   
0462   12                     LD   (de),a   
0463   13                     INC   de   
0464   D9                     EXX      
0465   AF                     XOR   a   
0466   95                     SUB   l   
0467   6F                     LD   l,a   
0468   9F                     SBC   a,a   
0469   94                     SUB   h   
046A   67                     LD   h,a   
046B                PRINTDEC3:      
046B   0E 00                  LD   c,0   ; leading zeros flag = false
046D   11 F0 D8               LD   de,-10000   
0470   CD 8B 04               CALL   printDec4   
0473   11 18 FC               LD   de,-1000   
0476   CD 8B 04               CALL   printDec4   
0479   11 9C FF               LD   de,-100   
047C   CD 8B 04               CALL   printDec4   
047F   1E F6                  LD   e,-10   
0481   CD 8B 04               CALL   printDec4   
0484   0C                     INC   c   ; flag = true for at least digit
0485   1E FF                  LD   e,-1   
0487   CD 8B 04               CALL   printDec4   
048A   C9                     RET      
048B                PRINTDEC4:      
048B   06 2F                  LD   b,"0"-1   
048D                PRINTDEC5:      
048D   04                     INC   b   
048E   19                     ADD   hl,de   
048F   38 FC                  JR   c,printDec5   
0491   ED 52                  SBC   hl,de   
0493   3E 30                  LD   a,"0"   
0495   B8                     CP   b   
0496   20 05                  JR   nz,printDec6   
0498   AF                     XOR   a   
0499   B1                     OR   c   
049A   C8                     RET   z   
049B   18 01                  JR   printDec7   
049D                PRINTDEC6:      
049D   0C                     INC   c   
049E                PRINTDEC7:      
049E   78                     LD   a,b   
049F   D9                     EXX      
04A0   12                     LD   (de),a   
04A1   13                     INC   de   
04A2   D9                     EXX      
04A3   C9                     RET      
04A4                             ; buffer hex                    37
04A4                             ; value --
04A4                PRINTHEX:      
04A4   ED 5B E8 23            LD   de,(vBufPtr)   
04A8   3A F0 23               LD   a,(vHexPrefix)   ; "$"
04AB   B7                     OR   a   ; skip if null
04AC   28 02                  JR   z,printHex1   
04AE   12                     LD   (de),a   
04AF   13                     INC   de   ; string*++,
04B0                PRINTHEX1:      
04B0   E1                     POP   hl   ; hl = value
04B1   3A EE 23               LD   a,(vDataWidth)   
04B4   3D                     DEC   a   
04B5   28 04                  JR   z,printHex2   
04B7   7C                     LD   a,h   
04B8   CD CA 04               CALL   printHex3   
04BB                PRINTHEX2:      
04BB   7D                     LD   a,l   
04BC   CD CA 04               CALL   printHex3   
04BF   3E 20                  LD   a," "   ; append space to buffer
04C1   12                     LD   (de),a   
04C2   13                     INC   de   ; string*++,
04C3   ED 53 E8 23            LD   (vBufPtr),de   
04C7   C3 00 0E               JP   dotNext   
04CA                PRINTHEX3:      
04CA   F5                     PUSH   af   
04CB   1F                     RRA      
04CC   1F                     RRA      
04CD   1F                     RRA      
04CE   1F                     RRA      
04CF   CD D3 04               CALL   printHex4   
04D2   F1                     POP   af   
04D3                PRINTHEX4:      
04D3   E6 0F                  AND   0x0F   
04D5   C6 90                  ADD   a,0x90   
04D7   27                     DAA      
04D8   CE 40                  ADC   a,0x40   
04DA   27                     DAA      
04DB   12                     LD   (de),a   
04DC   13                     INC   de   ; string*++,
04DD   C9                     RET      
04DE                             ;********************** PAGE 4 END *********************************************
04DE                          ALIGN   $100   
0500                             ;********************** PAGE 5 BEGIN *********************************************
0500                SLASH:       
0500                COMMAND:      
0500   03                     INC   bc   
0501   0A                     LD   a,(bc)   
0502   FE 2F                  CP   "/"   ; // comment
0504   CA BC 06               JP   z,comment   
0507   0B                     DEC   bc   
0508   CD 73 0F               CALL   charTable   
050B   26                     DB   lsb(command_a_)   
050C   41                     DB   lsb(command_b_)   
050D   00                     DB   0   
050E   50                     DB   lsb(command_d_)   
050F   00                     DB   0   
0510   5B                     DB   lsb(command_f_)   
0511   00                     DB   0   
0512   82                     DB   lsb(command_h_)   
0513   8D                     DB   lsb(command_i_)   
0514   00                     DB   0   
0515   00                     DB   0   
0516   00                     DB   0   
0517   98                     DB   lsb(command_m_)   
0518   00                     DB   0   
0519   A3                     DB   lsb(comand_o_)   
051A   AA                     DB   lsb(command_p_)   
051B   B1                     DB   lsb(command_q_)   
051C   BC                     DB   lsb(command_r_)   
051D   CF                     DB   lsb(command_s_)   
051E   D1                     DB   lsb(comand_t_)   
051F   00                     DB   0   
0520   D3                     DB   lsb(command_v_)   
0521   D5                     DB   lsb(command_w_)   
0522   D7                     DB   lsb(command_x_)   
0523   00                     DB   0   
0524   00                     DB   0   
0525   D9                     DB   lsb(command_default_)   
0526                             ; 12
0526                COMMAND_A_:      
0526   CD A5 0F               CALL   cmdTable   
0529   62 73                  DB   "bs"   ; /abs absolute
052B   68 06                  DW   absolute   
052D   64 72                  DB   "dr"   ; /adr address of
052F   76 06                  DW   addrOf   
0531   69 00                  DB   "i",0   ; /ai array iterator
0533   64 08                  DW   arrayIter   
0535   6C 6E                  DB   "ln"   ; /al array length
0537   7E 06                  DW   arrayLength   
0539   73 00                  DB   "s",0   ; /as array size
053B   87 06                  DW   arraySize   
053D   00 00                  DW   0   
053F   E3 06                  DW   error1   
0541                COMMAND_B_:      
0541   CD A5 0F               CALL   cmdTable   
0544   62 00                  DB   "b",0   ; /bb bye bye cold boot
0546   7E 10                  DW   coldStart   
0548   79 74                  DB   "yt"   ; /byt byte mode
054A   B5 06                  DW   byteMode   
054C   00 00                  DW   0   
054E   E3 06                  DW   error1   
0550                COMMAND_D_:      
0550   CD A5 0F               CALL   cmdTable   
0553   63 00                  DB   "c",0   ; /dc decimal
0555   D7 06                  DW   decBase   
0557   00 00                  DW   0   
0559   E3 06                  DW   error1   
055B                COMMAND_F_:      
055B   CD A5 0F               CALL   cmdTable   
055E   64 00                  DB   "d",0   ; /fd fold
0560   0A 0A                  DW   fold   
0562   65 00                  DB   "e",0   ; /fe forEach
0564   5B 0A                  DW   forEach   
0566   73 00                  DB   "s",0   ; /fs funcSrc
0568   A6 0A                  DW   funcSrc   
056A   74 00                  DB   "t",0   ; /ft filter
056C   AD 09                  DW   filter   
056E   31 00                  DB   "1",0   
0570   6F 11                  DW   f1   
0572   32 00                  DB   "2",0   
0574   6F 11                  DW   f2   
0576   33 00                  DB   "3",0   
0578   6F 11                  DW   f3   
057A   34 00                  DB   "4",0   
057C   6F 11                  DW   f4   
057E   00 00                  DW   0   
0580   82 0D                  DW   false1   
0582                COMMAND_H_:      
0582   CD A5 0F               CALL   cmdTable   
0585   78 00                  DB   "x",0   ; /hx hex
0587   DE 06                  DW   hexBase   
0589   00 00                  DW   0   
058B   E3 06                  DW   error1   
058D                             ; 6
058D                COMMAND_I_:      
058D   CD A5 0F               CALL   cmdTable   
0590   6E 00                  DB   "n",0   ; /in input
0592   E9 06                  DW   input   
0594   00 00                  DW   0   
0596   E3 06                  DW   error1   
0598                COMMAND_M_:      
0598   CD A5 0F               CALL   cmdTable   
059B   70 00                  DB   "p",0   ; /mp map
059D   6C 09                  DW   map   
059F   00 00                  DW   0   
05A1   E3 06                  DW   error1   
05A3                COMAND_O_:      
05A3   CD A5 0F               CALL   cmdTable   
05A6   00 00                  DW   0   
05A8   F4 06                  DW   output   
05AA                             ; 4
05AA                COMMAND_P_:      
05AA   CD A5 0F               CALL   cmdTable   
05AD   00 00                  DW   0   
05AF   E3 06                  DW   error1   
05B1                             ; 6
05B1                COMMAND_Q_:      
05B1   CD A5 0F               CALL   cmdTable   
05B4   74 00                  DB   "t",0   ; /qt quit
05B6   FD 06                  DW   quit   
05B8   00 00                  DW   0   
05BA   E3 06                  DW   error1   
05BC                COMMAND_R_:      
05BC   CD A5 0F               CALL   cmdTable   
05BF   63 00                  DB   "c",0   ; /rc tail call optimisation
05C1   07 07                  DW   recur   
05C3   65 6D                  DB   "em"   ; /rem remainder
05C5   0D 07                  DW   remain   
05C7   67 00                  DB   "g",0   ; /rg range src
05C9   D2 07                  DW   rangeSrc   
05CB   00 00                  DW   0   
05CD   E3 06                  DW   error1   
05CF                COMMAND_S_:      
05CF   18 0A                  JR   command_s   
05D1                COMAND_T_:      
05D1   18 2B                  JR   command_t   
05D3                COMMAND_V_:      
05D3   18 30                  JR   command_v   
05D5                COMMAND_W_:      
05D5   18 55                  JR   command_w   
05D7                COMMAND_X_:      
05D7   18 62                  JR   command_x   
05D9                             ; 3
05D9                COMMAND_DEFAULT_:      
05D9   18 6B                  JR   command_default   
05DB                             ;********************** PAGE 5 END *********************************************
05DB                COMMAND_S:      
05DB   CD A5 0F               CALL   cmdTable   
05DE   62 00                  DB   "b",0   
05E0   3A 07                  DW   stringBegin   
05E2   63 00                  DB   "c",0   
05E4   8C 07                  DW   stringCompare   
05E6   65 6C                  DB   "el"   
05E8   13 07                  DW   select   
05EA   65 00                  DB   "e",0   
05EC   42 07                  DW   stringEnd   
05EE   69 00                  DB   "i",0   
05F0   E4 08                  DW   stringIter   
05F2   6C 00                  DB   "l",0   
05F4   71 07                  DW   stringLength   
05F6   73 00                  DB   "s",0   
05F8   80 07                  DW   stringSize   
05FA   00 00                  DW   0   
05FC   E3 06                  DW   error1   
05FE                COMMAND_T:      
05FE   CD A5 0F               CALL   cmdTable   
0601   00 00                  DW   0   
0603   7C 0D                  DW   true1   
0605                COMMAND_V:      
0605   CD A5 0F               CALL   cmdTable   
0608   62 00                  DB   "b",0   
060A   A4 07                  DW   varBufPtr   
060C   65 00                  DB   "e",0   
060E   AA 07                  DW   varEcho   
0610   68 00                  DB   "h",0   
0612   B0 07                  DW   varHeapPtr   
0614   74 00                  DB   "t",0   
0616   B6 07                  DW   varTIBPtr   
0618   78 00                  DB   "x",0   
061A   BC 07                  DW   varHexPrefix   
061C   42 00                  DB   "B",0   
061E   D1 06                  DW   constBufStart   
0620   48 00                  DB   "H",0   
0622   C5 06                  DW   constHeapStart   
0624   54 00                  DB   "T",0   
0626   CB 06                  DW   constTIBStart   
0628   00 00                  DW   0   
062A   E3 06                  DW   error1   
062C                COMMAND_W:      
062C   CD A5 0F               CALL   cmdTable   
062F   68 69                  DB   "hi"   ; /whi while true else break from loop
0631   9B 06                  DW   while   
0633   6D 00                  DB   "m",0   ; /wm word mode
0635   C2 07                  DW   wordMode   
0637   00 00                  DW   0   
0639   E3 06                  DW   error1   
063B                COMMAND_X:      
063B   CD A5 0F               CALL   cmdTable   
063E   6F 72                  DB   "or"   ; /xor exclsuive or
0640   C7 07                  DW   xor   
0642   00 00                  DW   0   
0644   E3 06                  DW   error1   
0646                COMMAND_DEFAULT:      
0646   CD A5 0F               CALL   cmdTable   
0649   00 00                  DW   0   
064B   4D 06                  DW   div   
064D                             ;                               32
064D                DIV:         
064D   E1                     POP   hl   ; hl = arg_b
064E   D1                     POP   de   ; de = arg_a
064F   03                     INC   bc   
0650   0A                     LD   a,(bc)   
0651   FE 3D                  CP   "="   
0653   28 02                  JR   z,div2   
0655   0B                     DEC   bc   ; /
0656   EB                     EX   de,hl   
0657                DIV2:        
0657   F5                     PUSH   af   ; preserve af, bc
0658   C5                     PUSH   bc   
0659   44 4D                  LD   bc,hl   
065B   CD E7 0D               CALL   divide   
065E   EB                     EX   de,hl   
065F   ED 53 FA 23            LD   (vRemain),de   
0663   C1                     POP   bc   ; restore
0664   F1                     POP   af   
0665   C3 9D 02               JP   sub3   
0668                             ; /abs absolute
0668                             ; num -- num
0668                ABSOLUTE:      
0668   E1                     POP   hl   
0669   CB 7C                  BIT   7,h   
066B   28 06                  JR   z,absolute1   
066D   AF                     XOR   a   
066E   95                     SUB   l   
066F   6F                     LD   l,a   
0670   9F                     SBC   a,a   
0671   94                     SUB   h   
0672   67                     LD   h,a   
0673                ABSOLUTE1:      
0673   E5                     PUSH   hl   
0674   DD E9                  JP   (ix)   
0676                             ; /adr addrOf
0676                             ; char -- addr
0676                ADDROF:      
0676   E1                     POP   hl   ; a = char
0677   7D                     LD   a,l   
0678   CD C6 0F               CALL   getVarAddr   
067B   E5                     PUSH   hl   
067C                ADDROF2:      
067C   DD E9                  JP   (ix)   
067E                             ; /al length of an array, num elements
067E                             ; array* -- num
067E                ARRAYLENGTH:      
067E   E1                     POP   hl   
067F   2B                     DEC   hl   ; msb size
0680   56                     LD   d,(hl)   
0681   2B                     DEC   hl   ; lsb size
0682   5E                     LD   e,(hl)   
0683   EB                     EX   de,hl   
0684                ARRAYLENGTH1:      
0684   E5                     PUSH   hl   
0685   DD E9                  JP   (ix)   
0687                             ; /as size in bytes of an array, based on current data width
0687                             ; array* -- num
0687                ARRAYSIZE:      
0687                          ;*Macro unroll:  PERFORM arrayLength
0687   DD 21 8E 06            LD   ix,performM_1507S1063   
068B   C3 7E 06               JP   arrayLength   
068E                PERFORMM_1507S1063:      
068E   E1                     POP   hl   
068F   3A EE 23               LD   a,(vDataWidth)   
0692   3D                     DEC   a   
0693   28 EF                  JR   z,arrayLength1   
0695   CB 3C                  SRL   h   
0697   CB 1D                  RR   l   
0699   18 E9                  JR   arrayLength1   
069B                             ; 13
069B                             ; /whi while true else break from loop
069B                             ; --
069B                WHILE:       
069B   E1                     POP   hl   ; hl = condition, break if false
069C   7D                     LD   a,l   
069D   B4                     OR   h   
069E   28 02                  JR   z,while1   
06A0   DD E9                  JP   (ix)   
06A2                WHILE1:      
06A2   FD 5D                  LD   e,iyl   ; get block* just under stack frame
06A4   FD 54                  LD   d,iyh   
06A6   21 08 00               LD   hl,8   
06A9   19                     ADD   hl,de   
06AA   23                     INC   hl   
06AB   23                     INC   hl   
06AC   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
06AF   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
06B2   C3 56 0C               JP   blockEnd   
06B5                             ; /b
06B5                BYTEMODE:      
06B5   3E 01                  LD   a,1   
06B7                BYTEMODE1:      
06B7   32 EE 23               LD   (vDataWidth),a   
06BA   DD E9                  JP   (ix)   
06BC                             ; //
06BC                COMMENT:      
06BC   03                     INC   bc   ; point to next char
06BD   0A                     LD   a,(bc)   
06BE   FE 20                  CP   " "   ; terminate on any char less than SP
06C0   30 FA                  JR   nc,comment   
06C2   0B                     DEC   bc   
06C3   DD E9                  JP   (ix)   
06C5                CONSTHEAPSTART:      
06C5   11 22 24               LD   de,HEAP   
06C8   C3 70 0F               JP   constant   
06CB                CONSTTIBSTART:      
06CB   11 00 21               LD   de,TIB   
06CE   C3 70 0F               JP   constant   
06D1                CONSTBUFSTART:      
06D1   11 00 22               LD   de,BUFFER   
06D4   C3 70 0F               JP   constant   
06D7                DECBASE:      
06D7   3E 0A                  LD   a,10   
06D9                DECBASE1:      
06D9   32 EF 23               LD   (vNumBase),a   
06DC   DD E9                  JP   (ix)   
06DE                HEXBASE:      
06DE   3E 10                  LD   a,16   
06E0   C3 D9 06               JP   decBase1   
06E3                ERROR1:      
06E3   21 01 00               LD   hl,1   ; error 1: unknown command
06E6   C3 2D 11               JP   error   
06E9                             ; Z80 port input
06E9                             ; port -- value
06E9                INPUT:       
06E9   E1                     POP   hl   
06EA   59                     LD   e,c   ; save IP
06EB   4D                     LD   c,l   
06EC   ED 68                  IN   l,(c)   
06EE   26 00                  LD   h,0   
06F0   4B                     LD   c,e   ; restore IP
06F1   E5                     PUSH   hl   
06F2   DD E9                  JP   (ix)   
06F4                             ; /o Z80 port output
06F4                             ; value port --
06F4                OUTPUT:      
06F4   E1                     POP   hl   
06F5   59                     LD   e,c   ; save IP
06F6   4D                     LD   c,l   
06F7   E1                     POP   hl   
06F8   ED 69                  OUT   (c),l   
06FA   4B                     LD   c,e   ; restore IP
06FB   DD E9                  JP   (ix)   
06FD                             ; /qt
06FD                             ; bool --
06FD                QUIT:        
06FD   E1                     POP   hl   ; hl = condition, exit if true
06FE   7D                     LD   a,l   
06FF   B4                     OR   h   
0700   20 02                  JR   nz,quit1   
0702   DD E9                  JP   (ix)   
0704                QUIT1:       
0704   C3 56 0C               JP   blockEnd   
0707                RECUR:       
0707   E1                     POP   hl   
0708   22 EC 23               LD   (vRecurPtr),hl   
070B   DD E9                  JP   (ix)   
070D                REMAIN:      
070D   2A FA 23               LD   hl,(vRemain)   
0710   E5                     PUSH   hl   
0711   DD E9                  JP   (ix)   
0713                             ; bool cases* --
0713                SELECT:      
0713   E1                     POP   hl   ; hl = case associative array [ key1 value1 ... ]
0714   D1                     POP   de   ; de = select key
0715   C5                     PUSH   bc   ; save IP
0716   2B                     DEC   hl   ; bc = array length
0717   46                     LD   b,(hl)   
0718   2B                     DEC   hl   
0719   4E                     LD   c,(hl)   
071A   23                     INC   hl   
071B   23                     INC   hl   
071C   18 15                  JR   select2   
071E                SELECT1:      
071E   7E                     LD   a,(hl)   ; compare lsb case key with lsb select key, hl++
071F   BB                     CP   e   
0720   23                     INC   hl   ; hl++, flags are unaltered
0721   20 0C                  JR   nz,select1a   
0723   7E                     LD   a,(hl)   ; compare msb case key with msb select key, hl++
0724   BA                     CP   d   
0725   23                     INC   hl   ; hl++, flags are unaltered
0726   20 08                  JR   nz,select1b   
0728   5E                     LD   e,(hl)   
0729   23                     INC   hl   
072A   56                     LD   d,(hl)   
072B   C1                     POP   bc   
072C   C3 A0 03               JP   go1   
072F                SELECT1A:      
072F   23                     INC   hl   
0730                SELECT1B:      
0730   23                     INC   hl   
0731   23                     INC   hl   
0732   0B                     DEC   bc   
0733                SELECT2:      
0733   79                     LD   a,c   
0734   B0                     OR   b   
0735   20 E7                  JR   nz,select1   
0737   C1                     POP   bc   
0738   DD E9                  JP   (ix)   
073A                STRINGBEGIN:      
073A   21 FF FF               LD   hl,TRUE   ; string mode = true
073D   22 F2 23               LD   (vStrMode),hl   
0740   18 27                  JR   stringEnd1   ; save hl in vBufPtr
0742                STRINGEND:      
0742   21 00 00               LD   hl,FALSE   ; string mode = false
0745   22 F2 23               LD   (vStrMode),hl   
0748   2A E8 23               LD   hl,(vBufPtr)   ; append NUL to string
074B   AF                     XOR   a   
074C   77                     LD   (hl),a   
074D   23                     INC   hl   ; hl = string_end*
074E   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0752   11 00 22               LD   de,BUFFER   ; de = string*
0755   B7                     OR   a   ; bc = size
0756   ED 52                  SBC   hl,de   
0758   44 4D                  LD   bc,hl   
075A   2A EA 23               LD   hl,(vHeapPtr)   ; hl = hstring*
075D   EB                     EX   de,hl   ; hl = string*, de = hstring*, bc = size
075E   D5                     PUSH   de   ; return hstring*
075F   ED B0                  LDIR      ; copy size bytes from string* to hstring*
0761   ED 53 EA 23            LD   (vHeapPtr),de   ; bump heap to hstring* += size
0765   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0769                STRINGEND1:      
0769   21 00 22               LD   hl,BUFFER   ; reset vBufPtr
076C   22 E8 23               LD   (vBufPtr),hl   
076F   DD E9                  JP   (ix)   
0771                STRINGLENGTH:      
0771   D1                     POP   de   
0772   21 00 00               LD   hl,0   
0775   18 02                  JR   stringLength2   
0777                STRINGLENGTH1:      
0777   13                     INC   de   
0778   23                     INC   hl   
0779                STRINGLENGTH2:      
0779   1A                     LD   a,(de)   
077A   B7                     OR   a   
077B   20 FA                  JR   nz,stringLength1   
077D                STRINGLENGTH3:      
077D   E5                     PUSH   hl   
077E   DD E9                  JP   (ix)   
0780                STRINGSIZE:      
0780                          ;*Macro unroll:  PERFORM stringLength
0780   DD 21 87 07            LD   ix,performM_1686S1261   
0784   C3 71 07               JP   stringLength   
0787                PERFORMM_1686S1261:      
0787   E1                     POP   hl   
0788   23                     INC   hl   
0789   C3 7D 07               JP   stringLength3   
078C                             ; /sc string compare
078C                             ; string1* string2* -- bool
078C                             ; Compares two null terminated strings.
078C                STRINGCOMPARE:      
078C   D1                     POP   de   
078D   E1                     POP   hl   
078E                STRINGCOMPARE1:      
078E   1A                     LD   a,(de)   
078F   BE                     CP   (hl)   
0790   20 07                  JR   nz,stringCompare2   
0792   B7                     OR   a   
0793   28 09                  JR   z,stringCompare3   
0795   13                     INC   de   
0796   23                     INC   hl   
0797   18 F5                  JR   stringCompare1   
0799                STRINGCOMPARE2:      
0799   21 00 00               LD   hl,FALSE   
079C   18 03                  JR   stringCompare4   
079E                STRINGCOMPARE3:      
079E   21 FF FF               LD   hl,TRUE   
07A1                STRINGCOMPARE4:      
07A1   E5                     PUSH   hl   
07A2   DD E9                  JP   (ix)   
07A4                VARBUFPTR:      
07A4   21 E8 23               LD   hl,vBufPtr   
07A7   C3 61 0F               JP   variable   
07AA                VARECHO:      
07AA   21 F1 23               LD   hl,vEcho   
07AD   C3 61 0F               JP   variable   
07B0                VARHEAPPTR:      
07B0   21 EA 23               LD   hl,vHeapPtr   
07B3   C3 61 0F               JP   variable   
07B6                VARTIBPTR:      
07B6   21 E6 23               LD   hl,vTIBPtr   
07B9   C3 61 0F               JP   variable   
07BC                VARHEXPREFIX:      
07BC   21 F0 23               LD   hl,vHexPrefix   
07BF   C3 61 0F               JP   variable   
07C2                             ; /wm
07C2                WORDMODE:      
07C2   3E 02                  LD   a,2   
07C4   C3 B7 06               JP   byteMode1   
07C7                             ; /xor
07C7                XOR:         
07C7   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
07C8                XOR1:        
07C8   E1                     POP   hl   
07C9   7B                     LD   a,e   
07CA   AD                     XOR   l   
07CB   6F                     LD   l,a   
07CC   7A                     LD   a,d   
07CD   AC                     XOR   h   
07CE   67                     LD   h,a   
07CF   C3 D8 02               JP   add3   
07D2                             ;*******************************************************************
07D2                             ; Monty implementations
07D2                             ;*******************************************************************
07D2                             ; /rg rangeSrc
07D2                             ; begin end step -- src
07D2                          ;*Macro unroll: FUNC rangeSrc, 1, "besL"            ; range source: begin, end, step, local: L
07D2                RANGESRC:      ; range source: begin, end, step, local: L
07D2   CD 9F 03               CALL   go   
07D5   00 00                  DW   NUL   
07D7   E1 07                  DW   rangeSrcM_1749S1334   
07D9   DB 07                  DW   $+2   
07DB   01                     DB   1   
07DC   04 62 65 73 4C         .PSTR   "besL"   
07E1                RANGESRCM_1749S1334:      
07E1   7B                     DB   "{"   ; init mutable L [index active inrange_test]
07E2   5B 25 62 20 2F 74 20 25 73 30 3E 7B 7B 25 61 25 65 3C 7D 7D 7B 7B 25 61 25 65 3E 7D 7D 3F 5D 20 25 4C 3D 20 DB   "[%b /t %s0>{{%a%e<}}{{%a%e>}}?] %L= "   
0806   5C 6B 74 7B            DB   "\\kt{"   
080A   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0812   5C 64 74 3A 61 7B      DB   "\\dt:a{"   ; return talkback to receive data
0818   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
0820   25 4C 30 3B 20 25 61 3D DB   "%L0; %a="   ; store current index in A
0828   25 73 20 25 4C 30 3B 20 2B 3D DB   "%s %L0; +="   ; inc value of index by step
0832   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
083A   25 4C 32 3B 5E         DB   "%L2;^"   ; ifte: inrange_test?
083F   7B 25 61 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a 1}{/f %L1;= 0 2}"   ; ifte: /t index, /f active = false, quit
0853   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
085A   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0861   7D                     DB   "}"   
0862   7D                     DB   "}"   
0863   00                     DB   0   
0864                             ; /ai arrayIter
0864                             ; array* -- src
0864                          ;*Macro unroll: FUNC arrayIter, 1, "aL"
0864                ARRAYITER:      
0864   CD 9F 03               CALL   go   
0867   00 00                  DW   NUL   
0869   71 08                  DW   arrayIterM_1768S1354   
086B   6D 08                  DW   $+2   
086D   01                     DB   1   
086E   02 61 4C               .PSTR   "aL"   
0871                ARRAYITERM_1768S1354:      
0871   7B                     DB   "{"   
0872   5B 30 20 2F 74 20 25 61 2F 61 6C 5D 20 25 4C 3D DB   "[0 /t %a/al] %L="   ; init mutable L [index active size]
0882   5C 6B 74 7B            DB   "\\kt{"   
0886   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
088E   5C 64 74 3A 69 7B      DB   "\\dt:i{"   ; return talkback to receive data
0894   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
089C   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in i
08A4   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index
08AB   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
08B3   25 69 20 25 4C 32 3B 20 3C DB   "%i %L2; <"   ; ifte: index < size
08BC   7B 25 61 25 69 3B 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%a%i; 1}{/f %L1;= 0 2}"   ; ifte: /t value, /f active = false, quit
08D3   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: send to sink note: /rc recur
08DA   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
08E1   7D                     DB   "}"   
08E2   7D                     DB   "}"   
08E3   00                     DB   0   
08E4                             ; /si stringIter
08E4                             ; string* -- src
08E4                          ;*Macro unroll: FUNC stringIter, 1, "sL"
08E4                STRINGITER:      
08E4   CD 9F 03               CALL   go   
08E7   00 00                  DW   NUL   
08E9   F1 08                  DW   stringIterM_1787S1374   
08EB   ED 08                  DW   $+2   
08ED   01                     DB   1   
08EE   02 73 4C               .PSTR   "sL"   
08F1                STRINGITERM_1787S1374:      
08F1   7B                     DB   "{"   
08F2   5B 30 20 2F 74 5D 20 25 4C 3D DB   "[0 /t] %L="   ; init mutable L [index active]
08FC   5C 6B 74 7B            DB   "\\kt{"   
0900   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0908   5C 64 74 3A 69 63 7B   DB   "\\dt:ic{"   ; return talkback to receive data
090F   25 4C 31 3B 21 2F 71 74 DB   "%L1;!/qt"   ; if not active don't send
0917   25 4C 30 3B 20 25 69 3D DB   "%L0; %i="   ; store current index in A
091F   25 4C 30 3B 20 2B 2B   DB   "%L0; ++"   ; inc value of index by step
0926   2F 62 79 74 20 25 73 25 69 3B 20 2F 77 6D 20 25 63 3D DB   "/byt %s%i; /wm %c="   ; read byte at i, store in c as word
0938   31 25 74 21 3D 2F 71 74 DB   "1%t!=/qt"   ; break if type != 0
0940   25 63 20 30 20 21 3D   DB   "%c 0 !="   ; ifte: c != NUL ?
0947   7B 25 63 20 31 7D 7B 2F 66 20 25 4C 31 3B 3D 20 30 20 32 7D DB   "{%c 1}{/f %L1;= 0 2}"   ; ifte: 1: send c, 2: active = false, send quit
095B   3F 20 25 6B 2F 72 63   DB   "? %k/rc"   ; ifte: call sink note: /rc recur
0962   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0969   7D                     DB   "}"   
096A   7D                     DB   "}"   
096B   00                     DB   0   
096C                             ; /mp map
096C                             ; src func -- src1
096C                          ;*Macro unroll: FUNC map, 0, "sf"                   ; map: source, function
096C                MAP:         ; map: source, function
096C   CD 9F 03               CALL   go   
096F   00 00                  DW   NUL   
0971   79 09                  DW   mapM_1807S1396   
0973   75 09                  DW   $+2   
0975   00                     DB   0   
0976   02 73 66               .PSTR   "sf"   
0979                MAPM_1807S1396:      
0979   7B                     DB   "{"   
097A   5C 6B 74 7B            DB   "\\kt{"   
097E   30 25 74 21 3D 2F 71 74 DB   "0%t!=/qt"   ; break if type != 0
0986   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
098A   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
098F   7B 25 64 20 25 66 5E 7D 7B 25 64 7D DB   "{%d %f^}{%d}"   ; ifte: func(data) or data
099B   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
09A3   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
09AA   7D                     DB   "}"   
09AB   7D                     DB   "}"   
09AC   00                     DB   0   
09AD                             ; /ft filter
09AD                             ; src pred -- src1
09AD                          ;*Macro unroll: FUNC filter, 1, "spT"               ; filter: source, predicate, local: T
09AD                FILTER:      ; filter: source, predicate, local: T
09AD   CD 9F 03               CALL   go   
09B0   00 00                  DW   NUL   
09B2   BB 09                  DW   filterM_1821S1411   
09B4   B6 09                  DW   $+2   
09B6   01                     DB   1   
09B7   03 73 70 54            .PSTR   "spT"   
09BB                FILTERM_1821S1411:      
09BB   7B                     DB   "{"   
09BC   5B 30 5D 25 54 3D      DB   "[0]%T="   
09C2   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
09C6   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
09CA   5B                     DB   "["   
09CB   7B 25 64 20 25 54 30 3B 3D 20 2F 74 7D DB   "{%d %T0;= /t}"   ; case 0: store talkback in T[0], return true
09D8   7B 25 64 20 25 70 5E 7D DB   "{%d %p^}"   ; case 1: return boolean based on predicate
09E0   7B 2F 74 7D            DB   "{/t}"   ; case 2: return true
09E4   5D 25 74 3B 5E         DB   "]%t;^"   ; select on %t
09E9   7B 25 64 20 25 74 20 25 6B 5E 7D 7B 30 20 31 20 25 54 30 3B 5E 7D DB   "{%d %t %k^}{0 1 %T0;^}"   ; ifte: true send d to sink, false send 1 to talkback
09FF   3F                     DB   "?"   
0A00   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A07   7D                     DB   "}"   
0A08   7D                     DB   "}"   
0A09   00                     DB   0   
0A0A                             ; /fd fold
0A0A                             ; reducer is a function like: \\da00bbLi4u
0A0A                             ; src init reducer -- src1
0A0A                          ;*Macro unroll: FUNC fold, 1, "sirA"                    ; src, init, reducer
0A0A                FOLD:        ; src, init, reducer
0A0A   CD 9F 03               CALL   go   
0A0D   00 00                  DW   NUL   
0A0F   19 0A                  DW   foldM_1840S1431   
0A11   13 0A                  DW   $+2   
0A13   01                     DB   1   
0A14   04 73 69 72 41         .PSTR   "sirA"   
0A19                FOLDM_1840S1431:      
0A19   7B                     DB   "{"   ; reducer: \\da00bbLi4u
0A1A   5B 25 69 5D 25 41 3D   DB   "[%i]%A="   
0A21   5C 6B 74 7B            DB   "\\kt{"   ; return talkback to receive data
0A25   5C 64 74 7B            DB   "\\dt{"   ; call source with tb
0A29   31 25 74 3D 3D         DB   "1%t=="   ; ifte: type == 1 ?
0A2E   7B 25 64 20 25 41 30 3B 20 25 72 5E 25 41 30 3B 3D 20 25 41 30 3B 7D 7B 25 64 7D DB   "{%d %A0; %r^%A0;= %A0;}{%d}"   ; ifte: reduce -> acc, acc or data
0A49   3F 20 25 74 20 25 6B 5E DB   "? %t %k^"   ; ifte: send to sink
0A51   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0A58   7D                     DB   "}"   
0A59   7D                     DB   "}"   
0A5A   00                     DB   0   
0A5B                             ; /fe forEach
0A5B                             ; src proc --
0A5B                          ;*Macro unroll: FUNC forEach, 1, "spT"              ; forEach: source, procedure, local: T
0A5B                FOREACH:      ; forEach: source, procedure, local: T
0A5B   CD 9F 03               CALL   go   
0A5E   00 00                  DW   NUL   
0A60   69 0A                  DW   forEachM_1854S1446   
0A62   64 0A                  DW   $+2   
0A64   01                     DB   1   
0A65   03 73 70 54            .PSTR   "spT"   
0A69                FOREACHM_1854S1446:      
0A69   7B                     DB   "{"   
0A6A   5B 30 5D 25 54 3D      DB   "[0]%T="   
0A70   5C 64 74 7B            DB   "\\dt{"   ; return talkback to receive data ; $56AA
0A74   32 25 74 3D 3D 2F 71 74 DB   "2%t==/qt"   ; if type == 2 skip
0A7C   30 25 74 3D 3D         DB   "0%t=="   ; ifte: type = 0 ?
0A81   7B 25 64 20 25 54 30 3B 3D 7D 7B 25 64 20 25 70 5E 7D DB   "{%d %T0;=}{%d %p^}"   ; ifte: 0: store talkback, 1: send data
0A93   3F                     DB   "?"   ; ifte:
0A94   30 20 31 20 25 54 30 3B 5E DB   "0 1 %T0;^"   ; 0 or 1: get next src data item
0A9D   7D 20 30 20 25 73 5E   DB   "} 0 %s^"   
0AA4   7D                     DB   "}"   
0AA5   00                     DB   0   
0AA6                             ; ; /fs funcSrc
0AA6                             ; ; func -- src
0AA6                          ;*Macro unroll: FUNC funcSrc, 0, "f"                      ; :f func or block
0AA6                FUNCSRC:      ; :f func or block
0AA6   CD 9F 03               CALL   go   
0AA9   00 00                  DW   NUL   
0AAB   B2 0A                  DW   funcSrcM_1868S1461   
0AAD   AF 0A                  DW   $+2   
0AAF   00                     DB   0   
0AB0   01 66                  .PSTR   "f"   
0AB2                FUNCSRCM_1868S1461:      
0AB2   7B                     DB   "{"   
0AB3   5C 6B 74 7B            DB   "\\kt{"   ; :kt sink, type
0AB7   30 25 74 3D 3D 2F 77 68 69 DB   "0%t==/whi"   ; break if t != 0 ; TODO replace with /qt
0AC0   5C 64 74 7B            DB   "\\dt{"   
0AC4   31 25 74 3D 3D 2F 77 68 69 20 25 66 5E 20 31 20 25 6B 5E DB   "1%t==/whi %f^ 1 %k^"   ; if t == 1 send data to sink TODO: replace with /qt
0AD7   7D 20 30 20 25 6B 5E   DB   "} 0 %k^"   ; init sink
0ADE   7D                     DB   "}"   
0ADF   7D                     DB   "}"   
0AE0   00                     DB   0   
0AE1                          ;*Macro unroll: FUNC printArray, 2, "abc"
0AE1                PRINTARRAY:      
0AE1   CD 9F 03               CALL   go   
0AE4   00 00                  DW   NUL   
0AE6   EF 0A                  DW   printArrayM_1878S1472   
0AE8   EA 0A                  DW   $+2   
0AEA   02                     DB   2   
0AEB   03 61 62 63            .PSTR   "abc"   
0AEF                PRINTARRAYM_1878S1472:      
0AEF   7B                     DB   "{"   
0AF0   27 5B 20 27 2E 73 20 25 61 2F 61 6C 25 63 3D 20 30 25 62 3D 20 28 25 61 20 25 62 20 3B 2E 20 25 62 20 2B 2B 20 25 62 20 25 63 20 3C 2F 77 68 69 29 5E 20 27 5D 27 2E 73 DB   "'[ '.s %a/al%c= 0%b= (%a %b ;. %b ++ %b %c </whi)^ ']'.s"   
0B28   7D                     DB   "}"   
0B29   00                     DB   0   
0B2A                             ;*******************************************************************
0B2A                             ; implementations continued
0B2A                             ;*******************************************************************
0B2A                COMMA:       
0B2A   CD A5 0F               CALL   cmdTable   
0B2D   63 00                  DB   "c",NUL   ; .c print char
0B2F   39 0B                  DW   readChar   
0B31   73 00                  DB   "s",NUL   ; .s print string
0B33   42 0B                  DW   readString   
0B35   00 00                  DW   NUL   ; .  print number, fall through
0B37   64 0B                  DW   readNumber   
0B39                READCHAR:      
0B39   CD 81 00               CALL   getchar   
0B3C   26 00                  LD   h,0   
0B3E   6F                     LD   l,a   
0B3F   E5                     PUSH   hl   
0B40   DD E9                  JP   (ix)   
0B42                READSTRING:      
0B42   ED 5B EA 23            LD   de,(vHeapPtr)   
0B46   D5                     PUSH   de   ; return start of string
0B47                READSTRING1:      
0B47   CD 81 00               CALL   getchar   
0B4A   FE 0D                  CP   "\r"   
0B4C   28 0D                  JR   z,readString2   
0B4E   12                     LD   (de),a   
0B4F   13                     INC   de   
0B50   3A F1 23               LD   a,(vEcho)   
0B53   3C                     INC   a   
0B54   20 F1                  JR   nz,readString1   
0B56   CD 85 00               CALL   putchar   
0B59   18 EC                  JR   readString1   
0B5B                READSTRING2:      
0B5B   AF                     XOR   a   
0B5C   12                     LD   (de),a   
0B5D   13                     INC   de   
0B5E   ED 53 EA 23            LD   (vHeapPtr),de   
0B62   DD E9                  JP   (ix)   
0B64                READNUMBER:      
0B64   DD E5                  PUSH   ix   
0B66                          ;*Macro unroll:  PERFORM readString
0B66   DD 21 6D 0B            LD   ix,performM_1922S1521   
0B6A   C3 42 0B               JP   readString   
0B6D                PERFORMM_1922S1521:      
0B6D   60 69                  LD   hl,bc   ; save bc, hl = string*
0B6F   E3                     EX   (sp),hl   
0B70   22 EA 23               LD   (vHeapPtr),hl   ; restore heap* to before string
0B73   44 4D                  LD   bc,hl   
0B75   0A                     LD   a,(bc)   
0B76   FE 2D                  CP   "-"   
0B78   28 11                  JR   z,readNumber1   
0B7A   FE 24                  CP   "$"   
0B7C   28 17                  JR   z,readNumber2   
0B7E   FE 30                  CP   "0"   
0B80   30 09                  JR   nc,readNumber1   
0B82   FE 3A                  CP   "9"+1   
0B84   38 05                  JR   c,readNumber1   
0B86   21 00 00               LD   hl,0   
0B89   18 12                  JR   readNumber3   
0B8B                READNUMBER1:      
0B8B                          ;*Macro unroll:  PERFORM num
0B8B   DD 21 92 0B            LD   ix,performM_1939S1538   
0B8F   C3 26 0C               JP   num   
0B92                PERFORMM_1939S1538:      
0B92   E1                     POP   hl   
0B93   18 08                  JR   readNumber3   
0B95                READNUMBER2:      
0B95                          ;*Macro unroll:  PERFORM hexNum
0B95   DD 21 9C 0B            LD   ix,performM_1943S1542   
0B99   C3 AD 0B               JP   hexNum   
0B9C                PERFORMM_1943S1542:      
0B9C   E1                     POP   hl   
0B9D                READNUMBER3:      
0B9D   C1                     POP   bc   
0B9E   DD E1                  POP   ix   
0BA0   E5                     PUSH   hl   
0BA1   DD E9                  JP   (ix)   
0BA3                             ; ~ bitwise invert
0BA3                TILDE:       
0BA3                INVERT:      
0BA3   E1                     POP   hl   ; Bitwise xor the top 2 elements of the stack
0BA4   7D                     LD   a,l   
0BA5   2F                     CPL      
0BA6   6F                     LD   l,a   
0BA7   7C                     LD   a,h   
0BA8   2F                     CPL      
0BA9   67                     LD   h,a   
0BAA   C3 D8 02               JP   add3   
0BAD                             ; $ hex                         ; 22
0BAD                DOLLAR:      
0BAD                HEXNUM:      
0BAD   21 00 00               LD   hl,0   ; Clear hl to accept the number
0BB0                HEXNUM1:      
0BB0   03                     INC   bc   
0BB1   0A                     LD   a,(bc)   ; Get the character which is a numeral
0BB2   CB 77                  BIT   6,a   ; is it uppercase alpha?
0BB4   28 02                  JR   z,hexnum2   ; no a decimal
0BB6   D6 07                  SUB   7   ; sub 7  to make $a - $F
0BB8                HEXNUM2:      
0BB8   D6 30                  SUB   $30   ; form decimal digit
0BBA   DA 48 0C               JP   c,num2   
0BBD   FE 10                  CP   $0F+1   
0BBF   D2 48 0C               JP   nc,num2   
0BC2   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
0BC3   29                     ADD   hl,hl   ; 4X
0BC4   29                     ADD   hl,hl   ; 8X
0BC5   29                     ADD   hl,hl   ; 16X
0BC6   85                     ADD   a,l   ; add into bottom of hl
0BC7   6F                     LD   l,a   
0BC8   18 E6                  JR   hexnum1   
0BCA                             ; ? if                            23
0BCA                             ; condition then else -- value
0BCA                QUESTION:      
0BCA                IF:          
0BCA   D1                     POP   de   ; de = else
0BCB   E1                     POP   hl   ; hl = then
0BCC   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
0BCD   7C                     LD   a,h   
0BCE   B5                     OR   l   
0BCF   E1                     POP   hl   ; hl = then
0BD0   CA A0 03               JP   z,go1   ; if z de = else
0BD3   EB                     EX   de,hl   ; condition = false, de = then
0BD4   C3 A0 03               JP   go1   
0BD7                             ; string                        ;38
0BD7                             ; -- ptr                        ; points to start of string chars,                                 ; length is stored at start - 2 bytes
0BD7                QUOTE:       
0BD7                STRING:      
0BD7   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0BDA   E5                     PUSH   hl   ; save start of string
0BDB   0A                     LD   a,(bc)   
0BDC   5F                     LD   e,a   ; e = matching terminator
0BDD   03                     INC   bc   ; point to next char
0BDE   18 03                  JR   string2   
0BE0                STRING1:      
0BE0   77                     LD   (hl),a   
0BE1   23                     INC   hl   ; increase count
0BE2   03                     INC   bc   ; point to next char
0BE3                STRING2:      
0BE3   0A                     LD   a,(bc)   
0BE4   BB                     CP   e   ; is it the string terminator
0BE5   28 02                  JR   z,string3   
0BE7   18 F7                  JR   string1   
0BE9                STRING3:      
0BE9   AF                     XOR   a   ; write NUL to terminate string
0BEA   77                     LD   (hl),a   ; hl = end of string
0BEB   23                     INC   hl   
0BEC   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0BEF   DD E9                  JP   (ix)   
0BF1                             ; %a .. %z                      43
0BF1                             ; -- value
0BF1                             ; returns value of arg
0BF1                PERCENT:      
0BF1                ARG:         
0BF1   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
0BF4   FD 56 05               LD   d,(iy+5)   
0BF7   EB                     EX   de,hl   
0BF8   7D                     LD   a,l   ; arg_list* == null, skip
0BF9   B4                     OR   h   
0BFA   28 1A                  JR   z,arg0a   
0BFC   23                     INC   hl   ; a = num_args, hl = arg_list*
0BFD   7E                     LD   a,(hl)   
0BFE   23                     INC   hl   
0BFF   B7                     OR   a   
0C00   28 14                  JR   z,arg0a   ; num_args == 0, skip
0C02   5F                     LD   e,a   ; e = a = num_args
0C03   03                     INC   bc   ; a = next char = dollar_name
0C04   0A                     LD   a,(bc)   
0C05   C5                     PUSH   bc   ; save IP
0C06   43                     LD   b,e   ; b = e = num_args
0C07   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
0C0A   FD 56 03               LD   d,(iy+3)   
0C0D                ARG0:        
0C0D   1B                     DEC   de   ; a = dollar_name, de = next arg*
0C0E   1B                     DEC   de   
0C0F   BE                     CP   (hl)   
0C10   28 09                  JR   z,arg1   
0C12   23                     INC   hl   ; hl = next arg_list*
0C13   10 F8                  DJNZ   arg0   
0C15   C1                     POP   bc   ; no match, restore IP
0C16                ARG0A:       
0C16   11 00 00               LD   de,0   ; return 0
0C19   18 08                  JR   arg1a   
0C1B                ARG1:        
0C1B   C1                     POP   bc   ; restore IP
0C1C   EB                     EX   de,hl   ; hl = arg*
0C1D   22 F8 23               LD   (vPointer),hl   ; store arg* in setter
0C20   5E                     LD   e,(hl)   
0C21   23                     INC   hl   
0C22   56                     LD   d,(hl)   ; de = arg
0C23                ARG1A:       
0C23   D5                     PUSH   de   ; push arg
0C24   DD E9                  JP   (ix)   
0C26                             ; 0..9 number                   37
0C26                NUM:         
0C26   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0C29   0A                     LD   a,(bc)   ; Get numeral or -
0C2A   FE 2D                  CP   "-"   
0C2C   20 01                  JR   nz,num0   
0C2E   03                     INC   bc   ; move to next char, no flags affected
0C2F                NUM0:        
0C2F   08                     EX   af,af'   ; save zero flag = 0 for later
0C30                NUM1:        
0C30   0A                     LD   a,(bc)   ; read digit
0C31   D6 30                  SUB   "0"   ; less than 0?
0C33   38 13                  JR   c,num2   ; not a digit, exit loop
0C35   FE 0A                  CP   10   ; greater that 9?
0C37   30 0F                  JR   nc,num2   ; not a digit, exit loop
0C39   03                     INC   bc   ; inc IP
0C3A   54 5D                  LD   de,hl   ; multiply hl * 10
0C3C   29                     ADD   hl,hl   
0C3D   29                     ADD   hl,hl   
0C3E   19                     ADD   hl,de   
0C3F   29                     ADD   hl,hl   
0C40   85                     ADD   a,l   ; add digit in a to hl
0C41   6F                     LD   l,a   
0C42   3E 00                  LD   a,0   
0C44   8C                     ADC   a,h   
0C45   67                     LD   h,a   
0C46   18 E8                  JR   num1   
0C48                NUM2:        
0C48   0B                     DEC   bc   
0C49   08                     EX   af,af'   ; restore zero flag
0C4A   20 07                  JR   nz,num3   
0C4C   EB                     EX   de,hl   ; negate the value of hl
0C4D   21 00 00               LD   hl,0   
0C50   B7                     OR   a   ; jump to sub2
0C51   ED 52                  SBC   hl,de   
0C53                NUM3:        
0C53   E5                     PUSH   hl   ; Put the number on the stack
0C54   DD E9                  JP   (ix)   ; and process the next character
0C56                             ; }                               58
0C56                RBRACE:      
0C56                BLOCKEND:      
0C56   FD 5E 00               LD   e,(iy+0)   ; vTemp1 = oldBP
0C59   FD 56 01               LD   d,(iy+1)   
0C5C   ED 53 04 24            LD   (vTemp1),de   
0C60   FD 5E 06               LD   e,(iy+6)   ; vTemp2 = oldIP
0C63   FD 56 07               LD   d,(iy+7)   
0C66   ED 53 06 24            LD   (vTemp2),de   
0C6A   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0C6D   FD 56 03               LD   d,(iy+3)   
0C70   EB                     EX   de,hl   
0C71   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
0C74   FD 56 01               LD   d,(iy+1)   
0C77   13                     INC   de   ; for carry flag <=
0C78   B7                     OR   a   
0C79   ED 52                  SBC   hl,de   
0C7B   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0C7D   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0C7F   FD 5D                  LD   e,iyl   
0C81   21 08 00               LD   hl,8   
0C84   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
0C85   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0C86   18 0C                  JR   blockEnd2   
0C88                BLOCKEND1:      ; same scope
0C88   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0C8B   FD 56 03               LD   d,(iy+3)   
0C8E   EB                     EX   de,hl   
0C8F   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
0C91   FD 5D                  LD   e,iyl   
0C93   EB                     EX   de,hl   
0C94                BLOCKEND2:      
0C94   44 4D                  LD   bc,hl   ; bc = hl = BP
0C96   B7                     OR   a   ; hl = BP - SP = count
0C97   ED 72                  SBC   hl,sp   
0C99   7D                     LD   a,l   
0C9A   B4                     OR   h   
0C9B   28 09                  JR   z,blockEnd3   
0C9D   C5                     PUSH   bc   ; bc = count, hl = BP
0C9E   44 4D                  LD   bc,hl   
0CA0   E1                     POP   hl   
0CA1   2B                     DEC   hl   ; hl = BP-1
0CA2   1B                     DEC   de   ; de = args*-1
0CA3   ED B8                  LDDR      
0CA5   13                     INC   de   
0CA6                BLOCKEND3:      
0CA6   EB                     EX   de,hl   ; sp = de = new tos*
0CA7   F9                     LD   sp,hl   
0CA8   ED 4B 06 24            LD   bc,(vTemp2)   
0CAC   FD 2A 04 24            LD   iy,(vTemp1)   
0CB0   ED 5B EC 23            LD   de,(vRecurPtr)   ; de = recur vector
0CB4   7B                     LD   a,e   ; check for NUL
0CB5   B2                     OR   d   
0CB6   20 02                  JR   nz,blockEnd4   
0CB8   DD E9                  JP   (ix)   
0CBA                BLOCKEND4:      
0CBA   21 00 00               LD   hl,0   ; clear recur vector
0CBD   22 EC 23               LD   (vRecurPtr),hl   
0CC0   C3 A0 03               JP   go1   ; execute de
0CC3                GOBLOCK:      
0CC3   ED 53 04 24            LD   (vTemp1),de   ; save de
0CC7   21 00 21               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0CCA   FD 54                  LD   d,iyh   
0CCC   FD 5D                  LD   e,iyl   
0CCE   B7                     OR   a   ; if stack* == BP then this is the root_scope
0CCF   ED 52                  SBC   hl,de   
0CD1   ED 5B 04 24            LD   de,(vTemp1)   ; restore de
0CD5   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0CD6   B4                     OR   h   
0CD7   3E 00                  LD   a,0   
0CD9   28 6A                  JR   z,goFunc8   
0CDB   C5                     PUSH   bc   ; push IP
0CDC   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0CDF   FD 46 05               LD   b,(iy+5)   
0CE2   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
0CE5   FD 66 03               LD   h,(iy+3)   
0CE8                GOBLOCK2:      
0CE8   C5                     PUSH   bc   ; arg_list*
0CE9   E5                     PUSH   hl   ; first_arg*
0CEA   FD E5                  PUSH   iy   ; push BP
0CEC   FD 21 00 00            LD   iy,0   ; BP = SP
0CF0   FD 39                  ADD   iy,sp   
0CF2                GOBLOCK3:      
0CF2   42 4B                  LD   bc,de   ; bc = de = block*-1
0CF4   DD E9                  JP   (ix)   
0CF6                GOFUNC:      ; execute func
0CF6   EB                     EX   de,hl   ; hl = func*
0CF7   5E                     LD   e,(hl)   ; de = partial_array*
0CF8   23                     INC   hl   
0CF9   56                     LD   d,(hl)   
0CFA   23                     INC   hl   
0CFB   7B                     LD   a,e   ; if partial_array* == null skip
0CFC   B2                     OR   d   
0CFD   28 21                  JR   z,goFunc3   
0CFF   ED 43 04 24            LD   (vTemp1),bc   
0D03   22 06 24               LD   (vTemp2),hl   ; save bc,hl
0D06   EB                     EX   de,hl   ; hl = partial_array*
0D07   2B                     DEC   hl   ; bc = count
0D08   46                     LD   b,(hl)   
0D09   2B                     DEC   hl   
0D0A   4E                     LD   c,(hl)   
0D0B   23                     INC   hl   ; hl = array data*
0D0C   23                     INC   hl   
0D0D   18 06                  JR   goFunc2   ; push each item on stack
0D0F                GOFUNC1:      
0D0F   5E                     LD   e,(hl)   ; de = partial item
0D10   23                     INC   hl   
0D11   56                     LD   d,(hl)   
0D12   23                     INC   hl   
0D13   D5                     PUSH   de   ; push on stack
0D14   0B                     DEC   bc   
0D15                GOFUNC2:      
0D15   79                     LD   a,c   ; if count != 0 then loop
0D16   B0                     OR   b   
0D17   20 F6                  JR   nz,goFunc1   
0D19   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0D1D   2A 06 24               LD   hl,(vTemp2)   ; restore hl
0D20                GOFUNC3:      
0D20   5E                     LD   e,(hl)   ; de = block*
0D21   23                     INC   hl   
0D22   56                     LD   d,(hl)   
0D23   23                     INC   hl   
0D24   ED 53 04 24            LD   (vTemp1),de   ; save block*
0D28   5E                     LD   e,(hl)   ; de = arg_list*
0D29   23                     INC   hl   
0D2A   56                     LD   d,(hl)   
0D2B   23                     INC   hl   
0D2C   EB                     EX   de,hl   ; hl = arg_list*
0D2D   ED 5B 04 24            LD   de,(vTemp1)   ; restore de = block*
0D31   7D                     LD   a,l   ; if arg_list* == null a = 0
0D32   B4                     OR   h   
0D33   20 03                  JR   nz,goFunc4   
0D35   AF                     XOR   a   ; a = num_args (zero), num_locals (zero)
0D36   18 0D                  JR   goFunc8   
0D38                GOFUNC4:      ; allocate locals
0D38   7E                     LD   a,(hl)   ; a = num_locals*, de = block* hl = arg_list*
0D39   18 03                  JR   goFunc6   
0D3B                GOFUNC5:      ; loop
0D3B   3B                     DEC   sp   
0D3C   3B                     DEC   sp   
0D3D   3D                     DEC   a   
0D3E                GOFUNC6:      
0D3E   B7                     OR   a   
0D3F   20 FA                  JR   nz,goFunc5   ; end loop
0D41                GOFUNC7:      
0D41   23                     INC   hl   ; a = num_args* x 2
0D42   7E                     LD   a,(hl)   
0D43   2B                     DEC   hl   
0D44   87                     ADD   a,a   ; a *= 2
0D45                GOFUNC8:      
0D45   C5                     PUSH   bc   ; push IP, a = num_args* x 2, de = block*
0D46   44 4D                  LD   bc,hl   
0D48   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
0D4B   85                     ADD   a,l   
0D4C   6F                     LD   l,a   
0D4D   39                     ADD   hl,sp   
0D4E   18 98                  JR   goBlock2   
0D50                             ; =                              21
0D50                             ; value _oldValue --            ; uses address in vPointer 15
0D50                ASSIGN:      
0D50   E1                     POP   hl   ; discard last accessed value
0D51   E1                     POP   hl   ; hl = new value
0D52                ASSIGN0:      
0D52   EB                     EX   de,hl   ; de = new value
0D53   2A F8 23               LD   hl,(vPointer)   
0D56                ASSIGN1:      ; entry point from defineEnd
0D56   73                     LD   (hl),e   
0D57   3A EE 23               LD   a,(vDataWidth)   
0D5A   3D                     DEC   a   ; is it byte?
0D5B   28 02                  JR   z,assign2   
0D5D   23                     INC   hl   
0D5E   72                     LD   (hl),d   
0D5F                ASSIGN2:      
0D5F   DD E9                  JP   (ix)   
0D61                             ; hl = value1, de = value2
0D61                             ; hl = result
0D61                EQUALS:      
0D61   B7                     OR   a   ; reset the carry flag
0D62   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0D64   28 16                  JR   z,true1   
0D66   18 1A                  JR   false1   
0D68                NOTEQUALS:      
0D68   B7                     OR   a   ; reset the carry flag
0D69   ED 52                  SBC   hl,de   
0D6B   20 0F                  JR   nz,true1   
0D6D   18 13                  JR   false1   
0D6F                             ; hl = value1 de = value2
0D6F                             ; hl = result
0D6F                LESSTHANEQ:      
0D6F   B7                     OR   a   
0D70   ED 52                  SBC   hl,de   
0D72   18 05                  JR   lessthan1   
0D74                             ; hl = value1 de = value2
0D74                             ; hl = result
0D74                LESSTHAN:      
0D74   B7                     OR   a   
0D75   ED 52                  SBC   hl,de   
0D77   28 09                  JR   z,false1   
0D79                LESSTHAN1:      
0D79   FA 82 0D               JP   m,false1   
0D7C                TRUE1:       
0D7C   21 FF FF               LD   hl,TRUE   
0D7F   E5                     PUSH   hl   
0D80   DD E9                  JP   (ix)   
0D82                NULL1:       
0D82                FALSE1:      
0D82   21 00 00               LD   hl,FALSE   
0D85   E5                     PUSH   hl   
0D86   DD E9                  JP   (ix)   
0D88                SPREAD:      
0D88   E1                     POP   hl   ; hl = array*
0D89   ED 43 04 24            LD   (vTemp1),bc   ; save bc
0D8D   2B                     DEC   hl   ; bc = length
0D8E   46                     LD   b,(hl)   
0D8F   2B                     DEC   hl   
0D90   4E                     LD   c,(hl)   
0D91   23                     INC   hl   ; move back to array 0
0D92   23                     INC   hl   
0D93   18 0D                  JR   spread3   
0D95                SPREAD1:      
0D95   5E                     LD   e,(hl)   ; e = lsb data at hl
0D96   23                     INC   hl   
0D97   3A EE 23               LD   a,(vDataWidth)   ; data width = 1, d = 0, skip
0D9A   57                     LD   d,a   
0D9B   15                     DEC   d   
0D9C   28 02                  JR   z,spread2   
0D9E   56                     LD   d,(hl)   ; d = msb data at hl
0D9F   23                     INC   hl   
0DA0                SPREAD2:      
0DA0   D5                     PUSH   de   ; return de
0DA1   0B                     DEC   bc   ; count--
0DA2                SPREAD3:      
0DA2   79                     LD   a,c   ; exit loop if bc == 0
0DA3   B0                     OR   b   
0DA4   20 EF                  JR   nz,spread1   
0DA6   ED 4B 04 24            LD   bc,(vTemp1)   ; restore bc
0DAA   DD E9                  JP   (ix)   
0DAC                             ; shiftLeft
0DAC                             ; value count <<
0DAC                             ; count variable <<=
0DAC                SHIFTLEFT:      
0DAC   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DAD   D1                     POP   de   
0DAE   03                     INC   bc   
0DAF   0A                     LD   a,(bc)   
0DB0   FE 3D                  CP   "="   
0DB2   28 02                  JR   z,shiftLeft2   
0DB4   0B                     DEC   bc   
0DB5   EB                     EX   de,hl   ; de = arg_b, hl = arg_a
0DB6                SHIFTLEFT2:      
0DB6   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DBA   43                     LD   b,e   ; b = loop counter
0DBB   04                     INC   b   ; test for counter=0 case
0DBC   18 01                  JR   shiftLeft4   
0DBE                SHIFTLEFT3:      
0DBE   29                     ADD   hl,hl   ; left shift hl
0DBF                SHIFTLEFT4:      
0DBF   10 FD                  DJNZ   shiftLeft3   
0DC1   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DC5   C3 9D 02               JP   sub3   
0DC8                             ; shiftRight
0DC8                             ; value count >>
0DC8                             ; count variable >>=
0DC8                SHIFTRIGHT:      
0DC8   E1                     POP   hl   ; de = arg_a, hl = arg_b
0DC9   D1                     POP   de   
0DCA   03                     INC   bc   
0DCB   0A                     LD   a,(bc)   
0DCC   FE 3D                  CP   "="   
0DCE   28 02                  JR   z,shiftRight2   
0DD0   0B                     DEC   bc   
0DD1   EB                     EX   de,hl   ; de = arg_a, hl = arg_b
0DD2                SHIFTRIGHT2:      
0DD2   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0DD6   43                     LD   b,e   ; b = loop counter
0DD7   04                     INC   b   ; test for counter=0 case
0DD8   18 04                  JR   shiftRight4   
0DDA                SHIFTRIGHT3:      
0DDA   CB 3C                  SRL   h   ; right shift hl
0DDC   CB 1D                  RR   l   
0DDE                SHIFTRIGHT4:      
0DDE   10 FA                  DJNZ   shiftRight3   
0DE0   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0DE4   C3 9D 02               JP   sub3   
0DE7                             ; division subroutine.
0DE7                             ; bc: divisor, de: dividend, hl: remainder
0DE7                DIVIDE:      
0DE7   21 00 00               LD   hl,0   ; zero the remainder
0DEA   3E 10                  LD   a,16   ; loop counter
0DEC                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0DEC   CB 21                  SLA   c   
0DEE   CB 10                  RL   b   
0DF0   ED 6A                  ADC   hl,hl   
0DF2   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
0DF4   38 03                  JR   c,divide2   
0DF6   0C                     INC   c   
0DF7   18 01                  JR   divide3   
0DF9                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
0DF9   19                     ADD   hl,de   
0DFA                DIVIDE3:      
0DFA   3D                     DEC   a   
0DFB   20 EF                  JR   nz,divide1   
0DFD   50 59                  LD   de,bc   ; result from bc to de
0DFF   C9                     RET      
0E00                DOTNEXT:      
0E00   3A F2 23               LD   a,(vStrMode)   ; if string mode then exit
0E03   3C                     INC   a   
0E04   20 02                  JR   nz,dotNext1   
0E06   DD E9                  JP   (ix)   
0E08                DOTNEXT1:      
0E08   11 00 22               LD   de,BUFFER   
0E0B   2A E8 23               LD   hl,(vBufPtr)   
0E0E   36 00                  LD   (hl),0   ; store NUL at end of string
0E10   ED 53 E8 23            LD   (vBufPtr),de   ; reset vBufPtr to vHeapPtr
0E14   EB                     EX   de,hl   ; hl = BUFFER
0E15   CD E1 0F               CALL   putstr   
0E18   DD E9                  JP   (ix)   
0E1A                             ; arg_list - parses arg_list e.g. ab:c
0E1A                             ; -- arg_list*
0E1A                PARSEARGS:      
0E1A   11 00 00               LD   de,0   ; d = count locals, e = count args ()
0E1D   2A EA 23               LD   hl,(vHeapPtr)   ; hl = heap*
0E20   E5                     PUSH   hl   ; save start of arg_list
0E21   23                     INC   hl   ; skip length fields to start of string
0E22   23                     INC   hl   
0E23   03                     INC   bc   ; point to next char
0E24                PARSEARGS1:      
0E24   0A                     LD   a,(bc)   
0E25   FE 3A                  CP   ":"   ; ":" switches from args to locals
0E27   20 03                  JR   nz,parseArgs1a   
0E29   14                     INC   d   ; non zero value local count acts as flag
0E2A   18 10                  JR   parseArgs3   
0E2C                PARSEARGS1A:      
0E2C   FE 61                  CP   "a"   ; < "a" terminates arg_list
0E2E   38 0F                  JR   c,parseArgs4   
0E30   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
0E32   30 0B                  JR   nc,parseArgs4   
0E34                PARSEARGS2:      
0E34   77                     LD   (hl),a   
0E35   23                     INC   hl   
0E36   1C                     INC   e   ; increase arg count
0E37   AF                     XOR   a   
0E38   B2                     OR   d   
0E39   28 01                  JR   z,parseArgs3   
0E3B   14                     INC   d   ; if d > 0 increase local count
0E3C                PARSEARGS3:      
0E3C   03                     INC   bc   ; point to next char
0E3D   18 E5                  JR   parseArgs1   
0E3F                PARSEARGS4:      
0E3F   0B                     DEC   bc   
0E40   AF                     XOR   a   
0E41   B2                     OR   d   
0E42   28 01                  JR   z,parseArgs5   
0E44   15                     DEC   d   ; remove initial inc
0E45                PARSEARGS5:      
0E45   23                     INC   hl   
0E46   22 EA 23               LD   (vHeapPtr),hl   ; bump heap* to after end of string
0E49   E1                     POP   hl   ; hl = start of arg_list
0E4A   72                     LD   (hl),d   ; write number of locals at start - 1
0E4B   23                     INC   hl   
0E4C   73                     LD   (hl),e   ; write number of args + locals at start - 2
0E4D   2B                     DEC   hl   
0E4E   E3                     EX   (sp),hl   
0E4F   E9                     JP   (hl)   
0E50                             ; create block: parses block e.g. 00bbIC4uLi4g
0E50                             ; -- block*
0E50                PARSEBLOCK:      
0E50   C5                     PUSH   bc   ; return pointer to first { of block
0E51   03                     INC   bc   
0E52   16 01                  LD   d,1   ; nesting: count first parenthesis
0E54                PARSEBLOCK1:      ; Skip to end of definition
0E54   0A                     LD   a,(bc)   ; Get the next character
0E55   03                     INC   bc   ; Point to next character
0E56   FE 21                  CP   " " + 1   ; ignore whitespace
0E58   38 FA                  JR   c,parseBlock1   
0E5A   FE 27                  CP   "'"   ; quote char
0E5C   28 0F                  JR   z,parseBlock2   
0E5E   FE 22                  CP   DQ   ; double quote char
0E60   28 0B                  JR   z,parseBlock2   
0E62   FE 60                  CP   "`"   ; grave char
0E64   28 07                  JR   z,parseBlock2   
0E66   CB 7A                  BIT   7,d   
0E68   20 EA                  JR   nz,parseBlock1   
0E6A   C3 73 0E               JP   parseBlock3   
0E6D                PARSEBLOCK2:      
0E6D   3E 80                  LD   a,$80   
0E6F   AA                     XOR   d   
0E70   57                     LD   d,a   
0E71   18 E1                  JR   parseBlock1   
0E73                PARSEBLOCK3:      
0E73   FE 28                  CP   "("   
0E75   28 16                  JR   z,parseBlock4   
0E77   FE 7B                  CP   "{"   
0E79   28 12                  JR   z,parseBlock4   
0E7B   FE 5B                  CP   "["   
0E7D   28 0E                  JR   z,parseBlock4   
0E7F   FE 29                  CP   ")"   
0E81   28 0D                  JR   z,parseBlock5   
0E83   FE 7D                  CP   "}"   
0E85   28 09                  JR   z,parseBlock5   
0E87   FE 5D                  CP   "]"   
0E89   28 05                  JR   z,parseBlock5   
0E8B   18 C7                  JR   parseBlock1   
0E8D                PARSEBLOCK4:      
0E8D   14                     INC   d   
0E8E   18 C4                  JR   parseBlock1   
0E90                PARSEBLOCK5:      
0E90   15                     DEC   d   
0E91   20 C1                  JR   nz,parseBlock1   ; get the next element
0E93   60 69                  LD   hl,bc   ; hl = IP
0E95   11 22 24               LD   de,HEAP   ; is IP pointing to object in heap
0E98   B7                     OR   a   ; IP - HEAP
0E99   ED 52                  SBC   hl,de   
0E9B   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0E9D   28 1C                  JR   z,parseBlock6   
0E9F   60 69                  LD   hl,bc   ; hl = IP
0EA1   D1                     POP   de   ; de = block*
0EA2   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0EA6   B7                     OR   a   ; bc = size
0EA7   ED 52                  SBC   hl,de   
0EA9   44 4D                  LD   bc,hl   
0EAB   EB                     EX   de,hl   ; hl = block* de = heap*
0EAC   ED 5B EA 23            LD   de,(vHeapPtr)   
0EB0   D5                     PUSH   de   ; return hblock*
0EB1   ED B0                  LDIR      ; copy size bytes from block* to hblock*
0EB3   ED 53 EA 23            LD   (vHeapPtr),de   ; heap* += size
0EB7   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0EBB                PARSEBLOCK6:      
0EBB   0B                     DEC   bc   ; balanced, exit
0EBC   E1                     POP   hl   ; hl = block*
0EBD   E3                     EX   (sp),hl   ; return to caller
0EBE   E9                     JP   (hl)   
0EBF                             ; create function
0EBF                             ; arg_list* block* -- func*
0EBF                CREATEFUNC:      
0EBF   E1                     POP   hl   ; save retrn address
0EC0   22 08 24               LD   (vTemp3),hl   
0EC3   ED 43 04 24            LD   (vTemp1),bc   ; save IP
0EC7   E1                     POP   hl   ; hl = block*
0EC8   22 06 24               LD   (vTemp2),hl   ; save block*
0ECB   FD 5E 04               LD   e,(iy+4)   ; de = outer_arg_list
0ECE   FD 56 05               LD   d,(iy+5)   
0ED1   7B                     LD   a,e   ; if arg_list == null then make a func
0ED2   B2                     OR   d   
0ED3   20 09                  JR   nz,createFunc0   
0ED5   21 00 00               LD   hl,0   ; partial_array = null
0ED8   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0EDC   18 65                  JR   createFunc5   
0EDE                CREATEFUNC0:      
0EDE   E1                     POP   hl   ; hl = inner_arg_list*
0EDF   E5                     PUSH   hl   ; save inner_arg_list
0EE0   ED 5B EA 23            LD   de,(vHeapPtr)   ; de = compile*
0EE4   7E                     LD   a,(hl)   ; compile inner_num_locals
0EE5   4F                     LD   c,a   ; b = inner_num_locals
0EE6   12                     LD   (de),a   
0EE7   23                     INC   hl   
0EE8   13                     INC   de   
0EE9   7E                     LD   a,(hl)   ; compile inner_length
0EEA   12                     LD   (de),a   
0EEB   91                     SUB   c   ; a = inner_num args
0EEC   23                     INC   hl   
0EED   13                     INC   de   
0EEE   B7                     OR   a   ; compile args if inner_length > 0
0EEF   28 05                  JR   z,createFunc1   
0EF1   4F                     LD   c,a   ; bc = a
0EF2   06 00                  LD   b,0   
0EF4   ED B0                  LDIR      
0EF6                CREATEFUNC1:      
0EF6   EB                     EX   de,hl   ; hl = outer_arg_list
0EF7   FD 5E 04               LD   e,(iy+4)   
0EFA   FD 56 05               LD   d,(iy+5)   
0EFD   EB                     EX   de,hl   
0EFE   23                     INC   hl   ; a = outer_length
0EFF   7E                     LD   a,(hl)   
0F00   23                     INC   hl   
0F01   B7                     OR   a   
0F02   28 05                  JR   z,createFunc2   
0F04   4F                     LD   c,a   
0F05   06 00                  LD   b,0   
0F07   ED B0                  LDIR      ; append outer_args
0F09                CREATEFUNC2:      ; a = outer_length
0F09   47                     LD   b,a   ; b = a = outer_length
0F0A   2A EA 23               LD   hl,(vHeapPtr)   ; b > 0, hl = start of cloned arg_list
0F0D   23                     INC   hl   
0F0E   7E                     LD   a,(hl)   ; add outer_length to new length
0F0F   80                     ADD   a,b   
0F10   77                     LD   (hl),a   
0F11   2B                     DEC   hl   
0F12   78                     LD   a,b   ; save outer_length in a'
0F13   08                     EX   af,af'   
0F14   E3                     EX   (sp),hl   ; hl = inner_arg_list*, (sp) new_arg_list
0F15   7E                     LD   a,(hl)   ; c = a = inner_num_locals
0F16   B7                     OR   a   
0F17   28 0F                  JR   z,createFunc2a   ; if inner_num_locals == 0 skip
0F19   4F                     LD   c,a   ; c = inner_num_locals
0F1A   06 00                  LD   b,0   ; bc = inner_num_locals
0F1C   23                     INC   hl   ; a = inner_length
0F1D   7E                     LD   a,(hl)   
0F1E   91                     SUB   c   ; a = inner_num_args
0F1F   23                     INC   hl   ; hl = inner_arg_chars
0F20   85                     ADD   a,l   ; hl += a
0F21   6F                     LD   l,a   
0F22   3E 00                  LD   a,0   
0F24   84                     ADD   a,h   
0F25   67                     LD   h,a   
0F26   ED B0                  LDIR      ; append inner_locals
0F28                CREATEFUNC2A:      
0F28   08                     EX   af,af'   ; restore outer_length to a, de = partial_array[-2]
0F29   12                     LD   (de),a   ; compile partial_array length field
0F2A   13                     INC   de   
0F2B   AF                     XOR   a   
0F2C   12                     LD   (de),a   
0F2D   13                     INC   de   
0F2E   D5                     PUSH   de   ; push partial_array*
0F2F   EB                     EX   de,hl   ; hl = first_arg, copy outer_args+locals to partial_array
0F30   FD 5E 02               LD   e,(iy+2)   
0F33   FD 56 03               LD   d,(iy+3)   
0F36   EB                     EX   de,hl   
0F37                CREATEFUNC3:      
0F37   2B                     DEC   hl   ; c = MSB of arg from stack (incl. locals)
0F38   4E                     LD   c,(hl)   
0F39   2B                     DEC   hl   
0F3A   7E                     LD   a,(hl)   ; a = LSB of arg from stack (incl. locals)
0F3B   12                     LD   (de),a   ; write LSB and MSB to partial_array*
0F3C   13                     INC   de   
0F3D   79                     LD   a,c   
0F3E   12                     LD   (de),a   
0F3F   13                     INC   de   
0F40   10 F5                  DJNZ   createFunc3   ; b = outer_length
0F42                CREATEFUNC4:      
0F42   E1                     POP   hl   ; hl = partial_array*
0F43                CREATEFUNC5:      
0F43   C1                     POP   bc   ; bc = new_arg_list*
0F44   D5                     PUSH   de   ; return new func*
0F45   EB                     EX   de,hl   ; hl = new func*, de = partial_array*
0F46   73                     LD   (hl),e   ; compile partial_array* to func
0F47   23                     INC   hl   
0F48   72                     LD   (hl),d   
0F49   23                     INC   hl   
0F4A   ED 5B 06 24            LD   de,(vTemp2)   ; de = block*
0F4E   73                     LD   (hl),e   ; compile block* to func
0F4F   23                     INC   hl   
0F50   72                     LD   (hl),d   
0F51   23                     INC   hl   
0F52   71                     LD   (hl),c   ; compile new_arg_list* to func
0F53   23                     INC   hl   
0F54   70                     LD   (hl),b   
0F55   23                     INC   hl   
0F56   22 EA 23               LD   (vHeapPtr),hl   ; bump heap ptr
0F59   ED 4B 04 24            LD   bc,(vTemp1)   ; restore IP
0F5D   2A 08 24               LD   hl,(vTemp3)   ; jump to return address
0F60   E9                     JP   (hl)   
0F61                             ;*******************************************************************
0F61                             ; general routines
0F61                             ;*******************************************************************
0F61                             ; hl = address
0F61                VARIABLE:      
0F61   22 F8 23               LD   (vPointer),hl   
0F64   5E                     LD   e,(hl)   
0F65   3A EE 23               LD   a,(vDataWidth)   
0F68   3D                     DEC   a   
0F69   16 00                  LD   d,0   
0F6B   28 03                  JR   z,constant   
0F6D   23                     INC   hl   
0F6E   56                     LD   d,(hl)   
0F6F   2B                     DEC   hl   
0F70                CONSTANT:      
0F70   D5                     PUSH   de   
0F71   DD E9                  JP   (ix)   
0F73                             ; followed by a table
0F73                             ; indexed on the 0-25 lowercase letter
0F73                             ; db lsb(addr)
0F73                             ; the final item index 26 matches any other char
0F73                CHARTABLE:      
0F73   03                     INC   bc   
0F74   0A                     LD   a,(bc)   
0F75   FE 7B                  CP   "z"+1   
0F77   30 0F                  JR   nc,charTable3   
0F79   D6 61                  SUB   "a"   
0F7B   38 0B                  JR   c,charTable3   
0F7D                CHARTABLE1:      
0F7D   E1                     POP   hl   
0F7E   85                     ADD   a,l   
0F7F   6F                     LD   l,a   
0F80   7E                     LD   a,(hl)   ; must have the same msb as the table
0F81   B7                     OR   a   ; a = 0, nop
0F82   20 02                  JR   nz,charTable2   
0F84   DD E9                  JP   (ix)   
0F86                CHARTABLE2:      
0F86   6F                     LD   l,a   
0F87   E9                     JP   (hl)   
0F88                CHARTABLE3:      
0F88   3E 1A                  LD   a,26   
0F8A   0B                     DEC   bc   
0F8B   18 F0                  JR   charTable1   
0F8D                             ; followed by a table
0F8D                             ; db char
0F8D                             ; dw addr
0F8D                             ; the final item must have char == NUL
0F8D                COMMANDTABLE:      
0F8D   E1                     POP   hl   
0F8E                COMMANDTABLE1:      
0F8E   03                     INC   bc   
0F8F                COMMANDTABLE2:      
0F8F   AF                     XOR   a   
0F90   BE                     CP   (hl)   
0F91   20 03                  JR   nz,commandTable3   
0F93   0B                     DEC   bc   
0F94   18 09                  JR   commandTable4   
0F96                COMMANDTABLE3:      
0F96   0A                     LD   a,(bc)   
0F97   BE                     CP   (hl)   
0F98   28 05                  JR   z,commandTable4   
0F9A   23                     INC   hl   
0F9B   23                     INC   hl   
0F9C   23                     INC   hl   
0F9D   18 F0                  JR   commandTable2   
0F9F                COMMANDTABLE4:      
0F9F   23                     INC   hl   
0FA0   5E                     LD   e,(hl)   
0FA1   23                     INC   hl   
0FA2   56                     LD   d,(hl)   
0FA3   EB                     EX   de,hl   
0FA4   E9                     JP   (hl)   
0FA5                             ; followed by a table
0FA5                             ; db char
0FA5                             ; db char - if null only match on first char
0FA5                             ; dw addr
0FA5                             ; the final item must have char == NUL
0FA5                CMDTABLE:      
0FA5   E1                     POP   hl   
0FA6                CMDTABLE1:      
0FA6                CMDTABLE2:      
0FA6   56                     LD   d,(hl)   
0FA7   23                     INC   hl   
0FA8   5E                     LD   e,(hl)   
0FA9   23                     INC   hl   
0FAA   AF                     XOR   a   ; if d == 0, matched
0FAB   BA                     CP   d   
0FAC   28 13                  JR   z,cmdTable5   
0FAE   03                     INC   bc   ; match?
0FAF   0A                     LD   a,(bc)   
0FB0   BA                     CP   d   
0FB1   20 09                  JR   nz,cmdTable4   
0FB3                CMDTABLE3:      
0FB3   AF                     XOR   a   ; if e == 0, matched
0FB4   BB                     CP   e   
0FB5   28 0A                  JR   z,cmdTable5   
0FB7   03                     INC   bc   
0FB8   0A                     LD   a,(bc)   ; match?
0FB9   BB                     CP   e   
0FBA   28 05                  JR   z,cmdTable5   
0FBC                CMDTABLE4:      ; no match, restore bc, go to next table entry
0FBC   0B                     DEC   bc   
0FBD   23                     INC   hl   
0FBE   23                     INC   hl   
0FBF   18 E5                  JR   cmdTable2   
0FC1                CMDTABLE5:      ; matched, jump to addr
0FC1   5E                     LD   e,(hl)   
0FC2   23                     INC   hl   
0FC3   56                     LD   d,(hl)   
0FC4   EB                     EX   de,hl   
0FC5   E9                     JP   (hl)   
0FC6                GETVARADDR:      
0FC6   21 00 00               LD   hl,0   
0FC9   FE 7B                  CP   "z"+1   ; if a > z then exit
0FCB   D0                     RET   nc   
0FCC   D6 41                  SUB   "A"   ; a - 65
0FCE   D8                     RET   c   ; if < A then exit
0FCF   FE 1A                  CP   "Z"+1-"A"   ; if > Z then subtract 7
0FD1   38 05                  JR   c,getVarAddr1   
0FD3   D6 06                  SUB   "a"-("Z"+1)   
0FD5   FE 1A                  CP   "Z"-"A"+1   
0FD7   D8                     RET   c   ; if < a then exit
0FD8                GETVARADDR1:      
0FD8   87                     ADD   a,a   ; double a
0FD9   6F                     LD   l,a   
0FDA   26 23                  LD   h,msb(VARS)   
0FDC   C9                     RET      
0FDD                PUTSTR0:      
0FDD   CD 85 00               CALL   putchar   
0FE0   23                     INC   hl   
0FE1                PUTSTR:      
0FE1   7E                     LD   a,(hl)   
0FE2   B7                     OR   a   
0FE3   20 F8                  JR   nz,putstr0   
0FE5   C9                     RET      
0FE6                             ; **************************************************************************
0FE6                             ; calculate nesting value
0FE6                             ; a is char to be tested,
0FE6                             ; e is the nesting value (initially 0)
0FE6                             ; e is increased by ( and [
0FE6                             ; e is decreased by ) and ]
0FE6                             ; e has its bit 7 toggled by `
0FE6                             ; limited to 127 levels
0FE6                             ; **************************************************************************
0FE6                NESTING:      
0FE6   FE 27                  CP   "'"   ; quote char
0FE8   28 0A                  JR   z,nesting0   
0FEA   FE 22                  CP   DQ   ; double quote char
0FEC   28 06                  JR   z,nesting0   
0FEE   FE 60                  CP   "`"   ; grave char
0FF0   28 02                  JR   z,nesting0   
0FF2   18 0A                  JR   nesting1   
0FF4                NESTING0:      
0FF4   CB 7B                  BIT   7,e   
0FF6   28 03                  JR   z,nesting1a   
0FF8   CB BB                  RES   7,e   
0FFA   C9                     RET      
0FFB                NESTING1A:      
0FFB   CB FB                  SET   7,e   
0FFD   C9                     RET      
0FFE                NESTING1:      
0FFE   CB 7B                  BIT   7,e   
1000   C0                     RET   nz   
1001   FE 7B                  CP   "{"   
1003   28 08                  JR   z,nesting2   
1005   FE 5B                  CP   "["   
1007   28 04                  JR   z,nesting2   
1009   FE 28                  CP   "("   
100B   20 02                  JR   nz,nesting3   
100D                NESTING2:      
100D   1C                     INC   e   
100E   C9                     RET      
100F                NESTING3:      
100F   FE 7D                  CP   "}"   
1011   28 07                  JR   z,nesting4   
1013   FE 5D                  CP   "]"   
1015   28 03                  JR   z,nesting4   
1017   FE 29                  CP   ")"   
1019   C0                     RET   nz   
101A                NESTING4:      
101A   1D                     DEC   e   
101B   C9                     RET      
101C                PROMPT:      
101C   CD 2C 10               CALL   printStr   
101F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
1024   C9                     RET      
1025                CRLF:        
1025   CD 2C 10               CALL   printStr   
1028   0D 0A 00               .CSTR   "\r\n"   
102B   C9                     RET      
102C                             ; prints a null teminated string
102C                             ; the string should be immediately following the call
102C                PRINTSTR:      
102C   E3                     EX   (sp),hl   ; swap			
102D   CD E1 0F               CALL   putstr   
1030   23                     INC   hl   ; inc past NUL
1031   E3                     EX   (sp),hl   ; put it back	
1032   C9                     RET      
1033                INIT:        
1033   21 F0 01               LD   hl,titleStr   
1036   11 0E 24               LD   de,titleBuf   
1039   06 14                  LD   b,20   
103B                INIT1:       
103B   1A                     LD   a,(de)   
103C   BE                     CP   (hl)   
103D   20 17                  JR   nz,coldBoot0   
103F   13                     INC   de   
1040   23                     INC   hl   
1041   10 F8                  DJNZ   init1   
1043                WARMINIT:      
1043   ED 4B FC 23            LD   bc,(vSavedIP)   ; restore IP
1047   ED 7B FE 23            LD   sp,(vSavedSP)   ; restore SP
104B   DD 2A 00 24            LD   ix,(vSavedNext)   ; restore Next
104F   FD 2A 02 24            LD   iy,(vSavedBP)   ; restore BP
1053   C3 8D 10               JP   start1   
1056                COLDBOOT0:      
1056   21 F0 01               LD   hl,titleStr   ; copy titleStr to titleBuf
1059   11 0E 24               LD   de,titleBuf   
105C   06 14                  LD   b,20   
105E   ED B0                  LDIR      
1060                COLDINIT:      
1060   21 DE 01               LD   hl,isysVars   
1063   11 E6 23               LD   de,sysVars   
1066   01 12 00               LD   bc,4 * 2 + 10   
1069   ED B0                  LDIR      
106B   21 00 23               LD   hl,vars   ; 52 vars LO HI
106E   06 34                  LD   b,26*2   
1070   AF                     XOR   a   
1071                COLDBOOT1:      
1071   77                     LD   (hl),a   
1072   23                     INC   hl   
1073   10 FC                  DJNZ   coldBoot1   
1075   DD 21 09 11            LD   ix,NEXT   
1079   FD 21 00 21            LD   iy,STACK   
107D   C9                     RET      
107E                COLDSTART:      
107E   31 00 21               LD   sp,STACK   
1081   CD 56 10               CALL   coldBoot0   
1084   C3 8D 10               JP   start1   
1087                START:       
1087   31 00 21               LD   sp,STACK   ; start Monty
108A   CD 33 10               CALL   init   ; setups
108D                START1:      
108D   21 0E 24               LD   hl,titleBuf   
1090   CD E1 0F               CALL   putstr   ; prog count to stack, put code line 235 on stack then call print
1093                INTERPRET:      
1093   CD 1C 10               CALL   prompt   
1096   01 00 00               LD   bc,0   ; load TIB length, decide char into tib or execute or control
1099   21 00 21               LD   hl,TIB   
109C   22 E6 23               LD   (vTIBPtr),hl   ; no chars in TIB so set end pointer to beginning
109F                INTERPRET2:      ; calculate nesting
109F   1E 00                  LD   e,0   ; initilize nesting value
10A1   C5                     PUSH   bc   ; save offset into TIB,
10A2                             ; bc is also the count of chars in TIB
10A2   21 00 21               LD   hl,TIB   ; hl is start of TIB
10A5   18 06                  JR   interpret4   
10A7                INTERPRET3:      
10A7   7E                     LD   a,(hl)   ; a = char in TIB
10A8   23                     INC   hl   ; inc pointer into TIB
10A9   0B                     DEC   bc   ; dec count of chars in TIB
10AA   CD E6 0F               CALL   nesting   ; update nesting value
10AD                INTERPRET4:      
10AD   79                     LD   a,c   ; is count zero?
10AE   B0                     OR   b   
10AF   20 F6                  JR   nz,interpret3   ; if not loop
10B1   C1                     POP   bc   ; restore offset into TIB
10B2                INTERPRET5:      
10B2   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
10B5   FE 20                  CP   $20   ; compare to space
10B7   30 14                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
10B9   FE 00                  CP   NUL   ; is it end of string? NUL end of string
10BB   28 31                  JR   z,interpret8   
10BD   FE 0D                  CP   "\r"   ; carriage return? ascii 13
10BF   28 1A                  JR   z,interpret7   ; if anything else its macro/control
10C1   FE 08                  CP   CTRL_H   
10C3   CA 3F 11               JP   z,backSpace_   
10C6   FE 0A                  CP   CTRL_J   
10C8   CA 4F 11               JP   z,reEdit_   
10CB                INTERPRET5A:      
10CB   18 D2                  JR   interpret2   
10CD                INTERPRET6:      
10CD   21 00 21               LD   hl,TIB   
10D0   09                     ADD   hl,bc   
10D1   77                     LD   (hl),a   ; store the character in textbuf
10D2   03                     INC   bc   
10D3   CD 85 00               CALL   putchar   ; echo character to screen
10D6   CD E6 0F               CALL   nesting   
10D9   18 D7                  JR   interpret5   ; wait for next character
10DB                INTERPRET7:      
10DB   21 00 21               LD   hl,TIB   
10DE   09                     ADD   hl,bc   
10DF   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
10E1   23                     INC   hl   
10E2   36 0A                  LD   (hl),"\n"   
10E4   23                     INC   hl   
10E5   03                     INC   bc   
10E6   03                     INC   bc   
10E7   CD 25 10               CALL   crlf   ; echo character to screen
10EA   7B                     LD   a,e   ; if zero nesting append and ETX after \r
10EB   B7                     OR   a   
10EC   20 C4                  JR   nz,interpret5   
10EE                INTERPRET8:      
10EE   21 00 21               LD   hl,TIB   
10F1   09                     ADD   hl,bc   
10F2   22 E6 23               LD   (vTIBPtr),hl   
10F5   01 00 21               LD   bc,TIB   
10F8   ED 43 FC 23            LD   (vSavedIP),bc   ; save IP
10FC   ED 73 FE 23            LD   (vSavedSP),sp   ; save SP
1100   DD 22 00 24            LD   (vSavedNext),ix   ; save Next
1104   FD 22 02 24            LD   (vSavedBP),iy   ; save BP
1108   0B                     DEC   bc   
1109                NEXT:        
1109   03                     INC   bc   ; Increment the IP
110A   0A                     LD   a,(bc)   ; Get the next character and dispatch
110B   FE 20                  CP   " "   ; whitespace?
110D   28 FA                  JR   z,next   ; space? ignore
110F   38 0D                  JR   c,next1   
1111   C6 5F                  ADD   a,$80 - "!"   ; subtract "!", add $80 (opcodes lsb starts at $80)
1113   6F                     LD   l,a   ; index into table
1114   26 01                  LD   h,msb(opcodes)   ; start address of jump table
1116   6E                     LD   l,(hl)   ; get low jump address
1117   24                     INC   h   ; page 2
1118   FE BA                  CP   "Z" - "!" + 1 + $80   
111A   38 01                  JR   c,next0   
111C   24                     INC   h   ; page 3
111D                NEXT0:       
111D   E9                     JP   (hl)   ; Jump to routine
111E                NEXT1:       
111E   FE 00                  CP   NUL   ; end of input string?
1120   28 03                  JR   z,exit   
1122   C3 93 10               JP   interpret   ; no, other whitespace, macros?
1125                EXIT:        
1125   03                     INC   bc   
1126   60 69                  LD   hl,bc   
1128   E9                     JP   (hl)   
1129                RUN:         
1129   C1                     POP   bc   
112A   0B                     DEC   bc   
112B   DD E9                  JP   (ix)   
112D                ERROR:       
112D   E5                     PUSH   hl   
112E   CD 29 11               CALL   run   
1131   60 45 72 72 6F 72 20 60 20 2E 00 DB   "`Error ` .",0   
113C   C3 93 10               JP   interpret   
113F                BACKSPACE_:      
113F   79                     LD   a,c   
1140   B0                     OR   b   
1141   CA 9F 10               JP   z,interpret2   
1144   0B                     DEC   bc   
1145   CD 2C 10               CALL   printStr   
1148   08 20 08 00            .CSTR   "\b \b"   
114C   C3 9F 10               JP   interpret2   
114F                REEDIT_:      
114F   CD 2C 10               CALL   printStr   
1152   0D 3E 20 00            .CSTR   "\r> "   
1156   21 00 21               LD   hl,TIB   
1159   18 04                  JR   reEdit1   
115B                REEDIT0:      
115B   CD 85 00               CALL   putchar   
115E   23                     INC   hl   
115F                REEDIT1:      
115F   7E                     LD   a,(hl)   
1160   FE 0D                  CP   "\r"   
1162   20 F7                  JR   nz,reEdit0   
1164   11 00 21               LD   de,TIB   
1167   B7                     OR   a   
1168   ED 52                  SBC   hl,de   
116A   44 4D                  LD   bc,hl   
116C   C3 9F 10               JP   interpret2   
116F                F1:          
116F                F2:          
116F                F3:          
116F                F4:          
116F                             ; 
2000                          .ORG   RAMSTART   
2000                STKSIZE:   EQU   $100   ; Stack size
2000                TIBSIZE:   EQU   $100   ; 256 bytes
2000                BUFSIZE:   EQU   $100   ; 256 bytes, wraps
2000                          ALIGN   $100   
2000                          DS   STKSIZE   
2100                STACK:       
2100                          ALIGN   $100   
2100                TIB:      DS   TIBSIZE   ; must be one page, lsb of vTIBPtr is length and wraps around
2200                          ALIGN   $100   
2200                BUFFER:   DS   BUFSIZE   ; must be one page, lsb of vBufPtr is length and wraps around
2300                          ALIGN   $100   
2300                VARS:        
2300                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
23D0                RESTARTS:      
23D0                RST08:    DS   2   
23D2                RST10:    DS   2   
23D4                RST18:    DS   2   
23D6                RST20:    DS   2   
23D8                RST28:    DS   2   
23DA                RST30:    DS   2   ; 
23DC                BAUD:     DS   2   ; 
23DE                INTVEC:   DS   2   ; 
23E0                NMIVEC:   DS   2   ; 
23E2                GETCVEC:   DS   2   ; 
23E4                PUTCVEC:   DS   2   ; 
23E6                SYSVARS:      
23E6                             ; initialised sys variables (preserved)
23E6                VTIBPTR:   DS   2   
23E8                VBUFPTR:   DS   2   
23EA                VHEAPPTR:   DS   2   
23EC                VRECURPTR:   DS   2   
23EE                VDATAWIDTH:   DS   1   
23EF                VNUMBASE:   DS   1   
23F0                VHEXPREFIX:   DS   1   
23F1                VECHO:    DS   1   
23F2                VSTRMODE:   DS   1   
23F3                          DS   1   
23F4                          DS   1   
23F5                          DS   1   
23F6                          DS   1   
23F7                          DS   1   
23F8                             ; uninitialised sys variables (preserved)
23F8                VPOINTER:   DS   2   ; 
23FA                VREMAIN:   DS   2   ; 
23FC                VSAVEDIP:   DS   2   ; 
23FE                VSAVEDSP:   DS   2   ; 
2400                VSAVEDNEXT:   DS   2   ; 
2402                VSAVEDBP:   DS   2   ; 
2404                             ; uninitialised sys variables (unpreserved)
2404                VTEMP1:   DS   2   ; 
2406                VTEMP2:   DS   2   ; 
2408                VTEMP3:   DS   2   ; 
240A                          DS   2   ; 
240C                TBPTR:    DS   2   ; reserved for tests
240E                TITLEBUF:   DS   20   
2422                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 48 IN MAIN.asm
RAMSTART:           2000 DEFINED AT LINE 24 IN constants.asm
                    > USED AT LINE 15
ROMSIZE:            2000 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            2000 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               0001 DEFINED AT LINE 77 IN IOSerial.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 27 IN MAIN.asm
                    > USED AT LINE 174 IN MAIN.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1492 IN MAIN.asm
                    > USED AT LINE 1502 IN MAIN.asm
                    > USED AT LINE 2576 IN MAIN.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 1510 IN MAIN.asm
                    > USED AT LINE 2415 IN MAIN.asm
                    > USED AT LINE 2598 IN MAIN.asm
                    > USED AT LINE 2682 IN MAIN.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
TRUE:               00-1 DEFINED AT LINE 16 IN MAIN.asm
                    > USED AT LINE 161 IN MAIN.asm
                    > USED AT LINE 1218 IN MAIN.asm
                    > USED AT LINE 1285 IN MAIN.asm
                    > USED AT LINE 1919 IN MAIN.asm
FALSE:              0000 DEFINED AT LINE 17 IN MAIN.asm
                    > USED AT LINE 162 IN MAIN.asm
                    > USED AT LINE 1223 IN MAIN.asm
                    > USED AT LINE 1282 IN MAIN.asm
                    > USED AT LINE 1924 IN MAIN.asm
NUL:                0000 DEFINED AT LINE 18 IN MAIN.asm
                    > USED AT LINE 157 IN MAIN.asm
                    > USED AT LINE 611 IN MAIN.asm
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 34
                    > USED AT LINE 1484 IN MAIN.asm
                    > USED AT LINE 1486 IN MAIN.asm
                    > USED AT LINE 1488 IN MAIN.asm
                    > USED AT LINE 2579 IN MAIN.asm
                    > USED AT LINE 2647 IN MAIN.asm
DQ:                 0022 DEFINED AT LINE 19 IN MAIN.asm
                    > USED AT LINE 2104 IN MAIN.asm
                    > USED AT LINE 2436 IN MAIN.asm
CTRL_C:             0003 DEFINED AT LINE 20 IN MAIN.asm
CTRL_E:             0005 DEFINED AT LINE 21 IN MAIN.asm
CTRL_H:             0008 DEFINED AT LINE 22 IN MAIN.asm
                    > USED AT LINE 2584 IN MAIN.asm
CTRL_J:             000A DEFINED AT LINE 23 IN MAIN.asm
                    > USED AT LINE 2586 IN MAIN.asm
CTRL_L:             000C DEFINED AT LINE 24 IN MAIN.asm
CTRL_P:             0010 DEFINED AT LINE 25 IN MAIN.asm
CTRL_S:             0013 DEFINED AT LINE 26 IN MAIN.asm
OPCODES:            0180 DEFINED AT LINE 52 IN MAIN.asm
ISYSVARS:           01DE DEFINED AT LINE 153 IN MAIN.asm
                    > USED AT LINE 2517 IN MAIN.asm
TITLESTR:           01F0 DEFINED AT LINE 173 IN MAIN.asm
                    > USED AT LINE 2492 IN MAIN.asm
                    > USED AT LINE 2511 IN MAIN.asm
COLON_:             0204 DEFINED AT LINE 178 IN MAIN.asm
COMMA_:             0206 DEFINED AT LINE 181 IN MAIN.asm
DOLLAR_:            0209 DEFINED AT LINE 184 IN MAIN.asm
DQUOTE_:            020C DEFINED AT LINE 187 IN MAIN.asm
QUOTE_:             020C DEFINED AT LINE 188 IN MAIN.asm
DOT_:               020F DEFINED AT LINE 191 IN MAIN.asm
PERCENT_:           0212 DEFINED AT LINE 194 IN MAIN.asm
QUESTION_:          0215 DEFINED AT LINE 197 IN MAIN.asm
LPAREN_:            0218 DEFINED AT LINE 200 IN MAIN.asm
SLASH_:             021B DEFINED AT LINE 203 IN MAIN.asm
NUM_:               021E DEFINED AT LINE 206 IN MAIN.asm
BANG_:              0221 DEFINED AT LINE 209 IN MAIN.asm
BANG:               0221 DEFINED AT LINE 210 IN MAIN.asm
NOT:                022C DEFINED AT LINE 218 IN MAIN.asm
                    > USED AT LINE 214 IN MAIN.asm
EQ_:                0232 DEFINED AT LINE 222 IN MAIN.asm
EQ:                 0232 DEFINED AT LINE 223 IN MAIN.asm
EQ0:                023C DEFINED AT LINE 230 IN MAIN.asm
                    > USED AT LINE 227 IN MAIN.asm
EQ1:                023D DEFINED AT LINE 232 IN MAIN.asm
                    > USED AT LINE 221 IN MAIN.asm
GT_:                0241 DEFINED AT LINE 236 IN MAIN.asm
GT:                 0241 DEFINED AT LINE 237 IN MAIN.asm
LT_:                024C DEFINED AT LINE 245 IN MAIN.asm
LT:                 024C DEFINED AT LINE 246 IN MAIN.asm
LT1:                0255 DEFINED AT LINE 253 IN MAIN.asm
                    > USED AT LINE 244 IN MAIN.asm
HASH_:              025E DEFINED AT LINE 261 IN MAIN.asm
SEMICOLON_:         025E DEFINED AT LINE 262 IN MAIN.asm
SEMICOLON:          025E DEFINED AT LINE 263 IN MAIN.asm
ARRAYINDEX:         025E DEFINED AT LINE 264 IN MAIN.asm
ARRAYINDEX0:        0266 DEFINED AT LINE 270 IN MAIN.asm
ARRAYINDEX1:        0267 DEFINED AT LINE 272 IN MAIN.asm
                    > USED AT LINE 269 IN MAIN.asm
RPAREN_:            026B DEFINED AT LINE 277 IN MAIN.asm
RPAREN:             026B DEFINED AT LINE 279 IN MAIN.asm
AMPER_:             0273 DEFINED AT LINE 287 IN MAIN.asm
AMPER:              0273 DEFINED AT LINE 288 IN MAIN.asm
AND:                0273 DEFINED AT LINE 289 IN MAIN.asm
MINUS_:             027D DEFINED AT LINE 307 IN MAIN.asm
MINUS:              027D DEFINED AT LINE 308 IN MAIN.asm
SUB:                0289 DEFINED AT LINE 316 IN MAIN.asm
                    > USED AT LINE 313 IN MAIN.asm
SUB1:               0293 DEFINED AT LINE 323 IN MAIN.asm
                    > USED AT LINE 320 IN MAIN.asm
SUB2:               029A DEFINED AT LINE 329 IN MAIN.asm
                    > USED AT LINE 326 IN MAIN.asm
SUB3:               029D DEFINED AT LINE 332 IN MAIN.asm
                    > USED AT LINE 1019 IN MAIN.asm
                    > USED AT LINE 1979 IN MAIN.asm
                    > USED AT LINE 2004 IN MAIN.asm
STAR_:              02A5 DEFINED AT LINE 338 IN MAIN.asm
STAR:               02A5 DEFINED AT LINE 339 IN MAIN.asm
MUL:                02AD DEFINED AT LINE 345 IN MAIN.asm
MUL2:               02AF DEFINED AT LINE 348 IN MAIN.asm
MUL3:               02B7 DEFINED AT LINE 353 IN MAIN.asm
                    > USED AT LINE 362 IN MAIN.asm
PLUS_:              02C9 DEFINED AT LINE 368 IN MAIN.asm
PLUS:               02C9 DEFINED AT LINE 369 IN MAIN.asm
ADD:                02C9 DEFINED AT LINE 370 IN MAIN.asm
ADD1:               02D4 DEFINED AT LINE 378 IN MAIN.asm
                    > USED AT LINE 374 IN MAIN.asm
ADD3:               02D8 DEFINED AT LINE 383 IN MAIN.asm
                    > USED AT LINE 298 IN MAIN.asm
                    > USED AT LINE 364 IN MAIN.asm
                    > USED AT LINE 571 IN MAIN.asm
                    > USED AT LINE 1326 IN MAIN.asm
                    > USED AT LINE 1560 IN MAIN.asm
ADD4:               02E2 DEFINED AT LINE 391 IN MAIN.asm
                    > USED AT LINE 387 IN MAIN.asm
UPCASE_:            02E5 DEFINED AT LINE 395 IN MAIN.asm
UPCASE:             02E5 DEFINED AT LINE 396 IN MAIN.asm
LOWCASE_:           0300 DEFINED AT LINE 405 IN MAIN.asm
LOWCASE:            0300 DEFINED AT LINE 406 IN MAIN.asm
IDENT1:             0305 DEFINED AT LINE 410 IN MAIN.asm
                    > USED AT LINE 399 IN MAIN.asm
LBRACK_:            0312 DEFINED AT LINE 422 IN MAIN.asm
LBRACK:             0312 DEFINED AT LINE 423 IN MAIN.asm
ARRAYSTART:         0312 DEFINED AT LINE 424 IN MAIN.asm
BACKSLASH_:         032E DEFINED AT LINE 439 IN MAIN.asm
BACKSLASH:          032E DEFINED AT LINE 440 IN MAIN.asm
LAMBDA:             032E DEFINED AT LINE 441 IN MAIN.asm
LAMBDA1:            0333 DEFINED AT LINE 444 IN MAIN.asm
                    > USED AT LINE 448 IN MAIN.asm
LAMBDA2:            0343 DEFINED AT LINE 453 IN MAIN.asm
                    > USED AT LINE 450 IN MAIN.asm
RBRACK_:            034F DEFINED AT LINE 461 IN MAIN.asm
RBRACK:             034F DEFINED AT LINE 462 IN MAIN.asm
ARRAYEND:           034F DEFINED AT LINE 463 IN MAIN.asm
ARRAYEND1:          036B DEFINED AT LINE 480 IN MAIN.asm
                    > USED AT LINE 497 IN MAIN.asm
ARRAYEND2:          037B DEFINED AT LINE 490 IN MAIN.asm
                    > USED AT LINE 486 IN MAIN.asm
ARRAYEND3:          0380 DEFINED AT LINE 494 IN MAIN.asm
                    > USED AT LINE 479 IN MAIN.asm
CARET_:             039F DEFINED AT LINE 515 IN MAIN.asm
CARET:              039F DEFINED AT LINE 519 IN MAIN.asm
GO:                 039F DEFINED AT LINE 520 IN MAIN.asm
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
                    > USED AT LINE 33
GO1:                03A0 DEFINED AT LINE 522 IN MAIN.asm
                    > USED AT LINE 1203 IN MAIN.asm
                    > USED AT LINE 1595 IN MAIN.asm
                    > USED AT LINE 1597 IN MAIN.asm
                    > USED AT LINE 1767 IN MAIN.asm
GO2:                03A6 DEFINED AT LINE 527 IN MAIN.asm
                    > USED AT LINE 525 IN MAIN.asm
GRAVE_:             03B5 DEFINED AT LINE 536 IN MAIN.asm
GRAVE:              03B5 DEFINED AT LINE 537 IN MAIN.asm
PRINTLITERAL:       03B5 DEFINED AT LINE 538 IN MAIN.asm
PRINTLITERAL0:      03BC DEFINED AT LINE 542 IN MAIN.asm
                    > USED AT LINE 549 IN MAIN.asm
PRINTLITERAL1:      03BF DEFINED AT LINE 546 IN MAIN.asm
                    > USED AT LINE 541 IN MAIN.asm
LBRACE_:            03CB DEFINED AT LINE 553 IN MAIN.asm
LBRACE:             03CB DEFINED AT LINE 554 IN MAIN.asm
                    > USED AT LINE 201 IN MAIN.asm
PIPE_:              03D0 DEFINED AT LINE 560 IN MAIN.asm
PIPE:               03D0 DEFINED AT LINE 561 IN MAIN.asm
OR:                 03D0 DEFINED AT LINE 562 IN MAIN.asm
RBRACE_:            03DB DEFINED AT LINE 573 IN MAIN.asm
TILDE_:             03DE DEFINED AT LINE 577 IN MAIN.asm
UNDERSCORE_:        03E1 DEFINED AT LINE 580 IN MAIN.asm
CHAR:               03E1 DEFINED AT LINE 581 IN MAIN.asm
AT_:                03E9 DEFINED AT LINE 589 IN MAIN.asm
AT:                 03E9 DEFINED AT LINE 590 IN MAIN.asm
ADDR:               03E9 DEFINED AT LINE 591 IN MAIN.asm
DOT:                0400 DEFINED AT LINE 602 IN MAIN.asm
                    > USED AT LINE 192 IN MAIN.asm
PRINT:              0400 DEFINED AT LINE 603 IN MAIN.asm
PRINTCHAR:          040F DEFINED AT LINE 616 IN MAIN.asm
                    > USED AT LINE 608 IN MAIN.asm
PRINTSTRING:        041E DEFINED AT LINE 627 IN MAIN.asm
                    > USED AT LINE 610 IN MAIN.asm
PRINTSTRING0:       0425 DEFINED AT LINE 631 IN MAIN.asm
                    > USED AT LINE 638 IN MAIN.asm
PRINTSTRING1:       0428 DEFINED AT LINE 635 IN MAIN.asm
                    > USED AT LINE 630 IN MAIN.asm
PRINTNUMBER:        0433 DEFINED AT LINE 644 IN MAIN.asm
                    > USED AT LINE 612 IN MAIN.asm
PRINTDEC:           043E DEFINED AT LINE 652 IN MAIN.asm
                    > USED AT LINE 648 IN MAIN.asm
PRINTDEC1:          044C DEFINED AT LINE 660 IN MAIN.asm
                    > USED AT LINE 658 IN MAIN.asm
PRINTDEC2:          045B DEFINED AT LINE 672 IN MAIN.asm
                    > USED AT LINE 661 IN MAIN.asm
PRINTDEC3:          046B DEFINED AT LINE 686 IN MAIN.asm
                    > USED AT LINE 674 IN MAIN.asm
PRINTDEC4:          048B DEFINED AT LINE 700 IN MAIN.asm
                    > USED AT LINE 689 IN MAIN.asm
                    > USED AT LINE 691 IN MAIN.asm
                    > USED AT LINE 693 IN MAIN.asm
                    > USED AT LINE 695 IN MAIN.asm
                    > USED AT LINE 698 IN MAIN.asm
PRINTDEC5:          048D DEFINED AT LINE 702 IN MAIN.asm
                    > USED AT LINE 705 IN MAIN.asm
PRINTDEC6:          049D DEFINED AT LINE 714 IN MAIN.asm
                    > USED AT LINE 709 IN MAIN.asm
PRINTDEC7:          049E DEFINED AT LINE 716 IN MAIN.asm
                    > USED AT LINE 713 IN MAIN.asm
PRINTHEX:           04A4 DEFINED AT LINE 727 IN MAIN.asm
                    > USED AT LINE 647 IN MAIN.asm
PRINTHEX1:          04B0 DEFINED AT LINE 734 IN MAIN.asm
                    > USED AT LINE 731 IN MAIN.asm
PRINTHEX2:          04BB DEFINED AT LINE 741 IN MAIN.asm
                    > USED AT LINE 738 IN MAIN.asm
PRINTHEX3:          04CA DEFINED AT LINE 750 IN MAIN.asm
                    > USED AT LINE 740 IN MAIN.asm
                    > USED AT LINE 743 IN MAIN.asm
PRINTHEX4:          04D3 DEFINED AT LINE 758 IN MAIN.asm
                    > USED AT LINE 756 IN MAIN.asm
SLASH:              0500 DEFINED AT LINE 773 IN MAIN.asm
                    > USED AT LINE 204 IN MAIN.asm
COMMAND:            0500 DEFINED AT LINE 774 IN MAIN.asm
COMMAND_A_:         0526 DEFINED AT LINE 810 IN MAIN.asm
COMMAND_B_:         0541 DEFINED AT LINE 825 IN MAIN.asm
COMMAND_D_:         0550 DEFINED AT LINE 834 IN MAIN.asm
COMMAND_F_:         055B DEFINED AT LINE 841 IN MAIN.asm
COMMAND_H_:         0582 DEFINED AT LINE 862 IN MAIN.asm
COMMAND_I_:         058D DEFINED AT LINE 870 IN MAIN.asm
COMMAND_M_:         0598 DEFINED AT LINE 877 IN MAIN.asm
COMAND_O_:          05A3 DEFINED AT LINE 884 IN MAIN.asm
COMMAND_P_:         05AA DEFINED AT LINE 889 IN MAIN.asm
COMMAND_Q_:         05B1 DEFINED AT LINE 895 IN MAIN.asm
COMMAND_R_:         05BC DEFINED AT LINE 902 IN MAIN.asm
COMMAND_S_:         05CF DEFINED AT LINE 913 IN MAIN.asm
COMAND_T_:          05D1 DEFINED AT LINE 916 IN MAIN.asm
COMMAND_V_:         05D3 DEFINED AT LINE 919 IN MAIN.asm
COMMAND_W_:         05D5 DEFINED AT LINE 922 IN MAIN.asm
COMMAND_X_:         05D7 DEFINED AT LINE 925 IN MAIN.asm
COMMAND_DEFAULT_:   05D9 DEFINED AT LINE 928 IN MAIN.asm
COMMAND_S:          05DB DEFINED AT LINE 934 IN MAIN.asm
                    > USED AT LINE 914 IN MAIN.asm
COMMAND_T:          05FE DEFINED AT LINE 953 IN MAIN.asm
                    > USED AT LINE 917 IN MAIN.asm
COMMAND_V:          0605 DEFINED AT LINE 958 IN MAIN.asm
                    > USED AT LINE 920 IN MAIN.asm
COMMAND_W:          062C DEFINED AT LINE 979 IN MAIN.asm
                    > USED AT LINE 923 IN MAIN.asm
COMMAND_X:          063B DEFINED AT LINE 988 IN MAIN.asm
                    > USED AT LINE 926 IN MAIN.asm
COMMAND_DEFAULT:    0646 DEFINED AT LINE 995 IN MAIN.asm
                    > USED AT LINE 929 IN MAIN.asm
DIV:                064D DEFINED AT LINE 1001 IN MAIN.asm
                    > USED AT LINE 998 IN MAIN.asm
DIV2:               0657 DEFINED AT LINE 1010 IN MAIN.asm
                    > USED AT LINE 1007 IN MAIN.asm
ABSOLUTE:           0668 DEFINED AT LINE 1023 IN MAIN.asm
                    > USED AT LINE 813 IN MAIN.asm
ABSOLUTE1:          0673 DEFINED AT LINE 1033 IN MAIN.asm
                    > USED AT LINE 1026 IN MAIN.asm
ADDROF:             0676 DEFINED AT LINE 1039 IN MAIN.asm
                    > USED AT LINE 815 IN MAIN.asm
ADDROF2:            067C DEFINED AT LINE 1044 IN MAIN.asm
ARRAYLENGTH:        067E DEFINED AT LINE 1049 IN MAIN.asm
                    > USED AT LINE 819 IN MAIN.asm
                    > USED AT LINE 44
ARRAYLENGTH1:       0684 DEFINED AT LINE 1056 IN MAIN.asm
                    > USED AT LINE 1067 IN MAIN.asm
                    > USED AT LINE 1070 IN MAIN.asm
ARRAYSIZE:          0687 DEFINED AT LINE 1062 IN MAIN.asm
                    > USED AT LINE 821 IN MAIN.asm
PERFORMM_1507S1063: 068E DEFINED AT LINE 45
                    > USED AT LINE 43
WHILE:              069B DEFINED AT LINE 1075 IN MAIN.asm
                    > USED AT LINE 982 IN MAIN.asm
WHILE1:             06A2 DEFINED AT LINE 1081 IN MAIN.asm
                    > USED AT LINE 1079 IN MAIN.asm
BYTEMODE:           06B5 DEFINED AT LINE 1093 IN MAIN.asm
                    > USED AT LINE 830 IN MAIN.asm
BYTEMODE1:          06B7 DEFINED AT LINE 1095 IN MAIN.asm
                    > USED AT LINE 1313 IN MAIN.asm
COMMENT:            06BC DEFINED AT LINE 1100 IN MAIN.asm
                    > USED AT LINE 778 IN MAIN.asm
                    > USED AT LINE 1104 IN MAIN.asm
CONSTHEAPSTART:     06C5 DEFINED AT LINE 1108 IN MAIN.asm
                    > USED AT LINE 973 IN MAIN.asm
CONSTTIBSTART:      06CB DEFINED AT LINE 1112 IN MAIN.asm
                    > USED AT LINE 975 IN MAIN.asm
CONSTBUFSTART:      06D1 DEFINED AT LINE 1116 IN MAIN.asm
                    > USED AT LINE 971 IN MAIN.asm
DECBASE:            06D7 DEFINED AT LINE 1120 IN MAIN.asm
                    > USED AT LINE 837 IN MAIN.asm
DECBASE1:           06D9 DEFINED AT LINE 1122 IN MAIN.asm
                    > USED AT LINE 1128 IN MAIN.asm
HEXBASE:            06DE DEFINED AT LINE 1126 IN MAIN.asm
                    > USED AT LINE 865 IN MAIN.asm
ERROR1:             06E3 DEFINED AT LINE 1130 IN MAIN.asm
                    > USED AT LINE 823 IN MAIN.asm
                    > USED AT LINE 832 IN MAIN.asm
                    > USED AT LINE 839 IN MAIN.asm
                    > USED AT LINE 867 IN MAIN.asm
                    > USED AT LINE 875 IN MAIN.asm
                    > USED AT LINE 882 IN MAIN.asm
                    > USED AT LINE 892 IN MAIN.asm
                    > USED AT LINE 900 IN MAIN.asm
                    > USED AT LINE 911 IN MAIN.asm
                    > USED AT LINE 951 IN MAIN.asm
                    > USED AT LINE 977 IN MAIN.asm
                    > USED AT LINE 986 IN MAIN.asm
                    > USED AT LINE 993 IN MAIN.asm
INPUT:              06E9 DEFINED AT LINE 1136 IN MAIN.asm
                    > USED AT LINE 873 IN MAIN.asm
OUTPUT:             06F4 DEFINED AT LINE 1148 IN MAIN.asm
                    > USED AT LINE 887 IN MAIN.asm
QUIT:               06FD DEFINED AT LINE 1159 IN MAIN.asm
                    > USED AT LINE 898 IN MAIN.asm
QUIT1:              0704 DEFINED AT LINE 1165 IN MAIN.asm
                    > USED AT LINE 1163 IN MAIN.asm
RECUR:              0707 DEFINED AT LINE 1168 IN MAIN.asm
                    > USED AT LINE 905 IN MAIN.asm
REMAIN:             070D DEFINED AT LINE 1173 IN MAIN.asm
                    > USED AT LINE 907 IN MAIN.asm
SELECT:             0713 DEFINED AT LINE 1179 IN MAIN.asm
                    > USED AT LINE 941 IN MAIN.asm
SELECT1:            071E DEFINED AT LINE 1190 IN MAIN.asm
                    > USED AT LINE 1213 IN MAIN.asm
SELECT1A:           072F DEFINED AT LINE 1204 IN MAIN.asm
                    > USED AT LINE 1194 IN MAIN.asm
SELECT1B:           0730 DEFINED AT LINE 1206 IN MAIN.asm
                    > USED AT LINE 1198 IN MAIN.asm
SELECT2:            0733 DEFINED AT LINE 1210 IN MAIN.asm
                    > USED AT LINE 1189 IN MAIN.asm
STRINGBEGIN:        073A DEFINED AT LINE 1217 IN MAIN.asm
                    > USED AT LINE 937 IN MAIN.asm
STRINGEND:          0742 DEFINED AT LINE 1222 IN MAIN.asm
                    > USED AT LINE 943 IN MAIN.asm
STRINGEND1:         0769 DEFINED AT LINE 1240 IN MAIN.asm
                    > USED AT LINE 1220 IN MAIN.asm
STRINGLENGTH:       0771 DEFINED AT LINE 1245 IN MAIN.asm
                    > USED AT LINE 947 IN MAIN.asm
                    > USED AT LINE 44
STRINGLENGTH1:      0777 DEFINED AT LINE 1249 IN MAIN.asm
                    > USED AT LINE 1255 IN MAIN.asm
STRINGLENGTH2:      0779 DEFINED AT LINE 1252 IN MAIN.asm
                    > USED AT LINE 1248 IN MAIN.asm
STRINGLENGTH3:      077D DEFINED AT LINE 1256 IN MAIN.asm
                    > USED AT LINE 1264 IN MAIN.asm
STRINGSIZE:         0780 DEFINED AT LINE 1260 IN MAIN.asm
                    > USED AT LINE 949 IN MAIN.asm
PERFORMM_1686S1261: 0787 DEFINED AT LINE 45
                    > USED AT LINE 43
STRINGCOMPARE:      078C DEFINED AT LINE 1269 IN MAIN.asm
                    > USED AT LINE 939 IN MAIN.asm
STRINGCOMPARE1:     078E DEFINED AT LINE 1272 IN MAIN.asm
                    > USED AT LINE 1280 IN MAIN.asm
STRINGCOMPARE2:     0799 DEFINED AT LINE 1281 IN MAIN.asm
                    > USED AT LINE 1275 IN MAIN.asm
STRINGCOMPARE3:     079E DEFINED AT LINE 1284 IN MAIN.asm
                    > USED AT LINE 1277 IN MAIN.asm
STRINGCOMPARE4:     07A1 DEFINED AT LINE 1286 IN MAIN.asm
                    > USED AT LINE 1283 IN MAIN.asm
VARBUFPTR:          07A4 DEFINED AT LINE 1290 IN MAIN.asm
                    > USED AT LINE 961 IN MAIN.asm
VARECHO:            07AA DEFINED AT LINE 1294 IN MAIN.asm
                    > USED AT LINE 963 IN MAIN.asm
VARHEAPPTR:         07B0 DEFINED AT LINE 1298 IN MAIN.asm
                    > USED AT LINE 965 IN MAIN.asm
VARTIBPTR:          07B6 DEFINED AT LINE 1302 IN MAIN.asm
                    > USED AT LINE 967 IN MAIN.asm
VARHEXPREFIX:       07BC DEFINED AT LINE 1306 IN MAIN.asm
                    > USED AT LINE 969 IN MAIN.asm
WORDMODE:           07C2 DEFINED AT LINE 1311 IN MAIN.asm
                    > USED AT LINE 984 IN MAIN.asm
XOR:                07C7 DEFINED AT LINE 1316 IN MAIN.asm
                    > USED AT LINE 991 IN MAIN.asm
XOR1:               07C8 DEFINED AT LINE 1318 IN MAIN.asm
RANGESRC:           07D2 DEFINED AT LINE 32
                    > USED AT LINE 909 IN MAIN.asm
RANGESRCM_1749S1334: 07E1 DEFINED AT LINE 39
                    > USED AT LINE 35
ARRAYITER:          0864 DEFINED AT LINE 32
                    > USED AT LINE 817 IN MAIN.asm
ARRAYITERM_1768S1354: 0871 DEFINED AT LINE 39
                    > USED AT LINE 35
STRINGITER:         08E4 DEFINED AT LINE 32
                    > USED AT LINE 945 IN MAIN.asm
STRINGITERM_1787S1374: 08F1 DEFINED AT LINE 39
                    > USED AT LINE 35
MAP:                096C DEFINED AT LINE 32
                    > USED AT LINE 880 IN MAIN.asm
MAPM_1807S1396:     0979 DEFINED AT LINE 39
                    > USED AT LINE 35
FILTER:             09AD DEFINED AT LINE 32
                    > USED AT LINE 850 IN MAIN.asm
FILTERM_1821S1411:  09BB DEFINED AT LINE 39
                    > USED AT LINE 35
FOLD:               0A0A DEFINED AT LINE 32
                    > USED AT LINE 844 IN MAIN.asm
FOLDM_1840S1431:    0A19 DEFINED AT LINE 39
                    > USED AT LINE 35
FOREACH:            0A5B DEFINED AT LINE 32
                    > USED AT LINE 846 IN MAIN.asm
FOREACHM_1854S1446: 0A69 DEFINED AT LINE 39
                    > USED AT LINE 35
FUNCSRC:            0AA6 DEFINED AT LINE 32
                    > USED AT LINE 848 IN MAIN.asm
FUNCSRCM_1868S1461: 0AB2 DEFINED AT LINE 39
                    > USED AT LINE 35
PRINTARRAY:         0AE1 DEFINED AT LINE 32
                    > USED AT LINE 606 IN MAIN.asm
PRINTARRAYM_1878S1472: 0AEF DEFINED AT LINE 39
                    > USED AT LINE 35
COMMA:              0B2A DEFINED AT LINE 1482 IN MAIN.asm
                    > USED AT LINE 182 IN MAIN.asm
READCHAR:           0B39 DEFINED AT LINE 1491 IN MAIN.asm
                    > USED AT LINE 1485 IN MAIN.asm
READSTRING:         0B42 DEFINED AT LINE 1498 IN MAIN.asm
                    > USED AT LINE 1487 IN MAIN.asm
                    > USED AT LINE 44
READSTRING1:        0B47 DEFINED AT LINE 1501 IN MAIN.asm
                    > USED AT LINE 1509 IN MAIN.asm
                    > USED AT LINE 1511 IN MAIN.asm
READSTRING2:        0B5B DEFINED AT LINE 1512 IN MAIN.asm
                    > USED AT LINE 1504 IN MAIN.asm
READNUMBER:         0B64 DEFINED AT LINE 1519 IN MAIN.asm
                    > USED AT LINE 1489 IN MAIN.asm
PERFORMM_1922S1521: 0B6D DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER1:        0B8B DEFINED AT LINE 1537 IN MAIN.asm
                    > USED AT LINE 1528 IN MAIN.asm
                    > USED AT LINE 1532 IN MAIN.asm
                    > USED AT LINE 1534 IN MAIN.asm
PERFORMM_1939S1538: 0B92 DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER2:        0B95 DEFINED AT LINE 1541 IN MAIN.asm
                    > USED AT LINE 1530 IN MAIN.asm
PERFORMM_1943S1542: 0B9C DEFINED AT LINE 45
                    > USED AT LINE 43
READNUMBER3:        0B9D DEFINED AT LINE 1544 IN MAIN.asm
                    > USED AT LINE 1536 IN MAIN.asm
                    > USED AT LINE 1540 IN MAIN.asm
TILDE:              0BA3 DEFINED AT LINE 1551 IN MAIN.asm
                    > USED AT LINE 578 IN MAIN.asm
INVERT:             0BA3 DEFINED AT LINE 1552 IN MAIN.asm
DOLLAR:             0BAD DEFINED AT LINE 1563 IN MAIN.asm
                    > USED AT LINE 185 IN MAIN.asm
HEXNUM:             0BAD DEFINED AT LINE 1564 IN MAIN.asm
                    > USED AT LINE 44
HEXNUM1:            0BB0 DEFINED AT LINE 1566 IN MAIN.asm
                    > USED AT LINE 1583 IN MAIN.asm
HEXNUM2:            0BB8 DEFINED AT LINE 1572 IN MAIN.asm
                    > USED AT LINE 1570 IN MAIN.asm
QUESTION:           0BCA DEFINED AT LINE 1587 IN MAIN.asm
                    > USED AT LINE 198 IN MAIN.asm
IF:                 0BCA DEFINED AT LINE 1588 IN MAIN.asm
QUOTE:              0BD7 DEFINED AT LINE 1601 IN MAIN.asm
                    > USED AT LINE 189 IN MAIN.asm
STRING:             0BD7 DEFINED AT LINE 1602 IN MAIN.asm
STRING1:            0BE0 DEFINED AT LINE 1609 IN MAIN.asm
                    > USED AT LINE 1617 IN MAIN.asm
STRING2:            0BE3 DEFINED AT LINE 1613 IN MAIN.asm
                    > USED AT LINE 1608 IN MAIN.asm
STRING3:            0BE9 DEFINED AT LINE 1618 IN MAIN.asm
                    > USED AT LINE 1616 IN MAIN.asm
PERCENT:            0BF1 DEFINED AT LINE 1628 IN MAIN.asm
                    > USED AT LINE 195 IN MAIN.asm
ARG:                0BF1 DEFINED AT LINE 1629 IN MAIN.asm
ARG0:               0C0D DEFINED AT LINE 1648 IN MAIN.asm
                    > USED AT LINE 1654 IN MAIN.asm
ARG0A:              0C16 DEFINED AT LINE 1656 IN MAIN.asm
                    > USED AT LINE 1635 IN MAIN.asm
                    > USED AT LINE 1640 IN MAIN.asm
ARG1:               0C1B DEFINED AT LINE 1659 IN MAIN.asm
                    > USED AT LINE 1652 IN MAIN.asm
ARG1A:              0C23 DEFINED AT LINE 1666 IN MAIN.asm
                    > USED AT LINE 1658 IN MAIN.asm
NUM:                0C26 DEFINED AT LINE 1671 IN MAIN.asm
                    > USED AT LINE 207 IN MAIN.asm
                    > USED AT LINE 315 IN MAIN.asm
                    > USED AT LINE 44
NUM0:               0C2F DEFINED AT LINE 1677 IN MAIN.asm
                    > USED AT LINE 1675 IN MAIN.asm
NUM1:               0C30 DEFINED AT LINE 1679 IN MAIN.asm
                    > USED AT LINE 1696 IN MAIN.asm
NUM2:               0C48 DEFINED AT LINE 1697 IN MAIN.asm
                    > USED AT LINE 1574 IN MAIN.asm
                    > USED AT LINE 1576 IN MAIN.asm
                    > USED AT LINE 1682 IN MAIN.asm
                    > USED AT LINE 1684 IN MAIN.asm
NUM3:               0C53 DEFINED AT LINE 1705 IN MAIN.asm
                    > USED AT LINE 1700 IN MAIN.asm
RBRACE:             0C56 DEFINED AT LINE 1710 IN MAIN.asm
                    > USED AT LINE 574 IN MAIN.asm
BLOCKEND:           0C56 DEFINED AT LINE 1711 IN MAIN.asm
                    > USED AT LINE 1090 IN MAIN.asm
                    > USED AT LINE 1166 IN MAIN.asm
BLOCKEND1:          0C88 DEFINED AT LINE 1733 IN MAIN.asm
                    > USED AT LINE 1726 IN MAIN.asm
BLOCKEND2:          0C94 DEFINED AT LINE 1740 IN MAIN.asm
                    > USED AT LINE 1732 IN MAIN.asm
BLOCKEND3:          0CA6 DEFINED AT LINE 1754 IN MAIN.asm
                    > USED AT LINE 1746 IN MAIN.asm
BLOCKEND4:          0CBA DEFINED AT LINE 1764 IN MAIN.asm
                    > USED AT LINE 1762 IN MAIN.asm
GOBLOCK:            0CC3 DEFINED AT LINE 1769 IN MAIN.asm
                    > USED AT LINE 530 IN MAIN.asm
                    > USED AT LINE 534 IN MAIN.asm
GOBLOCK2:           0CE8 DEFINED AT LINE 1786 IN MAIN.asm
                    > USED AT LINE 1867 IN MAIN.asm
GOBLOCK3:           0CF2 DEFINED AT LINE 1792 IN MAIN.asm
GOFUNC:             0CF6 DEFINED AT LINE 1796 IN MAIN.asm
                    > USED AT LINE 532 IN MAIN.asm
GOFUNC1:            0D0F DEFINED AT LINE 1815 IN MAIN.asm
                    > USED AT LINE 1825 IN MAIN.asm
GOFUNC2:            0D15 DEFINED AT LINE 1822 IN MAIN.asm
                    > USED AT LINE 1814 IN MAIN.asm
GOFUNC3:            0D20 DEFINED AT LINE 1828 IN MAIN.asm
                    > USED AT LINE 1804 IN MAIN.asm
GOFUNC4:            0D38 DEFINED AT LINE 1845 IN MAIN.asm
                    > USED AT LINE 1842 IN MAIN.asm
GOFUNC5:            0D3B DEFINED AT LINE 1848 IN MAIN.asm
                    > USED AT LINE 1854 IN MAIN.asm
GOFUNC6:            0D3E DEFINED AT LINE 1852 IN MAIN.asm
                    > USED AT LINE 1847 IN MAIN.asm
GOFUNC7:            0D41 DEFINED AT LINE 1855 IN MAIN.asm
GOFUNC8:            0D45 DEFINED AT LINE 1860 IN MAIN.asm
                    > USED AT LINE 1780 IN MAIN.asm
                    > USED AT LINE 1844 IN MAIN.asm
ASSIGN:             0D50 DEFINED AT LINE 1871 IN MAIN.asm
                    > USED AT LINE 229 IN MAIN.asm
ASSIGN0:            0D52 DEFINED AT LINE 1874 IN MAIN.asm
                    > USED AT LINE 322 IN MAIN.asm
                    > USED AT LINE 334 IN MAIN.asm
                    > USED AT LINE 377 IN MAIN.asm
                    > USED AT LINE 392 IN MAIN.asm
ASSIGN1:            0D56 DEFINED AT LINE 1877 IN MAIN.asm
ASSIGN2:            0D5F DEFINED AT LINE 1884 IN MAIN.asm
                    > USED AT LINE 1881 IN MAIN.asm
EQUALS:             0D61 DEFINED AT LINE 1889 IN MAIN.asm
                    > USED AT LINE 234 IN MAIN.asm
NOTEQUALS:          0D68 DEFINED AT LINE 1895 IN MAIN.asm
                    > USED AT LINE 217 IN MAIN.asm
LESSTHANEQ:         0D6F DEFINED AT LINE 1903 IN MAIN.asm
                    > USED AT LINE 255 IN MAIN.asm
LESSTHAN:           0D74 DEFINED AT LINE 1910 IN MAIN.asm
                    > USED AT LINE 257 IN MAIN.asm
LESSTHAN1:          0D79 DEFINED AT LINE 1915 IN MAIN.asm
                    > USED AT LINE 1906 IN MAIN.asm
TRUE1:              0D7C DEFINED AT LINE 1918 IN MAIN.asm
                    > USED AT LINE 956 IN MAIN.asm
                    > USED AT LINE 1892 IN MAIN.asm
                    > USED AT LINE 1898 IN MAIN.asm
NULL1:              0D82 DEFINED AT LINE 1922 IN MAIN.asm
FALSE1:             0D82 DEFINED AT LINE 1923 IN MAIN.asm
                    > USED AT LINE 860 IN MAIN.asm
                    > USED AT LINE 1893 IN MAIN.asm
                    > USED AT LINE 1899 IN MAIN.asm
                    > USED AT LINE 1913 IN MAIN.asm
                    > USED AT LINE 1916 IN MAIN.asm
SPREAD:             0D88 DEFINED AT LINE 1928 IN MAIN.asm
                    > USED AT LINE 343 IN MAIN.asm
SPREAD1:            0D95 DEFINED AT LINE 1938 IN MAIN.asm
                    > USED AT LINE 1953 IN MAIN.asm
SPREAD2:            0DA0 DEFINED AT LINE 1947 IN MAIN.asm
                    > USED AT LINE 1944 IN MAIN.asm
SPREAD3:            0DA2 DEFINED AT LINE 1950 IN MAIN.asm
                    > USED AT LINE 1937 IN MAIN.asm
SHIFTLEFT:          0DAC DEFINED AT LINE 1960 IN MAIN.asm
                    > USED AT LINE 250 IN MAIN.asm
SHIFTLEFT2:         0DB6 DEFINED AT LINE 1969 IN MAIN.asm
                    > USED AT LINE 1966 IN MAIN.asm
SHIFTLEFT3:         0DBE DEFINED AT LINE 1974 IN MAIN.asm
                    > USED AT LINE 1977 IN MAIN.asm
SHIFTLEFT4:         0DBF DEFINED AT LINE 1976 IN MAIN.asm
                    > USED AT LINE 1973 IN MAIN.asm
SHIFTRIGHT:         0DC8 DEFINED AT LINE 1984 IN MAIN.asm
                    > USED AT LINE 241 IN MAIN.asm
SHIFTRIGHT2:        0DD2 DEFINED AT LINE 1993 IN MAIN.asm
                    > USED AT LINE 1990 IN MAIN.asm
SHIFTRIGHT3:        0DDA DEFINED AT LINE 1998 IN MAIN.asm
                    > USED AT LINE 2002 IN MAIN.asm
SHIFTRIGHT4:        0DDE DEFINED AT LINE 2001 IN MAIN.asm
                    > USED AT LINE 1997 IN MAIN.asm
DIVIDE:             0DE7 DEFINED AT LINE 2010 IN MAIN.asm
                    > USED AT LINE 1014 IN MAIN.asm
DIVIDE1:            0DEC DEFINED AT LINE 2013 IN MAIN.asm
                    > USED AT LINE 2025 IN MAIN.asm
DIVIDE2:            0DF9 DEFINED AT LINE 2021 IN MAIN.asm
                    > USED AT LINE 2018 IN MAIN.asm
DIVIDE3:            0DFA DEFINED AT LINE 2023 IN MAIN.asm
                    > USED AT LINE 2020 IN MAIN.asm
DOTNEXT:            0E00 DEFINED AT LINE 2029 IN MAIN.asm
                    > USED AT LINE 551 IN MAIN.asm
                    > USED AT LINE 623 IN MAIN.asm
                    > USED AT LINE 640 IN MAIN.asm
                    > USED AT LINE 667 IN MAIN.asm
                    > USED AT LINE 748 IN MAIN.asm
DOTNEXT1:           0E08 DEFINED AT LINE 2034 IN MAIN.asm
                    > USED AT LINE 2032 IN MAIN.asm
PARSEARGS:          0E1A DEFINED AT LINE 2045 IN MAIN.asm
                    > USED AT LINE 443 IN MAIN.asm
PARSEARGS1:         0E24 DEFINED AT LINE 2052 IN MAIN.asm
                    > USED AT LINE 2073 IN MAIN.asm
PARSEARGS1A:        0E2C DEFINED AT LINE 2058 IN MAIN.asm
                    > USED AT LINE 2055 IN MAIN.asm
PARSEARGS2:         0E34 DEFINED AT LINE 2063 IN MAIN.asm
PARSEARGS3:         0E3C DEFINED AT LINE 2071 IN MAIN.asm
                    > USED AT LINE 2057 IN MAIN.asm
                    > USED AT LINE 2069 IN MAIN.asm
PARSEARGS4:         0E3F DEFINED AT LINE 2074 IN MAIN.asm
                    > USED AT LINE 2060 IN MAIN.asm
                    > USED AT LINE 2062 IN MAIN.asm
PARSEARGS5:         0E45 DEFINED AT LINE 2080 IN MAIN.asm
                    > USED AT LINE 2078 IN MAIN.asm
PARSEBLOCK:         0E50 DEFINED AT LINE 2093 IN MAIN.asm
                    > USED AT LINE 454 IN MAIN.asm
                    > USED AT LINE 555 IN MAIN.asm
PARSEBLOCK1:        0E54 DEFINED AT LINE 2097 IN MAIN.asm
                    > USED AT LINE 2101 IN MAIN.asm
                    > USED AT LINE 2109 IN MAIN.asm
                    > USED AT LINE 2115 IN MAIN.asm
                    > USED AT LINE 2129 IN MAIN.asm
                    > USED AT LINE 2132 IN MAIN.asm
                    > USED AT LINE 2135 IN MAIN.asm
PARSEBLOCK2:        0E6D DEFINED AT LINE 2111 IN MAIN.asm
                    > USED AT LINE 2103 IN MAIN.asm
                    > USED AT LINE 2105 IN MAIN.asm
                    > USED AT LINE 2107 IN MAIN.asm
PARSEBLOCK3:        0E73 DEFINED AT LINE 2116 IN MAIN.asm
                    > USED AT LINE 2110 IN MAIN.asm
PARSEBLOCK4:        0E8D DEFINED AT LINE 2130 IN MAIN.asm
                    > USED AT LINE 2118 IN MAIN.asm
                    > USED AT LINE 2120 IN MAIN.asm
                    > USED AT LINE 2122 IN MAIN.asm
PARSEBLOCK5:        0E90 DEFINED AT LINE 2133 IN MAIN.asm
                    > USED AT LINE 2124 IN MAIN.asm
                    > USED AT LINE 2126 IN MAIN.asm
                    > USED AT LINE 2128 IN MAIN.asm
PARSEBLOCK6:        0EBB DEFINED AT LINE 2154 IN MAIN.asm
                    > USED AT LINE 2141 IN MAIN.asm
CREATEFUNC:         0EBF DEFINED AT LINE 2162 IN MAIN.asm
                    > USED AT LINE 455 IN MAIN.asm
CREATEFUNC0:        0EDE DEFINED AT LINE 2176 IN MAIN.asm
                    > USED AT LINE 2172 IN MAIN.asm
CREATEFUNC1:        0EF6 DEFINED AT LINE 2195 IN MAIN.asm
                    > USED AT LINE 2191 IN MAIN.asm
CREATEFUNC2:        0F09 DEFINED AT LINE 2208 IN MAIN.asm
                    > USED AT LINE 2204 IN MAIN.asm
CREATEFUNC2A:       0F28 DEFINED AT LINE 2234 IN MAIN.asm
                    > USED AT LINE 2221 IN MAIN.asm
CREATEFUNC3:        0F37 DEFINED AT LINE 2246 IN MAIN.asm
                    > USED AT LINE 2256 IN MAIN.asm
CREATEFUNC4:        0F42 DEFINED AT LINE 2257 IN MAIN.asm
CREATEFUNC5:        0F43 DEFINED AT LINE 2259 IN MAIN.asm
                    > USED AT LINE 2175 IN MAIN.asm
VARIABLE:           0F61 DEFINED AT LINE 2286 IN MAIN.asm
                    > USED AT LINE 274 IN MAIN.asm
                    > USED AT LINE 594 IN MAIN.asm
                    > USED AT LINE 1292 IN MAIN.asm
                    > USED AT LINE 1296 IN MAIN.asm
                    > USED AT LINE 1300 IN MAIN.asm
                    > USED AT LINE 1304 IN MAIN.asm
                    > USED AT LINE 1308 IN MAIN.asm
CONSTANT:           0F70 DEFINED AT LINE 2296 IN MAIN.asm
                    > USED AT LINE 1110 IN MAIN.asm
                    > USED AT LINE 1114 IN MAIN.asm
                    > USED AT LINE 1118 IN MAIN.asm
                    > USED AT LINE 2292 IN MAIN.asm
CHARTABLE:          0F73 DEFINED AT LINE 2304 IN MAIN.asm
                    > USED AT LINE 780 IN MAIN.asm
CHARTABLE1:         0F7D DEFINED AT LINE 2311 IN MAIN.asm
                    > USED AT LINE 2325 IN MAIN.asm
CHARTABLE2:         0F86 DEFINED AT LINE 2319 IN MAIN.asm
                    > USED AT LINE 2317 IN MAIN.asm
CHARTABLE3:         0F88 DEFINED AT LINE 2322 IN MAIN.asm
                    > USED AT LINE 2308 IN MAIN.asm
                    > USED AT LINE 2310 IN MAIN.asm
COMMANDTABLE:       0F8D DEFINED AT LINE 2331 IN MAIN.asm
                    > USED AT LINE 604 IN MAIN.asm
COMMANDTABLE1:      0F8E DEFINED AT LINE 2333 IN MAIN.asm
COMMANDTABLE2:      0F8F DEFINED AT LINE 2335 IN MAIN.asm
                    > USED AT LINE 2348 IN MAIN.asm
COMMANDTABLE3:      0F96 DEFINED AT LINE 2341 IN MAIN.asm
                    > USED AT LINE 2338 IN MAIN.asm
COMMANDTABLE4:      0F9F DEFINED AT LINE 2349 IN MAIN.asm
                    > USED AT LINE 2340 IN MAIN.asm
                    > USED AT LINE 2344 IN MAIN.asm
CMDTABLE:           0FA5 DEFINED AT LINE 2362 IN MAIN.asm
                    > USED AT LINE 811 IN MAIN.asm
                    > USED AT LINE 826 IN MAIN.asm
                    > USED AT LINE 835 IN MAIN.asm
                    > USED AT LINE 842 IN MAIN.asm
                    > USED AT LINE 863 IN MAIN.asm
                    > USED AT LINE 871 IN MAIN.asm
                    > USED AT LINE 878 IN MAIN.asm
                    > USED AT LINE 885 IN MAIN.asm
                    > USED AT LINE 890 IN MAIN.asm
                    > USED AT LINE 896 IN MAIN.asm
                    > USED AT LINE 903 IN MAIN.asm
                    > USED AT LINE 935 IN MAIN.asm
                    > USED AT LINE 954 IN MAIN.asm
                    > USED AT LINE 959 IN MAIN.asm
                    > USED AT LINE 980 IN MAIN.asm
                    > USED AT LINE 989 IN MAIN.asm
                    > USED AT LINE 996 IN MAIN.asm
                    > USED AT LINE 1483 IN MAIN.asm
CMDTABLE1:          0FA6 DEFINED AT LINE 2364 IN MAIN.asm
CMDTABLE2:          0FA6 DEFINED AT LINE 2365 IN MAIN.asm
                    > USED AT LINE 2389 IN MAIN.asm
CMDTABLE3:          0FB3 DEFINED AT LINE 2377 IN MAIN.asm
CMDTABLE4:          0FBC DEFINED AT LINE 2385 IN MAIN.asm
                    > USED AT LINE 2376 IN MAIN.asm
CMDTABLE5:          0FC1 DEFINED AT LINE 2390 IN MAIN.asm
                    > USED AT LINE 2372 IN MAIN.asm
                    > USED AT LINE 2380 IN MAIN.asm
                    > USED AT LINE 2384 IN MAIN.asm
GETVARADDR:         0FC6 DEFINED AT LINE 2397 IN MAIN.asm
                    > USED AT LINE 1042 IN MAIN.asm
GETVARADDR1:        0FD8 DEFINED AT LINE 2408 IN MAIN.asm
                    > USED AT LINE 2404 IN MAIN.asm
PUTSTR0:            0FDD DEFINED AT LINE 2414 IN MAIN.asm
                    > USED AT LINE 2420 IN MAIN.asm
PUTSTR:             0FE1 DEFINED AT LINE 2417 IN MAIN.asm
                    > USED AT LINE 2040 IN MAIN.asm
                    > USED AT LINE 2486 IN MAIN.asm
                    > USED AT LINE 2543 IN MAIN.asm
NESTING:            0FE6 DEFINED AT LINE 2433 IN MAIN.asm
                    > USED AT LINE 2565 IN MAIN.asm
                    > USED AT LINE 2599 IN MAIN.asm
NESTING0:           0FF4 DEFINED AT LINE 2441 IN MAIN.asm
                    > USED AT LINE 2435 IN MAIN.asm
                    > USED AT LINE 2437 IN MAIN.asm
                    > USED AT LINE 2439 IN MAIN.asm
NESTING1A:          0FFB DEFINED AT LINE 2446 IN MAIN.asm
                    > USED AT LINE 2443 IN MAIN.asm
NESTING1:           0FFE DEFINED AT LINE 2449 IN MAIN.asm
                    > USED AT LINE 2440 IN MAIN.asm
NESTING2:           100D DEFINED AT LINE 2458 IN MAIN.asm
                    > USED AT LINE 2453 IN MAIN.asm
                    > USED AT LINE 2455 IN MAIN.asm
NESTING3:           100F DEFINED AT LINE 2461 IN MAIN.asm
                    > USED AT LINE 2457 IN MAIN.asm
NESTING4:           101A DEFINED AT LINE 2468 IN MAIN.asm
                    > USED AT LINE 2463 IN MAIN.asm
                    > USED AT LINE 2465 IN MAIN.asm
PROMPT:             101C DEFINED AT LINE 2472 IN MAIN.asm
                    > USED AT LINE 2547 IN MAIN.asm
CRLF:               1025 DEFINED AT LINE 2477 IN MAIN.asm
                    > USED AT LINE 2612 IN MAIN.asm
PRINTSTR:           102C DEFINED AT LINE 2484 IN MAIN.asm
                    > USED AT LINE 2473 IN MAIN.asm
                    > USED AT LINE 2478 IN MAIN.asm
                    > USED AT LINE 2672 IN MAIN.asm
                    > USED AT LINE 2677 IN MAIN.asm
INIT:               1033 DEFINED AT LINE 2491 IN MAIN.asm
                    > USED AT LINE 2540 IN MAIN.asm
INIT1:              103B DEFINED AT LINE 2495 IN MAIN.asm
                    > USED AT LINE 2501 IN MAIN.asm
WARMINIT:           1043 DEFINED AT LINE 2503 IN MAIN.asm
COLDBOOT0:          1056 DEFINED AT LINE 2510 IN MAIN.asm
                    > USED AT LINE 2498 IN MAIN.asm
                    > USED AT LINE 2536 IN MAIN.asm
COLDINIT:           1060 DEFINED AT LINE 2516 IN MAIN.asm
COLDBOOT1:          1071 DEFINED AT LINE 2525 IN MAIN.asm
                    > USED AT LINE 2528 IN MAIN.asm
COLDSTART:          107E DEFINED AT LINE 2534 IN MAIN.asm
                    > USED AT LINE 828 IN MAIN.asm
START:              1087 DEFINED AT LINE 2538 IN MAIN.asm
                    > USED AT LINE 7
START1:             108D DEFINED AT LINE 2541 IN MAIN.asm
                    > USED AT LINE 2508 IN MAIN.asm
                    > USED AT LINE 2537 IN MAIN.asm
INTERPRET:          1093 DEFINED AT LINE 2545 IN MAIN.asm
                    > USED AT LINE 2649 IN MAIN.asm
                    > USED AT LINE 2665 IN MAIN.asm
INTERPRET2:         109F DEFINED AT LINE 2553 IN MAIN.asm
                    > USED AT LINE 2590 IN MAIN.asm
                    > USED AT LINE 2670 IN MAIN.asm
                    > USED AT LINE 2674 IN MAIN.asm
                    > USED AT LINE 2692 IN MAIN.asm
INTERPRET3:         10A7 DEFINED AT LINE 2561 IN MAIN.asm
                    > USED AT LINE 2571 IN MAIN.asm
INTERPRET4:         10AD DEFINED AT LINE 2567 IN MAIN.asm
                    > USED AT LINE 2559 IN MAIN.asm
INTERPRET5:         10B2 DEFINED AT LINE 2574 IN MAIN.asm
                    > USED AT LINE 2600 IN MAIN.asm
                    > USED AT LINE 2615 IN MAIN.asm
INTERPRET5A:        10CB DEFINED AT LINE 2589 IN MAIN.asm
INTERPRET6:         10CD DEFINED AT LINE 2592 IN MAIN.asm
                    > USED AT LINE 2578 IN MAIN.asm
INTERPRET7:         10DB DEFINED AT LINE 2602 IN MAIN.asm
                    > USED AT LINE 2582 IN MAIN.asm
INTERPRET8:         10EE DEFINED AT LINE 2617 IN MAIN.asm
                    > USED AT LINE 2580 IN MAIN.asm
NEXT:               1109 DEFINED AT LINE 2630 IN MAIN.asm
                    > USED AT LINE 2530 IN MAIN.asm
                    > USED AT LINE 2634 IN MAIN.asm
NEXT0:              111D DEFINED AT LINE 2644 IN MAIN.asm
                    > USED AT LINE 2642 IN MAIN.asm
NEXT1:              111E DEFINED AT LINE 2646 IN MAIN.asm
                    > USED AT LINE 2635 IN MAIN.asm
EXIT:               1125 DEFINED AT LINE 2651 IN MAIN.asm
                    > USED AT LINE 2648 IN MAIN.asm
RUN:                1129 DEFINED AT LINE 2656 IN MAIN.asm
                    > USED AT LINE 2663 IN MAIN.asm
ERROR:              112D DEFINED AT LINE 2661 IN MAIN.asm
                    > USED AT LINE 452 IN MAIN.asm
                    > USED AT LINE 1132 IN MAIN.asm
BACKSPACE_:         113F DEFINED AT LINE 2667 IN MAIN.asm
                    > USED AT LINE 2585 IN MAIN.asm
REEDIT_:            114F DEFINED AT LINE 2676 IN MAIN.asm
                    > USED AT LINE 2587 IN MAIN.asm
REEDIT0:            115B DEFINED AT LINE 2681 IN MAIN.asm
                    > USED AT LINE 2687 IN MAIN.asm
REEDIT1:            115F DEFINED AT LINE 2684 IN MAIN.asm
                    > USED AT LINE 2680 IN MAIN.asm
F1:                 116F DEFINED AT LINE 10
                    > USED AT LINE 852 IN MAIN.asm
F2:                 116F DEFINED AT LINE 11
                    > USED AT LINE 854 IN MAIN.asm
F3:                 116F DEFINED AT LINE 12
                    > USED AT LINE 856 IN MAIN.asm
F4:                 116F DEFINED AT LINE 13
                    > USED AT LINE 858 IN MAIN.asm
STKSIZE:            0100 DEFINED AT LINE 1 IN ram.asm
                    > USED AT LINE 6 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 2 IN ram.asm
                    > USED AT LINE 10 IN ram.asm
BUFSIZE:            0100 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 13 IN ram.asm
STACK:              2100 DEFINED AT LINE 7 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 1771 IN MAIN.asm
                    > USED AT LINE 2531 IN MAIN.asm
                    > USED AT LINE 2535 IN MAIN.asm
                    > USED AT LINE 2539 IN MAIN.asm
TIB:                2100 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 154 IN MAIN.asm
                    > USED AT LINE 1113 IN MAIN.asm
                    > USED AT LINE 2550 IN MAIN.asm
                    > USED AT LINE 2558 IN MAIN.asm
                    > USED AT LINE 2594 IN MAIN.asm
                    > USED AT LINE 2604 IN MAIN.asm
                    > USED AT LINE 2619 IN MAIN.asm
                    > USED AT LINE 2622 IN MAIN.asm
                    > USED AT LINE 2679 IN MAIN.asm
                    > USED AT LINE 2688 IN MAIN.asm
BUFFER:             2200 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 155 IN MAIN.asm
                    > USED AT LINE 1117 IN MAIN.asm
                    > USED AT LINE 1230 IN MAIN.asm
                    > USED AT LINE 1241 IN MAIN.asm
                    > USED AT LINE 2035 IN MAIN.asm
VARS:               2300 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 2522 IN MAIN.asm
RESTARTS:           23D0 DEFINED AT LINE 18 IN ram.asm
RST08:              23D0 DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              23D2 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              23D4 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              23D6 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              23D8 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              23DA DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               23DC DEFINED AT LINE 26 IN ram.asm
INTVEC:             23DE DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             23E0 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            23E2 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            23E4 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            23E6 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 2518 IN MAIN.asm
VTIBPTR:            23E6 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 1303 IN MAIN.asm
                    > USED AT LINE 2551 IN MAIN.asm
                    > USED AT LINE 2621 IN MAIN.asm
VBUFPTR:            23E8 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 540 IN MAIN.asm
                    > USED AT LINE 550 IN MAIN.asm
                    > USED AT LINE 619 IN MAIN.asm
                    > USED AT LINE 622 IN MAIN.asm
                    > USED AT LINE 629 IN MAIN.asm
                    > USED AT LINE 639 IN MAIN.asm
                    > USED AT LINE 653 IN MAIN.asm
                    > USED AT LINE 666 IN MAIN.asm
                    > USED AT LINE 728 IN MAIN.asm
                    > USED AT LINE 747 IN MAIN.asm
                    > USED AT LINE 1225 IN MAIN.asm
                    > USED AT LINE 1242 IN MAIN.asm
                    > USED AT LINE 1291 IN MAIN.asm
                    > USED AT LINE 2036 IN MAIN.asm
                    > USED AT LINE 2038 IN MAIN.asm
VHEAPPTR:           23EA DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 473 IN MAIN.asm
                    > USED AT LINE 507 IN MAIN.asm
                    > USED AT LINE 511 IN MAIN.asm
                    > USED AT LINE 1234 IN MAIN.asm
                    > USED AT LINE 1238 IN MAIN.asm
                    > USED AT LINE 1299 IN MAIN.asm
                    > USED AT LINE 1499 IN MAIN.asm
                    > USED AT LINE 1516 IN MAIN.asm
                    > USED AT LINE 1524 IN MAIN.asm
                    > USED AT LINE 1603 IN MAIN.asm
                    > USED AT LINE 1622 IN MAIN.asm
                    > USED AT LINE 2047 IN MAIN.asm
                    > USED AT LINE 2082 IN MAIN.asm
                    > USED AT LINE 2149 IN MAIN.asm
                    > USED AT LINE 2152 IN MAIN.asm
                    > USED AT LINE 2174 IN MAIN.asm
                    > USED AT LINE 2179 IN MAIN.asm
                    > USED AT LINE 2210 IN MAIN.asm
                    > USED AT LINE 2276 IN MAIN.asm
VRECURPTR:          23EC DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 1170 IN MAIN.asm
                    > USED AT LINE 1759 IN MAIN.asm
                    > USED AT LINE 1766 IN MAIN.asm
VDATAWIDTH:         23EE DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 267 IN MAIN.asm
                    > USED AT LINE 484 IN MAIN.asm
                    > USED AT LINE 656 IN MAIN.asm
                    > USED AT LINE 736 IN MAIN.asm
                    > USED AT LINE 1065 IN MAIN.asm
                    > USED AT LINE 1096 IN MAIN.asm
                    > USED AT LINE 1879 IN MAIN.asm
                    > USED AT LINE 1941 IN MAIN.asm
                    > USED AT LINE 2289 IN MAIN.asm
VNUMBASE:           23EF DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 645 IN MAIN.asm
                    > USED AT LINE 1123 IN MAIN.asm
VHEXPREFIX:         23F0 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 729 IN MAIN.asm
                    > USED AT LINE 1307 IN MAIN.asm
VECHO:              23F1 DEFINED AT LINE 43 IN ram.asm
                    > USED AT LINE 1295 IN MAIN.asm
                    > USED AT LINE 1507 IN MAIN.asm
VSTRMODE:           23F2 DEFINED AT LINE 44 IN ram.asm
                    > USED AT LINE 1219 IN MAIN.asm
                    > USED AT LINE 1224 IN MAIN.asm
                    > USED AT LINE 2030 IN MAIN.asm
VPOINTER:           23F8 DEFINED AT LINE 53 IN ram.asm
                    > USED AT LINE 414 IN MAIN.asm
                    > USED AT LINE 592 IN MAIN.asm
                    > USED AT LINE 593 IN MAIN.asm
                    > USED AT LINE 1662 IN MAIN.asm
                    > USED AT LINE 1876 IN MAIN.asm
                    > USED AT LINE 2287 IN MAIN.asm
VREMAIN:            23FA DEFINED AT LINE 54 IN ram.asm
                    > USED AT LINE 1016 IN MAIN.asm
                    > USED AT LINE 1174 IN MAIN.asm
VSAVEDIP:           23FC DEFINED AT LINE 56 IN ram.asm
                    > USED AT LINE 2504 IN MAIN.asm
                    > USED AT LINE 2624 IN MAIN.asm
VSAVEDSP:           23FE DEFINED AT LINE 57 IN ram.asm
                    > USED AT LINE 2505 IN MAIN.asm
                    > USED AT LINE 2625 IN MAIN.asm
VSAVEDNEXT:         2400 DEFINED AT LINE 58 IN ram.asm
                    > USED AT LINE 2506 IN MAIN.asm
                    > USED AT LINE 2626 IN MAIN.asm
VSAVEDBP:           2402 DEFINED AT LINE 59 IN ram.asm
                    > USED AT LINE 2507 IN MAIN.asm
                    > USED AT LINE 2627 IN MAIN.asm
VTEMP1:             2404 DEFINED AT LINE 63 IN ram.asm
                    > USED AT LINE 466 IN MAIN.asm
                    > USED AT LINE 512 IN MAIN.asm
                    > USED AT LINE 1229 IN MAIN.asm
                    > USED AT LINE 1239 IN MAIN.asm
                    > USED AT LINE 1714 IN MAIN.asm
                    > USED AT LINE 1758 IN MAIN.asm
                    > USED AT LINE 1770 IN MAIN.asm
                    > USED AT LINE 1776 IN MAIN.asm
                    > USED AT LINE 1805 IN MAIN.asm
                    > USED AT LINE 1826 IN MAIN.asm
                    > USED AT LINE 1833 IN MAIN.asm
                    > USED AT LINE 1839 IN MAIN.asm
                    > USED AT LINE 1930 IN MAIN.asm
                    > USED AT LINE 1954 IN MAIN.asm
                    > USED AT LINE 1970 IN MAIN.asm
                    > USED AT LINE 1978 IN MAIN.asm
                    > USED AT LINE 1994 IN MAIN.asm
                    > USED AT LINE 2003 IN MAIN.asm
                    > USED AT LINE 2144 IN MAIN.asm
                    > USED AT LINE 2153 IN MAIN.asm
                    > USED AT LINE 2165 IN MAIN.asm
                    > USED AT LINE 2277 IN MAIN.asm
VTEMP2:             2406 DEFINED AT LINE 64 IN ram.asm
                    > USED AT LINE 1717 IN MAIN.asm
                    > USED AT LINE 1757 IN MAIN.asm
                    > USED AT LINE 1806 IN MAIN.asm
                    > USED AT LINE 1827 IN MAIN.asm
                    > USED AT LINE 2167 IN MAIN.asm
                    > USED AT LINE 2267 IN MAIN.asm
VTEMP3:             2408 DEFINED AT LINE 65 IN ram.asm
                    > USED AT LINE 2164 IN MAIN.asm
                    > USED AT LINE 2278 IN MAIN.asm
TBPTR:              240C DEFINED AT LINE 67 IN ram.asm
TITLEBUF:           240E DEFINED AT LINE 69 IN ram.asm
                    > USED AT LINE 2493 IN MAIN.asm
                    > USED AT LINE 2512 IN MAIN.asm
                    > USED AT LINE 2542 IN MAIN.asm
HEAP:               2422 DEFINED AT LINE 71 IN ram.asm
                    > USED AT LINE 156 IN MAIN.asm
                    > USED AT LINE 1109 IN MAIN.asm
                    > USED AT LINE 2137 IN MAIN.asm
