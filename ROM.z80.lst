0000                          .ENGINE   mycomputer   
0000                             ; 
0000                TEC_1:    EQU   1   
0000                RC2014:   EQU   0   
0000                EXTENDED:   EQU   0   
0000                          IF   RC2014   
                                 ; Configuration for RC2014
                    ROMSTART:   EQU   $8000   
                    RAMSTART:   EQU   $8800   
                    LOADER:   EQU   0   
                    BITBANG:   EQU   0   
0000                          ENDIF      
0000                          IF   TEC_1   
0000                             ; Configuration for TEC-1
0000                LOADER:   EQU   0   
0000                BITBANG:   EQU   0   
0000                ROMSTART:   EQU   $0000   
0000                RAMSTART:   EQU   $1800   
0000                ROMSIZE:   EQU   $0800   
0000                RAMSIZE:   EQU   $0800   
0000                             ;TEC-1D SC 8k rom/ram
0000                             ; ROMSTART .equ $0000
0000                             ; RAMSTART .equ $2000
0000                             ; ROMSIZE  .equ 8192
0000                             ; RAMSIZE  .equ 8192
0000                          ENDIF      
0000                             ; ROM code
0000                             ; Targets:
0000                             ; TEC-1,TEC-1D,TEC-1F,Southern Cross,RC2014
0000                             ; Memory Map: 2k ROM/RAM, 8K ROM/RAM, RC2014
0000                             ; Serial: Bit Bang, 6850 ACIA
0000                             ; 
0000                          IF   TEC_1   
0000                          IF   BITBANG   
                                 ; 
                                 ; bit bang baud rate constants @ 4MHz
                    B300:     EQU   0220H   
                    B1200:    EQU   0080H   
                    B2400:    EQU   003FH   
                    B4800:    EQU   001BH   
                    B9600:    EQU   000BH   
                                 ; 
0000                          ELSE      ;6850
0000                             ; 
0000                             ; 
0000                             ; 6850 ACIA registers
0000                             ;----------------------
0000                CONTROL:   EQU   $80   ;(write) 
0000                STATUS:   EQU   $80   ;(read)
0000                TDR:      EQU   $81   ;(write)
0000                RDR:      EQU   $81   ;(read)
0000                             ; 
0000                             ; control register bits
0000                             ;----------------------
0000                             ; 
0000                             ;clock divisor
0000                             ; 
0000                MRESET:   EQU   $03   ;master reset the ACIA
0000                             ; DIV_0    .EQU  $00        ;CLOCK/1
0000                             ; DIV_16   .EQU  $01        ;CLOCK/16
0000                DIV_64:   EQU   $02   ;CLOCK/64
0000                             ; 
0000                             ; format select
0000                             ; 
0000                F7E2:     EQU   $00   ;7 data bits, EVEN parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7O2:     EQU   $04   ;7 data bits, ODD parity, 2 stop bits (1+7+1+2= 11 bits)
0000                F7E1:     EQU   $08   ;7 data bits, EVEN parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F7O1:     EQU   $0C   ;7 data bits, ODD parity, 1 stop bit (1+7+1+1= 10 bits)
0000                F8N2:     EQU   $10   ;8 data bits, NO parity, 2 stop bits (1+8+0+2= 11 bits)
0000                F8N1:     EQU   $14   ;8 data bits, NO parity, 1 stop bit (1+8+0+1= 10 bits)
0000                F8E1:     EQU   $18   ;8 data bits, EVEN parity, 1 stop bit (1+8+1+1= 11 bits)
0000                F8O1:     EQU   $1C   ;8 data bits, ODD parity,1 stop bit (1+8+1+1= 11 bits)
0000                             ; 
0000                             ; transmitter control
0000                             ; 
0000                RTSLID:   EQU   $00   ;RTS LOW, transmit interrupt disabled
0000                RTSLIE:   EQU   $20   ;RTS LOW, transmit interrupt enabled
0000                RTSHID:   EQU   $40   ;RTS HIGH, transmit interrupt disabled
0000                RTSLIDB:   EQU   $60   ;RTS LOW, transmit interrupt disabled and "break" transmitted
0000                             ; 
0000                             ; receiver interrupt
0000                             ; 
0000                RIE:      EQU   $80   ;receiver interrupt enabled
0000                             ; 
0000                             ; status register bits
0000                             ;---------------------
0000                RDRF:     EQU   0   ;receive data register full
0000                TDRE:     EQU   1   ;transmit data register empty
0000                DCD:      EQU   2   ;data carrier detect
0000                CTS:      EQU   3   ;clear to send
0000                FE:       EQU   4   ;framing error
0000                OVRN:     EQU   5   ;overrun
0000                PE:       EQU   6   ;parity error
0000                IRQ:      EQU   7   ;interrupt request
0000                             ; 
0000                          ENDIF      
0000                          ENDIF      
0000                             ; 
0000                             ; I/O port addresses
0000                             ; 
0000                          IF   TEC_1   
0000                KEYBUF:   EQU   00H   ;MM74C923N KEYBOARD ENCODER
0000                SCAN:     EQU   01H   ;DISPLAY SCAN LATCH
0000                DISPLY:   EQU   02H   ;DISPLAY LATCH
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (RELAY BOARD) DATLATCH (DAT BOARD)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (DAT BOARD)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ELSE      ;SC
                    IO0:      EQU   80H   ;IO PORT 0
                    IO1:      EQU   81H   ;IO PORT 1
                    IO2:      EQU   82H   ;IO PORT 2
                    IO3:      EQU   83H   ;IO PORT 3
                    DISPLY:   EQU   84H   ;DISPLAY LATCH
                    SCAN:     EQU   85H   ;DISPLAY SCAN LATCH
                    KEYBUF:   EQU   86H   ;KEYBOARD BUFFER
                    IO7:      EQU   87H   ;ENABLE/DISABLE SINGLE STEPPER (IF INSTALLED)
0000                          ENDIF      
0000                             ; 
0000                             ; ASCII codes
0000                ESC:      EQU   1BH   
0000                CR:       EQU   0DH   
0000                LF:       EQU   0AH   
0000                             ; 
0000                          .ORG   ROMSTART   
0000                             ;reset
0000                RSTVEC:      
0000   C3 8B 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   hl   
0009   2A D0 0C               LD   hl,(RST08)   
000C   E3                     EX   (sp),hl   
000D   C9                     RET      
000E                             ; 
000E                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   hl   
0011   2A D2 0C               LD   hl,(RST10)   
0014   E3                     EX   (sp),hl   
0015   C9                     RET      
0016                             ; 
0016                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   hl   
0019   2A D4 0C               LD   hl,(RST18)   
001C   E3                     EX   (sp),hl   
001D   C9                     RET      
001E                             ; 
001E                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   hl   
0021   2A D6 0C               LD   hl,(RST20)   
0024   E3                     EX   (sp),hl   
0025   C9                     RET      
0026                             ; 
0026                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   hl   
0029   2A D8 0C               LD   hl,(RST28)   
002C   E3                     EX   (sp),hl   
002D   C9                     RET      
002E                             ; 
002E                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   hl   
0031   2A DA 0C               LD   hl,(RST30)   
0034   E3                     EX   (sp),hl   
0035   ED 4D                  RETI      
0037                             ; 
0037                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   hl   
0039   2A DE 0C               LD   hl,(INTVEC)   
003C   E3                     EX   (sp),hl   
003D   ED 4D                  RETI      
003F                             ; 
0040                          .ORG   ROMSTART+$40   
0040                             ; 
0040                             ;hexadecimal to 7 segment display code table
0040                          IF   TEC_1   
0040                             ; 
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                          ELSE      ;SC
                                 ; 
                    SEVENSEGMENT:      
                              DB   3FH,06H,5BH,4FH   ;0,1,2,3
                              DB   66H,6DH,7DH,07H   ;4,5,6,7
                              DB   7FH,6FH,77H,7CH   ;8,9,A,B
                              DB   39H,5EH,79H,71H   ;C,D,E,F
0050                          ENDIF      
0050                             ; 
0050                             ; 
0050                             ;---------------
0050                             ; BIT TIME DELAY
0050                             ;---------------
0050                             ;DELAY FOR ONE SERIAL BIT TIME
0050                             ;ENTRY : HL = DELAY TIME
0050                             ; NO REGISTERS MODIFIED
0050                             ; 
0050                PWRUP:       
0050   21 00 20               LD   hl,$2000   
0053                BITIME:      
0053   E5                     PUSH   HL   
0054   D5                     PUSH   DE   
0055   11 01 00               LD   DE,0001H   
0058                BITIM1:      
0058   ED 52                  SBC   HL,DE   
005A   D2 58 00               JP   NC,BITIM1   
005D   D1                     POP   DE   
005E   E1                     POP   HL   
005F                INTRET:      
005F   C9                     RET      
0060                             ; 
0060                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   E5                     PUSH   HL   
0067   2A E0 0C               LD   HL,(NMIVEC)   
006A   E9                     JP   (HL)   
006B                             ; 
006B                             ; 
006B                          IF   BITBANG   
                                 ; 
                                 ;------------------------
                                 ; SERIAL TRANSMIT ROUTINE
                                 ;------------------------
                                 ;TRANSMIT BYTE SERIALLY ON DOUT
                                 ; 
                                 ; ENTRY : A = BYTE TO TRANSMIT
                                 ;  EXIT : NO REGISTERS MODIFIED
                                 ; 
                                 ; 
                    TXCHAR:      
                    TXDATA:      
                              PUSH   AF   
                              PUSH   BC   
                              PUSH   HL   
                              LD   HL,(BAUD)   
                              LD   C,A   
                                 ; 
                                 ; TRANSMIT START BIT
                                 ; 
                              XOR   A   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                                 ; 
                                 ; TRANSMIT DATA
                                 ; 
                              LD   B,08H   
                              RRC   C   
                    NXTBIT:      
                              RRC   C   ;SHIFT BITS TO D6,
                              LD   A,C   ;LSB FIRST AND OUTPUT
                              AND   40H   ;THEM FOR ONE BIT TIME.
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              DJNZ   NXTBIT   
                                 ; 
                                 ; SEND STOP BITS
                                 ; 
                              LD   A,40H   
                              OUT   (SCAN),A   
                              CALL   BITIME   
                              CALL   BITIME   
                              POP   HL   
                              POP   BC   
                              POP   AF   
                              RET      
                                 ;-----------------------
                                 ; SERIAL RECEIVE ROUTINE
                                 ;-----------------------
                                 ;RECEIVE SERIAL BYTE FROM DIN
                                 ; 
                                 ; ENTRY : NONE
                                 ;  EXIT : A= RECEIVED BYTE IF CARRY CLEAR
                                 ; 
                                 ; REGISTERS MODIFIED A AND F
                                 ; 
                    RXCHAR:      
                    RXDATA:      
                              PUSH   BC   
                              PUSH   HL   
                                 ; 
                                 ; WAIT FOR START BIT 
                                 ; 
                    RXDAT1:   IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;NO START BIT
                                 ; 
                                 ; DETECTED START BIT
                                 ; 
                              LD   HL,(BAUD)   
                              SRL   H   
                              RR   L   ;DELAY FOR HALF BIT TIME
                              CALL   BITIME   
                              IN   A,(KEYBUF)   
                              BIT   7,A   
                              JR   NZ,RXDAT1   ;START BIT NOT VALID
                                 ; 
                                 ; DETECTED VALID START BIT,READ IN DATA
                                 ; 
                              LD   B,08H   
                    RXDAT2:      
                              LD   HL,(BAUD)   
                              CALL   BITIME   ;DELAY ONE BIT TIME
                              IN   A,(KEYBUF)   
                              RL   A   
                              RR   C   ;SHIFT BIT INTO DATA REG
                              DJNZ   RXDAT2   
                              LD   A,C   
                              OR   A   ;CLEAR CARRY FLAG
                              POP   HL   
                              POP   BC   
                              RET      
                                 ; 
006B                          ELSE      ;6850
006B                             ; 
006B                             ; transmit a character in a
006B                             ;--------------------------
006B                TXDATA:      
006B                TXCHAR:      
006B   C5                     PUSH   bc   
006C   47                     LD   b,a   ;save the character  for later
006D                TXCHAR1:      
006D   DB 80                  IN   a,(STATUS)   ;get the ACIA status
006F   CB 4F                  BIT   1,a   
0071                             ;        bit   TDRE,a                ;is the TDRE bit high?
0071   28 FA                  JR   z,TxChar1   ;no, the TDR is not empty
0073   78                     LD   a,b   ;yes, get the character
0074   D3 81                  OUT   (TDR),a   ;and put it in the TDR
0076   C1                     POP   bc   
0077   C9                     RET      
0078                             ; 
0078                             ; receive  a character in a
0078                             ;---------------------------------
0078                RXDATA:      
0078                RXCHAR:      
0078   DB 80                  IN   a,(STATUS)   ;get the ACIA status
007A   CB 47                  BIT   0,a   
007C                             ;        bit   RDRF,a             ;is the RDRF bit high?
007C   28 FA                  JR   z,RxChar   ;no, the RDR is empty
007E   DB 81                  IN   a,(RDR)   ;yes, read the received char
0080   C9                     RET      
0081                          ENDIF      
0081                             ; 
0081                          IF   LOADER   
                                 ;   .ORG   ROMSTART + $0700
                                 ;-----------------------
                                 ; RECEIVE INTEL HEX FILE
                                 ;-----------------------
                    INTELH:      
                              LD   IX,BUF   
                                 ; 
                                 ; WAIT FOR RECORD MARK
                                 ; 
                    INTEL1:      
                              XOR   A   
                              LD   (IX+3),A   ;CLEAR CHECKSUM
                              CALL   RXDATA   ;WAIT FOR THE RECORD MARK
                              CP   ":"   ;TO BE TRANSMITTED
                              JR   NZ,INTEL1   ;NOT RECORD MARK
                                 ; 
                                 ; GET RECORD LENGTH
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+0),A   ;NUMBER OF DATA BYTES
                                 ; 
                                 ; GET ADDRESS FIELD
                                 ; 
                              CALL   GETBYT   
                              LD   (IX+2),A   ;LOAD ADDRESS HIGH BYTE
                              CALL   GETBYT   
                              LD   (IX+1),A   ;LOAD ADDRESS LOW BYTE
                                 ; 
                                 ; GET RECORD TYPE
                                 ; 
                              CALL   GETBYT   
                              JR   NZ,INTEL4   ;END OF FILE RECORD
                                 ; 
                                 ; READ IN THE DATA
                                 ; 
                              LD   B,(IX+0)   ;NUMBER OF DATA BYTES
                              LD   H,(IX+2)   ;LOAD ADDRESS HIGH BYTE
                              LD   L,(IX+1)   ;LOAD ADDRESS LOW BYTE
                                 ; 
                    INTEL2:      
                              CALL   GETBYT   ;GET DATA BYTE
                              LD   (HL),A   ;STORE DATA BYTE
                              INC   HL   
                              DJNZ   INTEL2   ;LOAD MORE BYTES
                                 ; 
                                 ; GET CHECKSUM AND COMPARE
                                 ; 
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE RECORD CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              JR   Z,INTEL1   ;CHECKSUM OK,NEXT RECORD
                              RET      ;NZ=CHECKSUM ERROR
                                 ; 
                                 ; END OF FILE RECORD
                                 ; 
                    INTEL4:      
                              LD   A,(IX+3)   ;CONVERT CHECKSUM TO
                              NEG      ;TWO'S COMPLEMENT
                              LD   (IX+4),A   ;SAVE COMPUTED CHECKSUM
                              CALL   GETBYT   
                              LD   (IX+3),A   ;SAVE EOF CHECKSUM
                              CP   (IX+4)   ;COMPARE CHECKSUM
                              RET      ;NZ=CHECKSUM ERROR
                                 ;--------------------------
                                 ; GET BYTE FROM SERIAL PORT
                                 ;--------------------------
                    GETBYT:      
                              PUSH   BC   
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT1   
                              ADD   A,09H   
                    GETBT1:      
                              AND   0FH   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              SLA   A   
                              LD   C,A   
                                 ; 
                                 ; GET LOW NYBBLE
                                 ; 
                              CALL   RXDATA   
                              BIT   6,A   
                              JR   Z,GETBT2   
                              ADD   A,09H   
                    GETBT2:   AND   0FH   
                              OR   C   
                              LD   B,A   
                              ADD   A,(IX+3)   
                              LD   (IX+3),A   ;ADD TO CHECKSUM
                              LD   A,B   
                              AND   A   ;CLEAR CARRY
                              POP   BC   
                              RET      
0081                          ENDIF      
0081                             ; 
0081                             ; in this example code just wait for an INTEL Hex file download
0081                             ;just going to send a char to let you know I'm here
0081                          IF   LOADER   
                                 ; 
                    LOAD:        
                              LD   a,"L"   ; L for load
                              CALL   TxChar   
                              CALL   INTELH   
                              JP   z,RAMSTART   ;assume the downloaded code starts here
                              LD   a,"0"   ;0 is false
                              CALL   TxChar   
                              JR   load   ;if at first you don't succeed...
0081                          ENDIF      
0081                             ; 
0081                GETCHAR:      
0081   2A E2 0C               LD   HL,(GETCVEC)   
0084   E9                     JP   (HL)   
0085                             ; 
0085                PUTCHAR:      
0085   E5                     PUSH   HL   
0086   2A E4 0C               LD   HL,(PUTCVEC)   
0089   E3                     EX   (SP),HL   
008A   C9                     RET      
008B                             ; 
008B                RESET:       
008B   31 80 0B               LD   SP,stack   
008E   21 5F 00               LD   HL,IntRet   
0091   22 D0 0C               LD   (RST08),HL   
0094   22 D2 0C               LD   (RST10),HL   
0097   22 D4 0C               LD   (RST18),HL   
009A   22 D6 0C               LD   (RST20),HL   
009D   22 D8 0C               LD   (RST28),HL   
00A0   22 DA 0C               LD   (RST30),HL   
00A3   22 DE 0C               LD   (INTVEC),HL   
00A6   22 E0 0C               LD   (NMIVEC),HL   
00A9                             ; 
00A9   21 78 00               LD   HL,RXDATA   
00AC   22 E2 0C               LD   (GETCVEC),HL   
00AF   21 6B 00               LD   HL,TXDATA   
00B2   22 E4 0C               LD   (PUTCVEC),HL   
00B5                             ; 
00B5                          IF   TEC_1   
00B5                          IF   BITBANG = 0   
00B5                             ; 
00B5   3E 03                  LD   a,MRESET   
00B7   D3 80                  OUT   (CONTROL),a   ;reset the ACIA
00B9                             ; 
00B9                          ENDIF      
00B9                          ENDIF      
00B9                             ; 
00B9   CD 50 00               CALL   PWRUP   
00BC   ED 56                  IM   1   
00BE   FB                     EI      
00BF                             ; 
00BF                          IF   TEC_1   
00BF                          IF   BITBANG   
                                 ; 
                                 ;inline serial initialisation
                              LD   A,$40   
                              LD   C,SCAN   
                              OUT   (C),A   
                              LD   HL,B4800   
                              LD   (BAUD),HL   
                                 ; 
00BF                          ELSE      ;6850      
00BF                             ; 
00BF   3E 12                  LD   a,RTSLID+F8N2+DIV_64   
00C1   D3 80                  OUT   (CONTROL),a   ;initialise ACIA  8 bit word, No parity 2 stop divide by 64 for 115200 baud
00C3                             ; 
00C3                          ENDIF      
00C3                          ENDIF      
00C3                             ; 
00C3                             ; 
00C3                             ; 
00C3   31 80 0B               LD   SP,STACK   
00C6   CD 90 09               CALL   init   
00C9   C3 AE 09               JP   start   
00CC                             ; 
00CC                             ; *************************************************************************
00CC                             ; 
00CC                             ;  Monty programming language for the Z80
00CC                             ; 
00CC                             ;  by John Hardy 2023
00CC                             ; 
00CC                             ;  GNU GENERAL PUBLIC LICENSE    Version 3, 29 June 2007
00CC                             ; 
00CC                             ;  see the LICENSE file in this repo for more information
00CC                             ; 
00CC                             ;  Incorporating code from the MINT project by Ken Boak and Craig Jones.
00CC                             ;  Inspiration from Charles H. Moore and Peter Jakacki
00CC                             ; 
00CC                             ; *****************************************************************************
00CC                DSIZE:    EQU   $80   
00CC                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
00CC                TRUE:     EQU   -1   ; C-style true
00CC                FALSE:    EQU   0   
00CC                EMPTY:    EQU   0   
00CC                UNUSED:   EQU   $ff   
00CC                NUL:      EQU   0   ; exit code
00CC                DC1:      EQU   17   ; ?
00CC                DC2:      EQU   18   ; ?
00CC                DC3:      EQU   19   ; ?
00CC                ESC:      EQU   27   ; ?
00CC                DQUOTE:   EQU   $22   ; " double quote char
00CC                Z80_RST8:   EQU   $CF   
00CC                             ; **************************************************************************
00CC                             ; stack frame
00CC                             ; 
00CC                             ; arg0                              -- 0th arg
00CC                             ; arg1
00CC                             ;  :
00CC                             ; argn                              -- nth arg
00CC                             ; loc0                              -- 0th local
00CC                             ; loc1
00CC                             ;  :
00CC                             ; locn                              -- last local
00CC                             ; IP                                -- IP (saved interpreter ptr, return)
00CC                             ; arg_list*                         -- arg_list*
00CC                             ; first_arg*                        -- first_arg*
00CC                             ; BP                                -- BP (saved base ptr)           <-- iy
00CC                             ; res0                              -- 0th result
00CC                             ; res1
00CC                             ;  :
00CC                             ; resn                              -- last result.             <-- sp
00CC                             ; 
00CC                             ; **************************************************************************
00CC                             ; **************************************************************************
00CC                             ; Page 0  Initialisation
00CC                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put monty code from here	
0180                             ; **************************************************************************
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                             ; ***********************************************************************
0180                             ; Initial values for system vars		
0180                             ; ***********************************************************************		
0180                ISYSVARS:      
0180   02 00                  DW   2   ; b vDataWidth in bytes of array operations (default 1 byte)
0182   00 00                  DW   0   ; c vTIBPtr an offset to the tib
0184   1B 0A                  DW   next   ; g nNext
0186   00 0F                  DW   heap   ; h vHeapPtr \h start of the free mem
0188                          ALIGN   $100   
0200                OPCODESBASE:      
0200                CTRLCODES:      
0200   00                     DB   lsb(EMPTY)   ; ^@  0 NUL
0201   00                     DB   lsb(EMPTY)   ; ^A  1 SOH
0202   00                     DB   lsb(EMPTY)   ; ^B  2 STX
0203   00                     DB   lsb(EMPTY)   ; ^C  3 ETX
0204   00                     DB   lsb(EMPTY)   ; ^D  4 EOT
0205   00                     DB   lsb(EMPTY)   ; ^E  5 ENQ
0206   00                     DB   lsb(EMPTY)   ; ^F  6 ACK
0207   00                     DB   lsb(EMPTY)   ; ^G  7 BEL
0208   00                     DB   lsb(EMPTY)   ; ^H  8 BS
0209   00                     DB   lsb(EMPTY)   ; ^I  9 TAB
020A   00                     DB   lsb(EMPTY)   ; ^J 10 LF
020B   00                     DB   lsb(EMPTY)   ; ^K 11 VT
020C   00                     DB   lsb(EMPTY)   ; ^L 12 FF
020D   00                     DB   lsb(EMPTY)   ; ^M 13 CR
020E   00                     DB   lsb(EMPTY)   ; ^N 14 SO
020F   00                     DB   lsb(EMPTY)   ; ^O 15 SI
0210   00                     DB   lsb(EMPTY)   ; ^P 16 DLE
0211   00                     DB   lsb(EMPTY)   ; ^Q 17 DC1
0212   00                     DB   lsb(EMPTY)   ; ^R 18 DC2
0213   00                     DB   lsb(EMPTY)   ; ^S 19 DC3
0214   00                     DB   lsb(EMPTY)   ; ^T 20 DC4
0215   00                     DB   lsb(EMPTY)   ; ^U 21 NAK
0216   00                     DB   lsb(EMPTY)   ; ^V 22 SYN
0217   00                     DB   lsb(EMPTY)   ; ^W 23 ETB
0218   00                     DB   lsb(EMPTY)   ; ^X 24 CAN
0219   00                     DB   lsb(EMPTY)   ; ^Y 25 EM
021A   00                     DB   lsb(EMPTY)   ; ^Z 26 SUB
021B   00                     DB   lsb(EMPTY)   ; ^[ 27 ESC
021C   00                     DB   lsb(EMPTY)   ; ^\ 28 FS
021D   00                     DB   lsb(EMPTY)   ; ^] 29 GS
021E   00                     DB   lsb(EMPTY)   ; ^^ 30 RS
021F   00                     DB   lsb(EMPTY)   ; ^_ 31 US
0220                OPCODES:      ; still available ~ \
0220   8B                     DB   lsb(nop_)   ; SP
0221   3F                     DB   lsb(not_)   ; !
0222   53                     DB   lsb(string_)   ; "
0223   47                     DB   lsb(hexnum_)   ; #
0224   09                     DB   lsb(arg_)   ; $
0225   15                     DB   lsb(arrIndex_)   ; %
0226   06                     DB   lsb(and_)   ; &
0227   21                     DB   lsb(char_)   ; '
0228   73                     DB   lsb(lparen_)   ; (
0229   8D                     DB   lsb(rparen_)   ; )
022A   3C                     DB   lsb(mul_)   ; *
022B   00                     DB   lsb(plus_)   ; +
022C   50                     DB   lsb(comma_)   ; ,
022D   56                     DB   lsb(minus_)   ; -
022E   2A                     DB   lsb(dot_)   ; .
022F   88                     DB   lsb(div_)   ; /	
0230   44                     DB   lsb(num_)   ; 0
0231   44                     DB   lsb(num_)   ; 1
0232   44                     DB   lsb(num_)   ; 2
0233   44                     DB   lsb(num_)   ; 3
0234   44                     DB   lsb(num_)   ; 4
0235   44                     DB   lsb(num_)   ; 5
0236   44                     DB   lsb(num_)   ; 6
0237   44                     DB   lsb(num_)   ; 7
0238   44                     DB   lsb(num_)   ; 8
0239   44                     DB   lsb(num_)   ; 9
023A   30                     DB   lsb(colon_)   ; :
023B   27                     DB   lsb(semicolon_)   ; ;
023C   76                     DB   lsb(lt_)   ; <
023D   59                     DB   lsb(eq_)   ; =
023E   68                     DB   lsb(gt_)   ; >
023F   39                     DB   lsb(if_)   ; ?
0240   03                     DB   lsb(addr_)   ; @
0241   33                     DB   lsb(identU_)   ; A
0242   33                     DB   lsb(identU_)   ; B
0243   33                     DB   lsb(identU_)   ; C
0244   33                     DB   lsb(identU_)   ; D
0245   33                     DB   lsb(identU_)   ; E
0246   33                     DB   lsb(identU_)   ; F
0247   33                     DB   lsb(identU_)   ; G
0248   33                     DB   lsb(identU_)   ; h
0249   33                     DB   lsb(identU_)   ; I
024A   33                     DB   lsb(identU_)   ; J
024B   33                     DB   lsb(identU_)   ; K
024C   33                     DB   lsb(identU_)   ; L
024D   33                     DB   lsb(identU_)   ; M
024E   33                     DB   lsb(identU_)   ; N
024F   33                     DB   lsb(identU_)   ; O
0250   33                     DB   lsb(identU_)   ; p
0251   33                     DB   lsb(identU_)   ; Q
0252   33                     DB   lsb(identU_)   ; R
0253   33                     DB   lsb(identU_)   ; S
0254   33                     DB   lsb(identU_)   ; T
0255   33                     DB   lsb(identU_)   ; U
0256   33                     DB   lsb(identU_)   ; V
0257   33                     DB   lsb(identU_)   ; W
0258   33                     DB   lsb(identU_)   ; X
0259   33                     DB   lsb(identU_)   ; Y
025A   33                     DB   lsb(identU_)   ; Z
025B   0F                     DB   lsb(arrBegin_)   ; [
025C   18                     DB   lsb(backslash_)   ; \
025D   12                     DB   lsb(arrEnd_)   ; ]
025E   4D                     DB   lsb(caret_)   ; ^
025F   2D                     DB   lsb(remain_)   ; _
0260   53                     DB   lsb(string_)   ; `     used for testing string   	
0261   36                     DB   lsb(identL_)   ; a
0262   36                     DB   lsb(identL_)   ; b
0263   36                     DB   lsb(identL_)   ; c
0264   36                     DB   lsb(identL_)   ; d
0265   36                     DB   lsb(identL_)   ; e
0266   36                     DB   lsb(identL_)   ; f
0267   36                     DB   lsb(identL_)   ; g
0268   36                     DB   lsb(identL_)   ; h
0269   36                     DB   lsb(identL_)   ; i
026A   36                     DB   lsb(identL_)   ; j
026B   36                     DB   lsb(identL_)   ; k
026C   36                     DB   lsb(identL_)   ; l
026D   36                     DB   lsb(identL_)   ; m
026E   36                     DB   lsb(identL_)   ; n
026F   36                     DB   lsb(identL_)   ; o
0270   36                     DB   lsb(identL_)   ; p
0271   36                     DB   lsb(identL_)   ; q
0272   36                     DB   lsb(identL_)   ; r
0273   36                     DB   lsb(identL_)   ; s
0274   36                     DB   lsb(identL_)   ; t
0275   36                     DB   lsb(identL_)   ; u
0276   36                     DB   lsb(identL_)   ; v
0277   36                     DB   lsb(identL_)   ; w
0278   36                     DB   lsb(identL_)   ; x
0279   36                     DB   lsb(identL_)   ; y
027A   36                     DB   lsb(identL_)   ; z
027B   1B                     DB   lsb(block_)   ; {
027C   4A                     DB   lsb(or_)   ; |
027D   1E                     DB   lsb(blockEnd_)   ; }
027E   0C                     DB   lsb(tilde_)   ; ~
027F   8B                     DB   lsb(nop_)   ; DEL	
0280                             ; **********************************************************************			
0280                             ; symbolic operators
0280                             ; **********************************************************************
0280                          ALIGN   $100   
0300                PAGE4:       
0300                PLUS_:       ; add the top 2 members of the stack
0300   C3 90 03               JP   plus   
0303                ADDR_:       
0303   C3 AA 03               JP   addr   
0306                AND_:        
0306   C3 B6 03               JP   and   
0309                ARG_:        
0309   C3 DB 03               JP   arg   
030C                TILDE_:      
030C   C3 12 04               JP   tilde   
030F                ARRBEGIN_:      
030F   C3 14 04               JP   arrBegin   
0312                ARREND_:      
0312   C3 30 04               JP   arrEnd   
0315                ARRINDEX_:      
0315   C3 7E 04               JP   arrIndex   
0318                BACKSLASH_:      
0318   C3 A7 04               JP   backslash   
031B                BLOCK_:      
031B   C3 DD 04               JP   block   
031E                BLOCKEND_:      
031E   C3 46 05               JP   blockEnd   
0321                CHAR_:       
0321   C3 9B 05               JP   char   
0324                COMMAND_:      
0324   C3 09 08               JP   command   
0327                SEMICOLON_:      
0327   C3 83 07               JP   semicolon   
032A                DOT_:        
032A   C3 D3 05               JP   dot   
032D                REMAIN_:      
032D   C3 75 07               JP   remain   
0330                COLON_:      
0330   C3 B0 05               JP   colon   
0333                IDENTU_:      
0333   C3 F9 06               JP   identU   
0336                IDENTL_:      
0336   C3 FE 06               JP   identL   
0339                IF_:         
0339   C3 10 07               JP   if   
033C                MUL_:        
033C   C3 29 07               JP   mul   
033F                NOT_:        ; logical invert, any non zero value
033F   21 00 00               LD   hl,0   ; is considered true
0342   18 20                  JR   eq1   
0344                NUM_:        
0344   C3 45 07               JP   num   
0347                HEXNUM_:      
0347   C3 DC 06               JP   hexnum   
034A                OR_:         
034A   C3 C1 03               JP   or   
034D                CARET_:      
034D   C3 3A 06               JP   caret   
0350                COMMA_:      
0350   C3 B2 05               JP   comma   
0353                STRING_:      
0353   C3 C2 07               JP   string   
0356                MINUS_:      
0356   C3 EA 07               JP   minus   
0359                EQ_:         
0359   03                     INC   bc   
035A   0A                     LD   a,(bc)   ; is it == ?
035B   FE 3D                  CP   "="   
035D   28 04                  JR   z,eq0   ; no its equality
035F   0B                     DEC   bc   
0360   C3 96 04               JP   assign   ; no its assignment
0363                EQ0:         
0363   E1                     POP   hl   
0364                EQ1:         
0364   D1                     POP   de   
0365   C3 16 06               JP   equals   
0368                GT_:         
0368   03                     INC   bc   
0369   0A                     LD   a,(bc)   
036A   FE 3E                  CP   ">"   
036C   CA AF 07               JP   z,shiftRight   
036F   D1                     POP   de   
0370   E1                     POP   hl   
0371   18 0C                  JR   lt1   
0373                LPAREN_:      
0373   C3 37 06               JP   lparen   
0376                LT_:         
0376   03                     INC   bc   
0377   0A                     LD   a,(bc)   
0378   FE 3C                  CP   "<"   
037A   CA 9F 07               JP   z,shiftLeft   
037D   E1                     POP   hl   
037E   D1                     POP   de   
037F                LT1:         
037F   FE 3D                  CP   "="   
0381   CA 1E 06               JP   z,lessthaneq   
0384   0B                     DEC   bc   
0385   C3 23 06               JP   lessthan   
0388                DIV_:        
0388   C3 B5 05               JP   div   
038B                NOP_:        
038B   DD E9                  JP   (ix)   
038D                RPAREN_:      
038D   C3 7B 07               JP   rparen   
0390                             ;*******************************************************************
0390                             ; word operators
0390                             ;*******************************************************************
0390                PLUS:        
0390   03                     INC   bc   
0391   0A                     LD   a,(bc)   
0392   FE 2B                  CP   "+"   ; ++ increment variable
0394   20 05                  JR   nz,add1   
0396   E1                     POP   hl   
0397   23                     INC   hl   
0398   C3 98 04               JP   assign0   
039B                ADD1:        
039B   0B                     DEC   bc   
039C   D1                     POP   de   ; second term
039D   E1                     POP   hl   ; first term
039E   19                     ADD   hl,de   
039F                ADD3:        
039F   03                     INC   bc   
03A0   0A                     LD   a,(bc)   
03A1   FE 3D                  CP   "="   ; += add to variable
03A3   CA 98 04               JP   z,assign0   
03A6   E5                     PUSH   hl   
03A7   0B                     DEC   bc   
03A8   DD E9                  JP   (ix)   
03AA                             ; -- ptr
03AA                ADDR:        
03AA   2A F0 0C               LD   hl,(vPointer)   
03AD   E5                     PUSH   hl   
03AE   21 F0 0C               LD   hl,vPointer   
03B1   22 F0 0C               LD   (vPointer),hl   
03B4   DD E9                  JP   (ix)   
03B6                AND:         
03B6   D1                     POP   de   ; Bitwise and the top 2 elements of the stack
03B7   E1                     POP   hl   
03B8   7B                     LD   a,e   
03B9   A5                     AND   l   
03BA   6F                     LD   l,a   
03BB   7A                     LD   a,d   
03BC   A4                     AND   h   
03BD                AND1:        
03BD   67                     LD   h,a   
03BE   C3 9F 03               JP   add3   
03C1                OR:          
03C1   D1                     POP   de   ; Bitwise or the top 2 elements of the stack
03C2   E1                     POP   hl   
03C3   7B                     LD   a,e   
03C4   B5                     OR   l   
03C5   6F                     LD   l,a   
03C6   7A                     LD   a,d   
03C7   B4                     OR   h   
03C8   18 F3                  JR   and1   
03CA                XOR:         
03CA   D1                     POP   de   ; Bitwise xor the top 2 elements of the stack
03CB                XOR1:        
03CB   E1                     POP   hl   
03CC   7B                     LD   a,e   
03CD   AD                     XOR   l   
03CE   6F                     LD   l,a   
03CF   7A                     LD   a,d   
03D0   AC                     XOR   h   
03D1   67                     LD   h,a   
03D2   E5                     PUSH   hl   
03D3   DD E9                  JP   (ix)   
03D5                INVERT:      ; Bitwise INVert the top member of the stack
03D5   11 FF FF               LD   de,$FFFF   ; by xoring with $FFFF
03D8   C3 CB 03               JP   xor1   
03DB                             ; $a .. $z
03DB                             ; -- value
03DB                             ; returns value of arg
03DB                ARG:         
03DB   FD 5E 04               LD   e,(iy+4)   ; hl = arg_list*
03DE   FD 56 05               LD   d,(iy+5)   
03E1   EB                     EX   de,hl   
03E2   7D                     LD   a,l   ; arg_list* == null, skip
03E3   B4                     OR   h   
03E4   28 1C                  JR   z,arg0a   
03E6   2B                     DEC   hl   ; a = num_args, hl = arg_list*
03E7   2B                     DEC   hl   
03E8   7E                     LD   a,(hl)   
03E9   23                     INC   hl   
03EA   23                     INC   hl   
03EB   B7                     OR   a   
03EC   28 14                  JR   z,arg0a   ; num_args == 0, skip
03EE   5F                     LD   e,a   ; e = a = num_args
03EF   03                     INC   bc   ; a = next char = arg_name
03F0   0A                     LD   a,(bc)   
03F1   C5                     PUSH   bc   ; save IP
03F2   43                     LD   b,e   ; b = e = num_args
03F3   FD 5E 02               LD   e,(iy+2)   ; de = first_arg*, hl = argslist*
03F6   FD 56 03               LD   d,(iy+3)   
03F9                ARG0:        
03F9   1B                     DEC   de   ; a = arg_name, de = next arg*
03FA   1B                     DEC   de   
03FB   BE                     CP   (hl)   
03FC   28 09                  JR   z,arg1   
03FE   23                     INC   hl   ; hl = next arg_list*
03FF   10 F8                  DJNZ   arg0   
0401   C1                     POP   bc   ; no match, restore IP
0402                ARG0A:       
0402   11 00 00               LD   de,0   ; return 0
0405   18 08                  JR   arg1a   
0407                ARG1:        
0407   C1                     POP   bc   ; restore IP
0408   EB                     EX   de,hl   ; hl = arg*
0409   22 F0 0C               LD   (vPointer),hl   ; store arg* in setter
040C   5E                     LD   e,(hl)   
040D   23                     INC   hl   
040E   56                     LD   d,(hl)   ; de = arg
040F                ARG1A:       
040F   D5                     PUSH   de   ; push arg
0410   DD E9                  JP   (ix)   
0412                TILDE:       
0412   DD E9                  JP   (ix)   
0414                ARRBEGIN:      
0414   11 00 00               LD   de,0   ; create stack frame
0417   D5                     PUSH   de   ; push null for IP
0418   FD 5E 04               LD   e,(iy+4)   ; push arg_list* from parent stack frame
041B   FD 56 05               LD   d,(iy+5)   ; 
041E   D5                     PUSH   de   ; 
041F   FD 5E 02               LD   e,(iy+2)   ; push first_arg* from parent stack frame
0422   FD 56 03               LD   d,(iy+3)   ; 
0425   D5                     PUSH   de   ; 
0426   FD E5                  PUSH   iy   ; push BP
0428   FD 21 00 00            LD   iy,0   ; BP = SP
042C   FD 39                  ADD   iy,sp   
042E   DD E9                  JP   (ix)   
0430                ARREND:      
0430   FD 54                  LD   d,iyh   ; de = BP
0432   FD 5D                  LD   e,iyl   
0434   ED 43 F8 0C            LD   (vTemp1),bc   ; save IP
0438   62 6B                  LD   hl,de   ; hl = de = BP
043A   B7                     OR   a   
043B   ED 72                  SBC   hl,sp   ; hl = array count (items on stack)
043D   CB 3C                  SRL   h   ; 
043F   CB 1D                  RR   l   
0441   44 4D                  LD   bc,hl   ; bc = count
0443   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = array[-2]
0446   71                     LD   (hl),c   ; write num items in length word
0447   23                     INC   hl   
0448   70                     LD   (hl),b   
0449   23                     INC   hl   ; hl = array[0], bc = count
044A                             ; de = BP, hl = array[0], bc = count
044A                ARREND1:      
044A   FD 7E FE               LD   a,(iy-2)   ; a = lsb of stack item
044D   77                     LD   (hl),a   ; write lsb of array item
044E   23                     INC   hl   ; move to msb of array item
044F   3A E6 0C               LD   a,(vDataWidth)   ; vDataWidth=1?
0452   3D                     DEC   a   
0453   28 05                  JR   z,arrEnd2   
0455   FD 7E FF               LD   a,(iy-1)   ; a = msb of stack item
0458   77                     LD   (hl),a   ; write msb of array item
0459   23                     INC   hl   ; move to next word in array
045A                ARREND2:      
045A   FD 2B                  DEC   iy   ; move to next word on stack
045C   FD 2B                  DEC   iy   
045E   0B                     DEC   bc   ; dec items count
045F   79                     LD   a,c   ; if not zero loop
0460   B0                     OR   b   
0461   20 E7                  JR   nz,arrEnd1   
0463   EB                     EX   de,hl   ; de = end of array, hl = BP
0464   F9                     LD   sp,hl   ; sp = BP
0465   E1                     POP   hl   ; de = end of array, hl = old BP
0466   EB                     EX   de,hl   ; iy = de = old BP, hl = end of array
0467   FD 62                  LD   iyh,d   
0469   FD 6B                  LD   iyl,e   
046B   D1                     POP   de   ; pop arg_list (discard)
046C   D1                     POP   de   ; pop first_arg* (discard)
046D   D1                     POP   de   ; pop IP (discard)
046E   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = array[-2]
0472   22 EC 0C               LD   (vHeapPtr),hl   ; move heap* to end of array
0475   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore IP
0479   13                     INC   de   ; de = array[0]
047A   13                     INC   de   
047B   D5                     PUSH   de   ; return array[0]
047C   DD E9                  JP   (ix)   
047E                             ; index of an array, based on vDataWidth
047E                             ; array num -- value    ; also sets vPointer to address
047E                ARRINDEX:      
047E   E1                     POP   hl   ; hl = index
047F   D1                     POP   de   ; de = array
0480   3A E6 0C               LD   a,(vDataWidth)   ; a = data width
0483   3D                     DEC   a   
0484   28 01                  JR   z,arrIndex1   
0486                ARRINDEX0:      
0486   29                     ADD   hl,hl   ; if data width = 2 then double
0487                ARRINDEX1:      
0487   19                     ADD   hl,de   ; add addr
0488   22 F0 0C               LD   (vPointer),hl   ; store address in setter
048B   16 00                  LD   d,0   
048D   5E                     LD   e,(hl)   
048E   B7                     OR   a   ; check data width again
048F   28 02                  JR   z,arrIndex2   
0491   23                     INC   hl   
0492   56                     LD   d,(hl)   
0493                ARRINDEX2:      
0493   D5                     PUSH   de   
0494   DD E9                  JP   (ix)   
0496                             ; value _oldValue --            ; uses address in vPointer
0496                ASSIGN:      
0496   E1                     POP   hl   ; discard last accessed value
0497   E1                     POP   hl   ; hl = new value
0498                ASSIGN0:      
0498   EB                     EX   de,hl   ; de = new value
0499                ASSIGNX:      
0499   2A F0 0C               LD   hl,(vPointer)   
049C   73                     LD   (hl),e   
049D   3A E6 0C               LD   a,(vDataWidth)   
04A0   3D                     DEC   a   ; is it byte?
04A1   28 02                  JR   z,assign1   
04A3   23                     INC   hl   
04A4   72                     LD   (hl),d   
04A5                ASSIGN1:      
04A5   DD E9                  JP   (ix)   
04A7                             ; arg_list - parses input (ab:c)
04A7                             ; names after the : represent uninitialised locals
04A7                             ; return values are the state of the stack after the block ends
04A7                BACKSLASH:      
04A7                ARG_LIST:      
04A7   11 00 00               LD   de,0   ; d = count locals, e = count args ()
04AA   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
04AD   23                     INC   hl   ; skip length field to start
04AE   23                     INC   hl   
04AF   E5                     PUSH   hl   ; save start of arg_list
04B0   03                     INC   bc   ; point to next char
04B1                ARG_LIST1:      
04B1   0A                     LD   a,(bc)   
04B2   FE 3A                  CP   ":"   ; ":" switches from args to locals
04B4   20 03                  JR   nz,arg_list1a   
04B6   14                     INC   d   ; non zero value local count acts as flag
04B7   18 10                  JR   arg_list3   
04B9                ARG_LIST1A:      
04B9   FE 41                  CP   "A"   ; < "A" terminates arg_list
04BB   38 0F                  JR   c,arg_list4   
04BD   FE 7B                  CP   "z"+1   ; > "z" terminates arg_list
04BF   30 0B                  JR   nc,arg_list4   
04C1                ARG_LIST2:      
04C1   77                     LD   (hl),a   
04C2   23                     INC   hl   
04C3   1C                     INC   e   ; increase arg count
04C4   AF                     XOR   a   
04C5   B2                     OR   d   
04C6   28 01                  JR   z,arg_list3   
04C8   14                     INC   d   ; if d > 0 increase local count
04C9                ARG_LIST3:      
04C9   03                     INC   bc   ; point to next char
04CA   18 E5                  JR   arg_list1   
04CC                ARG_LIST4:      
04CC   AF                     XOR   a   
04CD   B2                     OR   d   
04CE   28 01                  JR   z,arg_list5   
04D0   15                     DEC   d   ; remove initial inc
04D1                ARG_LIST5:      
04D1   23                     INC   hl   
04D2   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
04D5   E1                     POP   hl   ; hl = start of arg_list
04D6   E5                     PUSH   hl   ; return start of arg_list
04D7   2B                     DEC   hl   ; write number of locals at start - 1
04D8   72                     LD   (hl),d   
04D9   2B                     DEC   hl   ; write number of args + locals at start - 2
04DA   73                     LD   (hl),e   
04DB   DD E9                  JP   (ix)   
04DD                BLOCK:       
04DD   C5                     PUSH   bc   ; return pointer to first { of block
04DE   03                     INC   bc   
04DF   16 01                  LD   d,1   ; nesting: count first parenthesis
04E1                BLOCK1:      ; Skip to end of definition
04E1   0A                     LD   a,(bc)   ; Get the next character
04E2   03                     INC   bc   ; Point to next character
04E3   FE 21                  CP   " " + 1   ; ignore whitespace
04E5   38 FA                  JR   c,block1   
04E7   FE 29                  CP   ")"   
04E9   28 2D                  JR   z,block4   
04EB   FE 7D                  CP   "}"   
04ED   28 29                  JR   z,block4   
04EF   FE 5D                  CP   "]"   
04F1   28 25                  JR   z,block4   
04F3   FE 28                  CP   "("   
04F5   28 16                  JR   z,block2   
04F7   FE 7B                  CP   "{"   
04F9   28 12                  JR   z,block2   
04FB   FE 5B                  CP   "["   
04FD   28 0E                  JR   z,block2   
04FF   FE 27                  CP   "'"   
0501   28 0D                  JR   z,block3   
0503   FE 60                  CP   "`"   
0505   28 09                  JR   z,block3   
0507   FE 22                  CP   $22   
0509   28 05                  JR   z,block3   
050B   18 D4                  JR   block1   
050D                BLOCK2:      
050D   14                     INC   d   
050E   18 D1                  JR   block1   
0510                BLOCK3:      
0510   3E 80                  LD   a,$80   
0512   AA                     XOR   d   
0513   47                     LD   b,a   
0514   20 CB                  JR   nz,block1   
0516   18 03                  JR   block5   
0518                BLOCK4:      
0518   15                     DEC   d   
0519   20 C6                  JR   nz,block1   ; get the next element
051B                BLOCK5:      
051B   60 69                  LD   hl,bc   ; hl = IP
051D   11 00 0F               LD   de,HEAP   ; is IP pointing to object in heap
0520   B7                     OR   a   ; IP - HEAP
0521   ED 52                  SBC   hl,de   
0523   CB 7C                  BIT   7,h   ; if -ve then copy to heap else skip
0525   28 1C                  JR   z,block6   
0527   60 69                  LD   hl,bc   ; hl = IP
0529   D1                     POP   de   ; de = block*
052A   ED 43 F8 0C            LD   (vTemp1),bc   ; save IP
052E   B7                     OR   a   ; bc = size
052F   ED 52                  SBC   hl,de   
0531   44 4D                  LD   bc,hl   
0533   EB                     EX   de,hl   ; hl = block* de = heap*
0534   ED 5B EC 0C            LD   de,(vHeapPtr)   
0538   D5                     PUSH   de   ; return hblock*
0539   ED B0                  LDIR      ; copy size bytes from block* to hblock*
053B   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += size
053F   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore IP
0543                BLOCK6:      
0543   0B                     DEC   bc   ; balanced, exit
0544   DD E9                  JP   (ix)   
0546                BLOCKEND:      
0546   D9                     EXX      ; de" = oldBP bc" = oldIP
0547   FD 5E 00               LD   e,(iy+0)   
054A   FD 56 01               LD   d,(iy+1)   
054D   FD 4E 06               LD   c,(iy+6)   
0550   FD 46 07               LD   b,(iy+7)   
0553   D9                     EXX      
0554   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, is it in this scope?
0557   FD 56 03               LD   d,(iy+3)   
055A   EB                     EX   de,hl   
055B   FD 5E 00               LD   e,(iy+0)   ; de = oldBP
055E   FD 56 01               LD   d,(iy+1)   
0561   13                     INC   de   ; for carry flag <=
0562   B7                     OR   a   
0563   ED 52                  SBC   hl,de   
0565   38 0B                  JR   c,blockEnd1   ; oldBP >= first_arg, same scope skip
0567   FD 54                  LD   d,iyh   ; de = BP = first_result*, no args in this scope
0569   FD 5D                  LD   e,iyl   
056B   21 08 00               LD   hl,8   
056E   19                     ADD   hl,de   ; de = BP = first_result* (BP), hl = first_arg* (BP+8)
056F   EB                     EX   de,hl   ; de = first_arg*, hl = first_result*
0570   18 0C                  JR   blockEnd2   
0572                BLOCKEND1:      ; same scope
0572   FD 5E 02               LD   e,(iy+2)   ; hl = first_arg*, in scope
0575   FD 56 03               LD   d,(iy+3)   
0578   EB                     EX   de,hl   
0579   FD 54                  LD   d,iyh   ; de = first_arg*, hl = BP = first_result*
057B   FD 5D                  LD   e,iyl   
057D   EB                     EX   de,hl   
057E                BLOCKEND2:      
057E   44 4D                  LD   bc,hl   ; bc = hl = BP
0580   B7                     OR   a   ; hl = BP - SP = count
0581   ED 72                  SBC   hl,sp   
0583   7D                     LD   a,l   
0584   B4                     OR   h   
0585   28 09                  JR   z,blockEnd3   
0587   C5                     PUSH   bc   ; bc = count, hl = BP
0588   44 4D                  LD   bc,hl   
058A   E1                     POP   hl   
058B   2B                     DEC   hl   ; hl = BP-1
058C   1B                     DEC   de   ; de = args*-1
058D   ED B8                  LDDR      
058F   13                     INC   de   
0590                BLOCKEND3:      
0590   EB                     EX   de,hl   ; hl = new tos
0591   F9                     LD   sp,hl   ; sp = new tos
0592   D9                     EXX      ; bc = IP, iy = oldBP
0593   D5                     PUSH   de   
0594   C5                     PUSH   bc   
0595   D9                     EXX      
0596   C1                     POP   bc   
0597   FD E1                  POP   iy   
0599   DD E9                  JP   (ix)   
059B                CHAR:        
059B   21 00 00               LD   hl,0   ; if "" is empty or null
059E                CHAR1:       
059E   03                     INC   bc   ; point to next char
059F   0A                     LD   a,(bc)   
05A0   FE 27                  CP   "'"   ; ' is the terminator
05A2   28 09                  JR   z,char3   
05A4   FE 5C                  CP   $5c   ; \ is the escape
05A6   20 02                  JR   nz,char2   
05A8   03                     INC   bc   
05A9   0A                     LD   a,(bc)   
05AA                CHAR2:       
05AA   6F                     LD   l,a   
05AB   18 F1                  JR   char1   
05AD                CHAR3:       
05AD   E5                     PUSH   hl   
05AE   DD E9                  JP   (ix)   
05B0                COLON:       
05B0   DD E9                  JP   (ix)   
05B2                COMMA:       
05B2                             ; TODO: limit this to SP >= BP
05B2   E1                     POP   hl   
05B3   DD E9                  JP   (ix)   
05B5                DIV:         
05B5   03                     INC   bc   
05B6   0A                     LD   a,(bc)   
05B7   FE 5C                  CP   $5C   
05B9   CA 7D 08               JP   z,comment   
05BC   FE 41                  CP   "A"   
05BE   D2 09 08               JP   nc,command   
05C1   0B                     DEC   bc   
05C2   D1                     POP   de   
05C3   E1                     POP   hl   
05C4   C5                     PUSH   bc   ; preserve the IP
05C5   44 4D                  LD   bc,hl   
05C7   CD FD 05               CALL   divide   
05CA   EB                     EX   de,hl   
05CB   ED 53 F6 0C            LD   (vRemain),de   
05CF   C1                     POP   bc   
05D0   C3 9F 03               JP   add3   
05D3                DOT:         
05D3   E1                     POP   hl   
05D4   03                     INC   bc   
05D5   0A                     LD   a,(bc)   
05D6   FE 68                  CP   "h"   
05D8   20 05                  JR   nz,dot1   
05DA   CD 1F 09               CALL   prthex   
05DD   18 17                  JR   dot4   
05DF                DOT1:        
05DF   FE 73                  CP   "s"   
05E1   20 05                  JR   nz,dot2   
05E3   CD 42 09               CALL   prtstr   
05E6   18 0E                  JR   dot4   
05E8                DOT2:        
05E8   FE 63                  CP   "c"   
05EA   20 06                  JR   nz,dot3   
05EC   7D                     LD   a,l   
05ED   CD 85 00               CALL   putchar   
05F0   18 04                  JR   dot4   
05F2                DOT3:        
05F2   0B                     DEC   bc   
05F3   CD D7 08               CALL   prtdec   
05F6                DOT4:        
05F6   3E 20                  LD   a," "   
05F8   CD 85 00               CALL   putchar   
05FB   DD E9                  JP   (ix)   
05FD                             ; division subroutine.
05FD                             ; bc: divisor, de: dividend, hl: remainder
05FD                DIVIDE:      
05FD   21 00 00               LD   hl,0   ; zero the remainder
0600   3E 10                  LD   a,16   ; loop counter
0602                DIVIDE1:      ; shift the bits from bc (numerator) into hl (accumulator)
0602   CB 21                  SLA   c   
0604   CB 10                  RL   b   
0606   ED 6A                  ADC   hl,hl   
0608   ED 52                  SBC   hl,de   ; check if remainder >= denominator (hl>=de)
060A   38 03                  JR   c,divide2   
060C   0C                     INC   c   
060D   18 01                  JR   divide3   
060F                DIVIDE2:      ; remainder is not >= denominator, so we have to add de back to hl
060F   19                     ADD   hl,de   
0610                DIVIDE3:      
0610   3D                     DEC   a   
0611   20 EF                  JR   nz,divide1   
0613   50 59                  LD   de,bc   ; result from bc to de
0615   C9                     RET      
0616                             ; hl = value1, de = value2
0616                             ; hl = result
0616                EQUALS:      
0616   B7                     OR   a   ; reset the carry flag
0617   ED 52                  SBC   hl,de   ; only equality sets hl=0 here
0619   28 10                  JR   z,true1   
061B   C3 31 06               JP   false1   
061E                             ; hl = value1 de = value2
061E                             ; hl = result
061E                LESSTHANEQ:      
061E   B7                     OR   a   
061F   ED 52                  SBC   hl,de   
0621   18 05                  JR   lessthan1   
0623                             ; hl = value1 de = value2
0623                             ; hl = result
0623                LESSTHAN:      
0623   B7                     OR   a   
0624   ED 52                  SBC   hl,de   
0626   28 09                  JR   z,false1   
0628                LESSTHAN1:      
0628   FA 31 06               JP   m,false1   
062B                TRUE1:       
062B   21 FF FF               LD   hl,TRUE   
062E   E5                     PUSH   hl   
062F   DD E9                  JP   (ix)   
0631                NULL1:       
0631                FALSE1:      
0631   21 00 00               LD   hl,FALSE   
0634   E5                     PUSH   hl   
0635   DD E9                  JP   (ix)   
0637                LPAREN:      
0637   C3 DD 04               JP   block   
063A                             ; execute a block of code which ends with }
063A                             ; creates a root scope if BP == stack
063A                             ; else uses outer scope
063A                CARET:       
063A                GO:          
063A   D1                     POP   de   ; de = block*
063B                GO1:         
063B   7B                     LD   a,e   ; if block* == null, exit
063C   B2                     OR   d   
063D   20 02                  JR   nz,go2   
063F   DD E9                  JP   (ix)   
0641                GO2:         
0641   1A                     LD   a,(de)   
0642   FE 7B                  CP   "{"   
0644   28 07                  JR   z,goBlock1   
0646   FE 28                  CP   "("   
0648   C2 80 06               JP   nz,goFunc   
064B   13                     INC   de   ; de is the address to jump back to
064C   D5                     PUSH   de   ; push de just before stack frame
064D                GOBLOCK:      
064D                GOBLOCK1:      
064D   ED 53 F8 0C            LD   (vTemp1),de   ; save de
0651   21 80 0B               LD   hl,stack   ; de = BP, hl = stack, (sp) = code*
0654   FD 54                  LD   d,iyh   
0656   FD 5D                  LD   e,iyl   
0658   B7                     OR   a   ; if stack* == BP then this is the root_scope
0659   ED 52                  SBC   hl,de   
065B   ED 5B F8 0C            LD   de,(vTemp1)   ; restore de
065F   7D                     LD   a,l   ; if (not root_scope) then inherit scope vars from parent
0660   B4                     OR   h   
0661   3E 00                  LD   a,0   
0663   28 6C                  JR   z,goFunc8   
0665   C5                     PUSH   bc   ; push IP
0666   FD 4E 04               LD   c,(iy+4)   ; push arg_list* (parent)
0669   FD 46 05               LD   b,(iy+5)   
066C   FD 6E 02               LD   l,(iy+2)   ; push first_arg* (parent)
066F   FD 66 03               LD   h,(iy+3)   
0672                GOBLOCK2:      
0672   C5                     PUSH   bc   ; arg_list*
0673   E5                     PUSH   hl   ; first_arg*
0674   FD E5                  PUSH   iy   ; push BP
0676   FD 21 00 00            LD   iy,0   ; BP = SP
067A   FD 39                  ADD   iy,sp   
067C   42 4B                  LD   bc,de   ; bc = de = block*-1
067E   DD E9                  JP   (ix)   
0680                GOFUNC:      ; execute function
0680   EB                     EX   de,hl   ; hl = func*
0681   5E                     LD   e,(hl)   ; de = partial_array*
0682   23                     INC   hl   
0683   56                     LD   d,(hl)   
0684   23                     INC   hl   
0685   7B                     LD   a,e   ; if partial_array* == null skip
0686   B2                     OR   d   
0687   28 21                  JR   z,goFunc3   
0689   ED 43 F8 0C            LD   (vTemp1),bc   
068D   22 FA 0C               LD   (vTemp2),hl   ; save bc,hl
0690   EB                     EX   de,hl   ; hl = partial_array*
0691   2B                     DEC   hl   ; bc = count
0692   46                     LD   b,(hl)   
0693   2B                     DEC   hl   
0694   4E                     LD   c,(hl)   
0695   23                     INC   hl   ; push each item on stack
0696   23                     INC   hl   
0697   18 06                  JR   goFunc2   
0699                GOFUNC1:      
0699   5E                     LD   e,(hl)   ; de = partial item
069A   23                     INC   hl   
069B   56                     LD   d,(hl)   
069C   23                     INC   hl   
069D   D5                     PUSH   de   ; push on stack
069E   0B                     DEC   bc   
069F                GOFUNC2:      
069F   79                     LD   a,c   ; if count != 0 then loop
06A0   B0                     OR   b   
06A1   20 F6                  JR   nz,goFunc1   
06A3   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore bc
06A7   2A FA 0C               LD   hl,(vTemp2)   ; restore hl
06AA                GOFUNC3:      
06AA   5E                     LD   e,(hl)   ; de = block*
06AB   23                     INC   hl   
06AC   56                     LD   d,(hl)   
06AD   23                     INC   hl   
06AE   ED 53 F8 0C            LD   (vTemp1),de   ; save block*
06B2   5E                     LD   e,(hl)   ; de = arg_list*
06B3   23                     INC   hl   
06B4   56                     LD   d,(hl)   
06B5   23                     INC   hl   
06B6   EB                     EX   de,hl   ; hl = arg_list*
06B7   ED 5B F8 0C            LD   de,(vTemp1)   ; restore de = block*
06BB   7D                     LD   a,l   ; if arg_list* == null a = 0
06BC   B4                     OR   h   
06BD   20 03                  JR   nz,goFunc4   
06BF   AF                     XOR   a   ; a = num_args (zero), num locals (zero)
06C0   18 0F                  JR   goFunc8   
06C2                GOFUNC4:      ; allocate locals
06C2   2B                     DEC   hl   ; a = num_locals*, de = hblock* hl = arg_list*
06C3   7E                     LD   a,(hl)   
06C4   18 03                  JR   goFunc6   
06C6                GOFUNC5:      ; loop
06C6   3B                     DEC   sp   
06C7   3B                     DEC   sp   
06C8   3D                     DEC   a   
06C9                GOFUNC6:      
06C9   B7                     OR   a   
06CA   20 FA                  JR   nz,goFunc5   ; end loop
06CC                GOFUNC7:      
06CC   2B                     DEC   hl   ; a = num_args* x 2
06CD   7E                     LD   a,(hl)   
06CE   23                     INC   hl   
06CF   23                     INC   hl   
06D0   87                     ADD   a,a   ; a *= 2
06D1                GOFUNC8:      
06D1   C5                     PUSH   bc   ; push IP
06D2   44 4D                  LD   bc,hl   
06D4   21 02 00               LD   hl,2   ; hl = first_arg* (BP+8), a = num args offset
06D7   85                     ADD   a,l   
06D8   6F                     LD   l,a   
06D9   39                     ADD   hl,sp   
06DA   18 96                  JR   goBlock2   
06DC                HEXNUM:      
06DC   21 00 00               LD   hl,0   ; Clear hl to accept the number
06DF                HEXNUM1:      
06DF   03                     INC   bc   
06E0   0A                     LD   a,(bc)   ; Get the character which is a numeral
06E1   CB 77                  BIT   6,a   ; is it uppercase alpha?
06E3   28 02                  JR   z,hexnum2   ; no a decimal
06E5   D6 07                  SUB   7   ; sub 7  to make $a - $F
06E7                HEXNUM2:      
06E7   D6 30                  SUB   $30   ; form decimal digit
06E9   DA 67 07               JP   c,num2   
06EC   FE 10                  CP   $0F+1   
06EE   D2 67 07               JP   nc,num2   
06F1   29                     ADD   hl,hl   ; 2X ; Multiply digit(s) in hl by 16
06F2   29                     ADD   hl,hl   ; 4X
06F3   29                     ADD   hl,hl   ; 8X
06F4   29                     ADD   hl,hl   ; 16X
06F5   85                     ADD   a,l   ; add into bottom of hl
06F6   6F                     LD   l,a   
06F7   18 E6                  JR   hexnum1   
06F9                IDENTU:      
06F9   0A                     LD   a,(bc)   ; a = identifier char
06FA   D6 41                  SUB   "A"   ; "A" = 0
06FC   18 05                  JR   ident1   
06FE                IDENTL:      
06FE   0A                     LD   a,(bc)   
06FF   D6 61                  SUB   "a"   
0701   C6 1A                  ADD   a,26   
0703                IDENT1:      
0703   87                     ADD   a,a   ; l = a * 2
0704   6F                     LD   l,a   
0705   26 0C                  LD   h,msb(vars)   
0707   22 F0 0C               LD   (vPointer),hl   ; store address in setter
070A   5E                     LD   e,(hl)   
070B   23                     INC   hl   
070C   56                     LD   d,(hl)   
070D   D5                     PUSH   de   
070E   DD E9                  JP   (ix)   
0710                             ; if
0710                             ; condition then -- value
0710                IF:          
0710   03                     INC   bc   
0711   0A                     LD   a,(bc)   
0712   FE 3F                  CP   "?"   
0714   28 06                  JR   z,ifte   
0716   0B                     DEC   bc   
0717   11 00 00               LD   de,0   ; NUL pointer for else
071A   18 01                  JR   ifte1   
071C                             ; ifte
071C                             ; condition then else -- value
071C                IFTE:        
071C   D1                     POP   de   ; de = else
071D                IFTE1:       
071D   E1                     POP   hl   ; hl = then
071E   E3                     EX   (sp),hl   ; hl = condition, (sp) = then
071F   7C                     LD   a,h   
0720   B5                     OR   l   
0721   E1                     POP   hl   ; hl = then
0722   CA 3B 06               JP   z,go1   ; if z de = else
0725   EB                     EX   de,hl   ; condition = false, de = then
0726   C3 3B 06               JP   go1   
0729                MUL:         
0729   D1                     POP   de   ; get first value
072A   E1                     POP   hl   
072B                MUL2:        
072B   C5                     PUSH   bc   ; Preserve the IP
072C   44 4D                  LD   bc,hl   ; bc = 2nd value
072E   21 00 00               LD   hl,0   
0731   3E 10                  LD   a,16   
0733                MUL3:        
0733   29                     ADD   hl,hl   
0734   CB 13                  RL   e   
0736   CB 12                  RL   d   
0738   30 04                  JR   nc,$+6   
073A   09                     ADD   hl,bc   
073B   30 01                  JR   nc,$+3   
073D   13                     INC   de   
073E   3D                     DEC   a   
073F   20 F2                  JR   nz,mul3   
0741   C1                     POP   bc   ; Restore the IP
0742   C3 9F 03               JP   add3   
0745                NUM:         
0745   21 00 00               LD   hl,$0000   ; Clear hl to accept the number
0748   0A                     LD   a,(bc)   ; Get numeral or -
0749   FE 2D                  CP   "-"   
074B   20 01                  JR   nz,num0   
074D   03                     INC   bc   ; move to next char, no flags affected
074E                NUM0:        
074E   08                     EX   af,af'   ; save zero flag = 0 for later
074F                NUM1:        
074F   0A                     LD   a,(bc)   ; read digit
0750   D6 30                  SUB   "0"   ; less than 0?
0752   38 13                  JR   c,num2   ; not a digit, exit loop
0754   FE 0A                  CP   10   ; greater that 9?
0756   30 0F                  JR   nc,num2   ; not a digit, exit loop
0758   03                     INC   bc   ; inc IP
0759   54 5D                  LD   de,hl   ; multiply hl * 10
075B   29                     ADD   hl,hl   
075C   29                     ADD   hl,hl   
075D   19                     ADD   hl,de   
075E   29                     ADD   hl,hl   
075F   85                     ADD   a,l   ; add digit in a to hl
0760   6F                     LD   l,a   
0761   3E 00                  LD   a,0   
0763   8C                     ADC   a,h   
0764   67                     LD   h,a   
0765   18 E8                  JR   num1   
0767                NUM2:        
0767   0B                     DEC   bc   
0768   08                     EX   af,af'   ; restore zero flag
0769   20 07                  JR   nz,num3   
076B   EB                     EX   de,hl   ; negate the value of hl
076C   21 00 00               LD   hl,0   
076F   B7                     OR   a   ; jump to sub2
0770   ED 52                  SBC   hl,de   
0772                NUM3:        
0772   E5                     PUSH   hl   ; Put the number on the stack
0773   DD E9                  JP   (ix)   ; and process the next character
0775                REMAIN:      
0775   2A F6 0C               LD   hl,(vRemain)   
0778   E5                     PUSH   hl   
0779   DD E9                  JP   (ix)   
077B                RPAREN:      
077B   FD 4E 08               LD   c,(iy+8)   ; IP = block* just under stack frame
077E   FD 46 09               LD   b,(iy+9)   
0781   DD E9                  JP   (ix)   
0783                             ; arg_list* block* -- ptr
0783                SEMICOLON:      
0783   D1                     POP   de   ; de = block* hl = heap*
0784   2A EC 0C               LD   hl,(vHeapPtr)   
0787   AF                     XOR   a   
0788   77                     LD   (hl),a   ; compile null partial_array*
0789   23                     INC   hl   
078A   77                     LD   (hl),a   
078B   23                     INC   hl   
078C   73                     LD   (hl),e   ; compile block*
078D   23                     INC   hl   
078E   72                     LD   (hl),d   
078F   23                     INC   hl   
0790   D1                     POP   de   ; de = block*
0791   73                     LD   (hl),e   ; compile arg_list*
0792   23                     INC   hl   
0793   72                     LD   (hl),d   
0794   23                     INC   hl   
0795   ED 5B EC 0C            LD   de,(vHeapPtr)   ; return func*
0799   D5                     PUSH   de   
079A   22 EC 0C               LD   (vHeapPtr),hl   ; heap* += 4
079D   DD E9                  JP   (ix)   
079F                             ; shiftLeft
079F                             ; value count -- value2          shift left count places
079F                SHIFTLEFT:      
079F   50 59                  LD   de,bc   ; save IP
07A1   C1                     POP   bc   ; bc = count
07A2   41                     LD   b,c   ; b = loop counter
07A3   E1                     POP   hl   
07A4   04                     INC   b   ; test for counter=0 case
07A5   18 01                  JR   shiftLeft2   
07A7                SHIFTLEFT1:      
07A7   29                     ADD   hl,hl   ; left shift hl
07A8                SHIFTLEFT2:      
07A8   10 FD                  DJNZ   shiftLeft1   
07AA   E5                     PUSH   hl   
07AB   42 4B                  LD   bc,de   ; restore IP
07AD   DD E9                  JP   (ix)   
07AF                             ; shiftRight
07AF                             ; value count -- value2          shift left count places
07AF                SHIFTRIGHT:      
07AF   50 59                  LD   de,bc   ; save IP
07B1   C1                     POP   bc   ; bc = count
07B2   41                     LD   b,c   ; b = loop counter
07B3   E1                     POP   hl   
07B4   04                     INC   b   ; test for counter=0 case
07B5   18 04                  JR   shiftRight2   
07B7                SHIFTRIGHT1:      
07B7   CB 3C                  SRL   h   ; right shift hl
07B9   CB 1D                  RR   l   
07BB                SHIFTRIGHT2:      
07BB   10 FA                  DJNZ   shiftRight1   
07BD   E5                     PUSH   hl   
07BE   42 4B                  LD   bc,de   ; restore IP
07C0   DD E9                  JP   (ix)   
07C2                             ; string
07C2                             ; -- ptr                        ; points to start of string chars,
07C2                             ; length is stored at start - 2 bytes
07C2                STRING:      
07C2   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap*
07C5   23                     INC   hl   ; skip length field to start
07C6   23                     INC   hl   
07C7   E5                     PUSH   hl   ; save start of string
07C8   03                     INC   bc   ; point to next char
07C9   18 03                  JR   string2   
07CB                STRING1:      
07CB   77                     LD   (hl),a   
07CC   23                     INC   hl   ; increase count
07CD   03                     INC   bc   ; point to next char
07CE                STRING2:      
07CE   0A                     LD   a,(bc)   
07CF   FE 22                  CP   DQUOTE   ; " is the string terminator
07D1   20 F8                  JR   nz,string1   
07D3   FE 60                  CP   "`"   ; ` is the string terminator used in testing
07D5   20 F4                  JR   nz,string1   
07D7   AF                     XOR   a   ; write NUL to terminate string
07D8   77                     LD   (hl),a   ; hl = end of string
07D9   23                     INC   hl   
07DA   22 EC 0C               LD   (vHeapPtr),hl   ; bump heap* to after end of string
07DD   2B                     DEC   hl   ; hl = end of string without terminator
07DE   D1                     POP   de   ; de = start of string
07DF   D5                     PUSH   de   ; return start of string
07E0   B7                     OR   a   ; hl = length bytes, de = start of string
07E1   ED 52                  SBC   hl,de   
07E3   EB                     EX   de,hl   
07E4   2B                     DEC   hl   ; write length bytes to length field at start - 2
07E5   72                     LD   (hl),d   
07E6   2B                     DEC   hl   
07E7   73                     LD   (hl),e   
07E8   DD E9                  JP   (ix)   
07EA                MINUS:       ; negative sign or subtract
07EA   03                     INC   bc   ; check if sign of a number
07EB   0A                     LD   a,(bc)   
07EC   0B                     DEC   bc   
07ED   FE 30                  CP   "0"   
07EF   38 05                  JR   c,sub   
07F1   FE 3A                  CP   "9"+1   
07F3   DA 44 03               JP   c,num_   
07F6                SUB:         ; Subtract the value 2nd on stack from top of stack
07F6   03                     INC   bc   
07F7   FE 2D                  CP   "-"   
07F9   20 05                  JR   nz,sub1   
07FB   E1                     POP   hl   
07FC   2B                     DEC   hl   
07FD   C3 98 04               JP   assign0   
0800                SUB1:        
0800   0B                     DEC   bc   
0801   D1                     POP   de   
0802   E1                     POP   hl   
0803   B7                     OR   a   
0804   ED 52                  SBC   hl,de   
0806   C3 9F 03               JP   add3   
0809                             ;*******************************************************************
0809                             ; commands
0809                             ; a contains command letter
0809                             ; bc points to command letter
0809                             ;*******************************************************************
0809                COMMAND:      
0809   FE 61                  CP   "a"   ; \a absolute
080B   CA 50 08               JP   z,abs1   
080E   FE 62                  CP   "b"   ; \x break
0810   CA 86 08               JP   z,break   
0813   FE 63                  CP   "c"   ; \c chars
0815   CA A0 08               JP   z,chars   
0818   FE 70                  CP   "p"   ; \p partial
081A   CA 5D 08               JP   z,partial   
081D   FE 66                  CP   "f"   ; \f false
081F   CA 31 06               JP   z,false1   
0822   FE 69                  CP   "i"   ; \i input
0824   CA A8 08               JP   z,input   
0827   FE 6B                  CP   "k"   ; \k key
0829   CA B3 08               JP   z,key   
082C   FE 6E                  CP   "n"   ; \n numbers
082E   CA CF 08               JP   z,numbers   
0831   FE 6F                  CP   "o"   ; \o output
0833   CA BC 08               JP   z,output   
0836   FE 73                  CP   "s"   ; \s select
0838   CA C5 08               JP   z,select   
083B   FE 74                  CP   "t"   ; \t true
083D   CA 2B 06               JP   z,true1   
0840   FE 76                  CP   "v"   ; \v invert
0842   CA D5 03               JP   z,invert   
0845   FE 78                  CP   "x"   ; \x xor
0847   CA CA 03               JP   z,xor   
084A                ERROR1:      
084A   21 01 00               LD   hl,1   ; error 1: unknown command
084D   C3 34 0A               JP   error   
0850                ABS1:        
0850   E1                     POP   hl   
0851   CB 7C                  BIT   7,h   
0853   C8                     RET   z   
0854   AF                     XOR   a   
0855   95                     SUB   l   
0856   6F                     LD   l,a   
0857   9F                     SBC   a,a   
0858   94                     SUB   h   
0859   67                     LD   h,a   
085A   E5                     PUSH   hl   
085B   DD E9                  JP   (ix)   
085D                             ; partial
085D                             ; array* func* -- func1*
085D                PARTIAL:      
085D   E1                     POP   hl   ; h1 = func*
085E   ED 5B EC 0C            LD   de,(vHeapPtr)   ; de = heap* = partial_array*
0862   ED 43 F8 0C            LD   (vTemp1),bc   ; save IP
0866   01 06 00               LD   bc,6   ; bc = count
0869   ED B0                  LDIR      ; clone func
086B   ED 4B F8 0C            LD   bc,(vTemp1)   ; restore IP
086F   2A EC 0C               LD   hl,(vHeapPtr)   ; hl = heap* = partial_array*
0872   ED 53 EC 0C            LD   (vHeapPtr),de   ; heap* += 6
0876   D1                     POP   de   ; de = array*
0877   E5                     PUSH   hl   ; return partial_array*
0878   73                     LD   (hl),e   ; compile array*
0879   23                     INC   hl   
087A   72                     LD   (hl),d   
087B   DD E9                  JP   (ix)   
087D                COMMENT:      
087D   03                     INC   bc   ; point to next char
087E   0A                     LD   a,(bc)   
087F   FE 20                  CP   " "   ; terminate on any char less than SP
0881   30 FA                  JR   nc,comment   
0883   0B                     DEC   bc   
0884   DD E9                  JP   (ix)   
0886                BREAK:       
0886   E1                     POP   hl   
0887   7D                     LD   a,l   
0888   B4                     OR   h   
0889   28 02                  JR   z,break1   
088B   DD E9                  JP   (ix)   
088D                BREAK1:      
088D   FD 5D                  LD   e,iyl   ; get block* just under stack frame
088F   FD 54                  LD   d,iyh   
0891   21 08 00               LD   hl,8   
0894   19                     ADD   hl,de   
0895   23                     INC   hl   
0896   23                     INC   hl   
0897   FD 75 02               LD   (iy+2),l   ; force first_arg* into this scope for clean up
089A   FD 74 03               LD   (iy+3),h   ; first_arg* = address of block*
089D   C3 46 05               JP   blockEnd   
08A0                CHARS:       
08A0   21 01 00               LD   hl,1   
08A3                CHARS1:      
08A3   22 E6 0C               LD   (vDataWidth),hl   
08A6   DD E9                  JP   (ix)   
08A8                             ; Z80 port input
08A8                             ; port -- value
08A8                INPUT:       
08A8   E1                     POP   hl   
08A9   59                     LD   e,c   ; save IP
08AA   4D                     LD   c,l   
08AB   ED 68                  IN   l,(c)   
08AD   26 00                  LD   h,0   
08AF   4B                     LD   c,e   ; restore IP
08B0   E5                     PUSH   hl   
08B1   DD E9                  JP   (ix)   
08B3                KEY:         
08B3   CD 81 00               CALL   getchar   
08B6   26 00                  LD   h,0   
08B8   6F                     LD   l,a   
08B9   E5                     PUSH   hl   
08BA   DD E9                  JP   (ix)   
08BC                             ; Z80 port output
08BC                             ; value port --
08BC                OUTPUT:      
08BC   E1                     POP   hl   
08BD   59                     LD   e,c   ; save IP
08BE   4D                     LD   c,l   
08BF   E1                     POP   hl   
08C0   ED 69                  OUT   (c),l   
08C2   4B                     LD   c,e   ; restore IP
08C3   DD E9                  JP   (ix)   
08C5                             ; select
08C5                             ; index array -- value
08C5                SELECT:      
08C5   D1                     POP   de   ; de = array
08C6   E1                     POP   hl   ; hl = index
08C7   29                     ADD   hl,hl   ; if data width = 2 then double
08C8   19                     ADD   hl,de   ; add addr
08C9   5E                     LD   e,(hl)   
08CA   23                     INC   hl   
08CB   56                     LD   d,(hl)   
08CC   C3 3B 06               JP   go1   
08CF                NUMBERS:      
08CF   21 02 00               LD   hl,2   
08D2   C3 A3 08               JP   chars1   
08D5                             ; 
08D5                             ; 
08D5                             ; 
08D5                             ; 
08D5                FILTER:      
08D5                MAP:         
08D5                SCAN:        
08D5   DD E9                  JP   (ix)   
08D7                             ; print decimal
08D7                             ; hl = value
08D7                PRTDEC:      
08D7   CB 7C                  BIT   7,h   
08D9   28 0B                  JR   z,prtdec0   
08DB   3E 2D                  LD   a,"-"   
08DD   CD 85 00               CALL   putchar   
08E0   AF                     XOR   a   
08E1   95                     SUB   l   
08E2   6F                     LD   l,a   
08E3   9F                     SBC   a,a   
08E4   94                     SUB   h   
08E5   67                     LD   h,a   
08E6                PRTDEC0:      
08E6   C5                     PUSH   bc   
08E7   0E 00                  LD   c,0   ; leading zeros flag = false
08E9   11 F0 D8               LD   de,-10000   
08EC   CD 08 09               CALL   prtdec1   
08EF   11 18 FC               LD   de,-1000   
08F2   CD 08 09               CALL   prtdec1   
08F5   11 9C FF               LD   de,-100   
08F8   CD 08 09               CALL   prtdec1   
08FB   1E F6                  LD   e,-10   
08FD   CD 08 09               CALL   prtdec1   
0900   0C                     INC   c   ; flag = true for at least digit
0901   1E FF                  LD   e,-1   
0903   CD 08 09               CALL   prtdec1   
0906   C1                     POP   bc   
0907   C9                     RET      
0908                PRTDEC1:      
0908   06 2F                  LD   b,"0"-1   
090A                PRTDEC2:      
090A   04                     INC   b   
090B   19                     ADD   hl,de   
090C   38 FC                  JR   c,prtdec2   
090E   ED 52                  SBC   hl,de   
0910   3E 30                  LD   a,"0"   
0912   B8                     CP   b   
0913   20 05                  JR   nz,prtdec3   
0915   AF                     XOR   a   
0916   B1                     OR   c   
0917   C8                     RET   z   
0918   18 01                  JR   prtdec4   
091A                PRTDEC3:      
091A   0C                     INC   c   
091B                PRTDEC4:      
091B   78                     LD   a,b   
091C   C3 85 00               JP   putchar   
091F                PRTHEX:      ; display hl as a 16-bit number in hex.
091F   C5                     PUSH   bc   ; preserve the IP
0920   7C                     LD   a,h   
0921   CD 2A 09               CALL   prthex2   
0924   7D                     LD   a,l   
0925   CD 2A 09               CALL   prthex2   
0928   C1                     POP   bc   
0929   C9                     RET      
092A                PRTHEX2:      
092A   4F                     LD   c,a   
092B   1F                     RRA      
092C   1F                     RRA      
092D   1F                     RRA      
092E   1F                     RRA      
092F   CD 33 09               CALL   prthex3   
0932   79                     LD   a,c   
0933                PRTHEX3:      
0933   E6 0F                  AND   0x0F   
0935   C6 90                  ADD   a,0x90   
0937   27                     DAA      
0938   CE 40                  ADC   a,0x40   
093A   27                     DAA      
093B   C3 85 00               JP   putchar   
093E                PRTSTR0:      
093E   CD 85 00               CALL   putchar   
0941   23                     INC   hl   
0942                PRTSTR:      
0942   7E                     LD   a,(hl)   
0943   B7                     OR   a   
0944   20 F8                  JR   nz,prtstr0   
0946   C9                     RET      
0947                             ; **************************************************************************
0947                             ; calculate nesting value
0947                             ; a is char to be tested,
0947                             ; e is the nesting value (initially 0)
0947                             ; e is increased by ( and [
0947                             ; e is decreased by ) and ]
0947                             ; e has its bit 7 toggled by `
0947                             ; limited to 127 levels
0947                             ; **************************************************************************
0947                NESTING:      
0947   FE 22                  CP   DQUOTE   ; quote char
0949   28 06                  JR   z,nesting0   
094B   FE 60                  CP   "`"   ; quote char
094D   28 02                  JR   z,nesting0   
094F   18 0A                  JR   nesting1   
0951                NESTING0:      
0951   CB 7B                  BIT   7,e   
0953   28 03                  JR   z,nesting1a   
0955   CB BB                  RES   7,e   
0957   C9                     RET      
0958                NESTING1A:      
0958   CB FB                  SET   7,e   
095A   C9                     RET      
095B                NESTING1:      
095B   CB 7B                  BIT   7,e   
095D   C0                     RET   nz   
095E   FE 7B                  CP   "{"   
0960   28 08                  JR   z,nesting2   
0962   FE 5B                  CP   "["   
0964   28 04                  JR   z,nesting2   
0966   FE 28                  CP   "("   
0968   20 02                  JR   nz,nesting3   
096A                NESTING2:      
096A   1C                     INC   e   
096B   C9                     RET      
096C                NESTING3:      
096C   FE 7D                  CP   "}"   
096E   28 07                  JR   z,nesting4   
0970   FE 5D                  CP   "]"   
0972   28 03                  JR   z,nesting4   
0974   FE 29                  CP   ")"   
0976   C0                     RET   nz   
0977                NESTING4:      
0977   1D                     DEC   e   
0978   C9                     RET      
0979                PROMPT:      
0979   CD 89 09               CALL   printStr   
097C   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0981   C9                     RET      
0982                CRLF:        
0982   CD 89 09               CALL   printStr   
0985   0D 0A 00               .CSTR   "\r\n"   
0988   C9                     RET      
0989                             ; prints a null teminated string
0989                             ; the string should be immedaitely following the call
0989                PRINTSTR:      
0989   E3                     EX   (sp),hl   ; swap			
098A   CD 42 09               CALL   prtstr   
098D   23                     INC   hl   ; inc past NUL
098E   E3                     EX   (sp),hl   ; put it back	
098F   C9                     RET      
0990                INIT:        
0990   DD 2A EA 0C            LD   ix,(vNext)   
0994   FD 21 80 0B            LD   iy,STACK   
0998   21 80 01               LD   hl,isysVars   
099B   11 E6 0C               LD   de,sysVars   
099E   01 10 00               LD   bc,8 * 2   
09A1   ED B0                  LDIR      
09A3   21 00 0C               LD   hl,vars   ; 52 vars LO HI
09A6   06 34                  LD   b,26*2   
09A8   AF                     XOR   a   
09A9                INIT0:       
09A9   77                     LD   (hl),a   
09AA   23                     INC   hl   
09AB   10 FC                  DJNZ   init0   
09AD   C9                     RET      
09AE                START:       
09AE   31 80 0B               LD   sp,STACK   ; start of monty
09B1   CD 90 09               CALL   init   ; setups
09B4   CD 89 09               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
09B7   4D 6F 6E 74 79 20 56 30 2E 30 0D 0A 00 .CSTR   "Monty V0.0\r\n"   
09C4                INTERPRET:      
09C4   CD 79 09               CALL   prompt   
09C7   01 00 00               LD   bc,0   ; load bc with offset into TIB, decide char into tib or execute or control
09CA   ED 43 E8 0C            LD   (vTIBPtr),bc   
09CE                INTERPRET2:      ; calc nesting (a macro might have changed it)
09CE   1E 00                  LD   e,0   ; initilize nesting value
09D0   C5                     PUSH   bc   ; save offset into TIB,
09D1                             ; bc is also the count of chars in TIB
09D1   21 00 0D               LD   hl,TIB   ; hl is start of TIB
09D4   18 06                  JR   interpret4   
09D6                INTERPRET3:      
09D6   7E                     LD   a,(hl)   ; a = char in TIB
09D7   23                     INC   hl   ; inc pointer into TIB
09D8   0B                     DEC   bc   ; dec count of chars in TIB
09D9   CD 47 09               CALL   nesting   ; update nesting value
09DC                INTERPRET4:      
09DC   79                     LD   a,c   ; is count zero?
09DD   B0                     OR   b   
09DE   20 F6                  JR   nz,interpret3   ; if not loop
09E0   C1                     POP   bc   ; restore offset into TIB
09E1                INTERPRET5:      
09E1   CD 81 00               CALL   getchar   ; loop around waiting for character from serial port
09E4   FE 20                  CP   $20   ; compare to space
09E6   30 0A                  JR   nc,interpret6   ; if >= space, if below 20 set cary flag
09E8   FE 00                  CP   $0   ; is it end of string? NUL end of string
09EA                             ; ???? NEEDED?
09EA   28 27                  JR   z,interpret8   
09EC   FE 0D                  CP   "\r"   ; carriage return? ascii 13
09EE   28 10                  JR   z,interpret7   ; if anything else its macro/control
09F0                             ; macro
09F0                             ;  ld (vTIBPtr),bc
09F0                             ;  ld hl,ctrlCodes
09F0                             ;  add a,l			            ; look up key of macros
09F0                             ;  ld l,a
09F0                             ;  ld e,(hl)
09F0                             ;  ld a,e
09F0                             ;  or a
09F0                             ;  jr z,macro1
09F0                             ;  ld d,msb(macros)
09F0                             ;  push de
09F0                             ;  call call		            ; monty exec_ operation and jump to it
09F0                             ;  db DC1,0
09F0                             ; macro1:
09F0                             ;  ld bc,(vTIBPtr)
09F0   18 DC                  JR   interpret2   
09F2                INTERPRET6:      
09F2   21 00 0D               LD   hl,TIB   
09F5   09                     ADD   hl,bc   
09F6   77                     LD   (hl),a   ; store the character in textbuf
09F7   03                     INC   bc   
09F8   CD 85 00               CALL   putchar   ; echo character to screen
09FB   CD 47 09               CALL   nesting   
09FE   18 E1                  JR   interpret5   ; wait for next character
0A00                INTERPRET7:      
0A00   21 00 0D               LD   hl,TIB   
0A03   09                     ADD   hl,bc   
0A04   36 0D                  LD   (hl),"\r"   ; store the crlf in textbuf
0A06   23                     INC   hl   
0A07   36 0A                  LD   (hl),"\n"   
0A09   23                     INC   hl   
0A0A   03                     INC   bc   
0A0B   03                     INC   bc   
0A0C   CD 82 09               CALL   crlf   ; echo character to screen
0A0F   7B                     LD   a,e   ; if zero nesting append and ETX after \r
0A10   B7                     OR   a   
0A11   20 CE                  JR   nz,interpret5   
0A13                INTERPRET8:      
0A13   ED 43 E8 0C            LD   (vTIBPtr),bc   
0A17   01 00 0D               LD   bc,TIB   ; Instructions stored on heap at address HERE,
0A1A                             ; we pressed enter
0A1A   0B                     DEC   bc   
0A1B                NEXT:        
0A1B   03                     INC   bc   ; Increment the IP
0A1C   0A                     LD   a,(bc)   ; Get the next character and dispatch
0A1D   FE 20                  CP   " "   ; whitespace?
0A1F   28 FA                  JR   z,next   ; space? ignore
0A21   38 07                  JR   c,next1   
0A23   6F                     LD   l,a   ; index into table
0A24   26 02                  LD   h,msb(opcodesBase)   ; start address of jump table
0A26   6E                     LD   l,(hl)   ; get low jump address
0A27   26 03                  LD   h,msb(page4)   ; Load h with the 1st page address
0A29   E9                     JP   (hl)   ; Jump to routine
0A2A                NEXT1:       
0A2A   FE 00                  CP   NUL   ; end of input string?
0A2C   28 03                  JR   z,exit_   
0A2E   C3 C4 09               JP   interpret   ; no, other whitespace, macros?
0A31                EXIT_:       
0A31   60 69                  LD   hl,bc   
0A33   E9                     JP   (hl)   
0A34                ERROR:       
0A34   CD 89 09               CALL   printStr   
0A37   45 72 72 6F 72 20 00   .CSTR   "Error "   
0A3E   CD D7 08               CALL   prtdec   
0A41   C3 C4 09               JP   interpret   
0A44                          ALIGN   $100   
0B00                             ; .org RAMSTART
0B00                          DS   DSIZE   
0B80                STACK:       
0B80                          ALIGN   $100   
0C00                VARS:        
0C00                          DS   26 * 2 * 4   ; 52 vars, 3 bytes, RST LO HI CHAR
0CD0                RESTARTS:      
0CD0                RST08:    DS   2   
0CD2                RST10:    DS   2   
0CD4                RST18:    DS   2   
0CD6                RST20:    DS   2   
0CD8                RST28:    DS   2   
0CDA                RST30:    DS   2   ; 
0CDC                BAUD:     DS   2   ; 
0CDE                INTVEC:   DS   2   ; 
0CE0                NMIVEC:   DS   2   ; 
0CE2                GETCVEC:   DS   2   ; 
0CE4                PUTCVEC:   DS   2   ; 
0CE6                SYSVARS:      
0CE6                             ; initialised sys variables
0CE6                VDATAWIDTH:   DS   2   ; 
0CE8                VTIBPTR:   DS   2   ; 
0CEA                VNEXT:    DS   2   ; 
0CEC                VHEAPPTR:   DS   2   ; 
0CEE                             ; uninitialised sys variables
0CEE                VBLOCKEND:   DS   2   ; 
0CF0                VPOINTER:   DS   2   ; 
0CF2                VHASHSTR:   DS   2   ; 
0CF4                VLASTDEF:   DS   2   ; 
0CF6                VREMAIN:   DS   2   ; 
0CF8                VTEMP1:   DS   2   ; 
0CFA                VTEMP2:   DS   2   ; 
0CFC                TBPTR:    DS   2   ; reserved for tests
0CFE                          ALIGN   $100   
0D00                TIB:      DS   TIBSIZE   
0E00                          ALIGN   $100   
0E00                PAD:      DS   $100   
0F00                HEAP:        


TEC_1:              0001 DEFINED AT LINE 1 IN constants.asm
RC2014:             0000 DEFINED AT LINE 2 IN constants.asm
EXTENDED:           0000 DEFINED AT LINE 4 IN constants.asm
LOADER:             0000 DEFINED AT LINE 20 IN constants.asm
BITBANG:            0000 DEFINED AT LINE 21 IN constants.asm
ROMSTART:           0000 DEFINED AT LINE 23 IN constants.asm
                    > USED AT LINE 100 IN IOSerial.asm
                    > USED AT LINE 105 IN IOSerial.asm
                    > USED AT LINE 112 IN IOSerial.asm
                    > USED AT LINE 119 IN IOSerial.asm
                    > USED AT LINE 126 IN IOSerial.asm
                    > USED AT LINE 133 IN IOSerial.asm
                    > USED AT LINE 140 IN IOSerial.asm
                    > USED AT LINE 147 IN IOSerial.asm
                    > USED AT LINE 153 IN IOSerial.asm
                    > USED AT LINE 195 IN IOSerial.asm
                    > USED AT LINE 56 IN monty.asm
RAMSTART:           1800 DEFINED AT LINE 24 IN constants.asm
ROMSIZE:            0800 DEFINED AT LINE 25 IN constants.asm
RAMSIZE:            0800 DEFINED AT LINE 26 IN constants.asm
CONTROL:            0080 DEFINED AT LINE 22 IN IOSerial.asm
                    > USED AT LINE 471 IN IOSerial.asm
                    > USED AT LINE 493 IN IOSerial.asm
STATUS:             0080 DEFINED AT LINE 23 IN IOSerial.asm
                    > USED AT LINE 304 IN IOSerial.asm
                    > USED AT LINE 317 IN IOSerial.asm
TDR:                0081 DEFINED AT LINE 24 IN IOSerial.asm
                    > USED AT LINE 309 IN IOSerial.asm
RDR:                0081 DEFINED AT LINE 25 IN IOSerial.asm
                    > USED AT LINE 321 IN IOSerial.asm
MRESET:             0003 DEFINED AT LINE 32 IN IOSerial.asm
                    > USED AT LINE 470 IN IOSerial.asm
DIV_64:             0002 DEFINED AT LINE 35 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F7E2:               0000 DEFINED AT LINE 39 IN IOSerial.asm
F7O2:               0004 DEFINED AT LINE 40 IN IOSerial.asm
F7E1:               0008 DEFINED AT LINE 41 IN IOSerial.asm
F7O1:               000C DEFINED AT LINE 42 IN IOSerial.asm
F8N2:               0010 DEFINED AT LINE 43 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
F8N1:               0014 DEFINED AT LINE 44 IN IOSerial.asm
F8E1:               0018 DEFINED AT LINE 45 IN IOSerial.asm
F8O1:               001C DEFINED AT LINE 46 IN IOSerial.asm
RTSLID:             0000 DEFINED AT LINE 50 IN IOSerial.asm
                    > USED AT LINE 492 IN IOSerial.asm
RTSLIE:             0020 DEFINED AT LINE 51 IN IOSerial.asm
RTSHID:             0040 DEFINED AT LINE 52 IN IOSerial.asm
RTSLIDB:            0060 DEFINED AT LINE 53 IN IOSerial.asm
RIE:                0080 DEFINED AT LINE 57 IN IOSerial.asm
RDRF:               0000 DEFINED AT LINE 61 IN IOSerial.asm
TDRE:               0001 DEFINED AT LINE 62 IN IOSerial.asm
DCD:                0002 DEFINED AT LINE 63 IN IOSerial.asm
CTS:                0003 DEFINED AT LINE 64 IN IOSerial.asm
FE:                 0004 DEFINED AT LINE 65 IN IOSerial.asm
OVRN:               0005 DEFINED AT LINE 66 IN IOSerial.asm
PE:                 0006 DEFINED AT LINE 67 IN IOSerial.asm
IRQ:                0007 DEFINED AT LINE 68 IN IOSerial.asm
KEYBUF:             0000 DEFINED AT LINE 76 IN IOSerial.asm
SCAN:               08D5 DEFINED AT LINE 1364 IN monty.asm
DISPLY:             0002 DEFINED AT LINE 78 IN IOSerial.asm
PORT3:              0003 DEFINED AT LINE 79 IN IOSerial.asm
PORT4:              0004 DEFINED AT LINE 80 IN IOSerial.asm
PORT5:              0005 DEFINED AT LINE 81 IN IOSerial.asm
PORT6:              0006 DEFINED AT LINE 82 IN IOSerial.asm
PORT7:              0007 DEFINED AT LINE 83 IN IOSerial.asm
ESC:                001B DEFINED AT LINE 26 IN monty.asm
CR:                 000D DEFINED AT LINE 97 IN IOSerial.asm
LF:                 000A DEFINED AT LINE 98 IN IOSerial.asm
RSTVEC:             0000 DEFINED AT LINE 102 IN IOSerial.asm
SEVENSEGMENT:       0040 DEFINED AT LINE 158 IN IOSerial.asm
PWRUP:              0050 DEFINED AT LINE 180 IN IOSerial.asm
                    > USED AT LINE 476 IN IOSerial.asm
BITIME:             0053 DEFINED AT LINE 182 IN IOSerial.asm
BITIM1:             0058 DEFINED AT LINE 186 IN IOSerial.asm
                    > USED AT LINE 188 IN IOSerial.asm
INTRET:             005F DEFINED AT LINE 191 IN IOSerial.asm
                    > USED AT LINE 452 IN IOSerial.asm
TXDATA:             006B DEFINED AT LINE 299 IN IOSerial.asm
                    > USED AT LINE 464 IN IOSerial.asm
TXCHAR:             006B DEFINED AT LINE 300 IN IOSerial.asm
TXCHAR1:            006D DEFINED AT LINE 303 IN IOSerial.asm
                    > USED AT LINE 307 IN IOSerial.asm
RXDATA:             0078 DEFINED AT LINE 315 IN IOSerial.asm
                    > USED AT LINE 462 IN IOSerial.asm
RXCHAR:             0078 DEFINED AT LINE 316 IN IOSerial.asm
                    > USED AT LINE 320 IN IOSerial.asm
GETCHAR:            0081 DEFINED AT LINE 440 IN IOSerial.asm
                    > USED AT LINE 1324 IN monty.asm
                    > USED AT LINE 1565 IN monty.asm
PUTCHAR:            0085 DEFINED AT LINE 444 IN IOSerial.asm
                    > USED AT LINE 771 IN monty.asm
                    > USED AT LINE 778 IN monty.asm
                    > USED AT LINE 1375 IN monty.asm
                    > USED AT LINE 1416 IN monty.asm
                    > USED AT LINE 1440 IN monty.asm
                    > USED AT LINE 1443 IN monty.asm
                    > USED AT LINE 1596 IN monty.asm
RESET:              008B DEFINED AT LINE 450 IN IOSerial.asm
                    > USED AT LINE 103 IN IOSerial.asm
DSIZE:              0080 DEFINED AT LINE 16 IN monty.asm
                    > USED AT LINE 4 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 17 IN monty.asm
                    > USED AT LINE 46 IN ram.asm
TRUE:               00-1 DEFINED AT LINE 18 IN monty.asm
                    > USED AT LINE 829 IN monty.asm
FALSE:              0000 DEFINED AT LINE 19 IN monty.asm
                    > USED AT LINE 834 IN monty.asm
EMPTY:              0000 DEFINED AT LINE 20 IN monty.asm
UNUSED:             00FF DEFINED AT LINE 21 IN monty.asm
NUL:                0000 DEFINED AT LINE 22 IN monty.asm
                    > USED AT LINE 1632 IN monty.asm
DC1:                0011 DEFINED AT LINE 23 IN monty.asm
DC2:                0012 DEFINED AT LINE 24 IN monty.asm
DC3:                0013 DEFINED AT LINE 25 IN monty.asm
DQUOTE:             0022 DEFINED AT LINE 27 IN monty.asm
                    > USED AT LINE 1169 IN monty.asm
                    > USED AT LINE 1462 IN monty.asm
Z80_RST8:           00CF DEFINED AT LINE 29 IN monty.asm
MACROS:             0180 DEFINED AT LINE 61 IN monty.asm
ISYSVARS:           0180 DEFINED AT LINE 66 IN monty.asm
                    > USED AT LINE 1520 IN monty.asm
OPCODESBASE:        0200 DEFINED AT LINE 74 IN monty.asm
CTRLCODES:          0200 DEFINED AT LINE 76 IN monty.asm
OPCODES:            0220 DEFINED AT LINE 110 IN monty.asm
PAGE4:              0300 DEFINED AT LINE 213 IN monty.asm
PLUS_:              0300 DEFINED AT LINE 215 IN monty.asm
ADDR_:              0303 DEFINED AT LINE 217 IN monty.asm
AND_:               0306 DEFINED AT LINE 219 IN monty.asm
ARG_:               0309 DEFINED AT LINE 221 IN monty.asm
TILDE_:             030C DEFINED AT LINE 223 IN monty.asm
ARRBEGIN_:          030F DEFINED AT LINE 225 IN monty.asm
ARREND_:            0312 DEFINED AT LINE 227 IN monty.asm
ARRINDEX_:          0315 DEFINED AT LINE 229 IN monty.asm
BACKSLASH_:         0318 DEFINED AT LINE 231 IN monty.asm
BLOCK_:             031B DEFINED AT LINE 233 IN monty.asm
BLOCKEND_:          031E DEFINED AT LINE 235 IN monty.asm
CHAR_:              0321 DEFINED AT LINE 237 IN monty.asm
COMMAND_:           0324 DEFINED AT LINE 239 IN monty.asm
SEMICOLON_:         0327 DEFINED AT LINE 241 IN monty.asm
DOT_:               032A DEFINED AT LINE 243 IN monty.asm
REMAIN_:            032D DEFINED AT LINE 245 IN monty.asm
COLON_:             0330 DEFINED AT LINE 247 IN monty.asm
IDENTU_:            0333 DEFINED AT LINE 249 IN monty.asm
IDENTL_:            0336 DEFINED AT LINE 251 IN monty.asm
IF_:                0339 DEFINED AT LINE 253 IN monty.asm
MUL_:               033C DEFINED AT LINE 255 IN monty.asm
NOT_:               033F DEFINED AT LINE 257 IN monty.asm
NUM_:               0344 DEFINED AT LINE 260 IN monty.asm
                    > USED AT LINE 1196 IN monty.asm
HEXNUM_:            0347 DEFINED AT LINE 262 IN monty.asm
OR_:                034A DEFINED AT LINE 264 IN monty.asm
CARET_:             034D DEFINED AT LINE 266 IN monty.asm
COMMA_:             0350 DEFINED AT LINE 268 IN monty.asm
STRING_:            0353 DEFINED AT LINE 270 IN monty.asm
MINUS_:             0356 DEFINED AT LINE 272 IN monty.asm
EQ_:                0359 DEFINED AT LINE 274 IN monty.asm
EQ0:                0363 DEFINED AT LINE 281 IN monty.asm
                    > USED AT LINE 278 IN monty.asm
EQ1:                0364 DEFINED AT LINE 283 IN monty.asm
                    > USED AT LINE 259 IN monty.asm
GT_:                0368 DEFINED AT LINE 287 IN monty.asm
LPAREN_:            0373 DEFINED AT LINE 295 IN monty.asm
LT_:                0376 DEFINED AT LINE 297 IN monty.asm
LT1:                037F DEFINED AT LINE 304 IN monty.asm
                    > USED AT LINE 294 IN monty.asm
DIV_:               0388 DEFINED AT LINE 309 IN monty.asm
NOP_:               038B DEFINED AT LINE 311 IN monty.asm
RPAREN_:            038D DEFINED AT LINE 313 IN monty.asm
PLUS:               0390 DEFINED AT LINE 320 IN monty.asm
                    > USED AT LINE 216 IN monty.asm
ADD1:               039B DEFINED AT LINE 328 IN monty.asm
                    > USED AT LINE 324 IN monty.asm
ADD3:               039F DEFINED AT LINE 333 IN monty.asm
                    > USED AT LINE 359 IN monty.asm
                    > USED AT LINE 752 IN monty.asm
                    > USED AT LINE 1045 IN monty.asm
                    > USED AT LINE 1210 IN monty.asm
ADDR:               03AA DEFINED AT LINE 343 IN monty.asm
                    > USED AT LINE 218 IN monty.asm
AND:                03B6 DEFINED AT LINE 349 IN monty.asm
                    > USED AT LINE 220 IN monty.asm
AND1:               03BD DEFINED AT LINE 357 IN monty.asm
                    > USED AT LINE 369 IN monty.asm
OR:                 03C1 DEFINED AT LINE 361 IN monty.asm
                    > USED AT LINE 265 IN monty.asm
XOR:                03CA DEFINED AT LINE 371 IN monty.asm
                    > USED AT LINE 1243 IN monty.asm
XOR1:               03CB DEFINED AT LINE 373 IN monty.asm
                    > USED AT LINE 385 IN monty.asm
INVERT:             03D5 DEFINED AT LINE 383 IN monty.asm
                    > USED AT LINE 1241 IN monty.asm
ARG:                03DB DEFINED AT LINE 390 IN monty.asm
                    > USED AT LINE 222 IN monty.asm
ARG0:               03F9 DEFINED AT LINE 411 IN monty.asm
                    > USED AT LINE 417 IN monty.asm
ARG0A:              0402 DEFINED AT LINE 419 IN monty.asm
                    > USED AT LINE 396 IN monty.asm
                    > USED AT LINE 403 IN monty.asm
ARG1:               0407 DEFINED AT LINE 422 IN monty.asm
                    > USED AT LINE 415 IN monty.asm
ARG1A:              040F DEFINED AT LINE 429 IN monty.asm
                    > USED AT LINE 421 IN monty.asm
TILDE:              0412 DEFINED AT LINE 433 IN monty.asm
                    > USED AT LINE 224 IN monty.asm
ARRBEGIN:           0414 DEFINED AT LINE 436 IN monty.asm
                    > USED AT LINE 226 IN monty.asm
ARREND:             0430 DEFINED AT LINE 450 IN monty.asm
                    > USED AT LINE 228 IN monty.asm
ARREND1:            044A DEFINED AT LINE 466 IN monty.asm
                    > USED AT LINE 482 IN monty.asm
ARREND2:            045A DEFINED AT LINE 476 IN monty.asm
                    > USED AT LINE 472 IN monty.asm
ARRINDEX:           047E DEFINED AT LINE 503 IN monty.asm
                    > USED AT LINE 230 IN monty.asm
ARRINDEX0:          0486 DEFINED AT LINE 509 IN monty.asm
ARRINDEX1:          0487 DEFINED AT LINE 511 IN monty.asm
                    > USED AT LINE 508 IN monty.asm
ARRINDEX2:          0493 DEFINED AT LINE 520 IN monty.asm
                    > USED AT LINE 517 IN monty.asm
ASSIGN:             0496 DEFINED AT LINE 525 IN monty.asm
                    > USED AT LINE 280 IN monty.asm
ASSIGN0:            0498 DEFINED AT LINE 528 IN monty.asm
                    > USED AT LINE 327 IN monty.asm
                    > USED AT LINE 337 IN monty.asm
                    > USED AT LINE 1203 IN monty.asm
ASSIGNX:            0499 DEFINED AT LINE 530 IN monty.asm
ASSIGN1:            04A5 DEFINED AT LINE 538 IN monty.asm
                    > USED AT LINE 535 IN monty.asm
BACKSLASH:          04A7 DEFINED AT LINE 545 IN monty.asm
                    > USED AT LINE 232 IN monty.asm
ARG_LIST:           04A7 DEFINED AT LINE 546 IN monty.asm
ARG_LIST1:          04B1 DEFINED AT LINE 553 IN monty.asm
                    > USED AT LINE 574 IN monty.asm
ARG_LIST1A:         04B9 DEFINED AT LINE 559 IN monty.asm
                    > USED AT LINE 556 IN monty.asm
ARG_LIST2:          04C1 DEFINED AT LINE 564 IN monty.asm
ARG_LIST3:          04C9 DEFINED AT LINE 572 IN monty.asm
                    > USED AT LINE 558 IN monty.asm
                    > USED AT LINE 570 IN monty.asm
ARG_LIST4:          04CC DEFINED AT LINE 575 IN monty.asm
                    > USED AT LINE 561 IN monty.asm
                    > USED AT LINE 563 IN monty.asm
ARG_LIST5:          04D1 DEFINED AT LINE 580 IN monty.asm
                    > USED AT LINE 578 IN monty.asm
BLOCK:              04DD DEFINED AT LINE 591 IN monty.asm
                    > USED AT LINE 234 IN monty.asm
                    > USED AT LINE 839 IN monty.asm
BLOCK1:             04E1 DEFINED AT LINE 595 IN monty.asm
                    > USED AT LINE 599 IN monty.asm
                    > USED AT LINE 621 IN monty.asm
                    > USED AT LINE 624 IN monty.asm
                    > USED AT LINE 629 IN monty.asm
                    > USED AT LINE 633 IN monty.asm
BLOCK2:             050D DEFINED AT LINE 622 IN monty.asm
                    > USED AT LINE 609 IN monty.asm
                    > USED AT LINE 611 IN monty.asm
                    > USED AT LINE 613 IN monty.asm
BLOCK3:             0510 DEFINED AT LINE 625 IN monty.asm
                    > USED AT LINE 616 IN monty.asm
                    > USED AT LINE 618 IN monty.asm
                    > USED AT LINE 620 IN monty.asm
BLOCK4:             0518 DEFINED AT LINE 631 IN monty.asm
                    > USED AT LINE 602 IN monty.asm
                    > USED AT LINE 604 IN monty.asm
                    > USED AT LINE 606 IN monty.asm
BLOCK5:             051B DEFINED AT LINE 634 IN monty.asm
                    > USED AT LINE 630 IN monty.asm
BLOCK6:             0543 DEFINED AT LINE 653 IN monty.asm
                    > USED AT LINE 640 IN monty.asm
BLOCKEND:           0546 DEFINED AT LINE 657 IN monty.asm
                    > USED AT LINE 236 IN monty.asm
                    > USED AT LINE 1302 IN monty.asm
BLOCKEND1:          0572 DEFINED AT LINE 679 IN monty.asm
                    > USED AT LINE 672 IN monty.asm
BLOCKEND2:          057E DEFINED AT LINE 686 IN monty.asm
                    > USED AT LINE 678 IN monty.asm
BLOCKEND3:          0590 DEFINED AT LINE 700 IN monty.asm
                    > USED AT LINE 692 IN monty.asm
CHAR:               059B DEFINED AT LINE 711 IN monty.asm
                    > USED AT LINE 238 IN monty.asm
CHAR1:              059E DEFINED AT LINE 713 IN monty.asm
                    > USED AT LINE 724 IN monty.asm
CHAR2:              05AA DEFINED AT LINE 722 IN monty.asm
                    > USED AT LINE 719 IN monty.asm
CHAR3:              05AD DEFINED AT LINE 725 IN monty.asm
                    > USED AT LINE 717 IN monty.asm
COLON:              05B0 DEFINED AT LINE 729 IN monty.asm
                    > USED AT LINE 248 IN monty.asm
COMMA:              05B2 DEFINED AT LINE 731 IN monty.asm
                    > USED AT LINE 269 IN monty.asm
DIV:                05B5 DEFINED AT LINE 736 IN monty.asm
                    > USED AT LINE 310 IN monty.asm
DOT:                05D3 DEFINED AT LINE 754 IN monty.asm
                    > USED AT LINE 244 IN monty.asm
DOT1:               05DF DEFINED AT LINE 762 IN monty.asm
                    > USED AT LINE 759 IN monty.asm
DOT2:               05E8 DEFINED AT LINE 767 IN monty.asm
                    > USED AT LINE 764 IN monty.asm
DOT3:               05F2 DEFINED AT LINE 773 IN monty.asm
                    > USED AT LINE 769 IN monty.asm
DOT4:               05F6 DEFINED AT LINE 776 IN monty.asm
                    > USED AT LINE 761 IN monty.asm
                    > USED AT LINE 766 IN monty.asm
                    > USED AT LINE 772 IN monty.asm
DIVIDE:             05FD DEFINED AT LINE 784 IN monty.asm
                    > USED AT LINE 748 IN monty.asm
DIVIDE1:            0602 DEFINED AT LINE 787 IN monty.asm
                    > USED AT LINE 799 IN monty.asm
DIVIDE2:            060F DEFINED AT LINE 795 IN monty.asm
                    > USED AT LINE 792 IN monty.asm
DIVIDE3:            0610 DEFINED AT LINE 797 IN monty.asm
                    > USED AT LINE 794 IN monty.asm
EQUALS:             0616 DEFINED AT LINE 805 IN monty.asm
                    > USED AT LINE 285 IN monty.asm
LESSTHANEQ:         061E DEFINED AT LINE 813 IN monty.asm
                    > USED AT LINE 306 IN monty.asm
LESSTHAN:           0623 DEFINED AT LINE 820 IN monty.asm
                    > USED AT LINE 308 IN monty.asm
LESSTHAN1:          0628 DEFINED AT LINE 825 IN monty.asm
                    > USED AT LINE 816 IN monty.asm
TRUE1:              062B DEFINED AT LINE 828 IN monty.asm
                    > USED AT LINE 808 IN monty.asm
                    > USED AT LINE 1239 IN monty.asm
NULL1:              0631 DEFINED AT LINE 832 IN monty.asm
FALSE1:             0631 DEFINED AT LINE 833 IN monty.asm
                    > USED AT LINE 809 IN monty.asm
                    > USED AT LINE 823 IN monty.asm
                    > USED AT LINE 826 IN monty.asm
                    > USED AT LINE 1227 IN monty.asm
LPAREN:             0637 DEFINED AT LINE 838 IN monty.asm
                    > USED AT LINE 296 IN monty.asm
CARET:              063A DEFINED AT LINE 844 IN monty.asm
                    > USED AT LINE 267 IN monty.asm
GO:                 063A DEFINED AT LINE 845 IN monty.asm
GO1:                063B DEFINED AT LINE 847 IN monty.asm
                    > USED AT LINE 1021 IN monty.asm
                    > USED AT LINE 1023 IN monty.asm
                    > USED AT LINE 1351 IN monty.asm
GO2:                0641 DEFINED AT LINE 852 IN monty.asm
                    > USED AT LINE 850 IN monty.asm
GOBLOCK:            064D DEFINED AT LINE 860 IN monty.asm
GOBLOCK1:           064D DEFINED AT LINE 861 IN monty.asm
                    > USED AT LINE 855 IN monty.asm
GOBLOCK2:           0672 DEFINED AT LINE 878 IN monty.asm
                    > USED AT LINE 960 IN monty.asm
GOFUNC:             0680 DEFINED AT LINE 887 IN monty.asm
                    > USED AT LINE 857 IN monty.asm
GOFUNC1:            0699 DEFINED AT LINE 906 IN monty.asm
                    > USED AT LINE 916 IN monty.asm
GOFUNC2:            069F DEFINED AT LINE 913 IN monty.asm
                    > USED AT LINE 905 IN monty.asm
GOFUNC3:            06AA DEFINED AT LINE 919 IN monty.asm
                    > USED AT LINE 895 IN monty.asm
GOFUNC4:            06C2 DEFINED AT LINE 936 IN monty.asm
                    > USED AT LINE 933 IN monty.asm
GOFUNC5:            06C6 DEFINED AT LINE 940 IN monty.asm
                    > USED AT LINE 946 IN monty.asm
GOFUNC6:            06C9 DEFINED AT LINE 944 IN monty.asm
                    > USED AT LINE 939 IN monty.asm
GOFUNC7:            06CC DEFINED AT LINE 947 IN monty.asm
GOFUNC8:            06D1 DEFINED AT LINE 953 IN monty.asm
                    > USED AT LINE 872 IN monty.asm
                    > USED AT LINE 935 IN monty.asm
HEXNUM:             06DC DEFINED AT LINE 962 IN monty.asm
                    > USED AT LINE 263 IN monty.asm
HEXNUM1:            06DF DEFINED AT LINE 964 IN monty.asm
                    > USED AT LINE 981 IN monty.asm
HEXNUM2:            06E7 DEFINED AT LINE 970 IN monty.asm
                    > USED AT LINE 968 IN monty.asm
IDENTU:             06F9 DEFINED AT LINE 982 IN monty.asm
                    > USED AT LINE 250 IN monty.asm
IDENTL:             06FE DEFINED AT LINE 986 IN monty.asm
                    > USED AT LINE 252 IN monty.asm
IDENT1:             0703 DEFINED AT LINE 990 IN monty.asm
                    > USED AT LINE 985 IN monty.asm
IF:                 0710 DEFINED AT LINE 1003 IN monty.asm
                    > USED AT LINE 254 IN monty.asm
IFTE:               071C DEFINED AT LINE 1013 IN monty.asm
                    > USED AT LINE 1007 IN monty.asm
IFTE1:              071D DEFINED AT LINE 1015 IN monty.asm
                    > USED AT LINE 1010 IN monty.asm
MUL:                0729 DEFINED AT LINE 1026 IN monty.asm
                    > USED AT LINE 256 IN monty.asm
MUL2:               072B DEFINED AT LINE 1029 IN monty.asm
MUL3:               0733 DEFINED AT LINE 1034 IN monty.asm
                    > USED AT LINE 1043 IN monty.asm
NUM:                0745 DEFINED AT LINE 1047 IN monty.asm
                    > USED AT LINE 261 IN monty.asm
NUM0:               074E DEFINED AT LINE 1053 IN monty.asm
                    > USED AT LINE 1051 IN monty.asm
NUM1:               074F DEFINED AT LINE 1055 IN monty.asm
                    > USED AT LINE 1072 IN monty.asm
NUM2:               0767 DEFINED AT LINE 1073 IN monty.asm
                    > USED AT LINE 972 IN monty.asm
                    > USED AT LINE 974 IN monty.asm
                    > USED AT LINE 1058 IN monty.asm
                    > USED AT LINE 1060 IN monty.asm
NUM3:               0772 DEFINED AT LINE 1081 IN monty.asm
                    > USED AT LINE 1076 IN monty.asm
REMAIN:             0775 DEFINED AT LINE 1085 IN monty.asm
                    > USED AT LINE 246 IN monty.asm
RPAREN:             077B DEFINED AT LINE 1090 IN monty.asm
                    > USED AT LINE 314 IN monty.asm
SEMICOLON:          0783 DEFINED AT LINE 1096 IN monty.asm
                    > USED AT LINE 242 IN monty.asm
SHIFTLEFT:          079F DEFINED AT LINE 1120 IN monty.asm
                    > USED AT LINE 301 IN monty.asm
SHIFTLEFT1:         07A7 DEFINED AT LINE 1127 IN monty.asm
                    > USED AT LINE 1130 IN monty.asm
SHIFTLEFT2:         07A8 DEFINED AT LINE 1129 IN monty.asm
                    > USED AT LINE 1126 IN monty.asm
SHIFTRIGHT:         07AF DEFINED AT LINE 1137 IN monty.asm
                    > USED AT LINE 291 IN monty.asm
SHIFTRIGHT1:        07B7 DEFINED AT LINE 1144 IN monty.asm
                    > USED AT LINE 1148 IN monty.asm
SHIFTRIGHT2:        07BB DEFINED AT LINE 1147 IN monty.asm
                    > USED AT LINE 1143 IN monty.asm
STRING:             07C2 DEFINED AT LINE 1156 IN monty.asm
                    > USED AT LINE 271 IN monty.asm
STRING1:            07CB DEFINED AT LINE 1163 IN monty.asm
                    > USED AT LINE 1170 IN monty.asm
                    > USED AT LINE 1172 IN monty.asm
STRING2:            07CE DEFINED AT LINE 1167 IN monty.asm
                    > USED AT LINE 1162 IN monty.asm
MINUS:              07EA DEFINED AT LINE 1189 IN monty.asm
                    > USED AT LINE 273 IN monty.asm
SUB:                07F6 DEFINED AT LINE 1197 IN monty.asm
                    > USED AT LINE 1194 IN monty.asm
SUB1:               0800 DEFINED AT LINE 1204 IN monty.asm
                    > USED AT LINE 1200 IN monty.asm
COMMAND:            0809 DEFINED AT LINE 1217 IN monty.asm
                    > USED AT LINE 240 IN monty.asm
                    > USED AT LINE 742 IN monty.asm
ERROR1:             084A DEFINED AT LINE 1244 IN monty.asm
ABS1:               0850 DEFINED AT LINE 1248 IN monty.asm
                    > USED AT LINE 1219 IN monty.asm
PARTIAL:            085D DEFINED AT LINE 1263 IN monty.asm
                    > USED AT LINE 1225 IN monty.asm
COMMENT:            087D DEFINED AT LINE 1279 IN monty.asm
                    > USED AT LINE 740 IN monty.asm
                    > USED AT LINE 1283 IN monty.asm
BREAK:              0886 DEFINED AT LINE 1287 IN monty.asm
                    > USED AT LINE 1221 IN monty.asm
BREAK1:             088D DEFINED AT LINE 1293 IN monty.asm
                    > USED AT LINE 1291 IN monty.asm
CHARS:              08A0 DEFINED AT LINE 1304 IN monty.asm
                    > USED AT LINE 1223 IN monty.asm
CHARS1:             08A3 DEFINED AT LINE 1306 IN monty.asm
                    > USED AT LINE 1355 IN monty.asm
INPUT:              08A8 DEFINED AT LINE 1313 IN monty.asm
                    > USED AT LINE 1229 IN monty.asm
KEY:                08B3 DEFINED AT LINE 1323 IN monty.asm
                    > USED AT LINE 1231 IN monty.asm
OUTPUT:             08BC DEFINED AT LINE 1332 IN monty.asm
                    > USED AT LINE 1235 IN monty.asm
SELECT:             08C5 DEFINED AT LINE 1343 IN monty.asm
                    > USED AT LINE 1237 IN monty.asm
NUMBERS:            08CF DEFINED AT LINE 1353 IN monty.asm
                    > USED AT LINE 1233 IN monty.asm
FILTER:             08D5 DEFINED AT LINE 1362 IN monty.asm
MAP:                08D5 DEFINED AT LINE 1363 IN monty.asm
PRTDEC:             08D7 DEFINED AT LINE 1371 IN monty.asm
                    > USED AT LINE 775 IN monty.asm
                    > USED AT LINE 1642 IN monty.asm
PRTDEC0:            08E6 DEFINED AT LINE 1382 IN monty.asm
                    > USED AT LINE 1373 IN monty.asm
PRTDEC1:            0908 DEFINED AT LINE 1398 IN monty.asm
                    > USED AT LINE 1386 IN monty.asm
                    > USED AT LINE 1388 IN monty.asm
                    > USED AT LINE 1390 IN monty.asm
                    > USED AT LINE 1392 IN monty.asm
                    > USED AT LINE 1395 IN monty.asm
PRTDEC2:            090A DEFINED AT LINE 1400 IN monty.asm
                    > USED AT LINE 1403 IN monty.asm
PRTDEC3:            091A DEFINED AT LINE 1412 IN monty.asm
                    > USED AT LINE 1407 IN monty.asm
PRTDEC4:            091B DEFINED AT LINE 1414 IN monty.asm
                    > USED AT LINE 1411 IN monty.asm
PRTHEX:             091F DEFINED AT LINE 1418 IN monty.asm
                    > USED AT LINE 760 IN monty.asm
PRTHEX2:            092A DEFINED AT LINE 1426 IN monty.asm
                    > USED AT LINE 1421 IN monty.asm
                    > USED AT LINE 1423 IN monty.asm
PRTHEX3:            0933 DEFINED AT LINE 1434 IN monty.asm
                    > USED AT LINE 1432 IN monty.asm
PRTSTR0:            093E DEFINED AT LINE 1442 IN monty.asm
                    > USED AT LINE 1448 IN monty.asm
PRTSTR:             0942 DEFINED AT LINE 1445 IN monty.asm
                    > USED AT LINE 765 IN monty.asm
                    > USED AT LINE 1512 IN monty.asm
NESTING:            0947 DEFINED AT LINE 1461 IN monty.asm
                    > USED AT LINE 1556 IN monty.asm
                    > USED AT LINE 1597 IN monty.asm
NESTING0:           0951 DEFINED AT LINE 1467 IN monty.asm
                    > USED AT LINE 1463 IN monty.asm
                    > USED AT LINE 1465 IN monty.asm
NESTING1A:          0958 DEFINED AT LINE 1472 IN monty.asm
                    > USED AT LINE 1469 IN monty.asm
NESTING1:           095B DEFINED AT LINE 1475 IN monty.asm
                    > USED AT LINE 1466 IN monty.asm
NESTING2:           096A DEFINED AT LINE 1484 IN monty.asm
                    > USED AT LINE 1479 IN monty.asm
                    > USED AT LINE 1481 IN monty.asm
NESTING3:           096C DEFINED AT LINE 1487 IN monty.asm
                    > USED AT LINE 1483 IN monty.asm
NESTING4:           0977 DEFINED AT LINE 1494 IN monty.asm
                    > USED AT LINE 1489 IN monty.asm
                    > USED AT LINE 1491 IN monty.asm
PROMPT:             0979 DEFINED AT LINE 1498 IN monty.asm
                    > USED AT LINE 1540 IN monty.asm
CRLF:               0982 DEFINED AT LINE 1503 IN monty.asm
                    > USED AT LINE 1609 IN monty.asm
PRINTSTR:           0989 DEFINED AT LINE 1510 IN monty.asm
                    > USED AT LINE 1499 IN monty.asm
                    > USED AT LINE 1504 IN monty.asm
                    > USED AT LINE 1536 IN monty.asm
                    > USED AT LINE 1640 IN monty.asm
INIT:               0990 DEFINED AT LINE 1517 IN monty.asm
                    > USED AT LINE 7
                    > USED AT LINE 1535 IN monty.asm
INIT0:              09A9 DEFINED AT LINE 1527 IN monty.asm
                    > USED AT LINE 1530 IN monty.asm
START:              09AE DEFINED AT LINE 1533 IN monty.asm
                    > USED AT LINE 8
INTERPRET:          09C4 DEFINED AT LINE 1539 IN monty.asm
                    > USED AT LINE 1634 IN monty.asm
                    > USED AT LINE 1643 IN monty.asm
INTERPRET2:         09CE DEFINED AT LINE 1545 IN monty.asm
                    > USED AT LINE 1589 IN monty.asm
INTERPRET3:         09D6 DEFINED AT LINE 1552 IN monty.asm
                    > USED AT LINE 1561 IN monty.asm
INTERPRET4:         09DC DEFINED AT LINE 1558 IN monty.asm
                    > USED AT LINE 1550 IN monty.asm
INTERPRET5:         09E1 DEFINED AT LINE 1564 IN monty.asm
                    > USED AT LINE 1598 IN monty.asm
                    > USED AT LINE 1612 IN monty.asm
INTERPRET6:         09F2 DEFINED AT LINE 1591 IN monty.asm
                    > USED AT LINE 1567 IN monty.asm
INTERPRET7:         0A00 DEFINED AT LINE 1600 IN monty.asm
                    > USED AT LINE 1572 IN monty.asm
INTERPRET8:         0A13 DEFINED AT LINE 1614 IN monty.asm
                    > USED AT LINE 1570 IN monty.asm
NEXT:               0A1B DEFINED AT LINE 1620 IN monty.asm
                    > USED AT LINE 69 IN monty.asm
                    > USED AT LINE 1624 IN monty.asm
NEXT1:              0A2A DEFINED AT LINE 1631 IN monty.asm
                    > USED AT LINE 1625 IN monty.asm
EXIT_:              0A31 DEFINED AT LINE 1635 IN monty.asm
                    > USED AT LINE 1633 IN monty.asm
ERROR:              0A34 DEFINED AT LINE 1639 IN monty.asm
                    > USED AT LINE 1246 IN monty.asm
STACK:              0B80 DEFINED AT LINE 5 IN ram.asm
                    > USED AT LINE 451 IN IOSerial.asm
                    > USED AT LINE 6
                    > USED AT LINE 863 IN monty.asm
                    > USED AT LINE 1519 IN monty.asm
                    > USED AT LINE 1534 IN monty.asm
VARS:               0C00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 1524 IN monty.asm
RESTARTS:           0CD0 DEFINED AT LINE 11 IN ram.asm
RST08:              0CD0 DEFINED AT LINE 13 IN ram.asm
                    > USED AT LINE 107 IN IOSerial.asm
                    > USED AT LINE 453 IN IOSerial.asm
RST10:              0CD2 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 114 IN IOSerial.asm
                    > USED AT LINE 454 IN IOSerial.asm
RST18:              0CD4 DEFINED AT LINE 15 IN ram.asm
                    > USED AT LINE 121 IN IOSerial.asm
                    > USED AT LINE 455 IN IOSerial.asm
RST20:              0CD6 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 128 IN IOSerial.asm
                    > USED AT LINE 456 IN IOSerial.asm
RST28:              0CD8 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 135 IN IOSerial.asm
                    > USED AT LINE 457 IN IOSerial.asm
RST30:              0CDA DEFINED AT LINE 18 IN ram.asm
                    > USED AT LINE 142 IN IOSerial.asm
                    > USED AT LINE 458 IN IOSerial.asm
BAUD:               0CDC DEFINED AT LINE 19 IN ram.asm
INTVEC:             0CDE DEFINED AT LINE 20 IN ram.asm
                    > USED AT LINE 149 IN IOSerial.asm
                    > USED AT LINE 459 IN IOSerial.asm
NMIVEC:             0CE0 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 197 IN IOSerial.asm
                    > USED AT LINE 460 IN IOSerial.asm
GETCVEC:            0CE2 DEFINED AT LINE 22 IN ram.asm
                    > USED AT LINE 441 IN IOSerial.asm
                    > USED AT LINE 463 IN IOSerial.asm
PUTCVEC:            0CE4 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 446 IN IOSerial.asm
                    > USED AT LINE 465 IN IOSerial.asm
SYSVARS:            0CE6 DEFINED AT LINE 25 IN ram.asm
                    > USED AT LINE 1521 IN monty.asm
VDATAWIDTH:         0CE6 DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 470 IN monty.asm
                    > USED AT LINE 506 IN monty.asm
                    > USED AT LINE 533 IN monty.asm
                    > USED AT LINE 1307 IN monty.asm
VTIBPTR:            0CE8 DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 1543 IN monty.asm
                    > USED AT LINE 1615 IN monty.asm
VNEXT:              0CEA DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 1518 IN monty.asm
VHEAPPTR:           0CEC DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 460 IN monty.asm
                    > USED AT LINE 492 IN monty.asm
                    > USED AT LINE 493 IN monty.asm
                    > USED AT LINE 548 IN monty.asm
                    > USED AT LINE 582 IN monty.asm
                    > USED AT LINE 648 IN monty.asm
                    > USED AT LINE 651 IN monty.asm
                    > USED AT LINE 1098 IN monty.asm
                    > USED AT LINE 1113 IN monty.asm
                    > USED AT LINE 1115 IN monty.asm
                    > USED AT LINE 1157 IN monty.asm
                    > USED AT LINE 1176 IN monty.asm
                    > USED AT LINE 1265 IN monty.asm
                    > USED AT LINE 1270 IN monty.asm
                    > USED AT LINE 1271 IN monty.asm
VBLOCKEND:          0CEE DEFINED AT LINE 36 IN ram.asm
VPOINTER:           0CF0 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 344 IN monty.asm
                    > USED AT LINE 346 IN monty.asm
                    > USED AT LINE 347 IN monty.asm
                    > USED AT LINE 425 IN monty.asm
                    > USED AT LINE 513 IN monty.asm
                    > USED AT LINE 531 IN monty.asm
                    > USED AT LINE 994 IN monty.asm
VHASHSTR:           0CF2 DEFINED AT LINE 38 IN ram.asm
VLASTDEF:           0CF4 DEFINED AT LINE 39 IN ram.asm
VREMAIN:            0CF6 DEFINED AT LINE 40 IN ram.asm
                    > USED AT LINE 750 IN monty.asm
                    > USED AT LINE 1086 IN monty.asm
VTEMP1:             0CF8 DEFINED AT LINE 41 IN ram.asm
                    > USED AT LINE 453 IN monty.asm
                    > USED AT LINE 494 IN monty.asm
                    > USED AT LINE 643 IN monty.asm
                    > USED AT LINE 652 IN monty.asm
                    > USED AT LINE 862 IN monty.asm
                    > USED AT LINE 868 IN monty.asm
                    > USED AT LINE 896 IN monty.asm
                    > USED AT LINE 917 IN monty.asm
                    > USED AT LINE 924 IN monty.asm
                    > USED AT LINE 930 IN monty.asm
                    > USED AT LINE 1266 IN monty.asm
                    > USED AT LINE 1269 IN monty.asm
VTEMP2:             0CFA DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 897 IN monty.asm
                    > USED AT LINE 918 IN monty.asm
TBPTR:              0CFC DEFINED AT LINE 43 IN ram.asm
TIB:                0D00 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 1549 IN monty.asm
                    > USED AT LINE 1592 IN monty.asm
                    > USED AT LINE 1601 IN monty.asm
                    > USED AT LINE 1616 IN monty.asm
PAD:                0E00 DEFINED AT LINE 49 IN ram.asm
HEAP:               0F00 DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 70 IN monty.asm
                    > USED AT LINE 636 IN monty.asm
